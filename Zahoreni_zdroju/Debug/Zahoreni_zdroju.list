
Zahoreni_zdroju.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b96c  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000218  0800ba2c  0800ba2c  0001ba2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bc44  0800bc44  000201e0  2**0
                  CONTENTS
  4 .ARM          00000000  0800bc44  0800bc44  000201e0  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800bc44  0800bc44  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bc44  0800bc44  0001bc44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800bc48  0800bc48  0001bc48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800bc4c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000013d8  200001e0  0800be2c  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200015b8  0800be2c  000215b8  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00027608  00000000  00000000  00020208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000048e3  00000000  00000000  00047810  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000016b0  00000000  00000000  0004c0f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000014f8  00000000  00000000  0004d7a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001f379  00000000  00000000  0004eca0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001e15d  00000000  00000000  0006e019  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a402b  00000000  00000000  0008c176  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001301a1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000054f8  00000000  00000000  001301f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200001e0 	.word	0x200001e0
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800ba14 	.word	0x0800ba14

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200001e4 	.word	0x200001e4
 8000104:	0800ba14 	.word	0x0800ba14

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_shi>:
 8000118:	b403      	push	{r0, r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0040      	lsls	r0, r0, #1
 8000120:	0049      	lsls	r1, r1, #1
 8000122:	5e09      	ldrsh	r1, [r1, r0]
 8000124:	0049      	lsls	r1, r1, #1
 8000126:	448e      	add	lr, r1
 8000128:	bc03      	pop	{r0, r1}
 800012a:	4770      	bx	lr

0800012c <__udivsi3>:
 800012c:	2200      	movs	r2, #0
 800012e:	0843      	lsrs	r3, r0, #1
 8000130:	428b      	cmp	r3, r1
 8000132:	d374      	bcc.n	800021e <__udivsi3+0xf2>
 8000134:	0903      	lsrs	r3, r0, #4
 8000136:	428b      	cmp	r3, r1
 8000138:	d35f      	bcc.n	80001fa <__udivsi3+0xce>
 800013a:	0a03      	lsrs	r3, r0, #8
 800013c:	428b      	cmp	r3, r1
 800013e:	d344      	bcc.n	80001ca <__udivsi3+0x9e>
 8000140:	0b03      	lsrs	r3, r0, #12
 8000142:	428b      	cmp	r3, r1
 8000144:	d328      	bcc.n	8000198 <__udivsi3+0x6c>
 8000146:	0c03      	lsrs	r3, r0, #16
 8000148:	428b      	cmp	r3, r1
 800014a:	d30d      	bcc.n	8000168 <__udivsi3+0x3c>
 800014c:	22ff      	movs	r2, #255	; 0xff
 800014e:	0209      	lsls	r1, r1, #8
 8000150:	ba12      	rev	r2, r2
 8000152:	0c03      	lsrs	r3, r0, #16
 8000154:	428b      	cmp	r3, r1
 8000156:	d302      	bcc.n	800015e <__udivsi3+0x32>
 8000158:	1212      	asrs	r2, r2, #8
 800015a:	0209      	lsls	r1, r1, #8
 800015c:	d065      	beq.n	800022a <__udivsi3+0xfe>
 800015e:	0b03      	lsrs	r3, r0, #12
 8000160:	428b      	cmp	r3, r1
 8000162:	d319      	bcc.n	8000198 <__udivsi3+0x6c>
 8000164:	e000      	b.n	8000168 <__udivsi3+0x3c>
 8000166:	0a09      	lsrs	r1, r1, #8
 8000168:	0bc3      	lsrs	r3, r0, #15
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x46>
 800016e:	03cb      	lsls	r3, r1, #15
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b83      	lsrs	r3, r0, #14
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x52>
 800017a:	038b      	lsls	r3, r1, #14
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0b43      	lsrs	r3, r0, #13
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x5e>
 8000186:	034b      	lsls	r3, r1, #13
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b03      	lsrs	r3, r0, #12
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x6a>
 8000192:	030b      	lsls	r3, r1, #12
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0ac3      	lsrs	r3, r0, #11
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x76>
 800019e:	02cb      	lsls	r3, r1, #11
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a83      	lsrs	r3, r0, #10
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x82>
 80001aa:	028b      	lsls	r3, r1, #10
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0a43      	lsrs	r3, r0, #9
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x8e>
 80001b6:	024b      	lsls	r3, r1, #9
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a03      	lsrs	r3, r0, #8
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x9a>
 80001c2:	020b      	lsls	r3, r1, #8
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	d2cd      	bcs.n	8000166 <__udivsi3+0x3a>
 80001ca:	09c3      	lsrs	r3, r0, #7
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xa8>
 80001d0:	01cb      	lsls	r3, r1, #7
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0983      	lsrs	r3, r0, #6
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xb4>
 80001dc:	018b      	lsls	r3, r1, #6
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0943      	lsrs	r3, r0, #5
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xc0>
 80001e8:	014b      	lsls	r3, r1, #5
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0903      	lsrs	r3, r0, #4
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xcc>
 80001f4:	010b      	lsls	r3, r1, #4
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	08c3      	lsrs	r3, r0, #3
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xd8>
 8000200:	00cb      	lsls	r3, r1, #3
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0883      	lsrs	r3, r0, #2
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xe4>
 800020c:	008b      	lsls	r3, r1, #2
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0843      	lsrs	r3, r0, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xf0>
 8000218:	004b      	lsls	r3, r1, #1
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	1a41      	subs	r1, r0, r1
 8000220:	d200      	bcs.n	8000224 <__udivsi3+0xf8>
 8000222:	4601      	mov	r1, r0
 8000224:	4152      	adcs	r2, r2
 8000226:	4610      	mov	r0, r2
 8000228:	4770      	bx	lr
 800022a:	e7ff      	b.n	800022c <__udivsi3+0x100>
 800022c:	b501      	push	{r0, lr}
 800022e:	2000      	movs	r0, #0
 8000230:	f000 f8f0 	bl	8000414 <__aeabi_idiv0>
 8000234:	bd02      	pop	{r1, pc}
 8000236:	46c0      	nop			; (mov r8, r8)

08000238 <__aeabi_uidivmod>:
 8000238:	2900      	cmp	r1, #0
 800023a:	d0f7      	beq.n	800022c <__udivsi3+0x100>
 800023c:	e776      	b.n	800012c <__udivsi3>
 800023e:	4770      	bx	lr

08000240 <__divsi3>:
 8000240:	4603      	mov	r3, r0
 8000242:	430b      	orrs	r3, r1
 8000244:	d47f      	bmi.n	8000346 <__divsi3+0x106>
 8000246:	2200      	movs	r2, #0
 8000248:	0843      	lsrs	r3, r0, #1
 800024a:	428b      	cmp	r3, r1
 800024c:	d374      	bcc.n	8000338 <__divsi3+0xf8>
 800024e:	0903      	lsrs	r3, r0, #4
 8000250:	428b      	cmp	r3, r1
 8000252:	d35f      	bcc.n	8000314 <__divsi3+0xd4>
 8000254:	0a03      	lsrs	r3, r0, #8
 8000256:	428b      	cmp	r3, r1
 8000258:	d344      	bcc.n	80002e4 <__divsi3+0xa4>
 800025a:	0b03      	lsrs	r3, r0, #12
 800025c:	428b      	cmp	r3, r1
 800025e:	d328      	bcc.n	80002b2 <__divsi3+0x72>
 8000260:	0c03      	lsrs	r3, r0, #16
 8000262:	428b      	cmp	r3, r1
 8000264:	d30d      	bcc.n	8000282 <__divsi3+0x42>
 8000266:	22ff      	movs	r2, #255	; 0xff
 8000268:	0209      	lsls	r1, r1, #8
 800026a:	ba12      	rev	r2, r2
 800026c:	0c03      	lsrs	r3, r0, #16
 800026e:	428b      	cmp	r3, r1
 8000270:	d302      	bcc.n	8000278 <__divsi3+0x38>
 8000272:	1212      	asrs	r2, r2, #8
 8000274:	0209      	lsls	r1, r1, #8
 8000276:	d065      	beq.n	8000344 <__divsi3+0x104>
 8000278:	0b03      	lsrs	r3, r0, #12
 800027a:	428b      	cmp	r3, r1
 800027c:	d319      	bcc.n	80002b2 <__divsi3+0x72>
 800027e:	e000      	b.n	8000282 <__divsi3+0x42>
 8000280:	0a09      	lsrs	r1, r1, #8
 8000282:	0bc3      	lsrs	r3, r0, #15
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x4c>
 8000288:	03cb      	lsls	r3, r1, #15
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0b83      	lsrs	r3, r0, #14
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x58>
 8000294:	038b      	lsls	r3, r1, #14
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0b43      	lsrs	r3, r0, #13
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x64>
 80002a0:	034b      	lsls	r3, r1, #13
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0b03      	lsrs	r3, r0, #12
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x70>
 80002ac:	030b      	lsls	r3, r1, #12
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0ac3      	lsrs	r3, r0, #11
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0x7c>
 80002b8:	02cb      	lsls	r3, r1, #11
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	0a83      	lsrs	r3, r0, #10
 80002c0:	428b      	cmp	r3, r1
 80002c2:	d301      	bcc.n	80002c8 <__divsi3+0x88>
 80002c4:	028b      	lsls	r3, r1, #10
 80002c6:	1ac0      	subs	r0, r0, r3
 80002c8:	4152      	adcs	r2, r2
 80002ca:	0a43      	lsrs	r3, r0, #9
 80002cc:	428b      	cmp	r3, r1
 80002ce:	d301      	bcc.n	80002d4 <__divsi3+0x94>
 80002d0:	024b      	lsls	r3, r1, #9
 80002d2:	1ac0      	subs	r0, r0, r3
 80002d4:	4152      	adcs	r2, r2
 80002d6:	0a03      	lsrs	r3, r0, #8
 80002d8:	428b      	cmp	r3, r1
 80002da:	d301      	bcc.n	80002e0 <__divsi3+0xa0>
 80002dc:	020b      	lsls	r3, r1, #8
 80002de:	1ac0      	subs	r0, r0, r3
 80002e0:	4152      	adcs	r2, r2
 80002e2:	d2cd      	bcs.n	8000280 <__divsi3+0x40>
 80002e4:	09c3      	lsrs	r3, r0, #7
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xae>
 80002ea:	01cb      	lsls	r3, r1, #7
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	0983      	lsrs	r3, r0, #6
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xba>
 80002f6:	018b      	lsls	r3, r1, #6
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0943      	lsrs	r3, r0, #5
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xc6>
 8000302:	014b      	lsls	r3, r1, #5
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0903      	lsrs	r3, r0, #4
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xd2>
 800030e:	010b      	lsls	r3, r1, #4
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	08c3      	lsrs	r3, r0, #3
 8000316:	428b      	cmp	r3, r1
 8000318:	d301      	bcc.n	800031e <__divsi3+0xde>
 800031a:	00cb      	lsls	r3, r1, #3
 800031c:	1ac0      	subs	r0, r0, r3
 800031e:	4152      	adcs	r2, r2
 8000320:	0883      	lsrs	r3, r0, #2
 8000322:	428b      	cmp	r3, r1
 8000324:	d301      	bcc.n	800032a <__divsi3+0xea>
 8000326:	008b      	lsls	r3, r1, #2
 8000328:	1ac0      	subs	r0, r0, r3
 800032a:	4152      	adcs	r2, r2
 800032c:	0843      	lsrs	r3, r0, #1
 800032e:	428b      	cmp	r3, r1
 8000330:	d301      	bcc.n	8000336 <__divsi3+0xf6>
 8000332:	004b      	lsls	r3, r1, #1
 8000334:	1ac0      	subs	r0, r0, r3
 8000336:	4152      	adcs	r2, r2
 8000338:	1a41      	subs	r1, r0, r1
 800033a:	d200      	bcs.n	800033e <__divsi3+0xfe>
 800033c:	4601      	mov	r1, r0
 800033e:	4152      	adcs	r2, r2
 8000340:	4610      	mov	r0, r2
 8000342:	4770      	bx	lr
 8000344:	e05d      	b.n	8000402 <__divsi3+0x1c2>
 8000346:	0fca      	lsrs	r2, r1, #31
 8000348:	d000      	beq.n	800034c <__divsi3+0x10c>
 800034a:	4249      	negs	r1, r1
 800034c:	1003      	asrs	r3, r0, #32
 800034e:	d300      	bcc.n	8000352 <__divsi3+0x112>
 8000350:	4240      	negs	r0, r0
 8000352:	4053      	eors	r3, r2
 8000354:	2200      	movs	r2, #0
 8000356:	469c      	mov	ip, r3
 8000358:	0903      	lsrs	r3, r0, #4
 800035a:	428b      	cmp	r3, r1
 800035c:	d32d      	bcc.n	80003ba <__divsi3+0x17a>
 800035e:	0a03      	lsrs	r3, r0, #8
 8000360:	428b      	cmp	r3, r1
 8000362:	d312      	bcc.n	800038a <__divsi3+0x14a>
 8000364:	22fc      	movs	r2, #252	; 0xfc
 8000366:	0189      	lsls	r1, r1, #6
 8000368:	ba12      	rev	r2, r2
 800036a:	0a03      	lsrs	r3, r0, #8
 800036c:	428b      	cmp	r3, r1
 800036e:	d30c      	bcc.n	800038a <__divsi3+0x14a>
 8000370:	0189      	lsls	r1, r1, #6
 8000372:	1192      	asrs	r2, r2, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d308      	bcc.n	800038a <__divsi3+0x14a>
 8000378:	0189      	lsls	r1, r1, #6
 800037a:	1192      	asrs	r2, r2, #6
 800037c:	428b      	cmp	r3, r1
 800037e:	d304      	bcc.n	800038a <__divsi3+0x14a>
 8000380:	0189      	lsls	r1, r1, #6
 8000382:	d03a      	beq.n	80003fa <__divsi3+0x1ba>
 8000384:	1192      	asrs	r2, r2, #6
 8000386:	e000      	b.n	800038a <__divsi3+0x14a>
 8000388:	0989      	lsrs	r1, r1, #6
 800038a:	09c3      	lsrs	r3, r0, #7
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x154>
 8000390:	01cb      	lsls	r3, r1, #7
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	0983      	lsrs	r3, r0, #6
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x160>
 800039c:	018b      	lsls	r3, r1, #6
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0943      	lsrs	r3, r0, #5
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x16c>
 80003a8:	014b      	lsls	r3, r1, #5
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	0903      	lsrs	r3, r0, #4
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d301      	bcc.n	80003b8 <__divsi3+0x178>
 80003b4:	010b      	lsls	r3, r1, #4
 80003b6:	1ac0      	subs	r0, r0, r3
 80003b8:	4152      	adcs	r2, r2
 80003ba:	08c3      	lsrs	r3, r0, #3
 80003bc:	428b      	cmp	r3, r1
 80003be:	d301      	bcc.n	80003c4 <__divsi3+0x184>
 80003c0:	00cb      	lsls	r3, r1, #3
 80003c2:	1ac0      	subs	r0, r0, r3
 80003c4:	4152      	adcs	r2, r2
 80003c6:	0883      	lsrs	r3, r0, #2
 80003c8:	428b      	cmp	r3, r1
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x190>
 80003cc:	008b      	lsls	r3, r1, #2
 80003ce:	1ac0      	subs	r0, r0, r3
 80003d0:	4152      	adcs	r2, r2
 80003d2:	d2d9      	bcs.n	8000388 <__divsi3+0x148>
 80003d4:	0843      	lsrs	r3, r0, #1
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d301      	bcc.n	80003de <__divsi3+0x19e>
 80003da:	004b      	lsls	r3, r1, #1
 80003dc:	1ac0      	subs	r0, r0, r3
 80003de:	4152      	adcs	r2, r2
 80003e0:	1a41      	subs	r1, r0, r1
 80003e2:	d200      	bcs.n	80003e6 <__divsi3+0x1a6>
 80003e4:	4601      	mov	r1, r0
 80003e6:	4663      	mov	r3, ip
 80003e8:	4152      	adcs	r2, r2
 80003ea:	105b      	asrs	r3, r3, #1
 80003ec:	4610      	mov	r0, r2
 80003ee:	d301      	bcc.n	80003f4 <__divsi3+0x1b4>
 80003f0:	4240      	negs	r0, r0
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	d500      	bpl.n	80003f8 <__divsi3+0x1b8>
 80003f6:	4249      	negs	r1, r1
 80003f8:	4770      	bx	lr
 80003fa:	4663      	mov	r3, ip
 80003fc:	105b      	asrs	r3, r3, #1
 80003fe:	d300      	bcc.n	8000402 <__divsi3+0x1c2>
 8000400:	4240      	negs	r0, r0
 8000402:	b501      	push	{r0, lr}
 8000404:	2000      	movs	r0, #0
 8000406:	f000 f805 	bl	8000414 <__aeabi_idiv0>
 800040a:	bd02      	pop	{r1, pc}

0800040c <__aeabi_idivmod>:
 800040c:	2900      	cmp	r1, #0
 800040e:	d0f8      	beq.n	8000402 <__divsi3+0x1c2>
 8000410:	e716      	b.n	8000240 <__divsi3>
 8000412:	4770      	bx	lr

08000414 <__aeabi_idiv0>:
 8000414:	4770      	bx	lr
 8000416:	46c0      	nop			; (mov r8, r8)

08000418 <setColour>:
#include "lcd.h"

//_____Rozvítí podsvícení dané argumentem_____//
//-> argument: Barva podsvícení
void setColour(BACKLIGHT colour)
{
 8000418:	b580      	push	{r7, lr}
 800041a:	b082      	sub	sp, #8
 800041c:	af00      	add	r7, sp, #0
 800041e:	0002      	movs	r2, r0
 8000420:	1dfb      	adds	r3, r7, #7
 8000422:	701a      	strb	r2, [r3, #0]
	switch(colour)
 8000424:	1dfb      	adds	r3, r7, #7
 8000426:	781b      	ldrb	r3, [r3, #0]
 8000428:	2b02      	cmp	r3, #2
 800042a:	d033      	beq.n	8000494 <setColour+0x7c>
 800042c:	dc49      	bgt.n	80004c2 <setColour+0xaa>
 800042e:	2b00      	cmp	r3, #0
 8000430:	d002      	beq.n	8000438 <setColour+0x20>
 8000432:	2b01      	cmp	r3, #1
 8000434:	d017      	beq.n	8000466 <setColour+0x4e>
 8000436:	e044      	b.n	80004c2 <setColour+0xaa>
	{
	case BACKLIGHT_WHITE:
		HAL_GPIO_WritePin(BACKLIGHT_WHITE_GPIO_Port, BACKLIGHT_WHITE_Pin, GPIO_PIN_SET);
 8000438:	2380      	movs	r3, #128	; 0x80
 800043a:	009b      	lsls	r3, r3, #2
 800043c:	482e      	ldr	r0, [pc, #184]	; (80004f8 <setColour+0xe0>)
 800043e:	2201      	movs	r2, #1
 8000440:	0019      	movs	r1, r3
 8000442:	f002 f9e0 	bl	8002806 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(BACKLIGHT_RED_GPIO_Port, BACKLIGHT_RED_Pin, GPIO_PIN_RESET);
 8000446:	2380      	movs	r3, #128	; 0x80
 8000448:	0219      	lsls	r1, r3, #8
 800044a:	2390      	movs	r3, #144	; 0x90
 800044c:	05db      	lsls	r3, r3, #23
 800044e:	2200      	movs	r2, #0
 8000450:	0018      	movs	r0, r3
 8000452:	f002 f9d8 	bl	8002806 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(BACKLIGHT_GREEN_GPIO_Port, BACKLIGHT_GREEN_Pin, GPIO_PIN_RESET);
 8000456:	2380      	movs	r3, #128	; 0x80
 8000458:	005b      	lsls	r3, r3, #1
 800045a:	4827      	ldr	r0, [pc, #156]	; (80004f8 <setColour+0xe0>)
 800045c:	2200      	movs	r2, #0
 800045e:	0019      	movs	r1, r3
 8000460:	f002 f9d1 	bl	8002806 <HAL_GPIO_WritePin>
		break;
 8000464:	e044      	b.n	80004f0 <setColour+0xd8>

	case BACKLIGHT_GREEN:
		HAL_GPIO_WritePin(BACKLIGHT_WHITE_GPIO_Port, BACKLIGHT_WHITE_Pin, GPIO_PIN_RESET);
 8000466:	2380      	movs	r3, #128	; 0x80
 8000468:	009b      	lsls	r3, r3, #2
 800046a:	4823      	ldr	r0, [pc, #140]	; (80004f8 <setColour+0xe0>)
 800046c:	2200      	movs	r2, #0
 800046e:	0019      	movs	r1, r3
 8000470:	f002 f9c9 	bl	8002806 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(BACKLIGHT_RED_GPIO_Port, BACKLIGHT_RED_Pin, GPIO_PIN_RESET);
 8000474:	2380      	movs	r3, #128	; 0x80
 8000476:	0219      	lsls	r1, r3, #8
 8000478:	2390      	movs	r3, #144	; 0x90
 800047a:	05db      	lsls	r3, r3, #23
 800047c:	2200      	movs	r2, #0
 800047e:	0018      	movs	r0, r3
 8000480:	f002 f9c1 	bl	8002806 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(BACKLIGHT_GREEN_GPIO_Port, BACKLIGHT_GREEN_Pin, GPIO_PIN_SET);
 8000484:	2380      	movs	r3, #128	; 0x80
 8000486:	005b      	lsls	r3, r3, #1
 8000488:	481b      	ldr	r0, [pc, #108]	; (80004f8 <setColour+0xe0>)
 800048a:	2201      	movs	r2, #1
 800048c:	0019      	movs	r1, r3
 800048e:	f002 f9ba 	bl	8002806 <HAL_GPIO_WritePin>
		break;
 8000492:	e02d      	b.n	80004f0 <setColour+0xd8>

	case BACKLIGHT_RED:
		HAL_GPIO_WritePin(BACKLIGHT_WHITE_GPIO_Port, BACKLIGHT_WHITE_Pin, GPIO_PIN_RESET);
 8000494:	2380      	movs	r3, #128	; 0x80
 8000496:	009b      	lsls	r3, r3, #2
 8000498:	4817      	ldr	r0, [pc, #92]	; (80004f8 <setColour+0xe0>)
 800049a:	2200      	movs	r2, #0
 800049c:	0019      	movs	r1, r3
 800049e:	f002 f9b2 	bl	8002806 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(BACKLIGHT_RED_GPIO_Port, BACKLIGHT_RED_Pin, GPIO_PIN_SET);
 80004a2:	2380      	movs	r3, #128	; 0x80
 80004a4:	0219      	lsls	r1, r3, #8
 80004a6:	2390      	movs	r3, #144	; 0x90
 80004a8:	05db      	lsls	r3, r3, #23
 80004aa:	2201      	movs	r2, #1
 80004ac:	0018      	movs	r0, r3
 80004ae:	f002 f9aa 	bl	8002806 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(BACKLIGHT_GREEN_GPIO_Port, BACKLIGHT_GREEN_Pin, GPIO_PIN_RESET);
 80004b2:	2380      	movs	r3, #128	; 0x80
 80004b4:	005b      	lsls	r3, r3, #1
 80004b6:	4810      	ldr	r0, [pc, #64]	; (80004f8 <setColour+0xe0>)
 80004b8:	2200      	movs	r2, #0
 80004ba:	0019      	movs	r1, r3
 80004bc:	f002 f9a3 	bl	8002806 <HAL_GPIO_WritePin>
		break;
 80004c0:	e016      	b.n	80004f0 <setColour+0xd8>

	default:
		HAL_GPIO_WritePin(BACKLIGHT_WHITE_GPIO_Port, BACKLIGHT_WHITE_Pin, GPIO_PIN_RESET);
 80004c2:	2380      	movs	r3, #128	; 0x80
 80004c4:	009b      	lsls	r3, r3, #2
 80004c6:	480c      	ldr	r0, [pc, #48]	; (80004f8 <setColour+0xe0>)
 80004c8:	2200      	movs	r2, #0
 80004ca:	0019      	movs	r1, r3
 80004cc:	f002 f99b 	bl	8002806 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(BACKLIGHT_RED_GPIO_Port, BACKLIGHT_RED_Pin, GPIO_PIN_RESET);
 80004d0:	2380      	movs	r3, #128	; 0x80
 80004d2:	0219      	lsls	r1, r3, #8
 80004d4:	2390      	movs	r3, #144	; 0x90
 80004d6:	05db      	lsls	r3, r3, #23
 80004d8:	2200      	movs	r2, #0
 80004da:	0018      	movs	r0, r3
 80004dc:	f002 f993 	bl	8002806 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(BACKLIGHT_GREEN_GPIO_Port, BACKLIGHT_GREEN_Pin, GPIO_PIN_RESET);
 80004e0:	2380      	movs	r3, #128	; 0x80
 80004e2:	005b      	lsls	r3, r3, #1
 80004e4:	4804      	ldr	r0, [pc, #16]	; (80004f8 <setColour+0xe0>)
 80004e6:	2200      	movs	r2, #0
 80004e8:	0019      	movs	r1, r3
 80004ea:	f002 f98c 	bl	8002806 <HAL_GPIO_WritePin>
		break;
 80004ee:	46c0      	nop			; (mov r8, r8)
	}
}
 80004f0:	46c0      	nop			; (mov r8, r8)
 80004f2:	46bd      	mov	sp, r7
 80004f4:	b002      	add	sp, #8
 80004f6:	bd80      	pop	{r7, pc}
 80004f8:	48000400 	.word	0x48000400

080004fc <HAL_GPIO_EXTI_Callback>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

//_____Buttons interrupt callback_____//
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80004fc:	b580      	push	{r7, lr}
 80004fe:	b082      	sub	sp, #8
 8000500:	af00      	add	r7, sp, #0
 8000502:	0002      	movs	r2, r0
 8000504:	1dbb      	adds	r3, r7, #6
 8000506:	801a      	strh	r2, [r3, #0]
	if(GPIO_Pin == BUTTON_0_Pin)
 8000508:	1dbb      	adds	r3, r7, #6
 800050a:	881a      	ldrh	r2, [r3, #0]
 800050c:	2380      	movs	r3, #128	; 0x80
 800050e:	009b      	lsls	r3, r3, #2
 8000510:	429a      	cmp	r2, r3
 8000512:	d104      	bne.n	800051e <HAL_GPIO_EXTI_Callback+0x22>
	{
		flags.butt0_int = 1;
 8000514:	4b09      	ldr	r3, [pc, #36]	; (800053c <HAL_GPIO_EXTI_Callback+0x40>)
 8000516:	781a      	ldrb	r2, [r3, #0]
 8000518:	2110      	movs	r1, #16
 800051a:	430a      	orrs	r2, r1
 800051c:	701a      	strb	r2, [r3, #0]
	}
	if(GPIO_Pin == BUTTON_1_Pin)
 800051e:	1dbb      	adds	r3, r7, #6
 8000520:	881a      	ldrh	r2, [r3, #0]
 8000522:	2380      	movs	r3, #128	; 0x80
 8000524:	005b      	lsls	r3, r3, #1
 8000526:	429a      	cmp	r2, r3
 8000528:	d104      	bne.n	8000534 <HAL_GPIO_EXTI_Callback+0x38>
	{
		flags.butt1_int = 1;
 800052a:	4b04      	ldr	r3, [pc, #16]	; (800053c <HAL_GPIO_EXTI_Callback+0x40>)
 800052c:	781a      	ldrb	r2, [r3, #0]
 800052e:	2140      	movs	r1, #64	; 0x40
 8000530:	430a      	orrs	r2, r1
 8000532:	701a      	strb	r2, [r3, #0]
	}
}
 8000534:	46c0      	nop			; (mov r8, r8)
 8000536:	46bd      	mov	sp, r7
 8000538:	b002      	add	sp, #8
 800053a:	bd80      	pop	{r7, pc}
 800053c:	20000590 	.word	0x20000590

08000540 <HAL_TIM_PeriodElapsedCallback>:

//_____Timer interrupt callback_____//
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000540:	b580      	push	{r7, lr}
 8000542:	b082      	sub	sp, #8
 8000544:	af00      	add	r7, sp, #0
 8000546:	6078      	str	r0, [r7, #4]
	if(htim == &htim14)	//Timer 14 -> každých 10 ms
 8000548:	687a      	ldr	r2, [r7, #4]
 800054a:	4b06      	ldr	r3, [pc, #24]	; (8000564 <HAL_TIM_PeriodElapsedCallback+0x24>)
 800054c:	429a      	cmp	r2, r3
 800054e:	d104      	bne.n	800055a <HAL_TIM_PeriodElapsedCallback+0x1a>
	{
		flags.ten_ms = 1;
 8000550:	4b05      	ldr	r3, [pc, #20]	; (8000568 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8000552:	781a      	ldrb	r2, [r3, #0]
 8000554:	2101      	movs	r1, #1
 8000556:	430a      	orrs	r2, r1
 8000558:	701a      	strb	r2, [r3, #0]
	}
}
 800055a:	46c0      	nop			; (mov r8, r8)
 800055c:	46bd      	mov	sp, r7
 800055e:	b002      	add	sp, #8
 8000560:	bd80      	pop	{r7, pc}
 8000562:	46c0      	nop			; (mov r8, r8)
 8000564:	20000548 	.word	0x20000548
 8000568:	20000590 	.word	0x20000590

0800056c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000570:	f001 faa0 	bl	8001ab4 <HAL_Init>

  /* USER CODE BEGIN Init */

  //__Buffery___//
  dispBuffer = createBuffer(100);
 8000574:	2064      	movs	r0, #100	; 0x64
 8000576:	f000 ff7a 	bl	800146e <createBuffer>
 800057a:	0002      	movs	r2, r0
 800057c:	4b20      	ldr	r3, [pc, #128]	; (8000600 <main+0x94>)
 800057e:	601a      	str	r2, [r3, #0]
  regBuffer = createBuffer(100);
 8000580:	2064      	movs	r0, #100	; 0x64
 8000582:	f000 ff74 	bl	800146e <createBuffer>
 8000586:	0002      	movs	r2, r0
 8000588:	4b1e      	ldr	r3, [pc, #120]	; (8000604 <main+0x98>)
 800058a:	601a      	str	r2, [r3, #0]
  USB_Rx_Buffer = createBuffer(500);
 800058c:	23fa      	movs	r3, #250	; 0xfa
 800058e:	005b      	lsls	r3, r3, #1
 8000590:	0018      	movs	r0, r3
 8000592:	f000 ff6c 	bl	800146e <createBuffer>
 8000596:	0002      	movs	r2, r0
 8000598:	4b1b      	ldr	r3, [pc, #108]	; (8000608 <main+0x9c>)
 800059a:	601a      	str	r2, [r3, #0]
  USB_Tx_Buffer = createBuffer(500);
 800059c:	23fa      	movs	r3, #250	; 0xfa
 800059e:	005b      	lsls	r3, r3, #1
 80005a0:	0018      	movs	r0, r3
 80005a2:	f000 ff64 	bl	800146e <createBuffer>
 80005a6:	0002      	movs	r2, r0
 80005a8:	4b18      	ldr	r3, [pc, #96]	; (800060c <main+0xa0>)
 80005aa:	601a      	str	r2, [r3, #0]

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005ac:	f000 f834 	bl	8000618 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005b0:	f000 fa9c 	bl	8000aec <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 80005b4:	f00a f85c 	bl	800a670 <MX_USB_DEVICE_Init>
  MX_DMA_Init();
 80005b8:	f000 fa7a 	bl	8000ab0 <MX_DMA_Init>
  MX_ADC_Init();
 80005bc:	f000 f898 	bl	80006f0 <MX_ADC_Init>
  MX_SPI1_Init();
 80005c0:	f000 f9b4 	bl	800092c <MX_SPI1_Init>
  MX_USART3_UART_Init();
 80005c4:	f000 fa44 	bl	8000a50 <MX_USART3_UART_Init>
  MX_TIM14_Init();
 80005c8:	f000 f9f6 	bl	80009b8 <MX_TIM14_Init>
  /* USER CODE BEGIN 2 */
  //___Inicializace displeje___//
  //dispInit();
  //writeChar('a', 1, 5);
  // Start timer
  HAL_TIM_Base_Start_IT(&htim14);
 80005cc:	4b10      	ldr	r3, [pc, #64]	; (8000610 <main+0xa4>)
 80005ce:	0018      	movs	r0, r3
 80005d0:	f004 fee8 	bl	80053a4 <HAL_TIM_Base_Start_IT>

  flags.notice = 1;
 80005d4:	4b0f      	ldr	r3, [pc, #60]	; (8000614 <main+0xa8>)
 80005d6:	789a      	ldrb	r2, [r3, #2]
 80005d8:	2102      	movs	r1, #2
 80005da:	430a      	orrs	r2, r1
 80005dc:	709a      	strb	r2, [r3, #2]
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  if(flags.ten_ms)	// 10 ms
 80005de:	4b0d      	ldr	r3, [pc, #52]	; (8000614 <main+0xa8>)
 80005e0:	781b      	ldrb	r3, [r3, #0]
 80005e2:	2201      	movs	r2, #1
 80005e4:	4013      	ands	r3, r2
 80005e6:	b2db      	uxtb	r3, r3
 80005e8:	2b00      	cmp	r3, #0
 80005ea:	d0f8      	beq.n	80005de <main+0x72>
	  {
		  clkHandler();
 80005ec:	f000 fb6a 	bl	8000cc4 <clkHandler>
		  buttonDebounce();
 80005f0:	f000 fc12 	bl	8000e18 <buttonDebounce>
		  comHandler();
 80005f4:	f000 fc8c 	bl	8000f10 <comHandler>
		  UI_Handler();
 80005f8:	f000 fe04 	bl	8001204 <UI_Handler>
	  if(flags.ten_ms)	// 10 ms
 80005fc:	e7ef      	b.n	80005de <main+0x72>
 80005fe:	46c0      	nop			; (mov r8, r8)
 8000600:	2000044c 	.word	0x2000044c
 8000604:	20000454 	.word	0x20000454
 8000608:	200010b0 	.word	0x200010b0
 800060c:	200004e0 	.word	0x200004e0
 8000610:	20000548 	.word	0x20000548
 8000614:	20000590 	.word	0x20000590

08000618 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000618:	b590      	push	{r4, r7, lr}
 800061a:	b099      	sub	sp, #100	; 0x64
 800061c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800061e:	242c      	movs	r4, #44	; 0x2c
 8000620:	193b      	adds	r3, r7, r4
 8000622:	0018      	movs	r0, r3
 8000624:	2334      	movs	r3, #52	; 0x34
 8000626:	001a      	movs	r2, r3
 8000628:	2100      	movs	r1, #0
 800062a:	f00a fdc5 	bl	800b1b8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800062e:	231c      	movs	r3, #28
 8000630:	18fb      	adds	r3, r7, r3
 8000632:	0018      	movs	r0, r3
 8000634:	2310      	movs	r3, #16
 8000636:	001a      	movs	r2, r3
 8000638:	2100      	movs	r1, #0
 800063a:	f00a fdbd 	bl	800b1b8 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800063e:	003b      	movs	r3, r7
 8000640:	0018      	movs	r0, r3
 8000642:	231c      	movs	r3, #28
 8000644:	001a      	movs	r2, r3
 8000646:	2100      	movs	r1, #0
 8000648:	f00a fdb6 	bl	800b1b8 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI14
 800064c:	0021      	movs	r1, r4
 800064e:	187b      	adds	r3, r7, r1
 8000650:	2232      	movs	r2, #50	; 0x32
 8000652:	601a      	str	r2, [r3, #0]
                              |RCC_OSCILLATORTYPE_HSI48;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000654:	187b      	adds	r3, r7, r1
 8000656:	2201      	movs	r2, #1
 8000658:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 800065a:	187b      	adds	r3, r7, r1
 800065c:	2201      	movs	r2, #1
 800065e:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 8000660:	187b      	adds	r3, r7, r1
 8000662:	2201      	movs	r2, #1
 8000664:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000666:	187b      	adds	r3, r7, r1
 8000668:	2210      	movs	r2, #16
 800066a:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
 800066c:	187b      	adds	r3, r7, r1
 800066e:	2210      	movs	r2, #16
 8000670:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000672:	187b      	adds	r3, r7, r1
 8000674:	2202      	movs	r2, #2
 8000676:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000678:	187b      	adds	r3, r7, r1
 800067a:	2280      	movs	r2, #128	; 0x80
 800067c:	0212      	lsls	r2, r2, #8
 800067e:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000680:	187b      	adds	r3, r7, r1
 8000682:	2280      	movs	r2, #128	; 0x80
 8000684:	0352      	lsls	r2, r2, #13
 8000686:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8000688:	187b      	adds	r3, r7, r1
 800068a:	2200      	movs	r2, #0
 800068c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800068e:	187b      	adds	r3, r7, r1
 8000690:	0018      	movs	r0, r3
 8000692:	f003 ff7f 	bl	8004594 <HAL_RCC_OscConfig>
 8000696:	1e03      	subs	r3, r0, #0
 8000698:	d001      	beq.n	800069e <SystemClock_Config+0x86>
  {
    Error_Handler();
 800069a:	f000 fee3 	bl	8001464 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800069e:	211c      	movs	r1, #28
 80006a0:	187b      	adds	r3, r7, r1
 80006a2:	2207      	movs	r2, #7
 80006a4:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006a6:	187b      	adds	r3, r7, r1
 80006a8:	2202      	movs	r2, #2
 80006aa:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006ac:	187b      	adds	r3, r7, r1
 80006ae:	2200      	movs	r2, #0
 80006b0:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006b2:	187b      	adds	r3, r7, r1
 80006b4:	2200      	movs	r2, #0
 80006b6:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80006b8:	187b      	adds	r3, r7, r1
 80006ba:	2101      	movs	r1, #1
 80006bc:	0018      	movs	r0, r3
 80006be:	f004 faef 	bl	8004ca0 <HAL_RCC_ClockConfig>
 80006c2:	1e03      	subs	r3, r0, #0
 80006c4:	d001      	beq.n	80006ca <SystemClock_Config+0xb2>
  {
    Error_Handler();
 80006c6:	f000 fecd 	bl	8001464 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80006ca:	003b      	movs	r3, r7
 80006cc:	2280      	movs	r2, #128	; 0x80
 80006ce:	0292      	lsls	r2, r2, #10
 80006d0:	601a      	str	r2, [r3, #0]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 80006d2:	003b      	movs	r3, r7
 80006d4:	2200      	movs	r2, #0
 80006d6:	619a      	str	r2, [r3, #24]

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80006d8:	003b      	movs	r3, r7
 80006da:	0018      	movs	r0, r3
 80006dc:	f004 fc5c 	bl	8004f98 <HAL_RCCEx_PeriphCLKConfig>
 80006e0:	1e03      	subs	r3, r0, #0
 80006e2:	d001      	beq.n	80006e8 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 80006e4:	f000 febe 	bl	8001464 <Error_Handler>
  }
}
 80006e8:	46c0      	nop			; (mov r8, r8)
 80006ea:	46bd      	mov	sp, r7
 80006ec:	b019      	add	sp, #100	; 0x64
 80006ee:	bd90      	pop	{r4, r7, pc}

080006f0 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b084      	sub	sp, #16
 80006f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80006f6:	1d3b      	adds	r3, r7, #4
 80006f8:	0018      	movs	r0, r3
 80006fa:	230c      	movs	r3, #12
 80006fc:	001a      	movs	r2, r3
 80006fe:	2100      	movs	r1, #0
 8000700:	f00a fd5a 	bl	800b1b8 <memset>
  /* USER CODE BEGIN ADC_Init 1 */

  /* USER CODE END ADC_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8000704:	4b87      	ldr	r3, [pc, #540]	; (8000924 <MX_ADC_Init+0x234>)
 8000706:	4a88      	ldr	r2, [pc, #544]	; (8000928 <MX_ADC_Init+0x238>)
 8000708:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800070a:	4b86      	ldr	r3, [pc, #536]	; (8000924 <MX_ADC_Init+0x234>)
 800070c:	2200      	movs	r2, #0
 800070e:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8000710:	4b84      	ldr	r3, [pc, #528]	; (8000924 <MX_ADC_Init+0x234>)
 8000712:	2200      	movs	r2, #0
 8000714:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000716:	4b83      	ldr	r3, [pc, #524]	; (8000924 <MX_ADC_Init+0x234>)
 8000718:	2200      	movs	r2, #0
 800071a:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 800071c:	4b81      	ldr	r3, [pc, #516]	; (8000924 <MX_ADC_Init+0x234>)
 800071e:	2201      	movs	r2, #1
 8000720:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000722:	4b80      	ldr	r3, [pc, #512]	; (8000924 <MX_ADC_Init+0x234>)
 8000724:	2204      	movs	r2, #4
 8000726:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 8000728:	4b7e      	ldr	r3, [pc, #504]	; (8000924 <MX_ADC_Init+0x234>)
 800072a:	2200      	movs	r2, #0
 800072c:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 800072e:	4b7d      	ldr	r3, [pc, #500]	; (8000924 <MX_ADC_Init+0x234>)
 8000730:	2200      	movs	r2, #0
 8000732:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = DISABLE;
 8000734:	4b7b      	ldr	r3, [pc, #492]	; (8000924 <MX_ADC_Init+0x234>)
 8000736:	2200      	movs	r2, #0
 8000738:	769a      	strb	r2, [r3, #26]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 800073a:	4b7a      	ldr	r3, [pc, #488]	; (8000924 <MX_ADC_Init+0x234>)
 800073c:	2200      	movs	r2, #0
 800073e:	76da      	strb	r2, [r3, #27]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000740:	4b78      	ldr	r3, [pc, #480]	; (8000924 <MX_ADC_Init+0x234>)
 8000742:	22c2      	movs	r2, #194	; 0xc2
 8000744:	32ff      	adds	r2, #255	; 0xff
 8000746:	61da      	str	r2, [r3, #28]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000748:	4b76      	ldr	r3, [pc, #472]	; (8000924 <MX_ADC_Init+0x234>)
 800074a:	2200      	movs	r2, #0
 800074c:	621a      	str	r2, [r3, #32]
  hadc.Init.DMAContinuousRequests = DISABLE;
 800074e:	4b75      	ldr	r3, [pc, #468]	; (8000924 <MX_ADC_Init+0x234>)
 8000750:	2224      	movs	r2, #36	; 0x24
 8000752:	2100      	movs	r1, #0
 8000754:	5499      	strb	r1, [r3, r2]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000756:	4b73      	ldr	r3, [pc, #460]	; (8000924 <MX_ADC_Init+0x234>)
 8000758:	2201      	movs	r2, #1
 800075a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 800075c:	4b71      	ldr	r3, [pc, #452]	; (8000924 <MX_ADC_Init+0x234>)
 800075e:	0018      	movs	r0, r3
 8000760:	f001 fa0c 	bl	8001b7c <HAL_ADC_Init>
 8000764:	1e03      	subs	r3, r0, #0
 8000766:	d001      	beq.n	800076c <MX_ADC_Init+0x7c>
  {
    Error_Handler();
 8000768:	f000 fe7c 	bl	8001464 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800076c:	1d3b      	adds	r3, r7, #4
 800076e:	2200      	movs	r2, #0
 8000770:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8000772:	1d3b      	adds	r3, r7, #4
 8000774:	2280      	movs	r2, #128	; 0x80
 8000776:	0152      	lsls	r2, r2, #5
 8000778:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800077a:	1d3b      	adds	r3, r7, #4
 800077c:	2280      	movs	r2, #128	; 0x80
 800077e:	0552      	lsls	r2, r2, #21
 8000780:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000782:	1d3a      	adds	r2, r7, #4
 8000784:	4b67      	ldr	r3, [pc, #412]	; (8000924 <MX_ADC_Init+0x234>)
 8000786:	0011      	movs	r1, r2
 8000788:	0018      	movs	r0, r3
 800078a:	f001 fb37 	bl	8001dfc <HAL_ADC_ConfigChannel>
 800078e:	1e03      	subs	r3, r0, #0
 8000790:	d001      	beq.n	8000796 <MX_ADC_Init+0xa6>
  {
    Error_Handler();
 8000792:	f000 fe67 	bl	8001464 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000796:	1d3b      	adds	r3, r7, #4
 8000798:	2201      	movs	r2, #1
 800079a:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800079c:	1d3a      	adds	r2, r7, #4
 800079e:	4b61      	ldr	r3, [pc, #388]	; (8000924 <MX_ADC_Init+0x234>)
 80007a0:	0011      	movs	r1, r2
 80007a2:	0018      	movs	r0, r3
 80007a4:	f001 fb2a 	bl	8001dfc <HAL_ADC_ConfigChannel>
 80007a8:	1e03      	subs	r3, r0, #0
 80007aa:	d001      	beq.n	80007b0 <MX_ADC_Init+0xc0>
  {
    Error_Handler();
 80007ac:	f000 fe5a 	bl	8001464 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80007b0:	1d3b      	adds	r3, r7, #4
 80007b2:	2202      	movs	r2, #2
 80007b4:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80007b6:	1d3a      	adds	r2, r7, #4
 80007b8:	4b5a      	ldr	r3, [pc, #360]	; (8000924 <MX_ADC_Init+0x234>)
 80007ba:	0011      	movs	r1, r2
 80007bc:	0018      	movs	r0, r3
 80007be:	f001 fb1d 	bl	8001dfc <HAL_ADC_ConfigChannel>
 80007c2:	1e03      	subs	r3, r0, #0
 80007c4:	d001      	beq.n	80007ca <MX_ADC_Init+0xda>
  {
    Error_Handler();
 80007c6:	f000 fe4d 	bl	8001464 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80007ca:	1d3b      	adds	r3, r7, #4
 80007cc:	2203      	movs	r2, #3
 80007ce:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80007d0:	1d3a      	adds	r2, r7, #4
 80007d2:	4b54      	ldr	r3, [pc, #336]	; (8000924 <MX_ADC_Init+0x234>)
 80007d4:	0011      	movs	r1, r2
 80007d6:	0018      	movs	r0, r3
 80007d8:	f001 fb10 	bl	8001dfc <HAL_ADC_ConfigChannel>
 80007dc:	1e03      	subs	r3, r0, #0
 80007de:	d001      	beq.n	80007e4 <MX_ADC_Init+0xf4>
  {
    Error_Handler();
 80007e0:	f000 fe40 	bl	8001464 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80007e4:	1d3b      	adds	r3, r7, #4
 80007e6:	2204      	movs	r2, #4
 80007e8:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80007ea:	1d3a      	adds	r2, r7, #4
 80007ec:	4b4d      	ldr	r3, [pc, #308]	; (8000924 <MX_ADC_Init+0x234>)
 80007ee:	0011      	movs	r1, r2
 80007f0:	0018      	movs	r0, r3
 80007f2:	f001 fb03 	bl	8001dfc <HAL_ADC_ConfigChannel>
 80007f6:	1e03      	subs	r3, r0, #0
 80007f8:	d001      	beq.n	80007fe <MX_ADC_Init+0x10e>
  {
    Error_Handler();
 80007fa:	f000 fe33 	bl	8001464 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80007fe:	1d3b      	adds	r3, r7, #4
 8000800:	2205      	movs	r2, #5
 8000802:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000804:	1d3a      	adds	r2, r7, #4
 8000806:	4b47      	ldr	r3, [pc, #284]	; (8000924 <MX_ADC_Init+0x234>)
 8000808:	0011      	movs	r1, r2
 800080a:	0018      	movs	r0, r3
 800080c:	f001 faf6 	bl	8001dfc <HAL_ADC_ConfigChannel>
 8000810:	1e03      	subs	r3, r0, #0
 8000812:	d001      	beq.n	8000818 <MX_ADC_Init+0x128>
  {
    Error_Handler();
 8000814:	f000 fe26 	bl	8001464 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8000818:	1d3b      	adds	r3, r7, #4
 800081a:	2206      	movs	r2, #6
 800081c:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800081e:	1d3a      	adds	r2, r7, #4
 8000820:	4b40      	ldr	r3, [pc, #256]	; (8000924 <MX_ADC_Init+0x234>)
 8000822:	0011      	movs	r1, r2
 8000824:	0018      	movs	r0, r3
 8000826:	f001 fae9 	bl	8001dfc <HAL_ADC_ConfigChannel>
 800082a:	1e03      	subs	r3, r0, #0
 800082c:	d001      	beq.n	8000832 <MX_ADC_Init+0x142>
  {
    Error_Handler();
 800082e:	f000 fe19 	bl	8001464 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8000832:	1d3b      	adds	r3, r7, #4
 8000834:	2207      	movs	r2, #7
 8000836:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000838:	1d3a      	adds	r2, r7, #4
 800083a:	4b3a      	ldr	r3, [pc, #232]	; (8000924 <MX_ADC_Init+0x234>)
 800083c:	0011      	movs	r1, r2
 800083e:	0018      	movs	r0, r3
 8000840:	f001 fadc 	bl	8001dfc <HAL_ADC_ConfigChannel>
 8000844:	1e03      	subs	r3, r0, #0
 8000846:	d001      	beq.n	800084c <MX_ADC_Init+0x15c>
  {
    Error_Handler();
 8000848:	f000 fe0c 	bl	8001464 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 800084c:	1d3b      	adds	r3, r7, #4
 800084e:	2208      	movs	r2, #8
 8000850:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000852:	1d3a      	adds	r2, r7, #4
 8000854:	4b33      	ldr	r3, [pc, #204]	; (8000924 <MX_ADC_Init+0x234>)
 8000856:	0011      	movs	r1, r2
 8000858:	0018      	movs	r0, r3
 800085a:	f001 facf 	bl	8001dfc <HAL_ADC_ConfigChannel>
 800085e:	1e03      	subs	r3, r0, #0
 8000860:	d001      	beq.n	8000866 <MX_ADC_Init+0x176>
  {
    Error_Handler();
 8000862:	f000 fdff 	bl	8001464 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000866:	1d3b      	adds	r3, r7, #4
 8000868:	2209      	movs	r2, #9
 800086a:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800086c:	1d3a      	adds	r2, r7, #4
 800086e:	4b2d      	ldr	r3, [pc, #180]	; (8000924 <MX_ADC_Init+0x234>)
 8000870:	0011      	movs	r1, r2
 8000872:	0018      	movs	r0, r3
 8000874:	f001 fac2 	bl	8001dfc <HAL_ADC_ConfigChannel>
 8000878:	1e03      	subs	r3, r0, #0
 800087a:	d001      	beq.n	8000880 <MX_ADC_Init+0x190>
  {
    Error_Handler();
 800087c:	f000 fdf2 	bl	8001464 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000880:	1d3b      	adds	r3, r7, #4
 8000882:	220a      	movs	r2, #10
 8000884:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000886:	1d3a      	adds	r2, r7, #4
 8000888:	4b26      	ldr	r3, [pc, #152]	; (8000924 <MX_ADC_Init+0x234>)
 800088a:	0011      	movs	r1, r2
 800088c:	0018      	movs	r0, r3
 800088e:	f001 fab5 	bl	8001dfc <HAL_ADC_ConfigChannel>
 8000892:	1e03      	subs	r3, r0, #0
 8000894:	d001      	beq.n	800089a <MX_ADC_Init+0x1aa>
  {
    Error_Handler();
 8000896:	f000 fde5 	bl	8001464 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 800089a:	1d3b      	adds	r3, r7, #4
 800089c:	220b      	movs	r2, #11
 800089e:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80008a0:	1d3a      	adds	r2, r7, #4
 80008a2:	4b20      	ldr	r3, [pc, #128]	; (8000924 <MX_ADC_Init+0x234>)
 80008a4:	0011      	movs	r1, r2
 80008a6:	0018      	movs	r0, r3
 80008a8:	f001 faa8 	bl	8001dfc <HAL_ADC_ConfigChannel>
 80008ac:	1e03      	subs	r3, r0, #0
 80008ae:	d001      	beq.n	80008b4 <MX_ADC_Init+0x1c4>
  {
    Error_Handler();
 80008b0:	f000 fdd8 	bl	8001464 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 80008b4:	1d3b      	adds	r3, r7, #4
 80008b6:	220c      	movs	r2, #12
 80008b8:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80008ba:	1d3a      	adds	r2, r7, #4
 80008bc:	4b19      	ldr	r3, [pc, #100]	; (8000924 <MX_ADC_Init+0x234>)
 80008be:	0011      	movs	r1, r2
 80008c0:	0018      	movs	r0, r3
 80008c2:	f001 fa9b 	bl	8001dfc <HAL_ADC_ConfigChannel>
 80008c6:	1e03      	subs	r3, r0, #0
 80008c8:	d001      	beq.n	80008ce <MX_ADC_Init+0x1de>
  {
    Error_Handler();
 80008ca:	f000 fdcb 	bl	8001464 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 80008ce:	1d3b      	adds	r3, r7, #4
 80008d0:	220d      	movs	r2, #13
 80008d2:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80008d4:	1d3a      	adds	r2, r7, #4
 80008d6:	4b13      	ldr	r3, [pc, #76]	; (8000924 <MX_ADC_Init+0x234>)
 80008d8:	0011      	movs	r1, r2
 80008da:	0018      	movs	r0, r3
 80008dc:	f001 fa8e 	bl	8001dfc <HAL_ADC_ConfigChannel>
 80008e0:	1e03      	subs	r3, r0, #0
 80008e2:	d001      	beq.n	80008e8 <MX_ADC_Init+0x1f8>
  {
    Error_Handler();
 80008e4:	f000 fdbe 	bl	8001464 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 80008e8:	1d3b      	adds	r3, r7, #4
 80008ea:	220e      	movs	r2, #14
 80008ec:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80008ee:	1d3a      	adds	r2, r7, #4
 80008f0:	4b0c      	ldr	r3, [pc, #48]	; (8000924 <MX_ADC_Init+0x234>)
 80008f2:	0011      	movs	r1, r2
 80008f4:	0018      	movs	r0, r3
 80008f6:	f001 fa81 	bl	8001dfc <HAL_ADC_ConfigChannel>
 80008fa:	1e03      	subs	r3, r0, #0
 80008fc:	d001      	beq.n	8000902 <MX_ADC_Init+0x212>
  {
    Error_Handler();
 80008fe:	f000 fdb1 	bl	8001464 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8000902:	1d3b      	adds	r3, r7, #4
 8000904:	220f      	movs	r2, #15
 8000906:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000908:	1d3a      	adds	r2, r7, #4
 800090a:	4b06      	ldr	r3, [pc, #24]	; (8000924 <MX_ADC_Init+0x234>)
 800090c:	0011      	movs	r1, r2
 800090e:	0018      	movs	r0, r3
 8000910:	f001 fa74 	bl	8001dfc <HAL_ADC_ConfigChannel>
 8000914:	1e03      	subs	r3, r0, #0
 8000916:	d001      	beq.n	800091c <MX_ADC_Init+0x22c>
  {
    Error_Handler();
 8000918:	f000 fda4 	bl	8001464 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 800091c:	46c0      	nop			; (mov r8, r8)
 800091e:	46bd      	mov	sp, r7
 8000920:	b004      	add	sp, #16
 8000922:	bd80      	pop	{r7, pc}
 8000924:	200005d8 	.word	0x200005d8
 8000928:	40012400 	.word	0x40012400

0800092c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000930:	4b1e      	ldr	r3, [pc, #120]	; (80009ac <MX_SPI1_Init+0x80>)
 8000932:	4a1f      	ldr	r2, [pc, #124]	; (80009b0 <MX_SPI1_Init+0x84>)
 8000934:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000936:	4b1d      	ldr	r3, [pc, #116]	; (80009ac <MX_SPI1_Init+0x80>)
 8000938:	2282      	movs	r2, #130	; 0x82
 800093a:	0052      	lsls	r2, r2, #1
 800093c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800093e:	4b1b      	ldr	r3, [pc, #108]	; (80009ac <MX_SPI1_Init+0x80>)
 8000940:	2200      	movs	r2, #0
 8000942:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000944:	4b19      	ldr	r3, [pc, #100]	; (80009ac <MX_SPI1_Init+0x80>)
 8000946:	22e0      	movs	r2, #224	; 0xe0
 8000948:	00d2      	lsls	r2, r2, #3
 800094a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800094c:	4b17      	ldr	r3, [pc, #92]	; (80009ac <MX_SPI1_Init+0x80>)
 800094e:	2200      	movs	r2, #0
 8000950:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000952:	4b16      	ldr	r3, [pc, #88]	; (80009ac <MX_SPI1_Init+0x80>)
 8000954:	2200      	movs	r2, #0
 8000956:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000958:	4b14      	ldr	r3, [pc, #80]	; (80009ac <MX_SPI1_Init+0x80>)
 800095a:	2280      	movs	r2, #128	; 0x80
 800095c:	0092      	lsls	r2, r2, #2
 800095e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8000960:	4b12      	ldr	r3, [pc, #72]	; (80009ac <MX_SPI1_Init+0x80>)
 8000962:	2238      	movs	r2, #56	; 0x38
 8000964:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000966:	4b11      	ldr	r3, [pc, #68]	; (80009ac <MX_SPI1_Init+0x80>)
 8000968:	2200      	movs	r2, #0
 800096a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800096c:	4b0f      	ldr	r3, [pc, #60]	; (80009ac <MX_SPI1_Init+0x80>)
 800096e:	2200      	movs	r2, #0
 8000970:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000972:	4b0e      	ldr	r3, [pc, #56]	; (80009ac <MX_SPI1_Init+0x80>)
 8000974:	2200      	movs	r2, #0
 8000976:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000978:	4b0c      	ldr	r3, [pc, #48]	; (80009ac <MX_SPI1_Init+0x80>)
 800097a:	2207      	movs	r2, #7
 800097c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800097e:	4b0b      	ldr	r3, [pc, #44]	; (80009ac <MX_SPI1_Init+0x80>)
 8000980:	2200      	movs	r2, #0
 8000982:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000984:	4b09      	ldr	r3, [pc, #36]	; (80009ac <MX_SPI1_Init+0x80>)
 8000986:	2208      	movs	r2, #8
 8000988:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800098a:	4b08      	ldr	r3, [pc, #32]	; (80009ac <MX_SPI1_Init+0x80>)
 800098c:	0018      	movs	r0, r3
 800098e:	f004 fc01 	bl	8005194 <HAL_SPI_Init>
 8000992:	1e03      	subs	r3, r0, #0
 8000994:	d001      	beq.n	800099a <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000996:	f000 fd65 	bl	8001464 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */
  DISP_CS_OFF;
 800099a:	4b06      	ldr	r3, [pc, #24]	; (80009b4 <MX_SPI1_Init+0x88>)
 800099c:	2201      	movs	r2, #1
 800099e:	2140      	movs	r1, #64	; 0x40
 80009a0:	0018      	movs	r0, r3
 80009a2:	f001 ff30 	bl	8002806 <HAL_GPIO_WritePin>
  /* USER CODE END SPI1_Init 2 */

}
 80009a6:	46c0      	nop			; (mov r8, r8)
 80009a8:	46bd      	mov	sp, r7
 80009aa:	bd80      	pop	{r7, pc}
 80009ac:	200004e4 	.word	0x200004e4
 80009b0:	40013000 	.word	0x40013000
 80009b4:	48000400 	.word	0x48000400

080009b8 <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b088      	sub	sp, #32
 80009bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM14_Init 0 */

  /* USER CODE END TIM14_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80009be:	1d3b      	adds	r3, r7, #4
 80009c0:	0018      	movs	r0, r3
 80009c2:	231c      	movs	r3, #28
 80009c4:	001a      	movs	r2, r3
 80009c6:	2100      	movs	r1, #0
 80009c8:	f00a fbf6 	bl	800b1b8 <memset>

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 80009cc:	4b1d      	ldr	r3, [pc, #116]	; (8000a44 <MX_TIM14_Init+0x8c>)
 80009ce:	4a1e      	ldr	r2, [pc, #120]	; (8000a48 <MX_TIM14_Init+0x90>)
 80009d0:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 48-1;
 80009d2:	4b1c      	ldr	r3, [pc, #112]	; (8000a44 <MX_TIM14_Init+0x8c>)
 80009d4:	222f      	movs	r2, #47	; 0x2f
 80009d6:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009d8:	4b1a      	ldr	r3, [pc, #104]	; (8000a44 <MX_TIM14_Init+0x8c>)
 80009da:	2200      	movs	r2, #0
 80009dc:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 10000-1;
 80009de:	4b19      	ldr	r3, [pc, #100]	; (8000a44 <MX_TIM14_Init+0x8c>)
 80009e0:	4a1a      	ldr	r2, [pc, #104]	; (8000a4c <MX_TIM14_Init+0x94>)
 80009e2:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009e4:	4b17      	ldr	r3, [pc, #92]	; (8000a44 <MX_TIM14_Init+0x8c>)
 80009e6:	2200      	movs	r2, #0
 80009e8:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009ea:	4b16      	ldr	r3, [pc, #88]	; (8000a44 <MX_TIM14_Init+0x8c>)
 80009ec:	2200      	movs	r2, #0
 80009ee:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 80009f0:	4b14      	ldr	r3, [pc, #80]	; (8000a44 <MX_TIM14_Init+0x8c>)
 80009f2:	0018      	movs	r0, r3
 80009f4:	f004 fc86 	bl	8005304 <HAL_TIM_Base_Init>
 80009f8:	1e03      	subs	r3, r0, #0
 80009fa:	d001      	beq.n	8000a00 <MX_TIM14_Init+0x48>
  {
    Error_Handler();
 80009fc:	f000 fd32 	bl	8001464 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim14) != HAL_OK)
 8000a00:	4b10      	ldr	r3, [pc, #64]	; (8000a44 <MX_TIM14_Init+0x8c>)
 8000a02:	0018      	movs	r0, r3
 8000a04:	f004 fd20 	bl	8005448 <HAL_TIM_OC_Init>
 8000a08:	1e03      	subs	r3, r0, #0
 8000a0a:	d001      	beq.n	8000a10 <MX_TIM14_Init+0x58>
  {
    Error_Handler();
 8000a0c:	f000 fd2a 	bl	8001464 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8000a10:	1d3b      	adds	r3, r7, #4
 8000a12:	2200      	movs	r2, #0
 8000a14:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8000a16:	1d3b      	adds	r3, r7, #4
 8000a18:	2200      	movs	r2, #0
 8000a1a:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a1c:	1d3b      	adds	r3, r7, #4
 8000a1e:	2200      	movs	r2, #0
 8000a20:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a22:	1d3b      	adds	r3, r7, #4
 8000a24:	2200      	movs	r2, #0
 8000a26:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_OC_ConfigChannel(&htim14, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000a28:	1d39      	adds	r1, r7, #4
 8000a2a:	4b06      	ldr	r3, [pc, #24]	; (8000a44 <MX_TIM14_Init+0x8c>)
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	0018      	movs	r0, r3
 8000a30:	f004 fe78 	bl	8005724 <HAL_TIM_OC_ConfigChannel>
 8000a34:	1e03      	subs	r3, r0, #0
 8000a36:	d001      	beq.n	8000a3c <MX_TIM14_Init+0x84>
  {
    Error_Handler();
 8000a38:	f000 fd14 	bl	8001464 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 8000a3c:	46c0      	nop			; (mov r8, r8)
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	b008      	add	sp, #32
 8000a42:	bd80      	pop	{r7, pc}
 8000a44:	20000548 	.word	0x20000548
 8000a48:	40002000 	.word	0x40002000
 8000a4c:	0000270f 	.word	0x0000270f

08000a50 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000a54:	4b14      	ldr	r3, [pc, #80]	; (8000aa8 <MX_USART3_UART_Init+0x58>)
 8000a56:	4a15      	ldr	r2, [pc, #84]	; (8000aac <MX_USART3_UART_Init+0x5c>)
 8000a58:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 38400;
 8000a5a:	4b13      	ldr	r3, [pc, #76]	; (8000aa8 <MX_USART3_UART_Init+0x58>)
 8000a5c:	2296      	movs	r2, #150	; 0x96
 8000a5e:	0212      	lsls	r2, r2, #8
 8000a60:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000a62:	4b11      	ldr	r3, [pc, #68]	; (8000aa8 <MX_USART3_UART_Init+0x58>)
 8000a64:	2200      	movs	r2, #0
 8000a66:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000a68:	4b0f      	ldr	r3, [pc, #60]	; (8000aa8 <MX_USART3_UART_Init+0x58>)
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000a6e:	4b0e      	ldr	r3, [pc, #56]	; (8000aa8 <MX_USART3_UART_Init+0x58>)
 8000a70:	2200      	movs	r2, #0
 8000a72:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000a74:	4b0c      	ldr	r3, [pc, #48]	; (8000aa8 <MX_USART3_UART_Init+0x58>)
 8000a76:	220c      	movs	r2, #12
 8000a78:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a7a:	4b0b      	ldr	r3, [pc, #44]	; (8000aa8 <MX_USART3_UART_Init+0x58>)
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a80:	4b09      	ldr	r3, [pc, #36]	; (8000aa8 <MX_USART3_UART_Init+0x58>)
 8000a82:	2200      	movs	r2, #0
 8000a84:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a86:	4b08      	ldr	r3, [pc, #32]	; (8000aa8 <MX_USART3_UART_Init+0x58>)
 8000a88:	2200      	movs	r2, #0
 8000a8a:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a8c:	4b06      	ldr	r3, [pc, #24]	; (8000aa8 <MX_USART3_UART_Init+0x58>)
 8000a8e:	2200      	movs	r2, #0
 8000a90:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000a92:	4b05      	ldr	r3, [pc, #20]	; (8000aa8 <MX_USART3_UART_Init+0x58>)
 8000a94:	0018      	movs	r0, r3
 8000a96:	f005 f949 	bl	8005d2c <HAL_UART_Init>
 8000a9a:	1e03      	subs	r3, r0, #0
 8000a9c:	d001      	beq.n	8000aa2 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000a9e:	f000 fce1 	bl	8001464 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000aa2:	46c0      	nop			; (mov r8, r8)
 8000aa4:	46bd      	mov	sp, r7
 8000aa6:	bd80      	pop	{r7, pc}
 8000aa8:	2000045c 	.word	0x2000045c
 8000aac:	40004800 	.word	0x40004800

08000ab0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	b082      	sub	sp, #8
 8000ab4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000ab6:	4b0c      	ldr	r3, [pc, #48]	; (8000ae8 <MX_DMA_Init+0x38>)
 8000ab8:	695a      	ldr	r2, [r3, #20]
 8000aba:	4b0b      	ldr	r3, [pc, #44]	; (8000ae8 <MX_DMA_Init+0x38>)
 8000abc:	2101      	movs	r1, #1
 8000abe:	430a      	orrs	r2, r1
 8000ac0:	615a      	str	r2, [r3, #20]
 8000ac2:	4b09      	ldr	r3, [pc, #36]	; (8000ae8 <MX_DMA_Init+0x38>)
 8000ac4:	695b      	ldr	r3, [r3, #20]
 8000ac6:	2201      	movs	r2, #1
 8000ac8:	4013      	ands	r3, r2
 8000aca:	607b      	str	r3, [r7, #4]
 8000acc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000ace:	2200      	movs	r2, #0
 8000ad0:	2100      	movs	r1, #0
 8000ad2:	2009      	movs	r0, #9
 8000ad4:	f001 fb4c 	bl	8002170 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000ad8:	2009      	movs	r0, #9
 8000ada:	f001 fb5e 	bl	800219a <HAL_NVIC_EnableIRQ>

}
 8000ade:	46c0      	nop			; (mov r8, r8)
 8000ae0:	46bd      	mov	sp, r7
 8000ae2:	b002      	add	sp, #8
 8000ae4:	bd80      	pop	{r7, pc}
 8000ae6:	46c0      	nop			; (mov r8, r8)
 8000ae8:	40021000 	.word	0x40021000

08000aec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000aec:	b590      	push	{r4, r7, lr}
 8000aee:	b08b      	sub	sp, #44	; 0x2c
 8000af0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000af2:	2414      	movs	r4, #20
 8000af4:	193b      	adds	r3, r7, r4
 8000af6:	0018      	movs	r0, r3
 8000af8:	2314      	movs	r3, #20
 8000afa:	001a      	movs	r2, r3
 8000afc:	2100      	movs	r1, #0
 8000afe:	f00a fb5b 	bl	800b1b8 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000b02:	4b6b      	ldr	r3, [pc, #428]	; (8000cb0 <MX_GPIO_Init+0x1c4>)
 8000b04:	695a      	ldr	r2, [r3, #20]
 8000b06:	4b6a      	ldr	r3, [pc, #424]	; (8000cb0 <MX_GPIO_Init+0x1c4>)
 8000b08:	2180      	movs	r1, #128	; 0x80
 8000b0a:	03c9      	lsls	r1, r1, #15
 8000b0c:	430a      	orrs	r2, r1
 8000b0e:	615a      	str	r2, [r3, #20]
 8000b10:	4b67      	ldr	r3, [pc, #412]	; (8000cb0 <MX_GPIO_Init+0x1c4>)
 8000b12:	695a      	ldr	r2, [r3, #20]
 8000b14:	2380      	movs	r3, #128	; 0x80
 8000b16:	03db      	lsls	r3, r3, #15
 8000b18:	4013      	ands	r3, r2
 8000b1a:	613b      	str	r3, [r7, #16]
 8000b1c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b1e:	4b64      	ldr	r3, [pc, #400]	; (8000cb0 <MX_GPIO_Init+0x1c4>)
 8000b20:	695a      	ldr	r2, [r3, #20]
 8000b22:	4b63      	ldr	r3, [pc, #396]	; (8000cb0 <MX_GPIO_Init+0x1c4>)
 8000b24:	2180      	movs	r1, #128	; 0x80
 8000b26:	0309      	lsls	r1, r1, #12
 8000b28:	430a      	orrs	r2, r1
 8000b2a:	615a      	str	r2, [r3, #20]
 8000b2c:	4b60      	ldr	r3, [pc, #384]	; (8000cb0 <MX_GPIO_Init+0x1c4>)
 8000b2e:	695a      	ldr	r2, [r3, #20]
 8000b30:	2380      	movs	r3, #128	; 0x80
 8000b32:	031b      	lsls	r3, r3, #12
 8000b34:	4013      	ands	r3, r2
 8000b36:	60fb      	str	r3, [r7, #12]
 8000b38:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b3a:	4b5d      	ldr	r3, [pc, #372]	; (8000cb0 <MX_GPIO_Init+0x1c4>)
 8000b3c:	695a      	ldr	r2, [r3, #20]
 8000b3e:	4b5c      	ldr	r3, [pc, #368]	; (8000cb0 <MX_GPIO_Init+0x1c4>)
 8000b40:	2180      	movs	r1, #128	; 0x80
 8000b42:	0289      	lsls	r1, r1, #10
 8000b44:	430a      	orrs	r2, r1
 8000b46:	615a      	str	r2, [r3, #20]
 8000b48:	4b59      	ldr	r3, [pc, #356]	; (8000cb0 <MX_GPIO_Init+0x1c4>)
 8000b4a:	695a      	ldr	r2, [r3, #20]
 8000b4c:	2380      	movs	r3, #128	; 0x80
 8000b4e:	029b      	lsls	r3, r3, #10
 8000b50:	4013      	ands	r3, r2
 8000b52:	60bb      	str	r3, [r7, #8]
 8000b54:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b56:	4b56      	ldr	r3, [pc, #344]	; (8000cb0 <MX_GPIO_Init+0x1c4>)
 8000b58:	695a      	ldr	r2, [r3, #20]
 8000b5a:	4b55      	ldr	r3, [pc, #340]	; (8000cb0 <MX_GPIO_Init+0x1c4>)
 8000b5c:	2180      	movs	r1, #128	; 0x80
 8000b5e:	02c9      	lsls	r1, r1, #11
 8000b60:	430a      	orrs	r2, r1
 8000b62:	615a      	str	r2, [r3, #20]
 8000b64:	4b52      	ldr	r3, [pc, #328]	; (8000cb0 <MX_GPIO_Init+0x1c4>)
 8000b66:	695a      	ldr	r2, [r3, #20]
 8000b68:	2380      	movs	r3, #128	; 0x80
 8000b6a:	02db      	lsls	r3, r3, #11
 8000b6c:	4013      	ands	r3, r2
 8000b6e:	607b      	str	r3, [r7, #4]
 8000b70:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b72:	4b4f      	ldr	r3, [pc, #316]	; (8000cb0 <MX_GPIO_Init+0x1c4>)
 8000b74:	695a      	ldr	r2, [r3, #20]
 8000b76:	4b4e      	ldr	r3, [pc, #312]	; (8000cb0 <MX_GPIO_Init+0x1c4>)
 8000b78:	2180      	movs	r1, #128	; 0x80
 8000b7a:	0349      	lsls	r1, r1, #13
 8000b7c:	430a      	orrs	r2, r1
 8000b7e:	615a      	str	r2, [r3, #20]
 8000b80:	4b4b      	ldr	r3, [pc, #300]	; (8000cb0 <MX_GPIO_Init+0x1c4>)
 8000b82:	695a      	ldr	r2, [r3, #20]
 8000b84:	2380      	movs	r3, #128	; 0x80
 8000b86:	035b      	lsls	r3, r3, #13
 8000b88:	4013      	ands	r3, r2
 8000b8a:	603b      	str	r3, [r7, #0]
 8000b8c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, _5V_BAT_OFF_Pin|DEBUG_Pin|SR_CLR_Pin|SR_RCLK_Pin
 8000b8e:	4949      	ldr	r1, [pc, #292]	; (8000cb4 <MX_GPIO_Init+0x1c8>)
 8000b90:	4b49      	ldr	r3, [pc, #292]	; (8000cb8 <MX_GPIO_Init+0x1cc>)
 8000b92:	2200      	movs	r2, #0
 8000b94:	0018      	movs	r0, r3
 8000b96:	f001 fe36 	bl	8002806 <HAL_GPIO_WritePin>
                          |SR_OE_Pin|DISP_CS_Pin|DISP_RST_Pin|BACKLIGHT_GREEN_Pin
                          |BACKLIGHT_WHITE_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LOAD_MAX_Pin|LOAD_MIN_Pin|EM_HEATER_CTRL_Pin|HEATER_CTRL_Pin
 8000b9a:	239e      	movs	r3, #158	; 0x9e
 8000b9c:	015b      	lsls	r3, r3, #5
 8000b9e:	4847      	ldr	r0, [pc, #284]	; (8000cbc <MX_GPIO_Init+0x1d0>)
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	0019      	movs	r1, r3
 8000ba4:	f001 fe2f 	bl	8002806 <HAL_GPIO_WritePin>
                          |BUZZER_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BACKLIGHT_RED_GPIO_Port, BACKLIGHT_RED_Pin, GPIO_PIN_RESET);
 8000ba8:	2380      	movs	r3, #128	; 0x80
 8000baa:	0219      	lsls	r1, r3, #8
 8000bac:	2390      	movs	r3, #144	; 0x90
 8000bae:	05db      	lsls	r3, r3, #23
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	0018      	movs	r0, r3
 8000bb4:	f001 fe27 	bl	8002806 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : _5V_BAT_OFF_Pin DEBUG_Pin SR_CLR_Pin SR_RCLK_Pin
                           SR_OE_Pin DISP_CS_Pin DISP_RST_Pin BACKLIGHT_GREEN_Pin
                           BACKLIGHT_WHITE_Pin */
  GPIO_InitStruct.Pin = _5V_BAT_OFF_Pin|DEBUG_Pin|SR_CLR_Pin|SR_RCLK_Pin
 8000bb8:	193b      	adds	r3, r7, r4
 8000bba:	4a3e      	ldr	r2, [pc, #248]	; (8000cb4 <MX_GPIO_Init+0x1c8>)
 8000bbc:	601a      	str	r2, [r3, #0]
                          |SR_OE_Pin|DISP_CS_Pin|DISP_RST_Pin|BACKLIGHT_GREEN_Pin
                          |BACKLIGHT_WHITE_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bbe:	193b      	adds	r3, r7, r4
 8000bc0:	2201      	movs	r2, #1
 8000bc2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bc4:	193b      	adds	r3, r7, r4
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bca:	193b      	adds	r3, r7, r4
 8000bcc:	2200      	movs	r2, #0
 8000bce:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bd0:	193b      	adds	r3, r7, r4
 8000bd2:	4a39      	ldr	r2, [pc, #228]	; (8000cb8 <MX_GPIO_Init+0x1cc>)
 8000bd4:	0019      	movs	r1, r3
 8000bd6:	0010      	movs	r0, r2
 8000bd8:	f001 fc80 	bl	80024dc <HAL_GPIO_Init>

  /*Configure GPIO pins : LOAD_MAX_Pin LOAD_MIN_Pin EM_HEATER_CTRL_Pin HEATER_CTRL_Pin
                           BUZZER_Pin */
  GPIO_InitStruct.Pin = LOAD_MAX_Pin|LOAD_MIN_Pin|EM_HEATER_CTRL_Pin|HEATER_CTRL_Pin
 8000bdc:	0021      	movs	r1, r4
 8000bde:	187b      	adds	r3, r7, r1
 8000be0:	229e      	movs	r2, #158	; 0x9e
 8000be2:	0152      	lsls	r2, r2, #5
 8000be4:	601a      	str	r2, [r3, #0]
                          |BUZZER_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000be6:	000c      	movs	r4, r1
 8000be8:	193b      	adds	r3, r7, r4
 8000bea:	2201      	movs	r2, #1
 8000bec:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bee:	193b      	adds	r3, r7, r4
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bf4:	193b      	adds	r3, r7, r4
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000bfa:	193b      	adds	r3, r7, r4
 8000bfc:	4a2f      	ldr	r2, [pc, #188]	; (8000cbc <MX_GPIO_Init+0x1d0>)
 8000bfe:	0019      	movs	r1, r3
 8000c00:	0010      	movs	r0, r2
 8000c02:	f001 fc6b 	bl	80024dc <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON_1_Pin BUTTON_0_Pin */
  GPIO_InitStruct.Pin = BUTTON_1_Pin|BUTTON_0_Pin;
 8000c06:	193b      	adds	r3, r7, r4
 8000c08:	22c0      	movs	r2, #192	; 0xc0
 8000c0a:	0092      	lsls	r2, r2, #2
 8000c0c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000c0e:	193b      	adds	r3, r7, r4
 8000c10:	2288      	movs	r2, #136	; 0x88
 8000c12:	0352      	lsls	r2, r2, #13
 8000c14:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000c16:	193b      	adds	r3, r7, r4
 8000c18:	2202      	movs	r2, #2
 8000c1a:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c1c:	193a      	adds	r2, r7, r4
 8000c1e:	2390      	movs	r3, #144	; 0x90
 8000c20:	05db      	lsls	r3, r3, #23
 8000c22:	0011      	movs	r1, r2
 8000c24:	0018      	movs	r0, r3
 8000c26:	f001 fc59 	bl	80024dc <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000c2a:	193b      	adds	r3, r7, r4
 8000c2c:	2280      	movs	r2, #128	; 0x80
 8000c2e:	00d2      	lsls	r2, r2, #3
 8000c30:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c32:	193b      	adds	r3, r7, r4
 8000c34:	2200      	movs	r2, #0
 8000c36:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c38:	193b      	adds	r3, r7, r4
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000c3e:	193a      	adds	r2, r7, r4
 8000c40:	2390      	movs	r3, #144	; 0x90
 8000c42:	05db      	lsls	r3, r3, #23
 8000c44:	0011      	movs	r1, r2
 8000c46:	0018      	movs	r0, r3
 8000c48:	f001 fc48 	bl	80024dc <HAL_GPIO_Init>

  /*Configure GPIO pin : BACKLIGHT_RED_Pin */
  GPIO_InitStruct.Pin = BACKLIGHT_RED_Pin;
 8000c4c:	0021      	movs	r1, r4
 8000c4e:	187b      	adds	r3, r7, r1
 8000c50:	2280      	movs	r2, #128	; 0x80
 8000c52:	0212      	lsls	r2, r2, #8
 8000c54:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c56:	000c      	movs	r4, r1
 8000c58:	193b      	adds	r3, r7, r4
 8000c5a:	2201      	movs	r2, #1
 8000c5c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c5e:	193b      	adds	r3, r7, r4
 8000c60:	2200      	movs	r2, #0
 8000c62:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c64:	193b      	adds	r3, r7, r4
 8000c66:	2200      	movs	r2, #0
 8000c68:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(BACKLIGHT_RED_GPIO_Port, &GPIO_InitStruct);
 8000c6a:	193a      	adds	r2, r7, r4
 8000c6c:	2390      	movs	r3, #144	; 0x90
 8000c6e:	05db      	lsls	r3, r3, #23
 8000c70:	0011      	movs	r1, r2
 8000c72:	0018      	movs	r0, r3
 8000c74:	f001 fc32 	bl	80024dc <HAL_GPIO_Init>

  /*Configure GPIO pin : CONNECTION_ERR_Pin */
  GPIO_InitStruct.Pin = CONNECTION_ERR_Pin;
 8000c78:	193b      	adds	r3, r7, r4
 8000c7a:	2204      	movs	r2, #4
 8000c7c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c7e:	193b      	adds	r3, r7, r4
 8000c80:	2200      	movs	r2, #0
 8000c82:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c84:	193b      	adds	r3, r7, r4
 8000c86:	2200      	movs	r2, #0
 8000c88:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(CONNECTION_ERR_GPIO_Port, &GPIO_InitStruct);
 8000c8a:	193b      	adds	r3, r7, r4
 8000c8c:	4a0c      	ldr	r2, [pc, #48]	; (8000cc0 <MX_GPIO_Init+0x1d4>)
 8000c8e:	0019      	movs	r1, r3
 8000c90:	0010      	movs	r0, r2
 8000c92:	f001 fc23 	bl	80024dc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 8000c96:	2200      	movs	r2, #0
 8000c98:	2100      	movs	r1, #0
 8000c9a:	2007      	movs	r0, #7
 8000c9c:	f001 fa68 	bl	8002170 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8000ca0:	2007      	movs	r0, #7
 8000ca2:	f001 fa7a 	bl	800219a <HAL_NVIC_EnableIRQ>

}
 8000ca6:	46c0      	nop			; (mov r8, r8)
 8000ca8:	46bd      	mov	sp, r7
 8000caa:	b00b      	add	sp, #44	; 0x2c
 8000cac:	bd90      	pop	{r4, r7, pc}
 8000cae:	46c0      	nop			; (mov r8, r8)
 8000cb0:	40021000 	.word	0x40021000
 8000cb4:	0000f3c4 	.word	0x0000f3c4
 8000cb8:	48000400 	.word	0x48000400
 8000cbc:	48000800 	.word	0x48000800
 8000cc0:	48000c00 	.word	0x48000c00

08000cc4 <clkHandler>:

/* USER CODE BEGIN 4 */

void clkHandler(void)
{
 8000cc4:	b590      	push	{r4, r7, lr}
 8000cc6:	b08b      	sub	sp, #44	; 0x2c
 8000cc8:	af02      	add	r7, sp, #8
	flags.ten_ms = 0;
 8000cca:	4b4c      	ldr	r3, [pc, #304]	; (8000dfc <clkHandler+0x138>)
 8000ccc:	781a      	ldrb	r2, [r3, #0]
 8000cce:	2101      	movs	r1, #1
 8000cd0:	438a      	bics	r2, r1
 8000cd2:	701a      	strb	r2, [r3, #0]
	flags.sec	= 0;
 8000cd4:	4b49      	ldr	r3, [pc, #292]	; (8000dfc <clkHandler+0x138>)
 8000cd6:	781a      	ldrb	r2, [r3, #0]
 8000cd8:	2102      	movs	r1, #2
 8000cda:	438a      	bics	r2, r1
 8000cdc:	701a      	strb	r2, [r3, #0]
	flags.min	= 0;
 8000cde:	4b47      	ldr	r3, [pc, #284]	; (8000dfc <clkHandler+0x138>)
 8000ce0:	781a      	ldrb	r2, [r3, #0]
 8000ce2:	2104      	movs	r1, #4
 8000ce4:	438a      	bics	r2, r1
 8000ce6:	701a      	strb	r2, [r3, #0]
	flags.hour	= 0;
 8000ce8:	4b44      	ldr	r3, [pc, #272]	; (8000dfc <clkHandler+0x138>)
 8000cea:	781a      	ldrb	r2, [r3, #0]
 8000cec:	2108      	movs	r1, #8
 8000cee:	438a      	bics	r2, r1
 8000cf0:	701a      	strb	r2, [r3, #0]
	sysTime++;
 8000cf2:	4b43      	ldr	r3, [pc, #268]	; (8000e00 <clkHandler+0x13c>)
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	1c5a      	adds	r2, r3, #1
 8000cf8:	4b41      	ldr	r3, [pc, #260]	; (8000e00 <clkHandler+0x13c>)
 8000cfa:	601a      	str	r2, [r3, #0]
	if((sysTime % 100) == 0)	//1 s
 8000cfc:	4b40      	ldr	r3, [pc, #256]	; (8000e00 <clkHandler+0x13c>)
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	2164      	movs	r1, #100	; 0x64
 8000d02:	0018      	movs	r0, r3
 8000d04:	f7ff fa98 	bl	8000238 <__aeabi_uidivmod>
 8000d08:	1e0b      	subs	r3, r1, #0
 8000d0a:	d109      	bne.n	8000d20 <clkHandler+0x5c>
	{
		sysTime_sec++;
 8000d0c:	4b3d      	ldr	r3, [pc, #244]	; (8000e04 <clkHandler+0x140>)
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	1c5a      	adds	r2, r3, #1
 8000d12:	4b3c      	ldr	r3, [pc, #240]	; (8000e04 <clkHandler+0x140>)
 8000d14:	601a      	str	r2, [r3, #0]
		flags.sec = 1;
 8000d16:	4b39      	ldr	r3, [pc, #228]	; (8000dfc <clkHandler+0x138>)
 8000d18:	781a      	ldrb	r2, [r3, #0]
 8000d1a:	2102      	movs	r1, #2
 8000d1c:	430a      	orrs	r2, r1
 8000d1e:	701a      	strb	r2, [r3, #0]
	}

	if(flags.sec)
 8000d20:	4b36      	ldr	r3, [pc, #216]	; (8000dfc <clkHandler+0x138>)
 8000d22:	781b      	ldrb	r3, [r3, #0]
 8000d24:	2202      	movs	r2, #2
 8000d26:	4013      	ands	r3, r2
 8000d28:	b2db      	uxtb	r3, r3
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d042      	beq.n	8000db4 <clkHandler+0xf0>
	{
		if((sysTime_sec % 60) == 0 && sysTime_sec != 0)	//1 min
 8000d2e:	4b35      	ldr	r3, [pc, #212]	; (8000e04 <clkHandler+0x140>)
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	213c      	movs	r1, #60	; 0x3c
 8000d34:	0018      	movs	r0, r3
 8000d36:	f7ff fa7f 	bl	8000238 <__aeabi_uidivmod>
 8000d3a:	1e0b      	subs	r3, r1, #0
 8000d3c:	d110      	bne.n	8000d60 <clkHandler+0x9c>
 8000d3e:	4b31      	ldr	r3, [pc, #196]	; (8000e04 <clkHandler+0x140>)
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	d00c      	beq.n	8000d60 <clkHandler+0x9c>
		{
			sysTime_sec = 0;
 8000d46:	4b2f      	ldr	r3, [pc, #188]	; (8000e04 <clkHandler+0x140>)
 8000d48:	2200      	movs	r2, #0
 8000d4a:	601a      	str	r2, [r3, #0]
			sysTime_min++;
 8000d4c:	4b2e      	ldr	r3, [pc, #184]	; (8000e08 <clkHandler+0x144>)
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	1c5a      	adds	r2, r3, #1
 8000d52:	4b2d      	ldr	r3, [pc, #180]	; (8000e08 <clkHandler+0x144>)
 8000d54:	601a      	str	r2, [r3, #0]
			flags.min = 1;
 8000d56:	4b29      	ldr	r3, [pc, #164]	; (8000dfc <clkHandler+0x138>)
 8000d58:	781a      	ldrb	r2, [r3, #0]
 8000d5a:	2104      	movs	r1, #4
 8000d5c:	430a      	orrs	r2, r1
 8000d5e:	701a      	strb	r2, [r3, #0]
		}

		if(flags.min)
 8000d60:	4b26      	ldr	r3, [pc, #152]	; (8000dfc <clkHandler+0x138>)
 8000d62:	781b      	ldrb	r3, [r3, #0]
 8000d64:	2204      	movs	r2, #4
 8000d66:	4013      	ands	r3, r2
 8000d68:	b2db      	uxtb	r3, r3
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d022      	beq.n	8000db4 <clkHandler+0xf0>
		{
			if((sysTime_min % 60) == 0 && sysTime_min != 0)	//1 min
 8000d6e:	4b26      	ldr	r3, [pc, #152]	; (8000e08 <clkHandler+0x144>)
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	213c      	movs	r1, #60	; 0x3c
 8000d74:	0018      	movs	r0, r3
 8000d76:	f7ff fa5f 	bl	8000238 <__aeabi_uidivmod>
 8000d7a:	1e0b      	subs	r3, r1, #0
 8000d7c:	d11a      	bne.n	8000db4 <clkHandler+0xf0>
 8000d7e:	4b22      	ldr	r3, [pc, #136]	; (8000e08 <clkHandler+0x144>)
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d016      	beq.n	8000db4 <clkHandler+0xf0>
			{

				sysTime_sec = 0;
 8000d86:	4b1f      	ldr	r3, [pc, #124]	; (8000e04 <clkHandler+0x140>)
 8000d88:	2200      	movs	r2, #0
 8000d8a:	601a      	str	r2, [r3, #0]
				sysTime_min = 0;
 8000d8c:	4b1e      	ldr	r3, [pc, #120]	; (8000e08 <clkHandler+0x144>)
 8000d8e:	2200      	movs	r2, #0
 8000d90:	601a      	str	r2, [r3, #0]
				sysTime_hour++;
 8000d92:	4b1e      	ldr	r3, [pc, #120]	; (8000e0c <clkHandler+0x148>)
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	1c5a      	adds	r2, r3, #1
 8000d98:	4b1c      	ldr	r3, [pc, #112]	; (8000e0c <clkHandler+0x148>)
 8000d9a:	601a      	str	r2, [r3, #0]
				flags.hour = 1;
 8000d9c:	4b17      	ldr	r3, [pc, #92]	; (8000dfc <clkHandler+0x138>)
 8000d9e:	781a      	ldrb	r2, [r3, #0]
 8000da0:	2108      	movs	r1, #8
 8000da2:	430a      	orrs	r2, r1
 8000da4:	701a      	strb	r2, [r3, #0]
				if(sysTime_hour >= 23)
 8000da6:	4b19      	ldr	r3, [pc, #100]	; (8000e0c <clkHandler+0x148>)
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	2b16      	cmp	r3, #22
 8000dac:	d902      	bls.n	8000db4 <clkHandler+0xf0>
					sysTime_hour = 0;
 8000dae:	4b17      	ldr	r3, [pc, #92]	; (8000e0c <clkHandler+0x148>)
 8000db0:	2200      	movs	r2, #0
 8000db2:	601a      	str	r2, [r3, #0]
			}
		}
	}

#ifdef __DEBUG_TIME__
	if(flags.sec)
 8000db4:	4b11      	ldr	r3, [pc, #68]	; (8000dfc <clkHandler+0x138>)
 8000db6:	781b      	ldrb	r3, [r3, #0]
 8000db8:	2202      	movs	r2, #2
 8000dba:	4013      	ands	r3, r2
 8000dbc:	b2db      	uxtb	r3, r3
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d018      	beq.n	8000df4 <clkHandler+0x130>
	{
		char timeStamp[30];
		sprintf(timeStamp, "%d : %d : %d\n", sysTime_hour, sysTime_min, sysTime_sec);
 8000dc2:	4b12      	ldr	r3, [pc, #72]	; (8000e0c <clkHandler+0x148>)
 8000dc4:	681a      	ldr	r2, [r3, #0]
 8000dc6:	4b10      	ldr	r3, [pc, #64]	; (8000e08 <clkHandler+0x144>)
 8000dc8:	681c      	ldr	r4, [r3, #0]
 8000dca:	4b0e      	ldr	r3, [pc, #56]	; (8000e04 <clkHandler+0x140>)
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	4910      	ldr	r1, [pc, #64]	; (8000e10 <clkHandler+0x14c>)
 8000dd0:	0038      	movs	r0, r7
 8000dd2:	9300      	str	r3, [sp, #0]
 8000dd4:	0023      	movs	r3, r4
 8000dd6:	f00a fab1 	bl	800b33c <siprintf>
		pushStr(USB_Tx_Buffer, timeStamp, strlen(timeStamp));	//odešli čas
 8000dda:	4b0e      	ldr	r3, [pc, #56]	; (8000e14 <clkHandler+0x150>)
 8000ddc:	681c      	ldr	r4, [r3, #0]
 8000dde:	003b      	movs	r3, r7
 8000de0:	0018      	movs	r0, r3
 8000de2:	f7ff f991 	bl	8000108 <strlen>
 8000de6:	0003      	movs	r3, r0
 8000de8:	001a      	movs	r2, r3
 8000dea:	003b      	movs	r3, r7
 8000dec:	0019      	movs	r1, r3
 8000dee:	0020      	movs	r0, r4
 8000df0:	f000 fba9 	bl	8001546 <pushStr>
	}
#endif
}
 8000df4:	46c0      	nop			; (mov r8, r8)
 8000df6:	46bd      	mov	sp, r7
 8000df8:	b009      	add	sp, #36	; 0x24
 8000dfa:	bd90      	pop	{r4, r7, pc}
 8000dfc:	20000590 	.word	0x20000590
 8000e00:	200001fc 	.word	0x200001fc
 8000e04:	20000200 	.word	0x20000200
 8000e08:	20000204 	.word	0x20000204
 8000e0c:	20000208 	.word	0x20000208
 8000e10:	0800ba2c 	.word	0x0800ba2c
 8000e14:	200004e0 	.word	0x200004e0

08000e18 <buttonDebounce>:

void buttonDebounce(void)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	af00      	add	r7, sp, #0
	if(flags.butt0_int)
 8000e1c:	4b38      	ldr	r3, [pc, #224]	; (8000f00 <buttonDebounce+0xe8>)
 8000e1e:	781b      	ldrb	r3, [r3, #0]
 8000e20:	2210      	movs	r2, #16
 8000e22:	4013      	ands	r3, r2
 8000e24:	b2db      	uxtb	r3, r3
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d031      	beq.n	8000e8e <buttonDebounce+0x76>
	{
		if(HAL_GPIO_ReadPin(BUTTON_0_GPIO_Port,BUTTON_0_Pin) == GPIO_PIN_SET)
 8000e2a:	2380      	movs	r3, #128	; 0x80
 8000e2c:	009a      	lsls	r2, r3, #2
 8000e2e:	2390      	movs	r3, #144	; 0x90
 8000e30:	05db      	lsls	r3, r3, #23
 8000e32:	0011      	movs	r1, r2
 8000e34:	0018      	movs	r0, r3
 8000e36:	f001 fcc9 	bl	80027cc <HAL_GPIO_ReadPin>
 8000e3a:	0003      	movs	r3, r0
 8000e3c:	2b01      	cmp	r3, #1
 8000e3e:	d106      	bne.n	8000e4e <buttonDebounce+0x36>
		{
			button0_Debounce++;
 8000e40:	4b30      	ldr	r3, [pc, #192]	; (8000f04 <buttonDebounce+0xec>)
 8000e42:	781b      	ldrb	r3, [r3, #0]
 8000e44:	3301      	adds	r3, #1
 8000e46:	b2da      	uxtb	r2, r3
 8000e48:	4b2e      	ldr	r3, [pc, #184]	; (8000f04 <buttonDebounce+0xec>)
 8000e4a:	701a      	strb	r2, [r3, #0]
 8000e4c:	e007      	b.n	8000e5e <buttonDebounce+0x46>
		}
		else
		{
			button0_Debounce = 0;
 8000e4e:	4b2d      	ldr	r3, [pc, #180]	; (8000f04 <buttonDebounce+0xec>)
 8000e50:	2200      	movs	r2, #0
 8000e52:	701a      	strb	r2, [r3, #0]
			flags.butt0_int = 0;
 8000e54:	4b2a      	ldr	r3, [pc, #168]	; (8000f00 <buttonDebounce+0xe8>)
 8000e56:	781a      	ldrb	r2, [r3, #0]
 8000e58:	2110      	movs	r1, #16
 8000e5a:	438a      	bics	r2, r1
 8000e5c:	701a      	strb	r2, [r3, #0]
		}
		if(button0_Debounce >= 5)
 8000e5e:	4b29      	ldr	r3, [pc, #164]	; (8000f04 <buttonDebounce+0xec>)
 8000e60:	781b      	ldrb	r3, [r3, #0]
 8000e62:	2b04      	cmp	r3, #4
 8000e64:	d913      	bls.n	8000e8e <buttonDebounce+0x76>
		{
			flags.butt0_ver = 1;
 8000e66:	4b26      	ldr	r3, [pc, #152]	; (8000f00 <buttonDebounce+0xe8>)
 8000e68:	781a      	ldrb	r2, [r3, #0]
 8000e6a:	2120      	movs	r1, #32
 8000e6c:	430a      	orrs	r2, r1
 8000e6e:	701a      	strb	r2, [r3, #0]
			flags.butt0_int = 0;
 8000e70:	4b23      	ldr	r3, [pc, #140]	; (8000f00 <buttonDebounce+0xe8>)
 8000e72:	781a      	ldrb	r2, [r3, #0]
 8000e74:	2110      	movs	r1, #16
 8000e76:	438a      	bics	r2, r1
 8000e78:	701a      	strb	r2, [r3, #0]
			button0_Debounce = 0;
 8000e7a:	4b22      	ldr	r3, [pc, #136]	; (8000f04 <buttonDebounce+0xec>)
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	701a      	strb	r2, [r3, #0]

#ifdef __DEBUG_BUTT__
			HAL_GPIO_TogglePin(BACKLIGHT_GREEN_GPIO_Port, BACKLIGHT_GREEN_Pin);
 8000e80:	2380      	movs	r3, #128	; 0x80
 8000e82:	005b      	lsls	r3, r3, #1
 8000e84:	4a20      	ldr	r2, [pc, #128]	; (8000f08 <buttonDebounce+0xf0>)
 8000e86:	0019      	movs	r1, r3
 8000e88:	0010      	movs	r0, r2
 8000e8a:	f001 fcd9 	bl	8002840 <HAL_GPIO_TogglePin>
			//writeChar('a', 1, 5);
#endif
		}
	}

	if(flags.butt1_int)
 8000e8e:	4b1c      	ldr	r3, [pc, #112]	; (8000f00 <buttonDebounce+0xe8>)
 8000e90:	781b      	ldrb	r3, [r3, #0]
 8000e92:	2240      	movs	r2, #64	; 0x40
 8000e94:	4013      	ands	r3, r2
 8000e96:	b2db      	uxtb	r3, r3
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d02e      	beq.n	8000efa <buttonDebounce+0xe2>
	{
		if(HAL_GPIO_ReadPin(BUTTON_1_GPIO_Port,BUTTON_1_Pin) == GPIO_PIN_SET)
 8000e9c:	2380      	movs	r3, #128	; 0x80
 8000e9e:	005a      	lsls	r2, r3, #1
 8000ea0:	2390      	movs	r3, #144	; 0x90
 8000ea2:	05db      	lsls	r3, r3, #23
 8000ea4:	0011      	movs	r1, r2
 8000ea6:	0018      	movs	r0, r3
 8000ea8:	f001 fc90 	bl	80027cc <HAL_GPIO_ReadPin>
 8000eac:	0003      	movs	r3, r0
 8000eae:	2b01      	cmp	r3, #1
 8000eb0:	d106      	bne.n	8000ec0 <buttonDebounce+0xa8>
		{
			button1_Debounce++;
 8000eb2:	4b16      	ldr	r3, [pc, #88]	; (8000f0c <buttonDebounce+0xf4>)
 8000eb4:	781b      	ldrb	r3, [r3, #0]
 8000eb6:	3301      	adds	r3, #1
 8000eb8:	b2da      	uxtb	r2, r3
 8000eba:	4b14      	ldr	r3, [pc, #80]	; (8000f0c <buttonDebounce+0xf4>)
 8000ebc:	701a      	strb	r2, [r3, #0]
 8000ebe:	e007      	b.n	8000ed0 <buttonDebounce+0xb8>
		}
		else
		{
			button1_Debounce = 0;
 8000ec0:	4b12      	ldr	r3, [pc, #72]	; (8000f0c <buttonDebounce+0xf4>)
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	701a      	strb	r2, [r3, #0]
			flags.butt1_int = 0;
 8000ec6:	4b0e      	ldr	r3, [pc, #56]	; (8000f00 <buttonDebounce+0xe8>)
 8000ec8:	781a      	ldrb	r2, [r3, #0]
 8000eca:	2140      	movs	r1, #64	; 0x40
 8000ecc:	438a      	bics	r2, r1
 8000ece:	701a      	strb	r2, [r3, #0]
		}
		if(button1_Debounce >= 5)
 8000ed0:	4b0e      	ldr	r3, [pc, #56]	; (8000f0c <buttonDebounce+0xf4>)
 8000ed2:	781b      	ldrb	r3, [r3, #0]
 8000ed4:	2b04      	cmp	r3, #4
 8000ed6:	d910      	bls.n	8000efa <buttonDebounce+0xe2>
		{
			flags.butt1_ver = 1;
 8000ed8:	4b09      	ldr	r3, [pc, #36]	; (8000f00 <buttonDebounce+0xe8>)
 8000eda:	781a      	ldrb	r2, [r3, #0]
 8000edc:	2180      	movs	r1, #128	; 0x80
 8000ede:	4249      	negs	r1, r1
 8000ee0:	430a      	orrs	r2, r1
 8000ee2:	701a      	strb	r2, [r3, #0]
			flags.butt1_int;
			button1_Debounce = 0;
 8000ee4:	4b09      	ldr	r3, [pc, #36]	; (8000f0c <buttonDebounce+0xf4>)
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	701a      	strb	r2, [r3, #0]

#ifdef __DEBUG_BUTT__
			HAL_GPIO_TogglePin(BACKLIGHT_RED_GPIO_Port, BACKLIGHT_RED_Pin);
 8000eea:	2380      	movs	r3, #128	; 0x80
 8000eec:	021a      	lsls	r2, r3, #8
 8000eee:	2390      	movs	r3, #144	; 0x90
 8000ef0:	05db      	lsls	r3, r3, #23
 8000ef2:	0011      	movs	r1, r2
 8000ef4:	0018      	movs	r0, r3
 8000ef6:	f001 fca3 	bl	8002840 <HAL_GPIO_TogglePin>
#endif
		}
	}
}
 8000efa:	46c0      	nop			; (mov r8, r8)
 8000efc:	46bd      	mov	sp, r7
 8000efe:	bd80      	pop	{r7, pc}
 8000f00:	20000590 	.word	0x20000590
 8000f04:	2000020c 	.word	0x2000020c
 8000f08:	48000400 	.word	0x48000400
 8000f0c:	2000020d 	.word	0x2000020d

08000f10 <comHandler>:
 *
 * Při přijmutí instrukce nedochází k zpracování, ale pouze k nastavení adekvátního flagu.
 * Vykonání instrukce musí být zařízeno v jiné části hlavního programu.
 */
void comHandler(void)
{
 8000f10:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000f12:	b099      	sub	sp, #100	; 0x64
 8000f14:	af00      	add	r7, sp, #0
	//___Příjem dat___//
	if(flags.data_received)
 8000f16:	4bb2      	ldr	r3, [pc, #712]	; (80011e0 <comHandler+0x2d0>)
 8000f18:	785b      	ldrb	r3, [r3, #1]
 8000f1a:	2201      	movs	r2, #1
 8000f1c:	4013      	ands	r3, r2
 8000f1e:	b2db      	uxtb	r3, r3
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d100      	bne.n	8000f26 <comHandler+0x16>
 8000f24:	e0ea      	b.n	80010fc <comHandler+0x1ec>
	{
		char instruction;
		while(pop(USB_Rx_Buffer, &instruction) != BUFFER_EMPTY)
 8000f26:	e0d5      	b.n	80010d4 <comHandler+0x1c4>
		{
			uint8_t txt[30];

			switch(instruction)
 8000f28:	232f      	movs	r3, #47	; 0x2f
 8000f2a:	2220      	movs	r2, #32
 8000f2c:	4694      	mov	ip, r2
 8000f2e:	44bc      	add	ip, r7
 8000f30:	4463      	add	r3, ip
 8000f32:	781b      	ldrb	r3, [r3, #0]
 8000f34:	2b73      	cmp	r3, #115	; 0x73
 8000f36:	d00a      	beq.n	8000f4e <comHandler+0x3e>
 8000f38:	dd00      	ble.n	8000f3c <comHandler+0x2c>
 8000f3a:	e0a4      	b.n	8001086 <comHandler+0x176>
 8000f3c:	2b70      	cmp	r3, #112	; 0x70
 8000f3e:	d054      	beq.n	8000fea <comHandler+0xda>
 8000f40:	dd00      	ble.n	8000f44 <comHandler+0x34>
 8000f42:	e0a0      	b.n	8001086 <comHandler+0x176>
 8000f44:	2b63      	cmp	r3, #99	; 0x63
 8000f46:	d029      	beq.n	8000f9c <comHandler+0x8c>
 8000f48:	2b6b      	cmp	r3, #107	; 0x6b
 8000f4a:	d075      	beq.n	8001038 <comHandler+0x128>
 8000f4c:	e09b      	b.n	8001086 <comHandler+0x176>
			{
			case 's': ;
				//___Start testu___//
				flags.startRequest = 1;
 8000f4e:	4ba4      	ldr	r3, [pc, #656]	; (80011e0 <comHandler+0x2d0>)
 8000f50:	785a      	ldrb	r2, [r3, #1]
 8000f52:	2102      	movs	r1, #2
 8000f54:	430a      	orrs	r2, r1
 8000f56:	705a      	strb	r2, [r3, #1]
#ifdef __DEBUG_INST__
				sprintf(txt, "Start\n");
 8000f58:	4aa2      	ldr	r2, [pc, #648]	; (80011e4 <comHandler+0x2d4>)
 8000f5a:	2310      	movs	r3, #16
 8000f5c:	001c      	movs	r4, r3
 8000f5e:	2120      	movs	r1, #32
 8000f60:	468c      	mov	ip, r1
 8000f62:	44bc      	add	ip, r7
 8000f64:	4463      	add	r3, ip
 8000f66:	0011      	movs	r1, r2
 8000f68:	0018      	movs	r0, r3
 8000f6a:	f00a f9e7 	bl	800b33c <siprintf>
				pushStr(USB_Tx_Buffer, txt, strlen(txt));
 8000f6e:	4b9e      	ldr	r3, [pc, #632]	; (80011e8 <comHandler+0x2d8>)
 8000f70:	681e      	ldr	r6, [r3, #0]
 8000f72:	0023      	movs	r3, r4
 8000f74:	001c      	movs	r4, r3
 8000f76:	2220      	movs	r2, #32
 8000f78:	4694      	mov	ip, r2
 8000f7a:	44bc      	add	ip, r7
 8000f7c:	4463      	add	r3, ip
 8000f7e:	0018      	movs	r0, r3
 8000f80:	f7ff f8c2 	bl	8000108 <strlen>
 8000f84:	0003      	movs	r3, r0
 8000f86:	001a      	movs	r2, r3
 8000f88:	0023      	movs	r3, r4
 8000f8a:	2120      	movs	r1, #32
 8000f8c:	468c      	mov	ip, r1
 8000f8e:	44bc      	add	ip, r7
 8000f90:	4463      	add	r3, ip
 8000f92:	0019      	movs	r1, r3
 8000f94:	0030      	movs	r0, r6
 8000f96:	f000 fad6 	bl	8001546 <pushStr>
#endif
				break;
 8000f9a:	e09b      	b.n	80010d4 <comHandler+0x1c4>

			case'c': ;
				//___Ukončení___//
				flags.stopRequest = 1;
 8000f9c:	4b90      	ldr	r3, [pc, #576]	; (80011e0 <comHandler+0x2d0>)
 8000f9e:	785a      	ldrb	r2, [r3, #1]
 8000fa0:	2104      	movs	r1, #4
 8000fa2:	430a      	orrs	r2, r1
 8000fa4:	705a      	strb	r2, [r3, #1]
#ifdef __DEBUG_INST__
				sprintf(txt, "Ukonceni\n");
 8000fa6:	4a91      	ldr	r2, [pc, #580]	; (80011ec <comHandler+0x2dc>)
 8000fa8:	2310      	movs	r3, #16
 8000faa:	001c      	movs	r4, r3
 8000fac:	2120      	movs	r1, #32
 8000fae:	468c      	mov	ip, r1
 8000fb0:	44bc      	add	ip, r7
 8000fb2:	4463      	add	r3, ip
 8000fb4:	0011      	movs	r1, r2
 8000fb6:	0018      	movs	r0, r3
 8000fb8:	f00a f9c0 	bl	800b33c <siprintf>
				pushStr(USB_Tx_Buffer, txt, strlen(txt));
 8000fbc:	4b8a      	ldr	r3, [pc, #552]	; (80011e8 <comHandler+0x2d8>)
 8000fbe:	681e      	ldr	r6, [r3, #0]
 8000fc0:	0023      	movs	r3, r4
 8000fc2:	001c      	movs	r4, r3
 8000fc4:	2220      	movs	r2, #32
 8000fc6:	4694      	mov	ip, r2
 8000fc8:	44bc      	add	ip, r7
 8000fca:	4463      	add	r3, ip
 8000fcc:	0018      	movs	r0, r3
 8000fce:	f7ff f89b 	bl	8000108 <strlen>
 8000fd2:	0003      	movs	r3, r0
 8000fd4:	001a      	movs	r2, r3
 8000fd6:	0023      	movs	r3, r4
 8000fd8:	2120      	movs	r1, #32
 8000fda:	468c      	mov	ip, r1
 8000fdc:	44bc      	add	ip, r7
 8000fde:	4463      	add	r3, ip
 8000fe0:	0019      	movs	r1, r3
 8000fe2:	0030      	movs	r0, r6
 8000fe4:	f000 faaf 	bl	8001546 <pushStr>
#endif
				break;
 8000fe8:	e074      	b.n	80010d4 <comHandler+0x1c4>

			case'p': ;
				//___Pauza___//
				flags.pauseRequest = 1;
 8000fea:	4b7d      	ldr	r3, [pc, #500]	; (80011e0 <comHandler+0x2d0>)
 8000fec:	785a      	ldrb	r2, [r3, #1]
 8000fee:	2108      	movs	r1, #8
 8000ff0:	430a      	orrs	r2, r1
 8000ff2:	705a      	strb	r2, [r3, #1]
#ifdef __DEBUG_INST__
				sprintf(txt, "Pauza\n");
 8000ff4:	4a7e      	ldr	r2, [pc, #504]	; (80011f0 <comHandler+0x2e0>)
 8000ff6:	2310      	movs	r3, #16
 8000ff8:	001c      	movs	r4, r3
 8000ffa:	2120      	movs	r1, #32
 8000ffc:	468c      	mov	ip, r1
 8000ffe:	44bc      	add	ip, r7
 8001000:	4463      	add	r3, ip
 8001002:	0011      	movs	r1, r2
 8001004:	0018      	movs	r0, r3
 8001006:	f00a f999 	bl	800b33c <siprintf>
				pushStr(USB_Tx_Buffer, txt, strlen(txt));
 800100a:	4b77      	ldr	r3, [pc, #476]	; (80011e8 <comHandler+0x2d8>)
 800100c:	681e      	ldr	r6, [r3, #0]
 800100e:	0023      	movs	r3, r4
 8001010:	001c      	movs	r4, r3
 8001012:	2220      	movs	r2, #32
 8001014:	4694      	mov	ip, r2
 8001016:	44bc      	add	ip, r7
 8001018:	4463      	add	r3, ip
 800101a:	0018      	movs	r0, r3
 800101c:	f7ff f874 	bl	8000108 <strlen>
 8001020:	0003      	movs	r3, r0
 8001022:	001a      	movs	r2, r3
 8001024:	0023      	movs	r3, r4
 8001026:	2120      	movs	r1, #32
 8001028:	468c      	mov	ip, r1
 800102a:	44bc      	add	ip, r7
 800102c:	4463      	add	r3, ip
 800102e:	0019      	movs	r1, r3
 8001030:	0030      	movs	r0, r6
 8001032:	f000 fa88 	bl	8001546 <pushStr>
#endif
				break;
 8001036:	e04d      	b.n	80010d4 <comHandler+0x1c4>

			case'k': ;
				//___Kalibrace___//
				flags.calibRequest = 1;
 8001038:	4b69      	ldr	r3, [pc, #420]	; (80011e0 <comHandler+0x2d0>)
 800103a:	785a      	ldrb	r2, [r3, #1]
 800103c:	2110      	movs	r1, #16
 800103e:	430a      	orrs	r2, r1
 8001040:	705a      	strb	r2, [r3, #1]
#ifdef __DEBUG_INST__
				sprintf(txt, "Kalibrace\n");
 8001042:	4a6c      	ldr	r2, [pc, #432]	; (80011f4 <comHandler+0x2e4>)
 8001044:	2310      	movs	r3, #16
 8001046:	001c      	movs	r4, r3
 8001048:	2120      	movs	r1, #32
 800104a:	468c      	mov	ip, r1
 800104c:	44bc      	add	ip, r7
 800104e:	4463      	add	r3, ip
 8001050:	0011      	movs	r1, r2
 8001052:	0018      	movs	r0, r3
 8001054:	f00a f972 	bl	800b33c <siprintf>
				pushStr(USB_Tx_Buffer, txt, strlen(txt));
 8001058:	4b63      	ldr	r3, [pc, #396]	; (80011e8 <comHandler+0x2d8>)
 800105a:	681e      	ldr	r6, [r3, #0]
 800105c:	0023      	movs	r3, r4
 800105e:	001c      	movs	r4, r3
 8001060:	2220      	movs	r2, #32
 8001062:	4694      	mov	ip, r2
 8001064:	44bc      	add	ip, r7
 8001066:	4463      	add	r3, ip
 8001068:	0018      	movs	r0, r3
 800106a:	f7ff f84d 	bl	8000108 <strlen>
 800106e:	0003      	movs	r3, r0
 8001070:	001a      	movs	r2, r3
 8001072:	0023      	movs	r3, r4
 8001074:	2120      	movs	r1, #32
 8001076:	468c      	mov	ip, r1
 8001078:	44bc      	add	ip, r7
 800107a:	4463      	add	r3, ip
 800107c:	0019      	movs	r1, r3
 800107e:	0030      	movs	r0, r6
 8001080:	f000 fa61 	bl	8001546 <pushStr>
#endif
				break;
 8001084:	e026      	b.n	80010d4 <comHandler+0x1c4>

			default: ;
				//___Neplatný příkaz___//
				flags.unknownInst = 1;
 8001086:	4b56      	ldr	r3, [pc, #344]	; (80011e0 <comHandler+0x2d0>)
 8001088:	785a      	ldrb	r2, [r3, #1]
 800108a:	2120      	movs	r1, #32
 800108c:	430a      	orrs	r2, r1
 800108e:	705a      	strb	r2, [r3, #1]
#ifdef __DEBUG_INST__
				sprintf(txt, "Neplatna instrukce\n");
 8001090:	4a59      	ldr	r2, [pc, #356]	; (80011f8 <comHandler+0x2e8>)
 8001092:	2310      	movs	r3, #16
 8001094:	001c      	movs	r4, r3
 8001096:	2120      	movs	r1, #32
 8001098:	468c      	mov	ip, r1
 800109a:	44bc      	add	ip, r7
 800109c:	4463      	add	r3, ip
 800109e:	0011      	movs	r1, r2
 80010a0:	0018      	movs	r0, r3
 80010a2:	f00a f94b 	bl	800b33c <siprintf>
				pushStr(USB_Tx_Buffer, txt, strlen(txt));
 80010a6:	4b50      	ldr	r3, [pc, #320]	; (80011e8 <comHandler+0x2d8>)
 80010a8:	681e      	ldr	r6, [r3, #0]
 80010aa:	0023      	movs	r3, r4
 80010ac:	001c      	movs	r4, r3
 80010ae:	2220      	movs	r2, #32
 80010b0:	4694      	mov	ip, r2
 80010b2:	44bc      	add	ip, r7
 80010b4:	4463      	add	r3, ip
 80010b6:	0018      	movs	r0, r3
 80010b8:	f7ff f826 	bl	8000108 <strlen>
 80010bc:	0003      	movs	r3, r0
 80010be:	001a      	movs	r2, r3
 80010c0:	0023      	movs	r3, r4
 80010c2:	2120      	movs	r1, #32
 80010c4:	468c      	mov	ip, r1
 80010c6:	44bc      	add	ip, r7
 80010c8:	4463      	add	r3, ip
 80010ca:	0019      	movs	r1, r3
 80010cc:	0030      	movs	r0, r6
 80010ce:	f000 fa3a 	bl	8001546 <pushStr>
#endif
				break;
 80010d2:	46c0      	nop			; (mov r8, r8)
		while(pop(USB_Rx_Buffer, &instruction) != BUFFER_EMPTY)
 80010d4:	4b49      	ldr	r3, [pc, #292]	; (80011fc <comHandler+0x2ec>)
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	222f      	movs	r2, #47	; 0x2f
 80010da:	2120      	movs	r1, #32
 80010dc:	468c      	mov	ip, r1
 80010de:	44bc      	add	ip, r7
 80010e0:	4462      	add	r2, ip
 80010e2:	0011      	movs	r1, r2
 80010e4:	0018      	movs	r0, r3
 80010e6:	f000 fa56 	bl	8001596 <pop>
 80010ea:	0003      	movs	r3, r0
 80010ec:	2b01      	cmp	r3, #1
 80010ee:	d000      	beq.n	80010f2 <comHandler+0x1e2>
 80010f0:	e71a      	b.n	8000f28 <comHandler+0x18>
			}
		}
		flags.data_received = 0;
 80010f2:	4b3b      	ldr	r3, [pc, #236]	; (80011e0 <comHandler+0x2d0>)
 80010f4:	785a      	ldrb	r2, [r3, #1]
 80010f6:	2101      	movs	r1, #1
 80010f8:	438a      	bics	r2, r1
 80010fa:	705a      	strb	r2, [r3, #1]
	}

	//___Odesílání dat___//
	//_Ošetření plného bufferu_//
	if(USB_Tx_Buffer->status == BUFFER_FULL)
 80010fc:	4b3a      	ldr	r3, [pc, #232]	; (80011e8 <comHandler+0x2d8>)
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	7d1b      	ldrb	r3, [r3, #20]
 8001102:	2b02      	cmp	r3, #2
 8001104:	d113      	bne.n	800112e <comHandler+0x21e>
	{
		char msg[] = {"Buffer full\n"};
 8001106:	2320      	movs	r3, #32
 8001108:	18fb      	adds	r3, r7, r3
 800110a:	4a3d      	ldr	r2, [pc, #244]	; (8001200 <comHandler+0x2f0>)
 800110c:	ca13      	ldmia	r2!, {r0, r1, r4}
 800110e:	c313      	stmia	r3!, {r0, r1, r4}
 8001110:	7812      	ldrb	r2, [r2, #0]
 8001112:	701a      	strb	r2, [r3, #0]
		CDC_Transmit_FS(msg, strlen(msg));
 8001114:	2320      	movs	r3, #32
 8001116:	18fb      	adds	r3, r7, r3
 8001118:	0018      	movs	r0, r3
 800111a:	f7fe fff5 	bl	8000108 <strlen>
 800111e:	0003      	movs	r3, r0
 8001120:	b29a      	uxth	r2, r3
 8001122:	2320      	movs	r3, #32
 8001124:	18fb      	adds	r3, r7, r3
 8001126:	0011      	movs	r1, r2
 8001128:	0018      	movs	r0, r3
 800112a:	f009 fb4b 	bl	800a7c4 <CDC_Transmit_FS>
	}
	//_Samotné odesílání_//
	if(USB_Tx_Buffer->filled)
 800112e:	4b2e      	ldr	r3, [pc, #184]	; (80011e8 <comHandler+0x2d8>)
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	689b      	ldr	r3, [r3, #8]
 8001134:	2b00      	cmp	r3, #0
 8001136:	d04e      	beq.n	80011d6 <comHandler+0x2c6>
	{
 8001138:	466b      	mov	r3, sp
 800113a:	001e      	movs	r6, r3
		int size = USB_Tx_Buffer->filled;
 800113c:	4b2a      	ldr	r3, [pc, #168]	; (80011e8 <comHandler+0x2d8>)
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	689b      	ldr	r3, [r3, #8]
 8001142:	65bb      	str	r3, [r7, #88]	; 0x58
		char tmpStr[size+1];
 8001144:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001146:	3301      	adds	r3, #1
 8001148:	1e5a      	subs	r2, r3, #1
 800114a:	657a      	str	r2, [r7, #84]	; 0x54
 800114c:	001a      	movs	r2, r3
 800114e:	60ba      	str	r2, [r7, #8]
 8001150:	2200      	movs	r2, #0
 8001152:	60fa      	str	r2, [r7, #12]
 8001154:	68b8      	ldr	r0, [r7, #8]
 8001156:	68f9      	ldr	r1, [r7, #12]
 8001158:	0002      	movs	r2, r0
 800115a:	0f52      	lsrs	r2, r2, #29
 800115c:	000c      	movs	r4, r1
 800115e:	00e4      	lsls	r4, r4, #3
 8001160:	61fc      	str	r4, [r7, #28]
 8001162:	69fc      	ldr	r4, [r7, #28]
 8001164:	4314      	orrs	r4, r2
 8001166:	61fc      	str	r4, [r7, #28]
 8001168:	0002      	movs	r2, r0
 800116a:	00d2      	lsls	r2, r2, #3
 800116c:	61ba      	str	r2, [r7, #24]
 800116e:	001a      	movs	r2, r3
 8001170:	603a      	str	r2, [r7, #0]
 8001172:	2200      	movs	r2, #0
 8001174:	607a      	str	r2, [r7, #4]
 8001176:	6838      	ldr	r0, [r7, #0]
 8001178:	6879      	ldr	r1, [r7, #4]
 800117a:	0002      	movs	r2, r0
 800117c:	0f52      	lsrs	r2, r2, #29
 800117e:	000c      	movs	r4, r1
 8001180:	00e4      	lsls	r4, r4, #3
 8001182:	617c      	str	r4, [r7, #20]
 8001184:	697c      	ldr	r4, [r7, #20]
 8001186:	4314      	orrs	r4, r2
 8001188:	617c      	str	r4, [r7, #20]
 800118a:	0002      	movs	r2, r0
 800118c:	00d2      	lsls	r2, r2, #3
 800118e:	613a      	str	r2, [r7, #16]
 8001190:	3307      	adds	r3, #7
 8001192:	08db      	lsrs	r3, r3, #3
 8001194:	00db      	lsls	r3, r3, #3
 8001196:	466a      	mov	r2, sp
 8001198:	1ad3      	subs	r3, r2, r3
 800119a:	469d      	mov	sp, r3
 800119c:	466b      	mov	r3, sp
 800119e:	3300      	adds	r3, #0
 80011a0:	653b      	str	r3, [r7, #80]	; 0x50
		for(int i = 0; i < size; i++)
 80011a2:	2300      	movs	r3, #0
 80011a4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80011a6:	e00a      	b.n	80011be <comHandler+0x2ae>
		{
			pop(USB_Tx_Buffer, &tmpStr[i]);
 80011a8:	4b0f      	ldr	r3, [pc, #60]	; (80011e8 <comHandler+0x2d8>)
 80011aa:	6818      	ldr	r0, [r3, #0]
 80011ac:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80011ae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80011b0:	18d3      	adds	r3, r2, r3
 80011b2:	0019      	movs	r1, r3
 80011b4:	f000 f9ef 	bl	8001596 <pop>
		for(int i = 0; i < size; i++)
 80011b8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80011ba:	3301      	adds	r3, #1
 80011bc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80011be:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80011c0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80011c2:	429a      	cmp	r2, r3
 80011c4:	dbf0      	blt.n	80011a8 <comHandler+0x298>
		}
		CDC_Transmit_FS(tmpStr, size);
 80011c6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80011c8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80011ca:	b292      	uxth	r2, r2
 80011cc:	0011      	movs	r1, r2
 80011ce:	0018      	movs	r0, r3
 80011d0:	f009 faf8 	bl	800a7c4 <CDC_Transmit_FS>
 80011d4:	46b5      	mov	sp, r6
	}

}
 80011d6:	46c0      	nop			; (mov r8, r8)
 80011d8:	46bd      	mov	sp, r7
 80011da:	b019      	add	sp, #100	; 0x64
 80011dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80011de:	46c0      	nop			; (mov r8, r8)
 80011e0:	20000590 	.word	0x20000590
 80011e4:	0800ba3c 	.word	0x0800ba3c
 80011e8:	200004e0 	.word	0x200004e0
 80011ec:	0800ba44 	.word	0x0800ba44
 80011f0:	0800ba50 	.word	0x0800ba50
 80011f4:	0800ba58 	.word	0x0800ba58
 80011f8:	0800ba64 	.word	0x0800ba64
 80011fc:	200010b0 	.word	0x200010b0
 8001200:	0800ba78 	.word	0x0800ba78

08001204 <UI_Handler>:

//_____Obsluha piezo + podsvícení displeje_____//
void UI_Handler(void)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	af00      	add	r7, sp, #0
		DONE,
	}UI_State;

	static uint32_t startTime;

	if(flags.error && (UI_State != ERROR))
 8001208:	4b8f      	ldr	r3, [pc, #572]	; (8001448 <UI_Handler+0x244>)
 800120a:	789b      	ldrb	r3, [r3, #2]
 800120c:	2201      	movs	r2, #1
 800120e:	4013      	ands	r3, r2
 8001210:	b2db      	uxtb	r3, r3
 8001212:	2b00      	cmp	r3, #0
 8001214:	d00b      	beq.n	800122e <UI_Handler+0x2a>
 8001216:	4b8d      	ldr	r3, [pc, #564]	; (800144c <UI_Handler+0x248>)
 8001218:	781b      	ldrb	r3, [r3, #0]
 800121a:	2b03      	cmp	r3, #3
 800121c:	d007      	beq.n	800122e <UI_Handler+0x2a>
	{
		UI_State = ERROR;
 800121e:	4b8b      	ldr	r3, [pc, #556]	; (800144c <UI_Handler+0x248>)
 8001220:	2203      	movs	r2, #3
 8001222:	701a      	strb	r2, [r3, #0]
		startTime = sysTime;
 8001224:	4b8a      	ldr	r3, [pc, #552]	; (8001450 <UI_Handler+0x24c>)
 8001226:	681a      	ldr	r2, [r3, #0]
 8001228:	4b8a      	ldr	r3, [pc, #552]	; (8001454 <UI_Handler+0x250>)
 800122a:	601a      	str	r2, [r3, #0]
 800122c:	e04e      	b.n	80012cc <UI_Handler+0xc8>
	}
	else if(flags.notice)
 800122e:	4b86      	ldr	r3, [pc, #536]	; (8001448 <UI_Handler+0x244>)
 8001230:	789b      	ldrb	r3, [r3, #2]
 8001232:	2202      	movs	r2, #2
 8001234:	4013      	ands	r3, r2
 8001236:	b2db      	uxtb	r3, r3
 8001238:	2b00      	cmp	r3, #0
 800123a:	d00c      	beq.n	8001256 <UI_Handler+0x52>
	{
		UI_State = NOTICE;
 800123c:	4b83      	ldr	r3, [pc, #524]	; (800144c <UI_Handler+0x248>)
 800123e:	2204      	movs	r2, #4
 8001240:	701a      	strb	r2, [r3, #0]
		startTime = sysTime;
 8001242:	4b83      	ldr	r3, [pc, #524]	; (8001450 <UI_Handler+0x24c>)
 8001244:	681a      	ldr	r2, [r3, #0]
 8001246:	4b83      	ldr	r3, [pc, #524]	; (8001454 <UI_Handler+0x250>)
 8001248:	601a      	str	r2, [r3, #0]
		flags.notice = 0;
 800124a:	4b7f      	ldr	r3, [pc, #508]	; (8001448 <UI_Handler+0x244>)
 800124c:	789a      	ldrb	r2, [r3, #2]
 800124e:	2102      	movs	r1, #2
 8001250:	438a      	bics	r2, r1
 8001252:	709a      	strb	r2, [r3, #2]
 8001254:	e03a      	b.n	80012cc <UI_Handler+0xc8>
	}
	else if(flags.done)
 8001256:	4b7c      	ldr	r3, [pc, #496]	; (8001448 <UI_Handler+0x244>)
 8001258:	789b      	ldrb	r3, [r3, #2]
 800125a:	2204      	movs	r2, #4
 800125c:	4013      	ands	r3, r2
 800125e:	b2db      	uxtb	r3, r3
 8001260:	2b00      	cmp	r3, #0
 8001262:	d00c      	beq.n	800127e <UI_Handler+0x7a>
	{
		UI_State = DONE;
 8001264:	4b79      	ldr	r3, [pc, #484]	; (800144c <UI_Handler+0x248>)
 8001266:	2205      	movs	r2, #5
 8001268:	701a      	strb	r2, [r3, #0]
		startTime = sysTime;
 800126a:	4b79      	ldr	r3, [pc, #484]	; (8001450 <UI_Handler+0x24c>)
 800126c:	681a      	ldr	r2, [r3, #0]
 800126e:	4b79      	ldr	r3, [pc, #484]	; (8001454 <UI_Handler+0x250>)
 8001270:	601a      	str	r2, [r3, #0]
		flags.done = 0;
 8001272:	4b75      	ldr	r3, [pc, #468]	; (8001448 <UI_Handler+0x244>)
 8001274:	789a      	ldrb	r2, [r3, #2]
 8001276:	2104      	movs	r1, #4
 8001278:	438a      	bics	r2, r1
 800127a:	709a      	strb	r2, [r3, #2]
 800127c:	e026      	b.n	80012cc <UI_Handler+0xc8>
	}
	else if(flags.longBeep)
 800127e:	4b72      	ldr	r3, [pc, #456]	; (8001448 <UI_Handler+0x244>)
 8001280:	785b      	ldrb	r3, [r3, #1]
 8001282:	227f      	movs	r2, #127	; 0x7f
 8001284:	4393      	bics	r3, r2
 8001286:	b2db      	uxtb	r3, r3
 8001288:	2b00      	cmp	r3, #0
 800128a:	d00c      	beq.n	80012a6 <UI_Handler+0xa2>
	{
		UI_State = LONG_BEEP;
 800128c:	4b6f      	ldr	r3, [pc, #444]	; (800144c <UI_Handler+0x248>)
 800128e:	2202      	movs	r2, #2
 8001290:	701a      	strb	r2, [r3, #0]
		startTime = sysTime;
 8001292:	4b6f      	ldr	r3, [pc, #444]	; (8001450 <UI_Handler+0x24c>)
 8001294:	681a      	ldr	r2, [r3, #0]
 8001296:	4b6f      	ldr	r3, [pc, #444]	; (8001454 <UI_Handler+0x250>)
 8001298:	601a      	str	r2, [r3, #0]
		flags.longBeep = 0;
 800129a:	4b6b      	ldr	r3, [pc, #428]	; (8001448 <UI_Handler+0x244>)
 800129c:	785a      	ldrb	r2, [r3, #1]
 800129e:	217f      	movs	r1, #127	; 0x7f
 80012a0:	400a      	ands	r2, r1
 80012a2:	705a      	strb	r2, [r3, #1]
 80012a4:	e012      	b.n	80012cc <UI_Handler+0xc8>
	}
	else if(flags.shortBeep)
 80012a6:	4b68      	ldr	r3, [pc, #416]	; (8001448 <UI_Handler+0x244>)
 80012a8:	785b      	ldrb	r3, [r3, #1]
 80012aa:	2240      	movs	r2, #64	; 0x40
 80012ac:	4013      	ands	r3, r2
 80012ae:	b2db      	uxtb	r3, r3
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d00b      	beq.n	80012cc <UI_Handler+0xc8>
	{
		UI_State = SHORT_BEEP;
 80012b4:	4b65      	ldr	r3, [pc, #404]	; (800144c <UI_Handler+0x248>)
 80012b6:	2201      	movs	r2, #1
 80012b8:	701a      	strb	r2, [r3, #0]
		startTime = sysTime;
 80012ba:	4b65      	ldr	r3, [pc, #404]	; (8001450 <UI_Handler+0x24c>)
 80012bc:	681a      	ldr	r2, [r3, #0]
 80012be:	4b65      	ldr	r3, [pc, #404]	; (8001454 <UI_Handler+0x250>)
 80012c0:	601a      	str	r2, [r3, #0]
		flags.shortBeep = 0;
 80012c2:	4b61      	ldr	r3, [pc, #388]	; (8001448 <UI_Handler+0x244>)
 80012c4:	785a      	ldrb	r2, [r3, #1]
 80012c6:	2140      	movs	r1, #64	; 0x40
 80012c8:	438a      	bics	r2, r1
 80012ca:	705a      	strb	r2, [r3, #1]
	}

	switch(UI_State)
 80012cc:	4b5f      	ldr	r3, [pc, #380]	; (800144c <UI_Handler+0x248>)
 80012ce:	781b      	ldrb	r3, [r3, #0]
 80012d0:	2b05      	cmp	r3, #5
 80012d2:	d900      	bls.n	80012d6 <UI_Handler+0xd2>
 80012d4:	e0a0      	b.n	8001418 <UI_Handler+0x214>
 80012d6:	009a      	lsls	r2, r3, #2
 80012d8:	4b5f      	ldr	r3, [pc, #380]	; (8001458 <UI_Handler+0x254>)
 80012da:	18d3      	adds	r3, r2, r3
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	469f      	mov	pc, r3
	/*case OFF:
		BUZZER_OFF;
		setColour(BACKLIGHT_OFF);
		break;*/
	case SHORT_BEEP:
		BUZZER_ON;
 80012e0:	2380      	movs	r3, #128	; 0x80
 80012e2:	015b      	lsls	r3, r3, #5
 80012e4:	485d      	ldr	r0, [pc, #372]	; (800145c <UI_Handler+0x258>)
 80012e6:	2201      	movs	r2, #1
 80012e8:	0019      	movs	r1, r3
 80012ea:	f001 fa8c 	bl	8002806 <HAL_GPIO_WritePin>
		if((sysTime - startTime) >= 50)
 80012ee:	4b58      	ldr	r3, [pc, #352]	; (8001450 <UI_Handler+0x24c>)
 80012f0:	681a      	ldr	r2, [r3, #0]
 80012f2:	4b58      	ldr	r3, [pc, #352]	; (8001454 <UI_Handler+0x250>)
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	1ad3      	subs	r3, r2, r3
 80012f8:	2b31      	cmp	r3, #49	; 0x31
 80012fa:	d800      	bhi.n	80012fe <UI_Handler+0xfa>
 80012fc:	e097      	b.n	800142e <UI_Handler+0x22a>
		{
			UI_State = OFF;
 80012fe:	4b53      	ldr	r3, [pc, #332]	; (800144c <UI_Handler+0x248>)
 8001300:	2200      	movs	r2, #0
 8001302:	701a      	strb	r2, [r3, #0]
			BUZZER_OFF;
 8001304:	2380      	movs	r3, #128	; 0x80
 8001306:	015b      	lsls	r3, r3, #5
 8001308:	4854      	ldr	r0, [pc, #336]	; (800145c <UI_Handler+0x258>)
 800130a:	2200      	movs	r2, #0
 800130c:	0019      	movs	r1, r3
 800130e:	f001 fa7a 	bl	8002806 <HAL_GPIO_WritePin>
		}
		break;
 8001312:	e08c      	b.n	800142e <UI_Handler+0x22a>
	case LONG_BEEP:
		BUZZER_ON;
 8001314:	2380      	movs	r3, #128	; 0x80
 8001316:	015b      	lsls	r3, r3, #5
 8001318:	4850      	ldr	r0, [pc, #320]	; (800145c <UI_Handler+0x258>)
 800131a:	2201      	movs	r2, #1
 800131c:	0019      	movs	r1, r3
 800131e:	f001 fa72 	bl	8002806 <HAL_GPIO_WritePin>
		if((sysTime - startTime) >= 100)
 8001322:	4b4b      	ldr	r3, [pc, #300]	; (8001450 <UI_Handler+0x24c>)
 8001324:	681a      	ldr	r2, [r3, #0]
 8001326:	4b4b      	ldr	r3, [pc, #300]	; (8001454 <UI_Handler+0x250>)
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	1ad3      	subs	r3, r2, r3
 800132c:	2b63      	cmp	r3, #99	; 0x63
 800132e:	d800      	bhi.n	8001332 <UI_Handler+0x12e>
 8001330:	e07f      	b.n	8001432 <UI_Handler+0x22e>
		{
			UI_State = OFF;
 8001332:	4b46      	ldr	r3, [pc, #280]	; (800144c <UI_Handler+0x248>)
 8001334:	2200      	movs	r2, #0
 8001336:	701a      	strb	r2, [r3, #0]
			BUZZER_OFF;
 8001338:	2380      	movs	r3, #128	; 0x80
 800133a:	015b      	lsls	r3, r3, #5
 800133c:	4847      	ldr	r0, [pc, #284]	; (800145c <UI_Handler+0x258>)
 800133e:	2200      	movs	r2, #0
 8001340:	0019      	movs	r1, r3
 8001342:	f001 fa60 	bl	8002806 <HAL_GPIO_WritePin>
		}
		break;
 8001346:	e074      	b.n	8001432 <UI_Handler+0x22e>
	case ERROR:
		if(!flags.error)
 8001348:	4b3f      	ldr	r3, [pc, #252]	; (8001448 <UI_Handler+0x244>)
 800134a:	789b      	ldrb	r3, [r3, #2]
 800134c:	2201      	movs	r2, #1
 800134e:	4013      	ands	r3, r2
 8001350:	b2db      	uxtb	r3, r3
 8001352:	2b00      	cmp	r3, #0
 8001354:	d102      	bne.n	800135c <UI_Handler+0x158>
			UI_State = OFF;
 8001356:	4b3d      	ldr	r3, [pc, #244]	; (800144c <UI_Handler+0x248>)
 8001358:	2200      	movs	r2, #0
 800135a:	701a      	strb	r2, [r3, #0]
		if(!((sysTime - startTime) % 50))
 800135c:	4b3c      	ldr	r3, [pc, #240]	; (8001450 <UI_Handler+0x24c>)
 800135e:	681a      	ldr	r2, [r3, #0]
 8001360:	4b3c      	ldr	r3, [pc, #240]	; (8001454 <UI_Handler+0x250>)
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	1ad3      	subs	r3, r2, r3
 8001366:	2132      	movs	r1, #50	; 0x32
 8001368:	0018      	movs	r0, r3
 800136a:	f7fe ff65 	bl	8000238 <__aeabi_uidivmod>
 800136e:	1e0b      	subs	r3, r1, #0
 8001370:	d161      	bne.n	8001436 <UI_Handler+0x232>
		{
			BUZZER_Toggle;
 8001372:	2380      	movs	r3, #128	; 0x80
 8001374:	015b      	lsls	r3, r3, #5
 8001376:	4a39      	ldr	r2, [pc, #228]	; (800145c <UI_Handler+0x258>)
 8001378:	0019      	movs	r1, r3
 800137a:	0010      	movs	r0, r2
 800137c:	f001 fa60 	bl	8002840 <HAL_GPIO_TogglePin>
			BACKLIGHT_RED_Toggle;
 8001380:	2380      	movs	r3, #128	; 0x80
 8001382:	021a      	lsls	r2, r3, #8
 8001384:	2390      	movs	r3, #144	; 0x90
 8001386:	05db      	lsls	r3, r3, #23
 8001388:	0011      	movs	r1, r2
 800138a:	0018      	movs	r0, r3
 800138c:	f001 fa58 	bl	8002840 <HAL_GPIO_TogglePin>
		}
			break;
 8001390:	e051      	b.n	8001436 <UI_Handler+0x232>
	case NOTICE:
		if(!((sysTime - startTime) % 35))
 8001392:	4b2f      	ldr	r3, [pc, #188]	; (8001450 <UI_Handler+0x24c>)
 8001394:	681a      	ldr	r2, [r3, #0]
 8001396:	4b2f      	ldr	r3, [pc, #188]	; (8001454 <UI_Handler+0x250>)
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	1ad3      	subs	r3, r2, r3
 800139c:	2123      	movs	r1, #35	; 0x23
 800139e:	0018      	movs	r0, r3
 80013a0:	f7fe ff4a 	bl	8000238 <__aeabi_uidivmod>
 80013a4:	1e0b      	subs	r3, r1, #0
 80013a6:	d106      	bne.n	80013b6 <UI_Handler+0x1b2>
		{
			BUZZER_Toggle;
 80013a8:	2380      	movs	r3, #128	; 0x80
 80013aa:	015b      	lsls	r3, r3, #5
 80013ac:	4a2b      	ldr	r2, [pc, #172]	; (800145c <UI_Handler+0x258>)
 80013ae:	0019      	movs	r1, r3
 80013b0:	0010      	movs	r0, r2
 80013b2:	f001 fa45 	bl	8002840 <HAL_GPIO_TogglePin>
		}
		if((sysTime - startTime) >= 209)
 80013b6:	4b26      	ldr	r3, [pc, #152]	; (8001450 <UI_Handler+0x24c>)
 80013b8:	681a      	ldr	r2, [r3, #0]
 80013ba:	4b26      	ldr	r3, [pc, #152]	; (8001454 <UI_Handler+0x250>)
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	1ad3      	subs	r3, r2, r3
 80013c0:	2bd0      	cmp	r3, #208	; 0xd0
 80013c2:	d93a      	bls.n	800143a <UI_Handler+0x236>
			UI_State = OFF;
 80013c4:	4b21      	ldr	r3, [pc, #132]	; (800144c <UI_Handler+0x248>)
 80013c6:	2200      	movs	r2, #0
 80013c8:	701a      	strb	r2, [r3, #0]
		break;
 80013ca:	e036      	b.n	800143a <UI_Handler+0x236>
	case DONE:
		if(!((sysTime - startTime) % 50))
 80013cc:	4b20      	ldr	r3, [pc, #128]	; (8001450 <UI_Handler+0x24c>)
 80013ce:	681a      	ldr	r2, [r3, #0]
 80013d0:	4b20      	ldr	r3, [pc, #128]	; (8001454 <UI_Handler+0x250>)
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	1ad3      	subs	r3, r2, r3
 80013d6:	2132      	movs	r1, #50	; 0x32
 80013d8:	0018      	movs	r0, r3
 80013da:	f7fe ff2d 	bl	8000238 <__aeabi_uidivmod>
 80013de:	1e0b      	subs	r3, r1, #0
 80013e0:	d10d      	bne.n	80013fe <UI_Handler+0x1fa>
		{
			BUZZER_Toggle;
 80013e2:	2380      	movs	r3, #128	; 0x80
 80013e4:	015b      	lsls	r3, r3, #5
 80013e6:	4a1d      	ldr	r2, [pc, #116]	; (800145c <UI_Handler+0x258>)
 80013e8:	0019      	movs	r1, r3
 80013ea:	0010      	movs	r0, r2
 80013ec:	f001 fa28 	bl	8002840 <HAL_GPIO_TogglePin>
			BACKLIGHT_GREEN_Toggle;
 80013f0:	2380      	movs	r3, #128	; 0x80
 80013f2:	005b      	lsls	r3, r3, #1
 80013f4:	4a1a      	ldr	r2, [pc, #104]	; (8001460 <UI_Handler+0x25c>)
 80013f6:	0019      	movs	r1, r3
 80013f8:	0010      	movs	r0, r2
 80013fa:	f001 fa21 	bl	8002840 <HAL_GPIO_TogglePin>
		}
		if((sysTime - startTime) >= 299)
 80013fe:	4b14      	ldr	r3, [pc, #80]	; (8001450 <UI_Handler+0x24c>)
 8001400:	681a      	ldr	r2, [r3, #0]
 8001402:	4b14      	ldr	r3, [pc, #80]	; (8001454 <UI_Handler+0x250>)
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	1ad2      	subs	r2, r2, r3
 8001408:	2395      	movs	r3, #149	; 0x95
 800140a:	005b      	lsls	r3, r3, #1
 800140c:	429a      	cmp	r2, r3
 800140e:	d916      	bls.n	800143e <UI_Handler+0x23a>
			UI_State = OFF;
 8001410:	4b0e      	ldr	r3, [pc, #56]	; (800144c <UI_Handler+0x248>)
 8001412:	2200      	movs	r2, #0
 8001414:	701a      	strb	r2, [r3, #0]
		break;
 8001416:	e012      	b.n	800143e <UI_Handler+0x23a>
	default:	//Ošetřuje i UI_State == OFF
		BUZZER_OFF;
 8001418:	2380      	movs	r3, #128	; 0x80
 800141a:	015b      	lsls	r3, r3, #5
 800141c:	480f      	ldr	r0, [pc, #60]	; (800145c <UI_Handler+0x258>)
 800141e:	2200      	movs	r2, #0
 8001420:	0019      	movs	r1, r3
 8001422:	f001 f9f0 	bl	8002806 <HAL_GPIO_WritePin>
		setColour(BACKLIGHT_OFF);
 8001426:	2003      	movs	r0, #3
 8001428:	f7fe fff6 	bl	8000418 <setColour>
		break;
 800142c:	e008      	b.n	8001440 <UI_Handler+0x23c>
		break;
 800142e:	46c0      	nop			; (mov r8, r8)
 8001430:	e006      	b.n	8001440 <UI_Handler+0x23c>
		break;
 8001432:	46c0      	nop			; (mov r8, r8)
 8001434:	e004      	b.n	8001440 <UI_Handler+0x23c>
			break;
 8001436:	46c0      	nop			; (mov r8, r8)
 8001438:	e002      	b.n	8001440 <UI_Handler+0x23c>
		break;
 800143a:	46c0      	nop			; (mov r8, r8)
 800143c:	e000      	b.n	8001440 <UI_Handler+0x23c>
		break;
 800143e:	46c0      	nop			; (mov r8, r8)

	}
}
 8001440:	46c0      	nop			; (mov r8, r8)
 8001442:	46bd      	mov	sp, r7
 8001444:	bd80      	pop	{r7, pc}
 8001446:	46c0      	nop			; (mov r8, r8)
 8001448:	20000590 	.word	0x20000590
 800144c:	2000020e 	.word	0x2000020e
 8001450:	200001fc 	.word	0x200001fc
 8001454:	20000210 	.word	0x20000210
 8001458:	0800baf0 	.word	0x0800baf0
 800145c:	48000800 	.word	0x48000800
 8001460:	48000400 	.word	0x48000400

08001464 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001468:	b672      	cpsid	i
}
 800146a:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800146c:	e7fe      	b.n	800146c <Error_Handler+0x8>

0800146e <createBuffer>:

//_____Vytvoří buffer v dynamické paměti_____//
//Návratová hodnota - ukazatel na vytvořený buffer (NULL = chyba)
//Argument - velikost bufferu
RING_BUFFER* createBuffer(int size)
{
 800146e:	b580      	push	{r7, lr}
 8001470:	b084      	sub	sp, #16
 8001472:	af00      	add	r7, sp, #0
 8001474:	6078      	str	r0, [r7, #4]
	RING_BUFFER* buffer = (RING_BUFFER*) malloc(sizeof(RING_BUFFER));
 8001476:	2018      	movs	r0, #24
 8001478:	f009 fe8a 	bl	800b190 <malloc>
 800147c:	0003      	movs	r3, r0
 800147e:	60fb      	str	r3, [r7, #12]
	if(buffer == NULL)			//Nepodařilo se alokovat paměť
 8001480:	68fb      	ldr	r3, [r7, #12]
 8001482:	2b00      	cmp	r3, #0
 8001484:	d101      	bne.n	800148a <createBuffer+0x1c>
	{
		return NULL;
 8001486:	2300      	movs	r3, #0
 8001488:	e022      	b.n	80014d0 <createBuffer+0x62>
	}
	buffer->buffer = (char*) malloc(size * sizeof(char));
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	0018      	movs	r0, r3
 800148e:	f009 fe7f 	bl	800b190 <malloc>
 8001492:	0003      	movs	r3, r0
 8001494:	001a      	movs	r2, r3
 8001496:	68fb      	ldr	r3, [r7, #12]
 8001498:	601a      	str	r2, [r3, #0]
	if(buffer->buffer == NULL)	//Nepodařilo se alokovat paměť
 800149a:	68fb      	ldr	r3, [r7, #12]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d105      	bne.n	80014ae <createBuffer+0x40>
	{
		free(buffer);
 80014a2:	68fb      	ldr	r3, [r7, #12]
 80014a4:	0018      	movs	r0, r3
 80014a6:	f009 fe7d 	bl	800b1a4 <free>
		return NULL;
 80014aa:	2300      	movs	r3, #0
 80014ac:	e010      	b.n	80014d0 <createBuffer+0x62>
	}

	buffer->bufferSize = size;
 80014ae:	68fb      	ldr	r3, [r7, #12]
 80014b0:	687a      	ldr	r2, [r7, #4]
 80014b2:	605a      	str	r2, [r3, #4]
	buffer->filled = 0;
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	2200      	movs	r2, #0
 80014b8:	609a      	str	r2, [r3, #8]
	buffer->first = 0;
 80014ba:	68fb      	ldr	r3, [r7, #12]
 80014bc:	2200      	movs	r2, #0
 80014be:	60da      	str	r2, [r3, #12]
	buffer->last = size-1;
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	1e5a      	subs	r2, r3, #1
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	611a      	str	r2, [r3, #16]
	buffer->status = BUFFER_EMPTY;
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	2201      	movs	r2, #1
 80014cc:	751a      	strb	r2, [r3, #20]

	return buffer;
 80014ce:	68fb      	ldr	r3, [r7, #12]
}
 80014d0:	0018      	movs	r0, r3
 80014d2:	46bd      	mov	sp, r7
 80014d4:	b004      	add	sp, #16
 80014d6:	bd80      	pop	{r7, pc}

080014d8 <push>:
	return buffer->status;
}

//_____Uloží znak do bufferu_____//
BUFFER_STATE push(RING_BUFFER* buffer, char character)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	b082      	sub	sp, #8
 80014dc:	af00      	add	r7, sp, #0
 80014de:	6078      	str	r0, [r7, #4]
 80014e0:	000a      	movs	r2, r1
 80014e2:	1cfb      	adds	r3, r7, #3
 80014e4:	701a      	strb	r2, [r3, #0]
	if(buffer->status == BUFFER_FULL)
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	7d1b      	ldrb	r3, [r3, #20]
 80014ea:	2b02      	cmp	r3, #2
 80014ec:	d101      	bne.n	80014f2 <push+0x1a>
		return BUFFER_FULL;
 80014ee:	2302      	movs	r3, #2
 80014f0:	e025      	b.n	800153e <push+0x66>

	buffer->last = (buffer->last + 1) % (buffer->bufferSize);
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	691b      	ldr	r3, [r3, #16]
 80014f6:	1c5a      	adds	r2, r3, #1
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	685b      	ldr	r3, [r3, #4]
 80014fc:	0019      	movs	r1, r3
 80014fe:	0010      	movs	r0, r2
 8001500:	f7fe ff84 	bl	800040c <__aeabi_idivmod>
 8001504:	000b      	movs	r3, r1
 8001506:	001a      	movs	r2, r3
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	611a      	str	r2, [r3, #16]
	buffer->filled++;
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	689b      	ldr	r3, [r3, #8]
 8001510:	1c5a      	adds	r2, r3, #1
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	609a      	str	r2, [r3, #8]
	buffer->buffer[buffer->last] = character;
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	681a      	ldr	r2, [r3, #0]
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	691b      	ldr	r3, [r3, #16]
 800151e:	18d3      	adds	r3, r2, r3
 8001520:	1cfa      	adds	r2, r7, #3
 8001522:	7812      	ldrb	r2, [r2, #0]
 8001524:	701a      	strb	r2, [r3, #0]
	buffer->status = (buffer->filled >= buffer->bufferSize)? BUFFER_FULL : BUFFER_OK;
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	689a      	ldr	r2, [r3, #8]
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	685b      	ldr	r3, [r3, #4]
 800152e:	429a      	cmp	r2, r3
 8001530:	db01      	blt.n	8001536 <push+0x5e>
 8001532:	2202      	movs	r2, #2
 8001534:	e000      	b.n	8001538 <push+0x60>
 8001536:	2200      	movs	r2, #0
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	751a      	strb	r2, [r3, #20]

	return BUFFER_OK;
 800153c:	2300      	movs	r3, #0
}
 800153e:	0018      	movs	r0, r3
 8001540:	46bd      	mov	sp, r7
 8001542:	b002      	add	sp, #8
 8001544:	bd80      	pop	{r7, pc}

08001546 <pushStr>:

//_____Uloží řetězec do bufferu_____//
BUFFER_STATE pushStr(RING_BUFFER* buffer, char* str, int len)
{
 8001546:	b580      	push	{r7, lr}
 8001548:	b086      	sub	sp, #24
 800154a:	af00      	add	r7, sp, #0
 800154c:	60f8      	str	r0, [r7, #12]
 800154e:	60b9      	str	r1, [r7, #8]
 8001550:	607a      	str	r2, [r7, #4]
	if(buffer->bufferSize < (buffer->filled + len))
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	685a      	ldr	r2, [r3, #4]
 8001556:	68fb      	ldr	r3, [r7, #12]
 8001558:	6899      	ldr	r1, [r3, #8]
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	18cb      	adds	r3, r1, r3
 800155e:	429a      	cmp	r2, r3
 8001560:	da01      	bge.n	8001566 <pushStr+0x20>
		return BUFFER_FULL;
 8001562:	2302      	movs	r3, #2
 8001564:	e013      	b.n	800158e <pushStr+0x48>

	for(int i = 0; i < len; i++)
 8001566:	2300      	movs	r3, #0
 8001568:	617b      	str	r3, [r7, #20]
 800156a:	e00b      	b.n	8001584 <pushStr+0x3e>
	{
		push(buffer, str[i]);
 800156c:	697b      	ldr	r3, [r7, #20]
 800156e:	68ba      	ldr	r2, [r7, #8]
 8001570:	18d3      	adds	r3, r2, r3
 8001572:	781a      	ldrb	r2, [r3, #0]
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	0011      	movs	r1, r2
 8001578:	0018      	movs	r0, r3
 800157a:	f7ff ffad 	bl	80014d8 <push>
	for(int i = 0; i < len; i++)
 800157e:	697b      	ldr	r3, [r7, #20]
 8001580:	3301      	adds	r3, #1
 8001582:	617b      	str	r3, [r7, #20]
 8001584:	697a      	ldr	r2, [r7, #20]
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	429a      	cmp	r2, r3
 800158a:	dbef      	blt.n	800156c <pushStr+0x26>
	}

	return BUFFER_OK;
 800158c:	2300      	movs	r3, #0
}
 800158e:	0018      	movs	r0, r3
 8001590:	46bd      	mov	sp, r7
 8001592:	b006      	add	sp, #24
 8001594:	bd80      	pop	{r7, pc}

08001596 <pop>:

//_____Přečte a odstraní poslední znak z bufferu_____//
//Znak bude uložen na adresu v argumentu
BUFFER_STATE pop(RING_BUFFER* buffer, char* character)
{
 8001596:	b580      	push	{r7, lr}
 8001598:	b082      	sub	sp, #8
 800159a:	af00      	add	r7, sp, #0
 800159c:	6078      	str	r0, [r7, #4]
 800159e:	6039      	str	r1, [r7, #0]
	if(buffer->status == BUFFER_EMPTY)
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	7d1b      	ldrb	r3, [r3, #20]
 80015a4:	2b01      	cmp	r3, #1
 80015a6:	d101      	bne.n	80015ac <pop+0x16>
		return BUFFER_EMPTY;
 80015a8:	2301      	movs	r3, #1
 80015aa:	e023      	b.n	80015f4 <pop+0x5e>

	*character = buffer->buffer[buffer->first];
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681a      	ldr	r2, [r3, #0]
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	68db      	ldr	r3, [r3, #12]
 80015b4:	18d3      	adds	r3, r2, r3
 80015b6:	781a      	ldrb	r2, [r3, #0]
 80015b8:	683b      	ldr	r3, [r7, #0]
 80015ba:	701a      	strb	r2, [r3, #0]
	buffer->first = (buffer->first + 1) % (buffer->bufferSize);
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	68db      	ldr	r3, [r3, #12]
 80015c0:	1c5a      	adds	r2, r3, #1
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	685b      	ldr	r3, [r3, #4]
 80015c6:	0019      	movs	r1, r3
 80015c8:	0010      	movs	r0, r2
 80015ca:	f7fe ff1f 	bl	800040c <__aeabi_idivmod>
 80015ce:	000b      	movs	r3, r1
 80015d0:	001a      	movs	r2, r3
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	60da      	str	r2, [r3, #12]
	buffer->filled--;
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	689b      	ldr	r3, [r3, #8]
 80015da:	1e5a      	subs	r2, r3, #1
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	609a      	str	r2, [r3, #8]
	buffer->status = (buffer->filled <= 0)? BUFFER_EMPTY : BUFFER_OK;
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	689b      	ldr	r3, [r3, #8]
 80015e4:	1e5a      	subs	r2, r3, #1
 80015e6:	4313      	orrs	r3, r2
 80015e8:	0fdb      	lsrs	r3, r3, #31
 80015ea:	b2db      	uxtb	r3, r3
 80015ec:	001a      	movs	r2, r3
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	751a      	strb	r2, [r3, #20]

	return BUFFER_OK;
 80015f2:	2300      	movs	r3, #0
}
 80015f4:	0018      	movs	r0, r3
 80015f6:	46bd      	mov	sp, r7
 80015f8:	b002      	add	sp, #8
 80015fa:	bd80      	pop	{r7, pc}

080015fc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b082      	sub	sp, #8
 8001600:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001602:	4b0f      	ldr	r3, [pc, #60]	; (8001640 <HAL_MspInit+0x44>)
 8001604:	699a      	ldr	r2, [r3, #24]
 8001606:	4b0e      	ldr	r3, [pc, #56]	; (8001640 <HAL_MspInit+0x44>)
 8001608:	2101      	movs	r1, #1
 800160a:	430a      	orrs	r2, r1
 800160c:	619a      	str	r2, [r3, #24]
 800160e:	4b0c      	ldr	r3, [pc, #48]	; (8001640 <HAL_MspInit+0x44>)
 8001610:	699b      	ldr	r3, [r3, #24]
 8001612:	2201      	movs	r2, #1
 8001614:	4013      	ands	r3, r2
 8001616:	607b      	str	r3, [r7, #4]
 8001618:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800161a:	4b09      	ldr	r3, [pc, #36]	; (8001640 <HAL_MspInit+0x44>)
 800161c:	69da      	ldr	r2, [r3, #28]
 800161e:	4b08      	ldr	r3, [pc, #32]	; (8001640 <HAL_MspInit+0x44>)
 8001620:	2180      	movs	r1, #128	; 0x80
 8001622:	0549      	lsls	r1, r1, #21
 8001624:	430a      	orrs	r2, r1
 8001626:	61da      	str	r2, [r3, #28]
 8001628:	4b05      	ldr	r3, [pc, #20]	; (8001640 <HAL_MspInit+0x44>)
 800162a:	69da      	ldr	r2, [r3, #28]
 800162c:	2380      	movs	r3, #128	; 0x80
 800162e:	055b      	lsls	r3, r3, #21
 8001630:	4013      	ands	r3, r2
 8001632:	603b      	str	r3, [r7, #0]
 8001634:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001636:	46c0      	nop			; (mov r8, r8)
 8001638:	46bd      	mov	sp, r7
 800163a:	b002      	add	sp, #8
 800163c:	bd80      	pop	{r7, pc}
 800163e:	46c0      	nop			; (mov r8, r8)
 8001640:	40021000 	.word	0x40021000

08001644 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001644:	b590      	push	{r4, r7, lr}
 8001646:	b08d      	sub	sp, #52	; 0x34
 8001648:	af00      	add	r7, sp, #0
 800164a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800164c:	241c      	movs	r4, #28
 800164e:	193b      	adds	r3, r7, r4
 8001650:	0018      	movs	r0, r3
 8001652:	2314      	movs	r3, #20
 8001654:	001a      	movs	r2, r3
 8001656:	2100      	movs	r1, #0
 8001658:	f009 fdae 	bl	800b1b8 <memset>
  if(hadc->Instance==ADC1)
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	4a4a      	ldr	r2, [pc, #296]	; (800178c <HAL_ADC_MspInit+0x148>)
 8001662:	4293      	cmp	r3, r2
 8001664:	d000      	beq.n	8001668 <HAL_ADC_MspInit+0x24>
 8001666:	e08d      	b.n	8001784 <HAL_ADC_MspInit+0x140>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001668:	4b49      	ldr	r3, [pc, #292]	; (8001790 <HAL_ADC_MspInit+0x14c>)
 800166a:	699a      	ldr	r2, [r3, #24]
 800166c:	4b48      	ldr	r3, [pc, #288]	; (8001790 <HAL_ADC_MspInit+0x14c>)
 800166e:	2180      	movs	r1, #128	; 0x80
 8001670:	0089      	lsls	r1, r1, #2
 8001672:	430a      	orrs	r2, r1
 8001674:	619a      	str	r2, [r3, #24]
 8001676:	4b46      	ldr	r3, [pc, #280]	; (8001790 <HAL_ADC_MspInit+0x14c>)
 8001678:	699a      	ldr	r2, [r3, #24]
 800167a:	2380      	movs	r3, #128	; 0x80
 800167c:	009b      	lsls	r3, r3, #2
 800167e:	4013      	ands	r3, r2
 8001680:	61bb      	str	r3, [r7, #24]
 8001682:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001684:	4b42      	ldr	r3, [pc, #264]	; (8001790 <HAL_ADC_MspInit+0x14c>)
 8001686:	695a      	ldr	r2, [r3, #20]
 8001688:	4b41      	ldr	r3, [pc, #260]	; (8001790 <HAL_ADC_MspInit+0x14c>)
 800168a:	2180      	movs	r1, #128	; 0x80
 800168c:	0309      	lsls	r1, r1, #12
 800168e:	430a      	orrs	r2, r1
 8001690:	615a      	str	r2, [r3, #20]
 8001692:	4b3f      	ldr	r3, [pc, #252]	; (8001790 <HAL_ADC_MspInit+0x14c>)
 8001694:	695a      	ldr	r2, [r3, #20]
 8001696:	2380      	movs	r3, #128	; 0x80
 8001698:	031b      	lsls	r3, r3, #12
 800169a:	4013      	ands	r3, r2
 800169c:	617b      	str	r3, [r7, #20]
 800169e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016a0:	4b3b      	ldr	r3, [pc, #236]	; (8001790 <HAL_ADC_MspInit+0x14c>)
 80016a2:	695a      	ldr	r2, [r3, #20]
 80016a4:	4b3a      	ldr	r3, [pc, #232]	; (8001790 <HAL_ADC_MspInit+0x14c>)
 80016a6:	2180      	movs	r1, #128	; 0x80
 80016a8:	0289      	lsls	r1, r1, #10
 80016aa:	430a      	orrs	r2, r1
 80016ac:	615a      	str	r2, [r3, #20]
 80016ae:	4b38      	ldr	r3, [pc, #224]	; (8001790 <HAL_ADC_MspInit+0x14c>)
 80016b0:	695a      	ldr	r2, [r3, #20]
 80016b2:	2380      	movs	r3, #128	; 0x80
 80016b4:	029b      	lsls	r3, r3, #10
 80016b6:	4013      	ands	r3, r2
 80016b8:	613b      	str	r3, [r7, #16]
 80016ba:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016bc:	4b34      	ldr	r3, [pc, #208]	; (8001790 <HAL_ADC_MspInit+0x14c>)
 80016be:	695a      	ldr	r2, [r3, #20]
 80016c0:	4b33      	ldr	r3, [pc, #204]	; (8001790 <HAL_ADC_MspInit+0x14c>)
 80016c2:	2180      	movs	r1, #128	; 0x80
 80016c4:	02c9      	lsls	r1, r1, #11
 80016c6:	430a      	orrs	r2, r1
 80016c8:	615a      	str	r2, [r3, #20]
 80016ca:	4b31      	ldr	r3, [pc, #196]	; (8001790 <HAL_ADC_MspInit+0x14c>)
 80016cc:	695a      	ldr	r2, [r3, #20]
 80016ce:	2380      	movs	r3, #128	; 0x80
 80016d0:	02db      	lsls	r3, r3, #11
 80016d2:	4013      	ands	r3, r2
 80016d4:	60fb      	str	r3, [r7, #12]
 80016d6:	68fb      	ldr	r3, [r7, #12]
    PC4     ------> ADC_IN14
    PC5     ------> ADC_IN15
    PB0     ------> ADC_IN8
    PB1     ------> ADC_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80016d8:	193b      	adds	r3, r7, r4
 80016da:	223f      	movs	r2, #63	; 0x3f
 80016dc:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_4|GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80016de:	193b      	adds	r3, r7, r4
 80016e0:	2203      	movs	r2, #3
 80016e2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016e4:	193b      	adds	r3, r7, r4
 80016e6:	2200      	movs	r2, #0
 80016e8:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80016ea:	193b      	adds	r3, r7, r4
 80016ec:	4a29      	ldr	r2, [pc, #164]	; (8001794 <HAL_ADC_MspInit+0x150>)
 80016ee:	0019      	movs	r1, r3
 80016f0:	0010      	movs	r0, r2
 80016f2:	f000 fef3 	bl	80024dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80016f6:	193b      	adds	r3, r7, r4
 80016f8:	22ff      	movs	r2, #255	; 0xff
 80016fa:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80016fc:	193b      	adds	r3, r7, r4
 80016fe:	2203      	movs	r2, #3
 8001700:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001702:	193b      	adds	r3, r7, r4
 8001704:	2200      	movs	r2, #0
 8001706:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001708:	193a      	adds	r2, r7, r4
 800170a:	2390      	movs	r3, #144	; 0x90
 800170c:	05db      	lsls	r3, r3, #23
 800170e:	0011      	movs	r1, r2
 8001710:	0018      	movs	r0, r3
 8001712:	f000 fee3 	bl	80024dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001716:	193b      	adds	r3, r7, r4
 8001718:	2203      	movs	r2, #3
 800171a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800171c:	193b      	adds	r3, r7, r4
 800171e:	2203      	movs	r2, #3
 8001720:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001722:	193b      	adds	r3, r7, r4
 8001724:	2200      	movs	r2, #0
 8001726:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001728:	193b      	adds	r3, r7, r4
 800172a:	4a1b      	ldr	r2, [pc, #108]	; (8001798 <HAL_ADC_MspInit+0x154>)
 800172c:	0019      	movs	r1, r3
 800172e:	0010      	movs	r0, r2
 8001730:	f000 fed4 	bl	80024dc <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC Init */
    hdma_adc.Instance = DMA1_Channel1;
 8001734:	4b19      	ldr	r3, [pc, #100]	; (800179c <HAL_ADC_MspInit+0x158>)
 8001736:	4a1a      	ldr	r2, [pc, #104]	; (80017a0 <HAL_ADC_MspInit+0x15c>)
 8001738:	601a      	str	r2, [r3, #0]
    hdma_adc.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800173a:	4b18      	ldr	r3, [pc, #96]	; (800179c <HAL_ADC_MspInit+0x158>)
 800173c:	2200      	movs	r2, #0
 800173e:	605a      	str	r2, [r3, #4]
    hdma_adc.Init.PeriphInc = DMA_PINC_DISABLE;
 8001740:	4b16      	ldr	r3, [pc, #88]	; (800179c <HAL_ADC_MspInit+0x158>)
 8001742:	2200      	movs	r2, #0
 8001744:	609a      	str	r2, [r3, #8]
    hdma_adc.Init.MemInc = DMA_MINC_ENABLE;
 8001746:	4b15      	ldr	r3, [pc, #84]	; (800179c <HAL_ADC_MspInit+0x158>)
 8001748:	2280      	movs	r2, #128	; 0x80
 800174a:	60da      	str	r2, [r3, #12]
    hdma_adc.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800174c:	4b13      	ldr	r3, [pc, #76]	; (800179c <HAL_ADC_MspInit+0x158>)
 800174e:	2280      	movs	r2, #128	; 0x80
 8001750:	0052      	lsls	r2, r2, #1
 8001752:	611a      	str	r2, [r3, #16]
    hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001754:	4b11      	ldr	r3, [pc, #68]	; (800179c <HAL_ADC_MspInit+0x158>)
 8001756:	2280      	movs	r2, #128	; 0x80
 8001758:	00d2      	lsls	r2, r2, #3
 800175a:	615a      	str	r2, [r3, #20]
    hdma_adc.Init.Mode = DMA_NORMAL;
 800175c:	4b0f      	ldr	r3, [pc, #60]	; (800179c <HAL_ADC_MspInit+0x158>)
 800175e:	2200      	movs	r2, #0
 8001760:	619a      	str	r2, [r3, #24]
    hdma_adc.Init.Priority = DMA_PRIORITY_LOW;
 8001762:	4b0e      	ldr	r3, [pc, #56]	; (800179c <HAL_ADC_MspInit+0x158>)
 8001764:	2200      	movs	r2, #0
 8001766:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc) != HAL_OK)
 8001768:	4b0c      	ldr	r3, [pc, #48]	; (800179c <HAL_ADC_MspInit+0x158>)
 800176a:	0018      	movs	r0, r3
 800176c:	f000 fd32 	bl	80021d4 <HAL_DMA_Init>
 8001770:	1e03      	subs	r3, r0, #0
 8001772:	d001      	beq.n	8001778 <HAL_ADC_MspInit+0x134>
    {
      Error_Handler();
 8001774:	f7ff fe76 	bl	8001464 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc);
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	4a08      	ldr	r2, [pc, #32]	; (800179c <HAL_ADC_MspInit+0x158>)
 800177c:	631a      	str	r2, [r3, #48]	; 0x30
 800177e:	4b07      	ldr	r3, [pc, #28]	; (800179c <HAL_ADC_MspInit+0x158>)
 8001780:	687a      	ldr	r2, [r7, #4]
 8001782:	625a      	str	r2, [r3, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001784:	46c0      	nop			; (mov r8, r8)
 8001786:	46bd      	mov	sp, r7
 8001788:	b00d      	add	sp, #52	; 0x34
 800178a:	bd90      	pop	{r4, r7, pc}
 800178c:	40012400 	.word	0x40012400
 8001790:	40021000 	.word	0x40021000
 8001794:	48000800 	.word	0x48000800
 8001798:	48000400 	.word	0x48000400
 800179c:	20000594 	.word	0x20000594
 80017a0:	40020008 	.word	0x40020008

080017a4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80017a4:	b590      	push	{r4, r7, lr}
 80017a6:	b08b      	sub	sp, #44	; 0x2c
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017ac:	2414      	movs	r4, #20
 80017ae:	193b      	adds	r3, r7, r4
 80017b0:	0018      	movs	r0, r3
 80017b2:	2314      	movs	r3, #20
 80017b4:	001a      	movs	r2, r3
 80017b6:	2100      	movs	r1, #0
 80017b8:	f009 fcfe 	bl	800b1b8 <memset>
  if(hspi->Instance==SPI1)
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	4a1c      	ldr	r2, [pc, #112]	; (8001834 <HAL_SPI_MspInit+0x90>)
 80017c2:	4293      	cmp	r3, r2
 80017c4:	d131      	bne.n	800182a <HAL_SPI_MspInit+0x86>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80017c6:	4b1c      	ldr	r3, [pc, #112]	; (8001838 <HAL_SPI_MspInit+0x94>)
 80017c8:	699a      	ldr	r2, [r3, #24]
 80017ca:	4b1b      	ldr	r3, [pc, #108]	; (8001838 <HAL_SPI_MspInit+0x94>)
 80017cc:	2180      	movs	r1, #128	; 0x80
 80017ce:	0149      	lsls	r1, r1, #5
 80017d0:	430a      	orrs	r2, r1
 80017d2:	619a      	str	r2, [r3, #24]
 80017d4:	4b18      	ldr	r3, [pc, #96]	; (8001838 <HAL_SPI_MspInit+0x94>)
 80017d6:	699a      	ldr	r2, [r3, #24]
 80017d8:	2380      	movs	r3, #128	; 0x80
 80017da:	015b      	lsls	r3, r3, #5
 80017dc:	4013      	ands	r3, r2
 80017de:	613b      	str	r3, [r7, #16]
 80017e0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80017e2:	4b15      	ldr	r3, [pc, #84]	; (8001838 <HAL_SPI_MspInit+0x94>)
 80017e4:	695a      	ldr	r2, [r3, #20]
 80017e6:	4b14      	ldr	r3, [pc, #80]	; (8001838 <HAL_SPI_MspInit+0x94>)
 80017e8:	2180      	movs	r1, #128	; 0x80
 80017ea:	02c9      	lsls	r1, r1, #11
 80017ec:	430a      	orrs	r2, r1
 80017ee:	615a      	str	r2, [r3, #20]
 80017f0:	4b11      	ldr	r3, [pc, #68]	; (8001838 <HAL_SPI_MspInit+0x94>)
 80017f2:	695a      	ldr	r2, [r3, #20]
 80017f4:	2380      	movs	r3, #128	; 0x80
 80017f6:	02db      	lsls	r3, r3, #11
 80017f8:	4013      	ands	r3, r2
 80017fa:	60fb      	str	r3, [r7, #12]
 80017fc:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 80017fe:	0021      	movs	r1, r4
 8001800:	187b      	adds	r3, r7, r1
 8001802:	2238      	movs	r2, #56	; 0x38
 8001804:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001806:	187b      	adds	r3, r7, r1
 8001808:	2202      	movs	r2, #2
 800180a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800180c:	187b      	adds	r3, r7, r1
 800180e:	2200      	movs	r2, #0
 8001810:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001812:	187b      	adds	r3, r7, r1
 8001814:	2203      	movs	r2, #3
 8001816:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8001818:	187b      	adds	r3, r7, r1
 800181a:	2200      	movs	r2, #0
 800181c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800181e:	187b      	adds	r3, r7, r1
 8001820:	4a06      	ldr	r2, [pc, #24]	; (800183c <HAL_SPI_MspInit+0x98>)
 8001822:	0019      	movs	r1, r3
 8001824:	0010      	movs	r0, r2
 8001826:	f000 fe59 	bl	80024dc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800182a:	46c0      	nop			; (mov r8, r8)
 800182c:	46bd      	mov	sp, r7
 800182e:	b00b      	add	sp, #44	; 0x2c
 8001830:	bd90      	pop	{r4, r7, pc}
 8001832:	46c0      	nop			; (mov r8, r8)
 8001834:	40013000 	.word	0x40013000
 8001838:	40021000 	.word	0x40021000
 800183c:	48000400 	.word	0x48000400

08001840 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	b084      	sub	sp, #16
 8001844:	af00      	add	r7, sp, #0
 8001846:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM14)
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	4a0e      	ldr	r2, [pc, #56]	; (8001888 <HAL_TIM_Base_MspInit+0x48>)
 800184e:	4293      	cmp	r3, r2
 8001850:	d115      	bne.n	800187e <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM14_MspInit 0 */

  /* USER CODE END TIM14_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM14_CLK_ENABLE();
 8001852:	4b0e      	ldr	r3, [pc, #56]	; (800188c <HAL_TIM_Base_MspInit+0x4c>)
 8001854:	69da      	ldr	r2, [r3, #28]
 8001856:	4b0d      	ldr	r3, [pc, #52]	; (800188c <HAL_TIM_Base_MspInit+0x4c>)
 8001858:	2180      	movs	r1, #128	; 0x80
 800185a:	0049      	lsls	r1, r1, #1
 800185c:	430a      	orrs	r2, r1
 800185e:	61da      	str	r2, [r3, #28]
 8001860:	4b0a      	ldr	r3, [pc, #40]	; (800188c <HAL_TIM_Base_MspInit+0x4c>)
 8001862:	69da      	ldr	r2, [r3, #28]
 8001864:	2380      	movs	r3, #128	; 0x80
 8001866:	005b      	lsls	r3, r3, #1
 8001868:	4013      	ands	r3, r2
 800186a:	60fb      	str	r3, [r7, #12]
 800186c:	68fb      	ldr	r3, [r7, #12]
    /* TIM14 interrupt Init */
    HAL_NVIC_SetPriority(TIM14_IRQn, 0, 0);
 800186e:	2200      	movs	r2, #0
 8001870:	2100      	movs	r1, #0
 8001872:	2013      	movs	r0, #19
 8001874:	f000 fc7c 	bl	8002170 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM14_IRQn);
 8001878:	2013      	movs	r0, #19
 800187a:	f000 fc8e 	bl	800219a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }

}
 800187e:	46c0      	nop			; (mov r8, r8)
 8001880:	46bd      	mov	sp, r7
 8001882:	b004      	add	sp, #16
 8001884:	bd80      	pop	{r7, pc}
 8001886:	46c0      	nop			; (mov r8, r8)
 8001888:	40002000 	.word	0x40002000
 800188c:	40021000 	.word	0x40021000

08001890 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001890:	b590      	push	{r4, r7, lr}
 8001892:	b08b      	sub	sp, #44	; 0x2c
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001898:	2414      	movs	r4, #20
 800189a:	193b      	adds	r3, r7, r4
 800189c:	0018      	movs	r0, r3
 800189e:	2314      	movs	r3, #20
 80018a0:	001a      	movs	r2, r3
 80018a2:	2100      	movs	r1, #0
 80018a4:	f009 fc88 	bl	800b1b8 <memset>
  if(huart->Instance==USART3)
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	4a20      	ldr	r2, [pc, #128]	; (8001930 <HAL_UART_MspInit+0xa0>)
 80018ae:	4293      	cmp	r3, r2
 80018b0:	d13a      	bne.n	8001928 <HAL_UART_MspInit+0x98>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80018b2:	4b20      	ldr	r3, [pc, #128]	; (8001934 <HAL_UART_MspInit+0xa4>)
 80018b4:	69da      	ldr	r2, [r3, #28]
 80018b6:	4b1f      	ldr	r3, [pc, #124]	; (8001934 <HAL_UART_MspInit+0xa4>)
 80018b8:	2180      	movs	r1, #128	; 0x80
 80018ba:	02c9      	lsls	r1, r1, #11
 80018bc:	430a      	orrs	r2, r1
 80018be:	61da      	str	r2, [r3, #28]
 80018c0:	4b1c      	ldr	r3, [pc, #112]	; (8001934 <HAL_UART_MspInit+0xa4>)
 80018c2:	69da      	ldr	r2, [r3, #28]
 80018c4:	2380      	movs	r3, #128	; 0x80
 80018c6:	02db      	lsls	r3, r3, #11
 80018c8:	4013      	ands	r3, r2
 80018ca:	613b      	str	r3, [r7, #16]
 80018cc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80018ce:	4b19      	ldr	r3, [pc, #100]	; (8001934 <HAL_UART_MspInit+0xa4>)
 80018d0:	695a      	ldr	r2, [r3, #20]
 80018d2:	4b18      	ldr	r3, [pc, #96]	; (8001934 <HAL_UART_MspInit+0xa4>)
 80018d4:	2180      	movs	r1, #128	; 0x80
 80018d6:	0309      	lsls	r1, r1, #12
 80018d8:	430a      	orrs	r2, r1
 80018da:	615a      	str	r2, [r3, #20]
 80018dc:	4b15      	ldr	r3, [pc, #84]	; (8001934 <HAL_UART_MspInit+0xa4>)
 80018de:	695a      	ldr	r2, [r3, #20]
 80018e0:	2380      	movs	r3, #128	; 0x80
 80018e2:	031b      	lsls	r3, r3, #12
 80018e4:	4013      	ands	r3, r2
 80018e6:	60fb      	str	r3, [r7, #12]
 80018e8:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PC10     ------> USART3_TX
    PC11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80018ea:	193b      	adds	r3, r7, r4
 80018ec:	22c0      	movs	r2, #192	; 0xc0
 80018ee:	0112      	lsls	r2, r2, #4
 80018f0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018f2:	0021      	movs	r1, r4
 80018f4:	187b      	adds	r3, r7, r1
 80018f6:	2202      	movs	r2, #2
 80018f8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018fa:	187b      	adds	r3, r7, r1
 80018fc:	2200      	movs	r2, #0
 80018fe:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001900:	187b      	adds	r3, r7, r1
 8001902:	2203      	movs	r2, #3
 8001904:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART3;
 8001906:	187b      	adds	r3, r7, r1
 8001908:	2201      	movs	r2, #1
 800190a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800190c:	187b      	adds	r3, r7, r1
 800190e:	4a0a      	ldr	r2, [pc, #40]	; (8001938 <HAL_UART_MspInit+0xa8>)
 8001910:	0019      	movs	r1, r3
 8001912:	0010      	movs	r0, r2
 8001914:	f000 fde2 	bl	80024dc <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_4_IRQn, 0, 0);
 8001918:	2200      	movs	r2, #0
 800191a:	2100      	movs	r1, #0
 800191c:	201d      	movs	r0, #29
 800191e:	f000 fc27 	bl	8002170 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_4_IRQn);
 8001922:	201d      	movs	r0, #29
 8001924:	f000 fc39 	bl	800219a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001928:	46c0      	nop			; (mov r8, r8)
 800192a:	46bd      	mov	sp, r7
 800192c:	b00b      	add	sp, #44	; 0x2c
 800192e:	bd90      	pop	{r4, r7, pc}
 8001930:	40004800 	.word	0x40004800
 8001934:	40021000 	.word	0x40021000
 8001938:	48000800 	.word	0x48000800

0800193c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800193c:	b580      	push	{r7, lr}
 800193e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001940:	e7fe      	b.n	8001940 <NMI_Handler+0x4>

08001942 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001942:	b580      	push	{r7, lr}
 8001944:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001946:	e7fe      	b.n	8001946 <HardFault_Handler+0x4>

08001948 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800194c:	46c0      	nop			; (mov r8, r8)
 800194e:	46bd      	mov	sp, r7
 8001950:	bd80      	pop	{r7, pc}

08001952 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001952:	b580      	push	{r7, lr}
 8001954:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001956:	46c0      	nop			; (mov r8, r8)
 8001958:	46bd      	mov	sp, r7
 800195a:	bd80      	pop	{r7, pc}

0800195c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001960:	f000 f8f0 	bl	8001b44 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001964:	46c0      	nop			; (mov r8, r8)
 8001966:	46bd      	mov	sp, r7
 8001968:	bd80      	pop	{r7, pc}

0800196a <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 800196a:	b580      	push	{r7, lr}
 800196c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 800196e:	2380      	movs	r3, #128	; 0x80
 8001970:	005b      	lsls	r3, r3, #1
 8001972:	0018      	movs	r0, r3
 8001974:	f000 ff80 	bl	8002878 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 8001978:	2380      	movs	r3, #128	; 0x80
 800197a:	009b      	lsls	r3, r3, #2
 800197c:	0018      	movs	r0, r3
 800197e:	f000 ff7b 	bl	8002878 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8001982:	46c0      	nop			; (mov r8, r8)
 8001984:	46bd      	mov	sp, r7
 8001986:	bd80      	pop	{r7, pc}

08001988 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc);
 800198c:	4b03      	ldr	r3, [pc, #12]	; (800199c <DMA1_Channel1_IRQHandler+0x14>)
 800198e:	0018      	movs	r0, r3
 8001990:	f000 fce5 	bl	800235e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001994:	46c0      	nop			; (mov r8, r8)
 8001996:	46bd      	mov	sp, r7
 8001998:	bd80      	pop	{r7, pc}
 800199a:	46c0      	nop			; (mov r8, r8)
 800199c:	20000594 	.word	0x20000594

080019a0 <TIM14_IRQHandler>:

/**
  * @brief This function handles TIM14 global interrupt.
  */
void TIM14_IRQHandler(void)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM14_IRQn 0 */

  /* USER CODE END TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 80019a4:	4b03      	ldr	r3, [pc, #12]	; (80019b4 <TIM14_IRQHandler+0x14>)
 80019a6:	0018      	movs	r0, r3
 80019a8:	f003 fda6 	bl	80054f8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM14_IRQn 1 */

  /* USER CODE END TIM14_IRQn 1 */
}
 80019ac:	46c0      	nop			; (mov r8, r8)
 80019ae:	46bd      	mov	sp, r7
 80019b0:	bd80      	pop	{r7, pc}
 80019b2:	46c0      	nop			; (mov r8, r8)
 80019b4:	20000548 	.word	0x20000548

080019b8 <USART3_4_IRQHandler>:

/**
  * @brief This function handles USART3 and USART4 global interrupts.
  */
void USART3_4_IRQHandler(void)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_4_IRQn 0 */

  /* USER CODE END USART3_4_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80019bc:	4b03      	ldr	r3, [pc, #12]	; (80019cc <USART3_4_IRQHandler+0x14>)
 80019be:	0018      	movs	r0, r3
 80019c0:	f004 fa08 	bl	8005dd4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_4_IRQn 1 */

  /* USER CODE END USART3_4_IRQn 1 */
}
 80019c4:	46c0      	nop			; (mov r8, r8)
 80019c6:	46bd      	mov	sp, r7
 80019c8:	bd80      	pop	{r7, pc}
 80019ca:	46c0      	nop			; (mov r8, r8)
 80019cc:	2000045c 	.word	0x2000045c

080019d0 <USB_IRQHandler>:

/**
  * @brief This function handles USB global interrupt / USB wake-up interrupt through EXTI line 18.
  */
void USB_IRQHandler(void)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_IRQn 0 */

  /* USER CODE END USB_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80019d4:	4b03      	ldr	r3, [pc, #12]	; (80019e4 <USB_IRQHandler+0x14>)
 80019d6:	0018      	movs	r0, r3
 80019d8:	f001 f8a0 	bl	8002b1c <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_IRQn 1 */

  /* USER CODE END USB_IRQn 1 */
}
 80019dc:	46c0      	nop			; (mov r8, r8)
 80019de:	46bd      	mov	sp, r7
 80019e0:	bd80      	pop	{r7, pc}
 80019e2:	46c0      	nop			; (mov r8, r8)
 80019e4:	200012b4 	.word	0x200012b4

080019e8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b086      	sub	sp, #24
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80019f0:	4a14      	ldr	r2, [pc, #80]	; (8001a44 <_sbrk+0x5c>)
 80019f2:	4b15      	ldr	r3, [pc, #84]	; (8001a48 <_sbrk+0x60>)
 80019f4:	1ad3      	subs	r3, r2, r3
 80019f6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80019f8:	697b      	ldr	r3, [r7, #20]
 80019fa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80019fc:	4b13      	ldr	r3, [pc, #76]	; (8001a4c <_sbrk+0x64>)
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d102      	bne.n	8001a0a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001a04:	4b11      	ldr	r3, [pc, #68]	; (8001a4c <_sbrk+0x64>)
 8001a06:	4a12      	ldr	r2, [pc, #72]	; (8001a50 <_sbrk+0x68>)
 8001a08:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001a0a:	4b10      	ldr	r3, [pc, #64]	; (8001a4c <_sbrk+0x64>)
 8001a0c:	681a      	ldr	r2, [r3, #0]
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	18d3      	adds	r3, r2, r3
 8001a12:	693a      	ldr	r2, [r7, #16]
 8001a14:	429a      	cmp	r2, r3
 8001a16:	d207      	bcs.n	8001a28 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001a18:	f009 fb90 	bl	800b13c <__errno>
 8001a1c:	0003      	movs	r3, r0
 8001a1e:	220c      	movs	r2, #12
 8001a20:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001a22:	2301      	movs	r3, #1
 8001a24:	425b      	negs	r3, r3
 8001a26:	e009      	b.n	8001a3c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001a28:	4b08      	ldr	r3, [pc, #32]	; (8001a4c <_sbrk+0x64>)
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001a2e:	4b07      	ldr	r3, [pc, #28]	; (8001a4c <_sbrk+0x64>)
 8001a30:	681a      	ldr	r2, [r3, #0]
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	18d2      	adds	r2, r2, r3
 8001a36:	4b05      	ldr	r3, [pc, #20]	; (8001a4c <_sbrk+0x64>)
 8001a38:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8001a3a:	68fb      	ldr	r3, [r7, #12]
}
 8001a3c:	0018      	movs	r0, r3
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	b006      	add	sp, #24
 8001a42:	bd80      	pop	{r7, pc}
 8001a44:	20004000 	.word	0x20004000
 8001a48:	00000400 	.word	0x00000400
 8001a4c:	20000214 	.word	0x20000214
 8001a50:	200015b8 	.word	0x200015b8

08001a54 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8001a58:	46c0      	nop			; (mov r8, r8)
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	bd80      	pop	{r7, pc}
	...

08001a60 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001a60:	480d      	ldr	r0, [pc, #52]	; (8001a98 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001a62:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001a64:	480d      	ldr	r0, [pc, #52]	; (8001a9c <LoopForever+0x6>)
  ldr r1, =_edata
 8001a66:	490e      	ldr	r1, [pc, #56]	; (8001aa0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001a68:	4a0e      	ldr	r2, [pc, #56]	; (8001aa4 <LoopForever+0xe>)
  movs r3, #0
 8001a6a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a6c:	e002      	b.n	8001a74 <LoopCopyDataInit>

08001a6e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a6e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a70:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a72:	3304      	adds	r3, #4

08001a74 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a74:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a76:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a78:	d3f9      	bcc.n	8001a6e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a7a:	4a0b      	ldr	r2, [pc, #44]	; (8001aa8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001a7c:	4c0b      	ldr	r4, [pc, #44]	; (8001aac <LoopForever+0x16>)
  movs r3, #0
 8001a7e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a80:	e001      	b.n	8001a86 <LoopFillZerobss>

08001a82 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a82:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a84:	3204      	adds	r2, #4

08001a86 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a86:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a88:	d3fb      	bcc.n	8001a82 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8001a8a:	f7ff ffe3 	bl	8001a54 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8001a8e:	f009 fb5b 	bl	800b148 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001a92:	f7fe fd6b 	bl	800056c <main>

08001a96 <LoopForever>:

LoopForever:
    b LoopForever
 8001a96:	e7fe      	b.n	8001a96 <LoopForever>
  ldr   r0, =_estack
 8001a98:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8001a9c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001aa0:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8001aa4:	0800bc4c 	.word	0x0800bc4c
  ldr r2, =_sbss
 8001aa8:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8001aac:	200015b8 	.word	0x200015b8

08001ab0 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001ab0:	e7fe      	b.n	8001ab0 <ADC1_COMP_IRQHandler>
	...

08001ab4 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001ab8:	4b07      	ldr	r3, [pc, #28]	; (8001ad8 <HAL_Init+0x24>)
 8001aba:	681a      	ldr	r2, [r3, #0]
 8001abc:	4b06      	ldr	r3, [pc, #24]	; (8001ad8 <HAL_Init+0x24>)
 8001abe:	2110      	movs	r1, #16
 8001ac0:	430a      	orrs	r2, r1
 8001ac2:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8001ac4:	2003      	movs	r0, #3
 8001ac6:	f000 f809 	bl	8001adc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001aca:	f7ff fd97 	bl	80015fc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001ace:	2300      	movs	r3, #0
}
 8001ad0:	0018      	movs	r0, r3
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	bd80      	pop	{r7, pc}
 8001ad6:	46c0      	nop			; (mov r8, r8)
 8001ad8:	40022000 	.word	0x40022000

08001adc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001adc:	b590      	push	{r4, r7, lr}
 8001ade:	b083      	sub	sp, #12
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001ae4:	4b14      	ldr	r3, [pc, #80]	; (8001b38 <HAL_InitTick+0x5c>)
 8001ae6:	681c      	ldr	r4, [r3, #0]
 8001ae8:	4b14      	ldr	r3, [pc, #80]	; (8001b3c <HAL_InitTick+0x60>)
 8001aea:	781b      	ldrb	r3, [r3, #0]
 8001aec:	0019      	movs	r1, r3
 8001aee:	23fa      	movs	r3, #250	; 0xfa
 8001af0:	0098      	lsls	r0, r3, #2
 8001af2:	f7fe fb1b 	bl	800012c <__udivsi3>
 8001af6:	0003      	movs	r3, r0
 8001af8:	0019      	movs	r1, r3
 8001afa:	0020      	movs	r0, r4
 8001afc:	f7fe fb16 	bl	800012c <__udivsi3>
 8001b00:	0003      	movs	r3, r0
 8001b02:	0018      	movs	r0, r3
 8001b04:	f000 fb59 	bl	80021ba <HAL_SYSTICK_Config>
 8001b08:	1e03      	subs	r3, r0, #0
 8001b0a:	d001      	beq.n	8001b10 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8001b0c:	2301      	movs	r3, #1
 8001b0e:	e00f      	b.n	8001b30 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	2b03      	cmp	r3, #3
 8001b14:	d80b      	bhi.n	8001b2e <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b16:	6879      	ldr	r1, [r7, #4]
 8001b18:	2301      	movs	r3, #1
 8001b1a:	425b      	negs	r3, r3
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	0018      	movs	r0, r3
 8001b20:	f000 fb26 	bl	8002170 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001b24:	4b06      	ldr	r3, [pc, #24]	; (8001b40 <HAL_InitTick+0x64>)
 8001b26:	687a      	ldr	r2, [r7, #4]
 8001b28:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	e000      	b.n	8001b30 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8001b2e:	2301      	movs	r3, #1
}
 8001b30:	0018      	movs	r0, r3
 8001b32:	46bd      	mov	sp, r7
 8001b34:	b003      	add	sp, #12
 8001b36:	bd90      	pop	{r4, r7, pc}
 8001b38:	20000000 	.word	0x20000000
 8001b3c:	20000008 	.word	0x20000008
 8001b40:	20000004 	.word	0x20000004

08001b44 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001b48:	4b05      	ldr	r3, [pc, #20]	; (8001b60 <HAL_IncTick+0x1c>)
 8001b4a:	781b      	ldrb	r3, [r3, #0]
 8001b4c:	001a      	movs	r2, r3
 8001b4e:	4b05      	ldr	r3, [pc, #20]	; (8001b64 <HAL_IncTick+0x20>)
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	18d2      	adds	r2, r2, r3
 8001b54:	4b03      	ldr	r3, [pc, #12]	; (8001b64 <HAL_IncTick+0x20>)
 8001b56:	601a      	str	r2, [r3, #0]
}
 8001b58:	46c0      	nop			; (mov r8, r8)
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	bd80      	pop	{r7, pc}
 8001b5e:	46c0      	nop			; (mov r8, r8)
 8001b60:	20000008 	.word	0x20000008
 8001b64:	20000618 	.word	0x20000618

08001b68 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	af00      	add	r7, sp, #0
  return uwTick;
 8001b6c:	4b02      	ldr	r3, [pc, #8]	; (8001b78 <HAL_GetTick+0x10>)
 8001b6e:	681b      	ldr	r3, [r3, #0]
}
 8001b70:	0018      	movs	r0, r3
 8001b72:	46bd      	mov	sp, r7
 8001b74:	bd80      	pop	{r7, pc}
 8001b76:	46c0      	nop			; (mov r8, r8)
 8001b78:	20000618 	.word	0x20000618

08001b7c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	b084      	sub	sp, #16
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001b84:	230f      	movs	r3, #15
 8001b86:	18fb      	adds	r3, r7, r3
 8001b88:	2200      	movs	r2, #0
 8001b8a:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0U;
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if(hadc == NULL)
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d101      	bne.n	8001b9a <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 8001b96:	2301      	movs	r3, #1
 8001b98:	e125      	b.n	8001de6 <HAL_ADC_Init+0x26a>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d10a      	bne.n	8001bb8 <HAL_ADC_Init+0x3c>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	63da      	str	r2, [r3, #60]	; 0x3c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	2234      	movs	r2, #52	; 0x34
 8001bac:	2100      	movs	r1, #0
 8001bae:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	0018      	movs	r0, r3
 8001bb4:	f7ff fd46 	bl	8001644 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */ 
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001bbc:	2210      	movs	r2, #16
 8001bbe:	4013      	ands	r3, r2
 8001bc0:	d000      	beq.n	8001bc4 <HAL_ADC_Init+0x48>
 8001bc2:	e103      	b.n	8001dcc <HAL_ADC_Init+0x250>
 8001bc4:	230f      	movs	r3, #15
 8001bc6:	18fb      	adds	r3, r7, r3
 8001bc8:	781b      	ldrb	r3, [r3, #0]
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d000      	beq.n	8001bd0 <HAL_ADC_Init+0x54>
 8001bce:	e0fd      	b.n	8001dcc <HAL_ADC_Init+0x250>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	689b      	ldr	r3, [r3, #8]
 8001bd6:	2204      	movs	r2, #4
 8001bd8:	4013      	ands	r3, r2
      (tmp_hal_status == HAL_OK)                                &&
 8001bda:	d000      	beq.n	8001bde <HAL_ADC_Init+0x62>
 8001bdc:	e0f6      	b.n	8001dcc <HAL_ADC_Init+0x250>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001be2:	4a83      	ldr	r2, [pc, #524]	; (8001df0 <HAL_ADC_Init+0x274>)
 8001be4:	4013      	ands	r3, r2
 8001be6:	2202      	movs	r2, #2
 8001be8:	431a      	orrs	r2, r3
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	639a      	str	r2, [r3, #56]	; 0x38
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - ADC clock mode                                                      */
    /*  - ADC clock prescaler                                                 */
    /*  - ADC resolution                                                      */
    if (ADC_IS_ENABLE(hadc) == RESET)
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	689b      	ldr	r3, [r3, #8]
 8001bf4:	2203      	movs	r2, #3
 8001bf6:	4013      	ands	r3, r2
 8001bf8:	2b01      	cmp	r3, #1
 8001bfa:	d112      	bne.n	8001c22 <HAL_ADC_Init+0xa6>
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	2201      	movs	r2, #1
 8001c04:	4013      	ands	r3, r2
 8001c06:	2b01      	cmp	r3, #1
 8001c08:	d009      	beq.n	8001c1e <HAL_ADC_Init+0xa2>
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	68da      	ldr	r2, [r3, #12]
 8001c10:	2380      	movs	r3, #128	; 0x80
 8001c12:	021b      	lsls	r3, r3, #8
 8001c14:	401a      	ands	r2, r3
 8001c16:	2380      	movs	r3, #128	; 0x80
 8001c18:	021b      	lsls	r3, r3, #8
 8001c1a:	429a      	cmp	r2, r3
 8001c1c:	d101      	bne.n	8001c22 <HAL_ADC_Init+0xa6>
 8001c1e:	2301      	movs	r3, #1
 8001c20:	e000      	b.n	8001c24 <HAL_ADC_Init+0xa8>
 8001c22:	2300      	movs	r3, #0
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d116      	bne.n	8001c56 <HAL_ADC_Init+0xda>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
     
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	68db      	ldr	r3, [r3, #12]
 8001c2e:	2218      	movs	r2, #24
 8001c30:	4393      	bics	r3, r2
 8001c32:	0019      	movs	r1, r3
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	689a      	ldr	r2, [r3, #8]
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	430a      	orrs	r2, r1
 8001c3e:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler                                                 */
      MODIFY_REG(hadc->Instance->CFGR2    ,
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	691b      	ldr	r3, [r3, #16]
 8001c46:	009b      	lsls	r3, r3, #2
 8001c48:	0899      	lsrs	r1, r3, #2
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	685a      	ldr	r2, [r3, #4]
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	430a      	orrs	r2, r1
 8001c54:	611a      	str	r2, [r3, #16]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	68da      	ldr	r2, [r3, #12]
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	4964      	ldr	r1, [pc, #400]	; (8001df4 <HAL_ADC_Init+0x278>)
 8001c62:	400a      	ands	r2, r1
 8001c64:	60da      	str	r2, [r3, #12]
                                ADC_CFGR1_EXTEN   |
                                ADC_CFGR1_ALIGN   |
                                ADC_CFGR1_SCANDIR |
                                ADC_CFGR1_DMACFG   );

    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	7e1b      	ldrb	r3, [r3, #24]
 8001c6a:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	7e5b      	ldrb	r3, [r3, #25]
 8001c70:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001c72:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	7e9b      	ldrb	r3, [r3, #26]
 8001c78:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8001c7a:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c80:	2b01      	cmp	r3, #1
 8001c82:	d002      	beq.n	8001c8a <HAL_ADC_Init+0x10e>
 8001c84:	2380      	movs	r3, #128	; 0x80
 8001c86:	015b      	lsls	r3, r3, #5
 8001c88:	e000      	b.n	8001c8c <HAL_ADC_Init+0x110>
 8001c8a:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8001c8c:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                             |
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8001c92:	431a      	orrs	r2, r3
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	691b      	ldr	r3, [r3, #16]
 8001c98:	2b02      	cmp	r3, #2
 8001c9a:	d101      	bne.n	8001ca0 <HAL_ADC_Init+0x124>
 8001c9c:	2304      	movs	r3, #4
 8001c9e:	e000      	b.n	8001ca2 <HAL_ADC_Init+0x126>
 8001ca0:	2300      	movs	r3, #0
                 hadc->Init.DataAlign                                             |
 8001ca2:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	2124      	movs	r1, #36	; 0x24
 8001ca8:	5c5b      	ldrb	r3, [r3, r1]
 8001caa:	005b      	lsls	r3, r3, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8001cac:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001cae:	68ba      	ldr	r2, [r7, #8]
 8001cb0:	4313      	orrs	r3, r2
 8001cb2:	60bb      	str	r3, [r7, #8]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	7edb      	ldrb	r3, [r3, #27]
 8001cb8:	2b01      	cmp	r3, #1
 8001cba:	d115      	bne.n	8001ce8 <HAL_ADC_Init+0x16c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	7e9b      	ldrb	r3, [r3, #26]
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d105      	bne.n	8001cd0 <HAL_ADC_Init+0x154>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8001cc4:	68bb      	ldr	r3, [r7, #8]
 8001cc6:	2280      	movs	r2, #128	; 0x80
 8001cc8:	0252      	lsls	r2, r2, #9
 8001cca:	4313      	orrs	r3, r2
 8001ccc:	60bb      	str	r3, [r7, #8]
 8001cce:	e00b      	b.n	8001ce8 <HAL_ADC_Init+0x16c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001cd4:	2220      	movs	r2, #32
 8001cd6:	431a      	orrs	r2, r3
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	639a      	str	r2, [r3, #56]	; 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ce0:	2201      	movs	r2, #1
 8001ce2:	431a      	orrs	r2, r3
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	63da      	str	r2, [r3, #60]	; 0x3c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	69da      	ldr	r2, [r3, #28]
 8001cec:	23c2      	movs	r3, #194	; 0xc2
 8001cee:	33ff      	adds	r3, #255	; 0xff
 8001cf0:	429a      	cmp	r2, r3
 8001cf2:	d007      	beq.n	8001d04 <HAL_ADC_Init+0x188>
    {
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	69da      	ldr	r2, [r3, #28]
                    hadc->Init.ExternalTrigConvEdge );
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	6a1b      	ldr	r3, [r3, #32]
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8001cfc:	4313      	orrs	r3, r2
 8001cfe:	68ba      	ldr	r2, [r7, #8]
 8001d00:	4313      	orrs	r3, r2
 8001d02:	60bb      	str	r3, [r7, #8]
    }
    
    /* Update ADC configuration register with previous settings */
    hadc->Instance->CFGR1 |= tmpCFGR1;
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	68d9      	ldr	r1, [r3, #12]
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	68ba      	ldr	r2, [r7, #8]
 8001d10:	430a      	orrs	r2, r1
 8001d12:	60da      	str	r2, [r3, #12]
    /* Management of parameters "SamplingTimeCommon" and "SamplingTime"       */
    /* (obsolete): sampling time set in this function if parameter            */
    /*  "SamplingTimeCommon" has been set to a valid sampling time.           */
    /* Otherwise, sampling time is set into ADC channel initialization        */
    /* structure with parameter "SamplingTime" (obsolete).                    */
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001d18:	2380      	movs	r3, #128	; 0x80
 8001d1a:	055b      	lsls	r3, r3, #21
 8001d1c:	429a      	cmp	r2, r3
 8001d1e:	d01b      	beq.n	8001d58 <HAL_ADC_Init+0x1dc>
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d24:	2b01      	cmp	r3, #1
 8001d26:	d017      	beq.n	8001d58 <HAL_ADC_Init+0x1dc>
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d2c:	2b02      	cmp	r3, #2
 8001d2e:	d013      	beq.n	8001d58 <HAL_ADC_Init+0x1dc>
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d34:	2b03      	cmp	r3, #3
 8001d36:	d00f      	beq.n	8001d58 <HAL_ADC_Init+0x1dc>
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d3c:	2b04      	cmp	r3, #4
 8001d3e:	d00b      	beq.n	8001d58 <HAL_ADC_Init+0x1dc>
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d44:	2b05      	cmp	r3, #5
 8001d46:	d007      	beq.n	8001d58 <HAL_ADC_Init+0x1dc>
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d4c:	2b06      	cmp	r3, #6
 8001d4e:	d003      	beq.n	8001d58 <HAL_ADC_Init+0x1dc>
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d54:	2b07      	cmp	r3, #7
 8001d56:	d112      	bne.n	8001d7e <HAL_ADC_Init+0x202>
    {
      /* Channel sampling time configuration */
      /* Clear the old sample time */
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	695a      	ldr	r2, [r3, #20]
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	2107      	movs	r1, #7
 8001d64:	438a      	bics	r2, r1
 8001d66:	615a      	str	r2, [r3, #20]
      
      /* Set the new sample time */
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	6959      	ldr	r1, [r3, #20]
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d72:	2207      	movs	r2, #7
 8001d74:	401a      	ands	r2, r3
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	430a      	orrs	r2, r1
 8001d7c:	615a      	str	r2, [r3, #20]
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	68db      	ldr	r3, [r3, #12]
 8001d84:	4a1c      	ldr	r2, [pc, #112]	; (8001df8 <HAL_ADC_Init+0x27c>)
 8001d86:	4013      	ands	r3, r2
 8001d88:	68ba      	ldr	r2, [r7, #8]
 8001d8a:	429a      	cmp	r2, r3
 8001d8c:	d10b      	bne.n	8001da6 <HAL_ADC_Init+0x22a>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	2200      	movs	r2, #0
 8001d92:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d98:	2203      	movs	r2, #3
 8001d9a:	4393      	bics	r3, r2
 8001d9c:	2201      	movs	r2, #1
 8001d9e:	431a      	orrs	r2, r3
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	639a      	str	r2, [r3, #56]	; 0x38
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8001da4:	e01c      	b.n	8001de0 <HAL_ADC_Init+0x264>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001daa:	2212      	movs	r2, #18
 8001dac:	4393      	bics	r3, r2
 8001dae:	2210      	movs	r2, #16
 8001db0:	431a      	orrs	r2, r3
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001dba:	2201      	movs	r2, #1
 8001dbc:	431a      	orrs	r2, r3
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	63da      	str	r2, [r3, #60]	; 0x3c
      
      tmp_hal_status = HAL_ERROR;
 8001dc2:	230f      	movs	r3, #15
 8001dc4:	18fb      	adds	r3, r7, r3
 8001dc6:	2201      	movs	r2, #1
 8001dc8:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8001dca:	e009      	b.n	8001de0 <HAL_ADC_Init+0x264>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001dd0:	2210      	movs	r2, #16
 8001dd2:	431a      	orrs	r2, r3
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	639a      	str	r2, [r3, #56]	; 0x38
        
    tmp_hal_status = HAL_ERROR;
 8001dd8:	230f      	movs	r3, #15
 8001dda:	18fb      	adds	r3, r7, r3
 8001ddc:	2201      	movs	r2, #1
 8001dde:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001de0:	230f      	movs	r3, #15
 8001de2:	18fb      	adds	r3, r7, r3
 8001de4:	781b      	ldrb	r3, [r3, #0]
}
 8001de6:	0018      	movs	r0, r3
 8001de8:	46bd      	mov	sp, r7
 8001dea:	b004      	add	sp, #16
 8001dec:	bd80      	pop	{r7, pc}
 8001dee:	46c0      	nop			; (mov r8, r8)
 8001df0:	fffffefd 	.word	0xfffffefd
 8001df4:	fffe0219 	.word	0xfffe0219
 8001df8:	833fffe7 	.word	0x833fffe7

08001dfc <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	b084      	sub	sp, #16
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	6078      	str	r0, [r7, #4]
 8001e04:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001e06:	230f      	movs	r3, #15
 8001e08:	18fb      	adds	r3, r7, r3
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	701a      	strb	r2, [r3, #0]
  __IO uint32_t wait_loop_index = 0U;
 8001e0e:	2300      	movs	r3, #0
 8001e10:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001e16:	2380      	movs	r3, #128	; 0x80
 8001e18:	055b      	lsls	r3, r3, #21
 8001e1a:	429a      	cmp	r2, r3
 8001e1c:	d011      	beq.n	8001e42 <HAL_ADC_ConfigChannel+0x46>
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e22:	2b01      	cmp	r3, #1
 8001e24:	d00d      	beq.n	8001e42 <HAL_ADC_ConfigChannel+0x46>
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e2a:	2b02      	cmp	r3, #2
 8001e2c:	d009      	beq.n	8001e42 <HAL_ADC_ConfigChannel+0x46>
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e32:	2b03      	cmp	r3, #3
 8001e34:	d005      	beq.n	8001e42 <HAL_ADC_ConfigChannel+0x46>
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e3a:	2b04      	cmp	r3, #4
 8001e3c:	d001      	beq.n	8001e42 <HAL_ADC_ConfigChannel+0x46>
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  {
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	2234      	movs	r2, #52	; 0x34
 8001e46:	5c9b      	ldrb	r3, [r3, r2]
 8001e48:	2b01      	cmp	r3, #1
 8001e4a:	d101      	bne.n	8001e50 <HAL_ADC_ConfigChannel+0x54>
 8001e4c:	2302      	movs	r3, #2
 8001e4e:	e0d0      	b.n	8001ff2 <HAL_ADC_ConfigChannel+0x1f6>
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	2234      	movs	r2, #52	; 0x34
 8001e54:	2101      	movs	r1, #1
 8001e56:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	689b      	ldr	r3, [r3, #8]
 8001e5e:	2204      	movs	r2, #4
 8001e60:	4013      	ands	r3, r2
 8001e62:	d000      	beq.n	8001e66 <HAL_ADC_ConfigChannel+0x6a>
 8001e64:	e0b4      	b.n	8001fd0 <HAL_ADC_ConfigChannel+0x1d4>
  {
    /* Configure channel: depending on rank setting, add it or remove it from */
    /* ADC conversion sequencer.                                              */
    if (sConfig->Rank != ADC_RANK_NONE)
 8001e66:	683b      	ldr	r3, [r7, #0]
 8001e68:	685b      	ldr	r3, [r3, #4]
 8001e6a:	4a64      	ldr	r2, [pc, #400]	; (8001ffc <HAL_ADC_ConfigChannel+0x200>)
 8001e6c:	4293      	cmp	r3, r2
 8001e6e:	d100      	bne.n	8001e72 <HAL_ADC_ConfigChannel+0x76>
 8001e70:	e082      	b.n	8001f78 <HAL_ADC_ConfigChannel+0x17c>
    {
      /* Regular sequence configuration */
      /* Set the channel selection register from the selected channel */
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8001e78:	683b      	ldr	r3, [r7, #0]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	2201      	movs	r2, #1
 8001e7e:	409a      	lsls	r2, r3
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	430a      	orrs	r2, r1
 8001e86:	629a      	str	r2, [r3, #40]	; 0x28
      /* Channel sampling time configuration */
      /* Management of parameters "SamplingTimeCommon" and "SamplingTime"     */
      /* (obsolete): sampling time set in this function with                  */
      /* parameter "SamplingTime" (obsolete) only if not already set into     */
      /* ADC initialization structure with parameter "SamplingTimeCommon".    */
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001e8c:	2380      	movs	r3, #128	; 0x80
 8001e8e:	055b      	lsls	r3, r3, #21
 8001e90:	429a      	cmp	r2, r3
 8001e92:	d037      	beq.n	8001f04 <HAL_ADC_ConfigChannel+0x108>
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e98:	2b01      	cmp	r3, #1
 8001e9a:	d033      	beq.n	8001f04 <HAL_ADC_ConfigChannel+0x108>
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ea0:	2b02      	cmp	r3, #2
 8001ea2:	d02f      	beq.n	8001f04 <HAL_ADC_ConfigChannel+0x108>
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ea8:	2b03      	cmp	r3, #3
 8001eaa:	d02b      	beq.n	8001f04 <HAL_ADC_ConfigChannel+0x108>
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001eb0:	2b04      	cmp	r3, #4
 8001eb2:	d027      	beq.n	8001f04 <HAL_ADC_ConfigChannel+0x108>
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001eb8:	2b05      	cmp	r3, #5
 8001eba:	d023      	beq.n	8001f04 <HAL_ADC_ConfigChannel+0x108>
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ec0:	2b06      	cmp	r3, #6
 8001ec2:	d01f      	beq.n	8001f04 <HAL_ADC_ConfigChannel+0x108>
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ec8:	2b07      	cmp	r3, #7
 8001eca:	d01b      	beq.n	8001f04 <HAL_ADC_ConfigChannel+0x108>
      {
        /* Modify sampling time if needed (not needed in case of reoccurrence */
        /* for several channels programmed consecutively into the sequencer)  */
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 8001ecc:	683b      	ldr	r3, [r7, #0]
 8001ece:	689a      	ldr	r2, [r3, #8]
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	695b      	ldr	r3, [r3, #20]
 8001ed6:	2107      	movs	r1, #7
 8001ed8:	400b      	ands	r3, r1
 8001eda:	429a      	cmp	r2, r3
 8001edc:	d012      	beq.n	8001f04 <HAL_ADC_ConfigChannel+0x108>
        {
          /* Channel sampling time configuration */
          /* Clear the old sample time */
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	695a      	ldr	r2, [r3, #20]
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	2107      	movs	r1, #7
 8001eea:	438a      	bics	r2, r1
 8001eec:	615a      	str	r2, [r3, #20]
          
          /* Set the new sample time */
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	6959      	ldr	r1, [r3, #20]
 8001ef4:	683b      	ldr	r3, [r7, #0]
 8001ef6:	689b      	ldr	r3, [r3, #8]
 8001ef8:	2207      	movs	r2, #7
 8001efa:	401a      	ands	r2, r3
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	430a      	orrs	r2, r1
 8001f02:	615a      	str	r2, [r3, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001f04:	683b      	ldr	r3, [r7, #0]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	2b10      	cmp	r3, #16
 8001f0a:	d007      	beq.n	8001f1c <HAL_ADC_ConfigChannel+0x120>
 8001f0c:	683b      	ldr	r3, [r7, #0]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	2b11      	cmp	r3, #17
 8001f12:	d003      	beq.n	8001f1c <HAL_ADC_ConfigChannel+0x120>
 8001f14:	683b      	ldr	r3, [r7, #0]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	2b12      	cmp	r3, #18
 8001f1a:	d163      	bne.n	8001fe4 <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path. */
        /* If Channel_17 is selected, enable VREFINT measurement path. */
        /* If Channel_18 is selected, enable VBAT measurement path. */
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8001f1c:	4b38      	ldr	r3, [pc, #224]	; (8002000 <HAL_ADC_ConfigChannel+0x204>)
 8001f1e:	6819      	ldr	r1, [r3, #0]
 8001f20:	683b      	ldr	r3, [r7, #0]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	2b10      	cmp	r3, #16
 8001f26:	d009      	beq.n	8001f3c <HAL_ADC_ConfigChannel+0x140>
 8001f28:	683b      	ldr	r3, [r7, #0]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	2b11      	cmp	r3, #17
 8001f2e:	d102      	bne.n	8001f36 <HAL_ADC_ConfigChannel+0x13a>
 8001f30:	2380      	movs	r3, #128	; 0x80
 8001f32:	03db      	lsls	r3, r3, #15
 8001f34:	e004      	b.n	8001f40 <HAL_ADC_ConfigChannel+0x144>
 8001f36:	2380      	movs	r3, #128	; 0x80
 8001f38:	045b      	lsls	r3, r3, #17
 8001f3a:	e001      	b.n	8001f40 <HAL_ADC_ConfigChannel+0x144>
 8001f3c:	2380      	movs	r3, #128	; 0x80
 8001f3e:	041b      	lsls	r3, r3, #16
 8001f40:	4a2f      	ldr	r2, [pc, #188]	; (8002000 <HAL_ADC_ConfigChannel+0x204>)
 8001f42:	430b      	orrs	r3, r1
 8001f44:	6013      	str	r3, [r2, #0]
        
        /* If Temp. sensor is selected, wait for stabilization delay */
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001f46:	683b      	ldr	r3, [r7, #0]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	2b10      	cmp	r3, #16
 8001f4c:	d14a      	bne.n	8001fe4 <HAL_ADC_ConfigChannel+0x1e8>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001f4e:	4b2d      	ldr	r3, [pc, #180]	; (8002004 <HAL_ADC_ConfigChannel+0x208>)
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	492d      	ldr	r1, [pc, #180]	; (8002008 <HAL_ADC_ConfigChannel+0x20c>)
 8001f54:	0018      	movs	r0, r3
 8001f56:	f7fe f8e9 	bl	800012c <__udivsi3>
 8001f5a:	0003      	movs	r3, r0
 8001f5c:	001a      	movs	r2, r3
 8001f5e:	0013      	movs	r3, r2
 8001f60:	009b      	lsls	r3, r3, #2
 8001f62:	189b      	adds	r3, r3, r2
 8001f64:	005b      	lsls	r3, r3, #1
 8001f66:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001f68:	e002      	b.n	8001f70 <HAL_ADC_ConfigChannel+0x174>
          {
            wait_loop_index--;
 8001f6a:	68bb      	ldr	r3, [r7, #8]
 8001f6c:	3b01      	subs	r3, #1
 8001f6e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001f70:	68bb      	ldr	r3, [r7, #8]
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d1f9      	bne.n	8001f6a <HAL_ADC_ConfigChannel+0x16e>
 8001f76:	e035      	b.n	8001fe4 <HAL_ADC_ConfigChannel+0x1e8>
    }
    else
    {
      /* Regular sequence configuration */
      /* Reset the channel selection register from the selected channel */
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001f7e:	683b      	ldr	r3, [r7, #0]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	2101      	movs	r1, #1
 8001f84:	4099      	lsls	r1, r3
 8001f86:	000b      	movs	r3, r1
 8001f88:	43d9      	mvns	r1, r3
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	400a      	ands	r2, r1
 8001f90:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
      /* internal measurement paths disable: If internal channel selected,    */
      /* disable dedicated internal buffers and path.                         */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001f92:	683b      	ldr	r3, [r7, #0]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	2b10      	cmp	r3, #16
 8001f98:	d007      	beq.n	8001faa <HAL_ADC_ConfigChannel+0x1ae>
 8001f9a:	683b      	ldr	r3, [r7, #0]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	2b11      	cmp	r3, #17
 8001fa0:	d003      	beq.n	8001faa <HAL_ADC_ConfigChannel+0x1ae>
 8001fa2:	683b      	ldr	r3, [r7, #0]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	2b12      	cmp	r3, #18
 8001fa8:	d11c      	bne.n	8001fe4 <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, disable Temp. sensor measurement path. */
        /* If Channel_17 is selected, disable VREFINT measurement path. */
        /* If Channel_18 is selected, disable VBAT measurement path. */
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8001faa:	4b15      	ldr	r3, [pc, #84]	; (8002000 <HAL_ADC_ConfigChannel+0x204>)
 8001fac:	6819      	ldr	r1, [r3, #0]
 8001fae:	683b      	ldr	r3, [r7, #0]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	2b10      	cmp	r3, #16
 8001fb4:	d007      	beq.n	8001fc6 <HAL_ADC_ConfigChannel+0x1ca>
 8001fb6:	683b      	ldr	r3, [r7, #0]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	2b11      	cmp	r3, #17
 8001fbc:	d101      	bne.n	8001fc2 <HAL_ADC_ConfigChannel+0x1c6>
 8001fbe:	4b13      	ldr	r3, [pc, #76]	; (800200c <HAL_ADC_ConfigChannel+0x210>)
 8001fc0:	e002      	b.n	8001fc8 <HAL_ADC_ConfigChannel+0x1cc>
 8001fc2:	4b13      	ldr	r3, [pc, #76]	; (8002010 <HAL_ADC_ConfigChannel+0x214>)
 8001fc4:	e000      	b.n	8001fc8 <HAL_ADC_ConfigChannel+0x1cc>
 8001fc6:	4b13      	ldr	r3, [pc, #76]	; (8002014 <HAL_ADC_ConfigChannel+0x218>)
 8001fc8:	4a0d      	ldr	r2, [pc, #52]	; (8002000 <HAL_ADC_ConfigChannel+0x204>)
 8001fca:	400b      	ands	r3, r1
 8001fcc:	6013      	str	r3, [r2, #0]
 8001fce:	e009      	b.n	8001fe4 <HAL_ADC_ConfigChannel+0x1e8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001fd4:	2220      	movs	r2, #32
 8001fd6:	431a      	orrs	r2, r3
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	639a      	str	r2, [r3, #56]	; 0x38
    
    tmp_hal_status = HAL_ERROR;
 8001fdc:	230f      	movs	r3, #15
 8001fde:	18fb      	adds	r3, r7, r3
 8001fe0:	2201      	movs	r2, #1
 8001fe2:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	2234      	movs	r2, #52	; 0x34
 8001fe8:	2100      	movs	r1, #0
 8001fea:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8001fec:	230f      	movs	r3, #15
 8001fee:	18fb      	adds	r3, r7, r3
 8001ff0:	781b      	ldrb	r3, [r3, #0]
}
 8001ff2:	0018      	movs	r0, r3
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	b004      	add	sp, #16
 8001ff8:	bd80      	pop	{r7, pc}
 8001ffa:	46c0      	nop			; (mov r8, r8)
 8001ffc:	00001001 	.word	0x00001001
 8002000:	40012708 	.word	0x40012708
 8002004:	20000000 	.word	0x20000000
 8002008:	000f4240 	.word	0x000f4240
 800200c:	ffbfffff 	.word	0xffbfffff
 8002010:	feffffff 	.word	0xfeffffff
 8002014:	ff7fffff 	.word	0xff7fffff

08002018 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	b082      	sub	sp, #8
 800201c:	af00      	add	r7, sp, #0
 800201e:	0002      	movs	r2, r0
 8002020:	1dfb      	adds	r3, r7, #7
 8002022:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002024:	1dfb      	adds	r3, r7, #7
 8002026:	781b      	ldrb	r3, [r3, #0]
 8002028:	2b7f      	cmp	r3, #127	; 0x7f
 800202a:	d809      	bhi.n	8002040 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800202c:	1dfb      	adds	r3, r7, #7
 800202e:	781b      	ldrb	r3, [r3, #0]
 8002030:	001a      	movs	r2, r3
 8002032:	231f      	movs	r3, #31
 8002034:	401a      	ands	r2, r3
 8002036:	4b04      	ldr	r3, [pc, #16]	; (8002048 <__NVIC_EnableIRQ+0x30>)
 8002038:	2101      	movs	r1, #1
 800203a:	4091      	lsls	r1, r2
 800203c:	000a      	movs	r2, r1
 800203e:	601a      	str	r2, [r3, #0]
  }
}
 8002040:	46c0      	nop			; (mov r8, r8)
 8002042:	46bd      	mov	sp, r7
 8002044:	b002      	add	sp, #8
 8002046:	bd80      	pop	{r7, pc}
 8002048:	e000e100 	.word	0xe000e100

0800204c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800204c:	b590      	push	{r4, r7, lr}
 800204e:	b083      	sub	sp, #12
 8002050:	af00      	add	r7, sp, #0
 8002052:	0002      	movs	r2, r0
 8002054:	6039      	str	r1, [r7, #0]
 8002056:	1dfb      	adds	r3, r7, #7
 8002058:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800205a:	1dfb      	adds	r3, r7, #7
 800205c:	781b      	ldrb	r3, [r3, #0]
 800205e:	2b7f      	cmp	r3, #127	; 0x7f
 8002060:	d828      	bhi.n	80020b4 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002062:	4a2f      	ldr	r2, [pc, #188]	; (8002120 <__NVIC_SetPriority+0xd4>)
 8002064:	1dfb      	adds	r3, r7, #7
 8002066:	781b      	ldrb	r3, [r3, #0]
 8002068:	b25b      	sxtb	r3, r3
 800206a:	089b      	lsrs	r3, r3, #2
 800206c:	33c0      	adds	r3, #192	; 0xc0
 800206e:	009b      	lsls	r3, r3, #2
 8002070:	589b      	ldr	r3, [r3, r2]
 8002072:	1dfa      	adds	r2, r7, #7
 8002074:	7812      	ldrb	r2, [r2, #0]
 8002076:	0011      	movs	r1, r2
 8002078:	2203      	movs	r2, #3
 800207a:	400a      	ands	r2, r1
 800207c:	00d2      	lsls	r2, r2, #3
 800207e:	21ff      	movs	r1, #255	; 0xff
 8002080:	4091      	lsls	r1, r2
 8002082:	000a      	movs	r2, r1
 8002084:	43d2      	mvns	r2, r2
 8002086:	401a      	ands	r2, r3
 8002088:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800208a:	683b      	ldr	r3, [r7, #0]
 800208c:	019b      	lsls	r3, r3, #6
 800208e:	22ff      	movs	r2, #255	; 0xff
 8002090:	401a      	ands	r2, r3
 8002092:	1dfb      	adds	r3, r7, #7
 8002094:	781b      	ldrb	r3, [r3, #0]
 8002096:	0018      	movs	r0, r3
 8002098:	2303      	movs	r3, #3
 800209a:	4003      	ands	r3, r0
 800209c:	00db      	lsls	r3, r3, #3
 800209e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80020a0:	481f      	ldr	r0, [pc, #124]	; (8002120 <__NVIC_SetPriority+0xd4>)
 80020a2:	1dfb      	adds	r3, r7, #7
 80020a4:	781b      	ldrb	r3, [r3, #0]
 80020a6:	b25b      	sxtb	r3, r3
 80020a8:	089b      	lsrs	r3, r3, #2
 80020aa:	430a      	orrs	r2, r1
 80020ac:	33c0      	adds	r3, #192	; 0xc0
 80020ae:	009b      	lsls	r3, r3, #2
 80020b0:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80020b2:	e031      	b.n	8002118 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80020b4:	4a1b      	ldr	r2, [pc, #108]	; (8002124 <__NVIC_SetPriority+0xd8>)
 80020b6:	1dfb      	adds	r3, r7, #7
 80020b8:	781b      	ldrb	r3, [r3, #0]
 80020ba:	0019      	movs	r1, r3
 80020bc:	230f      	movs	r3, #15
 80020be:	400b      	ands	r3, r1
 80020c0:	3b08      	subs	r3, #8
 80020c2:	089b      	lsrs	r3, r3, #2
 80020c4:	3306      	adds	r3, #6
 80020c6:	009b      	lsls	r3, r3, #2
 80020c8:	18d3      	adds	r3, r2, r3
 80020ca:	3304      	adds	r3, #4
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	1dfa      	adds	r2, r7, #7
 80020d0:	7812      	ldrb	r2, [r2, #0]
 80020d2:	0011      	movs	r1, r2
 80020d4:	2203      	movs	r2, #3
 80020d6:	400a      	ands	r2, r1
 80020d8:	00d2      	lsls	r2, r2, #3
 80020da:	21ff      	movs	r1, #255	; 0xff
 80020dc:	4091      	lsls	r1, r2
 80020de:	000a      	movs	r2, r1
 80020e0:	43d2      	mvns	r2, r2
 80020e2:	401a      	ands	r2, r3
 80020e4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80020e6:	683b      	ldr	r3, [r7, #0]
 80020e8:	019b      	lsls	r3, r3, #6
 80020ea:	22ff      	movs	r2, #255	; 0xff
 80020ec:	401a      	ands	r2, r3
 80020ee:	1dfb      	adds	r3, r7, #7
 80020f0:	781b      	ldrb	r3, [r3, #0]
 80020f2:	0018      	movs	r0, r3
 80020f4:	2303      	movs	r3, #3
 80020f6:	4003      	ands	r3, r0
 80020f8:	00db      	lsls	r3, r3, #3
 80020fa:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80020fc:	4809      	ldr	r0, [pc, #36]	; (8002124 <__NVIC_SetPriority+0xd8>)
 80020fe:	1dfb      	adds	r3, r7, #7
 8002100:	781b      	ldrb	r3, [r3, #0]
 8002102:	001c      	movs	r4, r3
 8002104:	230f      	movs	r3, #15
 8002106:	4023      	ands	r3, r4
 8002108:	3b08      	subs	r3, #8
 800210a:	089b      	lsrs	r3, r3, #2
 800210c:	430a      	orrs	r2, r1
 800210e:	3306      	adds	r3, #6
 8002110:	009b      	lsls	r3, r3, #2
 8002112:	18c3      	adds	r3, r0, r3
 8002114:	3304      	adds	r3, #4
 8002116:	601a      	str	r2, [r3, #0]
}
 8002118:	46c0      	nop			; (mov r8, r8)
 800211a:	46bd      	mov	sp, r7
 800211c:	b003      	add	sp, #12
 800211e:	bd90      	pop	{r4, r7, pc}
 8002120:	e000e100 	.word	0xe000e100
 8002124:	e000ed00 	.word	0xe000ed00

08002128 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002128:	b580      	push	{r7, lr}
 800212a:	b082      	sub	sp, #8
 800212c:	af00      	add	r7, sp, #0
 800212e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	1e5a      	subs	r2, r3, #1
 8002134:	2380      	movs	r3, #128	; 0x80
 8002136:	045b      	lsls	r3, r3, #17
 8002138:	429a      	cmp	r2, r3
 800213a:	d301      	bcc.n	8002140 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 800213c:	2301      	movs	r3, #1
 800213e:	e010      	b.n	8002162 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002140:	4b0a      	ldr	r3, [pc, #40]	; (800216c <SysTick_Config+0x44>)
 8002142:	687a      	ldr	r2, [r7, #4]
 8002144:	3a01      	subs	r2, #1
 8002146:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002148:	2301      	movs	r3, #1
 800214a:	425b      	negs	r3, r3
 800214c:	2103      	movs	r1, #3
 800214e:	0018      	movs	r0, r3
 8002150:	f7ff ff7c 	bl	800204c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002154:	4b05      	ldr	r3, [pc, #20]	; (800216c <SysTick_Config+0x44>)
 8002156:	2200      	movs	r2, #0
 8002158:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800215a:	4b04      	ldr	r3, [pc, #16]	; (800216c <SysTick_Config+0x44>)
 800215c:	2207      	movs	r2, #7
 800215e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002160:	2300      	movs	r3, #0
}
 8002162:	0018      	movs	r0, r3
 8002164:	46bd      	mov	sp, r7
 8002166:	b002      	add	sp, #8
 8002168:	bd80      	pop	{r7, pc}
 800216a:	46c0      	nop			; (mov r8, r8)
 800216c:	e000e010 	.word	0xe000e010

08002170 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002170:	b580      	push	{r7, lr}
 8002172:	b084      	sub	sp, #16
 8002174:	af00      	add	r7, sp, #0
 8002176:	60b9      	str	r1, [r7, #8]
 8002178:	607a      	str	r2, [r7, #4]
 800217a:	210f      	movs	r1, #15
 800217c:	187b      	adds	r3, r7, r1
 800217e:	1c02      	adds	r2, r0, #0
 8002180:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8002182:	68ba      	ldr	r2, [r7, #8]
 8002184:	187b      	adds	r3, r7, r1
 8002186:	781b      	ldrb	r3, [r3, #0]
 8002188:	b25b      	sxtb	r3, r3
 800218a:	0011      	movs	r1, r2
 800218c:	0018      	movs	r0, r3
 800218e:	f7ff ff5d 	bl	800204c <__NVIC_SetPriority>
}
 8002192:	46c0      	nop			; (mov r8, r8)
 8002194:	46bd      	mov	sp, r7
 8002196:	b004      	add	sp, #16
 8002198:	bd80      	pop	{r7, pc}

0800219a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800219a:	b580      	push	{r7, lr}
 800219c:	b082      	sub	sp, #8
 800219e:	af00      	add	r7, sp, #0
 80021a0:	0002      	movs	r2, r0
 80021a2:	1dfb      	adds	r3, r7, #7
 80021a4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80021a6:	1dfb      	adds	r3, r7, #7
 80021a8:	781b      	ldrb	r3, [r3, #0]
 80021aa:	b25b      	sxtb	r3, r3
 80021ac:	0018      	movs	r0, r3
 80021ae:	f7ff ff33 	bl	8002018 <__NVIC_EnableIRQ>
}
 80021b2:	46c0      	nop			; (mov r8, r8)
 80021b4:	46bd      	mov	sp, r7
 80021b6:	b002      	add	sp, #8
 80021b8:	bd80      	pop	{r7, pc}

080021ba <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80021ba:	b580      	push	{r7, lr}
 80021bc:	b082      	sub	sp, #8
 80021be:	af00      	add	r7, sp, #0
 80021c0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	0018      	movs	r0, r3
 80021c6:	f7ff ffaf 	bl	8002128 <SysTick_Config>
 80021ca:	0003      	movs	r3, r0
}
 80021cc:	0018      	movs	r0, r3
 80021ce:	46bd      	mov	sp, r7
 80021d0:	b002      	add	sp, #8
 80021d2:	bd80      	pop	{r7, pc}

080021d4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 80021d4:	b580      	push	{r7, lr}
 80021d6:	b084      	sub	sp, #16
 80021d8:	af00      	add	r7, sp, #0
 80021da:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80021dc:	2300      	movs	r3, #0
 80021de:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d101      	bne.n	80021ea <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80021e6:	2301      	movs	r3, #1
 80021e8:	e036      	b.n	8002258 <HAL_DMA_Init+0x84>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	2221      	movs	r2, #33	; 0x21
 80021ee:	2102      	movs	r1, #2
 80021f0:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	4a18      	ldr	r2, [pc, #96]	; (8002260 <HAL_DMA_Init+0x8c>)
 80021fe:	4013      	ands	r3, r2
 8002200:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 800220a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	68db      	ldr	r3, [r3, #12]
 8002210:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002216:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	695b      	ldr	r3, [r3, #20]
 800221c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002222:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	69db      	ldr	r3, [r3, #28]
 8002228:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800222a:	68fa      	ldr	r2, [r7, #12]
 800222c:	4313      	orrs	r3, r2
 800222e:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	68fa      	ldr	r2, [r7, #12]
 8002236:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	0018      	movs	r0, r3
 800223c:	f000 f932 	bl	80024a4 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	2200      	movs	r2, #0
 8002244:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	2221      	movs	r2, #33	; 0x21
 800224a:	2101      	movs	r1, #1
 800224c:	5499      	strb	r1, [r3, r2]
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	2220      	movs	r2, #32
 8002252:	2100      	movs	r1, #0
 8002254:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 8002256:	2300      	movs	r3, #0
}  
 8002258:	0018      	movs	r0, r3
 800225a:	46bd      	mov	sp, r7
 800225c:	b004      	add	sp, #16
 800225e:	bd80      	pop	{r7, pc}
 8002260:	ffffc00f 	.word	0xffffc00f

08002264 <HAL_DMA_Abort>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	b082      	sub	sp, #8
 8002268:	af00      	add	r7, sp, #0
 800226a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	2221      	movs	r2, #33	; 0x21
 8002270:	5c9b      	ldrb	r3, [r3, r2]
 8002272:	b2db      	uxtb	r3, r3
 8002274:	2b02      	cmp	r3, #2
 8002276:	d008      	beq.n	800228a <HAL_DMA_Abort+0x26>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	2204      	movs	r2, #4
 800227c:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	2220      	movs	r2, #32
 8002282:	2100      	movs	r1, #0
 8002284:	5499      	strb	r1, [r3, r2]
    
    return HAL_ERROR;
 8002286:	2301      	movs	r3, #1
 8002288:	e020      	b.n	80022cc <HAL_DMA_Abort+0x68>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	681a      	ldr	r2, [r3, #0]
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	210e      	movs	r1, #14
 8002296:	438a      	bics	r2, r1
 8002298:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	681a      	ldr	r2, [r3, #0]
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	2101      	movs	r1, #1
 80022a6:	438a      	bics	r2, r1
 80022a8:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022b2:	2101      	movs	r1, #1
 80022b4:	4091      	lsls	r1, r2
 80022b6:	000a      	movs	r2, r1
 80022b8:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	2221      	movs	r2, #33	; 0x21
 80022be:	2101      	movs	r1, #1
 80022c0:	5499      	strb	r1, [r3, r2]
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	2220      	movs	r2, #32
 80022c6:	2100      	movs	r1, #0
 80022c8:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 80022ca:	2300      	movs	r3, #0
}
 80022cc:	0018      	movs	r0, r3
 80022ce:	46bd      	mov	sp, r7
 80022d0:	b002      	add	sp, #8
 80022d2:	bd80      	pop	{r7, pc}

080022d4 <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80022d4:	b580      	push	{r7, lr}
 80022d6:	b084      	sub	sp, #16
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80022dc:	210f      	movs	r1, #15
 80022de:	187b      	adds	r3, r7, r1
 80022e0:	2200      	movs	r2, #0
 80022e2:	701a      	strb	r2, [r3, #0]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	2221      	movs	r2, #33	; 0x21
 80022e8:	5c9b      	ldrb	r3, [r3, r2]
 80022ea:	b2db      	uxtb	r3, r3
 80022ec:	2b02      	cmp	r3, #2
 80022ee:	d006      	beq.n	80022fe <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	2204      	movs	r2, #4
 80022f4:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80022f6:	187b      	adds	r3, r7, r1
 80022f8:	2201      	movs	r2, #1
 80022fa:	701a      	strb	r2, [r3, #0]
 80022fc:	e028      	b.n	8002350 <HAL_DMA_Abort_IT+0x7c>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	681a      	ldr	r2, [r3, #0]
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	210e      	movs	r1, #14
 800230a:	438a      	bics	r2, r1
 800230c:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	681a      	ldr	r2, [r3, #0]
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	2101      	movs	r1, #1
 800231a:	438a      	bics	r2, r1
 800231c:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002326:	2101      	movs	r1, #1
 8002328:	4091      	lsls	r1, r2
 800232a:	000a      	movs	r2, r1
 800232c:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	2221      	movs	r2, #33	; 0x21
 8002332:	2101      	movs	r1, #1
 8002334:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	2220      	movs	r2, #32
 800233a:	2100      	movs	r1, #0
 800233c:	5499      	strb	r1, [r3, r2]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002342:	2b00      	cmp	r3, #0
 8002344:	d004      	beq.n	8002350 <HAL_DMA_Abort_IT+0x7c>
    {
      hdma->XferAbortCallback(hdma);
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800234a:	687a      	ldr	r2, [r7, #4]
 800234c:	0010      	movs	r0, r2
 800234e:	4798      	blx	r3
    } 
  }
  return status;
 8002350:	230f      	movs	r3, #15
 8002352:	18fb      	adds	r3, r7, r3
 8002354:	781b      	ldrb	r3, [r3, #0]
}
 8002356:	0018      	movs	r0, r3
 8002358:	46bd      	mov	sp, r7
 800235a:	b004      	add	sp, #16
 800235c:	bd80      	pop	{r7, pc}

0800235e <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800235e:	b580      	push	{r7, lr}
 8002360:	b084      	sub	sp, #16
 8002362:	af00      	add	r7, sp, #0
 8002364:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800237a:	2204      	movs	r2, #4
 800237c:	409a      	lsls	r2, r3
 800237e:	0013      	movs	r3, r2
 8002380:	68fa      	ldr	r2, [r7, #12]
 8002382:	4013      	ands	r3, r2
 8002384:	d024      	beq.n	80023d0 <HAL_DMA_IRQHandler+0x72>
 8002386:	68bb      	ldr	r3, [r7, #8]
 8002388:	2204      	movs	r2, #4
 800238a:	4013      	ands	r3, r2
 800238c:	d020      	beq.n	80023d0 <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	2220      	movs	r2, #32
 8002396:	4013      	ands	r3, r2
 8002398:	d107      	bne.n	80023aa <HAL_DMA_IRQHandler+0x4c>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	681a      	ldr	r2, [r3, #0]
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	2104      	movs	r1, #4
 80023a6:	438a      	bics	r2, r1
 80023a8:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023b2:	2104      	movs	r1, #4
 80023b4:	4091      	lsls	r1, r2
 80023b6:	000a      	movs	r2, r1
 80023b8:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d100      	bne.n	80023c4 <HAL_DMA_IRQHandler+0x66>
 80023c2:	e06a      	b.n	800249a <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023c8:	687a      	ldr	r2, [r7, #4]
 80023ca:	0010      	movs	r0, r2
 80023cc:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 80023ce:	e064      	b.n	800249a <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023d4:	2202      	movs	r2, #2
 80023d6:	409a      	lsls	r2, r3
 80023d8:	0013      	movs	r3, r2
 80023da:	68fa      	ldr	r2, [r7, #12]
 80023dc:	4013      	ands	r3, r2
 80023de:	d02b      	beq.n	8002438 <HAL_DMA_IRQHandler+0xda>
 80023e0:	68bb      	ldr	r3, [r7, #8]
 80023e2:	2202      	movs	r2, #2
 80023e4:	4013      	ands	r3, r2
 80023e6:	d027      	beq.n	8002438 <HAL_DMA_IRQHandler+0xda>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	2220      	movs	r2, #32
 80023f0:	4013      	ands	r3, r2
 80023f2:	d10b      	bne.n	800240c <HAL_DMA_IRQHandler+0xae>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	681a      	ldr	r2, [r3, #0]
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	210a      	movs	r1, #10
 8002400:	438a      	bics	r2, r1
 8002402:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	2221      	movs	r2, #33	; 0x21
 8002408:	2101      	movs	r1, #1
 800240a:	5499      	strb	r1, [r3, r2]
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002414:	2102      	movs	r1, #2
 8002416:	4091      	lsls	r1, r2
 8002418:	000a      	movs	r2, r1
 800241a:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	2220      	movs	r2, #32
 8002420:	2100      	movs	r1, #0
 8002422:	5499      	strb	r1, [r3, r2]
  	
  	if(hdma->XferCpltCallback != NULL)
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002428:	2b00      	cmp	r3, #0
 800242a:	d036      	beq.n	800249a <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002430:	687a      	ldr	r2, [r7, #4]
 8002432:	0010      	movs	r0, r2
 8002434:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 8002436:	e030      	b.n	800249a <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800243c:	2208      	movs	r2, #8
 800243e:	409a      	lsls	r2, r3
 8002440:	0013      	movs	r3, r2
 8002442:	68fa      	ldr	r2, [r7, #12]
 8002444:	4013      	ands	r3, r2
 8002446:	d028      	beq.n	800249a <HAL_DMA_IRQHandler+0x13c>
 8002448:	68bb      	ldr	r3, [r7, #8]
 800244a:	2208      	movs	r2, #8
 800244c:	4013      	ands	r3, r2
 800244e:	d024      	beq.n	800249a <HAL_DMA_IRQHandler+0x13c>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	681a      	ldr	r2, [r3, #0]
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	210e      	movs	r1, #14
 800245c:	438a      	bics	r2, r1
 800245e:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002468:	2101      	movs	r1, #1
 800246a:	4091      	lsls	r1, r2
 800246c:	000a      	movs	r2, r1
 800246e:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	2201      	movs	r2, #1
 8002474:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	2221      	movs	r2, #33	; 0x21
 800247a:	2101      	movs	r1, #1
 800247c:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	2220      	movs	r2, #32
 8002482:	2100      	movs	r1, #0
 8002484:	5499      	strb	r1, [r3, r2]
    
    if(hdma->XferErrorCallback != NULL)
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800248a:	2b00      	cmp	r3, #0
 800248c:	d005      	beq.n	800249a <HAL_DMA_IRQHandler+0x13c>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002492:	687a      	ldr	r2, [r7, #4]
 8002494:	0010      	movs	r0, r2
 8002496:	4798      	blx	r3
    }
   }
}  
 8002498:	e7ff      	b.n	800249a <HAL_DMA_IRQHandler+0x13c>
 800249a:	46c0      	nop			; (mov r8, r8)
 800249c:	46bd      	mov	sp, r7
 800249e:	b004      	add	sp, #16
 80024a0:	bd80      	pop	{r7, pc}
	...

080024a4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80024a4:	b580      	push	{r7, lr}
 80024a6:	b082      	sub	sp, #8
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	4a08      	ldr	r2, [pc, #32]	; (80024d4 <DMA_CalcBaseAndBitshift+0x30>)
 80024b2:	4694      	mov	ip, r2
 80024b4:	4463      	add	r3, ip
 80024b6:	2114      	movs	r1, #20
 80024b8:	0018      	movs	r0, r3
 80024ba:	f7fd fe37 	bl	800012c <__udivsi3>
 80024be:	0003      	movs	r3, r0
 80024c0:	009a      	lsls	r2, r3, #2
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	4a03      	ldr	r2, [pc, #12]	; (80024d8 <DMA_CalcBaseAndBitshift+0x34>)
 80024ca:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 80024cc:	46c0      	nop			; (mov r8, r8)
 80024ce:	46bd      	mov	sp, r7
 80024d0:	b002      	add	sp, #8
 80024d2:	bd80      	pop	{r7, pc}
 80024d4:	bffdfff8 	.word	0xbffdfff8
 80024d8:	40020000 	.word	0x40020000

080024dc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80024dc:	b580      	push	{r7, lr}
 80024de:	b086      	sub	sp, #24
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	6078      	str	r0, [r7, #4]
 80024e4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80024e6:	2300      	movs	r3, #0
 80024e8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80024ea:	e155      	b.n	8002798 <HAL_GPIO_Init+0x2bc>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80024ec:	683b      	ldr	r3, [r7, #0]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	2101      	movs	r1, #1
 80024f2:	697a      	ldr	r2, [r7, #20]
 80024f4:	4091      	lsls	r1, r2
 80024f6:	000a      	movs	r2, r1
 80024f8:	4013      	ands	r3, r2
 80024fa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d100      	bne.n	8002504 <HAL_GPIO_Init+0x28>
 8002502:	e146      	b.n	8002792 <HAL_GPIO_Init+0x2b6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002504:	683b      	ldr	r3, [r7, #0]
 8002506:	685b      	ldr	r3, [r3, #4]
 8002508:	2203      	movs	r2, #3
 800250a:	4013      	ands	r3, r2
 800250c:	2b01      	cmp	r3, #1
 800250e:	d005      	beq.n	800251c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002510:	683b      	ldr	r3, [r7, #0]
 8002512:	685b      	ldr	r3, [r3, #4]
 8002514:	2203      	movs	r2, #3
 8002516:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002518:	2b02      	cmp	r3, #2
 800251a:	d130      	bne.n	800257e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	689b      	ldr	r3, [r3, #8]
 8002520:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8002522:	697b      	ldr	r3, [r7, #20]
 8002524:	005b      	lsls	r3, r3, #1
 8002526:	2203      	movs	r2, #3
 8002528:	409a      	lsls	r2, r3
 800252a:	0013      	movs	r3, r2
 800252c:	43da      	mvns	r2, r3
 800252e:	693b      	ldr	r3, [r7, #16]
 8002530:	4013      	ands	r3, r2
 8002532:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002534:	683b      	ldr	r3, [r7, #0]
 8002536:	68da      	ldr	r2, [r3, #12]
 8002538:	697b      	ldr	r3, [r7, #20]
 800253a:	005b      	lsls	r3, r3, #1
 800253c:	409a      	lsls	r2, r3
 800253e:	0013      	movs	r3, r2
 8002540:	693a      	ldr	r2, [r7, #16]
 8002542:	4313      	orrs	r3, r2
 8002544:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	693a      	ldr	r2, [r7, #16]
 800254a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	685b      	ldr	r3, [r3, #4]
 8002550:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002552:	2201      	movs	r2, #1
 8002554:	697b      	ldr	r3, [r7, #20]
 8002556:	409a      	lsls	r2, r3
 8002558:	0013      	movs	r3, r2
 800255a:	43da      	mvns	r2, r3
 800255c:	693b      	ldr	r3, [r7, #16]
 800255e:	4013      	ands	r3, r2
 8002560:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002562:	683b      	ldr	r3, [r7, #0]
 8002564:	685b      	ldr	r3, [r3, #4]
 8002566:	091b      	lsrs	r3, r3, #4
 8002568:	2201      	movs	r2, #1
 800256a:	401a      	ands	r2, r3
 800256c:	697b      	ldr	r3, [r7, #20]
 800256e:	409a      	lsls	r2, r3
 8002570:	0013      	movs	r3, r2
 8002572:	693a      	ldr	r2, [r7, #16]
 8002574:	4313      	orrs	r3, r2
 8002576:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	693a      	ldr	r2, [r7, #16]
 800257c:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800257e:	683b      	ldr	r3, [r7, #0]
 8002580:	685b      	ldr	r3, [r3, #4]
 8002582:	2203      	movs	r2, #3
 8002584:	4013      	ands	r3, r2
 8002586:	2b03      	cmp	r3, #3
 8002588:	d017      	beq.n	80025ba <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	68db      	ldr	r3, [r3, #12]
 800258e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002590:	697b      	ldr	r3, [r7, #20]
 8002592:	005b      	lsls	r3, r3, #1
 8002594:	2203      	movs	r2, #3
 8002596:	409a      	lsls	r2, r3
 8002598:	0013      	movs	r3, r2
 800259a:	43da      	mvns	r2, r3
 800259c:	693b      	ldr	r3, [r7, #16]
 800259e:	4013      	ands	r3, r2
 80025a0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80025a2:	683b      	ldr	r3, [r7, #0]
 80025a4:	689a      	ldr	r2, [r3, #8]
 80025a6:	697b      	ldr	r3, [r7, #20]
 80025a8:	005b      	lsls	r3, r3, #1
 80025aa:	409a      	lsls	r2, r3
 80025ac:	0013      	movs	r3, r2
 80025ae:	693a      	ldr	r2, [r7, #16]
 80025b0:	4313      	orrs	r3, r2
 80025b2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	693a      	ldr	r2, [r7, #16]
 80025b8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80025ba:	683b      	ldr	r3, [r7, #0]
 80025bc:	685b      	ldr	r3, [r3, #4]
 80025be:	2203      	movs	r2, #3
 80025c0:	4013      	ands	r3, r2
 80025c2:	2b02      	cmp	r3, #2
 80025c4:	d123      	bne.n	800260e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80025c6:	697b      	ldr	r3, [r7, #20]
 80025c8:	08da      	lsrs	r2, r3, #3
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	3208      	adds	r2, #8
 80025ce:	0092      	lsls	r2, r2, #2
 80025d0:	58d3      	ldr	r3, [r2, r3]
 80025d2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80025d4:	697b      	ldr	r3, [r7, #20]
 80025d6:	2207      	movs	r2, #7
 80025d8:	4013      	ands	r3, r2
 80025da:	009b      	lsls	r3, r3, #2
 80025dc:	220f      	movs	r2, #15
 80025de:	409a      	lsls	r2, r3
 80025e0:	0013      	movs	r3, r2
 80025e2:	43da      	mvns	r2, r3
 80025e4:	693b      	ldr	r3, [r7, #16]
 80025e6:	4013      	ands	r3, r2
 80025e8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80025ea:	683b      	ldr	r3, [r7, #0]
 80025ec:	691a      	ldr	r2, [r3, #16]
 80025ee:	697b      	ldr	r3, [r7, #20]
 80025f0:	2107      	movs	r1, #7
 80025f2:	400b      	ands	r3, r1
 80025f4:	009b      	lsls	r3, r3, #2
 80025f6:	409a      	lsls	r2, r3
 80025f8:	0013      	movs	r3, r2
 80025fa:	693a      	ldr	r2, [r7, #16]
 80025fc:	4313      	orrs	r3, r2
 80025fe:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002600:	697b      	ldr	r3, [r7, #20]
 8002602:	08da      	lsrs	r2, r3, #3
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	3208      	adds	r2, #8
 8002608:	0092      	lsls	r2, r2, #2
 800260a:	6939      	ldr	r1, [r7, #16]
 800260c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002614:	697b      	ldr	r3, [r7, #20]
 8002616:	005b      	lsls	r3, r3, #1
 8002618:	2203      	movs	r2, #3
 800261a:	409a      	lsls	r2, r3
 800261c:	0013      	movs	r3, r2
 800261e:	43da      	mvns	r2, r3
 8002620:	693b      	ldr	r3, [r7, #16]
 8002622:	4013      	ands	r3, r2
 8002624:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002626:	683b      	ldr	r3, [r7, #0]
 8002628:	685b      	ldr	r3, [r3, #4]
 800262a:	2203      	movs	r2, #3
 800262c:	401a      	ands	r2, r3
 800262e:	697b      	ldr	r3, [r7, #20]
 8002630:	005b      	lsls	r3, r3, #1
 8002632:	409a      	lsls	r2, r3
 8002634:	0013      	movs	r3, r2
 8002636:	693a      	ldr	r2, [r7, #16]
 8002638:	4313      	orrs	r3, r2
 800263a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	693a      	ldr	r2, [r7, #16]
 8002640:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002642:	683b      	ldr	r3, [r7, #0]
 8002644:	685a      	ldr	r2, [r3, #4]
 8002646:	23c0      	movs	r3, #192	; 0xc0
 8002648:	029b      	lsls	r3, r3, #10
 800264a:	4013      	ands	r3, r2
 800264c:	d100      	bne.n	8002650 <HAL_GPIO_Init+0x174>
 800264e:	e0a0      	b.n	8002792 <HAL_GPIO_Init+0x2b6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002650:	4b57      	ldr	r3, [pc, #348]	; (80027b0 <HAL_GPIO_Init+0x2d4>)
 8002652:	699a      	ldr	r2, [r3, #24]
 8002654:	4b56      	ldr	r3, [pc, #344]	; (80027b0 <HAL_GPIO_Init+0x2d4>)
 8002656:	2101      	movs	r1, #1
 8002658:	430a      	orrs	r2, r1
 800265a:	619a      	str	r2, [r3, #24]
 800265c:	4b54      	ldr	r3, [pc, #336]	; (80027b0 <HAL_GPIO_Init+0x2d4>)
 800265e:	699b      	ldr	r3, [r3, #24]
 8002660:	2201      	movs	r2, #1
 8002662:	4013      	ands	r3, r2
 8002664:	60bb      	str	r3, [r7, #8]
 8002666:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002668:	4a52      	ldr	r2, [pc, #328]	; (80027b4 <HAL_GPIO_Init+0x2d8>)
 800266a:	697b      	ldr	r3, [r7, #20]
 800266c:	089b      	lsrs	r3, r3, #2
 800266e:	3302      	adds	r3, #2
 8002670:	009b      	lsls	r3, r3, #2
 8002672:	589b      	ldr	r3, [r3, r2]
 8002674:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002676:	697b      	ldr	r3, [r7, #20]
 8002678:	2203      	movs	r2, #3
 800267a:	4013      	ands	r3, r2
 800267c:	009b      	lsls	r3, r3, #2
 800267e:	220f      	movs	r2, #15
 8002680:	409a      	lsls	r2, r3
 8002682:	0013      	movs	r3, r2
 8002684:	43da      	mvns	r2, r3
 8002686:	693b      	ldr	r3, [r7, #16]
 8002688:	4013      	ands	r3, r2
 800268a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800268c:	687a      	ldr	r2, [r7, #4]
 800268e:	2390      	movs	r3, #144	; 0x90
 8002690:	05db      	lsls	r3, r3, #23
 8002692:	429a      	cmp	r2, r3
 8002694:	d019      	beq.n	80026ca <HAL_GPIO_Init+0x1ee>
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	4a47      	ldr	r2, [pc, #284]	; (80027b8 <HAL_GPIO_Init+0x2dc>)
 800269a:	4293      	cmp	r3, r2
 800269c:	d013      	beq.n	80026c6 <HAL_GPIO_Init+0x1ea>
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	4a46      	ldr	r2, [pc, #280]	; (80027bc <HAL_GPIO_Init+0x2e0>)
 80026a2:	4293      	cmp	r3, r2
 80026a4:	d00d      	beq.n	80026c2 <HAL_GPIO_Init+0x1e6>
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	4a45      	ldr	r2, [pc, #276]	; (80027c0 <HAL_GPIO_Init+0x2e4>)
 80026aa:	4293      	cmp	r3, r2
 80026ac:	d007      	beq.n	80026be <HAL_GPIO_Init+0x1e2>
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	4a44      	ldr	r2, [pc, #272]	; (80027c4 <HAL_GPIO_Init+0x2e8>)
 80026b2:	4293      	cmp	r3, r2
 80026b4:	d101      	bne.n	80026ba <HAL_GPIO_Init+0x1de>
 80026b6:	2304      	movs	r3, #4
 80026b8:	e008      	b.n	80026cc <HAL_GPIO_Init+0x1f0>
 80026ba:	2305      	movs	r3, #5
 80026bc:	e006      	b.n	80026cc <HAL_GPIO_Init+0x1f0>
 80026be:	2303      	movs	r3, #3
 80026c0:	e004      	b.n	80026cc <HAL_GPIO_Init+0x1f0>
 80026c2:	2302      	movs	r3, #2
 80026c4:	e002      	b.n	80026cc <HAL_GPIO_Init+0x1f0>
 80026c6:	2301      	movs	r3, #1
 80026c8:	e000      	b.n	80026cc <HAL_GPIO_Init+0x1f0>
 80026ca:	2300      	movs	r3, #0
 80026cc:	697a      	ldr	r2, [r7, #20]
 80026ce:	2103      	movs	r1, #3
 80026d0:	400a      	ands	r2, r1
 80026d2:	0092      	lsls	r2, r2, #2
 80026d4:	4093      	lsls	r3, r2
 80026d6:	693a      	ldr	r2, [r7, #16]
 80026d8:	4313      	orrs	r3, r2
 80026da:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80026dc:	4935      	ldr	r1, [pc, #212]	; (80027b4 <HAL_GPIO_Init+0x2d8>)
 80026de:	697b      	ldr	r3, [r7, #20]
 80026e0:	089b      	lsrs	r3, r3, #2
 80026e2:	3302      	adds	r3, #2
 80026e4:	009b      	lsls	r3, r3, #2
 80026e6:	693a      	ldr	r2, [r7, #16]
 80026e8:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80026ea:	4b37      	ldr	r3, [pc, #220]	; (80027c8 <HAL_GPIO_Init+0x2ec>)
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	43da      	mvns	r2, r3
 80026f4:	693b      	ldr	r3, [r7, #16]
 80026f6:	4013      	ands	r3, r2
 80026f8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80026fa:	683b      	ldr	r3, [r7, #0]
 80026fc:	685a      	ldr	r2, [r3, #4]
 80026fe:	2380      	movs	r3, #128	; 0x80
 8002700:	025b      	lsls	r3, r3, #9
 8002702:	4013      	ands	r3, r2
 8002704:	d003      	beq.n	800270e <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 8002706:	693a      	ldr	r2, [r7, #16]
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	4313      	orrs	r3, r2
 800270c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800270e:	4b2e      	ldr	r3, [pc, #184]	; (80027c8 <HAL_GPIO_Init+0x2ec>)
 8002710:	693a      	ldr	r2, [r7, #16]
 8002712:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8002714:	4b2c      	ldr	r3, [pc, #176]	; (80027c8 <HAL_GPIO_Init+0x2ec>)
 8002716:	685b      	ldr	r3, [r3, #4]
 8002718:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	43da      	mvns	r2, r3
 800271e:	693b      	ldr	r3, [r7, #16]
 8002720:	4013      	ands	r3, r2
 8002722:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002724:	683b      	ldr	r3, [r7, #0]
 8002726:	685a      	ldr	r2, [r3, #4]
 8002728:	2380      	movs	r3, #128	; 0x80
 800272a:	029b      	lsls	r3, r3, #10
 800272c:	4013      	ands	r3, r2
 800272e:	d003      	beq.n	8002738 <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 8002730:	693a      	ldr	r2, [r7, #16]
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	4313      	orrs	r3, r2
 8002736:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002738:	4b23      	ldr	r3, [pc, #140]	; (80027c8 <HAL_GPIO_Init+0x2ec>)
 800273a:	693a      	ldr	r2, [r7, #16]
 800273c:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800273e:	4b22      	ldr	r3, [pc, #136]	; (80027c8 <HAL_GPIO_Init+0x2ec>)
 8002740:	689b      	ldr	r3, [r3, #8]
 8002742:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	43da      	mvns	r2, r3
 8002748:	693b      	ldr	r3, [r7, #16]
 800274a:	4013      	ands	r3, r2
 800274c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800274e:	683b      	ldr	r3, [r7, #0]
 8002750:	685a      	ldr	r2, [r3, #4]
 8002752:	2380      	movs	r3, #128	; 0x80
 8002754:	035b      	lsls	r3, r3, #13
 8002756:	4013      	ands	r3, r2
 8002758:	d003      	beq.n	8002762 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800275a:	693a      	ldr	r2, [r7, #16]
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	4313      	orrs	r3, r2
 8002760:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002762:	4b19      	ldr	r3, [pc, #100]	; (80027c8 <HAL_GPIO_Init+0x2ec>)
 8002764:	693a      	ldr	r2, [r7, #16]
 8002766:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8002768:	4b17      	ldr	r3, [pc, #92]	; (80027c8 <HAL_GPIO_Init+0x2ec>)
 800276a:	68db      	ldr	r3, [r3, #12]
 800276c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	43da      	mvns	r2, r3
 8002772:	693b      	ldr	r3, [r7, #16]
 8002774:	4013      	ands	r3, r2
 8002776:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002778:	683b      	ldr	r3, [r7, #0]
 800277a:	685a      	ldr	r2, [r3, #4]
 800277c:	2380      	movs	r3, #128	; 0x80
 800277e:	039b      	lsls	r3, r3, #14
 8002780:	4013      	ands	r3, r2
 8002782:	d003      	beq.n	800278c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8002784:	693a      	ldr	r2, [r7, #16]
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	4313      	orrs	r3, r2
 800278a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800278c:	4b0e      	ldr	r3, [pc, #56]	; (80027c8 <HAL_GPIO_Init+0x2ec>)
 800278e:	693a      	ldr	r2, [r7, #16]
 8002790:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 8002792:	697b      	ldr	r3, [r7, #20]
 8002794:	3301      	adds	r3, #1
 8002796:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002798:	683b      	ldr	r3, [r7, #0]
 800279a:	681a      	ldr	r2, [r3, #0]
 800279c:	697b      	ldr	r3, [r7, #20]
 800279e:	40da      	lsrs	r2, r3
 80027a0:	1e13      	subs	r3, r2, #0
 80027a2:	d000      	beq.n	80027a6 <HAL_GPIO_Init+0x2ca>
 80027a4:	e6a2      	b.n	80024ec <HAL_GPIO_Init+0x10>
  } 
}
 80027a6:	46c0      	nop			; (mov r8, r8)
 80027a8:	46c0      	nop			; (mov r8, r8)
 80027aa:	46bd      	mov	sp, r7
 80027ac:	b006      	add	sp, #24
 80027ae:	bd80      	pop	{r7, pc}
 80027b0:	40021000 	.word	0x40021000
 80027b4:	40010000 	.word	0x40010000
 80027b8:	48000400 	.word	0x48000400
 80027bc:	48000800 	.word	0x48000800
 80027c0:	48000c00 	.word	0x48000c00
 80027c4:	48001000 	.word	0x48001000
 80027c8:	40010400 	.word	0x40010400

080027cc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80027cc:	b580      	push	{r7, lr}
 80027ce:	b084      	sub	sp, #16
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	6078      	str	r0, [r7, #4]
 80027d4:	000a      	movs	r2, r1
 80027d6:	1cbb      	adds	r3, r7, #2
 80027d8:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	691b      	ldr	r3, [r3, #16]
 80027de:	1cba      	adds	r2, r7, #2
 80027e0:	8812      	ldrh	r2, [r2, #0]
 80027e2:	4013      	ands	r3, r2
 80027e4:	d004      	beq.n	80027f0 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 80027e6:	230f      	movs	r3, #15
 80027e8:	18fb      	adds	r3, r7, r3
 80027ea:	2201      	movs	r2, #1
 80027ec:	701a      	strb	r2, [r3, #0]
 80027ee:	e003      	b.n	80027f8 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80027f0:	230f      	movs	r3, #15
 80027f2:	18fb      	adds	r3, r7, r3
 80027f4:	2200      	movs	r2, #0
 80027f6:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 80027f8:	230f      	movs	r3, #15
 80027fa:	18fb      	adds	r3, r7, r3
 80027fc:	781b      	ldrb	r3, [r3, #0]
  }
 80027fe:	0018      	movs	r0, r3
 8002800:	46bd      	mov	sp, r7
 8002802:	b004      	add	sp, #16
 8002804:	bd80      	pop	{r7, pc}

08002806 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002806:	b580      	push	{r7, lr}
 8002808:	b082      	sub	sp, #8
 800280a:	af00      	add	r7, sp, #0
 800280c:	6078      	str	r0, [r7, #4]
 800280e:	0008      	movs	r0, r1
 8002810:	0011      	movs	r1, r2
 8002812:	1cbb      	adds	r3, r7, #2
 8002814:	1c02      	adds	r2, r0, #0
 8002816:	801a      	strh	r2, [r3, #0]
 8002818:	1c7b      	adds	r3, r7, #1
 800281a:	1c0a      	adds	r2, r1, #0
 800281c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800281e:	1c7b      	adds	r3, r7, #1
 8002820:	781b      	ldrb	r3, [r3, #0]
 8002822:	2b00      	cmp	r3, #0
 8002824:	d004      	beq.n	8002830 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002826:	1cbb      	adds	r3, r7, #2
 8002828:	881a      	ldrh	r2, [r3, #0]
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800282e:	e003      	b.n	8002838 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002830:	1cbb      	adds	r3, r7, #2
 8002832:	881a      	ldrh	r2, [r3, #0]
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002838:	46c0      	nop			; (mov r8, r8)
 800283a:	46bd      	mov	sp, r7
 800283c:	b002      	add	sp, #8
 800283e:	bd80      	pop	{r7, pc}

08002840 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F0 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002840:	b580      	push	{r7, lr}
 8002842:	b084      	sub	sp, #16
 8002844:	af00      	add	r7, sp, #0
 8002846:	6078      	str	r0, [r7, #4]
 8002848:	000a      	movs	r2, r1
 800284a:	1cbb      	adds	r3, r7, #2
 800284c:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	695b      	ldr	r3, [r3, #20]
 8002852:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002854:	1cbb      	adds	r3, r7, #2
 8002856:	881b      	ldrh	r3, [r3, #0]
 8002858:	68fa      	ldr	r2, [r7, #12]
 800285a:	4013      	ands	r3, r2
 800285c:	041a      	lsls	r2, r3, #16
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	43db      	mvns	r3, r3
 8002862:	1cb9      	adds	r1, r7, #2
 8002864:	8809      	ldrh	r1, [r1, #0]
 8002866:	400b      	ands	r3, r1
 8002868:	431a      	orrs	r2, r3
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	619a      	str	r2, [r3, #24]
}
 800286e:	46c0      	nop			; (mov r8, r8)
 8002870:	46bd      	mov	sp, r7
 8002872:	b004      	add	sp, #16
 8002874:	bd80      	pop	{r7, pc}
	...

08002878 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002878:	b580      	push	{r7, lr}
 800287a:	b082      	sub	sp, #8
 800287c:	af00      	add	r7, sp, #0
 800287e:	0002      	movs	r2, r0
 8002880:	1dbb      	adds	r3, r7, #6
 8002882:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002884:	4b09      	ldr	r3, [pc, #36]	; (80028ac <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8002886:	695b      	ldr	r3, [r3, #20]
 8002888:	1dba      	adds	r2, r7, #6
 800288a:	8812      	ldrh	r2, [r2, #0]
 800288c:	4013      	ands	r3, r2
 800288e:	d008      	beq.n	80028a2 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002890:	4b06      	ldr	r3, [pc, #24]	; (80028ac <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8002892:	1dba      	adds	r2, r7, #6
 8002894:	8812      	ldrh	r2, [r2, #0]
 8002896:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002898:	1dbb      	adds	r3, r7, #6
 800289a:	881b      	ldrh	r3, [r3, #0]
 800289c:	0018      	movs	r0, r3
 800289e:	f7fd fe2d 	bl	80004fc <HAL_GPIO_EXTI_Callback>
  }
}
 80028a2:	46c0      	nop			; (mov r8, r8)
 80028a4:	46bd      	mov	sp, r7
 80028a6:	b002      	add	sp, #8
 80028a8:	bd80      	pop	{r7, pc}
 80028aa:	46c0      	nop			; (mov r8, r8)
 80028ac:	40010400 	.word	0x40010400

080028b0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80028b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80028b2:	b08b      	sub	sp, #44	; 0x2c
 80028b4:	af06      	add	r7, sp, #24
 80028b6:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d101      	bne.n	80028c2 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80028be:	2301      	movs	r3, #1
 80028c0:	e0ff      	b.n	8002ac2 <HAL_PCD_Init+0x212>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	4a81      	ldr	r2, [pc, #516]	; (8002acc <HAL_PCD_Init+0x21c>)
 80028c6:	5c9b      	ldrb	r3, [r3, r2]
 80028c8:	b2db      	uxtb	r3, r3
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d108      	bne.n	80028e0 <HAL_PCD_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80028ce:	687a      	ldr	r2, [r7, #4]
 80028d0:	23aa      	movs	r3, #170	; 0xaa
 80028d2:	009b      	lsls	r3, r3, #2
 80028d4:	2100      	movs	r1, #0
 80028d6:	54d1      	strb	r1, [r2, r3]

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	0018      	movs	r0, r3
 80028dc:	f008 f8d0 	bl	800aa80 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	4a7a      	ldr	r2, [pc, #488]	; (8002acc <HAL_PCD_Init+0x21c>)
 80028e4:	2103      	movs	r1, #3
 80028e6:	5499      	strb	r1, [r3, r2]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	0018      	movs	r0, r3
 80028ee:	f004 f96f 	bl	8006bd0 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80028f2:	230f      	movs	r3, #15
 80028f4:	18fb      	adds	r3, r7, r3
 80028f6:	2200      	movs	r2, #0
 80028f8:	701a      	strb	r2, [r3, #0]
 80028fa:	e058      	b.n	80029ae <HAL_PCD_Init+0xfe>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80028fc:	200f      	movs	r0, #15
 80028fe:	183b      	adds	r3, r7, r0
 8002900:	781b      	ldrb	r3, [r3, #0]
 8002902:	6879      	ldr	r1, [r7, #4]
 8002904:	1c5a      	adds	r2, r3, #1
 8002906:	0013      	movs	r3, r2
 8002908:	009b      	lsls	r3, r3, #2
 800290a:	189b      	adds	r3, r3, r2
 800290c:	00db      	lsls	r3, r3, #3
 800290e:	18cb      	adds	r3, r1, r3
 8002910:	3301      	adds	r3, #1
 8002912:	2201      	movs	r2, #1
 8002914:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002916:	183b      	adds	r3, r7, r0
 8002918:	781b      	ldrb	r3, [r3, #0]
 800291a:	6879      	ldr	r1, [r7, #4]
 800291c:	1c5a      	adds	r2, r3, #1
 800291e:	0013      	movs	r3, r2
 8002920:	009b      	lsls	r3, r3, #2
 8002922:	189b      	adds	r3, r3, r2
 8002924:	00db      	lsls	r3, r3, #3
 8002926:	183a      	adds	r2, r7, r0
 8002928:	7812      	ldrb	r2, [r2, #0]
 800292a:	545a      	strb	r2, [r3, r1]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800292c:	0004      	movs	r4, r0
 800292e:	183b      	adds	r3, r7, r0
 8002930:	781a      	ldrb	r2, [r3, #0]
 8002932:	193b      	adds	r3, r7, r4
 8002934:	781b      	ldrb	r3, [r3, #0]
 8002936:	b298      	uxth	r0, r3
 8002938:	6879      	ldr	r1, [r7, #4]
 800293a:	0013      	movs	r3, r2
 800293c:	009b      	lsls	r3, r3, #2
 800293e:	189b      	adds	r3, r3, r2
 8002940:	00db      	lsls	r3, r3, #3
 8002942:	18cb      	adds	r3, r1, r3
 8002944:	3336      	adds	r3, #54	; 0x36
 8002946:	1c02      	adds	r2, r0, #0
 8002948:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800294a:	193b      	adds	r3, r7, r4
 800294c:	781b      	ldrb	r3, [r3, #0]
 800294e:	6879      	ldr	r1, [r7, #4]
 8002950:	1c5a      	adds	r2, r3, #1
 8002952:	0013      	movs	r3, r2
 8002954:	009b      	lsls	r3, r3, #2
 8002956:	189b      	adds	r3, r3, r2
 8002958:	00db      	lsls	r3, r3, #3
 800295a:	18cb      	adds	r3, r1, r3
 800295c:	3303      	adds	r3, #3
 800295e:	2200      	movs	r2, #0
 8002960:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002962:	193b      	adds	r3, r7, r4
 8002964:	781a      	ldrb	r2, [r3, #0]
 8002966:	6879      	ldr	r1, [r7, #4]
 8002968:	0013      	movs	r3, r2
 800296a:	009b      	lsls	r3, r3, #2
 800296c:	189b      	adds	r3, r3, r2
 800296e:	00db      	lsls	r3, r3, #3
 8002970:	18cb      	adds	r3, r1, r3
 8002972:	3338      	adds	r3, #56	; 0x38
 8002974:	2200      	movs	r2, #0
 8002976:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002978:	193b      	adds	r3, r7, r4
 800297a:	781a      	ldrb	r2, [r3, #0]
 800297c:	6879      	ldr	r1, [r7, #4]
 800297e:	0013      	movs	r3, r2
 8002980:	009b      	lsls	r3, r3, #2
 8002982:	189b      	adds	r3, r3, r2
 8002984:	00db      	lsls	r3, r3, #3
 8002986:	18cb      	adds	r3, r1, r3
 8002988:	333c      	adds	r3, #60	; 0x3c
 800298a:	2200      	movs	r2, #0
 800298c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800298e:	193b      	adds	r3, r7, r4
 8002990:	781a      	ldrb	r2, [r3, #0]
 8002992:	6879      	ldr	r1, [r7, #4]
 8002994:	0013      	movs	r3, r2
 8002996:	009b      	lsls	r3, r3, #2
 8002998:	189b      	adds	r3, r3, r2
 800299a:	00db      	lsls	r3, r3, #3
 800299c:	18cb      	adds	r3, r1, r3
 800299e:	3340      	adds	r3, #64	; 0x40
 80029a0:	2200      	movs	r2, #0
 80029a2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80029a4:	193b      	adds	r3, r7, r4
 80029a6:	781a      	ldrb	r2, [r3, #0]
 80029a8:	193b      	adds	r3, r7, r4
 80029aa:	3201      	adds	r2, #1
 80029ac:	701a      	strb	r2, [r3, #0]
 80029ae:	210f      	movs	r1, #15
 80029b0:	187b      	adds	r3, r7, r1
 80029b2:	781a      	ldrb	r2, [r3, #0]
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	685b      	ldr	r3, [r3, #4]
 80029b8:	429a      	cmp	r2, r3
 80029ba:	d39f      	bcc.n	80028fc <HAL_PCD_Init+0x4c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80029bc:	187b      	adds	r3, r7, r1
 80029be:	2200      	movs	r2, #0
 80029c0:	701a      	strb	r2, [r3, #0]
 80029c2:	e056      	b.n	8002a72 <HAL_PCD_Init+0x1c2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80029c4:	240f      	movs	r4, #15
 80029c6:	193b      	adds	r3, r7, r4
 80029c8:	781a      	ldrb	r2, [r3, #0]
 80029ca:	6878      	ldr	r0, [r7, #4]
 80029cc:	236a      	movs	r3, #106	; 0x6a
 80029ce:	33ff      	adds	r3, #255	; 0xff
 80029d0:	0019      	movs	r1, r3
 80029d2:	0013      	movs	r3, r2
 80029d4:	009b      	lsls	r3, r3, #2
 80029d6:	189b      	adds	r3, r3, r2
 80029d8:	00db      	lsls	r3, r3, #3
 80029da:	18c3      	adds	r3, r0, r3
 80029dc:	185b      	adds	r3, r3, r1
 80029de:	2200      	movs	r2, #0
 80029e0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80029e2:	193b      	adds	r3, r7, r4
 80029e4:	781a      	ldrb	r2, [r3, #0]
 80029e6:	6878      	ldr	r0, [r7, #4]
 80029e8:	23b4      	movs	r3, #180	; 0xb4
 80029ea:	0059      	lsls	r1, r3, #1
 80029ec:	0013      	movs	r3, r2
 80029ee:	009b      	lsls	r3, r3, #2
 80029f0:	189b      	adds	r3, r3, r2
 80029f2:	00db      	lsls	r3, r3, #3
 80029f4:	18c3      	adds	r3, r0, r3
 80029f6:	185b      	adds	r3, r3, r1
 80029f8:	193a      	adds	r2, r7, r4
 80029fa:	7812      	ldrb	r2, [r2, #0]
 80029fc:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80029fe:	193b      	adds	r3, r7, r4
 8002a00:	781a      	ldrb	r2, [r3, #0]
 8002a02:	6878      	ldr	r0, [r7, #4]
 8002a04:	236c      	movs	r3, #108	; 0x6c
 8002a06:	33ff      	adds	r3, #255	; 0xff
 8002a08:	0019      	movs	r1, r3
 8002a0a:	0013      	movs	r3, r2
 8002a0c:	009b      	lsls	r3, r3, #2
 8002a0e:	189b      	adds	r3, r3, r2
 8002a10:	00db      	lsls	r3, r3, #3
 8002a12:	18c3      	adds	r3, r0, r3
 8002a14:	185b      	adds	r3, r3, r1
 8002a16:	2200      	movs	r2, #0
 8002a18:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002a1a:	193b      	adds	r3, r7, r4
 8002a1c:	781a      	ldrb	r2, [r3, #0]
 8002a1e:	6878      	ldr	r0, [r7, #4]
 8002a20:	23bc      	movs	r3, #188	; 0xbc
 8002a22:	0059      	lsls	r1, r3, #1
 8002a24:	0013      	movs	r3, r2
 8002a26:	009b      	lsls	r3, r3, #2
 8002a28:	189b      	adds	r3, r3, r2
 8002a2a:	00db      	lsls	r3, r3, #3
 8002a2c:	18c3      	adds	r3, r0, r3
 8002a2e:	185b      	adds	r3, r3, r1
 8002a30:	2200      	movs	r2, #0
 8002a32:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002a34:	193b      	adds	r3, r7, r4
 8002a36:	781a      	ldrb	r2, [r3, #0]
 8002a38:	6878      	ldr	r0, [r7, #4]
 8002a3a:	23be      	movs	r3, #190	; 0xbe
 8002a3c:	0059      	lsls	r1, r3, #1
 8002a3e:	0013      	movs	r3, r2
 8002a40:	009b      	lsls	r3, r3, #2
 8002a42:	189b      	adds	r3, r3, r2
 8002a44:	00db      	lsls	r3, r3, #3
 8002a46:	18c3      	adds	r3, r0, r3
 8002a48:	185b      	adds	r3, r3, r1
 8002a4a:	2200      	movs	r2, #0
 8002a4c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002a4e:	193b      	adds	r3, r7, r4
 8002a50:	781a      	ldrb	r2, [r3, #0]
 8002a52:	6878      	ldr	r0, [r7, #4]
 8002a54:	23c0      	movs	r3, #192	; 0xc0
 8002a56:	0059      	lsls	r1, r3, #1
 8002a58:	0013      	movs	r3, r2
 8002a5a:	009b      	lsls	r3, r3, #2
 8002a5c:	189b      	adds	r3, r3, r2
 8002a5e:	00db      	lsls	r3, r3, #3
 8002a60:	18c3      	adds	r3, r0, r3
 8002a62:	185b      	adds	r3, r3, r1
 8002a64:	2200      	movs	r2, #0
 8002a66:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002a68:	193b      	adds	r3, r7, r4
 8002a6a:	781a      	ldrb	r2, [r3, #0]
 8002a6c:	193b      	adds	r3, r7, r4
 8002a6e:	3201      	adds	r2, #1
 8002a70:	701a      	strb	r2, [r3, #0]
 8002a72:	230f      	movs	r3, #15
 8002a74:	18fb      	adds	r3, r7, r3
 8002a76:	781a      	ldrb	r2, [r3, #0]
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	685b      	ldr	r3, [r3, #4]
 8002a7c:	429a      	cmp	r2, r3
 8002a7e:	d3a1      	bcc.n	80029c4 <HAL_PCD_Init+0x114>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	6818      	ldr	r0, [r3, #0]
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	466a      	mov	r2, sp
 8002a88:	0011      	movs	r1, r2
 8002a8a:	001a      	movs	r2, r3
 8002a8c:	3210      	adds	r2, #16
 8002a8e:	ca70      	ldmia	r2!, {r4, r5, r6}
 8002a90:	c170      	stmia	r1!, {r4, r5, r6}
 8002a92:	ca30      	ldmia	r2!, {r4, r5}
 8002a94:	c130      	stmia	r1!, {r4, r5}
 8002a96:	6859      	ldr	r1, [r3, #4]
 8002a98:	689a      	ldr	r2, [r3, #8]
 8002a9a:	68db      	ldr	r3, [r3, #12]
 8002a9c:	f004 f8b2 	bl	8006c04 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	2224      	movs	r2, #36	; 0x24
 8002aa4:	2100      	movs	r1, #0
 8002aa6:	5499      	strb	r1, [r3, r2]
  hpcd->State = HAL_PCD_STATE_READY;
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	4a08      	ldr	r2, [pc, #32]	; (8002acc <HAL_PCD_Init+0x21c>)
 8002aac:	2101      	movs	r1, #1
 8002aae:	5499      	strb	r1, [r3, r2]

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	69db      	ldr	r3, [r3, #28]
 8002ab4:	2b01      	cmp	r3, #1
 8002ab6:	d103      	bne.n	8002ac0 <HAL_PCD_Init+0x210>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	0018      	movs	r0, r3
 8002abc:	f001 fd34 	bl	8004528 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8002ac0:	2300      	movs	r3, #0
}
 8002ac2:	0018      	movs	r0, r3
 8002ac4:	46bd      	mov	sp, r7
 8002ac6:	b005      	add	sp, #20
 8002ac8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002aca:	46c0      	nop			; (mov r8, r8)
 8002acc:	000002a9 	.word	0x000002a9

08002ad0 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002ad0:	b580      	push	{r7, lr}
 8002ad2:	b082      	sub	sp, #8
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8002ad8:	687a      	ldr	r2, [r7, #4]
 8002ada:	23aa      	movs	r3, #170	; 0xaa
 8002adc:	009b      	lsls	r3, r3, #2
 8002ade:	5cd3      	ldrb	r3, [r2, r3]
 8002ae0:	2b01      	cmp	r3, #1
 8002ae2:	d101      	bne.n	8002ae8 <HAL_PCD_Start+0x18>
 8002ae4:	2302      	movs	r3, #2
 8002ae6:	e014      	b.n	8002b12 <HAL_PCD_Start+0x42>
 8002ae8:	687a      	ldr	r2, [r7, #4]
 8002aea:	23aa      	movs	r3, #170	; 0xaa
 8002aec:	009b      	lsls	r3, r3, #2
 8002aee:	2101      	movs	r1, #1
 8002af0:	54d1      	strb	r1, [r2, r3]
  __HAL_PCD_ENABLE(hpcd);
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	0018      	movs	r0, r3
 8002af8:	f004 f854 	bl	8006ba4 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	0018      	movs	r0, r3
 8002b02:	f005 ffaf 	bl	8008a64 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002b06:	687a      	ldr	r2, [r7, #4]
 8002b08:	23aa      	movs	r3, #170	; 0xaa
 8002b0a:	009b      	lsls	r3, r3, #2
 8002b0c:	2100      	movs	r1, #0
 8002b0e:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8002b10:	2300      	movs	r3, #0
}
 8002b12:	0018      	movs	r0, r3
 8002b14:	46bd      	mov	sp, r7
 8002b16:	b002      	add	sp, #8
 8002b18:	bd80      	pop	{r7, pc}
	...

08002b1c <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002b1c:	b580      	push	{r7, lr}
 8002b1e:	b082      	sub	sp, #8
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	6078      	str	r0, [r7, #4]
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	0018      	movs	r0, r3
 8002b2a:	f005 ffb1 	bl	8008a90 <USB_ReadInterrupts>
 8002b2e:	0002      	movs	r2, r0
 8002b30:	2380      	movs	r3, #128	; 0x80
 8002b32:	021b      	lsls	r3, r3, #8
 8002b34:	401a      	ands	r2, r3
 8002b36:	2380      	movs	r3, #128	; 0x80
 8002b38:	021b      	lsls	r3, r3, #8
 8002b3a:	429a      	cmp	r2, r3
 8002b3c:	d103      	bne.n	8002b46 <HAL_PCD_IRQHandler+0x2a>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	0018      	movs	r0, r3
 8002b42:	f000 fbbb 	bl	80032bc <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	0018      	movs	r0, r3
 8002b4c:	f005 ffa0 	bl	8008a90 <USB_ReadInterrupts>
 8002b50:	0002      	movs	r2, r0
 8002b52:	2380      	movs	r3, #128	; 0x80
 8002b54:	00db      	lsls	r3, r3, #3
 8002b56:	401a      	ands	r2, r3
 8002b58:	2380      	movs	r3, #128	; 0x80
 8002b5a:	00db      	lsls	r3, r3, #3
 8002b5c:	429a      	cmp	r2, r3
 8002b5e:	d114      	bne.n	8002b8a <HAL_PCD_IRQHandler+0x6e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	2244      	movs	r2, #68	; 0x44
 8002b66:	5a9b      	ldrh	r3, [r3, r2]
 8002b68:	b29a      	uxth	r2, r3
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	49a2      	ldr	r1, [pc, #648]	; (8002df8 <HAL_PCD_IRQHandler+0x2dc>)
 8002b70:	400a      	ands	r2, r1
 8002b72:	b291      	uxth	r1, r2
 8002b74:	2244      	movs	r2, #68	; 0x44
 8002b76:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	0018      	movs	r0, r3
 8002b7c:	f008 f80b 	bl	800ab96 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	2100      	movs	r1, #0
 8002b84:	0018      	movs	r0, r3
 8002b86:	f000 f945 	bl	8002e14 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	0018      	movs	r0, r3
 8002b90:	f005 ff7e 	bl	8008a90 <USB_ReadInterrupts>
 8002b94:	0002      	movs	r2, r0
 8002b96:	2380      	movs	r3, #128	; 0x80
 8002b98:	01db      	lsls	r3, r3, #7
 8002b9a:	401a      	ands	r2, r3
 8002b9c:	2380      	movs	r3, #128	; 0x80
 8002b9e:	01db      	lsls	r3, r3, #7
 8002ba0:	429a      	cmp	r2, r3
 8002ba2:	d10b      	bne.n	8002bbc <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	2244      	movs	r2, #68	; 0x44
 8002baa:	5a9b      	ldrh	r3, [r3, r2]
 8002bac:	b29a      	uxth	r2, r3
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	4992      	ldr	r1, [pc, #584]	; (8002dfc <HAL_PCD_IRQHandler+0x2e0>)
 8002bb4:	400a      	ands	r2, r1
 8002bb6:	b291      	uxth	r1, r2
 8002bb8:	2244      	movs	r2, #68	; 0x44
 8002bba:	5299      	strh	r1, [r3, r2]
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	0018      	movs	r0, r3
 8002bc2:	f005 ff65 	bl	8008a90 <USB_ReadInterrupts>
 8002bc6:	0002      	movs	r2, r0
 8002bc8:	2380      	movs	r3, #128	; 0x80
 8002bca:	019b      	lsls	r3, r3, #6
 8002bcc:	401a      	ands	r2, r3
 8002bce:	2380      	movs	r3, #128	; 0x80
 8002bd0:	019b      	lsls	r3, r3, #6
 8002bd2:	429a      	cmp	r2, r3
 8002bd4:	d10b      	bne.n	8002bee <HAL_PCD_IRQHandler+0xd2>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	2244      	movs	r2, #68	; 0x44
 8002bdc:	5a9b      	ldrh	r3, [r3, r2]
 8002bde:	b29a      	uxth	r2, r3
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	4986      	ldr	r1, [pc, #536]	; (8002e00 <HAL_PCD_IRQHandler+0x2e4>)
 8002be6:	400a      	ands	r2, r1
 8002be8:	b291      	uxth	r1, r2
 8002bea:	2244      	movs	r2, #68	; 0x44
 8002bec:	5299      	strh	r1, [r3, r2]
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	0018      	movs	r0, r3
 8002bf4:	f005 ff4c 	bl	8008a90 <USB_ReadInterrupts>
 8002bf8:	0002      	movs	r2, r0
 8002bfa:	2380      	movs	r3, #128	; 0x80
 8002bfc:	015b      	lsls	r3, r3, #5
 8002bfe:	401a      	ands	r2, r3
 8002c00:	2380      	movs	r3, #128	; 0x80
 8002c02:	015b      	lsls	r3, r3, #5
 8002c04:	429a      	cmp	r2, r3
 8002c06:	d137      	bne.n	8002c78 <HAL_PCD_IRQHandler+0x15c>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	2240      	movs	r2, #64	; 0x40
 8002c0e:	5a9b      	ldrh	r3, [r3, r2]
 8002c10:	b29a      	uxth	r2, r3
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	2104      	movs	r1, #4
 8002c18:	438a      	bics	r2, r1
 8002c1a:	b291      	uxth	r1, r2
 8002c1c:	2240      	movs	r2, #64	; 0x40
 8002c1e:	5299      	strh	r1, [r3, r2]
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	2240      	movs	r2, #64	; 0x40
 8002c26:	5a9b      	ldrh	r3, [r3, r2]
 8002c28:	b29a      	uxth	r2, r3
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	2108      	movs	r1, #8
 8002c30:	438a      	bics	r2, r1
 8002c32:	b291      	uxth	r1, r2
 8002c34:	2240      	movs	r2, #64	; 0x40
 8002c36:	5299      	strh	r1, [r3, r2]

    if (hpcd->LPM_State == LPM_L1)
 8002c38:	687a      	ldr	r2, [r7, #4]
 8002c3a:	23b8      	movs	r3, #184	; 0xb8
 8002c3c:	009b      	lsls	r3, r3, #2
 8002c3e:	5cd3      	ldrb	r3, [r2, r3]
 8002c40:	2b01      	cmp	r3, #1
 8002c42:	d109      	bne.n	8002c58 <HAL_PCD_IRQHandler+0x13c>
    {
      hpcd->LPM_State = LPM_L0;
 8002c44:	687a      	ldr	r2, [r7, #4]
 8002c46:	23b8      	movs	r3, #184	; 0xb8
 8002c48:	009b      	lsls	r3, r3, #2
 8002c4a:	2100      	movs	r1, #0
 8002c4c:	54d1      	strb	r1, [r2, r3]
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	2100      	movs	r1, #0
 8002c52:	0018      	movs	r0, r3
 8002c54:	f001 fc92 	bl	800457c <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	0018      	movs	r0, r3
 8002c5c:	f007 ffdc 	bl	800ac18 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	2244      	movs	r2, #68	; 0x44
 8002c66:	5a9b      	ldrh	r3, [r3, r2]
 8002c68:	b29a      	uxth	r2, r3
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	4965      	ldr	r1, [pc, #404]	; (8002e04 <HAL_PCD_IRQHandler+0x2e8>)
 8002c70:	400a      	ands	r2, r1
 8002c72:	b291      	uxth	r1, r2
 8002c74:	2244      	movs	r2, #68	; 0x44
 8002c76:	5299      	strh	r1, [r3, r2]
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	0018      	movs	r0, r3
 8002c7e:	f005 ff07 	bl	8008a90 <USB_ReadInterrupts>
 8002c82:	0002      	movs	r2, r0
 8002c84:	2380      	movs	r3, #128	; 0x80
 8002c86:	011b      	lsls	r3, r3, #4
 8002c88:	401a      	ands	r2, r3
 8002c8a:	2380      	movs	r3, #128	; 0x80
 8002c8c:	011b      	lsls	r3, r3, #4
 8002c8e:	429a      	cmp	r2, r3
 8002c90:	d127      	bne.n	8002ce2 <HAL_PCD_IRQHandler+0x1c6>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	2240      	movs	r2, #64	; 0x40
 8002c98:	5a9b      	ldrh	r3, [r3, r2]
 8002c9a:	b29a      	uxth	r2, r3
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	2108      	movs	r1, #8
 8002ca2:	430a      	orrs	r2, r1
 8002ca4:	b291      	uxth	r1, r2
 8002ca6:	2240      	movs	r2, #64	; 0x40
 8002ca8:	5299      	strh	r1, [r3, r2]

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	2244      	movs	r2, #68	; 0x44
 8002cb0:	5a9b      	ldrh	r3, [r3, r2]
 8002cb2:	b29a      	uxth	r2, r3
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	4953      	ldr	r1, [pc, #332]	; (8002e08 <HAL_PCD_IRQHandler+0x2ec>)
 8002cba:	400a      	ands	r2, r1
 8002cbc:	b291      	uxth	r1, r2
 8002cbe:	2244      	movs	r2, #68	; 0x44
 8002cc0:	5299      	strh	r1, [r3, r2]

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	2240      	movs	r2, #64	; 0x40
 8002cc8:	5a9b      	ldrh	r3, [r3, r2]
 8002cca:	b29a      	uxth	r2, r3
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	2104      	movs	r1, #4
 8002cd2:	430a      	orrs	r2, r1
 8002cd4:	b291      	uxth	r1, r2
 8002cd6:	2240      	movs	r2, #64	; 0x40
 8002cd8:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	0018      	movs	r0, r3
 8002cde:	f007 ff7f 	bl	800abe0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  /* Handle LPM Interrupt */
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_L1REQ))
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	0018      	movs	r0, r3
 8002ce8:	f005 fed2 	bl	8008a90 <USB_ReadInterrupts>
 8002cec:	0003      	movs	r3, r0
 8002cee:	2280      	movs	r2, #128	; 0x80
 8002cf0:	4013      	ands	r3, r2
 8002cf2:	2b80      	cmp	r3, #128	; 0x80
 8002cf4:	d145      	bne.n	8002d82 <HAL_PCD_IRQHandler+0x266>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	2244      	movs	r2, #68	; 0x44
 8002cfc:	5a9b      	ldrh	r3, [r3, r2]
 8002cfe:	b29a      	uxth	r2, r3
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	2180      	movs	r1, #128	; 0x80
 8002d06:	438a      	bics	r2, r1
 8002d08:	b291      	uxth	r1, r2
 8002d0a:	2244      	movs	r2, #68	; 0x44
 8002d0c:	5299      	strh	r1, [r3, r2]
    if (hpcd->LPM_State == LPM_L0)
 8002d0e:	687a      	ldr	r2, [r7, #4]
 8002d10:	23b8      	movs	r3, #184	; 0xb8
 8002d12:	009b      	lsls	r3, r3, #2
 8002d14:	5cd3      	ldrb	r3, [r2, r3]
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d12f      	bne.n	8002d7a <HAL_PCD_IRQHandler+0x25e>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	2240      	movs	r2, #64	; 0x40
 8002d20:	5a9b      	ldrh	r3, [r3, r2]
 8002d22:	b29a      	uxth	r2, r3
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	2104      	movs	r1, #4
 8002d2a:	430a      	orrs	r2, r1
 8002d2c:	b291      	uxth	r1, r2
 8002d2e:	2240      	movs	r2, #64	; 0x40
 8002d30:	5299      	strh	r1, [r3, r2]
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	2240      	movs	r2, #64	; 0x40
 8002d38:	5a9b      	ldrh	r3, [r3, r2]
 8002d3a:	b29a      	uxth	r2, r3
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	2108      	movs	r1, #8
 8002d42:	430a      	orrs	r2, r1
 8002d44:	b291      	uxth	r1, r2
 8002d46:	2240      	movs	r2, #64	; 0x40
 8002d48:	5299      	strh	r1, [r3, r2]

      hpcd->LPM_State = LPM_L1;
 8002d4a:	687a      	ldr	r2, [r7, #4]
 8002d4c:	23b8      	movs	r3, #184	; 0xb8
 8002d4e:	009b      	lsls	r3, r3, #2
 8002d50:	2101      	movs	r1, #1
 8002d52:	54d1      	strb	r1, [r2, r3]
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	2254      	movs	r2, #84	; 0x54
 8002d5a:	5a9b      	ldrh	r3, [r3, r2]
 8002d5c:	b29b      	uxth	r3, r3
 8002d5e:	089b      	lsrs	r3, r3, #2
 8002d60:	223c      	movs	r2, #60	; 0x3c
 8002d62:	4013      	ands	r3, r2
 8002d64:	0019      	movs	r1, r3
 8002d66:	687a      	ldr	r2, [r7, #4]
 8002d68:	23b9      	movs	r3, #185	; 0xb9
 8002d6a:	009b      	lsls	r3, r3, #2
 8002d6c:	50d1      	str	r1, [r2, r3]
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	2101      	movs	r1, #1
 8002d72:	0018      	movs	r0, r3
 8002d74:	f001 fc02 	bl	800457c <HAL_PCDEx_LPM_Callback>
 8002d78:	e003      	b.n	8002d82 <HAL_PCD_IRQHandler+0x266>
    else
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SuspendCallback(hpcd);
#else
      HAL_PCD_SuspendCallback(hpcd);
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	0018      	movs	r0, r3
 8002d7e:	f007 ff2f 	bl	800abe0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	0018      	movs	r0, r3
 8002d88:	f005 fe82 	bl	8008a90 <USB_ReadInterrupts>
 8002d8c:	0002      	movs	r2, r0
 8002d8e:	2380      	movs	r3, #128	; 0x80
 8002d90:	009b      	lsls	r3, r3, #2
 8002d92:	401a      	ands	r2, r3
 8002d94:	2380      	movs	r3, #128	; 0x80
 8002d96:	009b      	lsls	r3, r3, #2
 8002d98:	429a      	cmp	r2, r3
 8002d9a:	d10f      	bne.n	8002dbc <HAL_PCD_IRQHandler+0x2a0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	2244      	movs	r2, #68	; 0x44
 8002da2:	5a9b      	ldrh	r3, [r3, r2]
 8002da4:	b29a      	uxth	r2, r3
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	4918      	ldr	r1, [pc, #96]	; (8002e0c <HAL_PCD_IRQHandler+0x2f0>)
 8002dac:	400a      	ands	r2, r1
 8002dae:	b291      	uxth	r1, r2
 8002db0:	2244      	movs	r2, #68	; 0x44
 8002db2:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	0018      	movs	r0, r3
 8002db8:	f007 fede 	bl	800ab78 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	0018      	movs	r0, r3
 8002dc2:	f005 fe65 	bl	8008a90 <USB_ReadInterrupts>
 8002dc6:	0002      	movs	r2, r0
 8002dc8:	2380      	movs	r3, #128	; 0x80
 8002dca:	005b      	lsls	r3, r3, #1
 8002dcc:	401a      	ands	r2, r3
 8002dce:	2380      	movs	r3, #128	; 0x80
 8002dd0:	005b      	lsls	r3, r3, #1
 8002dd2:	429a      	cmp	r2, r3
 8002dd4:	d10b      	bne.n	8002dee <HAL_PCD_IRQHandler+0x2d2>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	2244      	movs	r2, #68	; 0x44
 8002ddc:	5a9b      	ldrh	r3, [r3, r2]
 8002dde:	b29a      	uxth	r2, r3
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	490a      	ldr	r1, [pc, #40]	; (8002e10 <HAL_PCD_IRQHandler+0x2f4>)
 8002de6:	400a      	ands	r2, r1
 8002de8:	b291      	uxth	r1, r2
 8002dea:	2244      	movs	r2, #68	; 0x44
 8002dec:	5299      	strh	r1, [r3, r2]
  }
}
 8002dee:	46c0      	nop			; (mov r8, r8)
 8002df0:	46bd      	mov	sp, r7
 8002df2:	b002      	add	sp, #8
 8002df4:	bd80      	pop	{r7, pc}
 8002df6:	46c0      	nop			; (mov r8, r8)
 8002df8:	fffffbff 	.word	0xfffffbff
 8002dfc:	ffffbfff 	.word	0xffffbfff
 8002e00:	ffffdfff 	.word	0xffffdfff
 8002e04:	ffffefff 	.word	0xffffefff
 8002e08:	fffff7ff 	.word	0xfffff7ff
 8002e0c:	fffffdff 	.word	0xfffffdff
 8002e10:	fffffeff 	.word	0xfffffeff

08002e14 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002e14:	b580      	push	{r7, lr}
 8002e16:	b082      	sub	sp, #8
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	6078      	str	r0, [r7, #4]
 8002e1c:	000a      	movs	r2, r1
 8002e1e:	1cfb      	adds	r3, r7, #3
 8002e20:	701a      	strb	r2, [r3, #0]
  __HAL_LOCK(hpcd);
 8002e22:	687a      	ldr	r2, [r7, #4]
 8002e24:	23aa      	movs	r3, #170	; 0xaa
 8002e26:	009b      	lsls	r3, r3, #2
 8002e28:	5cd3      	ldrb	r3, [r2, r3]
 8002e2a:	2b01      	cmp	r3, #1
 8002e2c:	d101      	bne.n	8002e32 <HAL_PCD_SetAddress+0x1e>
 8002e2e:	2302      	movs	r3, #2
 8002e30:	e017      	b.n	8002e62 <HAL_PCD_SetAddress+0x4e>
 8002e32:	687a      	ldr	r2, [r7, #4]
 8002e34:	23aa      	movs	r3, #170	; 0xaa
 8002e36:	009b      	lsls	r3, r3, #2
 8002e38:	2101      	movs	r1, #1
 8002e3a:	54d1      	strb	r1, [r2, r3]
  hpcd->USB_Address = address;
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	1cfa      	adds	r2, r7, #3
 8002e40:	2124      	movs	r1, #36	; 0x24
 8002e42:	7812      	ldrb	r2, [r2, #0]
 8002e44:	545a      	strb	r2, [r3, r1]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681a      	ldr	r2, [r3, #0]
 8002e4a:	1cfb      	adds	r3, r7, #3
 8002e4c:	781b      	ldrb	r3, [r3, #0]
 8002e4e:	0019      	movs	r1, r3
 8002e50:	0010      	movs	r0, r2
 8002e52:	f005 fdf3 	bl	8008a3c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002e56:	687a      	ldr	r2, [r7, #4]
 8002e58:	23aa      	movs	r3, #170	; 0xaa
 8002e5a:	009b      	lsls	r3, r3, #2
 8002e5c:	2100      	movs	r1, #0
 8002e5e:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8002e60:	2300      	movs	r3, #0
}
 8002e62:	0018      	movs	r0, r3
 8002e64:	46bd      	mov	sp, r7
 8002e66:	b002      	add	sp, #8
 8002e68:	bd80      	pop	{r7, pc}

08002e6a <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002e6a:	b590      	push	{r4, r7, lr}
 8002e6c:	b085      	sub	sp, #20
 8002e6e:	af00      	add	r7, sp, #0
 8002e70:	6078      	str	r0, [r7, #4]
 8002e72:	000c      	movs	r4, r1
 8002e74:	0010      	movs	r0, r2
 8002e76:	0019      	movs	r1, r3
 8002e78:	1cfb      	adds	r3, r7, #3
 8002e7a:	1c22      	adds	r2, r4, #0
 8002e7c:	701a      	strb	r2, [r3, #0]
 8002e7e:	003b      	movs	r3, r7
 8002e80:	1c02      	adds	r2, r0, #0
 8002e82:	801a      	strh	r2, [r3, #0]
 8002e84:	1cbb      	adds	r3, r7, #2
 8002e86:	1c0a      	adds	r2, r1, #0
 8002e88:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002e8a:	230b      	movs	r3, #11
 8002e8c:	18fb      	adds	r3, r7, r3
 8002e8e:	2200      	movs	r2, #0
 8002e90:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002e92:	1cfb      	adds	r3, r7, #3
 8002e94:	781b      	ldrb	r3, [r3, #0]
 8002e96:	b25b      	sxtb	r3, r3
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	da0f      	bge.n	8002ebc <HAL_PCD_EP_Open+0x52>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002e9c:	1cfb      	adds	r3, r7, #3
 8002e9e:	781b      	ldrb	r3, [r3, #0]
 8002ea0:	2207      	movs	r2, #7
 8002ea2:	4013      	ands	r3, r2
 8002ea4:	1c5a      	adds	r2, r3, #1
 8002ea6:	0013      	movs	r3, r2
 8002ea8:	009b      	lsls	r3, r3, #2
 8002eaa:	189b      	adds	r3, r3, r2
 8002eac:	00db      	lsls	r3, r3, #3
 8002eae:	687a      	ldr	r2, [r7, #4]
 8002eb0:	18d3      	adds	r3, r2, r3
 8002eb2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	2201      	movs	r2, #1
 8002eb8:	705a      	strb	r2, [r3, #1]
 8002eba:	e00f      	b.n	8002edc <HAL_PCD_EP_Open+0x72>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002ebc:	1cfb      	adds	r3, r7, #3
 8002ebe:	781b      	ldrb	r3, [r3, #0]
 8002ec0:	2207      	movs	r2, #7
 8002ec2:	401a      	ands	r2, r3
 8002ec4:	0013      	movs	r3, r2
 8002ec6:	009b      	lsls	r3, r3, #2
 8002ec8:	189b      	adds	r3, r3, r2
 8002eca:	00db      	lsls	r3, r3, #3
 8002ecc:	3369      	adds	r3, #105	; 0x69
 8002ece:	33ff      	adds	r3, #255	; 0xff
 8002ed0:	687a      	ldr	r2, [r7, #4]
 8002ed2:	18d3      	adds	r3, r2, r3
 8002ed4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	2200      	movs	r2, #0
 8002eda:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002edc:	1cfb      	adds	r3, r7, #3
 8002ede:	781b      	ldrb	r3, [r3, #0]
 8002ee0:	2207      	movs	r2, #7
 8002ee2:	4013      	ands	r3, r2
 8002ee4:	b2da      	uxtb	r2, r3
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002eea:	003b      	movs	r3, r7
 8002eec:	881a      	ldrh	r2, [r3, #0]
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	1cba      	adds	r2, r7, #2
 8002ef6:	7812      	ldrb	r2, [r2, #0]
 8002ef8:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	785b      	ldrb	r3, [r3, #1]
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d004      	beq.n	8002f0c <HAL_PCD_EP_Open+0xa2>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	781b      	ldrb	r3, [r3, #0]
 8002f06:	b29a      	uxth	r2, r3
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002f0c:	1cbb      	adds	r3, r7, #2
 8002f0e:	781b      	ldrb	r3, [r3, #0]
 8002f10:	2b02      	cmp	r3, #2
 8002f12:	d102      	bne.n	8002f1a <HAL_PCD_EP_Open+0xb0>
  {
    ep->data_pid_start = 0U;
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	2200      	movs	r2, #0
 8002f18:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8002f1a:	687a      	ldr	r2, [r7, #4]
 8002f1c:	23aa      	movs	r3, #170	; 0xaa
 8002f1e:	009b      	lsls	r3, r3, #2
 8002f20:	5cd3      	ldrb	r3, [r2, r3]
 8002f22:	2b01      	cmp	r3, #1
 8002f24:	d101      	bne.n	8002f2a <HAL_PCD_EP_Open+0xc0>
 8002f26:	2302      	movs	r3, #2
 8002f28:	e013      	b.n	8002f52 <HAL_PCD_EP_Open+0xe8>
 8002f2a:	687a      	ldr	r2, [r7, #4]
 8002f2c:	23aa      	movs	r3, #170	; 0xaa
 8002f2e:	009b      	lsls	r3, r3, #2
 8002f30:	2101      	movs	r1, #1
 8002f32:	54d1      	strb	r1, [r2, r3]
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	68fa      	ldr	r2, [r7, #12]
 8002f3a:	0011      	movs	r1, r2
 8002f3c:	0018      	movs	r0, r3
 8002f3e:	f003 fe8d 	bl	8006c5c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002f42:	687a      	ldr	r2, [r7, #4]
 8002f44:	23aa      	movs	r3, #170	; 0xaa
 8002f46:	009b      	lsls	r3, r3, #2
 8002f48:	2100      	movs	r1, #0
 8002f4a:	54d1      	strb	r1, [r2, r3]

  return ret;
 8002f4c:	230b      	movs	r3, #11
 8002f4e:	18fb      	adds	r3, r7, r3
 8002f50:	781b      	ldrb	r3, [r3, #0]
}
 8002f52:	0018      	movs	r0, r3
 8002f54:	46bd      	mov	sp, r7
 8002f56:	b005      	add	sp, #20
 8002f58:	bd90      	pop	{r4, r7, pc}

08002f5a <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002f5a:	b580      	push	{r7, lr}
 8002f5c:	b084      	sub	sp, #16
 8002f5e:	af00      	add	r7, sp, #0
 8002f60:	6078      	str	r0, [r7, #4]
 8002f62:	000a      	movs	r2, r1
 8002f64:	1cfb      	adds	r3, r7, #3
 8002f66:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002f68:	1cfb      	adds	r3, r7, #3
 8002f6a:	781b      	ldrb	r3, [r3, #0]
 8002f6c:	b25b      	sxtb	r3, r3
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	da0f      	bge.n	8002f92 <HAL_PCD_EP_Close+0x38>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002f72:	1cfb      	adds	r3, r7, #3
 8002f74:	781b      	ldrb	r3, [r3, #0]
 8002f76:	2207      	movs	r2, #7
 8002f78:	4013      	ands	r3, r2
 8002f7a:	1c5a      	adds	r2, r3, #1
 8002f7c:	0013      	movs	r3, r2
 8002f7e:	009b      	lsls	r3, r3, #2
 8002f80:	189b      	adds	r3, r3, r2
 8002f82:	00db      	lsls	r3, r3, #3
 8002f84:	687a      	ldr	r2, [r7, #4]
 8002f86:	18d3      	adds	r3, r2, r3
 8002f88:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	2201      	movs	r2, #1
 8002f8e:	705a      	strb	r2, [r3, #1]
 8002f90:	e00f      	b.n	8002fb2 <HAL_PCD_EP_Close+0x58>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002f92:	1cfb      	adds	r3, r7, #3
 8002f94:	781b      	ldrb	r3, [r3, #0]
 8002f96:	2207      	movs	r2, #7
 8002f98:	401a      	ands	r2, r3
 8002f9a:	0013      	movs	r3, r2
 8002f9c:	009b      	lsls	r3, r3, #2
 8002f9e:	189b      	adds	r3, r3, r2
 8002fa0:	00db      	lsls	r3, r3, #3
 8002fa2:	3369      	adds	r3, #105	; 0x69
 8002fa4:	33ff      	adds	r3, #255	; 0xff
 8002fa6:	687a      	ldr	r2, [r7, #4]
 8002fa8:	18d3      	adds	r3, r2, r3
 8002faa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	2200      	movs	r2, #0
 8002fb0:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002fb2:	1cfb      	adds	r3, r7, #3
 8002fb4:	781b      	ldrb	r3, [r3, #0]
 8002fb6:	2207      	movs	r2, #7
 8002fb8:	4013      	ands	r3, r2
 8002fba:	b2da      	uxtb	r2, r3
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002fc0:	687a      	ldr	r2, [r7, #4]
 8002fc2:	23aa      	movs	r3, #170	; 0xaa
 8002fc4:	009b      	lsls	r3, r3, #2
 8002fc6:	5cd3      	ldrb	r3, [r2, r3]
 8002fc8:	2b01      	cmp	r3, #1
 8002fca:	d101      	bne.n	8002fd0 <HAL_PCD_EP_Close+0x76>
 8002fcc:	2302      	movs	r3, #2
 8002fce:	e011      	b.n	8002ff4 <HAL_PCD_EP_Close+0x9a>
 8002fd0:	687a      	ldr	r2, [r7, #4]
 8002fd2:	23aa      	movs	r3, #170	; 0xaa
 8002fd4:	009b      	lsls	r3, r3, #2
 8002fd6:	2101      	movs	r1, #1
 8002fd8:	54d1      	strb	r1, [r2, r3]
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	68fa      	ldr	r2, [r7, #12]
 8002fe0:	0011      	movs	r1, r2
 8002fe2:	0018      	movs	r0, r3
 8002fe4:	f004 f9ae 	bl	8007344 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002fe8:	687a      	ldr	r2, [r7, #4]
 8002fea:	23aa      	movs	r3, #170	; 0xaa
 8002fec:	009b      	lsls	r3, r3, #2
 8002fee:	2100      	movs	r1, #0
 8002ff0:	54d1      	strb	r1, [r2, r3]
  return HAL_OK;
 8002ff2:	2300      	movs	r3, #0
}
 8002ff4:	0018      	movs	r0, r3
 8002ff6:	46bd      	mov	sp, r7
 8002ff8:	b004      	add	sp, #16
 8002ffa:	bd80      	pop	{r7, pc}

08002ffc <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002ffc:	b580      	push	{r7, lr}
 8002ffe:	b086      	sub	sp, #24
 8003000:	af00      	add	r7, sp, #0
 8003002:	60f8      	str	r0, [r7, #12]
 8003004:	607a      	str	r2, [r7, #4]
 8003006:	603b      	str	r3, [r7, #0]
 8003008:	200b      	movs	r0, #11
 800300a:	183b      	adds	r3, r7, r0
 800300c:	1c0a      	adds	r2, r1, #0
 800300e:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003010:	0001      	movs	r1, r0
 8003012:	187b      	adds	r3, r7, r1
 8003014:	781b      	ldrb	r3, [r3, #0]
 8003016:	2207      	movs	r2, #7
 8003018:	401a      	ands	r2, r3
 800301a:	0013      	movs	r3, r2
 800301c:	009b      	lsls	r3, r3, #2
 800301e:	189b      	adds	r3, r3, r2
 8003020:	00db      	lsls	r3, r3, #3
 8003022:	3369      	adds	r3, #105	; 0x69
 8003024:	33ff      	adds	r3, #255	; 0xff
 8003026:	68fa      	ldr	r2, [r7, #12]
 8003028:	18d3      	adds	r3, r2, r3
 800302a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800302c:	697b      	ldr	r3, [r7, #20]
 800302e:	687a      	ldr	r2, [r7, #4]
 8003030:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8003032:	697b      	ldr	r3, [r7, #20]
 8003034:	683a      	ldr	r2, [r7, #0]
 8003036:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003038:	697b      	ldr	r3, [r7, #20]
 800303a:	2200      	movs	r2, #0
 800303c:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 800303e:	697b      	ldr	r3, [r7, #20]
 8003040:	2200      	movs	r2, #0
 8003042:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003044:	187b      	adds	r3, r7, r1
 8003046:	781b      	ldrb	r3, [r3, #0]
 8003048:	2207      	movs	r2, #7
 800304a:	4013      	ands	r3, r2
 800304c:	b2da      	uxtb	r2, r3
 800304e:	697b      	ldr	r3, [r7, #20]
 8003050:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003052:	187b      	adds	r3, r7, r1
 8003054:	781b      	ldrb	r3, [r3, #0]
 8003056:	2207      	movs	r2, #7
 8003058:	4013      	ands	r3, r2
 800305a:	d107      	bne.n	800306c <HAL_PCD_EP_Receive+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	697a      	ldr	r2, [r7, #20]
 8003062:	0011      	movs	r1, r2
 8003064:	0018      	movs	r0, r3
 8003066:	f004 fb2d 	bl	80076c4 <USB_EPStartXfer>
 800306a:	e006      	b.n	800307a <HAL_PCD_EP_Receive+0x7e>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	697a      	ldr	r2, [r7, #20]
 8003072:	0011      	movs	r1, r2
 8003074:	0018      	movs	r0, r3
 8003076:	f004 fb25 	bl	80076c4 <USB_EPStartXfer>
  }

  return HAL_OK;
 800307a:	2300      	movs	r3, #0
}
 800307c:	0018      	movs	r0, r3
 800307e:	46bd      	mov	sp, r7
 8003080:	b006      	add	sp, #24
 8003082:	bd80      	pop	{r7, pc}

08003084 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003084:	b580      	push	{r7, lr}
 8003086:	b082      	sub	sp, #8
 8003088:	af00      	add	r7, sp, #0
 800308a:	6078      	str	r0, [r7, #4]
 800308c:	000a      	movs	r2, r1
 800308e:	1cfb      	adds	r3, r7, #3
 8003090:	701a      	strb	r2, [r3, #0]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003092:	1cfb      	adds	r3, r7, #3
 8003094:	781b      	ldrb	r3, [r3, #0]
 8003096:	2207      	movs	r2, #7
 8003098:	401a      	ands	r2, r3
 800309a:	6878      	ldr	r0, [r7, #4]
 800309c:	23c2      	movs	r3, #194	; 0xc2
 800309e:	0059      	lsls	r1, r3, #1
 80030a0:	0013      	movs	r3, r2
 80030a2:	009b      	lsls	r3, r3, #2
 80030a4:	189b      	adds	r3, r3, r2
 80030a6:	00db      	lsls	r3, r3, #3
 80030a8:	18c3      	adds	r3, r0, r3
 80030aa:	185b      	adds	r3, r3, r1
 80030ac:	681b      	ldr	r3, [r3, #0]
}
 80030ae:	0018      	movs	r0, r3
 80030b0:	46bd      	mov	sp, r7
 80030b2:	b002      	add	sp, #8
 80030b4:	bd80      	pop	{r7, pc}

080030b6 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80030b6:	b580      	push	{r7, lr}
 80030b8:	b086      	sub	sp, #24
 80030ba:	af00      	add	r7, sp, #0
 80030bc:	60f8      	str	r0, [r7, #12]
 80030be:	607a      	str	r2, [r7, #4]
 80030c0:	603b      	str	r3, [r7, #0]
 80030c2:	200b      	movs	r0, #11
 80030c4:	183b      	adds	r3, r7, r0
 80030c6:	1c0a      	adds	r2, r1, #0
 80030c8:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80030ca:	183b      	adds	r3, r7, r0
 80030cc:	781b      	ldrb	r3, [r3, #0]
 80030ce:	2207      	movs	r2, #7
 80030d0:	4013      	ands	r3, r2
 80030d2:	1c5a      	adds	r2, r3, #1
 80030d4:	0013      	movs	r3, r2
 80030d6:	009b      	lsls	r3, r3, #2
 80030d8:	189b      	adds	r3, r3, r2
 80030da:	00db      	lsls	r3, r3, #3
 80030dc:	68fa      	ldr	r2, [r7, #12]
 80030de:	18d3      	adds	r3, r2, r3
 80030e0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80030e2:	697b      	ldr	r3, [r7, #20]
 80030e4:	687a      	ldr	r2, [r7, #4]
 80030e6:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80030e8:	697b      	ldr	r3, [r7, #20]
 80030ea:	683a      	ldr	r2, [r7, #0]
 80030ec:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 80030ee:	697b      	ldr	r3, [r7, #20]
 80030f0:	2224      	movs	r2, #36	; 0x24
 80030f2:	2101      	movs	r1, #1
 80030f4:	5499      	strb	r1, [r3, r2]
  ep->xfer_len_db = len;
 80030f6:	697b      	ldr	r3, [r7, #20]
 80030f8:	683a      	ldr	r2, [r7, #0]
 80030fa:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 80030fc:	697b      	ldr	r3, [r7, #20]
 80030fe:	2200      	movs	r2, #0
 8003100:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8003102:	697b      	ldr	r3, [r7, #20]
 8003104:	2201      	movs	r2, #1
 8003106:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003108:	183b      	adds	r3, r7, r0
 800310a:	781b      	ldrb	r3, [r3, #0]
 800310c:	2207      	movs	r2, #7
 800310e:	4013      	ands	r3, r2
 8003110:	b2da      	uxtb	r2, r3
 8003112:	697b      	ldr	r3, [r7, #20]
 8003114:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003116:	183b      	adds	r3, r7, r0
 8003118:	781b      	ldrb	r3, [r3, #0]
 800311a:	2207      	movs	r2, #7
 800311c:	4013      	ands	r3, r2
 800311e:	d107      	bne.n	8003130 <HAL_PCD_EP_Transmit+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	697a      	ldr	r2, [r7, #20]
 8003126:	0011      	movs	r1, r2
 8003128:	0018      	movs	r0, r3
 800312a:	f004 facb 	bl	80076c4 <USB_EPStartXfer>
 800312e:	e006      	b.n	800313e <HAL_PCD_EP_Transmit+0x88>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	697a      	ldr	r2, [r7, #20]
 8003136:	0011      	movs	r1, r2
 8003138:	0018      	movs	r0, r3
 800313a:	f004 fac3 	bl	80076c4 <USB_EPStartXfer>
  }

  return HAL_OK;
 800313e:	2300      	movs	r3, #0
}
 8003140:	0018      	movs	r0, r3
 8003142:	46bd      	mov	sp, r7
 8003144:	b006      	add	sp, #24
 8003146:	bd80      	pop	{r7, pc}

08003148 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003148:	b580      	push	{r7, lr}
 800314a:	b084      	sub	sp, #16
 800314c:	af00      	add	r7, sp, #0
 800314e:	6078      	str	r0, [r7, #4]
 8003150:	000a      	movs	r2, r1
 8003152:	1cfb      	adds	r3, r7, #3
 8003154:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003156:	1cfb      	adds	r3, r7, #3
 8003158:	781b      	ldrb	r3, [r3, #0]
 800315a:	2207      	movs	r2, #7
 800315c:	401a      	ands	r2, r3
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	685b      	ldr	r3, [r3, #4]
 8003162:	429a      	cmp	r2, r3
 8003164:	d901      	bls.n	800316a <HAL_PCD_EP_SetStall+0x22>
  {
    return HAL_ERROR;
 8003166:	2301      	movs	r3, #1
 8003168:	e046      	b.n	80031f8 <HAL_PCD_EP_SetStall+0xb0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800316a:	1cfb      	adds	r3, r7, #3
 800316c:	781b      	ldrb	r3, [r3, #0]
 800316e:	b25b      	sxtb	r3, r3
 8003170:	2b00      	cmp	r3, #0
 8003172:	da0f      	bge.n	8003194 <HAL_PCD_EP_SetStall+0x4c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003174:	1cfb      	adds	r3, r7, #3
 8003176:	781b      	ldrb	r3, [r3, #0]
 8003178:	2207      	movs	r2, #7
 800317a:	4013      	ands	r3, r2
 800317c:	1c5a      	adds	r2, r3, #1
 800317e:	0013      	movs	r3, r2
 8003180:	009b      	lsls	r3, r3, #2
 8003182:	189b      	adds	r3, r3, r2
 8003184:	00db      	lsls	r3, r3, #3
 8003186:	687a      	ldr	r2, [r7, #4]
 8003188:	18d3      	adds	r3, r2, r3
 800318a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	2201      	movs	r2, #1
 8003190:	705a      	strb	r2, [r3, #1]
 8003192:	e00d      	b.n	80031b0 <HAL_PCD_EP_SetStall+0x68>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003194:	1cfb      	adds	r3, r7, #3
 8003196:	781a      	ldrb	r2, [r3, #0]
 8003198:	0013      	movs	r3, r2
 800319a:	009b      	lsls	r3, r3, #2
 800319c:	189b      	adds	r3, r3, r2
 800319e:	00db      	lsls	r3, r3, #3
 80031a0:	3369      	adds	r3, #105	; 0x69
 80031a2:	33ff      	adds	r3, #255	; 0xff
 80031a4:	687a      	ldr	r2, [r7, #4]
 80031a6:	18d3      	adds	r3, r2, r3
 80031a8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	2200      	movs	r2, #0
 80031ae:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	2201      	movs	r2, #1
 80031b4:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80031b6:	1cfb      	adds	r3, r7, #3
 80031b8:	781b      	ldrb	r3, [r3, #0]
 80031ba:	2207      	movs	r2, #7
 80031bc:	4013      	ands	r3, r2
 80031be:	b2da      	uxtb	r2, r3
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80031c4:	687a      	ldr	r2, [r7, #4]
 80031c6:	23aa      	movs	r3, #170	; 0xaa
 80031c8:	009b      	lsls	r3, r3, #2
 80031ca:	5cd3      	ldrb	r3, [r2, r3]
 80031cc:	2b01      	cmp	r3, #1
 80031ce:	d101      	bne.n	80031d4 <HAL_PCD_EP_SetStall+0x8c>
 80031d0:	2302      	movs	r3, #2
 80031d2:	e011      	b.n	80031f8 <HAL_PCD_EP_SetStall+0xb0>
 80031d4:	687a      	ldr	r2, [r7, #4]
 80031d6:	23aa      	movs	r3, #170	; 0xaa
 80031d8:	009b      	lsls	r3, r3, #2
 80031da:	2101      	movs	r1, #1
 80031dc:	54d1      	strb	r1, [r2, r3]

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	68fa      	ldr	r2, [r7, #12]
 80031e4:	0011      	movs	r1, r2
 80031e6:	0018      	movs	r0, r3
 80031e8:	f005 fb26 	bl	8008838 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 80031ec:	687a      	ldr	r2, [r7, #4]
 80031ee:	23aa      	movs	r3, #170	; 0xaa
 80031f0:	009b      	lsls	r3, r3, #2
 80031f2:	2100      	movs	r1, #0
 80031f4:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 80031f6:	2300      	movs	r3, #0
}
 80031f8:	0018      	movs	r0, r3
 80031fa:	46bd      	mov	sp, r7
 80031fc:	b004      	add	sp, #16
 80031fe:	bd80      	pop	{r7, pc}

08003200 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003200:	b580      	push	{r7, lr}
 8003202:	b084      	sub	sp, #16
 8003204:	af00      	add	r7, sp, #0
 8003206:	6078      	str	r0, [r7, #4]
 8003208:	000a      	movs	r2, r1
 800320a:	1cfb      	adds	r3, r7, #3
 800320c:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800320e:	1cfb      	adds	r3, r7, #3
 8003210:	781b      	ldrb	r3, [r3, #0]
 8003212:	220f      	movs	r2, #15
 8003214:	401a      	ands	r2, r3
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	685b      	ldr	r3, [r3, #4]
 800321a:	429a      	cmp	r2, r3
 800321c:	d901      	bls.n	8003222 <HAL_PCD_EP_ClrStall+0x22>
  {
    return HAL_ERROR;
 800321e:	2301      	movs	r3, #1
 8003220:	e048      	b.n	80032b4 <HAL_PCD_EP_ClrStall+0xb4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003222:	1cfb      	adds	r3, r7, #3
 8003224:	781b      	ldrb	r3, [r3, #0]
 8003226:	b25b      	sxtb	r3, r3
 8003228:	2b00      	cmp	r3, #0
 800322a:	da0f      	bge.n	800324c <HAL_PCD_EP_ClrStall+0x4c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800322c:	1cfb      	adds	r3, r7, #3
 800322e:	781b      	ldrb	r3, [r3, #0]
 8003230:	2207      	movs	r2, #7
 8003232:	4013      	ands	r3, r2
 8003234:	1c5a      	adds	r2, r3, #1
 8003236:	0013      	movs	r3, r2
 8003238:	009b      	lsls	r3, r3, #2
 800323a:	189b      	adds	r3, r3, r2
 800323c:	00db      	lsls	r3, r3, #3
 800323e:	687a      	ldr	r2, [r7, #4]
 8003240:	18d3      	adds	r3, r2, r3
 8003242:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	2201      	movs	r2, #1
 8003248:	705a      	strb	r2, [r3, #1]
 800324a:	e00f      	b.n	800326c <HAL_PCD_EP_ClrStall+0x6c>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800324c:	1cfb      	adds	r3, r7, #3
 800324e:	781b      	ldrb	r3, [r3, #0]
 8003250:	2207      	movs	r2, #7
 8003252:	401a      	ands	r2, r3
 8003254:	0013      	movs	r3, r2
 8003256:	009b      	lsls	r3, r3, #2
 8003258:	189b      	adds	r3, r3, r2
 800325a:	00db      	lsls	r3, r3, #3
 800325c:	3369      	adds	r3, #105	; 0x69
 800325e:	33ff      	adds	r3, #255	; 0xff
 8003260:	687a      	ldr	r2, [r7, #4]
 8003262:	18d3      	adds	r3, r2, r3
 8003264:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	2200      	movs	r2, #0
 800326a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	2200      	movs	r2, #0
 8003270:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003272:	1cfb      	adds	r3, r7, #3
 8003274:	781b      	ldrb	r3, [r3, #0]
 8003276:	2207      	movs	r2, #7
 8003278:	4013      	ands	r3, r2
 800327a:	b2da      	uxtb	r2, r3
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003280:	687a      	ldr	r2, [r7, #4]
 8003282:	23aa      	movs	r3, #170	; 0xaa
 8003284:	009b      	lsls	r3, r3, #2
 8003286:	5cd3      	ldrb	r3, [r2, r3]
 8003288:	2b01      	cmp	r3, #1
 800328a:	d101      	bne.n	8003290 <HAL_PCD_EP_ClrStall+0x90>
 800328c:	2302      	movs	r3, #2
 800328e:	e011      	b.n	80032b4 <HAL_PCD_EP_ClrStall+0xb4>
 8003290:	687a      	ldr	r2, [r7, #4]
 8003292:	23aa      	movs	r3, #170	; 0xaa
 8003294:	009b      	lsls	r3, r3, #2
 8003296:	2101      	movs	r1, #1
 8003298:	54d1      	strb	r1, [r2, r3]
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	68fa      	ldr	r2, [r7, #12]
 80032a0:	0011      	movs	r1, r2
 80032a2:	0018      	movs	r0, r3
 80032a4:	f005 fb18 	bl	80088d8 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80032a8:	687a      	ldr	r2, [r7, #4]
 80032aa:	23aa      	movs	r3, #170	; 0xaa
 80032ac:	009b      	lsls	r3, r3, #2
 80032ae:	2100      	movs	r1, #0
 80032b0:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 80032b2:	2300      	movs	r3, #0
}
 80032b4:	0018      	movs	r0, r3
 80032b6:	46bd      	mov	sp, r7
 80032b8:	b004      	add	sp, #16
 80032ba:	bd80      	pop	{r7, pc}

080032bc <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 80032bc:	b5b0      	push	{r4, r5, r7, lr}
 80032be:	b096      	sub	sp, #88	; 0x58
 80032c0:	af00      	add	r7, sp, #0
 80032c2:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80032c4:	f000 fbd8 	bl	8003a78 <PCD_EP_ISR_Handler+0x7bc>
  {
    wIstr = hpcd->Instance->ISTR;
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681a      	ldr	r2, [r3, #0]
 80032cc:	2056      	movs	r0, #86	; 0x56
 80032ce:	183b      	adds	r3, r7, r0
 80032d0:	2144      	movs	r1, #68	; 0x44
 80032d2:	5a52      	ldrh	r2, [r2, r1]
 80032d4:	801a      	strh	r2, [r3, #0]

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 80032d6:	183b      	adds	r3, r7, r0
 80032d8:	881b      	ldrh	r3, [r3, #0]
 80032da:	b2da      	uxtb	r2, r3
 80032dc:	2455      	movs	r4, #85	; 0x55
 80032de:	193b      	adds	r3, r7, r4
 80032e0:	210f      	movs	r1, #15
 80032e2:	400a      	ands	r2, r1
 80032e4:	701a      	strb	r2, [r3, #0]

    if (epindex == 0U)
 80032e6:	193b      	adds	r3, r7, r4
 80032e8:	781b      	ldrb	r3, [r3, #0]
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d000      	beq.n	80032f0 <PCD_EP_ISR_Handler+0x34>
 80032ee:	e179      	b.n	80035e4 <PCD_EP_ISR_Handler+0x328>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80032f0:	183b      	adds	r3, r7, r0
 80032f2:	881b      	ldrh	r3, [r3, #0]
 80032f4:	2210      	movs	r2, #16
 80032f6:	4013      	ands	r3, r2
 80032f8:	d154      	bne.n	80033a4 <PCD_EP_ISR_Handler+0xe8>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	881b      	ldrh	r3, [r3, #0]
 8003300:	b29a      	uxth	r2, r3
 8003302:	200e      	movs	r0, #14
 8003304:	183b      	adds	r3, r7, r0
 8003306:	49af      	ldr	r1, [pc, #700]	; (80035c4 <PCD_EP_ISR_Handler+0x308>)
 8003308:	400a      	ands	r2, r1
 800330a:	801a      	strh	r2, [r3, #0]
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	183a      	adds	r2, r7, r0
 8003312:	8812      	ldrh	r2, [r2, #0]
 8003314:	49ac      	ldr	r1, [pc, #688]	; (80035c8 <PCD_EP_ISR_Handler+0x30c>)
 8003316:	430a      	orrs	r2, r1
 8003318:	b292      	uxth	r2, r2
 800331a:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->IN_ep[0];
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	3328      	adds	r3, #40	; 0x28
 8003320:	64fb      	str	r3, [r7, #76]	; 0x4c

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	2250      	movs	r2, #80	; 0x50
 8003328:	5a9b      	ldrh	r3, [r3, r2]
 800332a:	b29b      	uxth	r3, r3
 800332c:	001a      	movs	r2, r3
 800332e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003330:	781b      	ldrb	r3, [r3, #0]
 8003332:	00db      	lsls	r3, r3, #3
 8003334:	18d2      	adds	r2, r2, r3
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	18d3      	adds	r3, r2, r3
 800333c:	4aa3      	ldr	r2, [pc, #652]	; (80035cc <PCD_EP_ISR_Handler+0x310>)
 800333e:	4694      	mov	ip, r2
 8003340:	4463      	add	r3, ip
 8003342:	881b      	ldrh	r3, [r3, #0]
 8003344:	059b      	lsls	r3, r3, #22
 8003346:	0d9a      	lsrs	r2, r3, #22
 8003348:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800334a:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 800334c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800334e:	695a      	ldr	r2, [r3, #20]
 8003350:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003352:	69db      	ldr	r3, [r3, #28]
 8003354:	18d2      	adds	r2, r2, r3
 8003356:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003358:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	2100      	movs	r1, #0
 800335e:	0018      	movs	r0, r3
 8003360:	f007 fbec 	bl	800ab3c <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	2224      	movs	r2, #36	; 0x24
 8003368:	5c9b      	ldrb	r3, [r3, r2]
 800336a:	b2db      	uxtb	r3, r3
 800336c:	2b00      	cmp	r3, #0
 800336e:	d101      	bne.n	8003374 <PCD_EP_ISR_Handler+0xb8>
 8003370:	f000 fb82 	bl	8003a78 <PCD_EP_ISR_Handler+0x7bc>
 8003374:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003376:	699b      	ldr	r3, [r3, #24]
 8003378:	2b00      	cmp	r3, #0
 800337a:	d001      	beq.n	8003380 <PCD_EP_ISR_Handler+0xc4>
 800337c:	f000 fb7c 	bl	8003a78 <PCD_EP_ISR_Handler+0x7bc>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	2224      	movs	r2, #36	; 0x24
 8003384:	5c9b      	ldrb	r3, [r3, r2]
 8003386:	b2db      	uxtb	r3, r3
 8003388:	2280      	movs	r2, #128	; 0x80
 800338a:	4252      	negs	r2, r2
 800338c:	4313      	orrs	r3, r2
 800338e:	b2da      	uxtb	r2, r3
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	b291      	uxth	r1, r2
 8003396:	224c      	movs	r2, #76	; 0x4c
 8003398:	5299      	strh	r1, [r3, r2]
          hpcd->USB_Address = 0U;
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	2224      	movs	r2, #36	; 0x24
 800339e:	2100      	movs	r1, #0
 80033a0:	5499      	strb	r1, [r3, r2]
 80033a2:	e369      	b.n	8003a78 <PCD_EP_ISR_Handler+0x7bc>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	3369      	adds	r3, #105	; 0x69
 80033a8:	33ff      	adds	r3, #255	; 0xff
 80033aa:	64fb      	str	r3, [r7, #76]	; 0x4c
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681a      	ldr	r2, [r3, #0]
 80033b0:	2152      	movs	r1, #82	; 0x52
 80033b2:	187b      	adds	r3, r7, r1
 80033b4:	8812      	ldrh	r2, [r2, #0]
 80033b6:	801a      	strh	r2, [r3, #0]

        if ((wEPVal & USB_EP_SETUP) != 0U)
 80033b8:	187b      	adds	r3, r7, r1
 80033ba:	881a      	ldrh	r2, [r3, #0]
 80033bc:	2380      	movs	r3, #128	; 0x80
 80033be:	011b      	lsls	r3, r3, #4
 80033c0:	4013      	ands	r3, r2
 80033c2:	d037      	beq.n	8003434 <PCD_EP_ISR_Handler+0x178>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	2250      	movs	r2, #80	; 0x50
 80033ca:	5a9b      	ldrh	r3, [r3, r2]
 80033cc:	b29b      	uxth	r3, r3
 80033ce:	001a      	movs	r2, r3
 80033d0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80033d2:	781b      	ldrb	r3, [r3, #0]
 80033d4:	00db      	lsls	r3, r3, #3
 80033d6:	18d2      	adds	r2, r2, r3
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	18d3      	adds	r3, r2, r3
 80033de:	4a7c      	ldr	r2, [pc, #496]	; (80035d0 <PCD_EP_ISR_Handler+0x314>)
 80033e0:	4694      	mov	ip, r2
 80033e2:	4463      	add	r3, ip
 80033e4:	881b      	ldrh	r3, [r3, #0]
 80033e6:	059b      	lsls	r3, r3, #22
 80033e8:	0d9a      	lsrs	r2, r3, #22
 80033ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80033ec:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	6818      	ldr	r0, [r3, #0]
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	22ac      	movs	r2, #172	; 0xac
 80033f6:	0092      	lsls	r2, r2, #2
 80033f8:	1899      	adds	r1, r3, r2
 80033fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80033fc:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 80033fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003400:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8003402:	b29b      	uxth	r3, r3
 8003404:	f005 fb96 	bl	8008b34 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	881b      	ldrh	r3, [r3, #0]
 800340e:	b29a      	uxth	r2, r3
 8003410:	2010      	movs	r0, #16
 8003412:	183b      	adds	r3, r7, r0
 8003414:	496f      	ldr	r1, [pc, #444]	; (80035d4 <PCD_EP_ISR_Handler+0x318>)
 8003416:	400a      	ands	r2, r1
 8003418:	801a      	strh	r2, [r3, #0]
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	183a      	adds	r2, r7, r0
 8003420:	8812      	ldrh	r2, [r2, #0]
 8003422:	2180      	movs	r1, #128	; 0x80
 8003424:	430a      	orrs	r2, r1
 8003426:	b292      	uxth	r2, r2
 8003428:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	0018      	movs	r0, r3
 800342e:	f007 fb4f 	bl	800aad0 <HAL_PCD_SetupStageCallback>
 8003432:	e321      	b.n	8003a78 <PCD_EP_ISR_Handler+0x7bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8003434:	2352      	movs	r3, #82	; 0x52
 8003436:	18fb      	adds	r3, r7, r3
 8003438:	2200      	movs	r2, #0
 800343a:	5e9b      	ldrsh	r3, [r3, r2]
 800343c:	2b00      	cmp	r3, #0
 800343e:	db00      	blt.n	8003442 <PCD_EP_ISR_Handler+0x186>
 8003440:	e31a      	b.n	8003a78 <PCD_EP_ISR_Handler+0x7bc>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	881b      	ldrh	r3, [r3, #0]
 8003448:	b29a      	uxth	r2, r3
 800344a:	201e      	movs	r0, #30
 800344c:	183b      	adds	r3, r7, r0
 800344e:	4961      	ldr	r1, [pc, #388]	; (80035d4 <PCD_EP_ISR_Handler+0x318>)
 8003450:	400a      	ands	r2, r1
 8003452:	801a      	strh	r2, [r3, #0]
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	183a      	adds	r2, r7, r0
 800345a:	8812      	ldrh	r2, [r2, #0]
 800345c:	2180      	movs	r1, #128	; 0x80
 800345e:	430a      	orrs	r2, r1
 8003460:	b292      	uxth	r2, r2
 8003462:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	2250      	movs	r2, #80	; 0x50
 800346a:	5a9b      	ldrh	r3, [r3, r2]
 800346c:	b29b      	uxth	r3, r3
 800346e:	001a      	movs	r2, r3
 8003470:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003472:	781b      	ldrb	r3, [r3, #0]
 8003474:	00db      	lsls	r3, r3, #3
 8003476:	18d2      	adds	r2, r2, r3
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	18d3      	adds	r3, r2, r3
 800347e:	4a54      	ldr	r2, [pc, #336]	; (80035d0 <PCD_EP_ISR_Handler+0x314>)
 8003480:	4694      	mov	ip, r2
 8003482:	4463      	add	r3, ip
 8003484:	881b      	ldrh	r3, [r3, #0]
 8003486:	059b      	lsls	r3, r3, #22
 8003488:	0d9a      	lsrs	r2, r3, #22
 800348a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800348c:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 800348e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003490:	69db      	ldr	r3, [r3, #28]
 8003492:	2b00      	cmp	r3, #0
 8003494:	d01a      	beq.n	80034cc <PCD_EP_ISR_Handler+0x210>
 8003496:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003498:	695b      	ldr	r3, [r3, #20]
 800349a:	2b00      	cmp	r3, #0
 800349c:	d016      	beq.n	80034cc <PCD_EP_ISR_Handler+0x210>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	6818      	ldr	r0, [r3, #0]
 80034a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80034a4:	6959      	ldr	r1, [r3, #20]
 80034a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80034a8:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 80034aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80034ac:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80034ae:	b29b      	uxth	r3, r3
 80034b0:	f005 fb40 	bl	8008b34 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 80034b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80034b6:	695a      	ldr	r2, [r3, #20]
 80034b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80034ba:	69db      	ldr	r3, [r3, #28]
 80034bc:	18d2      	adds	r2, r2, r3
 80034be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80034c0:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	2100      	movs	r1, #0
 80034c6:	0018      	movs	r0, r3
 80034c8:	f007 fb17 	bl	800aafa <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	881b      	ldrh	r3, [r3, #0]
 80034d2:	b29b      	uxth	r3, r3
 80034d4:	001a      	movs	r2, r3
 80034d6:	2380      	movs	r3, #128	; 0x80
 80034d8:	011b      	lsls	r3, r3, #4
 80034da:	4013      	ands	r3, r2
 80034dc:	d000      	beq.n	80034e0 <PCD_EP_ISR_Handler+0x224>
 80034de:	e2cb      	b.n	8003a78 <PCD_EP_ISR_Handler+0x7bc>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	61bb      	str	r3, [r7, #24]
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	2250      	movs	r2, #80	; 0x50
 80034ec:	5a9b      	ldrh	r3, [r3, r2]
 80034ee:	b29b      	uxth	r3, r3
 80034f0:	001a      	movs	r2, r3
 80034f2:	69bb      	ldr	r3, [r7, #24]
 80034f4:	189b      	adds	r3, r3, r2
 80034f6:	61bb      	str	r3, [r7, #24]
 80034f8:	69bb      	ldr	r3, [r7, #24]
 80034fa:	4a35      	ldr	r2, [pc, #212]	; (80035d0 <PCD_EP_ISR_Handler+0x314>)
 80034fc:	4694      	mov	ip, r2
 80034fe:	4463      	add	r3, ip
 8003500:	617b      	str	r3, [r7, #20]
 8003502:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003504:	691b      	ldr	r3, [r3, #16]
 8003506:	2b00      	cmp	r3, #0
 8003508:	d110      	bne.n	800352c <PCD_EP_ISR_Handler+0x270>
 800350a:	697b      	ldr	r3, [r7, #20]
 800350c:	881b      	ldrh	r3, [r3, #0]
 800350e:	b29b      	uxth	r3, r3
 8003510:	4a31      	ldr	r2, [pc, #196]	; (80035d8 <PCD_EP_ISR_Handler+0x31c>)
 8003512:	4013      	ands	r3, r2
 8003514:	b29a      	uxth	r2, r3
 8003516:	697b      	ldr	r3, [r7, #20]
 8003518:	801a      	strh	r2, [r3, #0]
 800351a:	697b      	ldr	r3, [r7, #20]
 800351c:	881b      	ldrh	r3, [r3, #0]
 800351e:	b29b      	uxth	r3, r3
 8003520:	4a29      	ldr	r2, [pc, #164]	; (80035c8 <PCD_EP_ISR_Handler+0x30c>)
 8003522:	4313      	orrs	r3, r2
 8003524:	b29a      	uxth	r2, r3
 8003526:	697b      	ldr	r3, [r7, #20]
 8003528:	801a      	strh	r2, [r3, #0]
 800352a:	e02b      	b.n	8003584 <PCD_EP_ISR_Handler+0x2c8>
 800352c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800352e:	691b      	ldr	r3, [r3, #16]
 8003530:	2b3e      	cmp	r3, #62	; 0x3e
 8003532:	d812      	bhi.n	800355a <PCD_EP_ISR_Handler+0x29e>
 8003534:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003536:	691b      	ldr	r3, [r3, #16]
 8003538:	085b      	lsrs	r3, r3, #1
 800353a:	647b      	str	r3, [r7, #68]	; 0x44
 800353c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800353e:	691b      	ldr	r3, [r3, #16]
 8003540:	2201      	movs	r2, #1
 8003542:	4013      	ands	r3, r2
 8003544:	d002      	beq.n	800354c <PCD_EP_ISR_Handler+0x290>
 8003546:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003548:	3301      	adds	r3, #1
 800354a:	647b      	str	r3, [r7, #68]	; 0x44
 800354c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800354e:	b29b      	uxth	r3, r3
 8003550:	029b      	lsls	r3, r3, #10
 8003552:	b29a      	uxth	r2, r3
 8003554:	697b      	ldr	r3, [r7, #20]
 8003556:	801a      	strh	r2, [r3, #0]
 8003558:	e014      	b.n	8003584 <PCD_EP_ISR_Handler+0x2c8>
 800355a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800355c:	691b      	ldr	r3, [r3, #16]
 800355e:	095b      	lsrs	r3, r3, #5
 8003560:	647b      	str	r3, [r7, #68]	; 0x44
 8003562:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003564:	691b      	ldr	r3, [r3, #16]
 8003566:	221f      	movs	r2, #31
 8003568:	4013      	ands	r3, r2
 800356a:	d102      	bne.n	8003572 <PCD_EP_ISR_Handler+0x2b6>
 800356c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800356e:	3b01      	subs	r3, #1
 8003570:	647b      	str	r3, [r7, #68]	; 0x44
 8003572:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003574:	b29b      	uxth	r3, r3
 8003576:	029b      	lsls	r3, r3, #10
 8003578:	b29b      	uxth	r3, r3
 800357a:	4a13      	ldr	r2, [pc, #76]	; (80035c8 <PCD_EP_ISR_Handler+0x30c>)
 800357c:	4313      	orrs	r3, r2
 800357e:	b29a      	uxth	r2, r3
 8003580:	697b      	ldr	r3, [r7, #20]
 8003582:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	881b      	ldrh	r3, [r3, #0]
 800358a:	b29a      	uxth	r2, r3
 800358c:	2012      	movs	r0, #18
 800358e:	183b      	adds	r3, r7, r0
 8003590:	4912      	ldr	r1, [pc, #72]	; (80035dc <PCD_EP_ISR_Handler+0x320>)
 8003592:	400a      	ands	r2, r1
 8003594:	801a      	strh	r2, [r3, #0]
 8003596:	183b      	adds	r3, r7, r0
 8003598:	183a      	adds	r2, r7, r0
 800359a:	8812      	ldrh	r2, [r2, #0]
 800359c:	2180      	movs	r1, #128	; 0x80
 800359e:	0149      	lsls	r1, r1, #5
 80035a0:	404a      	eors	r2, r1
 80035a2:	801a      	strh	r2, [r3, #0]
 80035a4:	183b      	adds	r3, r7, r0
 80035a6:	183a      	adds	r2, r7, r0
 80035a8:	8812      	ldrh	r2, [r2, #0]
 80035aa:	2180      	movs	r1, #128	; 0x80
 80035ac:	0189      	lsls	r1, r1, #6
 80035ae:	404a      	eors	r2, r1
 80035b0:	801a      	strh	r2, [r3, #0]
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	183a      	adds	r2, r7, r0
 80035b8:	8812      	ldrh	r2, [r2, #0]
 80035ba:	4909      	ldr	r1, [pc, #36]	; (80035e0 <PCD_EP_ISR_Handler+0x324>)
 80035bc:	430a      	orrs	r2, r1
 80035be:	b292      	uxth	r2, r2
 80035c0:	801a      	strh	r2, [r3, #0]
 80035c2:	e259      	b.n	8003a78 <PCD_EP_ISR_Handler+0x7bc>
 80035c4:	ffff8f0f 	.word	0xffff8f0f
 80035c8:	ffff8000 	.word	0xffff8000
 80035cc:	00000402 	.word	0x00000402
 80035d0:	00000406 	.word	0x00000406
 80035d4:	00000f8f 	.word	0x00000f8f
 80035d8:	ffff83ff 	.word	0xffff83ff
 80035dc:	ffffbf8f 	.word	0xffffbf8f
 80035e0:	ffff8080 	.word	0xffff8080
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	001a      	movs	r2, r3
 80035ea:	2055      	movs	r0, #85	; 0x55
 80035ec:	183b      	adds	r3, r7, r0
 80035ee:	781b      	ldrb	r3, [r3, #0]
 80035f0:	009b      	lsls	r3, r3, #2
 80035f2:	18d2      	adds	r2, r2, r3
 80035f4:	2152      	movs	r1, #82	; 0x52
 80035f6:	187b      	adds	r3, r7, r1
 80035f8:	8812      	ldrh	r2, [r2, #0]
 80035fa:	801a      	strh	r2, [r3, #0]

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80035fc:	187b      	adds	r3, r7, r1
 80035fe:	2200      	movs	r2, #0
 8003600:	5e9b      	ldrsh	r3, [r3, r2]
 8003602:	2b00      	cmp	r3, #0
 8003604:	db00      	blt.n	8003608 <PCD_EP_ISR_Handler+0x34c>
 8003606:	e0fa      	b.n	80037fe <PCD_EP_ISR_Handler+0x542>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	001a      	movs	r2, r3
 800360e:	183b      	adds	r3, r7, r0
 8003610:	781b      	ldrb	r3, [r3, #0]
 8003612:	009b      	lsls	r3, r3, #2
 8003614:	18d3      	adds	r3, r2, r3
 8003616:	881b      	ldrh	r3, [r3, #0]
 8003618:	b29a      	uxth	r2, r3
 800361a:	2450      	movs	r4, #80	; 0x50
 800361c:	193b      	adds	r3, r7, r4
 800361e:	49cf      	ldr	r1, [pc, #828]	; (800395c <PCD_EP_ISR_Handler+0x6a0>)
 8003620:	400a      	ands	r2, r1
 8003622:	801a      	strh	r2, [r3, #0]
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	001a      	movs	r2, r3
 800362a:	183b      	adds	r3, r7, r0
 800362c:	781b      	ldrb	r3, [r3, #0]
 800362e:	009b      	lsls	r3, r3, #2
 8003630:	18d3      	adds	r3, r2, r3
 8003632:	193a      	adds	r2, r7, r4
 8003634:	8812      	ldrh	r2, [r2, #0]
 8003636:	2180      	movs	r1, #128	; 0x80
 8003638:	430a      	orrs	r2, r1
 800363a:	b292      	uxth	r2, r2
 800363c:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 800363e:	183b      	adds	r3, r7, r0
 8003640:	781a      	ldrb	r2, [r3, #0]
 8003642:	0013      	movs	r3, r2
 8003644:	009b      	lsls	r3, r3, #2
 8003646:	189b      	adds	r3, r3, r2
 8003648:	00db      	lsls	r3, r3, #3
 800364a:	3369      	adds	r3, #105	; 0x69
 800364c:	33ff      	adds	r3, #255	; 0xff
 800364e:	687a      	ldr	r2, [r7, #4]
 8003650:	18d3      	adds	r3, r2, r3
 8003652:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8003654:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003656:	7b1b      	ldrb	r3, [r3, #12]
 8003658:	2b00      	cmp	r3, #0
 800365a:	d125      	bne.n	80036a8 <PCD_EP_ISR_Handler+0x3ec>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	2250      	movs	r2, #80	; 0x50
 8003662:	5a9b      	ldrh	r3, [r3, r2]
 8003664:	b29b      	uxth	r3, r3
 8003666:	001a      	movs	r2, r3
 8003668:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800366a:	781b      	ldrb	r3, [r3, #0]
 800366c:	00db      	lsls	r3, r3, #3
 800366e:	18d2      	adds	r2, r2, r3
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	18d3      	adds	r3, r2, r3
 8003676:	4aba      	ldr	r2, [pc, #744]	; (8003960 <PCD_EP_ISR_Handler+0x6a4>)
 8003678:	4694      	mov	ip, r2
 800367a:	4463      	add	r3, ip
 800367c:	881a      	ldrh	r2, [r3, #0]
 800367e:	2448      	movs	r4, #72	; 0x48
 8003680:	193b      	adds	r3, r7, r4
 8003682:	0592      	lsls	r2, r2, #22
 8003684:	0d92      	lsrs	r2, r2, #22
 8003686:	801a      	strh	r2, [r3, #0]

          if (count != 0U)
 8003688:	193b      	adds	r3, r7, r4
 800368a:	881b      	ldrh	r3, [r3, #0]
 800368c:	2b00      	cmp	r3, #0
 800368e:	d100      	bne.n	8003692 <PCD_EP_ISR_Handler+0x3d6>
 8003690:	e08d      	b.n	80037ae <PCD_EP_ISR_Handler+0x4f2>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	6818      	ldr	r0, [r3, #0]
 8003696:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003698:	6959      	ldr	r1, [r3, #20]
 800369a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800369c:	88da      	ldrh	r2, [r3, #6]
 800369e:	193b      	adds	r3, r7, r4
 80036a0:	881b      	ldrh	r3, [r3, #0]
 80036a2:	f005 fa47 	bl	8008b34 <USB_ReadPMA>
 80036a6:	e082      	b.n	80037ae <PCD_EP_ISR_Handler+0x4f2>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 80036a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80036aa:	78db      	ldrb	r3, [r3, #3]
 80036ac:	2b02      	cmp	r3, #2
 80036ae:	d10c      	bne.n	80036ca <PCD_EP_ISR_Handler+0x40e>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 80036b0:	2348      	movs	r3, #72	; 0x48
 80036b2:	18fc      	adds	r4, r7, r3
 80036b4:	2352      	movs	r3, #82	; 0x52
 80036b6:	18fb      	adds	r3, r7, r3
 80036b8:	881a      	ldrh	r2, [r3, #0]
 80036ba:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	0018      	movs	r0, r3
 80036c0:	f000 f9ee 	bl	8003aa0 <HAL_PCD_EP_DB_Receive>
 80036c4:	0003      	movs	r3, r0
 80036c6:	8023      	strh	r3, [r4, #0]
 80036c8:	e071      	b.n	80037ae <PCD_EP_ISR_Handler+0x4f2>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	001a      	movs	r2, r3
 80036d0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80036d2:	781b      	ldrb	r3, [r3, #0]
 80036d4:	009b      	lsls	r3, r3, #2
 80036d6:	18d3      	adds	r3, r2, r3
 80036d8:	881b      	ldrh	r3, [r3, #0]
 80036da:	b29a      	uxth	r2, r3
 80036dc:	204a      	movs	r0, #74	; 0x4a
 80036de:	183b      	adds	r3, r7, r0
 80036e0:	49a0      	ldr	r1, [pc, #640]	; (8003964 <PCD_EP_ISR_Handler+0x6a8>)
 80036e2:	400a      	ands	r2, r1
 80036e4:	801a      	strh	r2, [r3, #0]
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	001a      	movs	r2, r3
 80036ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80036ee:	781b      	ldrb	r3, [r3, #0]
 80036f0:	009b      	lsls	r3, r3, #2
 80036f2:	18d3      	adds	r3, r2, r3
 80036f4:	183a      	adds	r2, r7, r0
 80036f6:	8812      	ldrh	r2, [r2, #0]
 80036f8:	499b      	ldr	r1, [pc, #620]	; (8003968 <PCD_EP_ISR_Handler+0x6ac>)
 80036fa:	430a      	orrs	r2, r1
 80036fc:	b292      	uxth	r2, r2
 80036fe:	801a      	strh	r2, [r3, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	001a      	movs	r2, r3
 8003706:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003708:	781b      	ldrb	r3, [r3, #0]
 800370a:	009b      	lsls	r3, r3, #2
 800370c:	18d3      	adds	r3, r2, r3
 800370e:	881b      	ldrh	r3, [r3, #0]
 8003710:	b29b      	uxth	r3, r3
 8003712:	001a      	movs	r2, r3
 8003714:	2380      	movs	r3, #128	; 0x80
 8003716:	01db      	lsls	r3, r3, #7
 8003718:	4013      	ands	r3, r2
 800371a:	d024      	beq.n	8003766 <PCD_EP_ISR_Handler+0x4aa>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	2250      	movs	r2, #80	; 0x50
 8003722:	5a9b      	ldrh	r3, [r3, r2]
 8003724:	b29b      	uxth	r3, r3
 8003726:	001a      	movs	r2, r3
 8003728:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800372a:	781b      	ldrb	r3, [r3, #0]
 800372c:	00db      	lsls	r3, r3, #3
 800372e:	18d2      	adds	r2, r2, r3
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	18d3      	adds	r3, r2, r3
 8003736:	4a8d      	ldr	r2, [pc, #564]	; (800396c <PCD_EP_ISR_Handler+0x6b0>)
 8003738:	4694      	mov	ip, r2
 800373a:	4463      	add	r3, ip
 800373c:	881a      	ldrh	r2, [r3, #0]
 800373e:	2448      	movs	r4, #72	; 0x48
 8003740:	193b      	adds	r3, r7, r4
 8003742:	0592      	lsls	r2, r2, #22
 8003744:	0d92      	lsrs	r2, r2, #22
 8003746:	801a      	strh	r2, [r3, #0]

              if (count != 0U)
 8003748:	193b      	adds	r3, r7, r4
 800374a:	881b      	ldrh	r3, [r3, #0]
 800374c:	2b00      	cmp	r3, #0
 800374e:	d02e      	beq.n	80037ae <PCD_EP_ISR_Handler+0x4f2>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	6818      	ldr	r0, [r3, #0]
 8003754:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003756:	6959      	ldr	r1, [r3, #20]
 8003758:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800375a:	891a      	ldrh	r2, [r3, #8]
 800375c:	193b      	adds	r3, r7, r4
 800375e:	881b      	ldrh	r3, [r3, #0]
 8003760:	f005 f9e8 	bl	8008b34 <USB_ReadPMA>
 8003764:	e023      	b.n	80037ae <PCD_EP_ISR_Handler+0x4f2>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	2250      	movs	r2, #80	; 0x50
 800376c:	5a9b      	ldrh	r3, [r3, r2]
 800376e:	b29b      	uxth	r3, r3
 8003770:	001a      	movs	r2, r3
 8003772:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003774:	781b      	ldrb	r3, [r3, #0]
 8003776:	00db      	lsls	r3, r3, #3
 8003778:	18d2      	adds	r2, r2, r3
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	18d3      	adds	r3, r2, r3
 8003780:	4a77      	ldr	r2, [pc, #476]	; (8003960 <PCD_EP_ISR_Handler+0x6a4>)
 8003782:	4694      	mov	ip, r2
 8003784:	4463      	add	r3, ip
 8003786:	881a      	ldrh	r2, [r3, #0]
 8003788:	2448      	movs	r4, #72	; 0x48
 800378a:	193b      	adds	r3, r7, r4
 800378c:	0592      	lsls	r2, r2, #22
 800378e:	0d92      	lsrs	r2, r2, #22
 8003790:	801a      	strh	r2, [r3, #0]

              if (count != 0U)
 8003792:	193b      	adds	r3, r7, r4
 8003794:	881b      	ldrh	r3, [r3, #0]
 8003796:	2b00      	cmp	r3, #0
 8003798:	d009      	beq.n	80037ae <PCD_EP_ISR_Handler+0x4f2>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	6818      	ldr	r0, [r3, #0]
 800379e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80037a0:	6959      	ldr	r1, [r3, #20]
 80037a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80037a4:	895a      	ldrh	r2, [r3, #10]
 80037a6:	193b      	adds	r3, r7, r4
 80037a8:	881b      	ldrh	r3, [r3, #0]
 80037aa:	f005 f9c3 	bl	8008b34 <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 80037ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80037b0:	69da      	ldr	r2, [r3, #28]
 80037b2:	2148      	movs	r1, #72	; 0x48
 80037b4:	187b      	adds	r3, r7, r1
 80037b6:	881b      	ldrh	r3, [r3, #0]
 80037b8:	18d2      	adds	r2, r2, r3
 80037ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80037bc:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 80037be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80037c0:	695a      	ldr	r2, [r3, #20]
 80037c2:	187b      	adds	r3, r7, r1
 80037c4:	881b      	ldrh	r3, [r3, #0]
 80037c6:	18d2      	adds	r2, r2, r3
 80037c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80037ca:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80037cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80037ce:	699b      	ldr	r3, [r3, #24]
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d005      	beq.n	80037e0 <PCD_EP_ISR_Handler+0x524>
 80037d4:	187b      	adds	r3, r7, r1
 80037d6:	881a      	ldrh	r2, [r3, #0]
 80037d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80037da:	691b      	ldr	r3, [r3, #16]
 80037dc:	429a      	cmp	r2, r3
 80037de:	d207      	bcs.n	80037f0 <PCD_EP_ISR_Handler+0x534>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80037e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80037e2:	781a      	ldrb	r2, [r3, #0]
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	0011      	movs	r1, r2
 80037e8:	0018      	movs	r0, r3
 80037ea:	f007 f986 	bl	800aafa <HAL_PCD_DataOutStageCallback>
 80037ee:	e006      	b.n	80037fe <PCD_EP_ISR_Handler+0x542>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80037f6:	0011      	movs	r1, r2
 80037f8:	0018      	movs	r0, r3
 80037fa:	f003 ff63 	bl	80076c4 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 80037fe:	2452      	movs	r4, #82	; 0x52
 8003800:	193b      	adds	r3, r7, r4
 8003802:	881b      	ldrh	r3, [r3, #0]
 8003804:	2280      	movs	r2, #128	; 0x80
 8003806:	4013      	ands	r3, r2
 8003808:	d100      	bne.n	800380c <PCD_EP_ISR_Handler+0x550>
 800380a:	e135      	b.n	8003a78 <PCD_EP_ISR_Handler+0x7bc>
      {
        ep = &hpcd->IN_ep[epindex];
 800380c:	2055      	movs	r0, #85	; 0x55
 800380e:	183b      	adds	r3, r7, r0
 8003810:	781b      	ldrb	r3, [r3, #0]
 8003812:	1c5a      	adds	r2, r3, #1
 8003814:	0013      	movs	r3, r2
 8003816:	009b      	lsls	r3, r3, #2
 8003818:	189b      	adds	r3, r3, r2
 800381a:	00db      	lsls	r3, r3, #3
 800381c:	687a      	ldr	r2, [r7, #4]
 800381e:	18d3      	adds	r3, r2, r3
 8003820:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	001a      	movs	r2, r3
 8003828:	183b      	adds	r3, r7, r0
 800382a:	781b      	ldrb	r3, [r3, #0]
 800382c:	009b      	lsls	r3, r3, #2
 800382e:	18d3      	adds	r3, r2, r3
 8003830:	881b      	ldrh	r3, [r3, #0]
 8003832:	b29a      	uxth	r2, r3
 8003834:	2542      	movs	r5, #66	; 0x42
 8003836:	197b      	adds	r3, r7, r5
 8003838:	494d      	ldr	r1, [pc, #308]	; (8003970 <PCD_EP_ISR_Handler+0x6b4>)
 800383a:	400a      	ands	r2, r1
 800383c:	801a      	strh	r2, [r3, #0]
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	001a      	movs	r2, r3
 8003844:	183b      	adds	r3, r7, r0
 8003846:	781b      	ldrb	r3, [r3, #0]
 8003848:	009b      	lsls	r3, r3, #2
 800384a:	18d3      	adds	r3, r2, r3
 800384c:	197a      	adds	r2, r7, r5
 800384e:	8812      	ldrh	r2, [r2, #0]
 8003850:	4948      	ldr	r1, [pc, #288]	; (8003974 <PCD_EP_ISR_Handler+0x6b8>)
 8003852:	430a      	orrs	r2, r1
 8003854:	b292      	uxth	r2, r2
 8003856:	801a      	strh	r2, [r3, #0]

        if (ep->type != EP_TYPE_BULK)
 8003858:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800385a:	78db      	ldrb	r3, [r3, #3]
 800385c:	2b02      	cmp	r3, #2
 800385e:	d100      	bne.n	8003862 <PCD_EP_ISR_Handler+0x5a6>
 8003860:	e0ad      	b.n	80039be <PCD_EP_ISR_Handler+0x702>
        {
          ep->xfer_len = 0U;
 8003862:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003864:	2200      	movs	r2, #0
 8003866:	619a      	str	r2, [r3, #24]

          if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003868:	193b      	adds	r3, r7, r4
 800386a:	881b      	ldrh	r3, [r3, #0]
 800386c:	2240      	movs	r2, #64	; 0x40
 800386e:	4013      	ands	r3, r2
 8003870:	d046      	beq.n	8003900 <PCD_EP_ISR_Handler+0x644>
          {
            PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003872:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003874:	785b      	ldrb	r3, [r3, #1]
 8003876:	2b00      	cmp	r3, #0
 8003878:	d125      	bne.n	80038c6 <PCD_EP_ISR_Handler+0x60a>
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	627b      	str	r3, [r7, #36]	; 0x24
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	2250      	movs	r2, #80	; 0x50
 8003886:	5a9b      	ldrh	r3, [r3, r2]
 8003888:	b29b      	uxth	r3, r3
 800388a:	001a      	movs	r2, r3
 800388c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800388e:	189b      	adds	r3, r3, r2
 8003890:	627b      	str	r3, [r7, #36]	; 0x24
 8003892:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003894:	781b      	ldrb	r3, [r3, #0]
 8003896:	00da      	lsls	r2, r3, #3
 8003898:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800389a:	18d3      	adds	r3, r2, r3
 800389c:	4a33      	ldr	r2, [pc, #204]	; (800396c <PCD_EP_ISR_Handler+0x6b0>)
 800389e:	4694      	mov	ip, r2
 80038a0:	4463      	add	r3, ip
 80038a2:	623b      	str	r3, [r7, #32]
 80038a4:	6a3b      	ldr	r3, [r7, #32]
 80038a6:	881b      	ldrh	r3, [r3, #0]
 80038a8:	b29b      	uxth	r3, r3
 80038aa:	4a33      	ldr	r2, [pc, #204]	; (8003978 <PCD_EP_ISR_Handler+0x6bc>)
 80038ac:	4013      	ands	r3, r2
 80038ae:	b29a      	uxth	r2, r3
 80038b0:	6a3b      	ldr	r3, [r7, #32]
 80038b2:	801a      	strh	r2, [r3, #0]
 80038b4:	6a3b      	ldr	r3, [r7, #32]
 80038b6:	881b      	ldrh	r3, [r3, #0]
 80038b8:	b29b      	uxth	r3, r3
 80038ba:	4a2e      	ldr	r2, [pc, #184]	; (8003974 <PCD_EP_ISR_Handler+0x6b8>)
 80038bc:	4313      	orrs	r3, r2
 80038be:	b29a      	uxth	r2, r3
 80038c0:	6a3b      	ldr	r3, [r7, #32]
 80038c2:	801a      	strh	r2, [r3, #0]
 80038c4:	e073      	b.n	80039ae <PCD_EP_ISR_Handler+0x6f2>
 80038c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80038c8:	785b      	ldrb	r3, [r3, #1]
 80038ca:	2b01      	cmp	r3, #1
 80038cc:	d16f      	bne.n	80039ae <PCD_EP_ISR_Handler+0x6f2>
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	2250      	movs	r2, #80	; 0x50
 80038da:	5a9b      	ldrh	r3, [r3, r2]
 80038dc:	b29b      	uxth	r3, r3
 80038de:	001a      	movs	r2, r3
 80038e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038e2:	189b      	adds	r3, r3, r2
 80038e4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80038e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80038e8:	781b      	ldrb	r3, [r3, #0]
 80038ea:	00da      	lsls	r2, r3, #3
 80038ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038ee:	18d3      	adds	r3, r2, r3
 80038f0:	4a1e      	ldr	r2, [pc, #120]	; (800396c <PCD_EP_ISR_Handler+0x6b0>)
 80038f2:	4694      	mov	ip, r2
 80038f4:	4463      	add	r3, ip
 80038f6:	62bb      	str	r3, [r7, #40]	; 0x28
 80038f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038fa:	2200      	movs	r2, #0
 80038fc:	801a      	strh	r2, [r3, #0]
 80038fe:	e056      	b.n	80039ae <PCD_EP_ISR_Handler+0x6f2>
          }
          else
          {
            PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003906:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003908:	785b      	ldrb	r3, [r3, #1]
 800390a:	2b00      	cmp	r3, #0
 800390c:	d136      	bne.n	800397c <PCD_EP_ISR_Handler+0x6c0>
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	637b      	str	r3, [r7, #52]	; 0x34
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	2250      	movs	r2, #80	; 0x50
 800391a:	5a9b      	ldrh	r3, [r3, r2]
 800391c:	b29b      	uxth	r3, r3
 800391e:	001a      	movs	r2, r3
 8003920:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003922:	189b      	adds	r3, r3, r2
 8003924:	637b      	str	r3, [r7, #52]	; 0x34
 8003926:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003928:	781b      	ldrb	r3, [r3, #0]
 800392a:	00da      	lsls	r2, r3, #3
 800392c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800392e:	18d3      	adds	r3, r2, r3
 8003930:	4a0b      	ldr	r2, [pc, #44]	; (8003960 <PCD_EP_ISR_Handler+0x6a4>)
 8003932:	4694      	mov	ip, r2
 8003934:	4463      	add	r3, ip
 8003936:	633b      	str	r3, [r7, #48]	; 0x30
 8003938:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800393a:	881b      	ldrh	r3, [r3, #0]
 800393c:	b29b      	uxth	r3, r3
 800393e:	4a0e      	ldr	r2, [pc, #56]	; (8003978 <PCD_EP_ISR_Handler+0x6bc>)
 8003940:	4013      	ands	r3, r2
 8003942:	b29a      	uxth	r2, r3
 8003944:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003946:	801a      	strh	r2, [r3, #0]
 8003948:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800394a:	881b      	ldrh	r3, [r3, #0]
 800394c:	b29b      	uxth	r3, r3
 800394e:	4a09      	ldr	r2, [pc, #36]	; (8003974 <PCD_EP_ISR_Handler+0x6b8>)
 8003950:	4313      	orrs	r3, r2
 8003952:	b29a      	uxth	r2, r3
 8003954:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003956:	801a      	strh	r2, [r3, #0]
 8003958:	e029      	b.n	80039ae <PCD_EP_ISR_Handler+0x6f2>
 800395a:	46c0      	nop			; (mov r8, r8)
 800395c:	00000f8f 	.word	0x00000f8f
 8003960:	00000406 	.word	0x00000406
 8003964:	ffff8f8f 	.word	0xffff8f8f
 8003968:	ffff80c0 	.word	0xffff80c0
 800396c:	00000402 	.word	0x00000402
 8003970:	ffff8f0f 	.word	0xffff8f0f
 8003974:	ffff8000 	.word	0xffff8000
 8003978:	ffff83ff 	.word	0xffff83ff
 800397c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800397e:	785b      	ldrb	r3, [r3, #1]
 8003980:	2b01      	cmp	r3, #1
 8003982:	d114      	bne.n	80039ae <PCD_EP_ISR_Handler+0x6f2>
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	2250      	movs	r2, #80	; 0x50
 800398a:	5a9b      	ldrh	r3, [r3, r2]
 800398c:	b29b      	uxth	r3, r3
 800398e:	001a      	movs	r2, r3
 8003990:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003992:	189b      	adds	r3, r3, r2
 8003994:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003996:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003998:	781b      	ldrb	r3, [r3, #0]
 800399a:	00da      	lsls	r2, r3, #3
 800399c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800399e:	18d3      	adds	r3, r2, r3
 80039a0:	4a3d      	ldr	r2, [pc, #244]	; (8003a98 <PCD_EP_ISR_Handler+0x7dc>)
 80039a2:	4694      	mov	ip, r2
 80039a4:	4463      	add	r3, ip
 80039a6:	63bb      	str	r3, [r7, #56]	; 0x38
 80039a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039aa:	2200      	movs	r2, #0
 80039ac:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80039ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80039b0:	781a      	ldrb	r2, [r3, #0]
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	0011      	movs	r1, r2
 80039b6:	0018      	movs	r0, r3
 80039b8:	f007 f8c0 	bl	800ab3c <HAL_PCD_DataInStageCallback>
 80039bc:	e05c      	b.n	8003a78 <PCD_EP_ISR_Handler+0x7bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        /* Manage Bulk Single Buffer Transaction */
        if ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U))
 80039be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80039c0:	78db      	ldrb	r3, [r3, #3]
 80039c2:	2b02      	cmp	r3, #2
 80039c4:	d150      	bne.n	8003a68 <PCD_EP_ISR_Handler+0x7ac>
 80039c6:	2352      	movs	r3, #82	; 0x52
 80039c8:	18fb      	adds	r3, r7, r3
 80039ca:	881a      	ldrh	r2, [r3, #0]
 80039cc:	2380      	movs	r3, #128	; 0x80
 80039ce:	005b      	lsls	r3, r3, #1
 80039d0:	4013      	ands	r3, r2
 80039d2:	d149      	bne.n	8003a68 <PCD_EP_ISR_Handler+0x7ac>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	2250      	movs	r2, #80	; 0x50
 80039da:	5a9b      	ldrh	r3, [r3, r2]
 80039dc:	b29b      	uxth	r3, r3
 80039de:	001a      	movs	r2, r3
 80039e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80039e2:	781b      	ldrb	r3, [r3, #0]
 80039e4:	00db      	lsls	r3, r3, #3
 80039e6:	18d2      	adds	r2, r2, r3
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	18d3      	adds	r3, r2, r3
 80039ee:	4a2b      	ldr	r2, [pc, #172]	; (8003a9c <PCD_EP_ISR_Handler+0x7e0>)
 80039f0:	4694      	mov	ip, r2
 80039f2:	4463      	add	r3, ip
 80039f4:	881a      	ldrh	r2, [r3, #0]
 80039f6:	2140      	movs	r1, #64	; 0x40
 80039f8:	187b      	adds	r3, r7, r1
 80039fa:	0592      	lsls	r2, r2, #22
 80039fc:	0d92      	lsrs	r2, r2, #22
 80039fe:	801a      	strh	r2, [r3, #0]

          if (ep->xfer_len > TxByteNbre)
 8003a00:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003a02:	699a      	ldr	r2, [r3, #24]
 8003a04:	187b      	adds	r3, r7, r1
 8003a06:	881b      	ldrh	r3, [r3, #0]
 8003a08:	429a      	cmp	r2, r3
 8003a0a:	d907      	bls.n	8003a1c <PCD_EP_ISR_Handler+0x760>
          {
            ep->xfer_len -= TxByteNbre;
 8003a0c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003a0e:	699a      	ldr	r2, [r3, #24]
 8003a10:	187b      	adds	r3, r7, r1
 8003a12:	881b      	ldrh	r3, [r3, #0]
 8003a14:	1ad2      	subs	r2, r2, r3
 8003a16:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003a18:	619a      	str	r2, [r3, #24]
 8003a1a:	e002      	b.n	8003a22 <PCD_EP_ISR_Handler+0x766>
          }
          else
          {
            ep->xfer_len = 0U;
 8003a1c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003a1e:	2200      	movs	r2, #0
 8003a20:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 8003a22:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003a24:	699b      	ldr	r3, [r3, #24]
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d107      	bne.n	8003a3a <PCD_EP_ISR_Handler+0x77e>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003a2a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003a2c:	781a      	ldrb	r2, [r3, #0]
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	0011      	movs	r1, r2
 8003a32:	0018      	movs	r0, r3
 8003a34:	f007 f882 	bl	800ab3c <HAL_PCD_DataInStageCallback>
 8003a38:	e01e      	b.n	8003a78 <PCD_EP_ISR_Handler+0x7bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 8003a3a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003a3c:	695a      	ldr	r2, [r3, #20]
 8003a3e:	2140      	movs	r1, #64	; 0x40
 8003a40:	187b      	adds	r3, r7, r1
 8003a42:	881b      	ldrh	r3, [r3, #0]
 8003a44:	18d2      	adds	r2, r2, r3
 8003a46:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003a48:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 8003a4a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003a4c:	69da      	ldr	r2, [r3, #28]
 8003a4e:	187b      	adds	r3, r7, r1
 8003a50:	881b      	ldrh	r3, [r3, #0]
 8003a52:	18d2      	adds	r2, r2, r3
 8003a54:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003a56:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003a5e:	0011      	movs	r1, r2
 8003a60:	0018      	movs	r0, r3
 8003a62:	f003 fe2f 	bl	80076c4 <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 8003a66:	e007      	b.n	8003a78 <PCD_EP_ISR_Handler+0x7bc>
          }
        }
        /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8003a68:	2352      	movs	r3, #82	; 0x52
 8003a6a:	18fb      	adds	r3, r7, r3
 8003a6c:	881a      	ldrh	r2, [r3, #0]
 8003a6e:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	0018      	movs	r0, r3
 8003a74:	f000 f930 	bl	8003cd8 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	2244      	movs	r2, #68	; 0x44
 8003a7e:	5a9b      	ldrh	r3, [r3, r2]
 8003a80:	b29b      	uxth	r3, r3
 8003a82:	b21b      	sxth	r3, r3
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	da01      	bge.n	8003a8c <PCD_EP_ISR_Handler+0x7d0>
 8003a88:	f7ff fc1e 	bl	80032c8 <PCD_EP_ISR_Handler+0xc>
        }
      }
    }
  }

  return HAL_OK;
 8003a8c:	2300      	movs	r3, #0
}
 8003a8e:	0018      	movs	r0, r3
 8003a90:	46bd      	mov	sp, r7
 8003a92:	b016      	add	sp, #88	; 0x58
 8003a94:	bdb0      	pop	{r4, r5, r7, pc}
 8003a96:	46c0      	nop			; (mov r8, r8)
 8003a98:	00000406 	.word	0x00000406
 8003a9c:	00000402 	.word	0x00000402

08003aa0 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8003aa0:	b590      	push	{r4, r7, lr}
 8003aa2:	b089      	sub	sp, #36	; 0x24
 8003aa4:	af00      	add	r7, sp, #0
 8003aa6:	60f8      	str	r0, [r7, #12]
 8003aa8:	60b9      	str	r1, [r7, #8]
 8003aaa:	1dbb      	adds	r3, r7, #6
 8003aac:	801a      	strh	r2, [r3, #0]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003aae:	1dbb      	adds	r3, r7, #6
 8003ab0:	881a      	ldrh	r2, [r3, #0]
 8003ab2:	2380      	movs	r3, #128	; 0x80
 8003ab4:	01db      	lsls	r3, r3, #7
 8003ab6:	4013      	ands	r3, r2
 8003ab8:	d100      	bne.n	8003abc <HAL_PCD_EP_DB_Receive+0x1c>
 8003aba:	e07d      	b.n	8003bb8 <HAL_PCD_EP_DB_Receive+0x118>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	2250      	movs	r2, #80	; 0x50
 8003ac2:	5a9b      	ldrh	r3, [r3, r2]
 8003ac4:	b29b      	uxth	r3, r3
 8003ac6:	001a      	movs	r2, r3
 8003ac8:	68bb      	ldr	r3, [r7, #8]
 8003aca:	781b      	ldrb	r3, [r3, #0]
 8003acc:	00db      	lsls	r3, r3, #3
 8003ace:	18d2      	adds	r2, r2, r3
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	18d3      	adds	r3, r2, r3
 8003ad6:	4a7a      	ldr	r2, [pc, #488]	; (8003cc0 <HAL_PCD_EP_DB_Receive+0x220>)
 8003ad8:	4694      	mov	ip, r2
 8003ada:	4463      	add	r3, ip
 8003adc:	881a      	ldrh	r2, [r3, #0]
 8003ade:	211a      	movs	r1, #26
 8003ae0:	187b      	adds	r3, r7, r1
 8003ae2:	0592      	lsls	r2, r2, #22
 8003ae4:	0d92      	lsrs	r2, r2, #22
 8003ae6:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= count)
 8003ae8:	68bb      	ldr	r3, [r7, #8]
 8003aea:	699a      	ldr	r2, [r3, #24]
 8003aec:	187b      	adds	r3, r7, r1
 8003aee:	881b      	ldrh	r3, [r3, #0]
 8003af0:	429a      	cmp	r2, r3
 8003af2:	d307      	bcc.n	8003b04 <HAL_PCD_EP_DB_Receive+0x64>
    {
      ep->xfer_len -= count;
 8003af4:	68bb      	ldr	r3, [r7, #8]
 8003af6:	699a      	ldr	r2, [r3, #24]
 8003af8:	187b      	adds	r3, r7, r1
 8003afa:	881b      	ldrh	r3, [r3, #0]
 8003afc:	1ad2      	subs	r2, r2, r3
 8003afe:	68bb      	ldr	r3, [r7, #8]
 8003b00:	619a      	str	r2, [r3, #24]
 8003b02:	e002      	b.n	8003b0a <HAL_PCD_EP_DB_Receive+0x6a>
    }
    else
    {
      ep->xfer_len = 0U;
 8003b04:	68bb      	ldr	r3, [r7, #8]
 8003b06:	2200      	movs	r2, #0
 8003b08:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8003b0a:	68bb      	ldr	r3, [r7, #8]
 8003b0c:	699b      	ldr	r3, [r3, #24]
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d121      	bne.n	8003b56 <HAL_PCD_EP_DB_Receive+0xb6>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	001a      	movs	r2, r3
 8003b18:	68bb      	ldr	r3, [r7, #8]
 8003b1a:	781b      	ldrb	r3, [r3, #0]
 8003b1c:	009b      	lsls	r3, r3, #2
 8003b1e:	18d3      	adds	r3, r2, r3
 8003b20:	881b      	ldrh	r3, [r3, #0]
 8003b22:	b29a      	uxth	r2, r3
 8003b24:	2018      	movs	r0, #24
 8003b26:	183b      	adds	r3, r7, r0
 8003b28:	4966      	ldr	r1, [pc, #408]	; (8003cc4 <HAL_PCD_EP_DB_Receive+0x224>)
 8003b2a:	400a      	ands	r2, r1
 8003b2c:	801a      	strh	r2, [r3, #0]
 8003b2e:	183b      	adds	r3, r7, r0
 8003b30:	183a      	adds	r2, r7, r0
 8003b32:	8812      	ldrh	r2, [r2, #0]
 8003b34:	2180      	movs	r1, #128	; 0x80
 8003b36:	0189      	lsls	r1, r1, #6
 8003b38:	404a      	eors	r2, r1
 8003b3a:	801a      	strh	r2, [r3, #0]
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	001a      	movs	r2, r3
 8003b42:	68bb      	ldr	r3, [r7, #8]
 8003b44:	781b      	ldrb	r3, [r3, #0]
 8003b46:	009b      	lsls	r3, r3, #2
 8003b48:	18d3      	adds	r3, r2, r3
 8003b4a:	183a      	adds	r2, r7, r0
 8003b4c:	8812      	ldrh	r2, [r2, #0]
 8003b4e:	495e      	ldr	r1, [pc, #376]	; (8003cc8 <HAL_PCD_EP_DB_Receive+0x228>)
 8003b50:	430a      	orrs	r2, r1
 8003b52:	b292      	uxth	r2, r2
 8003b54:	801a      	strh	r2, [r3, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003b56:	1dbb      	adds	r3, r7, #6
 8003b58:	881b      	ldrh	r3, [r3, #0]
 8003b5a:	2240      	movs	r2, #64	; 0x40
 8003b5c:	4013      	ands	r3, r2
 8003b5e:	d01a      	beq.n	8003b96 <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	001a      	movs	r2, r3
 8003b66:	68bb      	ldr	r3, [r7, #8]
 8003b68:	781b      	ldrb	r3, [r3, #0]
 8003b6a:	009b      	lsls	r3, r3, #2
 8003b6c:	18d3      	adds	r3, r2, r3
 8003b6e:	881b      	ldrh	r3, [r3, #0]
 8003b70:	b29a      	uxth	r2, r3
 8003b72:	2016      	movs	r0, #22
 8003b74:	183b      	adds	r3, r7, r0
 8003b76:	4955      	ldr	r1, [pc, #340]	; (8003ccc <HAL_PCD_EP_DB_Receive+0x22c>)
 8003b78:	400a      	ands	r2, r1
 8003b7a:	801a      	strh	r2, [r3, #0]
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	001a      	movs	r2, r3
 8003b82:	68bb      	ldr	r3, [r7, #8]
 8003b84:	781b      	ldrb	r3, [r3, #0]
 8003b86:	009b      	lsls	r3, r3, #2
 8003b88:	18d3      	adds	r3, r2, r3
 8003b8a:	183a      	adds	r2, r7, r0
 8003b8c:	8812      	ldrh	r2, [r2, #0]
 8003b8e:	4950      	ldr	r1, [pc, #320]	; (8003cd0 <HAL_PCD_EP_DB_Receive+0x230>)
 8003b90:	430a      	orrs	r2, r1
 8003b92:	b292      	uxth	r2, r2
 8003b94:	801a      	strh	r2, [r3, #0]
    }

    if (count != 0U)
 8003b96:	241a      	movs	r4, #26
 8003b98:	193b      	adds	r3, r7, r4
 8003b9a:	881b      	ldrh	r3, [r3, #0]
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d100      	bne.n	8003ba2 <HAL_PCD_EP_DB_Receive+0x102>
 8003ba0:	e086      	b.n	8003cb0 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	6818      	ldr	r0, [r3, #0]
 8003ba6:	68bb      	ldr	r3, [r7, #8]
 8003ba8:	6959      	ldr	r1, [r3, #20]
 8003baa:	68bb      	ldr	r3, [r7, #8]
 8003bac:	891a      	ldrh	r2, [r3, #8]
 8003bae:	193b      	adds	r3, r7, r4
 8003bb0:	881b      	ldrh	r3, [r3, #0]
 8003bb2:	f004 ffbf 	bl	8008b34 <USB_ReadPMA>
 8003bb6:	e07b      	b.n	8003cb0 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	2250      	movs	r2, #80	; 0x50
 8003bbe:	5a9b      	ldrh	r3, [r3, r2]
 8003bc0:	b29b      	uxth	r3, r3
 8003bc2:	001a      	movs	r2, r3
 8003bc4:	68bb      	ldr	r3, [r7, #8]
 8003bc6:	781b      	ldrb	r3, [r3, #0]
 8003bc8:	00db      	lsls	r3, r3, #3
 8003bca:	18d2      	adds	r2, r2, r3
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	18d3      	adds	r3, r2, r3
 8003bd2:	4a40      	ldr	r2, [pc, #256]	; (8003cd4 <HAL_PCD_EP_DB_Receive+0x234>)
 8003bd4:	4694      	mov	ip, r2
 8003bd6:	4463      	add	r3, ip
 8003bd8:	881a      	ldrh	r2, [r3, #0]
 8003bda:	211a      	movs	r1, #26
 8003bdc:	187b      	adds	r3, r7, r1
 8003bde:	0592      	lsls	r2, r2, #22
 8003be0:	0d92      	lsrs	r2, r2, #22
 8003be2:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= count)
 8003be4:	68bb      	ldr	r3, [r7, #8]
 8003be6:	699a      	ldr	r2, [r3, #24]
 8003be8:	187b      	adds	r3, r7, r1
 8003bea:	881b      	ldrh	r3, [r3, #0]
 8003bec:	429a      	cmp	r2, r3
 8003bee:	d307      	bcc.n	8003c00 <HAL_PCD_EP_DB_Receive+0x160>
    {
      ep->xfer_len -= count;
 8003bf0:	68bb      	ldr	r3, [r7, #8]
 8003bf2:	699a      	ldr	r2, [r3, #24]
 8003bf4:	187b      	adds	r3, r7, r1
 8003bf6:	881b      	ldrh	r3, [r3, #0]
 8003bf8:	1ad2      	subs	r2, r2, r3
 8003bfa:	68bb      	ldr	r3, [r7, #8]
 8003bfc:	619a      	str	r2, [r3, #24]
 8003bfe:	e002      	b.n	8003c06 <HAL_PCD_EP_DB_Receive+0x166>
    }
    else
    {
      ep->xfer_len = 0U;
 8003c00:	68bb      	ldr	r3, [r7, #8]
 8003c02:	2200      	movs	r2, #0
 8003c04:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8003c06:	68bb      	ldr	r3, [r7, #8]
 8003c08:	699b      	ldr	r3, [r3, #24]
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d121      	bne.n	8003c52 <HAL_PCD_EP_DB_Receive+0x1b2>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	001a      	movs	r2, r3
 8003c14:	68bb      	ldr	r3, [r7, #8]
 8003c16:	781b      	ldrb	r3, [r3, #0]
 8003c18:	009b      	lsls	r3, r3, #2
 8003c1a:	18d3      	adds	r3, r2, r3
 8003c1c:	881b      	ldrh	r3, [r3, #0]
 8003c1e:	b29a      	uxth	r2, r3
 8003c20:	201e      	movs	r0, #30
 8003c22:	183b      	adds	r3, r7, r0
 8003c24:	4927      	ldr	r1, [pc, #156]	; (8003cc4 <HAL_PCD_EP_DB_Receive+0x224>)
 8003c26:	400a      	ands	r2, r1
 8003c28:	801a      	strh	r2, [r3, #0]
 8003c2a:	183b      	adds	r3, r7, r0
 8003c2c:	183a      	adds	r2, r7, r0
 8003c2e:	8812      	ldrh	r2, [r2, #0]
 8003c30:	2180      	movs	r1, #128	; 0x80
 8003c32:	0189      	lsls	r1, r1, #6
 8003c34:	404a      	eors	r2, r1
 8003c36:	801a      	strh	r2, [r3, #0]
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	001a      	movs	r2, r3
 8003c3e:	68bb      	ldr	r3, [r7, #8]
 8003c40:	781b      	ldrb	r3, [r3, #0]
 8003c42:	009b      	lsls	r3, r3, #2
 8003c44:	18d3      	adds	r3, r2, r3
 8003c46:	183a      	adds	r2, r7, r0
 8003c48:	8812      	ldrh	r2, [r2, #0]
 8003c4a:	491f      	ldr	r1, [pc, #124]	; (8003cc8 <HAL_PCD_EP_DB_Receive+0x228>)
 8003c4c:	430a      	orrs	r2, r1
 8003c4e:	b292      	uxth	r2, r2
 8003c50:	801a      	strh	r2, [r3, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8003c52:	1dbb      	adds	r3, r7, #6
 8003c54:	881b      	ldrh	r3, [r3, #0]
 8003c56:	2240      	movs	r2, #64	; 0x40
 8003c58:	4013      	ands	r3, r2
 8003c5a:	d11a      	bne.n	8003c92 <HAL_PCD_EP_DB_Receive+0x1f2>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	001a      	movs	r2, r3
 8003c62:	68bb      	ldr	r3, [r7, #8]
 8003c64:	781b      	ldrb	r3, [r3, #0]
 8003c66:	009b      	lsls	r3, r3, #2
 8003c68:	18d3      	adds	r3, r2, r3
 8003c6a:	881b      	ldrh	r3, [r3, #0]
 8003c6c:	b29a      	uxth	r2, r3
 8003c6e:	201c      	movs	r0, #28
 8003c70:	183b      	adds	r3, r7, r0
 8003c72:	4916      	ldr	r1, [pc, #88]	; (8003ccc <HAL_PCD_EP_DB_Receive+0x22c>)
 8003c74:	400a      	ands	r2, r1
 8003c76:	801a      	strh	r2, [r3, #0]
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	001a      	movs	r2, r3
 8003c7e:	68bb      	ldr	r3, [r7, #8]
 8003c80:	781b      	ldrb	r3, [r3, #0]
 8003c82:	009b      	lsls	r3, r3, #2
 8003c84:	18d3      	adds	r3, r2, r3
 8003c86:	183a      	adds	r2, r7, r0
 8003c88:	8812      	ldrh	r2, [r2, #0]
 8003c8a:	4911      	ldr	r1, [pc, #68]	; (8003cd0 <HAL_PCD_EP_DB_Receive+0x230>)
 8003c8c:	430a      	orrs	r2, r1
 8003c8e:	b292      	uxth	r2, r2
 8003c90:	801a      	strh	r2, [r3, #0]
    }

    if (count != 0U)
 8003c92:	241a      	movs	r4, #26
 8003c94:	193b      	adds	r3, r7, r4
 8003c96:	881b      	ldrh	r3, [r3, #0]
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d009      	beq.n	8003cb0 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	6818      	ldr	r0, [r3, #0]
 8003ca0:	68bb      	ldr	r3, [r7, #8]
 8003ca2:	6959      	ldr	r1, [r3, #20]
 8003ca4:	68bb      	ldr	r3, [r7, #8]
 8003ca6:	895a      	ldrh	r2, [r3, #10]
 8003ca8:	193b      	adds	r3, r7, r4
 8003caa:	881b      	ldrh	r3, [r3, #0]
 8003cac:	f004 ff42 	bl	8008b34 <USB_ReadPMA>
    }
  }

  return count;
 8003cb0:	231a      	movs	r3, #26
 8003cb2:	18fb      	adds	r3, r7, r3
 8003cb4:	881b      	ldrh	r3, [r3, #0]
}
 8003cb6:	0018      	movs	r0, r3
 8003cb8:	46bd      	mov	sp, r7
 8003cba:	b009      	add	sp, #36	; 0x24
 8003cbc:	bd90      	pop	{r4, r7, pc}
 8003cbe:	46c0      	nop			; (mov r8, r8)
 8003cc0:	00000402 	.word	0x00000402
 8003cc4:	ffffbf8f 	.word	0xffffbf8f
 8003cc8:	ffff8080 	.word	0xffff8080
 8003ccc:	ffff8f8f 	.word	0xffff8f8f
 8003cd0:	ffff80c0 	.word	0xffff80c0
 8003cd4:	00000406 	.word	0x00000406

08003cd8 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8003cd8:	b580      	push	{r7, lr}
 8003cda:	b0a2      	sub	sp, #136	; 0x88
 8003cdc:	af00      	add	r7, sp, #0
 8003cde:	60f8      	str	r0, [r7, #12]
 8003ce0:	60b9      	str	r1, [r7, #8]
 8003ce2:	1dbb      	adds	r3, r7, #6
 8003ce4:	801a      	strh	r2, [r3, #0]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003ce6:	1dbb      	adds	r3, r7, #6
 8003ce8:	881b      	ldrh	r3, [r3, #0]
 8003cea:	2240      	movs	r2, #64	; 0x40
 8003cec:	4013      	ands	r3, r2
 8003cee:	d100      	bne.n	8003cf2 <HAL_PCD_EP_DB_Transmit+0x1a>
 8003cf0:	e1c8      	b.n	8004084 <HAL_PCD_EP_DB_Transmit+0x3ac>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	2250      	movs	r2, #80	; 0x50
 8003cf8:	5a9b      	ldrh	r3, [r3, r2]
 8003cfa:	b29b      	uxth	r3, r3
 8003cfc:	001a      	movs	r2, r3
 8003cfe:	68bb      	ldr	r3, [r7, #8]
 8003d00:	781b      	ldrb	r3, [r3, #0]
 8003d02:	00db      	lsls	r3, r3, #3
 8003d04:	18d2      	adds	r2, r2, r3
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	18d3      	adds	r3, r2, r3
 8003d0c:	4ad7      	ldr	r2, [pc, #860]	; (800406c <HAL_PCD_EP_DB_Transmit+0x394>)
 8003d0e:	4694      	mov	ip, r2
 8003d10:	4463      	add	r3, ip
 8003d12:	881a      	ldrh	r2, [r3, #0]
 8003d14:	214e      	movs	r1, #78	; 0x4e
 8003d16:	187b      	adds	r3, r7, r1
 8003d18:	0592      	lsls	r2, r2, #22
 8003d1a:	0d92      	lsrs	r2, r2, #22
 8003d1c:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len > TxByteNbre)
 8003d1e:	68bb      	ldr	r3, [r7, #8]
 8003d20:	699a      	ldr	r2, [r3, #24]
 8003d22:	187b      	adds	r3, r7, r1
 8003d24:	881b      	ldrh	r3, [r3, #0]
 8003d26:	429a      	cmp	r2, r3
 8003d28:	d907      	bls.n	8003d3a <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxByteNbre;
 8003d2a:	68bb      	ldr	r3, [r7, #8]
 8003d2c:	699a      	ldr	r2, [r3, #24]
 8003d2e:	187b      	adds	r3, r7, r1
 8003d30:	881b      	ldrh	r3, [r3, #0]
 8003d32:	1ad2      	subs	r2, r2, r3
 8003d34:	68bb      	ldr	r3, [r7, #8]
 8003d36:	619a      	str	r2, [r3, #24]
 8003d38:	e002      	b.n	8003d40 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8003d3a:	68bb      	ldr	r3, [r7, #8]
 8003d3c:	2200      	movs	r2, #0
 8003d3e:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8003d40:	68bb      	ldr	r3, [r7, #8]
 8003d42:	699b      	ldr	r3, [r3, #24]
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d000      	beq.n	8003d4a <HAL_PCD_EP_DB_Transmit+0x72>
 8003d48:	e0b5      	b.n	8003eb6 <HAL_PCD_EP_DB_Transmit+0x1de>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003d4a:	68bb      	ldr	r3, [r7, #8]
 8003d4c:	785b      	ldrb	r3, [r3, #1]
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d125      	bne.n	8003d9e <HAL_PCD_EP_DB_Transmit+0xc6>
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	62bb      	str	r3, [r7, #40]	; 0x28
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	2250      	movs	r2, #80	; 0x50
 8003d5e:	5a9b      	ldrh	r3, [r3, r2]
 8003d60:	b29b      	uxth	r3, r3
 8003d62:	001a      	movs	r2, r3
 8003d64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d66:	189b      	adds	r3, r3, r2
 8003d68:	62bb      	str	r3, [r7, #40]	; 0x28
 8003d6a:	68bb      	ldr	r3, [r7, #8]
 8003d6c:	781b      	ldrb	r3, [r3, #0]
 8003d6e:	00da      	lsls	r2, r3, #3
 8003d70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d72:	18d3      	adds	r3, r2, r3
 8003d74:	4abd      	ldr	r2, [pc, #756]	; (800406c <HAL_PCD_EP_DB_Transmit+0x394>)
 8003d76:	4694      	mov	ip, r2
 8003d78:	4463      	add	r3, ip
 8003d7a:	627b      	str	r3, [r7, #36]	; 0x24
 8003d7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d7e:	881b      	ldrh	r3, [r3, #0]
 8003d80:	b29b      	uxth	r3, r3
 8003d82:	4abb      	ldr	r2, [pc, #748]	; (8004070 <HAL_PCD_EP_DB_Transmit+0x398>)
 8003d84:	4013      	ands	r3, r2
 8003d86:	b29a      	uxth	r2, r3
 8003d88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d8a:	801a      	strh	r2, [r3, #0]
 8003d8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d8e:	881b      	ldrh	r3, [r3, #0]
 8003d90:	b29b      	uxth	r3, r3
 8003d92:	4ab8      	ldr	r2, [pc, #736]	; (8004074 <HAL_PCD_EP_DB_Transmit+0x39c>)
 8003d94:	4313      	orrs	r3, r2
 8003d96:	b29a      	uxth	r2, r3
 8003d98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d9a:	801a      	strh	r2, [r3, #0]
 8003d9c:	e01b      	b.n	8003dd6 <HAL_PCD_EP_DB_Transmit+0xfe>
 8003d9e:	68bb      	ldr	r3, [r7, #8]
 8003da0:	785b      	ldrb	r3, [r3, #1]
 8003da2:	2b01      	cmp	r3, #1
 8003da4:	d117      	bne.n	8003dd6 <HAL_PCD_EP_DB_Transmit+0xfe>
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	633b      	str	r3, [r7, #48]	; 0x30
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	2250      	movs	r2, #80	; 0x50
 8003db2:	5a9b      	ldrh	r3, [r3, r2]
 8003db4:	b29b      	uxth	r3, r3
 8003db6:	001a      	movs	r2, r3
 8003db8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003dba:	189b      	adds	r3, r3, r2
 8003dbc:	633b      	str	r3, [r7, #48]	; 0x30
 8003dbe:	68bb      	ldr	r3, [r7, #8]
 8003dc0:	781b      	ldrb	r3, [r3, #0]
 8003dc2:	00da      	lsls	r2, r3, #3
 8003dc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003dc6:	18d3      	adds	r3, r2, r3
 8003dc8:	4aa8      	ldr	r2, [pc, #672]	; (800406c <HAL_PCD_EP_DB_Transmit+0x394>)
 8003dca:	4694      	mov	ip, r2
 8003dcc:	4463      	add	r3, ip
 8003dce:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003dd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003dd2:	2200      	movs	r2, #0
 8003dd4:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	623b      	str	r3, [r7, #32]
 8003ddc:	68bb      	ldr	r3, [r7, #8]
 8003dde:	785b      	ldrb	r3, [r3, #1]
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d125      	bne.n	8003e30 <HAL_PCD_EP_DB_Transmit+0x158>
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	61bb      	str	r3, [r7, #24]
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	2250      	movs	r2, #80	; 0x50
 8003df0:	5a9b      	ldrh	r3, [r3, r2]
 8003df2:	b29b      	uxth	r3, r3
 8003df4:	001a      	movs	r2, r3
 8003df6:	69bb      	ldr	r3, [r7, #24]
 8003df8:	189b      	adds	r3, r3, r2
 8003dfa:	61bb      	str	r3, [r7, #24]
 8003dfc:	68bb      	ldr	r3, [r7, #8]
 8003dfe:	781b      	ldrb	r3, [r3, #0]
 8003e00:	00da      	lsls	r2, r3, #3
 8003e02:	69bb      	ldr	r3, [r7, #24]
 8003e04:	18d3      	adds	r3, r2, r3
 8003e06:	4a9c      	ldr	r2, [pc, #624]	; (8004078 <HAL_PCD_EP_DB_Transmit+0x3a0>)
 8003e08:	4694      	mov	ip, r2
 8003e0a:	4463      	add	r3, ip
 8003e0c:	617b      	str	r3, [r7, #20]
 8003e0e:	697b      	ldr	r3, [r7, #20]
 8003e10:	881b      	ldrh	r3, [r3, #0]
 8003e12:	b29b      	uxth	r3, r3
 8003e14:	4a96      	ldr	r2, [pc, #600]	; (8004070 <HAL_PCD_EP_DB_Transmit+0x398>)
 8003e16:	4013      	ands	r3, r2
 8003e18:	b29a      	uxth	r2, r3
 8003e1a:	697b      	ldr	r3, [r7, #20]
 8003e1c:	801a      	strh	r2, [r3, #0]
 8003e1e:	697b      	ldr	r3, [r7, #20]
 8003e20:	881b      	ldrh	r3, [r3, #0]
 8003e22:	b29b      	uxth	r3, r3
 8003e24:	4a93      	ldr	r2, [pc, #588]	; (8004074 <HAL_PCD_EP_DB_Transmit+0x39c>)
 8003e26:	4313      	orrs	r3, r2
 8003e28:	b29a      	uxth	r2, r3
 8003e2a:	697b      	ldr	r3, [r7, #20]
 8003e2c:	801a      	strh	r2, [r3, #0]
 8003e2e:	e018      	b.n	8003e62 <HAL_PCD_EP_DB_Transmit+0x18a>
 8003e30:	68bb      	ldr	r3, [r7, #8]
 8003e32:	785b      	ldrb	r3, [r3, #1]
 8003e34:	2b01      	cmp	r3, #1
 8003e36:	d114      	bne.n	8003e62 <HAL_PCD_EP_DB_Transmit+0x18a>
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	2250      	movs	r2, #80	; 0x50
 8003e3e:	5a9b      	ldrh	r3, [r3, r2]
 8003e40:	b29b      	uxth	r3, r3
 8003e42:	001a      	movs	r2, r3
 8003e44:	6a3b      	ldr	r3, [r7, #32]
 8003e46:	189b      	adds	r3, r3, r2
 8003e48:	623b      	str	r3, [r7, #32]
 8003e4a:	68bb      	ldr	r3, [r7, #8]
 8003e4c:	781b      	ldrb	r3, [r3, #0]
 8003e4e:	00da      	lsls	r2, r3, #3
 8003e50:	6a3b      	ldr	r3, [r7, #32]
 8003e52:	18d3      	adds	r3, r2, r3
 8003e54:	4a88      	ldr	r2, [pc, #544]	; (8004078 <HAL_PCD_EP_DB_Transmit+0x3a0>)
 8003e56:	4694      	mov	ip, r2
 8003e58:	4463      	add	r3, ip
 8003e5a:	61fb      	str	r3, [r7, #28]
 8003e5c:	69fb      	ldr	r3, [r7, #28]
 8003e5e:	2200      	movs	r2, #0
 8003e60:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003e62:	68bb      	ldr	r3, [r7, #8]
 8003e64:	781a      	ldrb	r2, [r3, #0]
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	0011      	movs	r1, r2
 8003e6a:	0018      	movs	r0, r3
 8003e6c:	f006 fe66 	bl	800ab3c <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003e70:	1dbb      	adds	r3, r7, #6
 8003e72:	881a      	ldrh	r2, [r3, #0]
 8003e74:	2380      	movs	r3, #128	; 0x80
 8003e76:	01db      	lsls	r3, r3, #7
 8003e78:	4013      	ands	r3, r2
 8003e7a:	d100      	bne.n	8003e7e <HAL_PCD_EP_DB_Transmit+0x1a6>
 8003e7c:	e2d4      	b.n	8004428 <HAL_PCD_EP_DB_Transmit+0x750>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	001a      	movs	r2, r3
 8003e84:	68bb      	ldr	r3, [r7, #8]
 8003e86:	781b      	ldrb	r3, [r3, #0]
 8003e88:	009b      	lsls	r3, r3, #2
 8003e8a:	18d3      	adds	r3, r2, r3
 8003e8c:	881b      	ldrh	r3, [r3, #0]
 8003e8e:	b29a      	uxth	r2, r3
 8003e90:	2012      	movs	r0, #18
 8003e92:	183b      	adds	r3, r7, r0
 8003e94:	4979      	ldr	r1, [pc, #484]	; (800407c <HAL_PCD_EP_DB_Transmit+0x3a4>)
 8003e96:	400a      	ands	r2, r1
 8003e98:	801a      	strh	r2, [r3, #0]
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	001a      	movs	r2, r3
 8003ea0:	68bb      	ldr	r3, [r7, #8]
 8003ea2:	781b      	ldrb	r3, [r3, #0]
 8003ea4:	009b      	lsls	r3, r3, #2
 8003ea6:	18d3      	adds	r3, r2, r3
 8003ea8:	183a      	adds	r2, r7, r0
 8003eaa:	8812      	ldrh	r2, [r2, #0]
 8003eac:	4974      	ldr	r1, [pc, #464]	; (8004080 <HAL_PCD_EP_DB_Transmit+0x3a8>)
 8003eae:	430a      	orrs	r2, r1
 8003eb0:	b292      	uxth	r2, r2
 8003eb2:	801a      	strh	r2, [r3, #0]
 8003eb4:	e2b8      	b.n	8004428 <HAL_PCD_EP_DB_Transmit+0x750>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003eb6:	1dbb      	adds	r3, r7, #6
 8003eb8:	881a      	ldrh	r2, [r3, #0]
 8003eba:	2380      	movs	r3, #128	; 0x80
 8003ebc:	01db      	lsls	r3, r3, #7
 8003ebe:	4013      	ands	r3, r2
 8003ec0:	d01a      	beq.n	8003ef8 <HAL_PCD_EP_DB_Transmit+0x220>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	001a      	movs	r2, r3
 8003ec8:	68bb      	ldr	r3, [r7, #8]
 8003eca:	781b      	ldrb	r3, [r3, #0]
 8003ecc:	009b      	lsls	r3, r3, #2
 8003ece:	18d3      	adds	r3, r2, r3
 8003ed0:	881b      	ldrh	r3, [r3, #0]
 8003ed2:	b29a      	uxth	r2, r3
 8003ed4:	2044      	movs	r0, #68	; 0x44
 8003ed6:	183b      	adds	r3, r7, r0
 8003ed8:	4968      	ldr	r1, [pc, #416]	; (800407c <HAL_PCD_EP_DB_Transmit+0x3a4>)
 8003eda:	400a      	ands	r2, r1
 8003edc:	801a      	strh	r2, [r3, #0]
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	001a      	movs	r2, r3
 8003ee4:	68bb      	ldr	r3, [r7, #8]
 8003ee6:	781b      	ldrb	r3, [r3, #0]
 8003ee8:	009b      	lsls	r3, r3, #2
 8003eea:	18d3      	adds	r3, r2, r3
 8003eec:	183a      	adds	r2, r7, r0
 8003eee:	8812      	ldrh	r2, [r2, #0]
 8003ef0:	4963      	ldr	r1, [pc, #396]	; (8004080 <HAL_PCD_EP_DB_Transmit+0x3a8>)
 8003ef2:	430a      	orrs	r2, r1
 8003ef4:	b292      	uxth	r2, r2
 8003ef6:	801a      	strh	r2, [r3, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8003ef8:	68bb      	ldr	r3, [r7, #8]
 8003efa:	2224      	movs	r2, #36	; 0x24
 8003efc:	5c9b      	ldrb	r3, [r3, r2]
 8003efe:	2b01      	cmp	r3, #1
 8003f00:	d000      	beq.n	8003f04 <HAL_PCD_EP_DB_Transmit+0x22c>
 8003f02:	e291      	b.n	8004428 <HAL_PCD_EP_DB_Transmit+0x750>
      {
        ep->xfer_buff += TxByteNbre;
 8003f04:	68bb      	ldr	r3, [r7, #8]
 8003f06:	695a      	ldr	r2, [r3, #20]
 8003f08:	214e      	movs	r1, #78	; 0x4e
 8003f0a:	187b      	adds	r3, r7, r1
 8003f0c:	881b      	ldrh	r3, [r3, #0]
 8003f0e:	18d2      	adds	r2, r2, r3
 8003f10:	68bb      	ldr	r3, [r7, #8]
 8003f12:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8003f14:	68bb      	ldr	r3, [r7, #8]
 8003f16:	69da      	ldr	r2, [r3, #28]
 8003f18:	187b      	adds	r3, r7, r1
 8003f1a:	881b      	ldrh	r3, [r3, #0]
 8003f1c:	18d2      	adds	r2, r2, r3
 8003f1e:	68bb      	ldr	r3, [r7, #8]
 8003f20:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8003f22:	68bb      	ldr	r3, [r7, #8]
 8003f24:	6a1a      	ldr	r2, [r3, #32]
 8003f26:	68bb      	ldr	r3, [r7, #8]
 8003f28:	691b      	ldr	r3, [r3, #16]
 8003f2a:	429a      	cmp	r2, r3
 8003f2c:	d309      	bcc.n	8003f42 <HAL_PCD_EP_DB_Transmit+0x26a>
        {
          len = ep->maxpacket;
 8003f2e:	68bb      	ldr	r3, [r7, #8]
 8003f30:	691b      	ldr	r3, [r3, #16]
 8003f32:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8003f34:	68bb      	ldr	r3, [r7, #8]
 8003f36:	6a1a      	ldr	r2, [r3, #32]
 8003f38:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003f3a:	1ad2      	subs	r2, r2, r3
 8003f3c:	68bb      	ldr	r3, [r7, #8]
 8003f3e:	621a      	str	r2, [r3, #32]
 8003f40:	e016      	b.n	8003f70 <HAL_PCD_EP_DB_Transmit+0x298>
        }
        else if (ep->xfer_len_db == 0U)
 8003f42:	68bb      	ldr	r3, [r7, #8]
 8003f44:	6a1b      	ldr	r3, [r3, #32]
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d108      	bne.n	8003f5c <HAL_PCD_EP_DB_Transmit+0x284>
        {
          len = TxByteNbre;
 8003f4a:	234e      	movs	r3, #78	; 0x4e
 8003f4c:	18fb      	adds	r3, r7, r3
 8003f4e:	881b      	ldrh	r3, [r3, #0]
 8003f50:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8003f52:	68bb      	ldr	r3, [r7, #8]
 8003f54:	2224      	movs	r2, #36	; 0x24
 8003f56:	2100      	movs	r1, #0
 8003f58:	5499      	strb	r1, [r3, r2]
 8003f5a:	e009      	b.n	8003f70 <HAL_PCD_EP_DB_Transmit+0x298>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8003f5c:	68bb      	ldr	r3, [r7, #8]
 8003f5e:	2224      	movs	r2, #36	; 0x24
 8003f60:	2100      	movs	r1, #0
 8003f62:	5499      	strb	r1, [r3, r2]
          len = ep->xfer_len_db;
 8003f64:	68bb      	ldr	r3, [r7, #8]
 8003f66:	6a1b      	ldr	r3, [r3, #32]
 8003f68:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8003f6a:	68bb      	ldr	r3, [r7, #8]
 8003f6c:	2200      	movs	r2, #0
 8003f6e:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003f70:	68bb      	ldr	r3, [r7, #8]
 8003f72:	785b      	ldrb	r3, [r3, #1]
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d150      	bne.n	800401a <HAL_PCD_EP_DB_Transmit+0x342>
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	63bb      	str	r3, [r7, #56]	; 0x38
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	2250      	movs	r2, #80	; 0x50
 8003f84:	5a9b      	ldrh	r3, [r3, r2]
 8003f86:	b29b      	uxth	r3, r3
 8003f88:	001a      	movs	r2, r3
 8003f8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f8c:	189b      	adds	r3, r3, r2
 8003f8e:	63bb      	str	r3, [r7, #56]	; 0x38
 8003f90:	68bb      	ldr	r3, [r7, #8]
 8003f92:	781b      	ldrb	r3, [r3, #0]
 8003f94:	00da      	lsls	r2, r3, #3
 8003f96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f98:	18d3      	adds	r3, r2, r3
 8003f9a:	4a34      	ldr	r2, [pc, #208]	; (800406c <HAL_PCD_EP_DB_Transmit+0x394>)
 8003f9c:	4694      	mov	ip, r2
 8003f9e:	4463      	add	r3, ip
 8003fa0:	637b      	str	r3, [r7, #52]	; 0x34
 8003fa2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d110      	bne.n	8003fca <HAL_PCD_EP_DB_Transmit+0x2f2>
 8003fa8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003faa:	881b      	ldrh	r3, [r3, #0]
 8003fac:	b29b      	uxth	r3, r3
 8003fae:	4a30      	ldr	r2, [pc, #192]	; (8004070 <HAL_PCD_EP_DB_Transmit+0x398>)
 8003fb0:	4013      	ands	r3, r2
 8003fb2:	b29a      	uxth	r2, r3
 8003fb4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003fb6:	801a      	strh	r2, [r3, #0]
 8003fb8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003fba:	881b      	ldrh	r3, [r3, #0]
 8003fbc:	b29b      	uxth	r3, r3
 8003fbe:	4a2d      	ldr	r2, [pc, #180]	; (8004074 <HAL_PCD_EP_DB_Transmit+0x39c>)
 8003fc0:	4313      	orrs	r3, r2
 8003fc2:	b29a      	uxth	r2, r3
 8003fc4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003fc6:	801a      	strh	r2, [r3, #0]
 8003fc8:	e044      	b.n	8004054 <HAL_PCD_EP_DB_Transmit+0x37c>
 8003fca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003fcc:	2b3e      	cmp	r3, #62	; 0x3e
 8003fce:	d810      	bhi.n	8003ff2 <HAL_PCD_EP_DB_Transmit+0x31a>
 8003fd0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003fd2:	085b      	lsrs	r3, r3, #1
 8003fd4:	64bb      	str	r3, [r7, #72]	; 0x48
 8003fd6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003fd8:	2201      	movs	r2, #1
 8003fda:	4013      	ands	r3, r2
 8003fdc:	d002      	beq.n	8003fe4 <HAL_PCD_EP_DB_Transmit+0x30c>
 8003fde:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003fe0:	3301      	adds	r3, #1
 8003fe2:	64bb      	str	r3, [r7, #72]	; 0x48
 8003fe4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003fe6:	b29b      	uxth	r3, r3
 8003fe8:	029b      	lsls	r3, r3, #10
 8003fea:	b29a      	uxth	r2, r3
 8003fec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003fee:	801a      	strh	r2, [r3, #0]
 8003ff0:	e030      	b.n	8004054 <HAL_PCD_EP_DB_Transmit+0x37c>
 8003ff2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003ff4:	095b      	lsrs	r3, r3, #5
 8003ff6:	64bb      	str	r3, [r7, #72]	; 0x48
 8003ff8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003ffa:	221f      	movs	r2, #31
 8003ffc:	4013      	ands	r3, r2
 8003ffe:	d102      	bne.n	8004006 <HAL_PCD_EP_DB_Transmit+0x32e>
 8004000:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004002:	3b01      	subs	r3, #1
 8004004:	64bb      	str	r3, [r7, #72]	; 0x48
 8004006:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004008:	b29b      	uxth	r3, r3
 800400a:	029b      	lsls	r3, r3, #10
 800400c:	b29b      	uxth	r3, r3
 800400e:	4a19      	ldr	r2, [pc, #100]	; (8004074 <HAL_PCD_EP_DB_Transmit+0x39c>)
 8004010:	4313      	orrs	r3, r2
 8004012:	b29a      	uxth	r2, r3
 8004014:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004016:	801a      	strh	r2, [r3, #0]
 8004018:	e01c      	b.n	8004054 <HAL_PCD_EP_DB_Transmit+0x37c>
 800401a:	68bb      	ldr	r3, [r7, #8]
 800401c:	785b      	ldrb	r3, [r3, #1]
 800401e:	2b01      	cmp	r3, #1
 8004020:	d118      	bne.n	8004054 <HAL_PCD_EP_DB_Transmit+0x37c>
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	643b      	str	r3, [r7, #64]	; 0x40
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	2250      	movs	r2, #80	; 0x50
 800402e:	5a9b      	ldrh	r3, [r3, r2]
 8004030:	b29b      	uxth	r3, r3
 8004032:	001a      	movs	r2, r3
 8004034:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004036:	189b      	adds	r3, r3, r2
 8004038:	643b      	str	r3, [r7, #64]	; 0x40
 800403a:	68bb      	ldr	r3, [r7, #8]
 800403c:	781b      	ldrb	r3, [r3, #0]
 800403e:	00da      	lsls	r2, r3, #3
 8004040:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004042:	18d3      	adds	r3, r2, r3
 8004044:	4a09      	ldr	r2, [pc, #36]	; (800406c <HAL_PCD_EP_DB_Transmit+0x394>)
 8004046:	4694      	mov	ip, r2
 8004048:	4463      	add	r3, ip
 800404a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800404c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800404e:	b29a      	uxth	r2, r3
 8004050:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004052:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	6818      	ldr	r0, [r3, #0]
 8004058:	68bb      	ldr	r3, [r7, #8]
 800405a:	6959      	ldr	r1, [r3, #20]
 800405c:	68bb      	ldr	r3, [r7, #8]
 800405e:	891a      	ldrh	r2, [r3, #8]
 8004060:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004062:	b29b      	uxth	r3, r3
 8004064:	f004 fd22 	bl	8008aac <USB_WritePMA>
 8004068:	e1de      	b.n	8004428 <HAL_PCD_EP_DB_Transmit+0x750>
 800406a:	46c0      	nop			; (mov r8, r8)
 800406c:	00000402 	.word	0x00000402
 8004070:	ffff83ff 	.word	0xffff83ff
 8004074:	ffff8000 	.word	0xffff8000
 8004078:	00000406 	.word	0x00000406
 800407c:	ffff8f8f 	.word	0xffff8f8f
 8004080:	ffffc080 	.word	0xffffc080
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	2250      	movs	r2, #80	; 0x50
 800408a:	5a9b      	ldrh	r3, [r3, r2]
 800408c:	b29b      	uxth	r3, r3
 800408e:	001a      	movs	r2, r3
 8004090:	68bb      	ldr	r3, [r7, #8]
 8004092:	781b      	ldrb	r3, [r3, #0]
 8004094:	00db      	lsls	r3, r3, #3
 8004096:	18d2      	adds	r2, r2, r3
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	18d3      	adds	r3, r2, r3
 800409e:	4aca      	ldr	r2, [pc, #808]	; (80043c8 <HAL_PCD_EP_DB_Transmit+0x6f0>)
 80040a0:	4694      	mov	ip, r2
 80040a2:	4463      	add	r3, ip
 80040a4:	881a      	ldrh	r2, [r3, #0]
 80040a6:	214e      	movs	r1, #78	; 0x4e
 80040a8:	187b      	adds	r3, r7, r1
 80040aa:	0592      	lsls	r2, r2, #22
 80040ac:	0d92      	lsrs	r2, r2, #22
 80040ae:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= TxByteNbre)
 80040b0:	68bb      	ldr	r3, [r7, #8]
 80040b2:	699a      	ldr	r2, [r3, #24]
 80040b4:	187b      	adds	r3, r7, r1
 80040b6:	881b      	ldrh	r3, [r3, #0]
 80040b8:	429a      	cmp	r2, r3
 80040ba:	d307      	bcc.n	80040cc <HAL_PCD_EP_DB_Transmit+0x3f4>
    {
      ep->xfer_len -= TxByteNbre;
 80040bc:	68bb      	ldr	r3, [r7, #8]
 80040be:	699a      	ldr	r2, [r3, #24]
 80040c0:	187b      	adds	r3, r7, r1
 80040c2:	881b      	ldrh	r3, [r3, #0]
 80040c4:	1ad2      	subs	r2, r2, r3
 80040c6:	68bb      	ldr	r3, [r7, #8]
 80040c8:	619a      	str	r2, [r3, #24]
 80040ca:	e002      	b.n	80040d2 <HAL_PCD_EP_DB_Transmit+0x3fa>
    }
    else
    {
      ep->xfer_len = 0U;
 80040cc:	68bb      	ldr	r3, [r7, #8]
 80040ce:	2200      	movs	r2, #0
 80040d0:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80040d2:	68bb      	ldr	r3, [r7, #8]
 80040d4:	699b      	ldr	r3, [r3, #24]
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d000      	beq.n	80040dc <HAL_PCD_EP_DB_Transmit+0x404>
 80040da:	e0c0      	b.n	800425e <HAL_PCD_EP_DB_Transmit+0x586>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80040dc:	68bb      	ldr	r3, [r7, #8]
 80040de:	785b      	ldrb	r3, [r3, #1]
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d125      	bne.n	8004130 <HAL_PCD_EP_DB_Transmit+0x458>
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	66fb      	str	r3, [r7, #108]	; 0x6c
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	2250      	movs	r2, #80	; 0x50
 80040f0:	5a9b      	ldrh	r3, [r3, r2]
 80040f2:	b29b      	uxth	r3, r3
 80040f4:	001a      	movs	r2, r3
 80040f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80040f8:	189b      	adds	r3, r3, r2
 80040fa:	66fb      	str	r3, [r7, #108]	; 0x6c
 80040fc:	68bb      	ldr	r3, [r7, #8]
 80040fe:	781b      	ldrb	r3, [r3, #0]
 8004100:	00da      	lsls	r2, r3, #3
 8004102:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004104:	18d3      	adds	r3, r2, r3
 8004106:	4ab1      	ldr	r2, [pc, #708]	; (80043cc <HAL_PCD_EP_DB_Transmit+0x6f4>)
 8004108:	4694      	mov	ip, r2
 800410a:	4463      	add	r3, ip
 800410c:	66bb      	str	r3, [r7, #104]	; 0x68
 800410e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004110:	881b      	ldrh	r3, [r3, #0]
 8004112:	b29b      	uxth	r3, r3
 8004114:	4aae      	ldr	r2, [pc, #696]	; (80043d0 <HAL_PCD_EP_DB_Transmit+0x6f8>)
 8004116:	4013      	ands	r3, r2
 8004118:	b29a      	uxth	r2, r3
 800411a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800411c:	801a      	strh	r2, [r3, #0]
 800411e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004120:	881b      	ldrh	r3, [r3, #0]
 8004122:	b29b      	uxth	r3, r3
 8004124:	4aab      	ldr	r2, [pc, #684]	; (80043d4 <HAL_PCD_EP_DB_Transmit+0x6fc>)
 8004126:	4313      	orrs	r3, r2
 8004128:	b29a      	uxth	r2, r3
 800412a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800412c:	801a      	strh	r2, [r3, #0]
 800412e:	e01b      	b.n	8004168 <HAL_PCD_EP_DB_Transmit+0x490>
 8004130:	68bb      	ldr	r3, [r7, #8]
 8004132:	785b      	ldrb	r3, [r3, #1]
 8004134:	2b01      	cmp	r3, #1
 8004136:	d117      	bne.n	8004168 <HAL_PCD_EP_DB_Transmit+0x490>
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	677b      	str	r3, [r7, #116]	; 0x74
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	2250      	movs	r2, #80	; 0x50
 8004144:	5a9b      	ldrh	r3, [r3, r2]
 8004146:	b29b      	uxth	r3, r3
 8004148:	001a      	movs	r2, r3
 800414a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800414c:	189b      	adds	r3, r3, r2
 800414e:	677b      	str	r3, [r7, #116]	; 0x74
 8004150:	68bb      	ldr	r3, [r7, #8]
 8004152:	781b      	ldrb	r3, [r3, #0]
 8004154:	00da      	lsls	r2, r3, #3
 8004156:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004158:	18d3      	adds	r3, r2, r3
 800415a:	4a9c      	ldr	r2, [pc, #624]	; (80043cc <HAL_PCD_EP_DB_Transmit+0x6f4>)
 800415c:	4694      	mov	ip, r2
 800415e:	4463      	add	r3, ip
 8004160:	673b      	str	r3, [r7, #112]	; 0x70
 8004162:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004164:	2200      	movs	r2, #0
 8004166:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	67bb      	str	r3, [r7, #120]	; 0x78
 800416e:	68bb      	ldr	r3, [r7, #8]
 8004170:	785b      	ldrb	r3, [r3, #1]
 8004172:	2b00      	cmp	r3, #0
 8004174:	d130      	bne.n	80041d8 <HAL_PCD_EP_DB_Transmit+0x500>
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	2180      	movs	r1, #128	; 0x80
 800417c:	187a      	adds	r2, r7, r1
 800417e:	6013      	str	r3, [r2, #0]
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	2250      	movs	r2, #80	; 0x50
 8004186:	5a9b      	ldrh	r3, [r3, r2]
 8004188:	b29b      	uxth	r3, r3
 800418a:	001a      	movs	r2, r3
 800418c:	187b      	adds	r3, r7, r1
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	189b      	adds	r3, r3, r2
 8004192:	187a      	adds	r2, r7, r1
 8004194:	6013      	str	r3, [r2, #0]
 8004196:	68bb      	ldr	r3, [r7, #8]
 8004198:	781b      	ldrb	r3, [r3, #0]
 800419a:	00da      	lsls	r2, r3, #3
 800419c:	187b      	adds	r3, r7, r1
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	18d3      	adds	r3, r2, r3
 80041a2:	4a89      	ldr	r2, [pc, #548]	; (80043c8 <HAL_PCD_EP_DB_Transmit+0x6f0>)
 80041a4:	4694      	mov	ip, r2
 80041a6:	4463      	add	r3, ip
 80041a8:	2184      	movs	r1, #132	; 0x84
 80041aa:	187a      	adds	r2, r7, r1
 80041ac:	6013      	str	r3, [r2, #0]
 80041ae:	187b      	adds	r3, r7, r1
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	881b      	ldrh	r3, [r3, #0]
 80041b4:	b29b      	uxth	r3, r3
 80041b6:	4a86      	ldr	r2, [pc, #536]	; (80043d0 <HAL_PCD_EP_DB_Transmit+0x6f8>)
 80041b8:	4013      	ands	r3, r2
 80041ba:	b29a      	uxth	r2, r3
 80041bc:	187b      	adds	r3, r7, r1
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	801a      	strh	r2, [r3, #0]
 80041c2:	187b      	adds	r3, r7, r1
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	881b      	ldrh	r3, [r3, #0]
 80041c8:	b29b      	uxth	r3, r3
 80041ca:	4a82      	ldr	r2, [pc, #520]	; (80043d4 <HAL_PCD_EP_DB_Transmit+0x6fc>)
 80041cc:	4313      	orrs	r3, r2
 80041ce:	b29a      	uxth	r2, r3
 80041d0:	187b      	adds	r3, r7, r1
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	801a      	strh	r2, [r3, #0]
 80041d6:	e018      	b.n	800420a <HAL_PCD_EP_DB_Transmit+0x532>
 80041d8:	68bb      	ldr	r3, [r7, #8]
 80041da:	785b      	ldrb	r3, [r3, #1]
 80041dc:	2b01      	cmp	r3, #1
 80041de:	d114      	bne.n	800420a <HAL_PCD_EP_DB_Transmit+0x532>
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	2250      	movs	r2, #80	; 0x50
 80041e6:	5a9b      	ldrh	r3, [r3, r2]
 80041e8:	b29b      	uxth	r3, r3
 80041ea:	001a      	movs	r2, r3
 80041ec:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80041ee:	189b      	adds	r3, r3, r2
 80041f0:	67bb      	str	r3, [r7, #120]	; 0x78
 80041f2:	68bb      	ldr	r3, [r7, #8]
 80041f4:	781b      	ldrb	r3, [r3, #0]
 80041f6:	00da      	lsls	r2, r3, #3
 80041f8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80041fa:	18d3      	adds	r3, r2, r3
 80041fc:	4a72      	ldr	r2, [pc, #456]	; (80043c8 <HAL_PCD_EP_DB_Transmit+0x6f0>)
 80041fe:	4694      	mov	ip, r2
 8004200:	4463      	add	r3, ip
 8004202:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004204:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004206:	2200      	movs	r2, #0
 8004208:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800420a:	68bb      	ldr	r3, [r7, #8]
 800420c:	781a      	ldrb	r2, [r3, #0]
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	0011      	movs	r1, r2
 8004212:	0018      	movs	r0, r3
 8004214:	f006 fc92 	bl	800ab3c <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8004218:	1dbb      	adds	r3, r7, #6
 800421a:	881a      	ldrh	r2, [r3, #0]
 800421c:	2380      	movs	r3, #128	; 0x80
 800421e:	01db      	lsls	r3, r3, #7
 8004220:	4013      	ands	r3, r2
 8004222:	d000      	beq.n	8004226 <HAL_PCD_EP_DB_Transmit+0x54e>
 8004224:	e100      	b.n	8004428 <HAL_PCD_EP_DB_Transmit+0x750>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	001a      	movs	r2, r3
 800422c:	68bb      	ldr	r3, [r7, #8]
 800422e:	781b      	ldrb	r3, [r3, #0]
 8004230:	009b      	lsls	r3, r3, #2
 8004232:	18d3      	adds	r3, r2, r3
 8004234:	881b      	ldrh	r3, [r3, #0]
 8004236:	b29a      	uxth	r2, r3
 8004238:	2046      	movs	r0, #70	; 0x46
 800423a:	183b      	adds	r3, r7, r0
 800423c:	4966      	ldr	r1, [pc, #408]	; (80043d8 <HAL_PCD_EP_DB_Transmit+0x700>)
 800423e:	400a      	ands	r2, r1
 8004240:	801a      	strh	r2, [r3, #0]
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	001a      	movs	r2, r3
 8004248:	68bb      	ldr	r3, [r7, #8]
 800424a:	781b      	ldrb	r3, [r3, #0]
 800424c:	009b      	lsls	r3, r3, #2
 800424e:	18d3      	adds	r3, r2, r3
 8004250:	183a      	adds	r2, r7, r0
 8004252:	8812      	ldrh	r2, [r2, #0]
 8004254:	4961      	ldr	r1, [pc, #388]	; (80043dc <HAL_PCD_EP_DB_Transmit+0x704>)
 8004256:	430a      	orrs	r2, r1
 8004258:	b292      	uxth	r2, r2
 800425a:	801a      	strh	r2, [r3, #0]
 800425c:	e0e4      	b.n	8004428 <HAL_PCD_EP_DB_Transmit+0x750>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800425e:	1dbb      	adds	r3, r7, #6
 8004260:	881a      	ldrh	r2, [r3, #0]
 8004262:	2380      	movs	r3, #128	; 0x80
 8004264:	01db      	lsls	r3, r3, #7
 8004266:	4013      	ands	r3, r2
 8004268:	d11a      	bne.n	80042a0 <HAL_PCD_EP_DB_Transmit+0x5c8>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	001a      	movs	r2, r3
 8004270:	68bb      	ldr	r3, [r7, #8]
 8004272:	781b      	ldrb	r3, [r3, #0]
 8004274:	009b      	lsls	r3, r3, #2
 8004276:	18d3      	adds	r3, r2, r3
 8004278:	881b      	ldrh	r3, [r3, #0]
 800427a:	b29a      	uxth	r2, r3
 800427c:	204c      	movs	r0, #76	; 0x4c
 800427e:	183b      	adds	r3, r7, r0
 8004280:	4955      	ldr	r1, [pc, #340]	; (80043d8 <HAL_PCD_EP_DB_Transmit+0x700>)
 8004282:	400a      	ands	r2, r1
 8004284:	801a      	strh	r2, [r3, #0]
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	001a      	movs	r2, r3
 800428c:	68bb      	ldr	r3, [r7, #8]
 800428e:	781b      	ldrb	r3, [r3, #0]
 8004290:	009b      	lsls	r3, r3, #2
 8004292:	18d3      	adds	r3, r2, r3
 8004294:	183a      	adds	r2, r7, r0
 8004296:	8812      	ldrh	r2, [r2, #0]
 8004298:	4950      	ldr	r1, [pc, #320]	; (80043dc <HAL_PCD_EP_DB_Transmit+0x704>)
 800429a:	430a      	orrs	r2, r1
 800429c:	b292      	uxth	r2, r2
 800429e:	801a      	strh	r2, [r3, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80042a0:	68bb      	ldr	r3, [r7, #8]
 80042a2:	2224      	movs	r2, #36	; 0x24
 80042a4:	5c9b      	ldrb	r3, [r3, r2]
 80042a6:	2b01      	cmp	r3, #1
 80042a8:	d000      	beq.n	80042ac <HAL_PCD_EP_DB_Transmit+0x5d4>
 80042aa:	e0bd      	b.n	8004428 <HAL_PCD_EP_DB_Transmit+0x750>
      {
        ep->xfer_buff += TxByteNbre;
 80042ac:	68bb      	ldr	r3, [r7, #8]
 80042ae:	695a      	ldr	r2, [r3, #20]
 80042b0:	214e      	movs	r1, #78	; 0x4e
 80042b2:	187b      	adds	r3, r7, r1
 80042b4:	881b      	ldrh	r3, [r3, #0]
 80042b6:	18d2      	adds	r2, r2, r3
 80042b8:	68bb      	ldr	r3, [r7, #8]
 80042ba:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 80042bc:	68bb      	ldr	r3, [r7, #8]
 80042be:	69da      	ldr	r2, [r3, #28]
 80042c0:	187b      	adds	r3, r7, r1
 80042c2:	881b      	ldrh	r3, [r3, #0]
 80042c4:	18d2      	adds	r2, r2, r3
 80042c6:	68bb      	ldr	r3, [r7, #8]
 80042c8:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80042ca:	68bb      	ldr	r3, [r7, #8]
 80042cc:	6a1a      	ldr	r2, [r3, #32]
 80042ce:	68bb      	ldr	r3, [r7, #8]
 80042d0:	691b      	ldr	r3, [r3, #16]
 80042d2:	429a      	cmp	r2, r3
 80042d4:	d309      	bcc.n	80042ea <HAL_PCD_EP_DB_Transmit+0x612>
        {
          len = ep->maxpacket;
 80042d6:	68bb      	ldr	r3, [r7, #8]
 80042d8:	691b      	ldr	r3, [r3, #16]
 80042da:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 80042dc:	68bb      	ldr	r3, [r7, #8]
 80042de:	6a1a      	ldr	r2, [r3, #32]
 80042e0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80042e2:	1ad2      	subs	r2, r2, r3
 80042e4:	68bb      	ldr	r3, [r7, #8]
 80042e6:	621a      	str	r2, [r3, #32]
 80042e8:	e016      	b.n	8004318 <HAL_PCD_EP_DB_Transmit+0x640>
        }
        else if (ep->xfer_len_db == 0U)
 80042ea:	68bb      	ldr	r3, [r7, #8]
 80042ec:	6a1b      	ldr	r3, [r3, #32]
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d108      	bne.n	8004304 <HAL_PCD_EP_DB_Transmit+0x62c>
        {
          len = TxByteNbre;
 80042f2:	234e      	movs	r3, #78	; 0x4e
 80042f4:	18fb      	adds	r3, r7, r3
 80042f6:	881b      	ldrh	r3, [r3, #0]
 80042f8:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 80042fa:	68bb      	ldr	r3, [r7, #8]
 80042fc:	2224      	movs	r2, #36	; 0x24
 80042fe:	2100      	movs	r1, #0
 8004300:	5499      	strb	r1, [r3, r2]
 8004302:	e009      	b.n	8004318 <HAL_PCD_EP_DB_Transmit+0x640>
        }
        else
        {
          len = ep->xfer_len_db;
 8004304:	68bb      	ldr	r3, [r7, #8]
 8004306:	6a1b      	ldr	r3, [r3, #32]
 8004308:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 800430a:	68bb      	ldr	r3, [r7, #8]
 800430c:	2200      	movs	r2, #0
 800430e:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8004310:	68bb      	ldr	r3, [r7, #8]
 8004312:	2224      	movs	r2, #36	; 0x24
 8004314:	2100      	movs	r1, #0
 8004316:	5499      	strb	r1, [r3, r2]
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	667b      	str	r3, [r7, #100]	; 0x64
 800431e:	68bb      	ldr	r3, [r7, #8]
 8004320:	785b      	ldrb	r3, [r3, #1]
 8004322:	2b00      	cmp	r3, #0
 8004324:	d15c      	bne.n	80043e0 <HAL_PCD_EP_DB_Transmit+0x708>
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	2250      	movs	r2, #80	; 0x50
 8004332:	5a9b      	ldrh	r3, [r3, r2]
 8004334:	b29b      	uxth	r3, r3
 8004336:	001a      	movs	r2, r3
 8004338:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800433a:	189b      	adds	r3, r3, r2
 800433c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800433e:	68bb      	ldr	r3, [r7, #8]
 8004340:	781b      	ldrb	r3, [r3, #0]
 8004342:	00da      	lsls	r2, r3, #3
 8004344:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004346:	18d3      	adds	r3, r2, r3
 8004348:	4a1f      	ldr	r2, [pc, #124]	; (80043c8 <HAL_PCD_EP_DB_Transmit+0x6f0>)
 800434a:	4694      	mov	ip, r2
 800434c:	4463      	add	r3, ip
 800434e:	65bb      	str	r3, [r7, #88]	; 0x58
 8004350:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004352:	2b00      	cmp	r3, #0
 8004354:	d110      	bne.n	8004378 <HAL_PCD_EP_DB_Transmit+0x6a0>
 8004356:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004358:	881b      	ldrh	r3, [r3, #0]
 800435a:	b29b      	uxth	r3, r3
 800435c:	4a1c      	ldr	r2, [pc, #112]	; (80043d0 <HAL_PCD_EP_DB_Transmit+0x6f8>)
 800435e:	4013      	ands	r3, r2
 8004360:	b29a      	uxth	r2, r3
 8004362:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004364:	801a      	strh	r2, [r3, #0]
 8004366:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004368:	881b      	ldrh	r3, [r3, #0]
 800436a:	b29b      	uxth	r3, r3
 800436c:	4a19      	ldr	r2, [pc, #100]	; (80043d4 <HAL_PCD_EP_DB_Transmit+0x6fc>)
 800436e:	4313      	orrs	r3, r2
 8004370:	b29a      	uxth	r2, r3
 8004372:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004374:	801a      	strh	r2, [r3, #0]
 8004376:	e04d      	b.n	8004414 <HAL_PCD_EP_DB_Transmit+0x73c>
 8004378:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800437a:	2b3e      	cmp	r3, #62	; 0x3e
 800437c:	d810      	bhi.n	80043a0 <HAL_PCD_EP_DB_Transmit+0x6c8>
 800437e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004380:	085b      	lsrs	r3, r3, #1
 8004382:	657b      	str	r3, [r7, #84]	; 0x54
 8004384:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004386:	2201      	movs	r2, #1
 8004388:	4013      	ands	r3, r2
 800438a:	d002      	beq.n	8004392 <HAL_PCD_EP_DB_Transmit+0x6ba>
 800438c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800438e:	3301      	adds	r3, #1
 8004390:	657b      	str	r3, [r7, #84]	; 0x54
 8004392:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004394:	b29b      	uxth	r3, r3
 8004396:	029b      	lsls	r3, r3, #10
 8004398:	b29a      	uxth	r2, r3
 800439a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800439c:	801a      	strh	r2, [r3, #0]
 800439e:	e039      	b.n	8004414 <HAL_PCD_EP_DB_Transmit+0x73c>
 80043a0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80043a2:	095b      	lsrs	r3, r3, #5
 80043a4:	657b      	str	r3, [r7, #84]	; 0x54
 80043a6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80043a8:	221f      	movs	r2, #31
 80043aa:	4013      	ands	r3, r2
 80043ac:	d102      	bne.n	80043b4 <HAL_PCD_EP_DB_Transmit+0x6dc>
 80043ae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80043b0:	3b01      	subs	r3, #1
 80043b2:	657b      	str	r3, [r7, #84]	; 0x54
 80043b4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80043b6:	b29b      	uxth	r3, r3
 80043b8:	029b      	lsls	r3, r3, #10
 80043ba:	b29b      	uxth	r3, r3
 80043bc:	4a05      	ldr	r2, [pc, #20]	; (80043d4 <HAL_PCD_EP_DB_Transmit+0x6fc>)
 80043be:	4313      	orrs	r3, r2
 80043c0:	b29a      	uxth	r2, r3
 80043c2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80043c4:	801a      	strh	r2, [r3, #0]
 80043c6:	e025      	b.n	8004414 <HAL_PCD_EP_DB_Transmit+0x73c>
 80043c8:	00000406 	.word	0x00000406
 80043cc:	00000402 	.word	0x00000402
 80043d0:	ffff83ff 	.word	0xffff83ff
 80043d4:	ffff8000 	.word	0xffff8000
 80043d8:	ffff8f8f 	.word	0xffff8f8f
 80043dc:	ffffc080 	.word	0xffffc080
 80043e0:	68bb      	ldr	r3, [r7, #8]
 80043e2:	785b      	ldrb	r3, [r3, #1]
 80043e4:	2b01      	cmp	r3, #1
 80043e6:	d115      	bne.n	8004414 <HAL_PCD_EP_DB_Transmit+0x73c>
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	2250      	movs	r2, #80	; 0x50
 80043ee:	5a9b      	ldrh	r3, [r3, r2]
 80043f0:	b29b      	uxth	r3, r3
 80043f2:	001a      	movs	r2, r3
 80043f4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80043f6:	189b      	adds	r3, r3, r2
 80043f8:	667b      	str	r3, [r7, #100]	; 0x64
 80043fa:	68bb      	ldr	r3, [r7, #8]
 80043fc:	781b      	ldrb	r3, [r3, #0]
 80043fe:	00da      	lsls	r2, r3, #3
 8004400:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004402:	18d3      	adds	r3, r2, r3
 8004404:	4a1e      	ldr	r2, [pc, #120]	; (8004480 <HAL_PCD_EP_DB_Transmit+0x7a8>)
 8004406:	4694      	mov	ip, r2
 8004408:	4463      	add	r3, ip
 800440a:	663b      	str	r3, [r7, #96]	; 0x60
 800440c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800440e:	b29a      	uxth	r2, r3
 8004410:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004412:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	6818      	ldr	r0, [r3, #0]
 8004418:	68bb      	ldr	r3, [r7, #8]
 800441a:	6959      	ldr	r1, [r3, #20]
 800441c:	68bb      	ldr	r3, [r7, #8]
 800441e:	895a      	ldrh	r2, [r3, #10]
 8004420:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004422:	b29b      	uxth	r3, r3
 8004424:	f004 fb42 	bl	8008aac <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	001a      	movs	r2, r3
 800442e:	68bb      	ldr	r3, [r7, #8]
 8004430:	781b      	ldrb	r3, [r3, #0]
 8004432:	009b      	lsls	r3, r3, #2
 8004434:	18d3      	adds	r3, r2, r3
 8004436:	881b      	ldrh	r3, [r3, #0]
 8004438:	b29a      	uxth	r2, r3
 800443a:	2010      	movs	r0, #16
 800443c:	183b      	adds	r3, r7, r0
 800443e:	4911      	ldr	r1, [pc, #68]	; (8004484 <HAL_PCD_EP_DB_Transmit+0x7ac>)
 8004440:	400a      	ands	r2, r1
 8004442:	801a      	strh	r2, [r3, #0]
 8004444:	183b      	adds	r3, r7, r0
 8004446:	183a      	adds	r2, r7, r0
 8004448:	8812      	ldrh	r2, [r2, #0]
 800444a:	2110      	movs	r1, #16
 800444c:	404a      	eors	r2, r1
 800444e:	801a      	strh	r2, [r3, #0]
 8004450:	183b      	adds	r3, r7, r0
 8004452:	183a      	adds	r2, r7, r0
 8004454:	8812      	ldrh	r2, [r2, #0]
 8004456:	2120      	movs	r1, #32
 8004458:	404a      	eors	r2, r1
 800445a:	801a      	strh	r2, [r3, #0]
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	001a      	movs	r2, r3
 8004462:	68bb      	ldr	r3, [r7, #8]
 8004464:	781b      	ldrb	r3, [r3, #0]
 8004466:	009b      	lsls	r3, r3, #2
 8004468:	18d3      	adds	r3, r2, r3
 800446a:	183a      	adds	r2, r7, r0
 800446c:	8812      	ldrh	r2, [r2, #0]
 800446e:	4906      	ldr	r1, [pc, #24]	; (8004488 <HAL_PCD_EP_DB_Transmit+0x7b0>)
 8004470:	430a      	orrs	r2, r1
 8004472:	b292      	uxth	r2, r2
 8004474:	801a      	strh	r2, [r3, #0]

  return HAL_OK;
 8004476:	2300      	movs	r3, #0
}
 8004478:	0018      	movs	r0, r3
 800447a:	46bd      	mov	sp, r7
 800447c:	b022      	add	sp, #136	; 0x88
 800447e:	bd80      	pop	{r7, pc}
 8004480:	00000406 	.word	0x00000406
 8004484:	ffff8fbf 	.word	0xffff8fbf
 8004488:	ffff8080 	.word	0xffff8080

0800448c <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 800448c:	b590      	push	{r4, r7, lr}
 800448e:	b087      	sub	sp, #28
 8004490:	af00      	add	r7, sp, #0
 8004492:	60f8      	str	r0, [r7, #12]
 8004494:	0008      	movs	r0, r1
 8004496:	0011      	movs	r1, r2
 8004498:	607b      	str	r3, [r7, #4]
 800449a:	240a      	movs	r4, #10
 800449c:	193b      	adds	r3, r7, r4
 800449e:	1c02      	adds	r2, r0, #0
 80044a0:	801a      	strh	r2, [r3, #0]
 80044a2:	2308      	movs	r3, #8
 80044a4:	18fb      	adds	r3, r7, r3
 80044a6:	1c0a      	adds	r2, r1, #0
 80044a8:	801a      	strh	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 80044aa:	0021      	movs	r1, r4
 80044ac:	187b      	adds	r3, r7, r1
 80044ae:	881b      	ldrh	r3, [r3, #0]
 80044b0:	2280      	movs	r2, #128	; 0x80
 80044b2:	4013      	ands	r3, r2
 80044b4:	b29b      	uxth	r3, r3
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d00c      	beq.n	80044d4 <HAL_PCDEx_PMAConfig+0x48>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80044ba:	187b      	adds	r3, r7, r1
 80044bc:	881b      	ldrh	r3, [r3, #0]
 80044be:	2207      	movs	r2, #7
 80044c0:	4013      	ands	r3, r2
 80044c2:	1c5a      	adds	r2, r3, #1
 80044c4:	0013      	movs	r3, r2
 80044c6:	009b      	lsls	r3, r3, #2
 80044c8:	189b      	adds	r3, r3, r2
 80044ca:	00db      	lsls	r3, r3, #3
 80044cc:	68fa      	ldr	r2, [r7, #12]
 80044ce:	18d3      	adds	r3, r2, r3
 80044d0:	617b      	str	r3, [r7, #20]
 80044d2:	e00b      	b.n	80044ec <HAL_PCDEx_PMAConfig+0x60>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80044d4:	230a      	movs	r3, #10
 80044d6:	18fb      	adds	r3, r7, r3
 80044d8:	881a      	ldrh	r2, [r3, #0]
 80044da:	0013      	movs	r3, r2
 80044dc:	009b      	lsls	r3, r3, #2
 80044de:	189b      	adds	r3, r3, r2
 80044e0:	00db      	lsls	r3, r3, #3
 80044e2:	3369      	adds	r3, #105	; 0x69
 80044e4:	33ff      	adds	r3, #255	; 0xff
 80044e6:	68fa      	ldr	r2, [r7, #12]
 80044e8:	18d3      	adds	r3, r2, r3
 80044ea:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80044ec:	2308      	movs	r3, #8
 80044ee:	18fb      	adds	r3, r7, r3
 80044f0:	881b      	ldrh	r3, [r3, #0]
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d107      	bne.n	8004506 <HAL_PCDEx_PMAConfig+0x7a>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 80044f6:	697b      	ldr	r3, [r7, #20]
 80044f8:	2200      	movs	r2, #0
 80044fa:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	b29a      	uxth	r2, r3
 8004500:	697b      	ldr	r3, [r7, #20]
 8004502:	80da      	strh	r2, [r3, #6]
 8004504:	e00b      	b.n	800451e <HAL_PCDEx_PMAConfig+0x92>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8004506:	697b      	ldr	r3, [r7, #20]
 8004508:	2201      	movs	r2, #1
 800450a:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	b29a      	uxth	r2, r3
 8004510:	697b      	ldr	r3, [r7, #20]
 8004512:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	0c1b      	lsrs	r3, r3, #16
 8004518:	b29a      	uxth	r2, r3
 800451a:	697b      	ldr	r3, [r7, #20]
 800451c:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 800451e:	2300      	movs	r3, #0
}
 8004520:	0018      	movs	r0, r3
 8004522:	46bd      	mov	sp, r7
 8004524:	b007      	add	sp, #28
 8004526:	bd90      	pop	{r4, r7, pc}

08004528 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8004528:	b580      	push	{r7, lr}
 800452a:	b084      	sub	sp, #16
 800452c:	af00      	add	r7, sp, #0
 800452e:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8004536:	687a      	ldr	r2, [r7, #4]
 8004538:	23ba      	movs	r3, #186	; 0xba
 800453a:	009b      	lsls	r3, r3, #2
 800453c:	2101      	movs	r1, #1
 800453e:	50d1      	str	r1, [r2, r3]
  hpcd->LPM_State = LPM_L0;
 8004540:	687a      	ldr	r2, [r7, #4]
 8004542:	23b8      	movs	r3, #184	; 0xb8
 8004544:	009b      	lsls	r3, r3, #2
 8004546:	2100      	movs	r1, #0
 8004548:	54d1      	strb	r1, [r2, r3]

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	2254      	movs	r2, #84	; 0x54
 800454e:	5a9b      	ldrh	r3, [r3, r2]
 8004550:	b29b      	uxth	r3, r3
 8004552:	2201      	movs	r2, #1
 8004554:	4313      	orrs	r3, r2
 8004556:	b299      	uxth	r1, r3
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	2254      	movs	r2, #84	; 0x54
 800455c:	5299      	strh	r1, [r3, r2]
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	2254      	movs	r2, #84	; 0x54
 8004562:	5a9b      	ldrh	r3, [r3, r2]
 8004564:	b29b      	uxth	r3, r3
 8004566:	2202      	movs	r2, #2
 8004568:	4313      	orrs	r3, r2
 800456a:	b299      	uxth	r1, r3
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	2254      	movs	r2, #84	; 0x54
 8004570:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8004572:	2300      	movs	r3, #0
}
 8004574:	0018      	movs	r0, r3
 8004576:	46bd      	mov	sp, r7
 8004578:	b004      	add	sp, #16
 800457a:	bd80      	pop	{r7, pc}

0800457c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800457c:	b580      	push	{r7, lr}
 800457e:	b082      	sub	sp, #8
 8004580:	af00      	add	r7, sp, #0
 8004582:	6078      	str	r0, [r7, #4]
 8004584:	000a      	movs	r2, r1
 8004586:	1cfb      	adds	r3, r7, #3
 8004588:	701a      	strb	r2, [r3, #0]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800458a:	46c0      	nop			; (mov r8, r8)
 800458c:	46bd      	mov	sp, r7
 800458e:	b002      	add	sp, #8
 8004590:	bd80      	pop	{r7, pc}
	...

08004594 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004594:	b580      	push	{r7, lr}
 8004596:	b088      	sub	sp, #32
 8004598:	af00      	add	r7, sp, #0
 800459a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d102      	bne.n	80045a8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80045a2:	2301      	movs	r3, #1
 80045a4:	f000 fb76 	bl	8004c94 <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	2201      	movs	r2, #1
 80045ae:	4013      	ands	r3, r2
 80045b0:	d100      	bne.n	80045b4 <HAL_RCC_OscConfig+0x20>
 80045b2:	e08e      	b.n	80046d2 <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80045b4:	4bc5      	ldr	r3, [pc, #788]	; (80048cc <HAL_RCC_OscConfig+0x338>)
 80045b6:	685b      	ldr	r3, [r3, #4]
 80045b8:	220c      	movs	r2, #12
 80045ba:	4013      	ands	r3, r2
 80045bc:	2b04      	cmp	r3, #4
 80045be:	d00e      	beq.n	80045de <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80045c0:	4bc2      	ldr	r3, [pc, #776]	; (80048cc <HAL_RCC_OscConfig+0x338>)
 80045c2:	685b      	ldr	r3, [r3, #4]
 80045c4:	220c      	movs	r2, #12
 80045c6:	4013      	ands	r3, r2
 80045c8:	2b08      	cmp	r3, #8
 80045ca:	d117      	bne.n	80045fc <HAL_RCC_OscConfig+0x68>
 80045cc:	4bbf      	ldr	r3, [pc, #764]	; (80048cc <HAL_RCC_OscConfig+0x338>)
 80045ce:	685a      	ldr	r2, [r3, #4]
 80045d0:	23c0      	movs	r3, #192	; 0xc0
 80045d2:	025b      	lsls	r3, r3, #9
 80045d4:	401a      	ands	r2, r3
 80045d6:	2380      	movs	r3, #128	; 0x80
 80045d8:	025b      	lsls	r3, r3, #9
 80045da:	429a      	cmp	r2, r3
 80045dc:	d10e      	bne.n	80045fc <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80045de:	4bbb      	ldr	r3, [pc, #748]	; (80048cc <HAL_RCC_OscConfig+0x338>)
 80045e0:	681a      	ldr	r2, [r3, #0]
 80045e2:	2380      	movs	r3, #128	; 0x80
 80045e4:	029b      	lsls	r3, r3, #10
 80045e6:	4013      	ands	r3, r2
 80045e8:	d100      	bne.n	80045ec <HAL_RCC_OscConfig+0x58>
 80045ea:	e071      	b.n	80046d0 <HAL_RCC_OscConfig+0x13c>
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	685b      	ldr	r3, [r3, #4]
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d000      	beq.n	80045f6 <HAL_RCC_OscConfig+0x62>
 80045f4:	e06c      	b.n	80046d0 <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 80045f6:	2301      	movs	r3, #1
 80045f8:	f000 fb4c 	bl	8004c94 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	685b      	ldr	r3, [r3, #4]
 8004600:	2b01      	cmp	r3, #1
 8004602:	d107      	bne.n	8004614 <HAL_RCC_OscConfig+0x80>
 8004604:	4bb1      	ldr	r3, [pc, #708]	; (80048cc <HAL_RCC_OscConfig+0x338>)
 8004606:	681a      	ldr	r2, [r3, #0]
 8004608:	4bb0      	ldr	r3, [pc, #704]	; (80048cc <HAL_RCC_OscConfig+0x338>)
 800460a:	2180      	movs	r1, #128	; 0x80
 800460c:	0249      	lsls	r1, r1, #9
 800460e:	430a      	orrs	r2, r1
 8004610:	601a      	str	r2, [r3, #0]
 8004612:	e02f      	b.n	8004674 <HAL_RCC_OscConfig+0xe0>
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	685b      	ldr	r3, [r3, #4]
 8004618:	2b00      	cmp	r3, #0
 800461a:	d10c      	bne.n	8004636 <HAL_RCC_OscConfig+0xa2>
 800461c:	4bab      	ldr	r3, [pc, #684]	; (80048cc <HAL_RCC_OscConfig+0x338>)
 800461e:	681a      	ldr	r2, [r3, #0]
 8004620:	4baa      	ldr	r3, [pc, #680]	; (80048cc <HAL_RCC_OscConfig+0x338>)
 8004622:	49ab      	ldr	r1, [pc, #684]	; (80048d0 <HAL_RCC_OscConfig+0x33c>)
 8004624:	400a      	ands	r2, r1
 8004626:	601a      	str	r2, [r3, #0]
 8004628:	4ba8      	ldr	r3, [pc, #672]	; (80048cc <HAL_RCC_OscConfig+0x338>)
 800462a:	681a      	ldr	r2, [r3, #0]
 800462c:	4ba7      	ldr	r3, [pc, #668]	; (80048cc <HAL_RCC_OscConfig+0x338>)
 800462e:	49a9      	ldr	r1, [pc, #676]	; (80048d4 <HAL_RCC_OscConfig+0x340>)
 8004630:	400a      	ands	r2, r1
 8004632:	601a      	str	r2, [r3, #0]
 8004634:	e01e      	b.n	8004674 <HAL_RCC_OscConfig+0xe0>
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	685b      	ldr	r3, [r3, #4]
 800463a:	2b05      	cmp	r3, #5
 800463c:	d10e      	bne.n	800465c <HAL_RCC_OscConfig+0xc8>
 800463e:	4ba3      	ldr	r3, [pc, #652]	; (80048cc <HAL_RCC_OscConfig+0x338>)
 8004640:	681a      	ldr	r2, [r3, #0]
 8004642:	4ba2      	ldr	r3, [pc, #648]	; (80048cc <HAL_RCC_OscConfig+0x338>)
 8004644:	2180      	movs	r1, #128	; 0x80
 8004646:	02c9      	lsls	r1, r1, #11
 8004648:	430a      	orrs	r2, r1
 800464a:	601a      	str	r2, [r3, #0]
 800464c:	4b9f      	ldr	r3, [pc, #636]	; (80048cc <HAL_RCC_OscConfig+0x338>)
 800464e:	681a      	ldr	r2, [r3, #0]
 8004650:	4b9e      	ldr	r3, [pc, #632]	; (80048cc <HAL_RCC_OscConfig+0x338>)
 8004652:	2180      	movs	r1, #128	; 0x80
 8004654:	0249      	lsls	r1, r1, #9
 8004656:	430a      	orrs	r2, r1
 8004658:	601a      	str	r2, [r3, #0]
 800465a:	e00b      	b.n	8004674 <HAL_RCC_OscConfig+0xe0>
 800465c:	4b9b      	ldr	r3, [pc, #620]	; (80048cc <HAL_RCC_OscConfig+0x338>)
 800465e:	681a      	ldr	r2, [r3, #0]
 8004660:	4b9a      	ldr	r3, [pc, #616]	; (80048cc <HAL_RCC_OscConfig+0x338>)
 8004662:	499b      	ldr	r1, [pc, #620]	; (80048d0 <HAL_RCC_OscConfig+0x33c>)
 8004664:	400a      	ands	r2, r1
 8004666:	601a      	str	r2, [r3, #0]
 8004668:	4b98      	ldr	r3, [pc, #608]	; (80048cc <HAL_RCC_OscConfig+0x338>)
 800466a:	681a      	ldr	r2, [r3, #0]
 800466c:	4b97      	ldr	r3, [pc, #604]	; (80048cc <HAL_RCC_OscConfig+0x338>)
 800466e:	4999      	ldr	r1, [pc, #612]	; (80048d4 <HAL_RCC_OscConfig+0x340>)
 8004670:	400a      	ands	r2, r1
 8004672:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	685b      	ldr	r3, [r3, #4]
 8004678:	2b00      	cmp	r3, #0
 800467a:	d014      	beq.n	80046a6 <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800467c:	f7fd fa74 	bl	8001b68 <HAL_GetTick>
 8004680:	0003      	movs	r3, r0
 8004682:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004684:	e008      	b.n	8004698 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004686:	f7fd fa6f 	bl	8001b68 <HAL_GetTick>
 800468a:	0002      	movs	r2, r0
 800468c:	69bb      	ldr	r3, [r7, #24]
 800468e:	1ad3      	subs	r3, r2, r3
 8004690:	2b64      	cmp	r3, #100	; 0x64
 8004692:	d901      	bls.n	8004698 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 8004694:	2303      	movs	r3, #3
 8004696:	e2fd      	b.n	8004c94 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004698:	4b8c      	ldr	r3, [pc, #560]	; (80048cc <HAL_RCC_OscConfig+0x338>)
 800469a:	681a      	ldr	r2, [r3, #0]
 800469c:	2380      	movs	r3, #128	; 0x80
 800469e:	029b      	lsls	r3, r3, #10
 80046a0:	4013      	ands	r3, r2
 80046a2:	d0f0      	beq.n	8004686 <HAL_RCC_OscConfig+0xf2>
 80046a4:	e015      	b.n	80046d2 <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046a6:	f7fd fa5f 	bl	8001b68 <HAL_GetTick>
 80046aa:	0003      	movs	r3, r0
 80046ac:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80046ae:	e008      	b.n	80046c2 <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80046b0:	f7fd fa5a 	bl	8001b68 <HAL_GetTick>
 80046b4:	0002      	movs	r2, r0
 80046b6:	69bb      	ldr	r3, [r7, #24]
 80046b8:	1ad3      	subs	r3, r2, r3
 80046ba:	2b64      	cmp	r3, #100	; 0x64
 80046bc:	d901      	bls.n	80046c2 <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 80046be:	2303      	movs	r3, #3
 80046c0:	e2e8      	b.n	8004c94 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80046c2:	4b82      	ldr	r3, [pc, #520]	; (80048cc <HAL_RCC_OscConfig+0x338>)
 80046c4:	681a      	ldr	r2, [r3, #0]
 80046c6:	2380      	movs	r3, #128	; 0x80
 80046c8:	029b      	lsls	r3, r3, #10
 80046ca:	4013      	ands	r3, r2
 80046cc:	d1f0      	bne.n	80046b0 <HAL_RCC_OscConfig+0x11c>
 80046ce:	e000      	b.n	80046d2 <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80046d0:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	2202      	movs	r2, #2
 80046d8:	4013      	ands	r3, r2
 80046da:	d100      	bne.n	80046de <HAL_RCC_OscConfig+0x14a>
 80046dc:	e06c      	b.n	80047b8 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80046de:	4b7b      	ldr	r3, [pc, #492]	; (80048cc <HAL_RCC_OscConfig+0x338>)
 80046e0:	685b      	ldr	r3, [r3, #4]
 80046e2:	220c      	movs	r2, #12
 80046e4:	4013      	ands	r3, r2
 80046e6:	d00e      	beq.n	8004706 <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80046e8:	4b78      	ldr	r3, [pc, #480]	; (80048cc <HAL_RCC_OscConfig+0x338>)
 80046ea:	685b      	ldr	r3, [r3, #4]
 80046ec:	220c      	movs	r2, #12
 80046ee:	4013      	ands	r3, r2
 80046f0:	2b08      	cmp	r3, #8
 80046f2:	d11f      	bne.n	8004734 <HAL_RCC_OscConfig+0x1a0>
 80046f4:	4b75      	ldr	r3, [pc, #468]	; (80048cc <HAL_RCC_OscConfig+0x338>)
 80046f6:	685a      	ldr	r2, [r3, #4]
 80046f8:	23c0      	movs	r3, #192	; 0xc0
 80046fa:	025b      	lsls	r3, r3, #9
 80046fc:	401a      	ands	r2, r3
 80046fe:	2380      	movs	r3, #128	; 0x80
 8004700:	021b      	lsls	r3, r3, #8
 8004702:	429a      	cmp	r2, r3
 8004704:	d116      	bne.n	8004734 <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004706:	4b71      	ldr	r3, [pc, #452]	; (80048cc <HAL_RCC_OscConfig+0x338>)
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	2202      	movs	r2, #2
 800470c:	4013      	ands	r3, r2
 800470e:	d005      	beq.n	800471c <HAL_RCC_OscConfig+0x188>
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	68db      	ldr	r3, [r3, #12]
 8004714:	2b01      	cmp	r3, #1
 8004716:	d001      	beq.n	800471c <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8004718:	2301      	movs	r3, #1
 800471a:	e2bb      	b.n	8004c94 <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800471c:	4b6b      	ldr	r3, [pc, #428]	; (80048cc <HAL_RCC_OscConfig+0x338>)
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	22f8      	movs	r2, #248	; 0xf8
 8004722:	4393      	bics	r3, r2
 8004724:	0019      	movs	r1, r3
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	691b      	ldr	r3, [r3, #16]
 800472a:	00da      	lsls	r2, r3, #3
 800472c:	4b67      	ldr	r3, [pc, #412]	; (80048cc <HAL_RCC_OscConfig+0x338>)
 800472e:	430a      	orrs	r2, r1
 8004730:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004732:	e041      	b.n	80047b8 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	68db      	ldr	r3, [r3, #12]
 8004738:	2b00      	cmp	r3, #0
 800473a:	d024      	beq.n	8004786 <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800473c:	4b63      	ldr	r3, [pc, #396]	; (80048cc <HAL_RCC_OscConfig+0x338>)
 800473e:	681a      	ldr	r2, [r3, #0]
 8004740:	4b62      	ldr	r3, [pc, #392]	; (80048cc <HAL_RCC_OscConfig+0x338>)
 8004742:	2101      	movs	r1, #1
 8004744:	430a      	orrs	r2, r1
 8004746:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004748:	f7fd fa0e 	bl	8001b68 <HAL_GetTick>
 800474c:	0003      	movs	r3, r0
 800474e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004750:	e008      	b.n	8004764 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004752:	f7fd fa09 	bl	8001b68 <HAL_GetTick>
 8004756:	0002      	movs	r2, r0
 8004758:	69bb      	ldr	r3, [r7, #24]
 800475a:	1ad3      	subs	r3, r2, r3
 800475c:	2b02      	cmp	r3, #2
 800475e:	d901      	bls.n	8004764 <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8004760:	2303      	movs	r3, #3
 8004762:	e297      	b.n	8004c94 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004764:	4b59      	ldr	r3, [pc, #356]	; (80048cc <HAL_RCC_OscConfig+0x338>)
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	2202      	movs	r2, #2
 800476a:	4013      	ands	r3, r2
 800476c:	d0f1      	beq.n	8004752 <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800476e:	4b57      	ldr	r3, [pc, #348]	; (80048cc <HAL_RCC_OscConfig+0x338>)
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	22f8      	movs	r2, #248	; 0xf8
 8004774:	4393      	bics	r3, r2
 8004776:	0019      	movs	r1, r3
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	691b      	ldr	r3, [r3, #16]
 800477c:	00da      	lsls	r2, r3, #3
 800477e:	4b53      	ldr	r3, [pc, #332]	; (80048cc <HAL_RCC_OscConfig+0x338>)
 8004780:	430a      	orrs	r2, r1
 8004782:	601a      	str	r2, [r3, #0]
 8004784:	e018      	b.n	80047b8 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004786:	4b51      	ldr	r3, [pc, #324]	; (80048cc <HAL_RCC_OscConfig+0x338>)
 8004788:	681a      	ldr	r2, [r3, #0]
 800478a:	4b50      	ldr	r3, [pc, #320]	; (80048cc <HAL_RCC_OscConfig+0x338>)
 800478c:	2101      	movs	r1, #1
 800478e:	438a      	bics	r2, r1
 8004790:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004792:	f7fd f9e9 	bl	8001b68 <HAL_GetTick>
 8004796:	0003      	movs	r3, r0
 8004798:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800479a:	e008      	b.n	80047ae <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800479c:	f7fd f9e4 	bl	8001b68 <HAL_GetTick>
 80047a0:	0002      	movs	r2, r0
 80047a2:	69bb      	ldr	r3, [r7, #24]
 80047a4:	1ad3      	subs	r3, r2, r3
 80047a6:	2b02      	cmp	r3, #2
 80047a8:	d901      	bls.n	80047ae <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 80047aa:	2303      	movs	r3, #3
 80047ac:	e272      	b.n	8004c94 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80047ae:	4b47      	ldr	r3, [pc, #284]	; (80048cc <HAL_RCC_OscConfig+0x338>)
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	2202      	movs	r2, #2
 80047b4:	4013      	ands	r3, r2
 80047b6:	d1f1      	bne.n	800479c <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	2208      	movs	r2, #8
 80047be:	4013      	ands	r3, r2
 80047c0:	d036      	beq.n	8004830 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	69db      	ldr	r3, [r3, #28]
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d019      	beq.n	80047fe <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80047ca:	4b40      	ldr	r3, [pc, #256]	; (80048cc <HAL_RCC_OscConfig+0x338>)
 80047cc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80047ce:	4b3f      	ldr	r3, [pc, #252]	; (80048cc <HAL_RCC_OscConfig+0x338>)
 80047d0:	2101      	movs	r1, #1
 80047d2:	430a      	orrs	r2, r1
 80047d4:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80047d6:	f7fd f9c7 	bl	8001b68 <HAL_GetTick>
 80047da:	0003      	movs	r3, r0
 80047dc:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80047de:	e008      	b.n	80047f2 <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80047e0:	f7fd f9c2 	bl	8001b68 <HAL_GetTick>
 80047e4:	0002      	movs	r2, r0
 80047e6:	69bb      	ldr	r3, [r7, #24]
 80047e8:	1ad3      	subs	r3, r2, r3
 80047ea:	2b02      	cmp	r3, #2
 80047ec:	d901      	bls.n	80047f2 <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 80047ee:	2303      	movs	r3, #3
 80047f0:	e250      	b.n	8004c94 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80047f2:	4b36      	ldr	r3, [pc, #216]	; (80048cc <HAL_RCC_OscConfig+0x338>)
 80047f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047f6:	2202      	movs	r2, #2
 80047f8:	4013      	ands	r3, r2
 80047fa:	d0f1      	beq.n	80047e0 <HAL_RCC_OscConfig+0x24c>
 80047fc:	e018      	b.n	8004830 <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80047fe:	4b33      	ldr	r3, [pc, #204]	; (80048cc <HAL_RCC_OscConfig+0x338>)
 8004800:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004802:	4b32      	ldr	r3, [pc, #200]	; (80048cc <HAL_RCC_OscConfig+0x338>)
 8004804:	2101      	movs	r1, #1
 8004806:	438a      	bics	r2, r1
 8004808:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800480a:	f7fd f9ad 	bl	8001b68 <HAL_GetTick>
 800480e:	0003      	movs	r3, r0
 8004810:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004812:	e008      	b.n	8004826 <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004814:	f7fd f9a8 	bl	8001b68 <HAL_GetTick>
 8004818:	0002      	movs	r2, r0
 800481a:	69bb      	ldr	r3, [r7, #24]
 800481c:	1ad3      	subs	r3, r2, r3
 800481e:	2b02      	cmp	r3, #2
 8004820:	d901      	bls.n	8004826 <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 8004822:	2303      	movs	r3, #3
 8004824:	e236      	b.n	8004c94 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004826:	4b29      	ldr	r3, [pc, #164]	; (80048cc <HAL_RCC_OscConfig+0x338>)
 8004828:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800482a:	2202      	movs	r2, #2
 800482c:	4013      	ands	r3, r2
 800482e:	d1f1      	bne.n	8004814 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	2204      	movs	r2, #4
 8004836:	4013      	ands	r3, r2
 8004838:	d100      	bne.n	800483c <HAL_RCC_OscConfig+0x2a8>
 800483a:	e0b5      	b.n	80049a8 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 800483c:	201f      	movs	r0, #31
 800483e:	183b      	adds	r3, r7, r0
 8004840:	2200      	movs	r2, #0
 8004842:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004844:	4b21      	ldr	r3, [pc, #132]	; (80048cc <HAL_RCC_OscConfig+0x338>)
 8004846:	69da      	ldr	r2, [r3, #28]
 8004848:	2380      	movs	r3, #128	; 0x80
 800484a:	055b      	lsls	r3, r3, #21
 800484c:	4013      	ands	r3, r2
 800484e:	d110      	bne.n	8004872 <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004850:	4b1e      	ldr	r3, [pc, #120]	; (80048cc <HAL_RCC_OscConfig+0x338>)
 8004852:	69da      	ldr	r2, [r3, #28]
 8004854:	4b1d      	ldr	r3, [pc, #116]	; (80048cc <HAL_RCC_OscConfig+0x338>)
 8004856:	2180      	movs	r1, #128	; 0x80
 8004858:	0549      	lsls	r1, r1, #21
 800485a:	430a      	orrs	r2, r1
 800485c:	61da      	str	r2, [r3, #28]
 800485e:	4b1b      	ldr	r3, [pc, #108]	; (80048cc <HAL_RCC_OscConfig+0x338>)
 8004860:	69da      	ldr	r2, [r3, #28]
 8004862:	2380      	movs	r3, #128	; 0x80
 8004864:	055b      	lsls	r3, r3, #21
 8004866:	4013      	ands	r3, r2
 8004868:	60fb      	str	r3, [r7, #12]
 800486a:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800486c:	183b      	adds	r3, r7, r0
 800486e:	2201      	movs	r2, #1
 8004870:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004872:	4b19      	ldr	r3, [pc, #100]	; (80048d8 <HAL_RCC_OscConfig+0x344>)
 8004874:	681a      	ldr	r2, [r3, #0]
 8004876:	2380      	movs	r3, #128	; 0x80
 8004878:	005b      	lsls	r3, r3, #1
 800487a:	4013      	ands	r3, r2
 800487c:	d11a      	bne.n	80048b4 <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800487e:	4b16      	ldr	r3, [pc, #88]	; (80048d8 <HAL_RCC_OscConfig+0x344>)
 8004880:	681a      	ldr	r2, [r3, #0]
 8004882:	4b15      	ldr	r3, [pc, #84]	; (80048d8 <HAL_RCC_OscConfig+0x344>)
 8004884:	2180      	movs	r1, #128	; 0x80
 8004886:	0049      	lsls	r1, r1, #1
 8004888:	430a      	orrs	r2, r1
 800488a:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800488c:	f7fd f96c 	bl	8001b68 <HAL_GetTick>
 8004890:	0003      	movs	r3, r0
 8004892:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004894:	e008      	b.n	80048a8 <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004896:	f7fd f967 	bl	8001b68 <HAL_GetTick>
 800489a:	0002      	movs	r2, r0
 800489c:	69bb      	ldr	r3, [r7, #24]
 800489e:	1ad3      	subs	r3, r2, r3
 80048a0:	2b64      	cmp	r3, #100	; 0x64
 80048a2:	d901      	bls.n	80048a8 <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 80048a4:	2303      	movs	r3, #3
 80048a6:	e1f5      	b.n	8004c94 <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80048a8:	4b0b      	ldr	r3, [pc, #44]	; (80048d8 <HAL_RCC_OscConfig+0x344>)
 80048aa:	681a      	ldr	r2, [r3, #0]
 80048ac:	2380      	movs	r3, #128	; 0x80
 80048ae:	005b      	lsls	r3, r3, #1
 80048b0:	4013      	ands	r3, r2
 80048b2:	d0f0      	beq.n	8004896 <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	689b      	ldr	r3, [r3, #8]
 80048b8:	2b01      	cmp	r3, #1
 80048ba:	d10f      	bne.n	80048dc <HAL_RCC_OscConfig+0x348>
 80048bc:	4b03      	ldr	r3, [pc, #12]	; (80048cc <HAL_RCC_OscConfig+0x338>)
 80048be:	6a1a      	ldr	r2, [r3, #32]
 80048c0:	4b02      	ldr	r3, [pc, #8]	; (80048cc <HAL_RCC_OscConfig+0x338>)
 80048c2:	2101      	movs	r1, #1
 80048c4:	430a      	orrs	r2, r1
 80048c6:	621a      	str	r2, [r3, #32]
 80048c8:	e036      	b.n	8004938 <HAL_RCC_OscConfig+0x3a4>
 80048ca:	46c0      	nop			; (mov r8, r8)
 80048cc:	40021000 	.word	0x40021000
 80048d0:	fffeffff 	.word	0xfffeffff
 80048d4:	fffbffff 	.word	0xfffbffff
 80048d8:	40007000 	.word	0x40007000
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	689b      	ldr	r3, [r3, #8]
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d10c      	bne.n	80048fe <HAL_RCC_OscConfig+0x36a>
 80048e4:	4bca      	ldr	r3, [pc, #808]	; (8004c10 <HAL_RCC_OscConfig+0x67c>)
 80048e6:	6a1a      	ldr	r2, [r3, #32]
 80048e8:	4bc9      	ldr	r3, [pc, #804]	; (8004c10 <HAL_RCC_OscConfig+0x67c>)
 80048ea:	2101      	movs	r1, #1
 80048ec:	438a      	bics	r2, r1
 80048ee:	621a      	str	r2, [r3, #32]
 80048f0:	4bc7      	ldr	r3, [pc, #796]	; (8004c10 <HAL_RCC_OscConfig+0x67c>)
 80048f2:	6a1a      	ldr	r2, [r3, #32]
 80048f4:	4bc6      	ldr	r3, [pc, #792]	; (8004c10 <HAL_RCC_OscConfig+0x67c>)
 80048f6:	2104      	movs	r1, #4
 80048f8:	438a      	bics	r2, r1
 80048fa:	621a      	str	r2, [r3, #32]
 80048fc:	e01c      	b.n	8004938 <HAL_RCC_OscConfig+0x3a4>
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	689b      	ldr	r3, [r3, #8]
 8004902:	2b05      	cmp	r3, #5
 8004904:	d10c      	bne.n	8004920 <HAL_RCC_OscConfig+0x38c>
 8004906:	4bc2      	ldr	r3, [pc, #776]	; (8004c10 <HAL_RCC_OscConfig+0x67c>)
 8004908:	6a1a      	ldr	r2, [r3, #32]
 800490a:	4bc1      	ldr	r3, [pc, #772]	; (8004c10 <HAL_RCC_OscConfig+0x67c>)
 800490c:	2104      	movs	r1, #4
 800490e:	430a      	orrs	r2, r1
 8004910:	621a      	str	r2, [r3, #32]
 8004912:	4bbf      	ldr	r3, [pc, #764]	; (8004c10 <HAL_RCC_OscConfig+0x67c>)
 8004914:	6a1a      	ldr	r2, [r3, #32]
 8004916:	4bbe      	ldr	r3, [pc, #760]	; (8004c10 <HAL_RCC_OscConfig+0x67c>)
 8004918:	2101      	movs	r1, #1
 800491a:	430a      	orrs	r2, r1
 800491c:	621a      	str	r2, [r3, #32]
 800491e:	e00b      	b.n	8004938 <HAL_RCC_OscConfig+0x3a4>
 8004920:	4bbb      	ldr	r3, [pc, #748]	; (8004c10 <HAL_RCC_OscConfig+0x67c>)
 8004922:	6a1a      	ldr	r2, [r3, #32]
 8004924:	4bba      	ldr	r3, [pc, #744]	; (8004c10 <HAL_RCC_OscConfig+0x67c>)
 8004926:	2101      	movs	r1, #1
 8004928:	438a      	bics	r2, r1
 800492a:	621a      	str	r2, [r3, #32]
 800492c:	4bb8      	ldr	r3, [pc, #736]	; (8004c10 <HAL_RCC_OscConfig+0x67c>)
 800492e:	6a1a      	ldr	r2, [r3, #32]
 8004930:	4bb7      	ldr	r3, [pc, #732]	; (8004c10 <HAL_RCC_OscConfig+0x67c>)
 8004932:	2104      	movs	r1, #4
 8004934:	438a      	bics	r2, r1
 8004936:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	689b      	ldr	r3, [r3, #8]
 800493c:	2b00      	cmp	r3, #0
 800493e:	d014      	beq.n	800496a <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004940:	f7fd f912 	bl	8001b68 <HAL_GetTick>
 8004944:	0003      	movs	r3, r0
 8004946:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004948:	e009      	b.n	800495e <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800494a:	f7fd f90d 	bl	8001b68 <HAL_GetTick>
 800494e:	0002      	movs	r2, r0
 8004950:	69bb      	ldr	r3, [r7, #24]
 8004952:	1ad3      	subs	r3, r2, r3
 8004954:	4aaf      	ldr	r2, [pc, #700]	; (8004c14 <HAL_RCC_OscConfig+0x680>)
 8004956:	4293      	cmp	r3, r2
 8004958:	d901      	bls.n	800495e <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 800495a:	2303      	movs	r3, #3
 800495c:	e19a      	b.n	8004c94 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800495e:	4bac      	ldr	r3, [pc, #688]	; (8004c10 <HAL_RCC_OscConfig+0x67c>)
 8004960:	6a1b      	ldr	r3, [r3, #32]
 8004962:	2202      	movs	r2, #2
 8004964:	4013      	ands	r3, r2
 8004966:	d0f0      	beq.n	800494a <HAL_RCC_OscConfig+0x3b6>
 8004968:	e013      	b.n	8004992 <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800496a:	f7fd f8fd 	bl	8001b68 <HAL_GetTick>
 800496e:	0003      	movs	r3, r0
 8004970:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004972:	e009      	b.n	8004988 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004974:	f7fd f8f8 	bl	8001b68 <HAL_GetTick>
 8004978:	0002      	movs	r2, r0
 800497a:	69bb      	ldr	r3, [r7, #24]
 800497c:	1ad3      	subs	r3, r2, r3
 800497e:	4aa5      	ldr	r2, [pc, #660]	; (8004c14 <HAL_RCC_OscConfig+0x680>)
 8004980:	4293      	cmp	r3, r2
 8004982:	d901      	bls.n	8004988 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8004984:	2303      	movs	r3, #3
 8004986:	e185      	b.n	8004c94 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004988:	4ba1      	ldr	r3, [pc, #644]	; (8004c10 <HAL_RCC_OscConfig+0x67c>)
 800498a:	6a1b      	ldr	r3, [r3, #32]
 800498c:	2202      	movs	r2, #2
 800498e:	4013      	ands	r3, r2
 8004990:	d1f0      	bne.n	8004974 <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004992:	231f      	movs	r3, #31
 8004994:	18fb      	adds	r3, r7, r3
 8004996:	781b      	ldrb	r3, [r3, #0]
 8004998:	2b01      	cmp	r3, #1
 800499a:	d105      	bne.n	80049a8 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800499c:	4b9c      	ldr	r3, [pc, #624]	; (8004c10 <HAL_RCC_OscConfig+0x67c>)
 800499e:	69da      	ldr	r2, [r3, #28]
 80049a0:	4b9b      	ldr	r3, [pc, #620]	; (8004c10 <HAL_RCC_OscConfig+0x67c>)
 80049a2:	499d      	ldr	r1, [pc, #628]	; (8004c18 <HAL_RCC_OscConfig+0x684>)
 80049a4:	400a      	ands	r2, r1
 80049a6:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	2210      	movs	r2, #16
 80049ae:	4013      	ands	r3, r2
 80049b0:	d063      	beq.n	8004a7a <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	695b      	ldr	r3, [r3, #20]
 80049b6:	2b01      	cmp	r3, #1
 80049b8:	d12a      	bne.n	8004a10 <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80049ba:	4b95      	ldr	r3, [pc, #596]	; (8004c10 <HAL_RCC_OscConfig+0x67c>)
 80049bc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80049be:	4b94      	ldr	r3, [pc, #592]	; (8004c10 <HAL_RCC_OscConfig+0x67c>)
 80049c0:	2104      	movs	r1, #4
 80049c2:	430a      	orrs	r2, r1
 80049c4:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 80049c6:	4b92      	ldr	r3, [pc, #584]	; (8004c10 <HAL_RCC_OscConfig+0x67c>)
 80049c8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80049ca:	4b91      	ldr	r3, [pc, #580]	; (8004c10 <HAL_RCC_OscConfig+0x67c>)
 80049cc:	2101      	movs	r1, #1
 80049ce:	430a      	orrs	r2, r1
 80049d0:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80049d2:	f7fd f8c9 	bl	8001b68 <HAL_GetTick>
 80049d6:	0003      	movs	r3, r0
 80049d8:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80049da:	e008      	b.n	80049ee <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80049dc:	f7fd f8c4 	bl	8001b68 <HAL_GetTick>
 80049e0:	0002      	movs	r2, r0
 80049e2:	69bb      	ldr	r3, [r7, #24]
 80049e4:	1ad3      	subs	r3, r2, r3
 80049e6:	2b02      	cmp	r3, #2
 80049e8:	d901      	bls.n	80049ee <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 80049ea:	2303      	movs	r3, #3
 80049ec:	e152      	b.n	8004c94 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80049ee:	4b88      	ldr	r3, [pc, #544]	; (8004c10 <HAL_RCC_OscConfig+0x67c>)
 80049f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049f2:	2202      	movs	r2, #2
 80049f4:	4013      	ands	r3, r2
 80049f6:	d0f1      	beq.n	80049dc <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80049f8:	4b85      	ldr	r3, [pc, #532]	; (8004c10 <HAL_RCC_OscConfig+0x67c>)
 80049fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049fc:	22f8      	movs	r2, #248	; 0xf8
 80049fe:	4393      	bics	r3, r2
 8004a00:	0019      	movs	r1, r3
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	699b      	ldr	r3, [r3, #24]
 8004a06:	00da      	lsls	r2, r3, #3
 8004a08:	4b81      	ldr	r3, [pc, #516]	; (8004c10 <HAL_RCC_OscConfig+0x67c>)
 8004a0a:	430a      	orrs	r2, r1
 8004a0c:	635a      	str	r2, [r3, #52]	; 0x34
 8004a0e:	e034      	b.n	8004a7a <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	695b      	ldr	r3, [r3, #20]
 8004a14:	3305      	adds	r3, #5
 8004a16:	d111      	bne.n	8004a3c <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8004a18:	4b7d      	ldr	r3, [pc, #500]	; (8004c10 <HAL_RCC_OscConfig+0x67c>)
 8004a1a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004a1c:	4b7c      	ldr	r3, [pc, #496]	; (8004c10 <HAL_RCC_OscConfig+0x67c>)
 8004a1e:	2104      	movs	r1, #4
 8004a20:	438a      	bics	r2, r1
 8004a22:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8004a24:	4b7a      	ldr	r3, [pc, #488]	; (8004c10 <HAL_RCC_OscConfig+0x67c>)
 8004a26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a28:	22f8      	movs	r2, #248	; 0xf8
 8004a2a:	4393      	bics	r3, r2
 8004a2c:	0019      	movs	r1, r3
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	699b      	ldr	r3, [r3, #24]
 8004a32:	00da      	lsls	r2, r3, #3
 8004a34:	4b76      	ldr	r3, [pc, #472]	; (8004c10 <HAL_RCC_OscConfig+0x67c>)
 8004a36:	430a      	orrs	r2, r1
 8004a38:	635a      	str	r2, [r3, #52]	; 0x34
 8004a3a:	e01e      	b.n	8004a7a <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8004a3c:	4b74      	ldr	r3, [pc, #464]	; (8004c10 <HAL_RCC_OscConfig+0x67c>)
 8004a3e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004a40:	4b73      	ldr	r3, [pc, #460]	; (8004c10 <HAL_RCC_OscConfig+0x67c>)
 8004a42:	2104      	movs	r1, #4
 8004a44:	430a      	orrs	r2, r1
 8004a46:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8004a48:	4b71      	ldr	r3, [pc, #452]	; (8004c10 <HAL_RCC_OscConfig+0x67c>)
 8004a4a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004a4c:	4b70      	ldr	r3, [pc, #448]	; (8004c10 <HAL_RCC_OscConfig+0x67c>)
 8004a4e:	2101      	movs	r1, #1
 8004a50:	438a      	bics	r2, r1
 8004a52:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004a54:	f7fd f888 	bl	8001b68 <HAL_GetTick>
 8004a58:	0003      	movs	r3, r0
 8004a5a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8004a5c:	e008      	b.n	8004a70 <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8004a5e:	f7fd f883 	bl	8001b68 <HAL_GetTick>
 8004a62:	0002      	movs	r2, r0
 8004a64:	69bb      	ldr	r3, [r7, #24]
 8004a66:	1ad3      	subs	r3, r2, r3
 8004a68:	2b02      	cmp	r3, #2
 8004a6a:	d901      	bls.n	8004a70 <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 8004a6c:	2303      	movs	r3, #3
 8004a6e:	e111      	b.n	8004c94 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8004a70:	4b67      	ldr	r3, [pc, #412]	; (8004c10 <HAL_RCC_OscConfig+0x67c>)
 8004a72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a74:	2202      	movs	r2, #2
 8004a76:	4013      	ands	r3, r2
 8004a78:	d1f1      	bne.n	8004a5e <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	2220      	movs	r2, #32
 8004a80:	4013      	ands	r3, r2
 8004a82:	d05c      	beq.n	8004b3e <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8004a84:	4b62      	ldr	r3, [pc, #392]	; (8004c10 <HAL_RCC_OscConfig+0x67c>)
 8004a86:	685b      	ldr	r3, [r3, #4]
 8004a88:	220c      	movs	r2, #12
 8004a8a:	4013      	ands	r3, r2
 8004a8c:	2b0c      	cmp	r3, #12
 8004a8e:	d00e      	beq.n	8004aae <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8004a90:	4b5f      	ldr	r3, [pc, #380]	; (8004c10 <HAL_RCC_OscConfig+0x67c>)
 8004a92:	685b      	ldr	r3, [r3, #4]
 8004a94:	220c      	movs	r2, #12
 8004a96:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8004a98:	2b08      	cmp	r3, #8
 8004a9a:	d114      	bne.n	8004ac6 <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8004a9c:	4b5c      	ldr	r3, [pc, #368]	; (8004c10 <HAL_RCC_OscConfig+0x67c>)
 8004a9e:	685a      	ldr	r2, [r3, #4]
 8004aa0:	23c0      	movs	r3, #192	; 0xc0
 8004aa2:	025b      	lsls	r3, r3, #9
 8004aa4:	401a      	ands	r2, r3
 8004aa6:	23c0      	movs	r3, #192	; 0xc0
 8004aa8:	025b      	lsls	r3, r3, #9
 8004aaa:	429a      	cmp	r2, r3
 8004aac:	d10b      	bne.n	8004ac6 <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8004aae:	4b58      	ldr	r3, [pc, #352]	; (8004c10 <HAL_RCC_OscConfig+0x67c>)
 8004ab0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004ab2:	2380      	movs	r3, #128	; 0x80
 8004ab4:	025b      	lsls	r3, r3, #9
 8004ab6:	4013      	ands	r3, r2
 8004ab8:	d040      	beq.n	8004b3c <HAL_RCC_OscConfig+0x5a8>
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	6a1b      	ldr	r3, [r3, #32]
 8004abe:	2b01      	cmp	r3, #1
 8004ac0:	d03c      	beq.n	8004b3c <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8004ac2:	2301      	movs	r3, #1
 8004ac4:	e0e6      	b.n	8004c94 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	6a1b      	ldr	r3, [r3, #32]
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d01b      	beq.n	8004b06 <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8004ace:	4b50      	ldr	r3, [pc, #320]	; (8004c10 <HAL_RCC_OscConfig+0x67c>)
 8004ad0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004ad2:	4b4f      	ldr	r3, [pc, #316]	; (8004c10 <HAL_RCC_OscConfig+0x67c>)
 8004ad4:	2180      	movs	r1, #128	; 0x80
 8004ad6:	0249      	lsls	r1, r1, #9
 8004ad8:	430a      	orrs	r2, r1
 8004ada:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004adc:	f7fd f844 	bl	8001b68 <HAL_GetTick>
 8004ae0:	0003      	movs	r3, r0
 8004ae2:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8004ae4:	e008      	b.n	8004af8 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004ae6:	f7fd f83f 	bl	8001b68 <HAL_GetTick>
 8004aea:	0002      	movs	r2, r0
 8004aec:	69bb      	ldr	r3, [r7, #24]
 8004aee:	1ad3      	subs	r3, r2, r3
 8004af0:	2b02      	cmp	r3, #2
 8004af2:	d901      	bls.n	8004af8 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 8004af4:	2303      	movs	r3, #3
 8004af6:	e0cd      	b.n	8004c94 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8004af8:	4b45      	ldr	r3, [pc, #276]	; (8004c10 <HAL_RCC_OscConfig+0x67c>)
 8004afa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004afc:	2380      	movs	r3, #128	; 0x80
 8004afe:	025b      	lsls	r3, r3, #9
 8004b00:	4013      	ands	r3, r2
 8004b02:	d0f0      	beq.n	8004ae6 <HAL_RCC_OscConfig+0x552>
 8004b04:	e01b      	b.n	8004b3e <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8004b06:	4b42      	ldr	r3, [pc, #264]	; (8004c10 <HAL_RCC_OscConfig+0x67c>)
 8004b08:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004b0a:	4b41      	ldr	r3, [pc, #260]	; (8004c10 <HAL_RCC_OscConfig+0x67c>)
 8004b0c:	4943      	ldr	r1, [pc, #268]	; (8004c1c <HAL_RCC_OscConfig+0x688>)
 8004b0e:	400a      	ands	r2, r1
 8004b10:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b12:	f7fd f829 	bl	8001b68 <HAL_GetTick>
 8004b16:	0003      	movs	r3, r0
 8004b18:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8004b1a:	e008      	b.n	8004b2e <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004b1c:	f7fd f824 	bl	8001b68 <HAL_GetTick>
 8004b20:	0002      	movs	r2, r0
 8004b22:	69bb      	ldr	r3, [r7, #24]
 8004b24:	1ad3      	subs	r3, r2, r3
 8004b26:	2b02      	cmp	r3, #2
 8004b28:	d901      	bls.n	8004b2e <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 8004b2a:	2303      	movs	r3, #3
 8004b2c:	e0b2      	b.n	8004c94 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8004b2e:	4b38      	ldr	r3, [pc, #224]	; (8004c10 <HAL_RCC_OscConfig+0x67c>)
 8004b30:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004b32:	2380      	movs	r3, #128	; 0x80
 8004b34:	025b      	lsls	r3, r3, #9
 8004b36:	4013      	ands	r3, r2
 8004b38:	d1f0      	bne.n	8004b1c <HAL_RCC_OscConfig+0x588>
 8004b3a:	e000      	b.n	8004b3e <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8004b3c:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d100      	bne.n	8004b48 <HAL_RCC_OscConfig+0x5b4>
 8004b46:	e0a4      	b.n	8004c92 <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004b48:	4b31      	ldr	r3, [pc, #196]	; (8004c10 <HAL_RCC_OscConfig+0x67c>)
 8004b4a:	685b      	ldr	r3, [r3, #4]
 8004b4c:	220c      	movs	r2, #12
 8004b4e:	4013      	ands	r3, r2
 8004b50:	2b08      	cmp	r3, #8
 8004b52:	d100      	bne.n	8004b56 <HAL_RCC_OscConfig+0x5c2>
 8004b54:	e078      	b.n	8004c48 <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b5a:	2b02      	cmp	r3, #2
 8004b5c:	d14c      	bne.n	8004bf8 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004b5e:	4b2c      	ldr	r3, [pc, #176]	; (8004c10 <HAL_RCC_OscConfig+0x67c>)
 8004b60:	681a      	ldr	r2, [r3, #0]
 8004b62:	4b2b      	ldr	r3, [pc, #172]	; (8004c10 <HAL_RCC_OscConfig+0x67c>)
 8004b64:	492e      	ldr	r1, [pc, #184]	; (8004c20 <HAL_RCC_OscConfig+0x68c>)
 8004b66:	400a      	ands	r2, r1
 8004b68:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b6a:	f7fc fffd 	bl	8001b68 <HAL_GetTick>
 8004b6e:	0003      	movs	r3, r0
 8004b70:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004b72:	e008      	b.n	8004b86 <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004b74:	f7fc fff8 	bl	8001b68 <HAL_GetTick>
 8004b78:	0002      	movs	r2, r0
 8004b7a:	69bb      	ldr	r3, [r7, #24]
 8004b7c:	1ad3      	subs	r3, r2, r3
 8004b7e:	2b02      	cmp	r3, #2
 8004b80:	d901      	bls.n	8004b86 <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 8004b82:	2303      	movs	r3, #3
 8004b84:	e086      	b.n	8004c94 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004b86:	4b22      	ldr	r3, [pc, #136]	; (8004c10 <HAL_RCC_OscConfig+0x67c>)
 8004b88:	681a      	ldr	r2, [r3, #0]
 8004b8a:	2380      	movs	r3, #128	; 0x80
 8004b8c:	049b      	lsls	r3, r3, #18
 8004b8e:	4013      	ands	r3, r2
 8004b90:	d1f0      	bne.n	8004b74 <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004b92:	4b1f      	ldr	r3, [pc, #124]	; (8004c10 <HAL_RCC_OscConfig+0x67c>)
 8004b94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b96:	220f      	movs	r2, #15
 8004b98:	4393      	bics	r3, r2
 8004b9a:	0019      	movs	r1, r3
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004ba0:	4b1b      	ldr	r3, [pc, #108]	; (8004c10 <HAL_RCC_OscConfig+0x67c>)
 8004ba2:	430a      	orrs	r2, r1
 8004ba4:	62da      	str	r2, [r3, #44]	; 0x2c
 8004ba6:	4b1a      	ldr	r3, [pc, #104]	; (8004c10 <HAL_RCC_OscConfig+0x67c>)
 8004ba8:	685b      	ldr	r3, [r3, #4]
 8004baa:	4a1e      	ldr	r2, [pc, #120]	; (8004c24 <HAL_RCC_OscConfig+0x690>)
 8004bac:	4013      	ands	r3, r2
 8004bae:	0019      	movs	r1, r3
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bb8:	431a      	orrs	r2, r3
 8004bba:	4b15      	ldr	r3, [pc, #84]	; (8004c10 <HAL_RCC_OscConfig+0x67c>)
 8004bbc:	430a      	orrs	r2, r1
 8004bbe:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004bc0:	4b13      	ldr	r3, [pc, #76]	; (8004c10 <HAL_RCC_OscConfig+0x67c>)
 8004bc2:	681a      	ldr	r2, [r3, #0]
 8004bc4:	4b12      	ldr	r3, [pc, #72]	; (8004c10 <HAL_RCC_OscConfig+0x67c>)
 8004bc6:	2180      	movs	r1, #128	; 0x80
 8004bc8:	0449      	lsls	r1, r1, #17
 8004bca:	430a      	orrs	r2, r1
 8004bcc:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004bce:	f7fc ffcb 	bl	8001b68 <HAL_GetTick>
 8004bd2:	0003      	movs	r3, r0
 8004bd4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004bd6:	e008      	b.n	8004bea <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004bd8:	f7fc ffc6 	bl	8001b68 <HAL_GetTick>
 8004bdc:	0002      	movs	r2, r0
 8004bde:	69bb      	ldr	r3, [r7, #24]
 8004be0:	1ad3      	subs	r3, r2, r3
 8004be2:	2b02      	cmp	r3, #2
 8004be4:	d901      	bls.n	8004bea <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 8004be6:	2303      	movs	r3, #3
 8004be8:	e054      	b.n	8004c94 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004bea:	4b09      	ldr	r3, [pc, #36]	; (8004c10 <HAL_RCC_OscConfig+0x67c>)
 8004bec:	681a      	ldr	r2, [r3, #0]
 8004bee:	2380      	movs	r3, #128	; 0x80
 8004bf0:	049b      	lsls	r3, r3, #18
 8004bf2:	4013      	ands	r3, r2
 8004bf4:	d0f0      	beq.n	8004bd8 <HAL_RCC_OscConfig+0x644>
 8004bf6:	e04c      	b.n	8004c92 <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004bf8:	4b05      	ldr	r3, [pc, #20]	; (8004c10 <HAL_RCC_OscConfig+0x67c>)
 8004bfa:	681a      	ldr	r2, [r3, #0]
 8004bfc:	4b04      	ldr	r3, [pc, #16]	; (8004c10 <HAL_RCC_OscConfig+0x67c>)
 8004bfe:	4908      	ldr	r1, [pc, #32]	; (8004c20 <HAL_RCC_OscConfig+0x68c>)
 8004c00:	400a      	ands	r2, r1
 8004c02:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c04:	f7fc ffb0 	bl	8001b68 <HAL_GetTick>
 8004c08:	0003      	movs	r3, r0
 8004c0a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004c0c:	e015      	b.n	8004c3a <HAL_RCC_OscConfig+0x6a6>
 8004c0e:	46c0      	nop			; (mov r8, r8)
 8004c10:	40021000 	.word	0x40021000
 8004c14:	00001388 	.word	0x00001388
 8004c18:	efffffff 	.word	0xefffffff
 8004c1c:	fffeffff 	.word	0xfffeffff
 8004c20:	feffffff 	.word	0xfeffffff
 8004c24:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004c28:	f7fc ff9e 	bl	8001b68 <HAL_GetTick>
 8004c2c:	0002      	movs	r2, r0
 8004c2e:	69bb      	ldr	r3, [r7, #24]
 8004c30:	1ad3      	subs	r3, r2, r3
 8004c32:	2b02      	cmp	r3, #2
 8004c34:	d901      	bls.n	8004c3a <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 8004c36:	2303      	movs	r3, #3
 8004c38:	e02c      	b.n	8004c94 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004c3a:	4b18      	ldr	r3, [pc, #96]	; (8004c9c <HAL_RCC_OscConfig+0x708>)
 8004c3c:	681a      	ldr	r2, [r3, #0]
 8004c3e:	2380      	movs	r3, #128	; 0x80
 8004c40:	049b      	lsls	r3, r3, #18
 8004c42:	4013      	ands	r3, r2
 8004c44:	d1f0      	bne.n	8004c28 <HAL_RCC_OscConfig+0x694>
 8004c46:	e024      	b.n	8004c92 <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c4c:	2b01      	cmp	r3, #1
 8004c4e:	d101      	bne.n	8004c54 <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 8004c50:	2301      	movs	r3, #1
 8004c52:	e01f      	b.n	8004c94 <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8004c54:	4b11      	ldr	r3, [pc, #68]	; (8004c9c <HAL_RCC_OscConfig+0x708>)
 8004c56:	685b      	ldr	r3, [r3, #4]
 8004c58:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8004c5a:	4b10      	ldr	r3, [pc, #64]	; (8004c9c <HAL_RCC_OscConfig+0x708>)
 8004c5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c5e:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004c60:	697a      	ldr	r2, [r7, #20]
 8004c62:	23c0      	movs	r3, #192	; 0xc0
 8004c64:	025b      	lsls	r3, r3, #9
 8004c66:	401a      	ands	r2, r3
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c6c:	429a      	cmp	r2, r3
 8004c6e:	d10e      	bne.n	8004c8e <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8004c70:	693b      	ldr	r3, [r7, #16]
 8004c72:	220f      	movs	r2, #15
 8004c74:	401a      	ands	r2, r3
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004c7a:	429a      	cmp	r2, r3
 8004c7c:	d107      	bne.n	8004c8e <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8004c7e:	697a      	ldr	r2, [r7, #20]
 8004c80:	23f0      	movs	r3, #240	; 0xf0
 8004c82:	039b      	lsls	r3, r3, #14
 8004c84:	401a      	ands	r2, r3
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8004c8a:	429a      	cmp	r2, r3
 8004c8c:	d001      	beq.n	8004c92 <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 8004c8e:	2301      	movs	r3, #1
 8004c90:	e000      	b.n	8004c94 <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 8004c92:	2300      	movs	r3, #0
}
 8004c94:	0018      	movs	r0, r3
 8004c96:	46bd      	mov	sp, r7
 8004c98:	b008      	add	sp, #32
 8004c9a:	bd80      	pop	{r7, pc}
 8004c9c:	40021000 	.word	0x40021000

08004ca0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004ca0:	b580      	push	{r7, lr}
 8004ca2:	b084      	sub	sp, #16
 8004ca4:	af00      	add	r7, sp, #0
 8004ca6:	6078      	str	r0, [r7, #4]
 8004ca8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d101      	bne.n	8004cb4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004cb0:	2301      	movs	r3, #1
 8004cb2:	e0bf      	b.n	8004e34 <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004cb4:	4b61      	ldr	r3, [pc, #388]	; (8004e3c <HAL_RCC_ClockConfig+0x19c>)
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	2201      	movs	r2, #1
 8004cba:	4013      	ands	r3, r2
 8004cbc:	683a      	ldr	r2, [r7, #0]
 8004cbe:	429a      	cmp	r2, r3
 8004cc0:	d911      	bls.n	8004ce6 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004cc2:	4b5e      	ldr	r3, [pc, #376]	; (8004e3c <HAL_RCC_ClockConfig+0x19c>)
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	2201      	movs	r2, #1
 8004cc8:	4393      	bics	r3, r2
 8004cca:	0019      	movs	r1, r3
 8004ccc:	4b5b      	ldr	r3, [pc, #364]	; (8004e3c <HAL_RCC_ClockConfig+0x19c>)
 8004cce:	683a      	ldr	r2, [r7, #0]
 8004cd0:	430a      	orrs	r2, r1
 8004cd2:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004cd4:	4b59      	ldr	r3, [pc, #356]	; (8004e3c <HAL_RCC_ClockConfig+0x19c>)
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	2201      	movs	r2, #1
 8004cda:	4013      	ands	r3, r2
 8004cdc:	683a      	ldr	r2, [r7, #0]
 8004cde:	429a      	cmp	r2, r3
 8004ce0:	d001      	beq.n	8004ce6 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8004ce2:	2301      	movs	r3, #1
 8004ce4:	e0a6      	b.n	8004e34 <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	2202      	movs	r2, #2
 8004cec:	4013      	ands	r3, r2
 8004cee:	d015      	beq.n	8004d1c <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	2204      	movs	r2, #4
 8004cf6:	4013      	ands	r3, r2
 8004cf8:	d006      	beq.n	8004d08 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8004cfa:	4b51      	ldr	r3, [pc, #324]	; (8004e40 <HAL_RCC_ClockConfig+0x1a0>)
 8004cfc:	685a      	ldr	r2, [r3, #4]
 8004cfe:	4b50      	ldr	r3, [pc, #320]	; (8004e40 <HAL_RCC_ClockConfig+0x1a0>)
 8004d00:	21e0      	movs	r1, #224	; 0xe0
 8004d02:	00c9      	lsls	r1, r1, #3
 8004d04:	430a      	orrs	r2, r1
 8004d06:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004d08:	4b4d      	ldr	r3, [pc, #308]	; (8004e40 <HAL_RCC_ClockConfig+0x1a0>)
 8004d0a:	685b      	ldr	r3, [r3, #4]
 8004d0c:	22f0      	movs	r2, #240	; 0xf0
 8004d0e:	4393      	bics	r3, r2
 8004d10:	0019      	movs	r1, r3
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	689a      	ldr	r2, [r3, #8]
 8004d16:	4b4a      	ldr	r3, [pc, #296]	; (8004e40 <HAL_RCC_ClockConfig+0x1a0>)
 8004d18:	430a      	orrs	r2, r1
 8004d1a:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	2201      	movs	r2, #1
 8004d22:	4013      	ands	r3, r2
 8004d24:	d04c      	beq.n	8004dc0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	685b      	ldr	r3, [r3, #4]
 8004d2a:	2b01      	cmp	r3, #1
 8004d2c:	d107      	bne.n	8004d3e <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004d2e:	4b44      	ldr	r3, [pc, #272]	; (8004e40 <HAL_RCC_ClockConfig+0x1a0>)
 8004d30:	681a      	ldr	r2, [r3, #0]
 8004d32:	2380      	movs	r3, #128	; 0x80
 8004d34:	029b      	lsls	r3, r3, #10
 8004d36:	4013      	ands	r3, r2
 8004d38:	d120      	bne.n	8004d7c <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8004d3a:	2301      	movs	r3, #1
 8004d3c:	e07a      	b.n	8004e34 <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	685b      	ldr	r3, [r3, #4]
 8004d42:	2b02      	cmp	r3, #2
 8004d44:	d107      	bne.n	8004d56 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004d46:	4b3e      	ldr	r3, [pc, #248]	; (8004e40 <HAL_RCC_ClockConfig+0x1a0>)
 8004d48:	681a      	ldr	r2, [r3, #0]
 8004d4a:	2380      	movs	r3, #128	; 0x80
 8004d4c:	049b      	lsls	r3, r3, #18
 8004d4e:	4013      	ands	r3, r2
 8004d50:	d114      	bne.n	8004d7c <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8004d52:	2301      	movs	r3, #1
 8004d54:	e06e      	b.n	8004e34 <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	685b      	ldr	r3, [r3, #4]
 8004d5a:	2b03      	cmp	r3, #3
 8004d5c:	d107      	bne.n	8004d6e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8004d5e:	4b38      	ldr	r3, [pc, #224]	; (8004e40 <HAL_RCC_ClockConfig+0x1a0>)
 8004d60:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004d62:	2380      	movs	r3, #128	; 0x80
 8004d64:	025b      	lsls	r3, r3, #9
 8004d66:	4013      	ands	r3, r2
 8004d68:	d108      	bne.n	8004d7c <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8004d6a:	2301      	movs	r3, #1
 8004d6c:	e062      	b.n	8004e34 <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004d6e:	4b34      	ldr	r3, [pc, #208]	; (8004e40 <HAL_RCC_ClockConfig+0x1a0>)
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	2202      	movs	r2, #2
 8004d74:	4013      	ands	r3, r2
 8004d76:	d101      	bne.n	8004d7c <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8004d78:	2301      	movs	r3, #1
 8004d7a:	e05b      	b.n	8004e34 <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004d7c:	4b30      	ldr	r3, [pc, #192]	; (8004e40 <HAL_RCC_ClockConfig+0x1a0>)
 8004d7e:	685b      	ldr	r3, [r3, #4]
 8004d80:	2203      	movs	r2, #3
 8004d82:	4393      	bics	r3, r2
 8004d84:	0019      	movs	r1, r3
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	685a      	ldr	r2, [r3, #4]
 8004d8a:	4b2d      	ldr	r3, [pc, #180]	; (8004e40 <HAL_RCC_ClockConfig+0x1a0>)
 8004d8c:	430a      	orrs	r2, r1
 8004d8e:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004d90:	f7fc feea 	bl	8001b68 <HAL_GetTick>
 8004d94:	0003      	movs	r3, r0
 8004d96:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004d98:	e009      	b.n	8004dae <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004d9a:	f7fc fee5 	bl	8001b68 <HAL_GetTick>
 8004d9e:	0002      	movs	r2, r0
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	1ad3      	subs	r3, r2, r3
 8004da4:	4a27      	ldr	r2, [pc, #156]	; (8004e44 <HAL_RCC_ClockConfig+0x1a4>)
 8004da6:	4293      	cmp	r3, r2
 8004da8:	d901      	bls.n	8004dae <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004daa:	2303      	movs	r3, #3
 8004dac:	e042      	b.n	8004e34 <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004dae:	4b24      	ldr	r3, [pc, #144]	; (8004e40 <HAL_RCC_ClockConfig+0x1a0>)
 8004db0:	685b      	ldr	r3, [r3, #4]
 8004db2:	220c      	movs	r2, #12
 8004db4:	401a      	ands	r2, r3
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	685b      	ldr	r3, [r3, #4]
 8004dba:	009b      	lsls	r3, r3, #2
 8004dbc:	429a      	cmp	r2, r3
 8004dbe:	d1ec      	bne.n	8004d9a <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004dc0:	4b1e      	ldr	r3, [pc, #120]	; (8004e3c <HAL_RCC_ClockConfig+0x19c>)
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	2201      	movs	r2, #1
 8004dc6:	4013      	ands	r3, r2
 8004dc8:	683a      	ldr	r2, [r7, #0]
 8004dca:	429a      	cmp	r2, r3
 8004dcc:	d211      	bcs.n	8004df2 <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004dce:	4b1b      	ldr	r3, [pc, #108]	; (8004e3c <HAL_RCC_ClockConfig+0x19c>)
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	2201      	movs	r2, #1
 8004dd4:	4393      	bics	r3, r2
 8004dd6:	0019      	movs	r1, r3
 8004dd8:	4b18      	ldr	r3, [pc, #96]	; (8004e3c <HAL_RCC_ClockConfig+0x19c>)
 8004dda:	683a      	ldr	r2, [r7, #0]
 8004ddc:	430a      	orrs	r2, r1
 8004dde:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004de0:	4b16      	ldr	r3, [pc, #88]	; (8004e3c <HAL_RCC_ClockConfig+0x19c>)
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	2201      	movs	r2, #1
 8004de6:	4013      	ands	r3, r2
 8004de8:	683a      	ldr	r2, [r7, #0]
 8004dea:	429a      	cmp	r2, r3
 8004dec:	d001      	beq.n	8004df2 <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 8004dee:	2301      	movs	r3, #1
 8004df0:	e020      	b.n	8004e34 <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	2204      	movs	r2, #4
 8004df8:	4013      	ands	r3, r2
 8004dfa:	d009      	beq.n	8004e10 <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8004dfc:	4b10      	ldr	r3, [pc, #64]	; (8004e40 <HAL_RCC_ClockConfig+0x1a0>)
 8004dfe:	685b      	ldr	r3, [r3, #4]
 8004e00:	4a11      	ldr	r2, [pc, #68]	; (8004e48 <HAL_RCC_ClockConfig+0x1a8>)
 8004e02:	4013      	ands	r3, r2
 8004e04:	0019      	movs	r1, r3
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	68da      	ldr	r2, [r3, #12]
 8004e0a:	4b0d      	ldr	r3, [pc, #52]	; (8004e40 <HAL_RCC_ClockConfig+0x1a0>)
 8004e0c:	430a      	orrs	r2, r1
 8004e0e:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8004e10:	f000 f820 	bl	8004e54 <HAL_RCC_GetSysClockFreq>
 8004e14:	0001      	movs	r1, r0
 8004e16:	4b0a      	ldr	r3, [pc, #40]	; (8004e40 <HAL_RCC_ClockConfig+0x1a0>)
 8004e18:	685b      	ldr	r3, [r3, #4]
 8004e1a:	091b      	lsrs	r3, r3, #4
 8004e1c:	220f      	movs	r2, #15
 8004e1e:	4013      	ands	r3, r2
 8004e20:	4a0a      	ldr	r2, [pc, #40]	; (8004e4c <HAL_RCC_ClockConfig+0x1ac>)
 8004e22:	5cd3      	ldrb	r3, [r2, r3]
 8004e24:	000a      	movs	r2, r1
 8004e26:	40da      	lsrs	r2, r3
 8004e28:	4b09      	ldr	r3, [pc, #36]	; (8004e50 <HAL_RCC_ClockConfig+0x1b0>)
 8004e2a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8004e2c:	2003      	movs	r0, #3
 8004e2e:	f7fc fe55 	bl	8001adc <HAL_InitTick>
  
  return HAL_OK;
 8004e32:	2300      	movs	r3, #0
}
 8004e34:	0018      	movs	r0, r3
 8004e36:	46bd      	mov	sp, r7
 8004e38:	b004      	add	sp, #16
 8004e3a:	bd80      	pop	{r7, pc}
 8004e3c:	40022000 	.word	0x40022000
 8004e40:	40021000 	.word	0x40021000
 8004e44:	00001388 	.word	0x00001388
 8004e48:	fffff8ff 	.word	0xfffff8ff
 8004e4c:	0800bb08 	.word	0x0800bb08
 8004e50:	20000000 	.word	0x20000000

08004e54 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004e54:	b590      	push	{r4, r7, lr}
 8004e56:	b08f      	sub	sp, #60	; 0x3c
 8004e58:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8004e5a:	2314      	movs	r3, #20
 8004e5c:	18fb      	adds	r3, r7, r3
 8004e5e:	4a38      	ldr	r2, [pc, #224]	; (8004f40 <HAL_RCC_GetSysClockFreq+0xec>)
 8004e60:	ca13      	ldmia	r2!, {r0, r1, r4}
 8004e62:	c313      	stmia	r3!, {r0, r1, r4}
 8004e64:	6812      	ldr	r2, [r2, #0]
 8004e66:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8004e68:	1d3b      	adds	r3, r7, #4
 8004e6a:	4a36      	ldr	r2, [pc, #216]	; (8004f44 <HAL_RCC_GetSysClockFreq+0xf0>)
 8004e6c:	ca13      	ldmia	r2!, {r0, r1, r4}
 8004e6e:	c313      	stmia	r3!, {r0, r1, r4}
 8004e70:	6812      	ldr	r2, [r2, #0]
 8004e72:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004e74:	2300      	movs	r3, #0
 8004e76:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004e78:	2300      	movs	r3, #0
 8004e7a:	62bb      	str	r3, [r7, #40]	; 0x28
 8004e7c:	2300      	movs	r3, #0
 8004e7e:	637b      	str	r3, [r7, #52]	; 0x34
 8004e80:	2300      	movs	r3, #0
 8004e82:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8004e84:	2300      	movs	r3, #0
 8004e86:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8004e88:	4b2f      	ldr	r3, [pc, #188]	; (8004f48 <HAL_RCC_GetSysClockFreq+0xf4>)
 8004e8a:	685b      	ldr	r3, [r3, #4]
 8004e8c:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004e8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e90:	220c      	movs	r2, #12
 8004e92:	4013      	ands	r3, r2
 8004e94:	2b0c      	cmp	r3, #12
 8004e96:	d047      	beq.n	8004f28 <HAL_RCC_GetSysClockFreq+0xd4>
 8004e98:	d849      	bhi.n	8004f2e <HAL_RCC_GetSysClockFreq+0xda>
 8004e9a:	2b04      	cmp	r3, #4
 8004e9c:	d002      	beq.n	8004ea4 <HAL_RCC_GetSysClockFreq+0x50>
 8004e9e:	2b08      	cmp	r3, #8
 8004ea0:	d003      	beq.n	8004eaa <HAL_RCC_GetSysClockFreq+0x56>
 8004ea2:	e044      	b.n	8004f2e <HAL_RCC_GetSysClockFreq+0xda>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004ea4:	4b29      	ldr	r3, [pc, #164]	; (8004f4c <HAL_RCC_GetSysClockFreq+0xf8>)
 8004ea6:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8004ea8:	e044      	b.n	8004f34 <HAL_RCC_GetSysClockFreq+0xe0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8004eaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004eac:	0c9b      	lsrs	r3, r3, #18
 8004eae:	220f      	movs	r2, #15
 8004eb0:	4013      	ands	r3, r2
 8004eb2:	2214      	movs	r2, #20
 8004eb4:	18ba      	adds	r2, r7, r2
 8004eb6:	5cd3      	ldrb	r3, [r2, r3]
 8004eb8:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8004eba:	4b23      	ldr	r3, [pc, #140]	; (8004f48 <HAL_RCC_GetSysClockFreq+0xf4>)
 8004ebc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ebe:	220f      	movs	r2, #15
 8004ec0:	4013      	ands	r3, r2
 8004ec2:	1d3a      	adds	r2, r7, #4
 8004ec4:	5cd3      	ldrb	r3, [r2, r3]
 8004ec6:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004ec8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004eca:	23c0      	movs	r3, #192	; 0xc0
 8004ecc:	025b      	lsls	r3, r3, #9
 8004ece:	401a      	ands	r2, r3
 8004ed0:	2380      	movs	r3, #128	; 0x80
 8004ed2:	025b      	lsls	r3, r3, #9
 8004ed4:	429a      	cmp	r2, r3
 8004ed6:	d109      	bne.n	8004eec <HAL_RCC_GetSysClockFreq+0x98>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004ed8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004eda:	481c      	ldr	r0, [pc, #112]	; (8004f4c <HAL_RCC_GetSysClockFreq+0xf8>)
 8004edc:	f7fb f926 	bl	800012c <__udivsi3>
 8004ee0:	0003      	movs	r3, r0
 8004ee2:	001a      	movs	r2, r3
 8004ee4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ee6:	4353      	muls	r3, r2
 8004ee8:	637b      	str	r3, [r7, #52]	; 0x34
 8004eea:	e01a      	b.n	8004f22 <HAL_RCC_GetSysClockFreq+0xce>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8004eec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004eee:	23c0      	movs	r3, #192	; 0xc0
 8004ef0:	025b      	lsls	r3, r3, #9
 8004ef2:	401a      	ands	r2, r3
 8004ef4:	23c0      	movs	r3, #192	; 0xc0
 8004ef6:	025b      	lsls	r3, r3, #9
 8004ef8:	429a      	cmp	r2, r3
 8004efa:	d109      	bne.n	8004f10 <HAL_RCC_GetSysClockFreq+0xbc>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004efc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004efe:	4814      	ldr	r0, [pc, #80]	; (8004f50 <HAL_RCC_GetSysClockFreq+0xfc>)
 8004f00:	f7fb f914 	bl	800012c <__udivsi3>
 8004f04:	0003      	movs	r3, r0
 8004f06:	001a      	movs	r2, r3
 8004f08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f0a:	4353      	muls	r3, r2
 8004f0c:	637b      	str	r3, [r7, #52]	; 0x34
 8004f0e:	e008      	b.n	8004f22 <HAL_RCC_GetSysClockFreq+0xce>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004f10:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004f12:	4810      	ldr	r0, [pc, #64]	; (8004f54 <HAL_RCC_GetSysClockFreq+0x100>)
 8004f14:	f7fb f90a 	bl	800012c <__udivsi3>
 8004f18:	0003      	movs	r3, r0
 8004f1a:	001a      	movs	r2, r3
 8004f1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f1e:	4353      	muls	r3, r2
 8004f20:	637b      	str	r3, [r7, #52]	; 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 8004f22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f24:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8004f26:	e005      	b.n	8004f34 <HAL_RCC_GetSysClockFreq+0xe0>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 8004f28:	4b09      	ldr	r3, [pc, #36]	; (8004f50 <HAL_RCC_GetSysClockFreq+0xfc>)
 8004f2a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8004f2c:	e002      	b.n	8004f34 <HAL_RCC_GetSysClockFreq+0xe0>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004f2e:	4b09      	ldr	r3, [pc, #36]	; (8004f54 <HAL_RCC_GetSysClockFreq+0x100>)
 8004f30:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8004f32:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8004f34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8004f36:	0018      	movs	r0, r3
 8004f38:	46bd      	mov	sp, r7
 8004f3a:	b00f      	add	sp, #60	; 0x3c
 8004f3c:	bd90      	pop	{r4, r7, pc}
 8004f3e:	46c0      	nop			; (mov r8, r8)
 8004f40:	0800ba88 	.word	0x0800ba88
 8004f44:	0800ba98 	.word	0x0800ba98
 8004f48:	40021000 	.word	0x40021000
 8004f4c:	00f42400 	.word	0x00f42400
 8004f50:	02dc6c00 	.word	0x02dc6c00
 8004f54:	007a1200 	.word	0x007a1200

08004f58 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004f58:	b580      	push	{r7, lr}
 8004f5a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004f5c:	4b02      	ldr	r3, [pc, #8]	; (8004f68 <HAL_RCC_GetHCLKFreq+0x10>)
 8004f5e:	681b      	ldr	r3, [r3, #0]
}
 8004f60:	0018      	movs	r0, r3
 8004f62:	46bd      	mov	sp, r7
 8004f64:	bd80      	pop	{r7, pc}
 8004f66:	46c0      	nop			; (mov r8, r8)
 8004f68:	20000000 	.word	0x20000000

08004f6c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004f6c:	b580      	push	{r7, lr}
 8004f6e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8004f70:	f7ff fff2 	bl	8004f58 <HAL_RCC_GetHCLKFreq>
 8004f74:	0001      	movs	r1, r0
 8004f76:	4b06      	ldr	r3, [pc, #24]	; (8004f90 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004f78:	685b      	ldr	r3, [r3, #4]
 8004f7a:	0a1b      	lsrs	r3, r3, #8
 8004f7c:	2207      	movs	r2, #7
 8004f7e:	4013      	ands	r3, r2
 8004f80:	4a04      	ldr	r2, [pc, #16]	; (8004f94 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004f82:	5cd3      	ldrb	r3, [r2, r3]
 8004f84:	40d9      	lsrs	r1, r3
 8004f86:	000b      	movs	r3, r1
}    
 8004f88:	0018      	movs	r0, r3
 8004f8a:	46bd      	mov	sp, r7
 8004f8c:	bd80      	pop	{r7, pc}
 8004f8e:	46c0      	nop			; (mov r8, r8)
 8004f90:	40021000 	.word	0x40021000
 8004f94:	0800bb18 	.word	0x0800bb18

08004f98 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004f98:	b580      	push	{r7, lr}
 8004f9a:	b086      	sub	sp, #24
 8004f9c:	af00      	add	r7, sp, #0
 8004f9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004fa0:	2300      	movs	r3, #0
 8004fa2:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8004fa4:	2300      	movs	r3, #0
 8004fa6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681a      	ldr	r2, [r3, #0]
 8004fac:	2380      	movs	r3, #128	; 0x80
 8004fae:	025b      	lsls	r3, r3, #9
 8004fb0:	4013      	ands	r3, r2
 8004fb2:	d100      	bne.n	8004fb6 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8004fb4:	e08e      	b.n	80050d4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8004fb6:	2017      	movs	r0, #23
 8004fb8:	183b      	adds	r3, r7, r0
 8004fba:	2200      	movs	r2, #0
 8004fbc:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004fbe:	4b6e      	ldr	r3, [pc, #440]	; (8005178 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004fc0:	69da      	ldr	r2, [r3, #28]
 8004fc2:	2380      	movs	r3, #128	; 0x80
 8004fc4:	055b      	lsls	r3, r3, #21
 8004fc6:	4013      	ands	r3, r2
 8004fc8:	d110      	bne.n	8004fec <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004fca:	4b6b      	ldr	r3, [pc, #428]	; (8005178 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004fcc:	69da      	ldr	r2, [r3, #28]
 8004fce:	4b6a      	ldr	r3, [pc, #424]	; (8005178 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004fd0:	2180      	movs	r1, #128	; 0x80
 8004fd2:	0549      	lsls	r1, r1, #21
 8004fd4:	430a      	orrs	r2, r1
 8004fd6:	61da      	str	r2, [r3, #28]
 8004fd8:	4b67      	ldr	r3, [pc, #412]	; (8005178 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004fda:	69da      	ldr	r2, [r3, #28]
 8004fdc:	2380      	movs	r3, #128	; 0x80
 8004fde:	055b      	lsls	r3, r3, #21
 8004fe0:	4013      	ands	r3, r2
 8004fe2:	60bb      	str	r3, [r7, #8]
 8004fe4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004fe6:	183b      	adds	r3, r7, r0
 8004fe8:	2201      	movs	r2, #1
 8004fea:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004fec:	4b63      	ldr	r3, [pc, #396]	; (800517c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8004fee:	681a      	ldr	r2, [r3, #0]
 8004ff0:	2380      	movs	r3, #128	; 0x80
 8004ff2:	005b      	lsls	r3, r3, #1
 8004ff4:	4013      	ands	r3, r2
 8004ff6:	d11a      	bne.n	800502e <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004ff8:	4b60      	ldr	r3, [pc, #384]	; (800517c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8004ffa:	681a      	ldr	r2, [r3, #0]
 8004ffc:	4b5f      	ldr	r3, [pc, #380]	; (800517c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8004ffe:	2180      	movs	r1, #128	; 0x80
 8005000:	0049      	lsls	r1, r1, #1
 8005002:	430a      	orrs	r2, r1
 8005004:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005006:	f7fc fdaf 	bl	8001b68 <HAL_GetTick>
 800500a:	0003      	movs	r3, r0
 800500c:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800500e:	e008      	b.n	8005022 <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005010:	f7fc fdaa 	bl	8001b68 <HAL_GetTick>
 8005014:	0002      	movs	r2, r0
 8005016:	693b      	ldr	r3, [r7, #16]
 8005018:	1ad3      	subs	r3, r2, r3
 800501a:	2b64      	cmp	r3, #100	; 0x64
 800501c:	d901      	bls.n	8005022 <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 800501e:	2303      	movs	r3, #3
 8005020:	e0a6      	b.n	8005170 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005022:	4b56      	ldr	r3, [pc, #344]	; (800517c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8005024:	681a      	ldr	r2, [r3, #0]
 8005026:	2380      	movs	r3, #128	; 0x80
 8005028:	005b      	lsls	r3, r3, #1
 800502a:	4013      	ands	r3, r2
 800502c:	d0f0      	beq.n	8005010 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800502e:	4b52      	ldr	r3, [pc, #328]	; (8005178 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005030:	6a1a      	ldr	r2, [r3, #32]
 8005032:	23c0      	movs	r3, #192	; 0xc0
 8005034:	009b      	lsls	r3, r3, #2
 8005036:	4013      	ands	r3, r2
 8005038:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	2b00      	cmp	r3, #0
 800503e:	d034      	beq.n	80050aa <HAL_RCCEx_PeriphCLKConfig+0x112>
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	685a      	ldr	r2, [r3, #4]
 8005044:	23c0      	movs	r3, #192	; 0xc0
 8005046:	009b      	lsls	r3, r3, #2
 8005048:	4013      	ands	r3, r2
 800504a:	68fa      	ldr	r2, [r7, #12]
 800504c:	429a      	cmp	r2, r3
 800504e:	d02c      	beq.n	80050aa <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005050:	4b49      	ldr	r3, [pc, #292]	; (8005178 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005052:	6a1b      	ldr	r3, [r3, #32]
 8005054:	4a4a      	ldr	r2, [pc, #296]	; (8005180 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8005056:	4013      	ands	r3, r2
 8005058:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800505a:	4b47      	ldr	r3, [pc, #284]	; (8005178 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800505c:	6a1a      	ldr	r2, [r3, #32]
 800505e:	4b46      	ldr	r3, [pc, #280]	; (8005178 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005060:	2180      	movs	r1, #128	; 0x80
 8005062:	0249      	lsls	r1, r1, #9
 8005064:	430a      	orrs	r2, r1
 8005066:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005068:	4b43      	ldr	r3, [pc, #268]	; (8005178 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800506a:	6a1a      	ldr	r2, [r3, #32]
 800506c:	4b42      	ldr	r3, [pc, #264]	; (8005178 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800506e:	4945      	ldr	r1, [pc, #276]	; (8005184 <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 8005070:	400a      	ands	r2, r1
 8005072:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8005074:	4b40      	ldr	r3, [pc, #256]	; (8005178 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005076:	68fa      	ldr	r2, [r7, #12]
 8005078:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	2201      	movs	r2, #1
 800507e:	4013      	ands	r3, r2
 8005080:	d013      	beq.n	80050aa <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005082:	f7fc fd71 	bl	8001b68 <HAL_GetTick>
 8005086:	0003      	movs	r3, r0
 8005088:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800508a:	e009      	b.n	80050a0 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800508c:	f7fc fd6c 	bl	8001b68 <HAL_GetTick>
 8005090:	0002      	movs	r2, r0
 8005092:	693b      	ldr	r3, [r7, #16]
 8005094:	1ad3      	subs	r3, r2, r3
 8005096:	4a3c      	ldr	r2, [pc, #240]	; (8005188 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 8005098:	4293      	cmp	r3, r2
 800509a:	d901      	bls.n	80050a0 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 800509c:	2303      	movs	r3, #3
 800509e:	e067      	b.n	8005170 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80050a0:	4b35      	ldr	r3, [pc, #212]	; (8005178 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80050a2:	6a1b      	ldr	r3, [r3, #32]
 80050a4:	2202      	movs	r2, #2
 80050a6:	4013      	ands	r3, r2
 80050a8:	d0f0      	beq.n	800508c <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80050aa:	4b33      	ldr	r3, [pc, #204]	; (8005178 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80050ac:	6a1b      	ldr	r3, [r3, #32]
 80050ae:	4a34      	ldr	r2, [pc, #208]	; (8005180 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 80050b0:	4013      	ands	r3, r2
 80050b2:	0019      	movs	r1, r3
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	685a      	ldr	r2, [r3, #4]
 80050b8:	4b2f      	ldr	r3, [pc, #188]	; (8005178 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80050ba:	430a      	orrs	r2, r1
 80050bc:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80050be:	2317      	movs	r3, #23
 80050c0:	18fb      	adds	r3, r7, r3
 80050c2:	781b      	ldrb	r3, [r3, #0]
 80050c4:	2b01      	cmp	r3, #1
 80050c6:	d105      	bne.n	80050d4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80050c8:	4b2b      	ldr	r3, [pc, #172]	; (8005178 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80050ca:	69da      	ldr	r2, [r3, #28]
 80050cc:	4b2a      	ldr	r3, [pc, #168]	; (8005178 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80050ce:	492f      	ldr	r1, [pc, #188]	; (800518c <HAL_RCCEx_PeriphCLKConfig+0x1f4>)
 80050d0:	400a      	ands	r2, r1
 80050d2:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	2201      	movs	r2, #1
 80050da:	4013      	ands	r3, r2
 80050dc:	d009      	beq.n	80050f2 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80050de:	4b26      	ldr	r3, [pc, #152]	; (8005178 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80050e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050e2:	2203      	movs	r2, #3
 80050e4:	4393      	bics	r3, r2
 80050e6:	0019      	movs	r1, r3
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	689a      	ldr	r2, [r3, #8]
 80050ec:	4b22      	ldr	r3, [pc, #136]	; (8005178 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80050ee:	430a      	orrs	r2, r1
 80050f0:	631a      	str	r2, [r3, #48]	; 0x30
  }
  
#if defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	2202      	movs	r2, #2
 80050f8:	4013      	ands	r3, r2
 80050fa:	d009      	beq.n	8005110 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80050fc:	4b1e      	ldr	r3, [pc, #120]	; (8005178 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80050fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005100:	4a23      	ldr	r2, [pc, #140]	; (8005190 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005102:	4013      	ands	r3, r2
 8005104:	0019      	movs	r1, r3
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	68da      	ldr	r2, [r3, #12]
 800510a:	4b1b      	ldr	r3, [pc, #108]	; (8005178 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800510c:	430a      	orrs	r2, r1
 800510e:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	2220      	movs	r2, #32
 8005116:	4013      	ands	r3, r2
 8005118:	d009      	beq.n	800512e <HAL_RCCEx_PeriphCLKConfig+0x196>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800511a:	4b17      	ldr	r3, [pc, #92]	; (8005178 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800511c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800511e:	2210      	movs	r2, #16
 8005120:	4393      	bics	r3, r2
 8005122:	0019      	movs	r1, r3
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	691a      	ldr	r2, [r3, #16]
 8005128:	4b13      	ldr	r3, [pc, #76]	; (8005178 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800512a:	430a      	orrs	r2, r1
 800512c:	631a      	str	r2, [r3, #48]	; 0x30
  }

#if defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F070x6)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681a      	ldr	r2, [r3, #0]
 8005132:	2380      	movs	r3, #128	; 0x80
 8005134:	029b      	lsls	r3, r3, #10
 8005136:	4013      	ands	r3, r2
 8005138:	d009      	beq.n	800514e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800513a:	4b0f      	ldr	r3, [pc, #60]	; (8005178 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800513c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800513e:	2280      	movs	r2, #128	; 0x80
 8005140:	4393      	bics	r3, r2
 8005142:	0019      	movs	r1, r3
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	699a      	ldr	r2, [r3, #24]
 8005148:	4b0b      	ldr	r3, [pc, #44]	; (8005178 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800514a:	430a      	orrs	r2, r1
 800514c:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681a      	ldr	r2, [r3, #0]
 8005152:	2380      	movs	r3, #128	; 0x80
 8005154:	00db      	lsls	r3, r3, #3
 8005156:	4013      	ands	r3, r2
 8005158:	d009      	beq.n	800516e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800515a:	4b07      	ldr	r3, [pc, #28]	; (8005178 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800515c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800515e:	2240      	movs	r2, #64	; 0x40
 8005160:	4393      	bics	r3, r2
 8005162:	0019      	movs	r1, r3
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	695a      	ldr	r2, [r3, #20]
 8005168:	4b03      	ldr	r3, [pc, #12]	; (8005178 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800516a:	430a      	orrs	r2, r1
 800516c:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 800516e:	2300      	movs	r3, #0
}
 8005170:	0018      	movs	r0, r3
 8005172:	46bd      	mov	sp, r7
 8005174:	b006      	add	sp, #24
 8005176:	bd80      	pop	{r7, pc}
 8005178:	40021000 	.word	0x40021000
 800517c:	40007000 	.word	0x40007000
 8005180:	fffffcff 	.word	0xfffffcff
 8005184:	fffeffff 	.word	0xfffeffff
 8005188:	00001388 	.word	0x00001388
 800518c:	efffffff 	.word	0xefffffff
 8005190:	fffcffff 	.word	0xfffcffff

08005194 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005194:	b580      	push	{r7, lr}
 8005196:	b084      	sub	sp, #16
 8005198:	af00      	add	r7, sp, #0
 800519a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d101      	bne.n	80051a6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80051a2:	2301      	movs	r3, #1
 80051a4:	e0a8      	b.n	80052f8 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d109      	bne.n	80051c2 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	685a      	ldr	r2, [r3, #4]
 80051b2:	2382      	movs	r3, #130	; 0x82
 80051b4:	005b      	lsls	r3, r3, #1
 80051b6:	429a      	cmp	r2, r3
 80051b8:	d009      	beq.n	80051ce <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	2200      	movs	r2, #0
 80051be:	61da      	str	r2, [r3, #28]
 80051c0:	e005      	b.n	80051ce <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	2200      	movs	r2, #0
 80051c6:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	2200      	movs	r2, #0
 80051cc:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	2200      	movs	r2, #0
 80051d2:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	225d      	movs	r2, #93	; 0x5d
 80051d8:	5c9b      	ldrb	r3, [r3, r2]
 80051da:	b2db      	uxtb	r3, r3
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d107      	bne.n	80051f0 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	225c      	movs	r2, #92	; 0x5c
 80051e4:	2100      	movs	r1, #0
 80051e6:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	0018      	movs	r0, r3
 80051ec:	f7fc fada 	bl	80017a4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	225d      	movs	r2, #93	; 0x5d
 80051f4:	2102      	movs	r1, #2
 80051f6:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	681a      	ldr	r2, [r3, #0]
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	2140      	movs	r1, #64	; 0x40
 8005204:	438a      	bics	r2, r1
 8005206:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	68da      	ldr	r2, [r3, #12]
 800520c:	23e0      	movs	r3, #224	; 0xe0
 800520e:	00db      	lsls	r3, r3, #3
 8005210:	429a      	cmp	r2, r3
 8005212:	d902      	bls.n	800521a <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005214:	2300      	movs	r3, #0
 8005216:	60fb      	str	r3, [r7, #12]
 8005218:	e002      	b.n	8005220 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800521a:	2380      	movs	r3, #128	; 0x80
 800521c:	015b      	lsls	r3, r3, #5
 800521e:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	68da      	ldr	r2, [r3, #12]
 8005224:	23f0      	movs	r3, #240	; 0xf0
 8005226:	011b      	lsls	r3, r3, #4
 8005228:	429a      	cmp	r2, r3
 800522a:	d008      	beq.n	800523e <HAL_SPI_Init+0xaa>
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	68da      	ldr	r2, [r3, #12]
 8005230:	23e0      	movs	r3, #224	; 0xe0
 8005232:	00db      	lsls	r3, r3, #3
 8005234:	429a      	cmp	r2, r3
 8005236:	d002      	beq.n	800523e <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	2200      	movs	r2, #0
 800523c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	685a      	ldr	r2, [r3, #4]
 8005242:	2382      	movs	r3, #130	; 0x82
 8005244:	005b      	lsls	r3, r3, #1
 8005246:	401a      	ands	r2, r3
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	6899      	ldr	r1, [r3, #8]
 800524c:	2384      	movs	r3, #132	; 0x84
 800524e:	021b      	lsls	r3, r3, #8
 8005250:	400b      	ands	r3, r1
 8005252:	431a      	orrs	r2, r3
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	691b      	ldr	r3, [r3, #16]
 8005258:	2102      	movs	r1, #2
 800525a:	400b      	ands	r3, r1
 800525c:	431a      	orrs	r2, r3
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	695b      	ldr	r3, [r3, #20]
 8005262:	2101      	movs	r1, #1
 8005264:	400b      	ands	r3, r1
 8005266:	431a      	orrs	r2, r3
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	6999      	ldr	r1, [r3, #24]
 800526c:	2380      	movs	r3, #128	; 0x80
 800526e:	009b      	lsls	r3, r3, #2
 8005270:	400b      	ands	r3, r1
 8005272:	431a      	orrs	r2, r3
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	69db      	ldr	r3, [r3, #28]
 8005278:	2138      	movs	r1, #56	; 0x38
 800527a:	400b      	ands	r3, r1
 800527c:	431a      	orrs	r2, r3
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	6a1b      	ldr	r3, [r3, #32]
 8005282:	2180      	movs	r1, #128	; 0x80
 8005284:	400b      	ands	r3, r1
 8005286:	431a      	orrs	r2, r3
 8005288:	0011      	movs	r1, r2
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800528e:	2380      	movs	r3, #128	; 0x80
 8005290:	019b      	lsls	r3, r3, #6
 8005292:	401a      	ands	r2, r3
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	430a      	orrs	r2, r1
 800529a:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	699b      	ldr	r3, [r3, #24]
 80052a0:	0c1b      	lsrs	r3, r3, #16
 80052a2:	2204      	movs	r2, #4
 80052a4:	401a      	ands	r2, r3
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052aa:	2110      	movs	r1, #16
 80052ac:	400b      	ands	r3, r1
 80052ae:	431a      	orrs	r2, r3
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80052b4:	2108      	movs	r1, #8
 80052b6:	400b      	ands	r3, r1
 80052b8:	431a      	orrs	r2, r3
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	68d9      	ldr	r1, [r3, #12]
 80052be:	23f0      	movs	r3, #240	; 0xf0
 80052c0:	011b      	lsls	r3, r3, #4
 80052c2:	400b      	ands	r3, r1
 80052c4:	431a      	orrs	r2, r3
 80052c6:	0011      	movs	r1, r2
 80052c8:	68fa      	ldr	r2, [r7, #12]
 80052ca:	2380      	movs	r3, #128	; 0x80
 80052cc:	015b      	lsls	r3, r3, #5
 80052ce:	401a      	ands	r2, r3
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	430a      	orrs	r2, r1
 80052d6:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	69da      	ldr	r2, [r3, #28]
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	4907      	ldr	r1, [pc, #28]	; (8005300 <HAL_SPI_Init+0x16c>)
 80052e4:	400a      	ands	r2, r1
 80052e6:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	2200      	movs	r2, #0
 80052ec:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	225d      	movs	r2, #93	; 0x5d
 80052f2:	2101      	movs	r1, #1
 80052f4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80052f6:	2300      	movs	r3, #0
}
 80052f8:	0018      	movs	r0, r3
 80052fa:	46bd      	mov	sp, r7
 80052fc:	b004      	add	sp, #16
 80052fe:	bd80      	pop	{r7, pc}
 8005300:	fffff7ff 	.word	0xfffff7ff

08005304 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005304:	b580      	push	{r7, lr}
 8005306:	b082      	sub	sp, #8
 8005308:	af00      	add	r7, sp, #0
 800530a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	2b00      	cmp	r3, #0
 8005310:	d101      	bne.n	8005316 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005312:	2301      	movs	r3, #1
 8005314:	e042      	b.n	800539c <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	223d      	movs	r2, #61	; 0x3d
 800531a:	5c9b      	ldrb	r3, [r3, r2]
 800531c:	b2db      	uxtb	r3, r3
 800531e:	2b00      	cmp	r3, #0
 8005320:	d107      	bne.n	8005332 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	223c      	movs	r2, #60	; 0x3c
 8005326:	2100      	movs	r1, #0
 8005328:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	0018      	movs	r0, r3
 800532e:	f7fc fa87 	bl	8001840 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	223d      	movs	r2, #61	; 0x3d
 8005336:	2102      	movs	r1, #2
 8005338:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681a      	ldr	r2, [r3, #0]
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	3304      	adds	r3, #4
 8005342:	0019      	movs	r1, r3
 8005344:	0010      	movs	r0, r2
 8005346:	f000 fa65 	bl	8005814 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	2246      	movs	r2, #70	; 0x46
 800534e:	2101      	movs	r1, #1
 8005350:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	223e      	movs	r2, #62	; 0x3e
 8005356:	2101      	movs	r1, #1
 8005358:	5499      	strb	r1, [r3, r2]
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	223f      	movs	r2, #63	; 0x3f
 800535e:	2101      	movs	r1, #1
 8005360:	5499      	strb	r1, [r3, r2]
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	2240      	movs	r2, #64	; 0x40
 8005366:	2101      	movs	r1, #1
 8005368:	5499      	strb	r1, [r3, r2]
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	2241      	movs	r2, #65	; 0x41
 800536e:	2101      	movs	r1, #1
 8005370:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	2242      	movs	r2, #66	; 0x42
 8005376:	2101      	movs	r1, #1
 8005378:	5499      	strb	r1, [r3, r2]
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	2243      	movs	r2, #67	; 0x43
 800537e:	2101      	movs	r1, #1
 8005380:	5499      	strb	r1, [r3, r2]
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	2244      	movs	r2, #68	; 0x44
 8005386:	2101      	movs	r1, #1
 8005388:	5499      	strb	r1, [r3, r2]
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	2245      	movs	r2, #69	; 0x45
 800538e:	2101      	movs	r1, #1
 8005390:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	223d      	movs	r2, #61	; 0x3d
 8005396:	2101      	movs	r1, #1
 8005398:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800539a:	2300      	movs	r3, #0
}
 800539c:	0018      	movs	r0, r3
 800539e:	46bd      	mov	sp, r7
 80053a0:	b002      	add	sp, #8
 80053a2:	bd80      	pop	{r7, pc}

080053a4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80053a4:	b580      	push	{r7, lr}
 80053a6:	b084      	sub	sp, #16
 80053a8:	af00      	add	r7, sp, #0
 80053aa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	223d      	movs	r2, #61	; 0x3d
 80053b0:	5c9b      	ldrb	r3, [r3, r2]
 80053b2:	b2db      	uxtb	r3, r3
 80053b4:	2b01      	cmp	r3, #1
 80053b6:	d001      	beq.n	80053bc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80053b8:	2301      	movs	r3, #1
 80053ba:	e03b      	b.n	8005434 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	223d      	movs	r2, #61	; 0x3d
 80053c0:	2102      	movs	r1, #2
 80053c2:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	68da      	ldr	r2, [r3, #12]
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	2101      	movs	r1, #1
 80053d0:	430a      	orrs	r2, r1
 80053d2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	4a18      	ldr	r2, [pc, #96]	; (800543c <HAL_TIM_Base_Start_IT+0x98>)
 80053da:	4293      	cmp	r3, r2
 80053dc:	d00f      	beq.n	80053fe <HAL_TIM_Base_Start_IT+0x5a>
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681a      	ldr	r2, [r3, #0]
 80053e2:	2380      	movs	r3, #128	; 0x80
 80053e4:	05db      	lsls	r3, r3, #23
 80053e6:	429a      	cmp	r2, r3
 80053e8:	d009      	beq.n	80053fe <HAL_TIM_Base_Start_IT+0x5a>
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	4a14      	ldr	r2, [pc, #80]	; (8005440 <HAL_TIM_Base_Start_IT+0x9c>)
 80053f0:	4293      	cmp	r3, r2
 80053f2:	d004      	beq.n	80053fe <HAL_TIM_Base_Start_IT+0x5a>
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	4a12      	ldr	r2, [pc, #72]	; (8005444 <HAL_TIM_Base_Start_IT+0xa0>)
 80053fa:	4293      	cmp	r3, r2
 80053fc:	d111      	bne.n	8005422 <HAL_TIM_Base_Start_IT+0x7e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	689b      	ldr	r3, [r3, #8]
 8005404:	2207      	movs	r2, #7
 8005406:	4013      	ands	r3, r2
 8005408:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	2b06      	cmp	r3, #6
 800540e:	d010      	beq.n	8005432 <HAL_TIM_Base_Start_IT+0x8e>
    {
      __HAL_TIM_ENABLE(htim);
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	681a      	ldr	r2, [r3, #0]
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	2101      	movs	r1, #1
 800541c:	430a      	orrs	r2, r1
 800541e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005420:	e007      	b.n	8005432 <HAL_TIM_Base_Start_IT+0x8e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	681a      	ldr	r2, [r3, #0]
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	2101      	movs	r1, #1
 800542e:	430a      	orrs	r2, r1
 8005430:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005432:	2300      	movs	r3, #0
}
 8005434:	0018      	movs	r0, r3
 8005436:	46bd      	mov	sp, r7
 8005438:	b004      	add	sp, #16
 800543a:	bd80      	pop	{r7, pc}
 800543c:	40012c00 	.word	0x40012c00
 8005440:	40000400 	.word	0x40000400
 8005444:	40014000 	.word	0x40014000

08005448 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8005448:	b580      	push	{r7, lr}
 800544a:	b082      	sub	sp, #8
 800544c:	af00      	add	r7, sp, #0
 800544e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	2b00      	cmp	r3, #0
 8005454:	d101      	bne.n	800545a <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8005456:	2301      	movs	r3, #1
 8005458:	e042      	b.n	80054e0 <HAL_TIM_OC_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	223d      	movs	r2, #61	; 0x3d
 800545e:	5c9b      	ldrb	r3, [r3, r2]
 8005460:	b2db      	uxtb	r3, r3
 8005462:	2b00      	cmp	r3, #0
 8005464:	d107      	bne.n	8005476 <HAL_TIM_OC_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	223c      	movs	r2, #60	; 0x3c
 800546a:	2100      	movs	r1, #0
 800546c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	0018      	movs	r0, r3
 8005472:	f000 f839 	bl	80054e8 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	223d      	movs	r2, #61	; 0x3d
 800547a:	2102      	movs	r1, #2
 800547c:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681a      	ldr	r2, [r3, #0]
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	3304      	adds	r3, #4
 8005486:	0019      	movs	r1, r3
 8005488:	0010      	movs	r0, r2
 800548a:	f000 f9c3 	bl	8005814 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	2246      	movs	r2, #70	; 0x46
 8005492:	2101      	movs	r1, #1
 8005494:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	223e      	movs	r2, #62	; 0x3e
 800549a:	2101      	movs	r1, #1
 800549c:	5499      	strb	r1, [r3, r2]
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	223f      	movs	r2, #63	; 0x3f
 80054a2:	2101      	movs	r1, #1
 80054a4:	5499      	strb	r1, [r3, r2]
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	2240      	movs	r2, #64	; 0x40
 80054aa:	2101      	movs	r1, #1
 80054ac:	5499      	strb	r1, [r3, r2]
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	2241      	movs	r2, #65	; 0x41
 80054b2:	2101      	movs	r1, #1
 80054b4:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	2242      	movs	r2, #66	; 0x42
 80054ba:	2101      	movs	r1, #1
 80054bc:	5499      	strb	r1, [r3, r2]
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	2243      	movs	r2, #67	; 0x43
 80054c2:	2101      	movs	r1, #1
 80054c4:	5499      	strb	r1, [r3, r2]
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	2244      	movs	r2, #68	; 0x44
 80054ca:	2101      	movs	r1, #1
 80054cc:	5499      	strb	r1, [r3, r2]
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	2245      	movs	r2, #69	; 0x45
 80054d2:	2101      	movs	r1, #1
 80054d4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	223d      	movs	r2, #61	; 0x3d
 80054da:	2101      	movs	r1, #1
 80054dc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80054de:	2300      	movs	r3, #0
}
 80054e0:	0018      	movs	r0, r3
 80054e2:	46bd      	mov	sp, r7
 80054e4:	b002      	add	sp, #8
 80054e6:	bd80      	pop	{r7, pc}

080054e8 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 80054e8:	b580      	push	{r7, lr}
 80054ea:	b082      	sub	sp, #8
 80054ec:	af00      	add	r7, sp, #0
 80054ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 80054f0:	46c0      	nop			; (mov r8, r8)
 80054f2:	46bd      	mov	sp, r7
 80054f4:	b002      	add	sp, #8
 80054f6:	bd80      	pop	{r7, pc}

080054f8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80054f8:	b580      	push	{r7, lr}
 80054fa:	b082      	sub	sp, #8
 80054fc:	af00      	add	r7, sp, #0
 80054fe:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	691b      	ldr	r3, [r3, #16]
 8005506:	2202      	movs	r2, #2
 8005508:	4013      	ands	r3, r2
 800550a:	2b02      	cmp	r3, #2
 800550c:	d124      	bne.n	8005558 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	68db      	ldr	r3, [r3, #12]
 8005514:	2202      	movs	r2, #2
 8005516:	4013      	ands	r3, r2
 8005518:	2b02      	cmp	r3, #2
 800551a:	d11d      	bne.n	8005558 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	2203      	movs	r2, #3
 8005522:	4252      	negs	r2, r2
 8005524:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	2201      	movs	r2, #1
 800552a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	699b      	ldr	r3, [r3, #24]
 8005532:	2203      	movs	r2, #3
 8005534:	4013      	ands	r3, r2
 8005536:	d004      	beq.n	8005542 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	0018      	movs	r0, r3
 800553c:	f000 f952 	bl	80057e4 <HAL_TIM_IC_CaptureCallback>
 8005540:	e007      	b.n	8005552 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	0018      	movs	r0, r3
 8005546:	f000 f945 	bl	80057d4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	0018      	movs	r0, r3
 800554e:	f000 f951 	bl	80057f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	2200      	movs	r2, #0
 8005556:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	691b      	ldr	r3, [r3, #16]
 800555e:	2204      	movs	r2, #4
 8005560:	4013      	ands	r3, r2
 8005562:	2b04      	cmp	r3, #4
 8005564:	d125      	bne.n	80055b2 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	68db      	ldr	r3, [r3, #12]
 800556c:	2204      	movs	r2, #4
 800556e:	4013      	ands	r3, r2
 8005570:	2b04      	cmp	r3, #4
 8005572:	d11e      	bne.n	80055b2 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	2205      	movs	r2, #5
 800557a:	4252      	negs	r2, r2
 800557c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	2202      	movs	r2, #2
 8005582:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	699a      	ldr	r2, [r3, #24]
 800558a:	23c0      	movs	r3, #192	; 0xc0
 800558c:	009b      	lsls	r3, r3, #2
 800558e:	4013      	ands	r3, r2
 8005590:	d004      	beq.n	800559c <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	0018      	movs	r0, r3
 8005596:	f000 f925 	bl	80057e4 <HAL_TIM_IC_CaptureCallback>
 800559a:	e007      	b.n	80055ac <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	0018      	movs	r0, r3
 80055a0:	f000 f918 	bl	80057d4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	0018      	movs	r0, r3
 80055a8:	f000 f924 	bl	80057f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	2200      	movs	r2, #0
 80055b0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	691b      	ldr	r3, [r3, #16]
 80055b8:	2208      	movs	r2, #8
 80055ba:	4013      	ands	r3, r2
 80055bc:	2b08      	cmp	r3, #8
 80055be:	d124      	bne.n	800560a <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	68db      	ldr	r3, [r3, #12]
 80055c6:	2208      	movs	r2, #8
 80055c8:	4013      	ands	r3, r2
 80055ca:	2b08      	cmp	r3, #8
 80055cc:	d11d      	bne.n	800560a <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	2209      	movs	r2, #9
 80055d4:	4252      	negs	r2, r2
 80055d6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	2204      	movs	r2, #4
 80055dc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	69db      	ldr	r3, [r3, #28]
 80055e4:	2203      	movs	r2, #3
 80055e6:	4013      	ands	r3, r2
 80055e8:	d004      	beq.n	80055f4 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	0018      	movs	r0, r3
 80055ee:	f000 f8f9 	bl	80057e4 <HAL_TIM_IC_CaptureCallback>
 80055f2:	e007      	b.n	8005604 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	0018      	movs	r0, r3
 80055f8:	f000 f8ec 	bl	80057d4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	0018      	movs	r0, r3
 8005600:	f000 f8f8 	bl	80057f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	2200      	movs	r2, #0
 8005608:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	691b      	ldr	r3, [r3, #16]
 8005610:	2210      	movs	r2, #16
 8005612:	4013      	ands	r3, r2
 8005614:	2b10      	cmp	r3, #16
 8005616:	d125      	bne.n	8005664 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	68db      	ldr	r3, [r3, #12]
 800561e:	2210      	movs	r2, #16
 8005620:	4013      	ands	r3, r2
 8005622:	2b10      	cmp	r3, #16
 8005624:	d11e      	bne.n	8005664 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	2211      	movs	r2, #17
 800562c:	4252      	negs	r2, r2
 800562e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	2208      	movs	r2, #8
 8005634:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	69da      	ldr	r2, [r3, #28]
 800563c:	23c0      	movs	r3, #192	; 0xc0
 800563e:	009b      	lsls	r3, r3, #2
 8005640:	4013      	ands	r3, r2
 8005642:	d004      	beq.n	800564e <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	0018      	movs	r0, r3
 8005648:	f000 f8cc 	bl	80057e4 <HAL_TIM_IC_CaptureCallback>
 800564c:	e007      	b.n	800565e <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	0018      	movs	r0, r3
 8005652:	f000 f8bf 	bl	80057d4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	0018      	movs	r0, r3
 800565a:	f000 f8cb 	bl	80057f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	2200      	movs	r2, #0
 8005662:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	691b      	ldr	r3, [r3, #16]
 800566a:	2201      	movs	r2, #1
 800566c:	4013      	ands	r3, r2
 800566e:	2b01      	cmp	r3, #1
 8005670:	d10f      	bne.n	8005692 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	68db      	ldr	r3, [r3, #12]
 8005678:	2201      	movs	r2, #1
 800567a:	4013      	ands	r3, r2
 800567c:	2b01      	cmp	r3, #1
 800567e:	d108      	bne.n	8005692 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	2202      	movs	r2, #2
 8005686:	4252      	negs	r2, r2
 8005688:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	0018      	movs	r0, r3
 800568e:	f7fa ff57 	bl	8000540 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	691b      	ldr	r3, [r3, #16]
 8005698:	2280      	movs	r2, #128	; 0x80
 800569a:	4013      	ands	r3, r2
 800569c:	2b80      	cmp	r3, #128	; 0x80
 800569e:	d10f      	bne.n	80056c0 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	68db      	ldr	r3, [r3, #12]
 80056a6:	2280      	movs	r2, #128	; 0x80
 80056a8:	4013      	ands	r3, r2
 80056aa:	2b80      	cmp	r3, #128	; 0x80
 80056ac:	d108      	bne.n	80056c0 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	2281      	movs	r2, #129	; 0x81
 80056b4:	4252      	negs	r2, r2
 80056b6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	0018      	movs	r0, r3
 80056bc:	f000 fb2e 	bl	8005d1c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	691b      	ldr	r3, [r3, #16]
 80056c6:	2240      	movs	r2, #64	; 0x40
 80056c8:	4013      	ands	r3, r2
 80056ca:	2b40      	cmp	r3, #64	; 0x40
 80056cc:	d10f      	bne.n	80056ee <HAL_TIM_IRQHandler+0x1f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	68db      	ldr	r3, [r3, #12]
 80056d4:	2240      	movs	r2, #64	; 0x40
 80056d6:	4013      	ands	r3, r2
 80056d8:	2b40      	cmp	r3, #64	; 0x40
 80056da:	d108      	bne.n	80056ee <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	2241      	movs	r2, #65	; 0x41
 80056e2:	4252      	negs	r2, r2
 80056e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	0018      	movs	r0, r3
 80056ea:	f000 f88b 	bl	8005804 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	691b      	ldr	r3, [r3, #16]
 80056f4:	2220      	movs	r2, #32
 80056f6:	4013      	ands	r3, r2
 80056f8:	2b20      	cmp	r3, #32
 80056fa:	d10f      	bne.n	800571c <HAL_TIM_IRQHandler+0x224>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	68db      	ldr	r3, [r3, #12]
 8005702:	2220      	movs	r2, #32
 8005704:	4013      	ands	r3, r2
 8005706:	2b20      	cmp	r3, #32
 8005708:	d108      	bne.n	800571c <HAL_TIM_IRQHandler+0x224>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	2221      	movs	r2, #33	; 0x21
 8005710:	4252      	negs	r2, r2
 8005712:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	0018      	movs	r0, r3
 8005718:	f000 faf8 	bl	8005d0c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800571c:	46c0      	nop			; (mov r8, r8)
 800571e:	46bd      	mov	sp, r7
 8005720:	b002      	add	sp, #8
 8005722:	bd80      	pop	{r7, pc}

08005724 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8005724:	b580      	push	{r7, lr}
 8005726:	b086      	sub	sp, #24
 8005728:	af00      	add	r7, sp, #0
 800572a:	60f8      	str	r0, [r7, #12]
 800572c:	60b9      	str	r1, [r7, #8]
 800572e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005730:	2317      	movs	r3, #23
 8005732:	18fb      	adds	r3, r7, r3
 8005734:	2200      	movs	r2, #0
 8005736:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	223c      	movs	r2, #60	; 0x3c
 800573c:	5c9b      	ldrb	r3, [r3, r2]
 800573e:	2b01      	cmp	r3, #1
 8005740:	d101      	bne.n	8005746 <HAL_TIM_OC_ConfigChannel+0x22>
 8005742:	2302      	movs	r3, #2
 8005744:	e042      	b.n	80057cc <HAL_TIM_OC_ConfigChannel+0xa8>
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	223c      	movs	r2, #60	; 0x3c
 800574a:	2101      	movs	r1, #1
 800574c:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	2b0c      	cmp	r3, #12
 8005752:	d027      	beq.n	80057a4 <HAL_TIM_OC_ConfigChannel+0x80>
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	2b0c      	cmp	r3, #12
 8005758:	d82c      	bhi.n	80057b4 <HAL_TIM_OC_ConfigChannel+0x90>
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	2b08      	cmp	r3, #8
 800575e:	d019      	beq.n	8005794 <HAL_TIM_OC_ConfigChannel+0x70>
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	2b08      	cmp	r3, #8
 8005764:	d826      	bhi.n	80057b4 <HAL_TIM_OC_ConfigChannel+0x90>
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	2b00      	cmp	r3, #0
 800576a:	d003      	beq.n	8005774 <HAL_TIM_OC_ConfigChannel+0x50>
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	2b04      	cmp	r3, #4
 8005770:	d008      	beq.n	8005784 <HAL_TIM_OC_ConfigChannel+0x60>
 8005772:	e01f      	b.n	80057b4 <HAL_TIM_OC_ConfigChannel+0x90>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	68ba      	ldr	r2, [r7, #8]
 800577a:	0011      	movs	r1, r2
 800577c:	0018      	movs	r0, r3
 800577e:	f000 f8c9 	bl	8005914 <TIM_OC1_SetConfig>
      break;
 8005782:	e01c      	b.n	80057be <HAL_TIM_OC_ConfigChannel+0x9a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	68ba      	ldr	r2, [r7, #8]
 800578a:	0011      	movs	r1, r2
 800578c:	0018      	movs	r0, r3
 800578e:	f000 f949 	bl	8005a24 <TIM_OC2_SetConfig>
      break;
 8005792:	e014      	b.n	80057be <HAL_TIM_OC_ConfigChannel+0x9a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	68ba      	ldr	r2, [r7, #8]
 800579a:	0011      	movs	r1, r2
 800579c:	0018      	movs	r0, r3
 800579e:	f000 f9c5 	bl	8005b2c <TIM_OC3_SetConfig>
      break;
 80057a2:	e00c      	b.n	80057be <HAL_TIM_OC_ConfigChannel+0x9a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	68ba      	ldr	r2, [r7, #8]
 80057aa:	0011      	movs	r1, r2
 80057ac:	0018      	movs	r0, r3
 80057ae:	f000 fa43 	bl	8005c38 <TIM_OC4_SetConfig>
      break;
 80057b2:	e004      	b.n	80057be <HAL_TIM_OC_ConfigChannel+0x9a>
    }

    default:
      status = HAL_ERROR;
 80057b4:	2317      	movs	r3, #23
 80057b6:	18fb      	adds	r3, r7, r3
 80057b8:	2201      	movs	r2, #1
 80057ba:	701a      	strb	r2, [r3, #0]
      break;
 80057bc:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	223c      	movs	r2, #60	; 0x3c
 80057c2:	2100      	movs	r1, #0
 80057c4:	5499      	strb	r1, [r3, r2]

  return status;
 80057c6:	2317      	movs	r3, #23
 80057c8:	18fb      	adds	r3, r7, r3
 80057ca:	781b      	ldrb	r3, [r3, #0]
}
 80057cc:	0018      	movs	r0, r3
 80057ce:	46bd      	mov	sp, r7
 80057d0:	b006      	add	sp, #24
 80057d2:	bd80      	pop	{r7, pc}

080057d4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80057d4:	b580      	push	{r7, lr}
 80057d6:	b082      	sub	sp, #8
 80057d8:	af00      	add	r7, sp, #0
 80057da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80057dc:	46c0      	nop			; (mov r8, r8)
 80057de:	46bd      	mov	sp, r7
 80057e0:	b002      	add	sp, #8
 80057e2:	bd80      	pop	{r7, pc}

080057e4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80057e4:	b580      	push	{r7, lr}
 80057e6:	b082      	sub	sp, #8
 80057e8:	af00      	add	r7, sp, #0
 80057ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80057ec:	46c0      	nop			; (mov r8, r8)
 80057ee:	46bd      	mov	sp, r7
 80057f0:	b002      	add	sp, #8
 80057f2:	bd80      	pop	{r7, pc}

080057f4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80057f4:	b580      	push	{r7, lr}
 80057f6:	b082      	sub	sp, #8
 80057f8:	af00      	add	r7, sp, #0
 80057fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80057fc:	46c0      	nop			; (mov r8, r8)
 80057fe:	46bd      	mov	sp, r7
 8005800:	b002      	add	sp, #8
 8005802:	bd80      	pop	{r7, pc}

08005804 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005804:	b580      	push	{r7, lr}
 8005806:	b082      	sub	sp, #8
 8005808:	af00      	add	r7, sp, #0
 800580a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800580c:	46c0      	nop			; (mov r8, r8)
 800580e:	46bd      	mov	sp, r7
 8005810:	b002      	add	sp, #8
 8005812:	bd80      	pop	{r7, pc}

08005814 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005814:	b580      	push	{r7, lr}
 8005816:	b084      	sub	sp, #16
 8005818:	af00      	add	r7, sp, #0
 800581a:	6078      	str	r0, [r7, #4]
 800581c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	4a34      	ldr	r2, [pc, #208]	; (80058f8 <TIM_Base_SetConfig+0xe4>)
 8005828:	4293      	cmp	r3, r2
 800582a:	d008      	beq.n	800583e <TIM_Base_SetConfig+0x2a>
 800582c:	687a      	ldr	r2, [r7, #4]
 800582e:	2380      	movs	r3, #128	; 0x80
 8005830:	05db      	lsls	r3, r3, #23
 8005832:	429a      	cmp	r2, r3
 8005834:	d003      	beq.n	800583e <TIM_Base_SetConfig+0x2a>
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	4a30      	ldr	r2, [pc, #192]	; (80058fc <TIM_Base_SetConfig+0xe8>)
 800583a:	4293      	cmp	r3, r2
 800583c:	d108      	bne.n	8005850 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	2270      	movs	r2, #112	; 0x70
 8005842:	4393      	bics	r3, r2
 8005844:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005846:	683b      	ldr	r3, [r7, #0]
 8005848:	685b      	ldr	r3, [r3, #4]
 800584a:	68fa      	ldr	r2, [r7, #12]
 800584c:	4313      	orrs	r3, r2
 800584e:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	4a29      	ldr	r2, [pc, #164]	; (80058f8 <TIM_Base_SetConfig+0xe4>)
 8005854:	4293      	cmp	r3, r2
 8005856:	d018      	beq.n	800588a <TIM_Base_SetConfig+0x76>
 8005858:	687a      	ldr	r2, [r7, #4]
 800585a:	2380      	movs	r3, #128	; 0x80
 800585c:	05db      	lsls	r3, r3, #23
 800585e:	429a      	cmp	r2, r3
 8005860:	d013      	beq.n	800588a <TIM_Base_SetConfig+0x76>
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	4a25      	ldr	r2, [pc, #148]	; (80058fc <TIM_Base_SetConfig+0xe8>)
 8005866:	4293      	cmp	r3, r2
 8005868:	d00f      	beq.n	800588a <TIM_Base_SetConfig+0x76>
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	4a24      	ldr	r2, [pc, #144]	; (8005900 <TIM_Base_SetConfig+0xec>)
 800586e:	4293      	cmp	r3, r2
 8005870:	d00b      	beq.n	800588a <TIM_Base_SetConfig+0x76>
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	4a23      	ldr	r2, [pc, #140]	; (8005904 <TIM_Base_SetConfig+0xf0>)
 8005876:	4293      	cmp	r3, r2
 8005878:	d007      	beq.n	800588a <TIM_Base_SetConfig+0x76>
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	4a22      	ldr	r2, [pc, #136]	; (8005908 <TIM_Base_SetConfig+0xf4>)
 800587e:	4293      	cmp	r3, r2
 8005880:	d003      	beq.n	800588a <TIM_Base_SetConfig+0x76>
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	4a21      	ldr	r2, [pc, #132]	; (800590c <TIM_Base_SetConfig+0xf8>)
 8005886:	4293      	cmp	r3, r2
 8005888:	d108      	bne.n	800589c <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	4a20      	ldr	r2, [pc, #128]	; (8005910 <TIM_Base_SetConfig+0xfc>)
 800588e:	4013      	ands	r3, r2
 8005890:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005892:	683b      	ldr	r3, [r7, #0]
 8005894:	68db      	ldr	r3, [r3, #12]
 8005896:	68fa      	ldr	r2, [r7, #12]
 8005898:	4313      	orrs	r3, r2
 800589a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	2280      	movs	r2, #128	; 0x80
 80058a0:	4393      	bics	r3, r2
 80058a2:	001a      	movs	r2, r3
 80058a4:	683b      	ldr	r3, [r7, #0]
 80058a6:	695b      	ldr	r3, [r3, #20]
 80058a8:	4313      	orrs	r3, r2
 80058aa:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	68fa      	ldr	r2, [r7, #12]
 80058b0:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80058b2:	683b      	ldr	r3, [r7, #0]
 80058b4:	689a      	ldr	r2, [r3, #8]
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80058ba:	683b      	ldr	r3, [r7, #0]
 80058bc:	681a      	ldr	r2, [r3, #0]
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	4a0c      	ldr	r2, [pc, #48]	; (80058f8 <TIM_Base_SetConfig+0xe4>)
 80058c6:	4293      	cmp	r3, r2
 80058c8:	d00b      	beq.n	80058e2 <TIM_Base_SetConfig+0xce>
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	4a0d      	ldr	r2, [pc, #52]	; (8005904 <TIM_Base_SetConfig+0xf0>)
 80058ce:	4293      	cmp	r3, r2
 80058d0:	d007      	beq.n	80058e2 <TIM_Base_SetConfig+0xce>
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	4a0c      	ldr	r2, [pc, #48]	; (8005908 <TIM_Base_SetConfig+0xf4>)
 80058d6:	4293      	cmp	r3, r2
 80058d8:	d003      	beq.n	80058e2 <TIM_Base_SetConfig+0xce>
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	4a0b      	ldr	r2, [pc, #44]	; (800590c <TIM_Base_SetConfig+0xf8>)
 80058de:	4293      	cmp	r3, r2
 80058e0:	d103      	bne.n	80058ea <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80058e2:	683b      	ldr	r3, [r7, #0]
 80058e4:	691a      	ldr	r2, [r3, #16]
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	2201      	movs	r2, #1
 80058ee:	615a      	str	r2, [r3, #20]
}
 80058f0:	46c0      	nop			; (mov r8, r8)
 80058f2:	46bd      	mov	sp, r7
 80058f4:	b004      	add	sp, #16
 80058f6:	bd80      	pop	{r7, pc}
 80058f8:	40012c00 	.word	0x40012c00
 80058fc:	40000400 	.word	0x40000400
 8005900:	40002000 	.word	0x40002000
 8005904:	40014000 	.word	0x40014000
 8005908:	40014400 	.word	0x40014400
 800590c:	40014800 	.word	0x40014800
 8005910:	fffffcff 	.word	0xfffffcff

08005914 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005914:	b580      	push	{r7, lr}
 8005916:	b086      	sub	sp, #24
 8005918:	af00      	add	r7, sp, #0
 800591a:	6078      	str	r0, [r7, #4]
 800591c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	6a1b      	ldr	r3, [r3, #32]
 8005922:	2201      	movs	r2, #1
 8005924:	4393      	bics	r3, r2
 8005926:	001a      	movs	r2, r3
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	6a1b      	ldr	r3, [r3, #32]
 8005930:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	685b      	ldr	r3, [r3, #4]
 8005936:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	699b      	ldr	r3, [r3, #24]
 800593c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	2270      	movs	r2, #112	; 0x70
 8005942:	4393      	bics	r3, r2
 8005944:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	2203      	movs	r2, #3
 800594a:	4393      	bics	r3, r2
 800594c:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800594e:	683b      	ldr	r3, [r7, #0]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	68fa      	ldr	r2, [r7, #12]
 8005954:	4313      	orrs	r3, r2
 8005956:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005958:	697b      	ldr	r3, [r7, #20]
 800595a:	2202      	movs	r2, #2
 800595c:	4393      	bics	r3, r2
 800595e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005960:	683b      	ldr	r3, [r7, #0]
 8005962:	689b      	ldr	r3, [r3, #8]
 8005964:	697a      	ldr	r2, [r7, #20]
 8005966:	4313      	orrs	r3, r2
 8005968:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	4a27      	ldr	r2, [pc, #156]	; (8005a0c <TIM_OC1_SetConfig+0xf8>)
 800596e:	4293      	cmp	r3, r2
 8005970:	d00b      	beq.n	800598a <TIM_OC1_SetConfig+0x76>
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	4a26      	ldr	r2, [pc, #152]	; (8005a10 <TIM_OC1_SetConfig+0xfc>)
 8005976:	4293      	cmp	r3, r2
 8005978:	d007      	beq.n	800598a <TIM_OC1_SetConfig+0x76>
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	4a25      	ldr	r2, [pc, #148]	; (8005a14 <TIM_OC1_SetConfig+0x100>)
 800597e:	4293      	cmp	r3, r2
 8005980:	d003      	beq.n	800598a <TIM_OC1_SetConfig+0x76>
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	4a24      	ldr	r2, [pc, #144]	; (8005a18 <TIM_OC1_SetConfig+0x104>)
 8005986:	4293      	cmp	r3, r2
 8005988:	d10c      	bne.n	80059a4 <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800598a:	697b      	ldr	r3, [r7, #20]
 800598c:	2208      	movs	r2, #8
 800598e:	4393      	bics	r3, r2
 8005990:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005992:	683b      	ldr	r3, [r7, #0]
 8005994:	68db      	ldr	r3, [r3, #12]
 8005996:	697a      	ldr	r2, [r7, #20]
 8005998:	4313      	orrs	r3, r2
 800599a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800599c:	697b      	ldr	r3, [r7, #20]
 800599e:	2204      	movs	r2, #4
 80059a0:	4393      	bics	r3, r2
 80059a2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	4a19      	ldr	r2, [pc, #100]	; (8005a0c <TIM_OC1_SetConfig+0xf8>)
 80059a8:	4293      	cmp	r3, r2
 80059aa:	d00b      	beq.n	80059c4 <TIM_OC1_SetConfig+0xb0>
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	4a18      	ldr	r2, [pc, #96]	; (8005a10 <TIM_OC1_SetConfig+0xfc>)
 80059b0:	4293      	cmp	r3, r2
 80059b2:	d007      	beq.n	80059c4 <TIM_OC1_SetConfig+0xb0>
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	4a17      	ldr	r2, [pc, #92]	; (8005a14 <TIM_OC1_SetConfig+0x100>)
 80059b8:	4293      	cmp	r3, r2
 80059ba:	d003      	beq.n	80059c4 <TIM_OC1_SetConfig+0xb0>
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	4a16      	ldr	r2, [pc, #88]	; (8005a18 <TIM_OC1_SetConfig+0x104>)
 80059c0:	4293      	cmp	r3, r2
 80059c2:	d111      	bne.n	80059e8 <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80059c4:	693b      	ldr	r3, [r7, #16]
 80059c6:	4a15      	ldr	r2, [pc, #84]	; (8005a1c <TIM_OC1_SetConfig+0x108>)
 80059c8:	4013      	ands	r3, r2
 80059ca:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80059cc:	693b      	ldr	r3, [r7, #16]
 80059ce:	4a14      	ldr	r2, [pc, #80]	; (8005a20 <TIM_OC1_SetConfig+0x10c>)
 80059d0:	4013      	ands	r3, r2
 80059d2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80059d4:	683b      	ldr	r3, [r7, #0]
 80059d6:	695b      	ldr	r3, [r3, #20]
 80059d8:	693a      	ldr	r2, [r7, #16]
 80059da:	4313      	orrs	r3, r2
 80059dc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80059de:	683b      	ldr	r3, [r7, #0]
 80059e0:	699b      	ldr	r3, [r3, #24]
 80059e2:	693a      	ldr	r2, [r7, #16]
 80059e4:	4313      	orrs	r3, r2
 80059e6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	693a      	ldr	r2, [r7, #16]
 80059ec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	68fa      	ldr	r2, [r7, #12]
 80059f2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80059f4:	683b      	ldr	r3, [r7, #0]
 80059f6:	685a      	ldr	r2, [r3, #4]
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	697a      	ldr	r2, [r7, #20]
 8005a00:	621a      	str	r2, [r3, #32]
}
 8005a02:	46c0      	nop			; (mov r8, r8)
 8005a04:	46bd      	mov	sp, r7
 8005a06:	b006      	add	sp, #24
 8005a08:	bd80      	pop	{r7, pc}
 8005a0a:	46c0      	nop			; (mov r8, r8)
 8005a0c:	40012c00 	.word	0x40012c00
 8005a10:	40014000 	.word	0x40014000
 8005a14:	40014400 	.word	0x40014400
 8005a18:	40014800 	.word	0x40014800
 8005a1c:	fffffeff 	.word	0xfffffeff
 8005a20:	fffffdff 	.word	0xfffffdff

08005a24 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005a24:	b580      	push	{r7, lr}
 8005a26:	b086      	sub	sp, #24
 8005a28:	af00      	add	r7, sp, #0
 8005a2a:	6078      	str	r0, [r7, #4]
 8005a2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	6a1b      	ldr	r3, [r3, #32]
 8005a32:	2210      	movs	r2, #16
 8005a34:	4393      	bics	r3, r2
 8005a36:	001a      	movs	r2, r3
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	6a1b      	ldr	r3, [r3, #32]
 8005a40:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	685b      	ldr	r3, [r3, #4]
 8005a46:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	699b      	ldr	r3, [r3, #24]
 8005a4c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	4a2e      	ldr	r2, [pc, #184]	; (8005b0c <TIM_OC2_SetConfig+0xe8>)
 8005a52:	4013      	ands	r3, r2
 8005a54:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	4a2d      	ldr	r2, [pc, #180]	; (8005b10 <TIM_OC2_SetConfig+0xec>)
 8005a5a:	4013      	ands	r3, r2
 8005a5c:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005a5e:	683b      	ldr	r3, [r7, #0]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	021b      	lsls	r3, r3, #8
 8005a64:	68fa      	ldr	r2, [r7, #12]
 8005a66:	4313      	orrs	r3, r2
 8005a68:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005a6a:	697b      	ldr	r3, [r7, #20]
 8005a6c:	2220      	movs	r2, #32
 8005a6e:	4393      	bics	r3, r2
 8005a70:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005a72:	683b      	ldr	r3, [r7, #0]
 8005a74:	689b      	ldr	r3, [r3, #8]
 8005a76:	011b      	lsls	r3, r3, #4
 8005a78:	697a      	ldr	r2, [r7, #20]
 8005a7a:	4313      	orrs	r3, r2
 8005a7c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	4a24      	ldr	r2, [pc, #144]	; (8005b14 <TIM_OC2_SetConfig+0xf0>)
 8005a82:	4293      	cmp	r3, r2
 8005a84:	d10d      	bne.n	8005aa2 <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005a86:	697b      	ldr	r3, [r7, #20]
 8005a88:	2280      	movs	r2, #128	; 0x80
 8005a8a:	4393      	bics	r3, r2
 8005a8c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005a8e:	683b      	ldr	r3, [r7, #0]
 8005a90:	68db      	ldr	r3, [r3, #12]
 8005a92:	011b      	lsls	r3, r3, #4
 8005a94:	697a      	ldr	r2, [r7, #20]
 8005a96:	4313      	orrs	r3, r2
 8005a98:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005a9a:	697b      	ldr	r3, [r7, #20]
 8005a9c:	2240      	movs	r2, #64	; 0x40
 8005a9e:	4393      	bics	r3, r2
 8005aa0:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	4a1b      	ldr	r2, [pc, #108]	; (8005b14 <TIM_OC2_SetConfig+0xf0>)
 8005aa6:	4293      	cmp	r3, r2
 8005aa8:	d00b      	beq.n	8005ac2 <TIM_OC2_SetConfig+0x9e>
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	4a1a      	ldr	r2, [pc, #104]	; (8005b18 <TIM_OC2_SetConfig+0xf4>)
 8005aae:	4293      	cmp	r3, r2
 8005ab0:	d007      	beq.n	8005ac2 <TIM_OC2_SetConfig+0x9e>
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	4a19      	ldr	r2, [pc, #100]	; (8005b1c <TIM_OC2_SetConfig+0xf8>)
 8005ab6:	4293      	cmp	r3, r2
 8005ab8:	d003      	beq.n	8005ac2 <TIM_OC2_SetConfig+0x9e>
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	4a18      	ldr	r2, [pc, #96]	; (8005b20 <TIM_OC2_SetConfig+0xfc>)
 8005abe:	4293      	cmp	r3, r2
 8005ac0:	d113      	bne.n	8005aea <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005ac2:	693b      	ldr	r3, [r7, #16]
 8005ac4:	4a17      	ldr	r2, [pc, #92]	; (8005b24 <TIM_OC2_SetConfig+0x100>)
 8005ac6:	4013      	ands	r3, r2
 8005ac8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005aca:	693b      	ldr	r3, [r7, #16]
 8005acc:	4a16      	ldr	r2, [pc, #88]	; (8005b28 <TIM_OC2_SetConfig+0x104>)
 8005ace:	4013      	ands	r3, r2
 8005ad0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005ad2:	683b      	ldr	r3, [r7, #0]
 8005ad4:	695b      	ldr	r3, [r3, #20]
 8005ad6:	009b      	lsls	r3, r3, #2
 8005ad8:	693a      	ldr	r2, [r7, #16]
 8005ada:	4313      	orrs	r3, r2
 8005adc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005ade:	683b      	ldr	r3, [r7, #0]
 8005ae0:	699b      	ldr	r3, [r3, #24]
 8005ae2:	009b      	lsls	r3, r3, #2
 8005ae4:	693a      	ldr	r2, [r7, #16]
 8005ae6:	4313      	orrs	r3, r2
 8005ae8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	693a      	ldr	r2, [r7, #16]
 8005aee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	68fa      	ldr	r2, [r7, #12]
 8005af4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005af6:	683b      	ldr	r3, [r7, #0]
 8005af8:	685a      	ldr	r2, [r3, #4]
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	697a      	ldr	r2, [r7, #20]
 8005b02:	621a      	str	r2, [r3, #32]
}
 8005b04:	46c0      	nop			; (mov r8, r8)
 8005b06:	46bd      	mov	sp, r7
 8005b08:	b006      	add	sp, #24
 8005b0a:	bd80      	pop	{r7, pc}
 8005b0c:	ffff8fff 	.word	0xffff8fff
 8005b10:	fffffcff 	.word	0xfffffcff
 8005b14:	40012c00 	.word	0x40012c00
 8005b18:	40014000 	.word	0x40014000
 8005b1c:	40014400 	.word	0x40014400
 8005b20:	40014800 	.word	0x40014800
 8005b24:	fffffbff 	.word	0xfffffbff
 8005b28:	fffff7ff 	.word	0xfffff7ff

08005b2c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005b2c:	b580      	push	{r7, lr}
 8005b2e:	b086      	sub	sp, #24
 8005b30:	af00      	add	r7, sp, #0
 8005b32:	6078      	str	r0, [r7, #4]
 8005b34:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	6a1b      	ldr	r3, [r3, #32]
 8005b3a:	4a35      	ldr	r2, [pc, #212]	; (8005c10 <TIM_OC3_SetConfig+0xe4>)
 8005b3c:	401a      	ands	r2, r3
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	6a1b      	ldr	r3, [r3, #32]
 8005b46:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	685b      	ldr	r3, [r3, #4]
 8005b4c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	69db      	ldr	r3, [r3, #28]
 8005b52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	2270      	movs	r2, #112	; 0x70
 8005b58:	4393      	bics	r3, r2
 8005b5a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	2203      	movs	r2, #3
 8005b60:	4393      	bics	r3, r2
 8005b62:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005b64:	683b      	ldr	r3, [r7, #0]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	68fa      	ldr	r2, [r7, #12]
 8005b6a:	4313      	orrs	r3, r2
 8005b6c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005b6e:	697b      	ldr	r3, [r7, #20]
 8005b70:	4a28      	ldr	r2, [pc, #160]	; (8005c14 <TIM_OC3_SetConfig+0xe8>)
 8005b72:	4013      	ands	r3, r2
 8005b74:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005b76:	683b      	ldr	r3, [r7, #0]
 8005b78:	689b      	ldr	r3, [r3, #8]
 8005b7a:	021b      	lsls	r3, r3, #8
 8005b7c:	697a      	ldr	r2, [r7, #20]
 8005b7e:	4313      	orrs	r3, r2
 8005b80:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	4a24      	ldr	r2, [pc, #144]	; (8005c18 <TIM_OC3_SetConfig+0xec>)
 8005b86:	4293      	cmp	r3, r2
 8005b88:	d10d      	bne.n	8005ba6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005b8a:	697b      	ldr	r3, [r7, #20]
 8005b8c:	4a23      	ldr	r2, [pc, #140]	; (8005c1c <TIM_OC3_SetConfig+0xf0>)
 8005b8e:	4013      	ands	r3, r2
 8005b90:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005b92:	683b      	ldr	r3, [r7, #0]
 8005b94:	68db      	ldr	r3, [r3, #12]
 8005b96:	021b      	lsls	r3, r3, #8
 8005b98:	697a      	ldr	r2, [r7, #20]
 8005b9a:	4313      	orrs	r3, r2
 8005b9c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005b9e:	697b      	ldr	r3, [r7, #20]
 8005ba0:	4a1f      	ldr	r2, [pc, #124]	; (8005c20 <TIM_OC3_SetConfig+0xf4>)
 8005ba2:	4013      	ands	r3, r2
 8005ba4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	4a1b      	ldr	r2, [pc, #108]	; (8005c18 <TIM_OC3_SetConfig+0xec>)
 8005baa:	4293      	cmp	r3, r2
 8005bac:	d00b      	beq.n	8005bc6 <TIM_OC3_SetConfig+0x9a>
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	4a1c      	ldr	r2, [pc, #112]	; (8005c24 <TIM_OC3_SetConfig+0xf8>)
 8005bb2:	4293      	cmp	r3, r2
 8005bb4:	d007      	beq.n	8005bc6 <TIM_OC3_SetConfig+0x9a>
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	4a1b      	ldr	r2, [pc, #108]	; (8005c28 <TIM_OC3_SetConfig+0xfc>)
 8005bba:	4293      	cmp	r3, r2
 8005bbc:	d003      	beq.n	8005bc6 <TIM_OC3_SetConfig+0x9a>
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	4a1a      	ldr	r2, [pc, #104]	; (8005c2c <TIM_OC3_SetConfig+0x100>)
 8005bc2:	4293      	cmp	r3, r2
 8005bc4:	d113      	bne.n	8005bee <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005bc6:	693b      	ldr	r3, [r7, #16]
 8005bc8:	4a19      	ldr	r2, [pc, #100]	; (8005c30 <TIM_OC3_SetConfig+0x104>)
 8005bca:	4013      	ands	r3, r2
 8005bcc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005bce:	693b      	ldr	r3, [r7, #16]
 8005bd0:	4a18      	ldr	r2, [pc, #96]	; (8005c34 <TIM_OC3_SetConfig+0x108>)
 8005bd2:	4013      	ands	r3, r2
 8005bd4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005bd6:	683b      	ldr	r3, [r7, #0]
 8005bd8:	695b      	ldr	r3, [r3, #20]
 8005bda:	011b      	lsls	r3, r3, #4
 8005bdc:	693a      	ldr	r2, [r7, #16]
 8005bde:	4313      	orrs	r3, r2
 8005be0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005be2:	683b      	ldr	r3, [r7, #0]
 8005be4:	699b      	ldr	r3, [r3, #24]
 8005be6:	011b      	lsls	r3, r3, #4
 8005be8:	693a      	ldr	r2, [r7, #16]
 8005bea:	4313      	orrs	r3, r2
 8005bec:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	693a      	ldr	r2, [r7, #16]
 8005bf2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	68fa      	ldr	r2, [r7, #12]
 8005bf8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005bfa:	683b      	ldr	r3, [r7, #0]
 8005bfc:	685a      	ldr	r2, [r3, #4]
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	697a      	ldr	r2, [r7, #20]
 8005c06:	621a      	str	r2, [r3, #32]
}
 8005c08:	46c0      	nop			; (mov r8, r8)
 8005c0a:	46bd      	mov	sp, r7
 8005c0c:	b006      	add	sp, #24
 8005c0e:	bd80      	pop	{r7, pc}
 8005c10:	fffffeff 	.word	0xfffffeff
 8005c14:	fffffdff 	.word	0xfffffdff
 8005c18:	40012c00 	.word	0x40012c00
 8005c1c:	fffff7ff 	.word	0xfffff7ff
 8005c20:	fffffbff 	.word	0xfffffbff
 8005c24:	40014000 	.word	0x40014000
 8005c28:	40014400 	.word	0x40014400
 8005c2c:	40014800 	.word	0x40014800
 8005c30:	ffffefff 	.word	0xffffefff
 8005c34:	ffffdfff 	.word	0xffffdfff

08005c38 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005c38:	b580      	push	{r7, lr}
 8005c3a:	b086      	sub	sp, #24
 8005c3c:	af00      	add	r7, sp, #0
 8005c3e:	6078      	str	r0, [r7, #4]
 8005c40:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	6a1b      	ldr	r3, [r3, #32]
 8005c46:	4a28      	ldr	r2, [pc, #160]	; (8005ce8 <TIM_OC4_SetConfig+0xb0>)
 8005c48:	401a      	ands	r2, r3
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	6a1b      	ldr	r3, [r3, #32]
 8005c52:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	685b      	ldr	r3, [r3, #4]
 8005c58:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	69db      	ldr	r3, [r3, #28]
 8005c5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	4a22      	ldr	r2, [pc, #136]	; (8005cec <TIM_OC4_SetConfig+0xb4>)
 8005c64:	4013      	ands	r3, r2
 8005c66:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	4a21      	ldr	r2, [pc, #132]	; (8005cf0 <TIM_OC4_SetConfig+0xb8>)
 8005c6c:	4013      	ands	r3, r2
 8005c6e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005c70:	683b      	ldr	r3, [r7, #0]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	021b      	lsls	r3, r3, #8
 8005c76:	68fa      	ldr	r2, [r7, #12]
 8005c78:	4313      	orrs	r3, r2
 8005c7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005c7c:	693b      	ldr	r3, [r7, #16]
 8005c7e:	4a1d      	ldr	r2, [pc, #116]	; (8005cf4 <TIM_OC4_SetConfig+0xbc>)
 8005c80:	4013      	ands	r3, r2
 8005c82:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005c84:	683b      	ldr	r3, [r7, #0]
 8005c86:	689b      	ldr	r3, [r3, #8]
 8005c88:	031b      	lsls	r3, r3, #12
 8005c8a:	693a      	ldr	r2, [r7, #16]
 8005c8c:	4313      	orrs	r3, r2
 8005c8e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	4a19      	ldr	r2, [pc, #100]	; (8005cf8 <TIM_OC4_SetConfig+0xc0>)
 8005c94:	4293      	cmp	r3, r2
 8005c96:	d00b      	beq.n	8005cb0 <TIM_OC4_SetConfig+0x78>
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	4a18      	ldr	r2, [pc, #96]	; (8005cfc <TIM_OC4_SetConfig+0xc4>)
 8005c9c:	4293      	cmp	r3, r2
 8005c9e:	d007      	beq.n	8005cb0 <TIM_OC4_SetConfig+0x78>
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	4a17      	ldr	r2, [pc, #92]	; (8005d00 <TIM_OC4_SetConfig+0xc8>)
 8005ca4:	4293      	cmp	r3, r2
 8005ca6:	d003      	beq.n	8005cb0 <TIM_OC4_SetConfig+0x78>
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	4a16      	ldr	r2, [pc, #88]	; (8005d04 <TIM_OC4_SetConfig+0xcc>)
 8005cac:	4293      	cmp	r3, r2
 8005cae:	d109      	bne.n	8005cc4 <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005cb0:	697b      	ldr	r3, [r7, #20]
 8005cb2:	4a15      	ldr	r2, [pc, #84]	; (8005d08 <TIM_OC4_SetConfig+0xd0>)
 8005cb4:	4013      	ands	r3, r2
 8005cb6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005cb8:	683b      	ldr	r3, [r7, #0]
 8005cba:	695b      	ldr	r3, [r3, #20]
 8005cbc:	019b      	lsls	r3, r3, #6
 8005cbe:	697a      	ldr	r2, [r7, #20]
 8005cc0:	4313      	orrs	r3, r2
 8005cc2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	697a      	ldr	r2, [r7, #20]
 8005cc8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	68fa      	ldr	r2, [r7, #12]
 8005cce:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005cd0:	683b      	ldr	r3, [r7, #0]
 8005cd2:	685a      	ldr	r2, [r3, #4]
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	693a      	ldr	r2, [r7, #16]
 8005cdc:	621a      	str	r2, [r3, #32]
}
 8005cde:	46c0      	nop			; (mov r8, r8)
 8005ce0:	46bd      	mov	sp, r7
 8005ce2:	b006      	add	sp, #24
 8005ce4:	bd80      	pop	{r7, pc}
 8005ce6:	46c0      	nop			; (mov r8, r8)
 8005ce8:	ffffefff 	.word	0xffffefff
 8005cec:	ffff8fff 	.word	0xffff8fff
 8005cf0:	fffffcff 	.word	0xfffffcff
 8005cf4:	ffffdfff 	.word	0xffffdfff
 8005cf8:	40012c00 	.word	0x40012c00
 8005cfc:	40014000 	.word	0x40014000
 8005d00:	40014400 	.word	0x40014400
 8005d04:	40014800 	.word	0x40014800
 8005d08:	ffffbfff 	.word	0xffffbfff

08005d0c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005d0c:	b580      	push	{r7, lr}
 8005d0e:	b082      	sub	sp, #8
 8005d10:	af00      	add	r7, sp, #0
 8005d12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005d14:	46c0      	nop			; (mov r8, r8)
 8005d16:	46bd      	mov	sp, r7
 8005d18:	b002      	add	sp, #8
 8005d1a:	bd80      	pop	{r7, pc}

08005d1c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005d1c:	b580      	push	{r7, lr}
 8005d1e:	b082      	sub	sp, #8
 8005d20:	af00      	add	r7, sp, #0
 8005d22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005d24:	46c0      	nop			; (mov r8, r8)
 8005d26:	46bd      	mov	sp, r7
 8005d28:	b002      	add	sp, #8
 8005d2a:	bd80      	pop	{r7, pc}

08005d2c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005d2c:	b580      	push	{r7, lr}
 8005d2e:	b082      	sub	sp, #8
 8005d30:	af00      	add	r7, sp, #0
 8005d32:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d101      	bne.n	8005d3e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005d3a:	2301      	movs	r3, #1
 8005d3c:	e044      	b.n	8005dc8 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d107      	bne.n	8005d56 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	2274      	movs	r2, #116	; 0x74
 8005d4a:	2100      	movs	r1, #0
 8005d4c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	0018      	movs	r0, r3
 8005d52:	f7fb fd9d 	bl	8001890 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	2224      	movs	r2, #36	; 0x24
 8005d5a:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	681a      	ldr	r2, [r3, #0]
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	2101      	movs	r1, #1
 8005d68:	438a      	bics	r2, r1
 8005d6a:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	0018      	movs	r0, r3
 8005d70:	f000 fb24 	bl	80063bc <UART_SetConfig>
 8005d74:	0003      	movs	r3, r0
 8005d76:	2b01      	cmp	r3, #1
 8005d78:	d101      	bne.n	8005d7e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8005d7a:	2301      	movs	r3, #1
 8005d7c:	e024      	b.n	8005dc8 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d003      	beq.n	8005d8e <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	0018      	movs	r0, r3
 8005d8a:	f000 fc9f 	bl	80066cc <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	685a      	ldr	r2, [r3, #4]
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	490d      	ldr	r1, [pc, #52]	; (8005dd0 <HAL_UART_Init+0xa4>)
 8005d9a:	400a      	ands	r2, r1
 8005d9c:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	689a      	ldr	r2, [r3, #8]
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	212a      	movs	r1, #42	; 0x2a
 8005daa:	438a      	bics	r2, r1
 8005dac:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	681a      	ldr	r2, [r3, #0]
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	2101      	movs	r1, #1
 8005dba:	430a      	orrs	r2, r1
 8005dbc:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	0018      	movs	r0, r3
 8005dc2:	f000 fd37 	bl	8006834 <UART_CheckIdleState>
 8005dc6:	0003      	movs	r3, r0
}
 8005dc8:	0018      	movs	r0, r3
 8005dca:	46bd      	mov	sp, r7
 8005dcc:	b002      	add	sp, #8
 8005dce:	bd80      	pop	{r7, pc}
 8005dd0:	ffffb7ff 	.word	0xffffb7ff

08005dd4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005dd4:	b590      	push	{r4, r7, lr}
 8005dd6:	b0ab      	sub	sp, #172	; 0xac
 8005dd8:	af00      	add	r7, sp, #0
 8005dda:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	69db      	ldr	r3, [r3, #28]
 8005de2:	22a4      	movs	r2, #164	; 0xa4
 8005de4:	18b9      	adds	r1, r7, r2
 8005de6:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	20a0      	movs	r0, #160	; 0xa0
 8005df0:	1839      	adds	r1, r7, r0
 8005df2:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	689b      	ldr	r3, [r3, #8]
 8005dfa:	219c      	movs	r1, #156	; 0x9c
 8005dfc:	1879      	adds	r1, r7, r1
 8005dfe:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005e00:	0011      	movs	r1, r2
 8005e02:	18bb      	adds	r3, r7, r2
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	4a99      	ldr	r2, [pc, #612]	; (800606c <HAL_UART_IRQHandler+0x298>)
 8005e08:	4013      	ands	r3, r2
 8005e0a:	2298      	movs	r2, #152	; 0x98
 8005e0c:	18bc      	adds	r4, r7, r2
 8005e0e:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 8005e10:	18bb      	adds	r3, r7, r2
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d114      	bne.n	8005e42 <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8005e18:	187b      	adds	r3, r7, r1
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	2220      	movs	r2, #32
 8005e1e:	4013      	ands	r3, r2
 8005e20:	d00f      	beq.n	8005e42 <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005e22:	183b      	adds	r3, r7, r0
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	2220      	movs	r2, #32
 8005e28:	4013      	ands	r3, r2
 8005e2a:	d00a      	beq.n	8005e42 <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d100      	bne.n	8005e36 <HAL_UART_IRQHandler+0x62>
 8005e34:	e296      	b.n	8006364 <HAL_UART_IRQHandler+0x590>
      {
        huart->RxISR(huart);
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005e3a:	687a      	ldr	r2, [r7, #4]
 8005e3c:	0010      	movs	r0, r2
 8005e3e:	4798      	blx	r3
      }
      return;
 8005e40:	e290      	b.n	8006364 <HAL_UART_IRQHandler+0x590>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8005e42:	2398      	movs	r3, #152	; 0x98
 8005e44:	18fb      	adds	r3, r7, r3
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d100      	bne.n	8005e4e <HAL_UART_IRQHandler+0x7a>
 8005e4c:	e114      	b.n	8006078 <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8005e4e:	239c      	movs	r3, #156	; 0x9c
 8005e50:	18fb      	adds	r3, r7, r3
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	2201      	movs	r2, #1
 8005e56:	4013      	ands	r3, r2
 8005e58:	d106      	bne.n	8005e68 <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8005e5a:	23a0      	movs	r3, #160	; 0xa0
 8005e5c:	18fb      	adds	r3, r7, r3
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	4a83      	ldr	r2, [pc, #524]	; (8006070 <HAL_UART_IRQHandler+0x29c>)
 8005e62:	4013      	ands	r3, r2
 8005e64:	d100      	bne.n	8005e68 <HAL_UART_IRQHandler+0x94>
 8005e66:	e107      	b.n	8006078 <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005e68:	23a4      	movs	r3, #164	; 0xa4
 8005e6a:	18fb      	adds	r3, r7, r3
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	2201      	movs	r2, #1
 8005e70:	4013      	ands	r3, r2
 8005e72:	d012      	beq.n	8005e9a <HAL_UART_IRQHandler+0xc6>
 8005e74:	23a0      	movs	r3, #160	; 0xa0
 8005e76:	18fb      	adds	r3, r7, r3
 8005e78:	681a      	ldr	r2, [r3, #0]
 8005e7a:	2380      	movs	r3, #128	; 0x80
 8005e7c:	005b      	lsls	r3, r3, #1
 8005e7e:	4013      	ands	r3, r2
 8005e80:	d00b      	beq.n	8005e9a <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	2201      	movs	r2, #1
 8005e88:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	2280      	movs	r2, #128	; 0x80
 8005e8e:	589b      	ldr	r3, [r3, r2]
 8005e90:	2201      	movs	r2, #1
 8005e92:	431a      	orrs	r2, r3
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	2180      	movs	r1, #128	; 0x80
 8005e98:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005e9a:	23a4      	movs	r3, #164	; 0xa4
 8005e9c:	18fb      	adds	r3, r7, r3
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	2202      	movs	r2, #2
 8005ea2:	4013      	ands	r3, r2
 8005ea4:	d011      	beq.n	8005eca <HAL_UART_IRQHandler+0xf6>
 8005ea6:	239c      	movs	r3, #156	; 0x9c
 8005ea8:	18fb      	adds	r3, r7, r3
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	2201      	movs	r2, #1
 8005eae:	4013      	ands	r3, r2
 8005eb0:	d00b      	beq.n	8005eca <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	2202      	movs	r2, #2
 8005eb8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	2280      	movs	r2, #128	; 0x80
 8005ebe:	589b      	ldr	r3, [r3, r2]
 8005ec0:	2204      	movs	r2, #4
 8005ec2:	431a      	orrs	r2, r3
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	2180      	movs	r1, #128	; 0x80
 8005ec8:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005eca:	23a4      	movs	r3, #164	; 0xa4
 8005ecc:	18fb      	adds	r3, r7, r3
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	2204      	movs	r2, #4
 8005ed2:	4013      	ands	r3, r2
 8005ed4:	d011      	beq.n	8005efa <HAL_UART_IRQHandler+0x126>
 8005ed6:	239c      	movs	r3, #156	; 0x9c
 8005ed8:	18fb      	adds	r3, r7, r3
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	2201      	movs	r2, #1
 8005ede:	4013      	ands	r3, r2
 8005ee0:	d00b      	beq.n	8005efa <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	2204      	movs	r2, #4
 8005ee8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	2280      	movs	r2, #128	; 0x80
 8005eee:	589b      	ldr	r3, [r3, r2]
 8005ef0:	2202      	movs	r2, #2
 8005ef2:	431a      	orrs	r2, r3
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	2180      	movs	r1, #128	; 0x80
 8005ef8:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005efa:	23a4      	movs	r3, #164	; 0xa4
 8005efc:	18fb      	adds	r3, r7, r3
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	2208      	movs	r2, #8
 8005f02:	4013      	ands	r3, r2
 8005f04:	d017      	beq.n	8005f36 <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005f06:	23a0      	movs	r3, #160	; 0xa0
 8005f08:	18fb      	adds	r3, r7, r3
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	2220      	movs	r2, #32
 8005f0e:	4013      	ands	r3, r2
 8005f10:	d105      	bne.n	8005f1e <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8005f12:	239c      	movs	r3, #156	; 0x9c
 8005f14:	18fb      	adds	r3, r7, r3
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	2201      	movs	r2, #1
 8005f1a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005f1c:	d00b      	beq.n	8005f36 <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	2208      	movs	r2, #8
 8005f24:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	2280      	movs	r2, #128	; 0x80
 8005f2a:	589b      	ldr	r3, [r3, r2]
 8005f2c:	2208      	movs	r2, #8
 8005f2e:	431a      	orrs	r2, r3
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	2180      	movs	r1, #128	; 0x80
 8005f34:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005f36:	23a4      	movs	r3, #164	; 0xa4
 8005f38:	18fb      	adds	r3, r7, r3
 8005f3a:	681a      	ldr	r2, [r3, #0]
 8005f3c:	2380      	movs	r3, #128	; 0x80
 8005f3e:	011b      	lsls	r3, r3, #4
 8005f40:	4013      	ands	r3, r2
 8005f42:	d013      	beq.n	8005f6c <HAL_UART_IRQHandler+0x198>
 8005f44:	23a0      	movs	r3, #160	; 0xa0
 8005f46:	18fb      	adds	r3, r7, r3
 8005f48:	681a      	ldr	r2, [r3, #0]
 8005f4a:	2380      	movs	r3, #128	; 0x80
 8005f4c:	04db      	lsls	r3, r3, #19
 8005f4e:	4013      	ands	r3, r2
 8005f50:	d00c      	beq.n	8005f6c <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	2280      	movs	r2, #128	; 0x80
 8005f58:	0112      	lsls	r2, r2, #4
 8005f5a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	2280      	movs	r2, #128	; 0x80
 8005f60:	589b      	ldr	r3, [r3, r2]
 8005f62:	2220      	movs	r2, #32
 8005f64:	431a      	orrs	r2, r3
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	2180      	movs	r1, #128	; 0x80
 8005f6a:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	2280      	movs	r2, #128	; 0x80
 8005f70:	589b      	ldr	r3, [r3, r2]
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d100      	bne.n	8005f78 <HAL_UART_IRQHandler+0x1a4>
 8005f76:	e1f7      	b.n	8006368 <HAL_UART_IRQHandler+0x594>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8005f78:	23a4      	movs	r3, #164	; 0xa4
 8005f7a:	18fb      	adds	r3, r7, r3
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	2220      	movs	r2, #32
 8005f80:	4013      	ands	r3, r2
 8005f82:	d00e      	beq.n	8005fa2 <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005f84:	23a0      	movs	r3, #160	; 0xa0
 8005f86:	18fb      	adds	r3, r7, r3
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	2220      	movs	r2, #32
 8005f8c:	4013      	ands	r3, r2
 8005f8e:	d008      	beq.n	8005fa2 <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d004      	beq.n	8005fa2 <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005f9c:	687a      	ldr	r2, [r7, #4]
 8005f9e:	0010      	movs	r0, r2
 8005fa0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	2280      	movs	r2, #128	; 0x80
 8005fa6:	589b      	ldr	r3, [r3, r2]
 8005fa8:	2194      	movs	r1, #148	; 0x94
 8005faa:	187a      	adds	r2, r7, r1
 8005fac:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	689b      	ldr	r3, [r3, #8]
 8005fb4:	2240      	movs	r2, #64	; 0x40
 8005fb6:	4013      	ands	r3, r2
 8005fb8:	2b40      	cmp	r3, #64	; 0x40
 8005fba:	d004      	beq.n	8005fc6 <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005fbc:	187b      	adds	r3, r7, r1
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	2228      	movs	r2, #40	; 0x28
 8005fc2:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005fc4:	d047      	beq.n	8006056 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	0018      	movs	r0, r3
 8005fca:	f000 fd3f 	bl	8006a4c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	689b      	ldr	r3, [r3, #8]
 8005fd4:	2240      	movs	r2, #64	; 0x40
 8005fd6:	4013      	ands	r3, r2
 8005fd8:	2b40      	cmp	r3, #64	; 0x40
 8005fda:	d137      	bne.n	800604c <HAL_UART_IRQHandler+0x278>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005fdc:	f3ef 8310 	mrs	r3, PRIMASK
 8005fe0:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 8005fe2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005fe4:	2090      	movs	r0, #144	; 0x90
 8005fe6:	183a      	adds	r2, r7, r0
 8005fe8:	6013      	str	r3, [r2, #0]
 8005fea:	2301      	movs	r3, #1
 8005fec:	667b      	str	r3, [r7, #100]	; 0x64
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005fee:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005ff0:	f383 8810 	msr	PRIMASK, r3
}
 8005ff4:	46c0      	nop			; (mov r8, r8)
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	689a      	ldr	r2, [r3, #8]
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	2140      	movs	r1, #64	; 0x40
 8006002:	438a      	bics	r2, r1
 8006004:	609a      	str	r2, [r3, #8]
 8006006:	183b      	adds	r3, r7, r0
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800600c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800600e:	f383 8810 	msr	PRIMASK, r3
}
 8006012:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006018:	2b00      	cmp	r3, #0
 800601a:	d012      	beq.n	8006042 <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006020:	4a14      	ldr	r2, [pc, #80]	; (8006074 <HAL_UART_IRQHandler+0x2a0>)
 8006022:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006028:	0018      	movs	r0, r3
 800602a:	f7fc f953 	bl	80022d4 <HAL_DMA_Abort_IT>
 800602e:	1e03      	subs	r3, r0, #0
 8006030:	d01a      	beq.n	8006068 <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006036:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800603c:	0018      	movs	r0, r3
 800603e:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006040:	e012      	b.n	8006068 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	0018      	movs	r0, r3
 8006046:	f000 f9a5 	bl	8006394 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800604a:	e00d      	b.n	8006068 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	0018      	movs	r0, r3
 8006050:	f000 f9a0 	bl	8006394 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006054:	e008      	b.n	8006068 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	0018      	movs	r0, r3
 800605a:	f000 f99b 	bl	8006394 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	2280      	movs	r2, #128	; 0x80
 8006062:	2100      	movs	r1, #0
 8006064:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8006066:	e17f      	b.n	8006368 <HAL_UART_IRQHandler+0x594>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006068:	46c0      	nop			; (mov r8, r8)
    return;
 800606a:	e17d      	b.n	8006368 <HAL_UART_IRQHandler+0x594>
 800606c:	0000080f 	.word	0x0000080f
 8006070:	04000120 	.word	0x04000120
 8006074:	08006b11 	.word	0x08006b11

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800607c:	2b01      	cmp	r3, #1
 800607e:	d000      	beq.n	8006082 <HAL_UART_IRQHandler+0x2ae>
 8006080:	e131      	b.n	80062e6 <HAL_UART_IRQHandler+0x512>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8006082:	23a4      	movs	r3, #164	; 0xa4
 8006084:	18fb      	adds	r3, r7, r3
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	2210      	movs	r2, #16
 800608a:	4013      	ands	r3, r2
 800608c:	d100      	bne.n	8006090 <HAL_UART_IRQHandler+0x2bc>
 800608e:	e12a      	b.n	80062e6 <HAL_UART_IRQHandler+0x512>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006090:	23a0      	movs	r3, #160	; 0xa0
 8006092:	18fb      	adds	r3, r7, r3
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	2210      	movs	r2, #16
 8006098:	4013      	ands	r3, r2
 800609a:	d100      	bne.n	800609e <HAL_UART_IRQHandler+0x2ca>
 800609c:	e123      	b.n	80062e6 <HAL_UART_IRQHandler+0x512>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	2210      	movs	r2, #16
 80060a4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	689b      	ldr	r3, [r3, #8]
 80060ac:	2240      	movs	r2, #64	; 0x40
 80060ae:	4013      	ands	r3, r2
 80060b0:	2b40      	cmp	r3, #64	; 0x40
 80060b2:	d000      	beq.n	80060b6 <HAL_UART_IRQHandler+0x2e2>
 80060b4:	e09b      	b.n	80061ee <HAL_UART_IRQHandler+0x41a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	685a      	ldr	r2, [r3, #4]
 80060be:	217e      	movs	r1, #126	; 0x7e
 80060c0:	187b      	adds	r3, r7, r1
 80060c2:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 80060c4:	187b      	adds	r3, r7, r1
 80060c6:	881b      	ldrh	r3, [r3, #0]
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d100      	bne.n	80060ce <HAL_UART_IRQHandler+0x2fa>
 80060cc:	e14e      	b.n	800636c <HAL_UART_IRQHandler+0x598>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	2258      	movs	r2, #88	; 0x58
 80060d2:	5a9b      	ldrh	r3, [r3, r2]
 80060d4:	187a      	adds	r2, r7, r1
 80060d6:	8812      	ldrh	r2, [r2, #0]
 80060d8:	429a      	cmp	r2, r3
 80060da:	d300      	bcc.n	80060de <HAL_UART_IRQHandler+0x30a>
 80060dc:	e146      	b.n	800636c <HAL_UART_IRQHandler+0x598>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	187a      	adds	r2, r7, r1
 80060e2:	215a      	movs	r1, #90	; 0x5a
 80060e4:	8812      	ldrh	r2, [r2, #0]
 80060e6:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80060ec:	699b      	ldr	r3, [r3, #24]
 80060ee:	2b20      	cmp	r3, #32
 80060f0:	d06e      	beq.n	80061d0 <HAL_UART_IRQHandler+0x3fc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80060f2:	f3ef 8310 	mrs	r3, PRIMASK
 80060f6:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 80060f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80060fa:	67bb      	str	r3, [r7, #120]	; 0x78
 80060fc:	2301      	movs	r3, #1
 80060fe:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006100:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006102:	f383 8810 	msr	PRIMASK, r3
}
 8006106:	46c0      	nop			; (mov r8, r8)
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	681a      	ldr	r2, [r3, #0]
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	499a      	ldr	r1, [pc, #616]	; (800637c <HAL_UART_IRQHandler+0x5a8>)
 8006114:	400a      	ands	r2, r1
 8006116:	601a      	str	r2, [r3, #0]
 8006118:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800611a:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800611c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800611e:	f383 8810 	msr	PRIMASK, r3
}
 8006122:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006124:	f3ef 8310 	mrs	r3, PRIMASK
 8006128:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 800612a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800612c:	677b      	str	r3, [r7, #116]	; 0x74
 800612e:	2301      	movs	r3, #1
 8006130:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006132:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006134:	f383 8810 	msr	PRIMASK, r3
}
 8006138:	46c0      	nop			; (mov r8, r8)
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	689a      	ldr	r2, [r3, #8]
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	2101      	movs	r1, #1
 8006146:	438a      	bics	r2, r1
 8006148:	609a      	str	r2, [r3, #8]
 800614a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800614c:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800614e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006150:	f383 8810 	msr	PRIMASK, r3
}
 8006154:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006156:	f3ef 8310 	mrs	r3, PRIMASK
 800615a:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 800615c:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800615e:	673b      	str	r3, [r7, #112]	; 0x70
 8006160:	2301      	movs	r3, #1
 8006162:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006164:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006166:	f383 8810 	msr	PRIMASK, r3
}
 800616a:	46c0      	nop			; (mov r8, r8)
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	689a      	ldr	r2, [r3, #8]
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	2140      	movs	r1, #64	; 0x40
 8006178:	438a      	bics	r2, r1
 800617a:	609a      	str	r2, [r3, #8]
 800617c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800617e:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006180:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006182:	f383 8810 	msr	PRIMASK, r3
}
 8006186:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	2220      	movs	r2, #32
 800618c:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	2200      	movs	r2, #0
 8006192:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006194:	f3ef 8310 	mrs	r3, PRIMASK
 8006198:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 800619a:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800619c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800619e:	2301      	movs	r3, #1
 80061a0:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80061a2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80061a4:	f383 8810 	msr	PRIMASK, r3
}
 80061a8:	46c0      	nop			; (mov r8, r8)
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	681a      	ldr	r2, [r3, #0]
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	2110      	movs	r1, #16
 80061b6:	438a      	bics	r2, r1
 80061b8:	601a      	str	r2, [r3, #0]
 80061ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80061bc:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80061be:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80061c0:	f383 8810 	msr	PRIMASK, r3
}
 80061c4:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80061ca:	0018      	movs	r0, r3
 80061cc:	f7fc f84a 	bl	8002264 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	2258      	movs	r2, #88	; 0x58
 80061d4:	5a9a      	ldrh	r2, [r3, r2]
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	215a      	movs	r1, #90	; 0x5a
 80061da:	5a5b      	ldrh	r3, [r3, r1]
 80061dc:	b29b      	uxth	r3, r3
 80061de:	1ad3      	subs	r3, r2, r3
 80061e0:	b29a      	uxth	r2, r3
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	0011      	movs	r1, r2
 80061e6:	0018      	movs	r0, r3
 80061e8:	f000 f8dc 	bl	80063a4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80061ec:	e0be      	b.n	800636c <HAL_UART_IRQHandler+0x598>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	2258      	movs	r2, #88	; 0x58
 80061f2:	5a99      	ldrh	r1, [r3, r2]
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	225a      	movs	r2, #90	; 0x5a
 80061f8:	5a9b      	ldrh	r3, [r3, r2]
 80061fa:	b29a      	uxth	r2, r3
 80061fc:	208e      	movs	r0, #142	; 0x8e
 80061fe:	183b      	adds	r3, r7, r0
 8006200:	1a8a      	subs	r2, r1, r2
 8006202:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	225a      	movs	r2, #90	; 0x5a
 8006208:	5a9b      	ldrh	r3, [r3, r2]
 800620a:	b29b      	uxth	r3, r3
 800620c:	2b00      	cmp	r3, #0
 800620e:	d100      	bne.n	8006212 <HAL_UART_IRQHandler+0x43e>
 8006210:	e0ae      	b.n	8006370 <HAL_UART_IRQHandler+0x59c>
          && (nb_rx_data > 0U))
 8006212:	183b      	adds	r3, r7, r0
 8006214:	881b      	ldrh	r3, [r3, #0]
 8006216:	2b00      	cmp	r3, #0
 8006218:	d100      	bne.n	800621c <HAL_UART_IRQHandler+0x448>
 800621a:	e0a9      	b.n	8006370 <HAL_UART_IRQHandler+0x59c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800621c:	f3ef 8310 	mrs	r3, PRIMASK
 8006220:	60fb      	str	r3, [r7, #12]
  return(result);
 8006222:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006224:	2488      	movs	r4, #136	; 0x88
 8006226:	193a      	adds	r2, r7, r4
 8006228:	6013      	str	r3, [r2, #0]
 800622a:	2301      	movs	r3, #1
 800622c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800622e:	693b      	ldr	r3, [r7, #16]
 8006230:	f383 8810 	msr	PRIMASK, r3
}
 8006234:	46c0      	nop			; (mov r8, r8)
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	681a      	ldr	r2, [r3, #0]
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	494f      	ldr	r1, [pc, #316]	; (8006380 <HAL_UART_IRQHandler+0x5ac>)
 8006242:	400a      	ands	r2, r1
 8006244:	601a      	str	r2, [r3, #0]
 8006246:	193b      	adds	r3, r7, r4
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800624c:	697b      	ldr	r3, [r7, #20]
 800624e:	f383 8810 	msr	PRIMASK, r3
}
 8006252:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006254:	f3ef 8310 	mrs	r3, PRIMASK
 8006258:	61bb      	str	r3, [r7, #24]
  return(result);
 800625a:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800625c:	2484      	movs	r4, #132	; 0x84
 800625e:	193a      	adds	r2, r7, r4
 8006260:	6013      	str	r3, [r2, #0]
 8006262:	2301      	movs	r3, #1
 8006264:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006266:	69fb      	ldr	r3, [r7, #28]
 8006268:	f383 8810 	msr	PRIMASK, r3
}
 800626c:	46c0      	nop			; (mov r8, r8)
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	689a      	ldr	r2, [r3, #8]
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	2101      	movs	r1, #1
 800627a:	438a      	bics	r2, r1
 800627c:	609a      	str	r2, [r3, #8]
 800627e:	193b      	adds	r3, r7, r4
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006284:	6a3b      	ldr	r3, [r7, #32]
 8006286:	f383 8810 	msr	PRIMASK, r3
}
 800628a:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	2220      	movs	r2, #32
 8006290:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	2200      	movs	r2, #0
 8006296:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	2200      	movs	r2, #0
 800629c:	665a      	str	r2, [r3, #100]	; 0x64
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800629e:	f3ef 8310 	mrs	r3, PRIMASK
 80062a2:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80062a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80062a6:	2480      	movs	r4, #128	; 0x80
 80062a8:	193a      	adds	r2, r7, r4
 80062aa:	6013      	str	r3, [r2, #0]
 80062ac:	2301      	movs	r3, #1
 80062ae:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80062b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062b2:	f383 8810 	msr	PRIMASK, r3
}
 80062b6:	46c0      	nop			; (mov r8, r8)
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	681a      	ldr	r2, [r3, #0]
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	2110      	movs	r1, #16
 80062c4:	438a      	bics	r2, r1
 80062c6:	601a      	str	r2, [r3, #0]
 80062c8:	193b      	adds	r3, r7, r4
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80062ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062d0:	f383 8810 	msr	PRIMASK, r3
}
 80062d4:	46c0      	nop			; (mov r8, r8)
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80062d6:	183b      	adds	r3, r7, r0
 80062d8:	881a      	ldrh	r2, [r3, #0]
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	0011      	movs	r1, r2
 80062de:	0018      	movs	r0, r3
 80062e0:	f000 f860 	bl	80063a4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80062e4:	e044      	b.n	8006370 <HAL_UART_IRQHandler+0x59c>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80062e6:	23a4      	movs	r3, #164	; 0xa4
 80062e8:	18fb      	adds	r3, r7, r3
 80062ea:	681a      	ldr	r2, [r3, #0]
 80062ec:	2380      	movs	r3, #128	; 0x80
 80062ee:	035b      	lsls	r3, r3, #13
 80062f0:	4013      	ands	r3, r2
 80062f2:	d010      	beq.n	8006316 <HAL_UART_IRQHandler+0x542>
 80062f4:	239c      	movs	r3, #156	; 0x9c
 80062f6:	18fb      	adds	r3, r7, r3
 80062f8:	681a      	ldr	r2, [r3, #0]
 80062fa:	2380      	movs	r3, #128	; 0x80
 80062fc:	03db      	lsls	r3, r3, #15
 80062fe:	4013      	ands	r3, r2
 8006300:	d009      	beq.n	8006316 <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	2280      	movs	r2, #128	; 0x80
 8006308:	0352      	lsls	r2, r2, #13
 800630a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	0018      	movs	r0, r3
 8006310:	f000 fc40 	bl	8006b94 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006314:	e02f      	b.n	8006376 <HAL_UART_IRQHandler+0x5a2>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8006316:	23a4      	movs	r3, #164	; 0xa4
 8006318:	18fb      	adds	r3, r7, r3
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	2280      	movs	r2, #128	; 0x80
 800631e:	4013      	ands	r3, r2
 8006320:	d00f      	beq.n	8006342 <HAL_UART_IRQHandler+0x56e>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8006322:	23a0      	movs	r3, #160	; 0xa0
 8006324:	18fb      	adds	r3, r7, r3
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	2280      	movs	r2, #128	; 0x80
 800632a:	4013      	ands	r3, r2
 800632c:	d009      	beq.n	8006342 <HAL_UART_IRQHandler+0x56e>
  {
    if (huart->TxISR != NULL)
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006332:	2b00      	cmp	r3, #0
 8006334:	d01e      	beq.n	8006374 <HAL_UART_IRQHandler+0x5a0>
    {
      huart->TxISR(huart);
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800633a:	687a      	ldr	r2, [r7, #4]
 800633c:	0010      	movs	r0, r2
 800633e:	4798      	blx	r3
    }
    return;
 8006340:	e018      	b.n	8006374 <HAL_UART_IRQHandler+0x5a0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006342:	23a4      	movs	r3, #164	; 0xa4
 8006344:	18fb      	adds	r3, r7, r3
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	2240      	movs	r2, #64	; 0x40
 800634a:	4013      	ands	r3, r2
 800634c:	d013      	beq.n	8006376 <HAL_UART_IRQHandler+0x5a2>
 800634e:	23a0      	movs	r3, #160	; 0xa0
 8006350:	18fb      	adds	r3, r7, r3
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	2240      	movs	r2, #64	; 0x40
 8006356:	4013      	ands	r3, r2
 8006358:	d00d      	beq.n	8006376 <HAL_UART_IRQHandler+0x5a2>
  {
    UART_EndTransmit_IT(huart);
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	0018      	movs	r0, r3
 800635e:	f000 fbee 	bl	8006b3e <UART_EndTransmit_IT>
    return;
 8006362:	e008      	b.n	8006376 <HAL_UART_IRQHandler+0x5a2>
      return;
 8006364:	46c0      	nop			; (mov r8, r8)
 8006366:	e006      	b.n	8006376 <HAL_UART_IRQHandler+0x5a2>
    return;
 8006368:	46c0      	nop			; (mov r8, r8)
 800636a:	e004      	b.n	8006376 <HAL_UART_IRQHandler+0x5a2>
      return;
 800636c:	46c0      	nop			; (mov r8, r8)
 800636e:	e002      	b.n	8006376 <HAL_UART_IRQHandler+0x5a2>
      return;
 8006370:	46c0      	nop			; (mov r8, r8)
 8006372:	e000      	b.n	8006376 <HAL_UART_IRQHandler+0x5a2>
    return;
 8006374:	46c0      	nop			; (mov r8, r8)
  }

}
 8006376:	46bd      	mov	sp, r7
 8006378:	b02b      	add	sp, #172	; 0xac
 800637a:	bd90      	pop	{r4, r7, pc}
 800637c:	fffffeff 	.word	0xfffffeff
 8006380:	fffffedf 	.word	0xfffffedf

08006384 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006384:	b580      	push	{r7, lr}
 8006386:	b082      	sub	sp, #8
 8006388:	af00      	add	r7, sp, #0
 800638a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800638c:	46c0      	nop			; (mov r8, r8)
 800638e:	46bd      	mov	sp, r7
 8006390:	b002      	add	sp, #8
 8006392:	bd80      	pop	{r7, pc}

08006394 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006394:	b580      	push	{r7, lr}
 8006396:	b082      	sub	sp, #8
 8006398:	af00      	add	r7, sp, #0
 800639a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800639c:	46c0      	nop			; (mov r8, r8)
 800639e:	46bd      	mov	sp, r7
 80063a0:	b002      	add	sp, #8
 80063a2:	bd80      	pop	{r7, pc}

080063a4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80063a4:	b580      	push	{r7, lr}
 80063a6:	b082      	sub	sp, #8
 80063a8:	af00      	add	r7, sp, #0
 80063aa:	6078      	str	r0, [r7, #4]
 80063ac:	000a      	movs	r2, r1
 80063ae:	1cbb      	adds	r3, r7, #2
 80063b0:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80063b2:	46c0      	nop			; (mov r8, r8)
 80063b4:	46bd      	mov	sp, r7
 80063b6:	b002      	add	sp, #8
 80063b8:	bd80      	pop	{r7, pc}
	...

080063bc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80063bc:	b580      	push	{r7, lr}
 80063be:	b088      	sub	sp, #32
 80063c0:	af00      	add	r7, sp, #0
 80063c2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80063c4:	231e      	movs	r3, #30
 80063c6:	18fb      	adds	r3, r7, r3
 80063c8:	2200      	movs	r2, #0
 80063ca:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	689a      	ldr	r2, [r3, #8]
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	691b      	ldr	r3, [r3, #16]
 80063d4:	431a      	orrs	r2, r3
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	695b      	ldr	r3, [r3, #20]
 80063da:	431a      	orrs	r2, r3
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	69db      	ldr	r3, [r3, #28]
 80063e0:	4313      	orrs	r3, r2
 80063e2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	4aaf      	ldr	r2, [pc, #700]	; (80066a8 <UART_SetConfig+0x2ec>)
 80063ec:	4013      	ands	r3, r2
 80063ee:	0019      	movs	r1, r3
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	697a      	ldr	r2, [r7, #20]
 80063f6:	430a      	orrs	r2, r1
 80063f8:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	685b      	ldr	r3, [r3, #4]
 8006400:	4aaa      	ldr	r2, [pc, #680]	; (80066ac <UART_SetConfig+0x2f0>)
 8006402:	4013      	ands	r3, r2
 8006404:	0019      	movs	r1, r3
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	68da      	ldr	r2, [r3, #12]
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	430a      	orrs	r2, r1
 8006410:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	699b      	ldr	r3, [r3, #24]
 8006416:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	6a1b      	ldr	r3, [r3, #32]
 800641c:	697a      	ldr	r2, [r7, #20]
 800641e:	4313      	orrs	r3, r2
 8006420:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	689b      	ldr	r3, [r3, #8]
 8006428:	4aa1      	ldr	r2, [pc, #644]	; (80066b0 <UART_SetConfig+0x2f4>)
 800642a:	4013      	ands	r3, r2
 800642c:	0019      	movs	r1, r3
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	697a      	ldr	r2, [r7, #20]
 8006434:	430a      	orrs	r2, r1
 8006436:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	4a9d      	ldr	r2, [pc, #628]	; (80066b4 <UART_SetConfig+0x2f8>)
 800643e:	4293      	cmp	r3, r2
 8006440:	d127      	bne.n	8006492 <UART_SetConfig+0xd6>
 8006442:	4b9d      	ldr	r3, [pc, #628]	; (80066b8 <UART_SetConfig+0x2fc>)
 8006444:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006446:	2203      	movs	r2, #3
 8006448:	4013      	ands	r3, r2
 800644a:	2b03      	cmp	r3, #3
 800644c:	d00d      	beq.n	800646a <UART_SetConfig+0xae>
 800644e:	d81b      	bhi.n	8006488 <UART_SetConfig+0xcc>
 8006450:	2b02      	cmp	r3, #2
 8006452:	d014      	beq.n	800647e <UART_SetConfig+0xc2>
 8006454:	d818      	bhi.n	8006488 <UART_SetConfig+0xcc>
 8006456:	2b00      	cmp	r3, #0
 8006458:	d002      	beq.n	8006460 <UART_SetConfig+0xa4>
 800645a:	2b01      	cmp	r3, #1
 800645c:	d00a      	beq.n	8006474 <UART_SetConfig+0xb8>
 800645e:	e013      	b.n	8006488 <UART_SetConfig+0xcc>
 8006460:	231f      	movs	r3, #31
 8006462:	18fb      	adds	r3, r7, r3
 8006464:	2200      	movs	r2, #0
 8006466:	701a      	strb	r2, [r3, #0]
 8006468:	e065      	b.n	8006536 <UART_SetConfig+0x17a>
 800646a:	231f      	movs	r3, #31
 800646c:	18fb      	adds	r3, r7, r3
 800646e:	2202      	movs	r2, #2
 8006470:	701a      	strb	r2, [r3, #0]
 8006472:	e060      	b.n	8006536 <UART_SetConfig+0x17a>
 8006474:	231f      	movs	r3, #31
 8006476:	18fb      	adds	r3, r7, r3
 8006478:	2204      	movs	r2, #4
 800647a:	701a      	strb	r2, [r3, #0]
 800647c:	e05b      	b.n	8006536 <UART_SetConfig+0x17a>
 800647e:	231f      	movs	r3, #31
 8006480:	18fb      	adds	r3, r7, r3
 8006482:	2208      	movs	r2, #8
 8006484:	701a      	strb	r2, [r3, #0]
 8006486:	e056      	b.n	8006536 <UART_SetConfig+0x17a>
 8006488:	231f      	movs	r3, #31
 800648a:	18fb      	adds	r3, r7, r3
 800648c:	2210      	movs	r2, #16
 800648e:	701a      	strb	r2, [r3, #0]
 8006490:	e051      	b.n	8006536 <UART_SetConfig+0x17a>
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	4a89      	ldr	r2, [pc, #548]	; (80066bc <UART_SetConfig+0x300>)
 8006498:	4293      	cmp	r3, r2
 800649a:	d134      	bne.n	8006506 <UART_SetConfig+0x14a>
 800649c:	4b86      	ldr	r3, [pc, #536]	; (80066b8 <UART_SetConfig+0x2fc>)
 800649e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80064a0:	23c0      	movs	r3, #192	; 0xc0
 80064a2:	029b      	lsls	r3, r3, #10
 80064a4:	4013      	ands	r3, r2
 80064a6:	22c0      	movs	r2, #192	; 0xc0
 80064a8:	0292      	lsls	r2, r2, #10
 80064aa:	4293      	cmp	r3, r2
 80064ac:	d017      	beq.n	80064de <UART_SetConfig+0x122>
 80064ae:	22c0      	movs	r2, #192	; 0xc0
 80064b0:	0292      	lsls	r2, r2, #10
 80064b2:	4293      	cmp	r3, r2
 80064b4:	d822      	bhi.n	80064fc <UART_SetConfig+0x140>
 80064b6:	2280      	movs	r2, #128	; 0x80
 80064b8:	0292      	lsls	r2, r2, #10
 80064ba:	4293      	cmp	r3, r2
 80064bc:	d019      	beq.n	80064f2 <UART_SetConfig+0x136>
 80064be:	2280      	movs	r2, #128	; 0x80
 80064c0:	0292      	lsls	r2, r2, #10
 80064c2:	4293      	cmp	r3, r2
 80064c4:	d81a      	bhi.n	80064fc <UART_SetConfig+0x140>
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d004      	beq.n	80064d4 <UART_SetConfig+0x118>
 80064ca:	2280      	movs	r2, #128	; 0x80
 80064cc:	0252      	lsls	r2, r2, #9
 80064ce:	4293      	cmp	r3, r2
 80064d0:	d00a      	beq.n	80064e8 <UART_SetConfig+0x12c>
 80064d2:	e013      	b.n	80064fc <UART_SetConfig+0x140>
 80064d4:	231f      	movs	r3, #31
 80064d6:	18fb      	adds	r3, r7, r3
 80064d8:	2200      	movs	r2, #0
 80064da:	701a      	strb	r2, [r3, #0]
 80064dc:	e02b      	b.n	8006536 <UART_SetConfig+0x17a>
 80064de:	231f      	movs	r3, #31
 80064e0:	18fb      	adds	r3, r7, r3
 80064e2:	2202      	movs	r2, #2
 80064e4:	701a      	strb	r2, [r3, #0]
 80064e6:	e026      	b.n	8006536 <UART_SetConfig+0x17a>
 80064e8:	231f      	movs	r3, #31
 80064ea:	18fb      	adds	r3, r7, r3
 80064ec:	2204      	movs	r2, #4
 80064ee:	701a      	strb	r2, [r3, #0]
 80064f0:	e021      	b.n	8006536 <UART_SetConfig+0x17a>
 80064f2:	231f      	movs	r3, #31
 80064f4:	18fb      	adds	r3, r7, r3
 80064f6:	2208      	movs	r2, #8
 80064f8:	701a      	strb	r2, [r3, #0]
 80064fa:	e01c      	b.n	8006536 <UART_SetConfig+0x17a>
 80064fc:	231f      	movs	r3, #31
 80064fe:	18fb      	adds	r3, r7, r3
 8006500:	2210      	movs	r2, #16
 8006502:	701a      	strb	r2, [r3, #0]
 8006504:	e017      	b.n	8006536 <UART_SetConfig+0x17a>
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	4a6d      	ldr	r2, [pc, #436]	; (80066c0 <UART_SetConfig+0x304>)
 800650c:	4293      	cmp	r3, r2
 800650e:	d104      	bne.n	800651a <UART_SetConfig+0x15e>
 8006510:	231f      	movs	r3, #31
 8006512:	18fb      	adds	r3, r7, r3
 8006514:	2200      	movs	r2, #0
 8006516:	701a      	strb	r2, [r3, #0]
 8006518:	e00d      	b.n	8006536 <UART_SetConfig+0x17a>
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	4a69      	ldr	r2, [pc, #420]	; (80066c4 <UART_SetConfig+0x308>)
 8006520:	4293      	cmp	r3, r2
 8006522:	d104      	bne.n	800652e <UART_SetConfig+0x172>
 8006524:	231f      	movs	r3, #31
 8006526:	18fb      	adds	r3, r7, r3
 8006528:	2200      	movs	r2, #0
 800652a:	701a      	strb	r2, [r3, #0]
 800652c:	e003      	b.n	8006536 <UART_SetConfig+0x17a>
 800652e:	231f      	movs	r3, #31
 8006530:	18fb      	adds	r3, r7, r3
 8006532:	2210      	movs	r2, #16
 8006534:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	69da      	ldr	r2, [r3, #28]
 800653a:	2380      	movs	r3, #128	; 0x80
 800653c:	021b      	lsls	r3, r3, #8
 800653e:	429a      	cmp	r2, r3
 8006540:	d15d      	bne.n	80065fe <UART_SetConfig+0x242>
  {
    switch (clocksource)
 8006542:	231f      	movs	r3, #31
 8006544:	18fb      	adds	r3, r7, r3
 8006546:	781b      	ldrb	r3, [r3, #0]
 8006548:	2b08      	cmp	r3, #8
 800654a:	d015      	beq.n	8006578 <UART_SetConfig+0x1bc>
 800654c:	dc18      	bgt.n	8006580 <UART_SetConfig+0x1c4>
 800654e:	2b04      	cmp	r3, #4
 8006550:	d00d      	beq.n	800656e <UART_SetConfig+0x1b2>
 8006552:	dc15      	bgt.n	8006580 <UART_SetConfig+0x1c4>
 8006554:	2b00      	cmp	r3, #0
 8006556:	d002      	beq.n	800655e <UART_SetConfig+0x1a2>
 8006558:	2b02      	cmp	r3, #2
 800655a:	d005      	beq.n	8006568 <UART_SetConfig+0x1ac>
 800655c:	e010      	b.n	8006580 <UART_SetConfig+0x1c4>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800655e:	f7fe fd05 	bl	8004f6c <HAL_RCC_GetPCLK1Freq>
 8006562:	0003      	movs	r3, r0
 8006564:	61bb      	str	r3, [r7, #24]
        break;
 8006566:	e012      	b.n	800658e <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006568:	4b57      	ldr	r3, [pc, #348]	; (80066c8 <UART_SetConfig+0x30c>)
 800656a:	61bb      	str	r3, [r7, #24]
        break;
 800656c:	e00f      	b.n	800658e <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800656e:	f7fe fc71 	bl	8004e54 <HAL_RCC_GetSysClockFreq>
 8006572:	0003      	movs	r3, r0
 8006574:	61bb      	str	r3, [r7, #24]
        break;
 8006576:	e00a      	b.n	800658e <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006578:	2380      	movs	r3, #128	; 0x80
 800657a:	021b      	lsls	r3, r3, #8
 800657c:	61bb      	str	r3, [r7, #24]
        break;
 800657e:	e006      	b.n	800658e <UART_SetConfig+0x1d2>
      default:
        pclk = 0U;
 8006580:	2300      	movs	r3, #0
 8006582:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006584:	231e      	movs	r3, #30
 8006586:	18fb      	adds	r3, r7, r3
 8006588:	2201      	movs	r2, #1
 800658a:	701a      	strb	r2, [r3, #0]
        break;
 800658c:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800658e:	69bb      	ldr	r3, [r7, #24]
 8006590:	2b00      	cmp	r3, #0
 8006592:	d100      	bne.n	8006596 <UART_SetConfig+0x1da>
 8006594:	e07b      	b.n	800668e <UART_SetConfig+0x2d2>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006596:	69bb      	ldr	r3, [r7, #24]
 8006598:	005a      	lsls	r2, r3, #1
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	685b      	ldr	r3, [r3, #4]
 800659e:	085b      	lsrs	r3, r3, #1
 80065a0:	18d2      	adds	r2, r2, r3
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	685b      	ldr	r3, [r3, #4]
 80065a6:	0019      	movs	r1, r3
 80065a8:	0010      	movs	r0, r2
 80065aa:	f7f9 fdbf 	bl	800012c <__udivsi3>
 80065ae:	0003      	movs	r3, r0
 80065b0:	b29b      	uxth	r3, r3
 80065b2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80065b4:	693b      	ldr	r3, [r7, #16]
 80065b6:	2b0f      	cmp	r3, #15
 80065b8:	d91c      	bls.n	80065f4 <UART_SetConfig+0x238>
 80065ba:	693a      	ldr	r2, [r7, #16]
 80065bc:	2380      	movs	r3, #128	; 0x80
 80065be:	025b      	lsls	r3, r3, #9
 80065c0:	429a      	cmp	r2, r3
 80065c2:	d217      	bcs.n	80065f4 <UART_SetConfig+0x238>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80065c4:	693b      	ldr	r3, [r7, #16]
 80065c6:	b29a      	uxth	r2, r3
 80065c8:	200e      	movs	r0, #14
 80065ca:	183b      	adds	r3, r7, r0
 80065cc:	210f      	movs	r1, #15
 80065ce:	438a      	bics	r2, r1
 80065d0:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80065d2:	693b      	ldr	r3, [r7, #16]
 80065d4:	085b      	lsrs	r3, r3, #1
 80065d6:	b29b      	uxth	r3, r3
 80065d8:	2207      	movs	r2, #7
 80065da:	4013      	ands	r3, r2
 80065dc:	b299      	uxth	r1, r3
 80065de:	183b      	adds	r3, r7, r0
 80065e0:	183a      	adds	r2, r7, r0
 80065e2:	8812      	ldrh	r2, [r2, #0]
 80065e4:	430a      	orrs	r2, r1
 80065e6:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	183a      	adds	r2, r7, r0
 80065ee:	8812      	ldrh	r2, [r2, #0]
 80065f0:	60da      	str	r2, [r3, #12]
 80065f2:	e04c      	b.n	800668e <UART_SetConfig+0x2d2>
      }
      else
      {
        ret = HAL_ERROR;
 80065f4:	231e      	movs	r3, #30
 80065f6:	18fb      	adds	r3, r7, r3
 80065f8:	2201      	movs	r2, #1
 80065fa:	701a      	strb	r2, [r3, #0]
 80065fc:	e047      	b.n	800668e <UART_SetConfig+0x2d2>
      }
    }
  }
  else
  {
    switch (clocksource)
 80065fe:	231f      	movs	r3, #31
 8006600:	18fb      	adds	r3, r7, r3
 8006602:	781b      	ldrb	r3, [r3, #0]
 8006604:	2b08      	cmp	r3, #8
 8006606:	d015      	beq.n	8006634 <UART_SetConfig+0x278>
 8006608:	dc18      	bgt.n	800663c <UART_SetConfig+0x280>
 800660a:	2b04      	cmp	r3, #4
 800660c:	d00d      	beq.n	800662a <UART_SetConfig+0x26e>
 800660e:	dc15      	bgt.n	800663c <UART_SetConfig+0x280>
 8006610:	2b00      	cmp	r3, #0
 8006612:	d002      	beq.n	800661a <UART_SetConfig+0x25e>
 8006614:	2b02      	cmp	r3, #2
 8006616:	d005      	beq.n	8006624 <UART_SetConfig+0x268>
 8006618:	e010      	b.n	800663c <UART_SetConfig+0x280>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800661a:	f7fe fca7 	bl	8004f6c <HAL_RCC_GetPCLK1Freq>
 800661e:	0003      	movs	r3, r0
 8006620:	61bb      	str	r3, [r7, #24]
        break;
 8006622:	e012      	b.n	800664a <UART_SetConfig+0x28e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006624:	4b28      	ldr	r3, [pc, #160]	; (80066c8 <UART_SetConfig+0x30c>)
 8006626:	61bb      	str	r3, [r7, #24]
        break;
 8006628:	e00f      	b.n	800664a <UART_SetConfig+0x28e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800662a:	f7fe fc13 	bl	8004e54 <HAL_RCC_GetSysClockFreq>
 800662e:	0003      	movs	r3, r0
 8006630:	61bb      	str	r3, [r7, #24]
        break;
 8006632:	e00a      	b.n	800664a <UART_SetConfig+0x28e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006634:	2380      	movs	r3, #128	; 0x80
 8006636:	021b      	lsls	r3, r3, #8
 8006638:	61bb      	str	r3, [r7, #24]
        break;
 800663a:	e006      	b.n	800664a <UART_SetConfig+0x28e>
      default:
        pclk = 0U;
 800663c:	2300      	movs	r3, #0
 800663e:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006640:	231e      	movs	r3, #30
 8006642:	18fb      	adds	r3, r7, r3
 8006644:	2201      	movs	r2, #1
 8006646:	701a      	strb	r2, [r3, #0]
        break;
 8006648:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 800664a:	69bb      	ldr	r3, [r7, #24]
 800664c:	2b00      	cmp	r3, #0
 800664e:	d01e      	beq.n	800668e <UART_SetConfig+0x2d2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	685b      	ldr	r3, [r3, #4]
 8006654:	085a      	lsrs	r2, r3, #1
 8006656:	69bb      	ldr	r3, [r7, #24]
 8006658:	18d2      	adds	r2, r2, r3
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	685b      	ldr	r3, [r3, #4]
 800665e:	0019      	movs	r1, r3
 8006660:	0010      	movs	r0, r2
 8006662:	f7f9 fd63 	bl	800012c <__udivsi3>
 8006666:	0003      	movs	r3, r0
 8006668:	b29b      	uxth	r3, r3
 800666a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800666c:	693b      	ldr	r3, [r7, #16]
 800666e:	2b0f      	cmp	r3, #15
 8006670:	d909      	bls.n	8006686 <UART_SetConfig+0x2ca>
 8006672:	693a      	ldr	r2, [r7, #16]
 8006674:	2380      	movs	r3, #128	; 0x80
 8006676:	025b      	lsls	r3, r3, #9
 8006678:	429a      	cmp	r2, r3
 800667a:	d204      	bcs.n	8006686 <UART_SetConfig+0x2ca>
      {
        huart->Instance->BRR = usartdiv;
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	693a      	ldr	r2, [r7, #16]
 8006682:	60da      	str	r2, [r3, #12]
 8006684:	e003      	b.n	800668e <UART_SetConfig+0x2d2>
      }
      else
      {
        ret = HAL_ERROR;
 8006686:	231e      	movs	r3, #30
 8006688:	18fb      	adds	r3, r7, r3
 800668a:	2201      	movs	r2, #1
 800668c:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	2200      	movs	r2, #0
 8006692:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	2200      	movs	r2, #0
 8006698:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800669a:	231e      	movs	r3, #30
 800669c:	18fb      	adds	r3, r7, r3
 800669e:	781b      	ldrb	r3, [r3, #0]
}
 80066a0:	0018      	movs	r0, r3
 80066a2:	46bd      	mov	sp, r7
 80066a4:	b008      	add	sp, #32
 80066a6:	bd80      	pop	{r7, pc}
 80066a8:	efff69f3 	.word	0xefff69f3
 80066ac:	ffffcfff 	.word	0xffffcfff
 80066b0:	fffff4ff 	.word	0xfffff4ff
 80066b4:	40013800 	.word	0x40013800
 80066b8:	40021000 	.word	0x40021000
 80066bc:	40004400 	.word	0x40004400
 80066c0:	40004800 	.word	0x40004800
 80066c4:	40004c00 	.word	0x40004c00
 80066c8:	007a1200 	.word	0x007a1200

080066cc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80066cc:	b580      	push	{r7, lr}
 80066ce:	b082      	sub	sp, #8
 80066d0:	af00      	add	r7, sp, #0
 80066d2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066d8:	2201      	movs	r2, #1
 80066da:	4013      	ands	r3, r2
 80066dc:	d00b      	beq.n	80066f6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	685b      	ldr	r3, [r3, #4]
 80066e4:	4a4a      	ldr	r2, [pc, #296]	; (8006810 <UART_AdvFeatureConfig+0x144>)
 80066e6:	4013      	ands	r3, r2
 80066e8:	0019      	movs	r1, r3
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	430a      	orrs	r2, r1
 80066f4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066fa:	2202      	movs	r2, #2
 80066fc:	4013      	ands	r3, r2
 80066fe:	d00b      	beq.n	8006718 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	685b      	ldr	r3, [r3, #4]
 8006706:	4a43      	ldr	r2, [pc, #268]	; (8006814 <UART_AdvFeatureConfig+0x148>)
 8006708:	4013      	ands	r3, r2
 800670a:	0019      	movs	r1, r3
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	430a      	orrs	r2, r1
 8006716:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800671c:	2204      	movs	r2, #4
 800671e:	4013      	ands	r3, r2
 8006720:	d00b      	beq.n	800673a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	685b      	ldr	r3, [r3, #4]
 8006728:	4a3b      	ldr	r2, [pc, #236]	; (8006818 <UART_AdvFeatureConfig+0x14c>)
 800672a:	4013      	ands	r3, r2
 800672c:	0019      	movs	r1, r3
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	430a      	orrs	r2, r1
 8006738:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800673e:	2208      	movs	r2, #8
 8006740:	4013      	ands	r3, r2
 8006742:	d00b      	beq.n	800675c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	685b      	ldr	r3, [r3, #4]
 800674a:	4a34      	ldr	r2, [pc, #208]	; (800681c <UART_AdvFeatureConfig+0x150>)
 800674c:	4013      	ands	r3, r2
 800674e:	0019      	movs	r1, r3
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	430a      	orrs	r2, r1
 800675a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006760:	2210      	movs	r2, #16
 8006762:	4013      	ands	r3, r2
 8006764:	d00b      	beq.n	800677e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	689b      	ldr	r3, [r3, #8]
 800676c:	4a2c      	ldr	r2, [pc, #176]	; (8006820 <UART_AdvFeatureConfig+0x154>)
 800676e:	4013      	ands	r3, r2
 8006770:	0019      	movs	r1, r3
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	430a      	orrs	r2, r1
 800677c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006782:	2220      	movs	r2, #32
 8006784:	4013      	ands	r3, r2
 8006786:	d00b      	beq.n	80067a0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	689b      	ldr	r3, [r3, #8]
 800678e:	4a25      	ldr	r2, [pc, #148]	; (8006824 <UART_AdvFeatureConfig+0x158>)
 8006790:	4013      	ands	r3, r2
 8006792:	0019      	movs	r1, r3
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	430a      	orrs	r2, r1
 800679e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067a4:	2240      	movs	r2, #64	; 0x40
 80067a6:	4013      	ands	r3, r2
 80067a8:	d01d      	beq.n	80067e6 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	685b      	ldr	r3, [r3, #4]
 80067b0:	4a1d      	ldr	r2, [pc, #116]	; (8006828 <UART_AdvFeatureConfig+0x15c>)
 80067b2:	4013      	ands	r3, r2
 80067b4:	0019      	movs	r1, r3
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	430a      	orrs	r2, r1
 80067c0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80067c6:	2380      	movs	r3, #128	; 0x80
 80067c8:	035b      	lsls	r3, r3, #13
 80067ca:	429a      	cmp	r2, r3
 80067cc:	d10b      	bne.n	80067e6 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	685b      	ldr	r3, [r3, #4]
 80067d4:	4a15      	ldr	r2, [pc, #84]	; (800682c <UART_AdvFeatureConfig+0x160>)
 80067d6:	4013      	ands	r3, r2
 80067d8:	0019      	movs	r1, r3
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	430a      	orrs	r2, r1
 80067e4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067ea:	2280      	movs	r2, #128	; 0x80
 80067ec:	4013      	ands	r3, r2
 80067ee:	d00b      	beq.n	8006808 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	685b      	ldr	r3, [r3, #4]
 80067f6:	4a0e      	ldr	r2, [pc, #56]	; (8006830 <UART_AdvFeatureConfig+0x164>)
 80067f8:	4013      	ands	r3, r2
 80067fa:	0019      	movs	r1, r3
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	430a      	orrs	r2, r1
 8006806:	605a      	str	r2, [r3, #4]
  }
}
 8006808:	46c0      	nop			; (mov r8, r8)
 800680a:	46bd      	mov	sp, r7
 800680c:	b002      	add	sp, #8
 800680e:	bd80      	pop	{r7, pc}
 8006810:	fffdffff 	.word	0xfffdffff
 8006814:	fffeffff 	.word	0xfffeffff
 8006818:	fffbffff 	.word	0xfffbffff
 800681c:	ffff7fff 	.word	0xffff7fff
 8006820:	ffffefff 	.word	0xffffefff
 8006824:	ffffdfff 	.word	0xffffdfff
 8006828:	ffefffff 	.word	0xffefffff
 800682c:	ff9fffff 	.word	0xff9fffff
 8006830:	fff7ffff 	.word	0xfff7ffff

08006834 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006834:	b580      	push	{r7, lr}
 8006836:	b086      	sub	sp, #24
 8006838:	af02      	add	r7, sp, #8
 800683a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	2280      	movs	r2, #128	; 0x80
 8006840:	2100      	movs	r1, #0
 8006842:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006844:	f7fb f990 	bl	8001b68 <HAL_GetTick>
 8006848:	0003      	movs	r3, r0
 800684a:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	2208      	movs	r2, #8
 8006854:	4013      	ands	r3, r2
 8006856:	2b08      	cmp	r3, #8
 8006858:	d10c      	bne.n	8006874 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	2280      	movs	r2, #128	; 0x80
 800685e:	0391      	lsls	r1, r2, #14
 8006860:	6878      	ldr	r0, [r7, #4]
 8006862:	4a17      	ldr	r2, [pc, #92]	; (80068c0 <UART_CheckIdleState+0x8c>)
 8006864:	9200      	str	r2, [sp, #0]
 8006866:	2200      	movs	r2, #0
 8006868:	f000 f82c 	bl	80068c4 <UART_WaitOnFlagUntilTimeout>
 800686c:	1e03      	subs	r3, r0, #0
 800686e:	d001      	beq.n	8006874 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006870:	2303      	movs	r3, #3
 8006872:	e021      	b.n	80068b8 <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	2204      	movs	r2, #4
 800687c:	4013      	ands	r3, r2
 800687e:	2b04      	cmp	r3, #4
 8006880:	d10c      	bne.n	800689c <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	2280      	movs	r2, #128	; 0x80
 8006886:	03d1      	lsls	r1, r2, #15
 8006888:	6878      	ldr	r0, [r7, #4]
 800688a:	4a0d      	ldr	r2, [pc, #52]	; (80068c0 <UART_CheckIdleState+0x8c>)
 800688c:	9200      	str	r2, [sp, #0]
 800688e:	2200      	movs	r2, #0
 8006890:	f000 f818 	bl	80068c4 <UART_WaitOnFlagUntilTimeout>
 8006894:	1e03      	subs	r3, r0, #0
 8006896:	d001      	beq.n	800689c <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006898:	2303      	movs	r3, #3
 800689a:	e00d      	b.n	80068b8 <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	2220      	movs	r2, #32
 80068a0:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	2220      	movs	r2, #32
 80068a6:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	2200      	movs	r2, #0
 80068ac:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	2274      	movs	r2, #116	; 0x74
 80068b2:	2100      	movs	r1, #0
 80068b4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80068b6:	2300      	movs	r3, #0
}
 80068b8:	0018      	movs	r0, r3
 80068ba:	46bd      	mov	sp, r7
 80068bc:	b004      	add	sp, #16
 80068be:	bd80      	pop	{r7, pc}
 80068c0:	01ffffff 	.word	0x01ffffff

080068c4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80068c4:	b580      	push	{r7, lr}
 80068c6:	b094      	sub	sp, #80	; 0x50
 80068c8:	af00      	add	r7, sp, #0
 80068ca:	60f8      	str	r0, [r7, #12]
 80068cc:	60b9      	str	r1, [r7, #8]
 80068ce:	603b      	str	r3, [r7, #0]
 80068d0:	1dfb      	adds	r3, r7, #7
 80068d2:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80068d4:	e0a3      	b.n	8006a1e <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80068d6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80068d8:	3301      	adds	r3, #1
 80068da:	d100      	bne.n	80068de <UART_WaitOnFlagUntilTimeout+0x1a>
 80068dc:	e09f      	b.n	8006a1e <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80068de:	f7fb f943 	bl	8001b68 <HAL_GetTick>
 80068e2:	0002      	movs	r2, r0
 80068e4:	683b      	ldr	r3, [r7, #0]
 80068e6:	1ad3      	subs	r3, r2, r3
 80068e8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80068ea:	429a      	cmp	r2, r3
 80068ec:	d302      	bcc.n	80068f4 <UART_WaitOnFlagUntilTimeout+0x30>
 80068ee:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d13d      	bne.n	8006970 <UART_WaitOnFlagUntilTimeout+0xac>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80068f4:	f3ef 8310 	mrs	r3, PRIMASK
 80068f8:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 80068fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80068fc:	647b      	str	r3, [r7, #68]	; 0x44
 80068fe:	2301      	movs	r3, #1
 8006900:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006902:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006904:	f383 8810 	msr	PRIMASK, r3
}
 8006908:	46c0      	nop			; (mov r8, r8)
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	681a      	ldr	r2, [r3, #0]
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	494c      	ldr	r1, [pc, #304]	; (8006a48 <UART_WaitOnFlagUntilTimeout+0x184>)
 8006916:	400a      	ands	r2, r1
 8006918:	601a      	str	r2, [r3, #0]
 800691a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800691c:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800691e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006920:	f383 8810 	msr	PRIMASK, r3
}
 8006924:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006926:	f3ef 8310 	mrs	r3, PRIMASK
 800692a:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 800692c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800692e:	643b      	str	r3, [r7, #64]	; 0x40
 8006930:	2301      	movs	r3, #1
 8006932:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006934:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006936:	f383 8810 	msr	PRIMASK, r3
}
 800693a:	46c0      	nop			; (mov r8, r8)
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	689a      	ldr	r2, [r3, #8]
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	2101      	movs	r1, #1
 8006948:	438a      	bics	r2, r1
 800694a:	609a      	str	r2, [r3, #8]
 800694c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800694e:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006950:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006952:	f383 8810 	msr	PRIMASK, r3
}
 8006956:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	2220      	movs	r2, #32
 800695c:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	2220      	movs	r2, #32
 8006962:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	2274      	movs	r2, #116	; 0x74
 8006968:	2100      	movs	r1, #0
 800696a:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800696c:	2303      	movs	r3, #3
 800696e:	e067      	b.n	8006a40 <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	2204      	movs	r2, #4
 8006978:	4013      	ands	r3, r2
 800697a:	d050      	beq.n	8006a1e <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	69da      	ldr	r2, [r3, #28]
 8006982:	2380      	movs	r3, #128	; 0x80
 8006984:	011b      	lsls	r3, r3, #4
 8006986:	401a      	ands	r2, r3
 8006988:	2380      	movs	r3, #128	; 0x80
 800698a:	011b      	lsls	r3, r3, #4
 800698c:	429a      	cmp	r2, r3
 800698e:	d146      	bne.n	8006a1e <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	2280      	movs	r2, #128	; 0x80
 8006996:	0112      	lsls	r2, r2, #4
 8006998:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800699a:	f3ef 8310 	mrs	r3, PRIMASK
 800699e:	613b      	str	r3, [r7, #16]
  return(result);
 80069a0:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80069a2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80069a4:	2301      	movs	r3, #1
 80069a6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80069a8:	697b      	ldr	r3, [r7, #20]
 80069aa:	f383 8810 	msr	PRIMASK, r3
}
 80069ae:	46c0      	nop			; (mov r8, r8)
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	681a      	ldr	r2, [r3, #0]
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	4923      	ldr	r1, [pc, #140]	; (8006a48 <UART_WaitOnFlagUntilTimeout+0x184>)
 80069bc:	400a      	ands	r2, r1
 80069be:	601a      	str	r2, [r3, #0]
 80069c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80069c2:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80069c4:	69bb      	ldr	r3, [r7, #24]
 80069c6:	f383 8810 	msr	PRIMASK, r3
}
 80069ca:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80069cc:	f3ef 8310 	mrs	r3, PRIMASK
 80069d0:	61fb      	str	r3, [r7, #28]
  return(result);
 80069d2:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80069d4:	64bb      	str	r3, [r7, #72]	; 0x48
 80069d6:	2301      	movs	r3, #1
 80069d8:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80069da:	6a3b      	ldr	r3, [r7, #32]
 80069dc:	f383 8810 	msr	PRIMASK, r3
}
 80069e0:	46c0      	nop			; (mov r8, r8)
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	689a      	ldr	r2, [r3, #8]
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	2101      	movs	r1, #1
 80069ee:	438a      	bics	r2, r1
 80069f0:	609a      	str	r2, [r3, #8]
 80069f2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80069f4:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80069f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069f8:	f383 8810 	msr	PRIMASK, r3
}
 80069fc:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	2220      	movs	r2, #32
 8006a02:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	2220      	movs	r2, #32
 8006a08:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	2280      	movs	r2, #128	; 0x80
 8006a0e:	2120      	movs	r1, #32
 8006a10:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	2274      	movs	r2, #116	; 0x74
 8006a16:	2100      	movs	r1, #0
 8006a18:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8006a1a:	2303      	movs	r3, #3
 8006a1c:	e010      	b.n	8006a40 <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	69db      	ldr	r3, [r3, #28]
 8006a24:	68ba      	ldr	r2, [r7, #8]
 8006a26:	4013      	ands	r3, r2
 8006a28:	68ba      	ldr	r2, [r7, #8]
 8006a2a:	1ad3      	subs	r3, r2, r3
 8006a2c:	425a      	negs	r2, r3
 8006a2e:	4153      	adcs	r3, r2
 8006a30:	b2db      	uxtb	r3, r3
 8006a32:	001a      	movs	r2, r3
 8006a34:	1dfb      	adds	r3, r7, #7
 8006a36:	781b      	ldrb	r3, [r3, #0]
 8006a38:	429a      	cmp	r2, r3
 8006a3a:	d100      	bne.n	8006a3e <UART_WaitOnFlagUntilTimeout+0x17a>
 8006a3c:	e74b      	b.n	80068d6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006a3e:	2300      	movs	r3, #0
}
 8006a40:	0018      	movs	r0, r3
 8006a42:	46bd      	mov	sp, r7
 8006a44:	b014      	add	sp, #80	; 0x50
 8006a46:	bd80      	pop	{r7, pc}
 8006a48:	fffffe5f 	.word	0xfffffe5f

08006a4c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006a4c:	b580      	push	{r7, lr}
 8006a4e:	b08e      	sub	sp, #56	; 0x38
 8006a50:	af00      	add	r7, sp, #0
 8006a52:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006a54:	f3ef 8310 	mrs	r3, PRIMASK
 8006a58:	617b      	str	r3, [r7, #20]
  return(result);
 8006a5a:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006a5c:	637b      	str	r3, [r7, #52]	; 0x34
 8006a5e:	2301      	movs	r3, #1
 8006a60:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006a62:	69bb      	ldr	r3, [r7, #24]
 8006a64:	f383 8810 	msr	PRIMASK, r3
}
 8006a68:	46c0      	nop			; (mov r8, r8)
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	681a      	ldr	r2, [r3, #0]
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	4925      	ldr	r1, [pc, #148]	; (8006b0c <UART_EndRxTransfer+0xc0>)
 8006a76:	400a      	ands	r2, r1
 8006a78:	601a      	str	r2, [r3, #0]
 8006a7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a7c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006a7e:	69fb      	ldr	r3, [r7, #28]
 8006a80:	f383 8810 	msr	PRIMASK, r3
}
 8006a84:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006a86:	f3ef 8310 	mrs	r3, PRIMASK
 8006a8a:	623b      	str	r3, [r7, #32]
  return(result);
 8006a8c:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a8e:	633b      	str	r3, [r7, #48]	; 0x30
 8006a90:	2301      	movs	r3, #1
 8006a92:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006a94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a96:	f383 8810 	msr	PRIMASK, r3
}
 8006a9a:	46c0      	nop			; (mov r8, r8)
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	689a      	ldr	r2, [r3, #8]
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	2101      	movs	r1, #1
 8006aa8:	438a      	bics	r2, r1
 8006aaa:	609a      	str	r2, [r3, #8]
 8006aac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006aae:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006ab0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ab2:	f383 8810 	msr	PRIMASK, r3
}
 8006ab6:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006abc:	2b01      	cmp	r3, #1
 8006abe:	d118      	bne.n	8006af2 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006ac0:	f3ef 8310 	mrs	r3, PRIMASK
 8006ac4:	60bb      	str	r3, [r7, #8]
  return(result);
 8006ac6:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006ac8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006aca:	2301      	movs	r3, #1
 8006acc:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	f383 8810 	msr	PRIMASK, r3
}
 8006ad4:	46c0      	nop			; (mov r8, r8)
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	681a      	ldr	r2, [r3, #0]
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	2110      	movs	r1, #16
 8006ae2:	438a      	bics	r2, r1
 8006ae4:	601a      	str	r2, [r3, #0]
 8006ae6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ae8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006aea:	693b      	ldr	r3, [r7, #16]
 8006aec:	f383 8810 	msr	PRIMASK, r3
}
 8006af0:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	2220      	movs	r2, #32
 8006af6:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	2200      	movs	r2, #0
 8006afc:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	2200      	movs	r2, #0
 8006b02:	665a      	str	r2, [r3, #100]	; 0x64
}
 8006b04:	46c0      	nop			; (mov r8, r8)
 8006b06:	46bd      	mov	sp, r7
 8006b08:	b00e      	add	sp, #56	; 0x38
 8006b0a:	bd80      	pop	{r7, pc}
 8006b0c:	fffffedf 	.word	0xfffffedf

08006b10 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006b10:	b580      	push	{r7, lr}
 8006b12:	b084      	sub	sp, #16
 8006b14:	af00      	add	r7, sp, #0
 8006b16:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b1c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	225a      	movs	r2, #90	; 0x5a
 8006b22:	2100      	movs	r1, #0
 8006b24:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	2252      	movs	r2, #82	; 0x52
 8006b2a:	2100      	movs	r1, #0
 8006b2c:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	0018      	movs	r0, r3
 8006b32:	f7ff fc2f 	bl	8006394 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006b36:	46c0      	nop			; (mov r8, r8)
 8006b38:	46bd      	mov	sp, r7
 8006b3a:	b004      	add	sp, #16
 8006b3c:	bd80      	pop	{r7, pc}

08006b3e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006b3e:	b580      	push	{r7, lr}
 8006b40:	b086      	sub	sp, #24
 8006b42:	af00      	add	r7, sp, #0
 8006b44:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006b46:	f3ef 8310 	mrs	r3, PRIMASK
 8006b4a:	60bb      	str	r3, [r7, #8]
  return(result);
 8006b4c:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006b4e:	617b      	str	r3, [r7, #20]
 8006b50:	2301      	movs	r3, #1
 8006b52:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	f383 8810 	msr	PRIMASK, r3
}
 8006b5a:	46c0      	nop			; (mov r8, r8)
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	681a      	ldr	r2, [r3, #0]
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	2140      	movs	r1, #64	; 0x40
 8006b68:	438a      	bics	r2, r1
 8006b6a:	601a      	str	r2, [r3, #0]
 8006b6c:	697b      	ldr	r3, [r7, #20]
 8006b6e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006b70:	693b      	ldr	r3, [r7, #16]
 8006b72:	f383 8810 	msr	PRIMASK, r3
}
 8006b76:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	2220      	movs	r2, #32
 8006b7c:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	2200      	movs	r2, #0
 8006b82:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	0018      	movs	r0, r3
 8006b88:	f7ff fbfc 	bl	8006384 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006b8c:	46c0      	nop			; (mov r8, r8)
 8006b8e:	46bd      	mov	sp, r7
 8006b90:	b006      	add	sp, #24
 8006b92:	bd80      	pop	{r7, pc}

08006b94 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006b94:	b580      	push	{r7, lr}
 8006b96:	b082      	sub	sp, #8
 8006b98:	af00      	add	r7, sp, #0
 8006b9a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006b9c:	46c0      	nop			; (mov r8, r8)
 8006b9e:	46bd      	mov	sp, r7
 8006ba0:	b002      	add	sp, #8
 8006ba2:	bd80      	pop	{r7, pc}

08006ba4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8006ba4:	b580      	push	{r7, lr}
 8006ba6:	b084      	sub	sp, #16
 8006ba8:	af00      	add	r7, sp, #0
 8006baa:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	2244      	movs	r2, #68	; 0x44
 8006bb0:	2100      	movs	r1, #0
 8006bb2:	5299      	strh	r1, [r3, r2]

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8006bb4:	4b05      	ldr	r3, [pc, #20]	; (8006bcc <USB_EnableGlobalInt+0x28>)
 8006bb6:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	b299      	uxth	r1, r3
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	2240      	movs	r2, #64	; 0x40
 8006bc0:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8006bc2:	2300      	movs	r3, #0
}
 8006bc4:	0018      	movs	r0, r3
 8006bc6:	46bd      	mov	sp, r7
 8006bc8:	b004      	add	sp, #16
 8006bca:	bd80      	pop	{r7, pc}
 8006bcc:	0000bf80 	.word	0x0000bf80

08006bd0 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8006bd0:	b580      	push	{r7, lr}
 8006bd2:	b084      	sub	sp, #16
 8006bd4:	af00      	add	r7, sp, #0
 8006bd6:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8006bd8:	4b09      	ldr	r3, [pc, #36]	; (8006c00 <USB_DisableGlobalInt+0x30>)
 8006bda:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	2240      	movs	r2, #64	; 0x40
 8006be0:	5a9b      	ldrh	r3, [r3, r2]
 8006be2:	b29b      	uxth	r3, r3
 8006be4:	68fa      	ldr	r2, [r7, #12]
 8006be6:	b292      	uxth	r2, r2
 8006be8:	43d2      	mvns	r2, r2
 8006bea:	b292      	uxth	r2, r2
 8006bec:	4013      	ands	r3, r2
 8006bee:	b299      	uxth	r1, r3
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	2240      	movs	r2, #64	; 0x40
 8006bf4:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8006bf6:	2300      	movs	r3, #0
}
 8006bf8:	0018      	movs	r0, r3
 8006bfa:	46bd      	mov	sp, r7
 8006bfc:	b004      	add	sp, #16
 8006bfe:	bd80      	pop	{r7, pc}
 8006c00:	0000bf80 	.word	0x0000bf80

08006c04 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8006c04:	b084      	sub	sp, #16
 8006c06:	b590      	push	{r4, r7, lr}
 8006c08:	46c6      	mov	lr, r8
 8006c0a:	b500      	push	{lr}
 8006c0c:	b082      	sub	sp, #8
 8006c0e:	af00      	add	r7, sp, #0
 8006c10:	6078      	str	r0, [r7, #4]
 8006c12:	2004      	movs	r0, #4
 8006c14:	2410      	movs	r4, #16
 8006c16:	46a4      	mov	ip, r4
 8006c18:	2408      	movs	r4, #8
 8006c1a:	46a0      	mov	r8, r4
 8006c1c:	44b8      	add	r8, r7
 8006c1e:	44c4      	add	ip, r8
 8006c20:	4460      	add	r0, ip
 8006c22:	6001      	str	r1, [r0, #0]
 8006c24:	6042      	str	r2, [r0, #4]
 8006c26:	6083      	str	r3, [r0, #8]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	2240      	movs	r2, #64	; 0x40
 8006c2c:	2101      	movs	r1, #1
 8006c2e:	5299      	strh	r1, [r3, r2]

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	2240      	movs	r2, #64	; 0x40
 8006c34:	2100      	movs	r1, #0
 8006c36:	5299      	strh	r1, [r3, r2]

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	2244      	movs	r2, #68	; 0x44
 8006c3c:	2100      	movs	r1, #0
 8006c3e:	5299      	strh	r1, [r3, r2]

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	2250      	movs	r2, #80	; 0x50
 8006c44:	2100      	movs	r1, #0
 8006c46:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8006c48:	2300      	movs	r3, #0
}
 8006c4a:	0018      	movs	r0, r3
 8006c4c:	46bd      	mov	sp, r7
 8006c4e:	b002      	add	sp, #8
 8006c50:	bc80      	pop	{r7}
 8006c52:	46b8      	mov	r8, r7
 8006c54:	bc90      	pop	{r4, r7}
 8006c56:	bc08      	pop	{r3}
 8006c58:	b004      	add	sp, #16
 8006c5a:	4718      	bx	r3

08006c5c <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006c5c:	b580      	push	{r7, lr}
 8006c5e:	b09c      	sub	sp, #112	; 0x70
 8006c60:	af00      	add	r7, sp, #0
 8006c62:	6078      	str	r0, [r7, #4]
 8006c64:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8006c66:	236f      	movs	r3, #111	; 0x6f
 8006c68:	18fb      	adds	r3, r7, r3
 8006c6a:	2200      	movs	r2, #0
 8006c6c:	701a      	strb	r2, [r3, #0]
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8006c6e:	687a      	ldr	r2, [r7, #4]
 8006c70:	683b      	ldr	r3, [r7, #0]
 8006c72:	781b      	ldrb	r3, [r3, #0]
 8006c74:	009b      	lsls	r3, r3, #2
 8006c76:	18d3      	adds	r3, r2, r3
 8006c78:	881b      	ldrh	r3, [r3, #0]
 8006c7a:	b29a      	uxth	r2, r3
 8006c7c:	236c      	movs	r3, #108	; 0x6c
 8006c7e:	18fb      	adds	r3, r7, r3
 8006c80:	49cf      	ldr	r1, [pc, #828]	; (8006fc0 <USB_ActivateEndpoint+0x364>)
 8006c82:	400a      	ands	r2, r1
 8006c84:	801a      	strh	r2, [r3, #0]

  /* initialize Endpoint */
  switch (ep->type)
 8006c86:	683b      	ldr	r3, [r7, #0]
 8006c88:	78db      	ldrb	r3, [r3, #3]
 8006c8a:	2b03      	cmp	r3, #3
 8006c8c:	d017      	beq.n	8006cbe <USB_ActivateEndpoint+0x62>
 8006c8e:	dc28      	bgt.n	8006ce2 <USB_ActivateEndpoint+0x86>
 8006c90:	2b02      	cmp	r3, #2
 8006c92:	d00e      	beq.n	8006cb2 <USB_ActivateEndpoint+0x56>
 8006c94:	dc25      	bgt.n	8006ce2 <USB_ActivateEndpoint+0x86>
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d002      	beq.n	8006ca0 <USB_ActivateEndpoint+0x44>
 8006c9a:	2b01      	cmp	r3, #1
 8006c9c:	d018      	beq.n	8006cd0 <USB_ActivateEndpoint+0x74>
 8006c9e:	e020      	b.n	8006ce2 <USB_ActivateEndpoint+0x86>
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8006ca0:	226c      	movs	r2, #108	; 0x6c
 8006ca2:	18bb      	adds	r3, r7, r2
 8006ca4:	18ba      	adds	r2, r7, r2
 8006ca6:	8812      	ldrh	r2, [r2, #0]
 8006ca8:	2180      	movs	r1, #128	; 0x80
 8006caa:	0089      	lsls	r1, r1, #2
 8006cac:	430a      	orrs	r2, r1
 8006cae:	801a      	strh	r2, [r3, #0]
      break;
 8006cb0:	e01c      	b.n	8006cec <USB_ActivateEndpoint+0x90>

    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
 8006cb2:	226c      	movs	r2, #108	; 0x6c
 8006cb4:	18bb      	adds	r3, r7, r2
 8006cb6:	18ba      	adds	r2, r7, r2
 8006cb8:	8812      	ldrh	r2, [r2, #0]
 8006cba:	801a      	strh	r2, [r3, #0]
      break;
 8006cbc:	e016      	b.n	8006cec <USB_ActivateEndpoint+0x90>

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8006cbe:	226c      	movs	r2, #108	; 0x6c
 8006cc0:	18bb      	adds	r3, r7, r2
 8006cc2:	18ba      	adds	r2, r7, r2
 8006cc4:	8812      	ldrh	r2, [r2, #0]
 8006cc6:	21c0      	movs	r1, #192	; 0xc0
 8006cc8:	00c9      	lsls	r1, r1, #3
 8006cca:	430a      	orrs	r2, r1
 8006ccc:	801a      	strh	r2, [r3, #0]
      break;
 8006cce:	e00d      	b.n	8006cec <USB_ActivateEndpoint+0x90>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8006cd0:	226c      	movs	r2, #108	; 0x6c
 8006cd2:	18bb      	adds	r3, r7, r2
 8006cd4:	18ba      	adds	r2, r7, r2
 8006cd6:	8812      	ldrh	r2, [r2, #0]
 8006cd8:	2180      	movs	r1, #128	; 0x80
 8006cda:	00c9      	lsls	r1, r1, #3
 8006cdc:	430a      	orrs	r2, r1
 8006cde:	801a      	strh	r2, [r3, #0]
      break;
 8006ce0:	e004      	b.n	8006cec <USB_ActivateEndpoint+0x90>

    default:
      ret = HAL_ERROR;
 8006ce2:	236f      	movs	r3, #111	; 0x6f
 8006ce4:	18fb      	adds	r3, r7, r3
 8006ce6:	2201      	movs	r2, #1
 8006ce8:	701a      	strb	r2, [r3, #0]
      break;
 8006cea:	46c0      	nop			; (mov r8, r8)
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8006cec:	687a      	ldr	r2, [r7, #4]
 8006cee:	683b      	ldr	r3, [r7, #0]
 8006cf0:	781b      	ldrb	r3, [r3, #0]
 8006cf2:	009b      	lsls	r3, r3, #2
 8006cf4:	18d3      	adds	r3, r2, r3
 8006cf6:	226c      	movs	r2, #108	; 0x6c
 8006cf8:	18ba      	adds	r2, r7, r2
 8006cfa:	8812      	ldrh	r2, [r2, #0]
 8006cfc:	49b1      	ldr	r1, [pc, #708]	; (8006fc4 <USB_ActivateEndpoint+0x368>)
 8006cfe:	430a      	orrs	r2, r1
 8006d00:	b292      	uxth	r2, r2
 8006d02:	801a      	strh	r2, [r3, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8006d04:	687a      	ldr	r2, [r7, #4]
 8006d06:	683b      	ldr	r3, [r7, #0]
 8006d08:	781b      	ldrb	r3, [r3, #0]
 8006d0a:	009b      	lsls	r3, r3, #2
 8006d0c:	18d3      	adds	r3, r2, r3
 8006d0e:	881b      	ldrh	r3, [r3, #0]
 8006d10:	b29b      	uxth	r3, r3
 8006d12:	b21b      	sxth	r3, r3
 8006d14:	4aac      	ldr	r2, [pc, #688]	; (8006fc8 <USB_ActivateEndpoint+0x36c>)
 8006d16:	4013      	ands	r3, r2
 8006d18:	b21a      	sxth	r2, r3
 8006d1a:	683b      	ldr	r3, [r7, #0]
 8006d1c:	781b      	ldrb	r3, [r3, #0]
 8006d1e:	b21b      	sxth	r3, r3
 8006d20:	4313      	orrs	r3, r2
 8006d22:	b21a      	sxth	r2, r3
 8006d24:	2166      	movs	r1, #102	; 0x66
 8006d26:	187b      	adds	r3, r7, r1
 8006d28:	801a      	strh	r2, [r3, #0]
 8006d2a:	687a      	ldr	r2, [r7, #4]
 8006d2c:	683b      	ldr	r3, [r7, #0]
 8006d2e:	781b      	ldrb	r3, [r3, #0]
 8006d30:	009b      	lsls	r3, r3, #2
 8006d32:	18d3      	adds	r3, r2, r3
 8006d34:	187a      	adds	r2, r7, r1
 8006d36:	8812      	ldrh	r2, [r2, #0]
 8006d38:	49a2      	ldr	r1, [pc, #648]	; (8006fc4 <USB_ActivateEndpoint+0x368>)
 8006d3a:	430a      	orrs	r2, r1
 8006d3c:	b292      	uxth	r2, r2
 8006d3e:	801a      	strh	r2, [r3, #0]

  if (ep->doublebuffer == 0U)
 8006d40:	683b      	ldr	r3, [r7, #0]
 8006d42:	7b1b      	ldrb	r3, [r3, #12]
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d000      	beq.n	8006d4a <USB_ActivateEndpoint+0xee>
 8006d48:	e150      	b.n	8006fec <USB_ActivateEndpoint+0x390>
  {
    if (ep->is_in != 0U)
 8006d4a:	683b      	ldr	r3, [r7, #0]
 8006d4c:	785b      	ldrb	r3, [r3, #1]
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d100      	bne.n	8006d54 <USB_ActivateEndpoint+0xf8>
 8006d52:	e07a      	b.n	8006e4a <USB_ActivateEndpoint+0x1ee>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	61bb      	str	r3, [r7, #24]
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	2250      	movs	r2, #80	; 0x50
 8006d5c:	5a9b      	ldrh	r3, [r3, r2]
 8006d5e:	b29b      	uxth	r3, r3
 8006d60:	001a      	movs	r2, r3
 8006d62:	69bb      	ldr	r3, [r7, #24]
 8006d64:	189b      	adds	r3, r3, r2
 8006d66:	61bb      	str	r3, [r7, #24]
 8006d68:	683b      	ldr	r3, [r7, #0]
 8006d6a:	781b      	ldrb	r3, [r3, #0]
 8006d6c:	00da      	lsls	r2, r3, #3
 8006d6e:	69bb      	ldr	r3, [r7, #24]
 8006d70:	18d3      	adds	r3, r2, r3
 8006d72:	2280      	movs	r2, #128	; 0x80
 8006d74:	00d2      	lsls	r2, r2, #3
 8006d76:	4694      	mov	ip, r2
 8006d78:	4463      	add	r3, ip
 8006d7a:	617b      	str	r3, [r7, #20]
 8006d7c:	683b      	ldr	r3, [r7, #0]
 8006d7e:	88db      	ldrh	r3, [r3, #6]
 8006d80:	085b      	lsrs	r3, r3, #1
 8006d82:	b29b      	uxth	r3, r3
 8006d84:	18db      	adds	r3, r3, r3
 8006d86:	b29a      	uxth	r2, r3
 8006d88:	697b      	ldr	r3, [r7, #20]
 8006d8a:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006d8c:	687a      	ldr	r2, [r7, #4]
 8006d8e:	683b      	ldr	r3, [r7, #0]
 8006d90:	781b      	ldrb	r3, [r3, #0]
 8006d92:	009b      	lsls	r3, r3, #2
 8006d94:	18d2      	adds	r2, r2, r3
 8006d96:	2112      	movs	r1, #18
 8006d98:	187b      	adds	r3, r7, r1
 8006d9a:	8812      	ldrh	r2, [r2, #0]
 8006d9c:	801a      	strh	r2, [r3, #0]
 8006d9e:	187b      	adds	r3, r7, r1
 8006da0:	881b      	ldrh	r3, [r3, #0]
 8006da2:	2240      	movs	r2, #64	; 0x40
 8006da4:	4013      	ands	r3, r2
 8006da6:	d016      	beq.n	8006dd6 <USB_ActivateEndpoint+0x17a>
 8006da8:	687a      	ldr	r2, [r7, #4]
 8006daa:	683b      	ldr	r3, [r7, #0]
 8006dac:	781b      	ldrb	r3, [r3, #0]
 8006dae:	009b      	lsls	r3, r3, #2
 8006db0:	18d3      	adds	r3, r2, r3
 8006db2:	881b      	ldrh	r3, [r3, #0]
 8006db4:	b29a      	uxth	r2, r3
 8006db6:	2010      	movs	r0, #16
 8006db8:	183b      	adds	r3, r7, r0
 8006dba:	4983      	ldr	r1, [pc, #524]	; (8006fc8 <USB_ActivateEndpoint+0x36c>)
 8006dbc:	400a      	ands	r2, r1
 8006dbe:	801a      	strh	r2, [r3, #0]
 8006dc0:	687a      	ldr	r2, [r7, #4]
 8006dc2:	683b      	ldr	r3, [r7, #0]
 8006dc4:	781b      	ldrb	r3, [r3, #0]
 8006dc6:	009b      	lsls	r3, r3, #2
 8006dc8:	18d3      	adds	r3, r2, r3
 8006dca:	183a      	adds	r2, r7, r0
 8006dcc:	8812      	ldrh	r2, [r2, #0]
 8006dce:	497f      	ldr	r1, [pc, #508]	; (8006fcc <USB_ActivateEndpoint+0x370>)
 8006dd0:	430a      	orrs	r2, r1
 8006dd2:	b292      	uxth	r2, r2
 8006dd4:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006dd6:	683b      	ldr	r3, [r7, #0]
 8006dd8:	78db      	ldrb	r3, [r3, #3]
 8006dda:	2b01      	cmp	r3, #1
 8006ddc:	d01d      	beq.n	8006e1a <USB_ActivateEndpoint+0x1be>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006dde:	687a      	ldr	r2, [r7, #4]
 8006de0:	683b      	ldr	r3, [r7, #0]
 8006de2:	781b      	ldrb	r3, [r3, #0]
 8006de4:	009b      	lsls	r3, r3, #2
 8006de6:	18d3      	adds	r3, r2, r3
 8006de8:	881b      	ldrh	r3, [r3, #0]
 8006dea:	b29a      	uxth	r2, r3
 8006dec:	200c      	movs	r0, #12
 8006dee:	183b      	adds	r3, r7, r0
 8006df0:	4977      	ldr	r1, [pc, #476]	; (8006fd0 <USB_ActivateEndpoint+0x374>)
 8006df2:	400a      	ands	r2, r1
 8006df4:	801a      	strh	r2, [r3, #0]
 8006df6:	183b      	adds	r3, r7, r0
 8006df8:	183a      	adds	r2, r7, r0
 8006dfa:	8812      	ldrh	r2, [r2, #0]
 8006dfc:	2120      	movs	r1, #32
 8006dfe:	404a      	eors	r2, r1
 8006e00:	801a      	strh	r2, [r3, #0]
 8006e02:	687a      	ldr	r2, [r7, #4]
 8006e04:	683b      	ldr	r3, [r7, #0]
 8006e06:	781b      	ldrb	r3, [r3, #0]
 8006e08:	009b      	lsls	r3, r3, #2
 8006e0a:	18d3      	adds	r3, r2, r3
 8006e0c:	183a      	adds	r2, r7, r0
 8006e0e:	8812      	ldrh	r2, [r2, #0]
 8006e10:	496c      	ldr	r1, [pc, #432]	; (8006fc4 <USB_ActivateEndpoint+0x368>)
 8006e12:	430a      	orrs	r2, r1
 8006e14:	b292      	uxth	r2, r2
 8006e16:	801a      	strh	r2, [r3, #0]
 8006e18:	e27a      	b.n	8007310 <USB_ActivateEndpoint+0x6b4>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006e1a:	687a      	ldr	r2, [r7, #4]
 8006e1c:	683b      	ldr	r3, [r7, #0]
 8006e1e:	781b      	ldrb	r3, [r3, #0]
 8006e20:	009b      	lsls	r3, r3, #2
 8006e22:	18d3      	adds	r3, r2, r3
 8006e24:	881b      	ldrh	r3, [r3, #0]
 8006e26:	b29a      	uxth	r2, r3
 8006e28:	200e      	movs	r0, #14
 8006e2a:	183b      	adds	r3, r7, r0
 8006e2c:	4968      	ldr	r1, [pc, #416]	; (8006fd0 <USB_ActivateEndpoint+0x374>)
 8006e2e:	400a      	ands	r2, r1
 8006e30:	801a      	strh	r2, [r3, #0]
 8006e32:	687a      	ldr	r2, [r7, #4]
 8006e34:	683b      	ldr	r3, [r7, #0]
 8006e36:	781b      	ldrb	r3, [r3, #0]
 8006e38:	009b      	lsls	r3, r3, #2
 8006e3a:	18d3      	adds	r3, r2, r3
 8006e3c:	183a      	adds	r2, r7, r0
 8006e3e:	8812      	ldrh	r2, [r2, #0]
 8006e40:	4960      	ldr	r1, [pc, #384]	; (8006fc4 <USB_ActivateEndpoint+0x368>)
 8006e42:	430a      	orrs	r2, r1
 8006e44:	b292      	uxth	r2, r2
 8006e46:	801a      	strh	r2, [r3, #0]
 8006e48:	e262      	b.n	8007310 <USB_ActivateEndpoint+0x6b4>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	633b      	str	r3, [r7, #48]	; 0x30
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	2250      	movs	r2, #80	; 0x50
 8006e52:	5a9b      	ldrh	r3, [r3, r2]
 8006e54:	b29b      	uxth	r3, r3
 8006e56:	001a      	movs	r2, r3
 8006e58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e5a:	189b      	adds	r3, r3, r2
 8006e5c:	633b      	str	r3, [r7, #48]	; 0x30
 8006e5e:	683b      	ldr	r3, [r7, #0]
 8006e60:	781b      	ldrb	r3, [r3, #0]
 8006e62:	00da      	lsls	r2, r3, #3
 8006e64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e66:	18d3      	adds	r3, r2, r3
 8006e68:	4a5a      	ldr	r2, [pc, #360]	; (8006fd4 <USB_ActivateEndpoint+0x378>)
 8006e6a:	4694      	mov	ip, r2
 8006e6c:	4463      	add	r3, ip
 8006e6e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006e70:	683b      	ldr	r3, [r7, #0]
 8006e72:	88db      	ldrh	r3, [r3, #6]
 8006e74:	085b      	lsrs	r3, r3, #1
 8006e76:	b29b      	uxth	r3, r3
 8006e78:	18db      	adds	r3, r3, r3
 8006e7a:	b29a      	uxth	r2, r3
 8006e7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e7e:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	62bb      	str	r3, [r7, #40]	; 0x28
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	2250      	movs	r2, #80	; 0x50
 8006e88:	5a9b      	ldrh	r3, [r3, r2]
 8006e8a:	b29b      	uxth	r3, r3
 8006e8c:	001a      	movs	r2, r3
 8006e8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e90:	189b      	adds	r3, r3, r2
 8006e92:	62bb      	str	r3, [r7, #40]	; 0x28
 8006e94:	683b      	ldr	r3, [r7, #0]
 8006e96:	781b      	ldrb	r3, [r3, #0]
 8006e98:	00da      	lsls	r2, r3, #3
 8006e9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e9c:	18d3      	adds	r3, r2, r3
 8006e9e:	4a4e      	ldr	r2, [pc, #312]	; (8006fd8 <USB_ActivateEndpoint+0x37c>)
 8006ea0:	4694      	mov	ip, r2
 8006ea2:	4463      	add	r3, ip
 8006ea4:	627b      	str	r3, [r7, #36]	; 0x24
 8006ea6:	683b      	ldr	r3, [r7, #0]
 8006ea8:	691b      	ldr	r3, [r3, #16]
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d110      	bne.n	8006ed0 <USB_ActivateEndpoint+0x274>
 8006eae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006eb0:	881b      	ldrh	r3, [r3, #0]
 8006eb2:	b29b      	uxth	r3, r3
 8006eb4:	4a49      	ldr	r2, [pc, #292]	; (8006fdc <USB_ActivateEndpoint+0x380>)
 8006eb6:	4013      	ands	r3, r2
 8006eb8:	b29a      	uxth	r2, r3
 8006eba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ebc:	801a      	strh	r2, [r3, #0]
 8006ebe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ec0:	881b      	ldrh	r3, [r3, #0]
 8006ec2:	b29b      	uxth	r3, r3
 8006ec4:	4a46      	ldr	r2, [pc, #280]	; (8006fe0 <USB_ActivateEndpoint+0x384>)
 8006ec6:	4313      	orrs	r3, r2
 8006ec8:	b29a      	uxth	r2, r3
 8006eca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ecc:	801a      	strh	r2, [r3, #0]
 8006ece:	e02b      	b.n	8006f28 <USB_ActivateEndpoint+0x2cc>
 8006ed0:	683b      	ldr	r3, [r7, #0]
 8006ed2:	691b      	ldr	r3, [r3, #16]
 8006ed4:	2b3e      	cmp	r3, #62	; 0x3e
 8006ed6:	d812      	bhi.n	8006efe <USB_ActivateEndpoint+0x2a2>
 8006ed8:	683b      	ldr	r3, [r7, #0]
 8006eda:	691b      	ldr	r3, [r3, #16]
 8006edc:	085b      	lsrs	r3, r3, #1
 8006ede:	66bb      	str	r3, [r7, #104]	; 0x68
 8006ee0:	683b      	ldr	r3, [r7, #0]
 8006ee2:	691b      	ldr	r3, [r3, #16]
 8006ee4:	2201      	movs	r2, #1
 8006ee6:	4013      	ands	r3, r2
 8006ee8:	d002      	beq.n	8006ef0 <USB_ActivateEndpoint+0x294>
 8006eea:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006eec:	3301      	adds	r3, #1
 8006eee:	66bb      	str	r3, [r7, #104]	; 0x68
 8006ef0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006ef2:	b29b      	uxth	r3, r3
 8006ef4:	029b      	lsls	r3, r3, #10
 8006ef6:	b29a      	uxth	r2, r3
 8006ef8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006efa:	801a      	strh	r2, [r3, #0]
 8006efc:	e014      	b.n	8006f28 <USB_ActivateEndpoint+0x2cc>
 8006efe:	683b      	ldr	r3, [r7, #0]
 8006f00:	691b      	ldr	r3, [r3, #16]
 8006f02:	095b      	lsrs	r3, r3, #5
 8006f04:	66bb      	str	r3, [r7, #104]	; 0x68
 8006f06:	683b      	ldr	r3, [r7, #0]
 8006f08:	691b      	ldr	r3, [r3, #16]
 8006f0a:	221f      	movs	r2, #31
 8006f0c:	4013      	ands	r3, r2
 8006f0e:	d102      	bne.n	8006f16 <USB_ActivateEndpoint+0x2ba>
 8006f10:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006f12:	3b01      	subs	r3, #1
 8006f14:	66bb      	str	r3, [r7, #104]	; 0x68
 8006f16:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006f18:	b29b      	uxth	r3, r3
 8006f1a:	029b      	lsls	r3, r3, #10
 8006f1c:	b29b      	uxth	r3, r3
 8006f1e:	4a30      	ldr	r2, [pc, #192]	; (8006fe0 <USB_ActivateEndpoint+0x384>)
 8006f20:	4313      	orrs	r3, r2
 8006f22:	b29a      	uxth	r2, r3
 8006f24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f26:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006f28:	687a      	ldr	r2, [r7, #4]
 8006f2a:	683b      	ldr	r3, [r7, #0]
 8006f2c:	781b      	ldrb	r3, [r3, #0]
 8006f2e:	009b      	lsls	r3, r3, #2
 8006f30:	18d2      	adds	r2, r2, r3
 8006f32:	2122      	movs	r1, #34	; 0x22
 8006f34:	187b      	adds	r3, r7, r1
 8006f36:	8812      	ldrh	r2, [r2, #0]
 8006f38:	801a      	strh	r2, [r3, #0]
 8006f3a:	187b      	adds	r3, r7, r1
 8006f3c:	881a      	ldrh	r2, [r3, #0]
 8006f3e:	2380      	movs	r3, #128	; 0x80
 8006f40:	01db      	lsls	r3, r3, #7
 8006f42:	4013      	ands	r3, r2
 8006f44:	d016      	beq.n	8006f74 <USB_ActivateEndpoint+0x318>
 8006f46:	687a      	ldr	r2, [r7, #4]
 8006f48:	683b      	ldr	r3, [r7, #0]
 8006f4a:	781b      	ldrb	r3, [r3, #0]
 8006f4c:	009b      	lsls	r3, r3, #2
 8006f4e:	18d3      	adds	r3, r2, r3
 8006f50:	881b      	ldrh	r3, [r3, #0]
 8006f52:	b29a      	uxth	r2, r3
 8006f54:	2020      	movs	r0, #32
 8006f56:	183b      	adds	r3, r7, r0
 8006f58:	491b      	ldr	r1, [pc, #108]	; (8006fc8 <USB_ActivateEndpoint+0x36c>)
 8006f5a:	400a      	ands	r2, r1
 8006f5c:	801a      	strh	r2, [r3, #0]
 8006f5e:	687a      	ldr	r2, [r7, #4]
 8006f60:	683b      	ldr	r3, [r7, #0]
 8006f62:	781b      	ldrb	r3, [r3, #0]
 8006f64:	009b      	lsls	r3, r3, #2
 8006f66:	18d3      	adds	r3, r2, r3
 8006f68:	183a      	adds	r2, r7, r0
 8006f6a:	8812      	ldrh	r2, [r2, #0]
 8006f6c:	491d      	ldr	r1, [pc, #116]	; (8006fe4 <USB_ActivateEndpoint+0x388>)
 8006f6e:	430a      	orrs	r2, r1
 8006f70:	b292      	uxth	r2, r2
 8006f72:	801a      	strh	r2, [r3, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006f74:	687a      	ldr	r2, [r7, #4]
 8006f76:	683b      	ldr	r3, [r7, #0]
 8006f78:	781b      	ldrb	r3, [r3, #0]
 8006f7a:	009b      	lsls	r3, r3, #2
 8006f7c:	18d3      	adds	r3, r2, r3
 8006f7e:	881b      	ldrh	r3, [r3, #0]
 8006f80:	b29a      	uxth	r2, r3
 8006f82:	201e      	movs	r0, #30
 8006f84:	183b      	adds	r3, r7, r0
 8006f86:	4918      	ldr	r1, [pc, #96]	; (8006fe8 <USB_ActivateEndpoint+0x38c>)
 8006f88:	400a      	ands	r2, r1
 8006f8a:	801a      	strh	r2, [r3, #0]
 8006f8c:	183b      	adds	r3, r7, r0
 8006f8e:	183a      	adds	r2, r7, r0
 8006f90:	8812      	ldrh	r2, [r2, #0]
 8006f92:	2180      	movs	r1, #128	; 0x80
 8006f94:	0149      	lsls	r1, r1, #5
 8006f96:	404a      	eors	r2, r1
 8006f98:	801a      	strh	r2, [r3, #0]
 8006f9a:	183b      	adds	r3, r7, r0
 8006f9c:	183a      	adds	r2, r7, r0
 8006f9e:	8812      	ldrh	r2, [r2, #0]
 8006fa0:	2180      	movs	r1, #128	; 0x80
 8006fa2:	0189      	lsls	r1, r1, #6
 8006fa4:	404a      	eors	r2, r1
 8006fa6:	801a      	strh	r2, [r3, #0]
 8006fa8:	687a      	ldr	r2, [r7, #4]
 8006faa:	683b      	ldr	r3, [r7, #0]
 8006fac:	781b      	ldrb	r3, [r3, #0]
 8006fae:	009b      	lsls	r3, r3, #2
 8006fb0:	18d3      	adds	r3, r2, r3
 8006fb2:	183a      	adds	r2, r7, r0
 8006fb4:	8812      	ldrh	r2, [r2, #0]
 8006fb6:	4903      	ldr	r1, [pc, #12]	; (8006fc4 <USB_ActivateEndpoint+0x368>)
 8006fb8:	430a      	orrs	r2, r1
 8006fba:	b292      	uxth	r2, r2
 8006fbc:	801a      	strh	r2, [r3, #0]
 8006fbe:	e1a7      	b.n	8007310 <USB_ActivateEndpoint+0x6b4>
 8006fc0:	ffff898f 	.word	0xffff898f
 8006fc4:	ffff8080 	.word	0xffff8080
 8006fc8:	ffff8f8f 	.word	0xffff8f8f
 8006fcc:	ffff80c0 	.word	0xffff80c0
 8006fd0:	ffff8fbf 	.word	0xffff8fbf
 8006fd4:	00000404 	.word	0x00000404
 8006fd8:	00000406 	.word	0x00000406
 8006fdc:	ffff83ff 	.word	0xffff83ff
 8006fe0:	ffff8000 	.word	0xffff8000
 8006fe4:	ffffc080 	.word	0xffffc080
 8006fe8:	ffffbf8f 	.word	0xffffbf8f
    }
  }
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8006fec:	683b      	ldr	r3, [r7, #0]
 8006fee:	78db      	ldrb	r3, [r3, #3]
 8006ff0:	2b02      	cmp	r3, #2
 8006ff2:	d117      	bne.n	8007024 <USB_ActivateEndpoint+0x3c8>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8006ff4:	687a      	ldr	r2, [r7, #4]
 8006ff6:	683b      	ldr	r3, [r7, #0]
 8006ff8:	781b      	ldrb	r3, [r3, #0]
 8006ffa:	009b      	lsls	r3, r3, #2
 8006ffc:	18d3      	adds	r3, r2, r3
 8006ffe:	881b      	ldrh	r3, [r3, #0]
 8007000:	b29a      	uxth	r2, r3
 8007002:	2062      	movs	r0, #98	; 0x62
 8007004:	183b      	adds	r3, r7, r0
 8007006:	49c6      	ldr	r1, [pc, #792]	; (8007320 <USB_ActivateEndpoint+0x6c4>)
 8007008:	400a      	ands	r2, r1
 800700a:	801a      	strh	r2, [r3, #0]
 800700c:	687a      	ldr	r2, [r7, #4]
 800700e:	683b      	ldr	r3, [r7, #0]
 8007010:	781b      	ldrb	r3, [r3, #0]
 8007012:	009b      	lsls	r3, r3, #2
 8007014:	18d3      	adds	r3, r2, r3
 8007016:	183a      	adds	r2, r7, r0
 8007018:	8812      	ldrh	r2, [r2, #0]
 800701a:	49c2      	ldr	r1, [pc, #776]	; (8007324 <USB_ActivateEndpoint+0x6c8>)
 800701c:	430a      	orrs	r2, r1
 800701e:	b292      	uxth	r2, r2
 8007020:	801a      	strh	r2, [r3, #0]
 8007022:	e016      	b.n	8007052 <USB_ActivateEndpoint+0x3f6>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8007024:	687a      	ldr	r2, [r7, #4]
 8007026:	683b      	ldr	r3, [r7, #0]
 8007028:	781b      	ldrb	r3, [r3, #0]
 800702a:	009b      	lsls	r3, r3, #2
 800702c:	18d3      	adds	r3, r2, r3
 800702e:	881b      	ldrh	r3, [r3, #0]
 8007030:	b29a      	uxth	r2, r3
 8007032:	2064      	movs	r0, #100	; 0x64
 8007034:	183b      	adds	r3, r7, r0
 8007036:	49bc      	ldr	r1, [pc, #752]	; (8007328 <USB_ActivateEndpoint+0x6cc>)
 8007038:	400a      	ands	r2, r1
 800703a:	801a      	strh	r2, [r3, #0]
 800703c:	687a      	ldr	r2, [r7, #4]
 800703e:	683b      	ldr	r3, [r7, #0]
 8007040:	781b      	ldrb	r3, [r3, #0]
 8007042:	009b      	lsls	r3, r3, #2
 8007044:	18d3      	adds	r3, r2, r3
 8007046:	183a      	adds	r2, r7, r0
 8007048:	8812      	ldrh	r2, [r2, #0]
 800704a:	49b8      	ldr	r1, [pc, #736]	; (800732c <USB_ActivateEndpoint+0x6d0>)
 800704c:	430a      	orrs	r2, r1
 800704e:	b292      	uxth	r2, r2
 8007050:	801a      	strh	r2, [r3, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	2250      	movs	r2, #80	; 0x50
 800705a:	5a9b      	ldrh	r3, [r3, r2]
 800705c:	b29b      	uxth	r3, r3
 800705e:	001a      	movs	r2, r3
 8007060:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007062:	189b      	adds	r3, r3, r2
 8007064:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007066:	683b      	ldr	r3, [r7, #0]
 8007068:	781b      	ldrb	r3, [r3, #0]
 800706a:	00da      	lsls	r2, r3, #3
 800706c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800706e:	18d3      	adds	r3, r2, r3
 8007070:	2280      	movs	r2, #128	; 0x80
 8007072:	00d2      	lsls	r2, r2, #3
 8007074:	4694      	mov	ip, r2
 8007076:	4463      	add	r3, ip
 8007078:	65bb      	str	r3, [r7, #88]	; 0x58
 800707a:	683b      	ldr	r3, [r7, #0]
 800707c:	891b      	ldrh	r3, [r3, #8]
 800707e:	085b      	lsrs	r3, r3, #1
 8007080:	b29b      	uxth	r3, r3
 8007082:	18db      	adds	r3, r3, r3
 8007084:	b29a      	uxth	r2, r3
 8007086:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007088:	801a      	strh	r2, [r3, #0]
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	657b      	str	r3, [r7, #84]	; 0x54
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	2250      	movs	r2, #80	; 0x50
 8007092:	5a9b      	ldrh	r3, [r3, r2]
 8007094:	b29b      	uxth	r3, r3
 8007096:	001a      	movs	r2, r3
 8007098:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800709a:	189b      	adds	r3, r3, r2
 800709c:	657b      	str	r3, [r7, #84]	; 0x54
 800709e:	683b      	ldr	r3, [r7, #0]
 80070a0:	781b      	ldrb	r3, [r3, #0]
 80070a2:	00da      	lsls	r2, r3, #3
 80070a4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80070a6:	18d3      	adds	r3, r2, r3
 80070a8:	4aa1      	ldr	r2, [pc, #644]	; (8007330 <USB_ActivateEndpoint+0x6d4>)
 80070aa:	4694      	mov	ip, r2
 80070ac:	4463      	add	r3, ip
 80070ae:	653b      	str	r3, [r7, #80]	; 0x50
 80070b0:	683b      	ldr	r3, [r7, #0]
 80070b2:	895b      	ldrh	r3, [r3, #10]
 80070b4:	085b      	lsrs	r3, r3, #1
 80070b6:	b29b      	uxth	r3, r3
 80070b8:	18db      	adds	r3, r3, r3
 80070ba:	b29a      	uxth	r2, r3
 80070bc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80070be:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 80070c0:	683b      	ldr	r3, [r7, #0]
 80070c2:	785b      	ldrb	r3, [r3, #1]
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	d000      	beq.n	80070ca <USB_ActivateEndpoint+0x46e>
 80070c8:	e087      	b.n	80071da <USB_ActivateEndpoint+0x57e>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80070ca:	687a      	ldr	r2, [r7, #4]
 80070cc:	683b      	ldr	r3, [r7, #0]
 80070ce:	781b      	ldrb	r3, [r3, #0]
 80070d0:	009b      	lsls	r3, r3, #2
 80070d2:	18d2      	adds	r2, r2, r3
 80070d4:	2140      	movs	r1, #64	; 0x40
 80070d6:	187b      	adds	r3, r7, r1
 80070d8:	8812      	ldrh	r2, [r2, #0]
 80070da:	801a      	strh	r2, [r3, #0]
 80070dc:	187b      	adds	r3, r7, r1
 80070de:	881a      	ldrh	r2, [r3, #0]
 80070e0:	2380      	movs	r3, #128	; 0x80
 80070e2:	01db      	lsls	r3, r3, #7
 80070e4:	4013      	ands	r3, r2
 80070e6:	d016      	beq.n	8007116 <USB_ActivateEndpoint+0x4ba>
 80070e8:	687a      	ldr	r2, [r7, #4]
 80070ea:	683b      	ldr	r3, [r7, #0]
 80070ec:	781b      	ldrb	r3, [r3, #0]
 80070ee:	009b      	lsls	r3, r3, #2
 80070f0:	18d3      	adds	r3, r2, r3
 80070f2:	881b      	ldrh	r3, [r3, #0]
 80070f4:	b29a      	uxth	r2, r3
 80070f6:	203e      	movs	r0, #62	; 0x3e
 80070f8:	183b      	adds	r3, r7, r0
 80070fa:	4989      	ldr	r1, [pc, #548]	; (8007320 <USB_ActivateEndpoint+0x6c4>)
 80070fc:	400a      	ands	r2, r1
 80070fe:	801a      	strh	r2, [r3, #0]
 8007100:	687a      	ldr	r2, [r7, #4]
 8007102:	683b      	ldr	r3, [r7, #0]
 8007104:	781b      	ldrb	r3, [r3, #0]
 8007106:	009b      	lsls	r3, r3, #2
 8007108:	18d3      	adds	r3, r2, r3
 800710a:	183a      	adds	r2, r7, r0
 800710c:	8812      	ldrh	r2, [r2, #0]
 800710e:	4989      	ldr	r1, [pc, #548]	; (8007334 <USB_ActivateEndpoint+0x6d8>)
 8007110:	430a      	orrs	r2, r1
 8007112:	b292      	uxth	r2, r2
 8007114:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007116:	687a      	ldr	r2, [r7, #4]
 8007118:	683b      	ldr	r3, [r7, #0]
 800711a:	781b      	ldrb	r3, [r3, #0]
 800711c:	009b      	lsls	r3, r3, #2
 800711e:	18d2      	adds	r2, r2, r3
 8007120:	213c      	movs	r1, #60	; 0x3c
 8007122:	187b      	adds	r3, r7, r1
 8007124:	8812      	ldrh	r2, [r2, #0]
 8007126:	801a      	strh	r2, [r3, #0]
 8007128:	187b      	adds	r3, r7, r1
 800712a:	881b      	ldrh	r3, [r3, #0]
 800712c:	2240      	movs	r2, #64	; 0x40
 800712e:	4013      	ands	r3, r2
 8007130:	d016      	beq.n	8007160 <USB_ActivateEndpoint+0x504>
 8007132:	687a      	ldr	r2, [r7, #4]
 8007134:	683b      	ldr	r3, [r7, #0]
 8007136:	781b      	ldrb	r3, [r3, #0]
 8007138:	009b      	lsls	r3, r3, #2
 800713a:	18d3      	adds	r3, r2, r3
 800713c:	881b      	ldrh	r3, [r3, #0]
 800713e:	b29a      	uxth	r2, r3
 8007140:	203a      	movs	r0, #58	; 0x3a
 8007142:	183b      	adds	r3, r7, r0
 8007144:	4976      	ldr	r1, [pc, #472]	; (8007320 <USB_ActivateEndpoint+0x6c4>)
 8007146:	400a      	ands	r2, r1
 8007148:	801a      	strh	r2, [r3, #0]
 800714a:	687a      	ldr	r2, [r7, #4]
 800714c:	683b      	ldr	r3, [r7, #0]
 800714e:	781b      	ldrb	r3, [r3, #0]
 8007150:	009b      	lsls	r3, r3, #2
 8007152:	18d3      	adds	r3, r2, r3
 8007154:	183a      	adds	r2, r7, r0
 8007156:	8812      	ldrh	r2, [r2, #0]
 8007158:	4977      	ldr	r1, [pc, #476]	; (8007338 <USB_ActivateEndpoint+0x6dc>)
 800715a:	430a      	orrs	r2, r1
 800715c:	b292      	uxth	r2, r2
 800715e:	801a      	strh	r2, [r3, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007160:	687a      	ldr	r2, [r7, #4]
 8007162:	683b      	ldr	r3, [r7, #0]
 8007164:	781b      	ldrb	r3, [r3, #0]
 8007166:	009b      	lsls	r3, r3, #2
 8007168:	18d3      	adds	r3, r2, r3
 800716a:	881b      	ldrh	r3, [r3, #0]
 800716c:	b29a      	uxth	r2, r3
 800716e:	2038      	movs	r0, #56	; 0x38
 8007170:	183b      	adds	r3, r7, r0
 8007172:	4972      	ldr	r1, [pc, #456]	; (800733c <USB_ActivateEndpoint+0x6e0>)
 8007174:	400a      	ands	r2, r1
 8007176:	801a      	strh	r2, [r3, #0]
 8007178:	183b      	adds	r3, r7, r0
 800717a:	183a      	adds	r2, r7, r0
 800717c:	8812      	ldrh	r2, [r2, #0]
 800717e:	2180      	movs	r1, #128	; 0x80
 8007180:	0149      	lsls	r1, r1, #5
 8007182:	404a      	eors	r2, r1
 8007184:	801a      	strh	r2, [r3, #0]
 8007186:	183b      	adds	r3, r7, r0
 8007188:	183a      	adds	r2, r7, r0
 800718a:	8812      	ldrh	r2, [r2, #0]
 800718c:	2180      	movs	r1, #128	; 0x80
 800718e:	0189      	lsls	r1, r1, #6
 8007190:	404a      	eors	r2, r1
 8007192:	801a      	strh	r2, [r3, #0]
 8007194:	687a      	ldr	r2, [r7, #4]
 8007196:	683b      	ldr	r3, [r7, #0]
 8007198:	781b      	ldrb	r3, [r3, #0]
 800719a:	009b      	lsls	r3, r3, #2
 800719c:	18d3      	adds	r3, r2, r3
 800719e:	183a      	adds	r2, r7, r0
 80071a0:	8812      	ldrh	r2, [r2, #0]
 80071a2:	4962      	ldr	r1, [pc, #392]	; (800732c <USB_ActivateEndpoint+0x6d0>)
 80071a4:	430a      	orrs	r2, r1
 80071a6:	b292      	uxth	r2, r2
 80071a8:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80071aa:	687a      	ldr	r2, [r7, #4]
 80071ac:	683b      	ldr	r3, [r7, #0]
 80071ae:	781b      	ldrb	r3, [r3, #0]
 80071b0:	009b      	lsls	r3, r3, #2
 80071b2:	18d3      	adds	r3, r2, r3
 80071b4:	881b      	ldrh	r3, [r3, #0]
 80071b6:	b29a      	uxth	r2, r3
 80071b8:	2036      	movs	r0, #54	; 0x36
 80071ba:	183b      	adds	r3, r7, r0
 80071bc:	4960      	ldr	r1, [pc, #384]	; (8007340 <USB_ActivateEndpoint+0x6e4>)
 80071be:	400a      	ands	r2, r1
 80071c0:	801a      	strh	r2, [r3, #0]
 80071c2:	687a      	ldr	r2, [r7, #4]
 80071c4:	683b      	ldr	r3, [r7, #0]
 80071c6:	781b      	ldrb	r3, [r3, #0]
 80071c8:	009b      	lsls	r3, r3, #2
 80071ca:	18d3      	adds	r3, r2, r3
 80071cc:	183a      	adds	r2, r7, r0
 80071ce:	8812      	ldrh	r2, [r2, #0]
 80071d0:	4956      	ldr	r1, [pc, #344]	; (800732c <USB_ActivateEndpoint+0x6d0>)
 80071d2:	430a      	orrs	r2, r1
 80071d4:	b292      	uxth	r2, r2
 80071d6:	801a      	strh	r2, [r3, #0]
 80071d8:	e09a      	b.n	8007310 <USB_ActivateEndpoint+0x6b4>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80071da:	687a      	ldr	r2, [r7, #4]
 80071dc:	683b      	ldr	r3, [r7, #0]
 80071de:	781b      	ldrb	r3, [r3, #0]
 80071e0:	009b      	lsls	r3, r3, #2
 80071e2:	18d2      	adds	r2, r2, r3
 80071e4:	214e      	movs	r1, #78	; 0x4e
 80071e6:	187b      	adds	r3, r7, r1
 80071e8:	8812      	ldrh	r2, [r2, #0]
 80071ea:	801a      	strh	r2, [r3, #0]
 80071ec:	187b      	adds	r3, r7, r1
 80071ee:	881a      	ldrh	r2, [r3, #0]
 80071f0:	2380      	movs	r3, #128	; 0x80
 80071f2:	01db      	lsls	r3, r3, #7
 80071f4:	4013      	ands	r3, r2
 80071f6:	d016      	beq.n	8007226 <USB_ActivateEndpoint+0x5ca>
 80071f8:	687a      	ldr	r2, [r7, #4]
 80071fa:	683b      	ldr	r3, [r7, #0]
 80071fc:	781b      	ldrb	r3, [r3, #0]
 80071fe:	009b      	lsls	r3, r3, #2
 8007200:	18d3      	adds	r3, r2, r3
 8007202:	881b      	ldrh	r3, [r3, #0]
 8007204:	b29a      	uxth	r2, r3
 8007206:	204c      	movs	r0, #76	; 0x4c
 8007208:	183b      	adds	r3, r7, r0
 800720a:	4945      	ldr	r1, [pc, #276]	; (8007320 <USB_ActivateEndpoint+0x6c4>)
 800720c:	400a      	ands	r2, r1
 800720e:	801a      	strh	r2, [r3, #0]
 8007210:	687a      	ldr	r2, [r7, #4]
 8007212:	683b      	ldr	r3, [r7, #0]
 8007214:	781b      	ldrb	r3, [r3, #0]
 8007216:	009b      	lsls	r3, r3, #2
 8007218:	18d3      	adds	r3, r2, r3
 800721a:	183a      	adds	r2, r7, r0
 800721c:	8812      	ldrh	r2, [r2, #0]
 800721e:	4945      	ldr	r1, [pc, #276]	; (8007334 <USB_ActivateEndpoint+0x6d8>)
 8007220:	430a      	orrs	r2, r1
 8007222:	b292      	uxth	r2, r2
 8007224:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007226:	687a      	ldr	r2, [r7, #4]
 8007228:	683b      	ldr	r3, [r7, #0]
 800722a:	781b      	ldrb	r3, [r3, #0]
 800722c:	009b      	lsls	r3, r3, #2
 800722e:	18d2      	adds	r2, r2, r3
 8007230:	214a      	movs	r1, #74	; 0x4a
 8007232:	187b      	adds	r3, r7, r1
 8007234:	8812      	ldrh	r2, [r2, #0]
 8007236:	801a      	strh	r2, [r3, #0]
 8007238:	187b      	adds	r3, r7, r1
 800723a:	881b      	ldrh	r3, [r3, #0]
 800723c:	2240      	movs	r2, #64	; 0x40
 800723e:	4013      	ands	r3, r2
 8007240:	d016      	beq.n	8007270 <USB_ActivateEndpoint+0x614>
 8007242:	687a      	ldr	r2, [r7, #4]
 8007244:	683b      	ldr	r3, [r7, #0]
 8007246:	781b      	ldrb	r3, [r3, #0]
 8007248:	009b      	lsls	r3, r3, #2
 800724a:	18d3      	adds	r3, r2, r3
 800724c:	881b      	ldrh	r3, [r3, #0]
 800724e:	b29a      	uxth	r2, r3
 8007250:	2048      	movs	r0, #72	; 0x48
 8007252:	183b      	adds	r3, r7, r0
 8007254:	4932      	ldr	r1, [pc, #200]	; (8007320 <USB_ActivateEndpoint+0x6c4>)
 8007256:	400a      	ands	r2, r1
 8007258:	801a      	strh	r2, [r3, #0]
 800725a:	687a      	ldr	r2, [r7, #4]
 800725c:	683b      	ldr	r3, [r7, #0]
 800725e:	781b      	ldrb	r3, [r3, #0]
 8007260:	009b      	lsls	r3, r3, #2
 8007262:	18d3      	adds	r3, r2, r3
 8007264:	183a      	adds	r2, r7, r0
 8007266:	8812      	ldrh	r2, [r2, #0]
 8007268:	4933      	ldr	r1, [pc, #204]	; (8007338 <USB_ActivateEndpoint+0x6dc>)
 800726a:	430a      	orrs	r2, r1
 800726c:	b292      	uxth	r2, r2
 800726e:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007270:	683b      	ldr	r3, [r7, #0]
 8007272:	78db      	ldrb	r3, [r3, #3]
 8007274:	2b01      	cmp	r3, #1
 8007276:	d01d      	beq.n	80072b4 <USB_ActivateEndpoint+0x658>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8007278:	687a      	ldr	r2, [r7, #4]
 800727a:	683b      	ldr	r3, [r7, #0]
 800727c:	781b      	ldrb	r3, [r3, #0]
 800727e:	009b      	lsls	r3, r3, #2
 8007280:	18d3      	adds	r3, r2, r3
 8007282:	881b      	ldrh	r3, [r3, #0]
 8007284:	b29a      	uxth	r2, r3
 8007286:	2044      	movs	r0, #68	; 0x44
 8007288:	183b      	adds	r3, r7, r0
 800728a:	492d      	ldr	r1, [pc, #180]	; (8007340 <USB_ActivateEndpoint+0x6e4>)
 800728c:	400a      	ands	r2, r1
 800728e:	801a      	strh	r2, [r3, #0]
 8007290:	183b      	adds	r3, r7, r0
 8007292:	183a      	adds	r2, r7, r0
 8007294:	8812      	ldrh	r2, [r2, #0]
 8007296:	2120      	movs	r1, #32
 8007298:	404a      	eors	r2, r1
 800729a:	801a      	strh	r2, [r3, #0]
 800729c:	687a      	ldr	r2, [r7, #4]
 800729e:	683b      	ldr	r3, [r7, #0]
 80072a0:	781b      	ldrb	r3, [r3, #0]
 80072a2:	009b      	lsls	r3, r3, #2
 80072a4:	18d3      	adds	r3, r2, r3
 80072a6:	183a      	adds	r2, r7, r0
 80072a8:	8812      	ldrh	r2, [r2, #0]
 80072aa:	4920      	ldr	r1, [pc, #128]	; (800732c <USB_ActivateEndpoint+0x6d0>)
 80072ac:	430a      	orrs	r2, r1
 80072ae:	b292      	uxth	r2, r2
 80072b0:	801a      	strh	r2, [r3, #0]
 80072b2:	e016      	b.n	80072e2 <USB_ActivateEndpoint+0x686>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80072b4:	687a      	ldr	r2, [r7, #4]
 80072b6:	683b      	ldr	r3, [r7, #0]
 80072b8:	781b      	ldrb	r3, [r3, #0]
 80072ba:	009b      	lsls	r3, r3, #2
 80072bc:	18d3      	adds	r3, r2, r3
 80072be:	881b      	ldrh	r3, [r3, #0]
 80072c0:	b29a      	uxth	r2, r3
 80072c2:	2046      	movs	r0, #70	; 0x46
 80072c4:	183b      	adds	r3, r7, r0
 80072c6:	491e      	ldr	r1, [pc, #120]	; (8007340 <USB_ActivateEndpoint+0x6e4>)
 80072c8:	400a      	ands	r2, r1
 80072ca:	801a      	strh	r2, [r3, #0]
 80072cc:	687a      	ldr	r2, [r7, #4]
 80072ce:	683b      	ldr	r3, [r7, #0]
 80072d0:	781b      	ldrb	r3, [r3, #0]
 80072d2:	009b      	lsls	r3, r3, #2
 80072d4:	18d3      	adds	r3, r2, r3
 80072d6:	183a      	adds	r2, r7, r0
 80072d8:	8812      	ldrh	r2, [r2, #0]
 80072da:	4914      	ldr	r1, [pc, #80]	; (800732c <USB_ActivateEndpoint+0x6d0>)
 80072dc:	430a      	orrs	r2, r1
 80072de:	b292      	uxth	r2, r2
 80072e0:	801a      	strh	r2, [r3, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80072e2:	687a      	ldr	r2, [r7, #4]
 80072e4:	683b      	ldr	r3, [r7, #0]
 80072e6:	781b      	ldrb	r3, [r3, #0]
 80072e8:	009b      	lsls	r3, r3, #2
 80072ea:	18d3      	adds	r3, r2, r3
 80072ec:	881b      	ldrh	r3, [r3, #0]
 80072ee:	b29a      	uxth	r2, r3
 80072f0:	2042      	movs	r0, #66	; 0x42
 80072f2:	183b      	adds	r3, r7, r0
 80072f4:	4911      	ldr	r1, [pc, #68]	; (800733c <USB_ActivateEndpoint+0x6e0>)
 80072f6:	400a      	ands	r2, r1
 80072f8:	801a      	strh	r2, [r3, #0]
 80072fa:	687a      	ldr	r2, [r7, #4]
 80072fc:	683b      	ldr	r3, [r7, #0]
 80072fe:	781b      	ldrb	r3, [r3, #0]
 8007300:	009b      	lsls	r3, r3, #2
 8007302:	18d3      	adds	r3, r2, r3
 8007304:	183a      	adds	r2, r7, r0
 8007306:	8812      	ldrh	r2, [r2, #0]
 8007308:	4908      	ldr	r1, [pc, #32]	; (800732c <USB_ActivateEndpoint+0x6d0>)
 800730a:	430a      	orrs	r2, r1
 800730c:	b292      	uxth	r2, r2
 800730e:	801a      	strh	r2, [r3, #0]
    }
  }

  return ret;
 8007310:	236f      	movs	r3, #111	; 0x6f
 8007312:	18fb      	adds	r3, r7, r3
 8007314:	781b      	ldrb	r3, [r3, #0]
}
 8007316:	0018      	movs	r0, r3
 8007318:	46bd      	mov	sp, r7
 800731a:	b01c      	add	sp, #112	; 0x70
 800731c:	bd80      	pop	{r7, pc}
 800731e:	46c0      	nop			; (mov r8, r8)
 8007320:	ffff8f8f 	.word	0xffff8f8f
 8007324:	ffff8180 	.word	0xffff8180
 8007328:	ffff8e8f 	.word	0xffff8e8f
 800732c:	ffff8080 	.word	0xffff8080
 8007330:	00000404 	.word	0x00000404
 8007334:	ffffc080 	.word	0xffffc080
 8007338:	ffff80c0 	.word	0xffff80c0
 800733c:	ffffbf8f 	.word	0xffffbf8f
 8007340:	ffff8fbf 	.word	0xffff8fbf

08007344 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007344:	b580      	push	{r7, lr}
 8007346:	b08c      	sub	sp, #48	; 0x30
 8007348:	af00      	add	r7, sp, #0
 800734a:	6078      	str	r0, [r7, #4]
 800734c:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800734e:	683b      	ldr	r3, [r7, #0]
 8007350:	7b1b      	ldrb	r3, [r3, #12]
 8007352:	2b00      	cmp	r3, #0
 8007354:	d000      	beq.n	8007358 <USB_DeactivateEndpoint+0x14>
 8007356:	e07e      	b.n	8007456 <USB_DeactivateEndpoint+0x112>
  {
    if (ep->is_in != 0U)
 8007358:	683b      	ldr	r3, [r7, #0]
 800735a:	785b      	ldrb	r3, [r3, #1]
 800735c:	2b00      	cmp	r3, #0
 800735e:	d03c      	beq.n	80073da <USB_DeactivateEndpoint+0x96>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007360:	687a      	ldr	r2, [r7, #4]
 8007362:	683b      	ldr	r3, [r7, #0]
 8007364:	781b      	ldrb	r3, [r3, #0]
 8007366:	009b      	lsls	r3, r3, #2
 8007368:	18d2      	adds	r2, r2, r3
 800736a:	210c      	movs	r1, #12
 800736c:	187b      	adds	r3, r7, r1
 800736e:	8812      	ldrh	r2, [r2, #0]
 8007370:	801a      	strh	r2, [r3, #0]
 8007372:	187b      	adds	r3, r7, r1
 8007374:	881b      	ldrh	r3, [r3, #0]
 8007376:	2240      	movs	r2, #64	; 0x40
 8007378:	4013      	ands	r3, r2
 800737a:	d016      	beq.n	80073aa <USB_DeactivateEndpoint+0x66>
 800737c:	687a      	ldr	r2, [r7, #4]
 800737e:	683b      	ldr	r3, [r7, #0]
 8007380:	781b      	ldrb	r3, [r3, #0]
 8007382:	009b      	lsls	r3, r3, #2
 8007384:	18d3      	adds	r3, r2, r3
 8007386:	881b      	ldrh	r3, [r3, #0]
 8007388:	b29a      	uxth	r2, r3
 800738a:	200a      	movs	r0, #10
 800738c:	183b      	adds	r3, r7, r0
 800738e:	49c7      	ldr	r1, [pc, #796]	; (80076ac <USB_DeactivateEndpoint+0x368>)
 8007390:	400a      	ands	r2, r1
 8007392:	801a      	strh	r2, [r3, #0]
 8007394:	687a      	ldr	r2, [r7, #4]
 8007396:	683b      	ldr	r3, [r7, #0]
 8007398:	781b      	ldrb	r3, [r3, #0]
 800739a:	009b      	lsls	r3, r3, #2
 800739c:	18d3      	adds	r3, r2, r3
 800739e:	183a      	adds	r2, r7, r0
 80073a0:	8812      	ldrh	r2, [r2, #0]
 80073a2:	49c3      	ldr	r1, [pc, #780]	; (80076b0 <USB_DeactivateEndpoint+0x36c>)
 80073a4:	430a      	orrs	r2, r1
 80073a6:	b292      	uxth	r2, r2
 80073a8:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80073aa:	687a      	ldr	r2, [r7, #4]
 80073ac:	683b      	ldr	r3, [r7, #0]
 80073ae:	781b      	ldrb	r3, [r3, #0]
 80073b0:	009b      	lsls	r3, r3, #2
 80073b2:	18d3      	adds	r3, r2, r3
 80073b4:	881b      	ldrh	r3, [r3, #0]
 80073b6:	b29a      	uxth	r2, r3
 80073b8:	2008      	movs	r0, #8
 80073ba:	183b      	adds	r3, r7, r0
 80073bc:	49bd      	ldr	r1, [pc, #756]	; (80076b4 <USB_DeactivateEndpoint+0x370>)
 80073be:	400a      	ands	r2, r1
 80073c0:	801a      	strh	r2, [r3, #0]
 80073c2:	687a      	ldr	r2, [r7, #4]
 80073c4:	683b      	ldr	r3, [r7, #0]
 80073c6:	781b      	ldrb	r3, [r3, #0]
 80073c8:	009b      	lsls	r3, r3, #2
 80073ca:	18d3      	adds	r3, r2, r3
 80073cc:	183a      	adds	r2, r7, r0
 80073ce:	8812      	ldrh	r2, [r2, #0]
 80073d0:	49b9      	ldr	r1, [pc, #740]	; (80076b8 <USB_DeactivateEndpoint+0x374>)
 80073d2:	430a      	orrs	r2, r1
 80073d4:	b292      	uxth	r2, r2
 80073d6:	801a      	strh	r2, [r3, #0]
 80073d8:	e163      	b.n	80076a2 <USB_DeactivateEndpoint+0x35e>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80073da:	687a      	ldr	r2, [r7, #4]
 80073dc:	683b      	ldr	r3, [r7, #0]
 80073de:	781b      	ldrb	r3, [r3, #0]
 80073e0:	009b      	lsls	r3, r3, #2
 80073e2:	18d2      	adds	r2, r2, r3
 80073e4:	2112      	movs	r1, #18
 80073e6:	187b      	adds	r3, r7, r1
 80073e8:	8812      	ldrh	r2, [r2, #0]
 80073ea:	801a      	strh	r2, [r3, #0]
 80073ec:	187b      	adds	r3, r7, r1
 80073ee:	881a      	ldrh	r2, [r3, #0]
 80073f0:	2380      	movs	r3, #128	; 0x80
 80073f2:	01db      	lsls	r3, r3, #7
 80073f4:	4013      	ands	r3, r2
 80073f6:	d016      	beq.n	8007426 <USB_DeactivateEndpoint+0xe2>
 80073f8:	687a      	ldr	r2, [r7, #4]
 80073fa:	683b      	ldr	r3, [r7, #0]
 80073fc:	781b      	ldrb	r3, [r3, #0]
 80073fe:	009b      	lsls	r3, r3, #2
 8007400:	18d3      	adds	r3, r2, r3
 8007402:	881b      	ldrh	r3, [r3, #0]
 8007404:	b29a      	uxth	r2, r3
 8007406:	2010      	movs	r0, #16
 8007408:	183b      	adds	r3, r7, r0
 800740a:	49a8      	ldr	r1, [pc, #672]	; (80076ac <USB_DeactivateEndpoint+0x368>)
 800740c:	400a      	ands	r2, r1
 800740e:	801a      	strh	r2, [r3, #0]
 8007410:	687a      	ldr	r2, [r7, #4]
 8007412:	683b      	ldr	r3, [r7, #0]
 8007414:	781b      	ldrb	r3, [r3, #0]
 8007416:	009b      	lsls	r3, r3, #2
 8007418:	18d3      	adds	r3, r2, r3
 800741a:	183a      	adds	r2, r7, r0
 800741c:	8812      	ldrh	r2, [r2, #0]
 800741e:	49a7      	ldr	r1, [pc, #668]	; (80076bc <USB_DeactivateEndpoint+0x378>)
 8007420:	430a      	orrs	r2, r1
 8007422:	b292      	uxth	r2, r2
 8007424:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8007426:	687a      	ldr	r2, [r7, #4]
 8007428:	683b      	ldr	r3, [r7, #0]
 800742a:	781b      	ldrb	r3, [r3, #0]
 800742c:	009b      	lsls	r3, r3, #2
 800742e:	18d3      	adds	r3, r2, r3
 8007430:	881b      	ldrh	r3, [r3, #0]
 8007432:	b29a      	uxth	r2, r3
 8007434:	200e      	movs	r0, #14
 8007436:	183b      	adds	r3, r7, r0
 8007438:	49a1      	ldr	r1, [pc, #644]	; (80076c0 <USB_DeactivateEndpoint+0x37c>)
 800743a:	400a      	ands	r2, r1
 800743c:	801a      	strh	r2, [r3, #0]
 800743e:	687a      	ldr	r2, [r7, #4]
 8007440:	683b      	ldr	r3, [r7, #0]
 8007442:	781b      	ldrb	r3, [r3, #0]
 8007444:	009b      	lsls	r3, r3, #2
 8007446:	18d3      	adds	r3, r2, r3
 8007448:	183a      	adds	r2, r7, r0
 800744a:	8812      	ldrh	r2, [r2, #0]
 800744c:	499a      	ldr	r1, [pc, #616]	; (80076b8 <USB_DeactivateEndpoint+0x374>)
 800744e:	430a      	orrs	r2, r1
 8007450:	b292      	uxth	r2, r2
 8007452:	801a      	strh	r2, [r3, #0]
 8007454:	e125      	b.n	80076a2 <USB_DeactivateEndpoint+0x35e>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8007456:	683b      	ldr	r3, [r7, #0]
 8007458:	785b      	ldrb	r3, [r3, #1]
 800745a:	2b00      	cmp	r3, #0
 800745c:	d000      	beq.n	8007460 <USB_DeactivateEndpoint+0x11c>
 800745e:	e090      	b.n	8007582 <USB_DeactivateEndpoint+0x23e>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007460:	687a      	ldr	r2, [r7, #4]
 8007462:	683b      	ldr	r3, [r7, #0]
 8007464:	781b      	ldrb	r3, [r3, #0]
 8007466:	009b      	lsls	r3, r3, #2
 8007468:	18d2      	adds	r2, r2, r3
 800746a:	2120      	movs	r1, #32
 800746c:	187b      	adds	r3, r7, r1
 800746e:	8812      	ldrh	r2, [r2, #0]
 8007470:	801a      	strh	r2, [r3, #0]
 8007472:	187b      	adds	r3, r7, r1
 8007474:	881a      	ldrh	r2, [r3, #0]
 8007476:	2380      	movs	r3, #128	; 0x80
 8007478:	01db      	lsls	r3, r3, #7
 800747a:	4013      	ands	r3, r2
 800747c:	d016      	beq.n	80074ac <USB_DeactivateEndpoint+0x168>
 800747e:	687a      	ldr	r2, [r7, #4]
 8007480:	683b      	ldr	r3, [r7, #0]
 8007482:	781b      	ldrb	r3, [r3, #0]
 8007484:	009b      	lsls	r3, r3, #2
 8007486:	18d3      	adds	r3, r2, r3
 8007488:	881b      	ldrh	r3, [r3, #0]
 800748a:	b29a      	uxth	r2, r3
 800748c:	201e      	movs	r0, #30
 800748e:	183b      	adds	r3, r7, r0
 8007490:	4986      	ldr	r1, [pc, #536]	; (80076ac <USB_DeactivateEndpoint+0x368>)
 8007492:	400a      	ands	r2, r1
 8007494:	801a      	strh	r2, [r3, #0]
 8007496:	687a      	ldr	r2, [r7, #4]
 8007498:	683b      	ldr	r3, [r7, #0]
 800749a:	781b      	ldrb	r3, [r3, #0]
 800749c:	009b      	lsls	r3, r3, #2
 800749e:	18d3      	adds	r3, r2, r3
 80074a0:	183a      	adds	r2, r7, r0
 80074a2:	8812      	ldrh	r2, [r2, #0]
 80074a4:	4985      	ldr	r1, [pc, #532]	; (80076bc <USB_DeactivateEndpoint+0x378>)
 80074a6:	430a      	orrs	r2, r1
 80074a8:	b292      	uxth	r2, r2
 80074aa:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80074ac:	687a      	ldr	r2, [r7, #4]
 80074ae:	683b      	ldr	r3, [r7, #0]
 80074b0:	781b      	ldrb	r3, [r3, #0]
 80074b2:	009b      	lsls	r3, r3, #2
 80074b4:	18d2      	adds	r2, r2, r3
 80074b6:	211c      	movs	r1, #28
 80074b8:	187b      	adds	r3, r7, r1
 80074ba:	8812      	ldrh	r2, [r2, #0]
 80074bc:	801a      	strh	r2, [r3, #0]
 80074be:	187b      	adds	r3, r7, r1
 80074c0:	881b      	ldrh	r3, [r3, #0]
 80074c2:	2240      	movs	r2, #64	; 0x40
 80074c4:	4013      	ands	r3, r2
 80074c6:	d016      	beq.n	80074f6 <USB_DeactivateEndpoint+0x1b2>
 80074c8:	687a      	ldr	r2, [r7, #4]
 80074ca:	683b      	ldr	r3, [r7, #0]
 80074cc:	781b      	ldrb	r3, [r3, #0]
 80074ce:	009b      	lsls	r3, r3, #2
 80074d0:	18d3      	adds	r3, r2, r3
 80074d2:	881b      	ldrh	r3, [r3, #0]
 80074d4:	b29a      	uxth	r2, r3
 80074d6:	201a      	movs	r0, #26
 80074d8:	183b      	adds	r3, r7, r0
 80074da:	4974      	ldr	r1, [pc, #464]	; (80076ac <USB_DeactivateEndpoint+0x368>)
 80074dc:	400a      	ands	r2, r1
 80074de:	801a      	strh	r2, [r3, #0]
 80074e0:	687a      	ldr	r2, [r7, #4]
 80074e2:	683b      	ldr	r3, [r7, #0]
 80074e4:	781b      	ldrb	r3, [r3, #0]
 80074e6:	009b      	lsls	r3, r3, #2
 80074e8:	18d3      	adds	r3, r2, r3
 80074ea:	183a      	adds	r2, r7, r0
 80074ec:	8812      	ldrh	r2, [r2, #0]
 80074ee:	4970      	ldr	r1, [pc, #448]	; (80076b0 <USB_DeactivateEndpoint+0x36c>)
 80074f0:	430a      	orrs	r2, r1
 80074f2:	b292      	uxth	r2, r2
 80074f4:	801a      	strh	r2, [r3, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 80074f6:	687a      	ldr	r2, [r7, #4]
 80074f8:	683b      	ldr	r3, [r7, #0]
 80074fa:	781b      	ldrb	r3, [r3, #0]
 80074fc:	009b      	lsls	r3, r3, #2
 80074fe:	18d3      	adds	r3, r2, r3
 8007500:	881b      	ldrh	r3, [r3, #0]
 8007502:	b29a      	uxth	r2, r3
 8007504:	2018      	movs	r0, #24
 8007506:	183b      	adds	r3, r7, r0
 8007508:	4968      	ldr	r1, [pc, #416]	; (80076ac <USB_DeactivateEndpoint+0x368>)
 800750a:	400a      	ands	r2, r1
 800750c:	801a      	strh	r2, [r3, #0]
 800750e:	687a      	ldr	r2, [r7, #4]
 8007510:	683b      	ldr	r3, [r7, #0]
 8007512:	781b      	ldrb	r3, [r3, #0]
 8007514:	009b      	lsls	r3, r3, #2
 8007516:	18d3      	adds	r3, r2, r3
 8007518:	183a      	adds	r2, r7, r0
 800751a:	8812      	ldrh	r2, [r2, #0]
 800751c:	4964      	ldr	r1, [pc, #400]	; (80076b0 <USB_DeactivateEndpoint+0x36c>)
 800751e:	430a      	orrs	r2, r1
 8007520:	b292      	uxth	r2, r2
 8007522:	801a      	strh	r2, [r3, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8007524:	687a      	ldr	r2, [r7, #4]
 8007526:	683b      	ldr	r3, [r7, #0]
 8007528:	781b      	ldrb	r3, [r3, #0]
 800752a:	009b      	lsls	r3, r3, #2
 800752c:	18d3      	adds	r3, r2, r3
 800752e:	881b      	ldrh	r3, [r3, #0]
 8007530:	b29a      	uxth	r2, r3
 8007532:	2016      	movs	r0, #22
 8007534:	183b      	adds	r3, r7, r0
 8007536:	4962      	ldr	r1, [pc, #392]	; (80076c0 <USB_DeactivateEndpoint+0x37c>)
 8007538:	400a      	ands	r2, r1
 800753a:	801a      	strh	r2, [r3, #0]
 800753c:	687a      	ldr	r2, [r7, #4]
 800753e:	683b      	ldr	r3, [r7, #0]
 8007540:	781b      	ldrb	r3, [r3, #0]
 8007542:	009b      	lsls	r3, r3, #2
 8007544:	18d3      	adds	r3, r2, r3
 8007546:	183a      	adds	r2, r7, r0
 8007548:	8812      	ldrh	r2, [r2, #0]
 800754a:	495b      	ldr	r1, [pc, #364]	; (80076b8 <USB_DeactivateEndpoint+0x374>)
 800754c:	430a      	orrs	r2, r1
 800754e:	b292      	uxth	r2, r2
 8007550:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007552:	687a      	ldr	r2, [r7, #4]
 8007554:	683b      	ldr	r3, [r7, #0]
 8007556:	781b      	ldrb	r3, [r3, #0]
 8007558:	009b      	lsls	r3, r3, #2
 800755a:	18d3      	adds	r3, r2, r3
 800755c:	881b      	ldrh	r3, [r3, #0]
 800755e:	b29a      	uxth	r2, r3
 8007560:	2014      	movs	r0, #20
 8007562:	183b      	adds	r3, r7, r0
 8007564:	4953      	ldr	r1, [pc, #332]	; (80076b4 <USB_DeactivateEndpoint+0x370>)
 8007566:	400a      	ands	r2, r1
 8007568:	801a      	strh	r2, [r3, #0]
 800756a:	687a      	ldr	r2, [r7, #4]
 800756c:	683b      	ldr	r3, [r7, #0]
 800756e:	781b      	ldrb	r3, [r3, #0]
 8007570:	009b      	lsls	r3, r3, #2
 8007572:	18d3      	adds	r3, r2, r3
 8007574:	183a      	adds	r2, r7, r0
 8007576:	8812      	ldrh	r2, [r2, #0]
 8007578:	494f      	ldr	r1, [pc, #316]	; (80076b8 <USB_DeactivateEndpoint+0x374>)
 800757a:	430a      	orrs	r2, r1
 800757c:	b292      	uxth	r2, r2
 800757e:	801a      	strh	r2, [r3, #0]
 8007580:	e08f      	b.n	80076a2 <USB_DeactivateEndpoint+0x35e>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007582:	687a      	ldr	r2, [r7, #4]
 8007584:	683b      	ldr	r3, [r7, #0]
 8007586:	781b      	ldrb	r3, [r3, #0]
 8007588:	009b      	lsls	r3, r3, #2
 800758a:	18d2      	adds	r2, r2, r3
 800758c:	212e      	movs	r1, #46	; 0x2e
 800758e:	187b      	adds	r3, r7, r1
 8007590:	8812      	ldrh	r2, [r2, #0]
 8007592:	801a      	strh	r2, [r3, #0]
 8007594:	187b      	adds	r3, r7, r1
 8007596:	881a      	ldrh	r2, [r3, #0]
 8007598:	2380      	movs	r3, #128	; 0x80
 800759a:	01db      	lsls	r3, r3, #7
 800759c:	4013      	ands	r3, r2
 800759e:	d016      	beq.n	80075ce <USB_DeactivateEndpoint+0x28a>
 80075a0:	687a      	ldr	r2, [r7, #4]
 80075a2:	683b      	ldr	r3, [r7, #0]
 80075a4:	781b      	ldrb	r3, [r3, #0]
 80075a6:	009b      	lsls	r3, r3, #2
 80075a8:	18d3      	adds	r3, r2, r3
 80075aa:	881b      	ldrh	r3, [r3, #0]
 80075ac:	b29a      	uxth	r2, r3
 80075ae:	202c      	movs	r0, #44	; 0x2c
 80075b0:	183b      	adds	r3, r7, r0
 80075b2:	493e      	ldr	r1, [pc, #248]	; (80076ac <USB_DeactivateEndpoint+0x368>)
 80075b4:	400a      	ands	r2, r1
 80075b6:	801a      	strh	r2, [r3, #0]
 80075b8:	687a      	ldr	r2, [r7, #4]
 80075ba:	683b      	ldr	r3, [r7, #0]
 80075bc:	781b      	ldrb	r3, [r3, #0]
 80075be:	009b      	lsls	r3, r3, #2
 80075c0:	18d3      	adds	r3, r2, r3
 80075c2:	183a      	adds	r2, r7, r0
 80075c4:	8812      	ldrh	r2, [r2, #0]
 80075c6:	493d      	ldr	r1, [pc, #244]	; (80076bc <USB_DeactivateEndpoint+0x378>)
 80075c8:	430a      	orrs	r2, r1
 80075ca:	b292      	uxth	r2, r2
 80075cc:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80075ce:	687a      	ldr	r2, [r7, #4]
 80075d0:	683b      	ldr	r3, [r7, #0]
 80075d2:	781b      	ldrb	r3, [r3, #0]
 80075d4:	009b      	lsls	r3, r3, #2
 80075d6:	18d2      	adds	r2, r2, r3
 80075d8:	212a      	movs	r1, #42	; 0x2a
 80075da:	187b      	adds	r3, r7, r1
 80075dc:	8812      	ldrh	r2, [r2, #0]
 80075de:	801a      	strh	r2, [r3, #0]
 80075e0:	187b      	adds	r3, r7, r1
 80075e2:	881b      	ldrh	r3, [r3, #0]
 80075e4:	2240      	movs	r2, #64	; 0x40
 80075e6:	4013      	ands	r3, r2
 80075e8:	d016      	beq.n	8007618 <USB_DeactivateEndpoint+0x2d4>
 80075ea:	687a      	ldr	r2, [r7, #4]
 80075ec:	683b      	ldr	r3, [r7, #0]
 80075ee:	781b      	ldrb	r3, [r3, #0]
 80075f0:	009b      	lsls	r3, r3, #2
 80075f2:	18d3      	adds	r3, r2, r3
 80075f4:	881b      	ldrh	r3, [r3, #0]
 80075f6:	b29a      	uxth	r2, r3
 80075f8:	2028      	movs	r0, #40	; 0x28
 80075fa:	183b      	adds	r3, r7, r0
 80075fc:	492b      	ldr	r1, [pc, #172]	; (80076ac <USB_DeactivateEndpoint+0x368>)
 80075fe:	400a      	ands	r2, r1
 8007600:	801a      	strh	r2, [r3, #0]
 8007602:	687a      	ldr	r2, [r7, #4]
 8007604:	683b      	ldr	r3, [r7, #0]
 8007606:	781b      	ldrb	r3, [r3, #0]
 8007608:	009b      	lsls	r3, r3, #2
 800760a:	18d3      	adds	r3, r2, r3
 800760c:	183a      	adds	r2, r7, r0
 800760e:	8812      	ldrh	r2, [r2, #0]
 8007610:	4927      	ldr	r1, [pc, #156]	; (80076b0 <USB_DeactivateEndpoint+0x36c>)
 8007612:	430a      	orrs	r2, r1
 8007614:	b292      	uxth	r2, r2
 8007616:	801a      	strh	r2, [r3, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8007618:	687a      	ldr	r2, [r7, #4]
 800761a:	683b      	ldr	r3, [r7, #0]
 800761c:	781b      	ldrb	r3, [r3, #0]
 800761e:	009b      	lsls	r3, r3, #2
 8007620:	18d3      	adds	r3, r2, r3
 8007622:	881b      	ldrh	r3, [r3, #0]
 8007624:	b29a      	uxth	r2, r3
 8007626:	2026      	movs	r0, #38	; 0x26
 8007628:	183b      	adds	r3, r7, r0
 800762a:	4920      	ldr	r1, [pc, #128]	; (80076ac <USB_DeactivateEndpoint+0x368>)
 800762c:	400a      	ands	r2, r1
 800762e:	801a      	strh	r2, [r3, #0]
 8007630:	687a      	ldr	r2, [r7, #4]
 8007632:	683b      	ldr	r3, [r7, #0]
 8007634:	781b      	ldrb	r3, [r3, #0]
 8007636:	009b      	lsls	r3, r3, #2
 8007638:	18d3      	adds	r3, r2, r3
 800763a:	183a      	adds	r2, r7, r0
 800763c:	8812      	ldrh	r2, [r2, #0]
 800763e:	491f      	ldr	r1, [pc, #124]	; (80076bc <USB_DeactivateEndpoint+0x378>)
 8007640:	430a      	orrs	r2, r1
 8007642:	b292      	uxth	r2, r2
 8007644:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007646:	687a      	ldr	r2, [r7, #4]
 8007648:	683b      	ldr	r3, [r7, #0]
 800764a:	781b      	ldrb	r3, [r3, #0]
 800764c:	009b      	lsls	r3, r3, #2
 800764e:	18d3      	adds	r3, r2, r3
 8007650:	881b      	ldrh	r3, [r3, #0]
 8007652:	b29a      	uxth	r2, r3
 8007654:	2024      	movs	r0, #36	; 0x24
 8007656:	183b      	adds	r3, r7, r0
 8007658:	4916      	ldr	r1, [pc, #88]	; (80076b4 <USB_DeactivateEndpoint+0x370>)
 800765a:	400a      	ands	r2, r1
 800765c:	801a      	strh	r2, [r3, #0]
 800765e:	687a      	ldr	r2, [r7, #4]
 8007660:	683b      	ldr	r3, [r7, #0]
 8007662:	781b      	ldrb	r3, [r3, #0]
 8007664:	009b      	lsls	r3, r3, #2
 8007666:	18d3      	adds	r3, r2, r3
 8007668:	183a      	adds	r2, r7, r0
 800766a:	8812      	ldrh	r2, [r2, #0]
 800766c:	4912      	ldr	r1, [pc, #72]	; (80076b8 <USB_DeactivateEndpoint+0x374>)
 800766e:	430a      	orrs	r2, r1
 8007670:	b292      	uxth	r2, r2
 8007672:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8007674:	687a      	ldr	r2, [r7, #4]
 8007676:	683b      	ldr	r3, [r7, #0]
 8007678:	781b      	ldrb	r3, [r3, #0]
 800767a:	009b      	lsls	r3, r3, #2
 800767c:	18d3      	adds	r3, r2, r3
 800767e:	881b      	ldrh	r3, [r3, #0]
 8007680:	b29a      	uxth	r2, r3
 8007682:	2022      	movs	r0, #34	; 0x22
 8007684:	183b      	adds	r3, r7, r0
 8007686:	490e      	ldr	r1, [pc, #56]	; (80076c0 <USB_DeactivateEndpoint+0x37c>)
 8007688:	400a      	ands	r2, r1
 800768a:	801a      	strh	r2, [r3, #0]
 800768c:	687a      	ldr	r2, [r7, #4]
 800768e:	683b      	ldr	r3, [r7, #0]
 8007690:	781b      	ldrb	r3, [r3, #0]
 8007692:	009b      	lsls	r3, r3, #2
 8007694:	18d3      	adds	r3, r2, r3
 8007696:	183a      	adds	r2, r7, r0
 8007698:	8812      	ldrh	r2, [r2, #0]
 800769a:	4907      	ldr	r1, [pc, #28]	; (80076b8 <USB_DeactivateEndpoint+0x374>)
 800769c:	430a      	orrs	r2, r1
 800769e:	b292      	uxth	r2, r2
 80076a0:	801a      	strh	r2, [r3, #0]
    }
  }

  return HAL_OK;
 80076a2:	2300      	movs	r3, #0
}
 80076a4:	0018      	movs	r0, r3
 80076a6:	46bd      	mov	sp, r7
 80076a8:	b00c      	add	sp, #48	; 0x30
 80076aa:	bd80      	pop	{r7, pc}
 80076ac:	ffff8f8f 	.word	0xffff8f8f
 80076b0:	ffff80c0 	.word	0xffff80c0
 80076b4:	ffff8fbf 	.word	0xffff8fbf
 80076b8:	ffff8080 	.word	0xffff8080
 80076bc:	ffffc080 	.word	0xffffc080
 80076c0:	ffffbf8f 	.word	0xffffbf8f

080076c4 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80076c4:	b590      	push	{r4, r7, lr}
 80076c6:	b0c3      	sub	sp, #268	; 0x10c
 80076c8:	af00      	add	r7, sp, #0
 80076ca:	6078      	str	r0, [r7, #4]
 80076cc:	6039      	str	r1, [r7, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80076ce:	683b      	ldr	r3, [r7, #0]
 80076d0:	785b      	ldrb	r3, [r3, #1]
 80076d2:	2b01      	cmp	r3, #1
 80076d4:	d001      	beq.n	80076da <USB_EPStartXfer+0x16>
 80076d6:	f000 fcef 	bl	80080b8 <USB_EPStartXfer+0x9f4>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 80076da:	683b      	ldr	r3, [r7, #0]
 80076dc:	699a      	ldr	r2, [r3, #24]
 80076de:	683b      	ldr	r3, [r7, #0]
 80076e0:	691b      	ldr	r3, [r3, #16]
 80076e2:	429a      	cmp	r2, r3
 80076e4:	d905      	bls.n	80076f2 <USB_EPStartXfer+0x2e>
    {
      len = ep->maxpacket;
 80076e6:	683b      	ldr	r3, [r7, #0]
 80076e8:	691b      	ldr	r3, [r3, #16]
 80076ea:	1d7a      	adds	r2, r7, #5
 80076ec:	32ff      	adds	r2, #255	; 0xff
 80076ee:	6013      	str	r3, [r2, #0]
 80076f0:	e004      	b.n	80076fc <USB_EPStartXfer+0x38>
    }
    else
    {
      len = ep->xfer_len;
 80076f2:	683b      	ldr	r3, [r7, #0]
 80076f4:	699b      	ldr	r3, [r3, #24]
 80076f6:	1d7a      	adds	r2, r7, #5
 80076f8:	32ff      	adds	r2, #255	; 0xff
 80076fa:	6013      	str	r3, [r2, #0]
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 80076fc:	683b      	ldr	r3, [r7, #0]
 80076fe:	7b1b      	ldrb	r3, [r3, #12]
 8007700:	2b00      	cmp	r3, #0
 8007702:	d125      	bne.n	8007750 <USB_EPStartXfer+0x8c>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8007704:	683b      	ldr	r3, [r7, #0]
 8007706:	6959      	ldr	r1, [r3, #20]
 8007708:	683b      	ldr	r3, [r7, #0]
 800770a:	88da      	ldrh	r2, [r3, #6]
 800770c:	1d7b      	adds	r3, r7, #5
 800770e:	33ff      	adds	r3, #255	; 0xff
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	b29b      	uxth	r3, r3
 8007714:	6878      	ldr	r0, [r7, #4]
 8007716:	f001 f9c9 	bl	8008aac <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	613b      	str	r3, [r7, #16]
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	2250      	movs	r2, #80	; 0x50
 8007722:	5a9b      	ldrh	r3, [r3, r2]
 8007724:	b29b      	uxth	r3, r3
 8007726:	001a      	movs	r2, r3
 8007728:	693b      	ldr	r3, [r7, #16]
 800772a:	189b      	adds	r3, r3, r2
 800772c:	613b      	str	r3, [r7, #16]
 800772e:	683b      	ldr	r3, [r7, #0]
 8007730:	781b      	ldrb	r3, [r3, #0]
 8007732:	00da      	lsls	r2, r3, #3
 8007734:	693b      	ldr	r3, [r7, #16]
 8007736:	18d3      	adds	r3, r2, r3
 8007738:	4acc      	ldr	r2, [pc, #816]	; (8007a6c <USB_EPStartXfer+0x3a8>)
 800773a:	4694      	mov	ip, r2
 800773c:	4463      	add	r3, ip
 800773e:	60fb      	str	r3, [r7, #12]
 8007740:	1d7b      	adds	r3, r7, #5
 8007742:	33ff      	adds	r3, #255	; 0xff
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	b29a      	uxth	r2, r3
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	801a      	strh	r2, [r3, #0]
 800774c:	f000 fc8f 	bl	800806e <USB_EPStartXfer+0x9aa>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8007750:	683b      	ldr	r3, [r7, #0]
 8007752:	78db      	ldrb	r3, [r3, #3]
 8007754:	2b02      	cmp	r3, #2
 8007756:	d000      	beq.n	800775a <USB_EPStartXfer+0x96>
 8007758:	e33a      	b.n	8007dd0 <USB_EPStartXfer+0x70c>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800775a:	683b      	ldr	r3, [r7, #0]
 800775c:	6a1a      	ldr	r2, [r3, #32]
 800775e:	683b      	ldr	r3, [r7, #0]
 8007760:	691b      	ldr	r3, [r3, #16]
 8007762:	429a      	cmp	r2, r3
 8007764:	d800      	bhi.n	8007768 <USB_EPStartXfer+0xa4>
 8007766:	e2df      	b.n	8007d28 <USB_EPStartXfer+0x664>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8007768:	687a      	ldr	r2, [r7, #4]
 800776a:	683b      	ldr	r3, [r7, #0]
 800776c:	781b      	ldrb	r3, [r3, #0]
 800776e:	009b      	lsls	r3, r3, #2
 8007770:	18d3      	adds	r3, r2, r3
 8007772:	881b      	ldrh	r3, [r3, #0]
 8007774:	b29a      	uxth	r2, r3
 8007776:	2056      	movs	r0, #86	; 0x56
 8007778:	183b      	adds	r3, r7, r0
 800777a:	49bd      	ldr	r1, [pc, #756]	; (8007a70 <USB_EPStartXfer+0x3ac>)
 800777c:	400a      	ands	r2, r1
 800777e:	801a      	strh	r2, [r3, #0]
 8007780:	687a      	ldr	r2, [r7, #4]
 8007782:	683b      	ldr	r3, [r7, #0]
 8007784:	781b      	ldrb	r3, [r3, #0]
 8007786:	009b      	lsls	r3, r3, #2
 8007788:	18d3      	adds	r3, r2, r3
 800778a:	183a      	adds	r2, r7, r0
 800778c:	8812      	ldrh	r2, [r2, #0]
 800778e:	49b9      	ldr	r1, [pc, #740]	; (8007a74 <USB_EPStartXfer+0x3b0>)
 8007790:	430a      	orrs	r2, r1
 8007792:	b292      	uxth	r2, r2
 8007794:	801a      	strh	r2, [r3, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8007796:	683b      	ldr	r3, [r7, #0]
 8007798:	6a1a      	ldr	r2, [r3, #32]
 800779a:	1d7b      	adds	r3, r7, #5
 800779c:	33ff      	adds	r3, #255	; 0xff
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	1ad2      	subs	r2, r2, r3
 80077a2:	683b      	ldr	r3, [r7, #0]
 80077a4:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80077a6:	687a      	ldr	r2, [r7, #4]
 80077a8:	683b      	ldr	r3, [r7, #0]
 80077aa:	781b      	ldrb	r3, [r3, #0]
 80077ac:	009b      	lsls	r3, r3, #2
 80077ae:	18d3      	adds	r3, r2, r3
 80077b0:	881b      	ldrh	r3, [r3, #0]
 80077b2:	b29b      	uxth	r3, r3
 80077b4:	001a      	movs	r2, r3
 80077b6:	2340      	movs	r3, #64	; 0x40
 80077b8:	4013      	ands	r3, r2
 80077ba:	d100      	bne.n	80077be <USB_EPStartXfer+0xfa>
 80077bc:	e162      	b.n	8007a84 <USB_EPStartXfer+0x3c0>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	633b      	str	r3, [r7, #48]	; 0x30
 80077c2:	683b      	ldr	r3, [r7, #0]
 80077c4:	785b      	ldrb	r3, [r3, #1]
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	d16a      	bne.n	80078a0 <USB_EPStartXfer+0x1dc>
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	62bb      	str	r3, [r7, #40]	; 0x28
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	2250      	movs	r2, #80	; 0x50
 80077d2:	5a9b      	ldrh	r3, [r3, r2]
 80077d4:	b29b      	uxth	r3, r3
 80077d6:	001a      	movs	r2, r3
 80077d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077da:	189b      	adds	r3, r3, r2
 80077dc:	62bb      	str	r3, [r7, #40]	; 0x28
 80077de:	683b      	ldr	r3, [r7, #0]
 80077e0:	781b      	ldrb	r3, [r3, #0]
 80077e2:	00da      	lsls	r2, r3, #3
 80077e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077e6:	18d3      	adds	r3, r2, r3
 80077e8:	4aa3      	ldr	r2, [pc, #652]	; (8007a78 <USB_EPStartXfer+0x3b4>)
 80077ea:	4694      	mov	ip, r2
 80077ec:	4463      	add	r3, ip
 80077ee:	627b      	str	r3, [r7, #36]	; 0x24
 80077f0:	1d7b      	adds	r3, r7, #5
 80077f2:	33ff      	adds	r3, #255	; 0xff
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d110      	bne.n	800781c <USB_EPStartXfer+0x158>
 80077fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077fc:	881b      	ldrh	r3, [r3, #0]
 80077fe:	b29b      	uxth	r3, r3
 8007800:	4a9e      	ldr	r2, [pc, #632]	; (8007a7c <USB_EPStartXfer+0x3b8>)
 8007802:	4013      	ands	r3, r2
 8007804:	b29a      	uxth	r2, r3
 8007806:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007808:	801a      	strh	r2, [r3, #0]
 800780a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800780c:	881b      	ldrh	r3, [r3, #0]
 800780e:	b29b      	uxth	r3, r3
 8007810:	4a9b      	ldr	r2, [pc, #620]	; (8007a80 <USB_EPStartXfer+0x3bc>)
 8007812:	4313      	orrs	r3, r2
 8007814:	b29a      	uxth	r2, r3
 8007816:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007818:	801a      	strh	r2, [r3, #0]
 800781a:	e05c      	b.n	80078d6 <USB_EPStartXfer+0x212>
 800781c:	1d7b      	adds	r3, r7, #5
 800781e:	33ff      	adds	r3, #255	; 0xff
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	2b3e      	cmp	r3, #62	; 0x3e
 8007824:	d81c      	bhi.n	8007860 <USB_EPStartXfer+0x19c>
 8007826:	1d7b      	adds	r3, r7, #5
 8007828:	33ff      	adds	r3, #255	; 0xff
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	085b      	lsrs	r3, r3, #1
 800782e:	1c7a      	adds	r2, r7, #1
 8007830:	32ff      	adds	r2, #255	; 0xff
 8007832:	6013      	str	r3, [r2, #0]
 8007834:	1d7b      	adds	r3, r7, #5
 8007836:	33ff      	adds	r3, #255	; 0xff
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	2201      	movs	r2, #1
 800783c:	4013      	ands	r3, r2
 800783e:	d006      	beq.n	800784e <USB_EPStartXfer+0x18a>
 8007840:	1c7b      	adds	r3, r7, #1
 8007842:	33ff      	adds	r3, #255	; 0xff
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	3301      	adds	r3, #1
 8007848:	1c7a      	adds	r2, r7, #1
 800784a:	32ff      	adds	r2, #255	; 0xff
 800784c:	6013      	str	r3, [r2, #0]
 800784e:	1c7b      	adds	r3, r7, #1
 8007850:	33ff      	adds	r3, #255	; 0xff
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	b29b      	uxth	r3, r3
 8007856:	029b      	lsls	r3, r3, #10
 8007858:	b29a      	uxth	r2, r3
 800785a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800785c:	801a      	strh	r2, [r3, #0]
 800785e:	e03a      	b.n	80078d6 <USB_EPStartXfer+0x212>
 8007860:	1d7b      	adds	r3, r7, #5
 8007862:	33ff      	adds	r3, #255	; 0xff
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	095b      	lsrs	r3, r3, #5
 8007868:	1c7a      	adds	r2, r7, #1
 800786a:	32ff      	adds	r2, #255	; 0xff
 800786c:	6013      	str	r3, [r2, #0]
 800786e:	1d7b      	adds	r3, r7, #5
 8007870:	33ff      	adds	r3, #255	; 0xff
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	221f      	movs	r2, #31
 8007876:	4013      	ands	r3, r2
 8007878:	d106      	bne.n	8007888 <USB_EPStartXfer+0x1c4>
 800787a:	1c7b      	adds	r3, r7, #1
 800787c:	33ff      	adds	r3, #255	; 0xff
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	3b01      	subs	r3, #1
 8007882:	1c7a      	adds	r2, r7, #1
 8007884:	32ff      	adds	r2, #255	; 0xff
 8007886:	6013      	str	r3, [r2, #0]
 8007888:	1c7b      	adds	r3, r7, #1
 800788a:	33ff      	adds	r3, #255	; 0xff
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	b29b      	uxth	r3, r3
 8007890:	029b      	lsls	r3, r3, #10
 8007892:	b29b      	uxth	r3, r3
 8007894:	4a7a      	ldr	r2, [pc, #488]	; (8007a80 <USB_EPStartXfer+0x3bc>)
 8007896:	4313      	orrs	r3, r2
 8007898:	b29a      	uxth	r2, r3
 800789a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800789c:	801a      	strh	r2, [r3, #0]
 800789e:	e01a      	b.n	80078d6 <USB_EPStartXfer+0x212>
 80078a0:	683b      	ldr	r3, [r7, #0]
 80078a2:	785b      	ldrb	r3, [r3, #1]
 80078a4:	2b01      	cmp	r3, #1
 80078a6:	d116      	bne.n	80078d6 <USB_EPStartXfer+0x212>
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	2250      	movs	r2, #80	; 0x50
 80078ac:	5a9b      	ldrh	r3, [r3, r2]
 80078ae:	b29b      	uxth	r3, r3
 80078b0:	001a      	movs	r2, r3
 80078b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078b4:	189b      	adds	r3, r3, r2
 80078b6:	633b      	str	r3, [r7, #48]	; 0x30
 80078b8:	683b      	ldr	r3, [r7, #0]
 80078ba:	781b      	ldrb	r3, [r3, #0]
 80078bc:	00da      	lsls	r2, r3, #3
 80078be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078c0:	18d3      	adds	r3, r2, r3
 80078c2:	4a6d      	ldr	r2, [pc, #436]	; (8007a78 <USB_EPStartXfer+0x3b4>)
 80078c4:	4694      	mov	ip, r2
 80078c6:	4463      	add	r3, ip
 80078c8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80078ca:	1d7b      	adds	r3, r7, #5
 80078cc:	33ff      	adds	r3, #255	; 0xff
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	b29a      	uxth	r2, r3
 80078d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078d4:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80078d6:	2076      	movs	r0, #118	; 0x76
 80078d8:	183b      	adds	r3, r7, r0
 80078da:	683a      	ldr	r2, [r7, #0]
 80078dc:	8952      	ldrh	r2, [r2, #10]
 80078de:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80078e0:	683b      	ldr	r3, [r7, #0]
 80078e2:	6959      	ldr	r1, [r3, #20]
 80078e4:	1d7b      	adds	r3, r7, #5
 80078e6:	33ff      	adds	r3, #255	; 0xff
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	b29c      	uxth	r4, r3
 80078ec:	183b      	adds	r3, r7, r0
 80078ee:	881a      	ldrh	r2, [r3, #0]
 80078f0:	6878      	ldr	r0, [r7, #4]
 80078f2:	0023      	movs	r3, r4
 80078f4:	f001 f8da 	bl	8008aac <USB_WritePMA>
            ep->xfer_buff += len;
 80078f8:	683b      	ldr	r3, [r7, #0]
 80078fa:	695a      	ldr	r2, [r3, #20]
 80078fc:	1d7b      	adds	r3, r7, #5
 80078fe:	33ff      	adds	r3, #255	; 0xff
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	18d2      	adds	r2, r2, r3
 8007904:	683b      	ldr	r3, [r7, #0]
 8007906:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8007908:	683b      	ldr	r3, [r7, #0]
 800790a:	6a1a      	ldr	r2, [r3, #32]
 800790c:	683b      	ldr	r3, [r7, #0]
 800790e:	691b      	ldr	r3, [r3, #16]
 8007910:	429a      	cmp	r2, r3
 8007912:	d908      	bls.n	8007926 <USB_EPStartXfer+0x262>
            {
              ep->xfer_len_db -= len;
 8007914:	683b      	ldr	r3, [r7, #0]
 8007916:	6a1a      	ldr	r2, [r3, #32]
 8007918:	1d7b      	adds	r3, r7, #5
 800791a:	33ff      	adds	r3, #255	; 0xff
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	1ad2      	subs	r2, r2, r3
 8007920:	683b      	ldr	r3, [r7, #0]
 8007922:	621a      	str	r2, [r3, #32]
 8007924:	e007      	b.n	8007936 <USB_EPStartXfer+0x272>
            }
            else
            {
              len = ep->xfer_len_db;
 8007926:	683b      	ldr	r3, [r7, #0]
 8007928:	6a1b      	ldr	r3, [r3, #32]
 800792a:	1d7a      	adds	r2, r7, #5
 800792c:	32ff      	adds	r2, #255	; 0xff
 800792e:	6013      	str	r3, [r2, #0]
              ep->xfer_len_db = 0U;
 8007930:	683b      	ldr	r3, [r7, #0]
 8007932:	2200      	movs	r2, #0
 8007934:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007936:	683b      	ldr	r3, [r7, #0]
 8007938:	785b      	ldrb	r3, [r3, #1]
 800793a:	2b00      	cmp	r3, #0
 800793c:	d166      	bne.n	8007a0c <USB_EPStartXfer+0x348>
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	61bb      	str	r3, [r7, #24]
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	2250      	movs	r2, #80	; 0x50
 8007946:	5a9b      	ldrh	r3, [r3, r2]
 8007948:	b29b      	uxth	r3, r3
 800794a:	001a      	movs	r2, r3
 800794c:	69bb      	ldr	r3, [r7, #24]
 800794e:	189b      	adds	r3, r3, r2
 8007950:	61bb      	str	r3, [r7, #24]
 8007952:	683b      	ldr	r3, [r7, #0]
 8007954:	781b      	ldrb	r3, [r3, #0]
 8007956:	00da      	lsls	r2, r3, #3
 8007958:	69bb      	ldr	r3, [r7, #24]
 800795a:	18d3      	adds	r3, r2, r3
 800795c:	4a43      	ldr	r2, [pc, #268]	; (8007a6c <USB_EPStartXfer+0x3a8>)
 800795e:	4694      	mov	ip, r2
 8007960:	4463      	add	r3, ip
 8007962:	617b      	str	r3, [r7, #20]
 8007964:	1d7b      	adds	r3, r7, #5
 8007966:	33ff      	adds	r3, #255	; 0xff
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	2b00      	cmp	r3, #0
 800796c:	d110      	bne.n	8007990 <USB_EPStartXfer+0x2cc>
 800796e:	697b      	ldr	r3, [r7, #20]
 8007970:	881b      	ldrh	r3, [r3, #0]
 8007972:	b29b      	uxth	r3, r3
 8007974:	4a41      	ldr	r2, [pc, #260]	; (8007a7c <USB_EPStartXfer+0x3b8>)
 8007976:	4013      	ands	r3, r2
 8007978:	b29a      	uxth	r2, r3
 800797a:	697b      	ldr	r3, [r7, #20]
 800797c:	801a      	strh	r2, [r3, #0]
 800797e:	697b      	ldr	r3, [r7, #20]
 8007980:	881b      	ldrh	r3, [r3, #0]
 8007982:	b29b      	uxth	r3, r3
 8007984:	4a3e      	ldr	r2, [pc, #248]	; (8007a80 <USB_EPStartXfer+0x3bc>)
 8007986:	4313      	orrs	r3, r2
 8007988:	b29a      	uxth	r2, r3
 800798a:	697b      	ldr	r3, [r7, #20]
 800798c:	801a      	strh	r2, [r3, #0]
 800798e:	e05a      	b.n	8007a46 <USB_EPStartXfer+0x382>
 8007990:	1d7b      	adds	r3, r7, #5
 8007992:	33ff      	adds	r3, #255	; 0xff
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	2b3e      	cmp	r3, #62	; 0x3e
 8007998:	d81a      	bhi.n	80079d0 <USB_EPStartXfer+0x30c>
 800799a:	1d7b      	adds	r3, r7, #5
 800799c:	33ff      	adds	r3, #255	; 0xff
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	085b      	lsrs	r3, r3, #1
 80079a2:	21fc      	movs	r1, #252	; 0xfc
 80079a4:	187a      	adds	r2, r7, r1
 80079a6:	6013      	str	r3, [r2, #0]
 80079a8:	1d7b      	adds	r3, r7, #5
 80079aa:	33ff      	adds	r3, #255	; 0xff
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	2201      	movs	r2, #1
 80079b0:	4013      	ands	r3, r2
 80079b2:	d004      	beq.n	80079be <USB_EPStartXfer+0x2fa>
 80079b4:	187b      	adds	r3, r7, r1
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	3301      	adds	r3, #1
 80079ba:	187a      	adds	r2, r7, r1
 80079bc:	6013      	str	r3, [r2, #0]
 80079be:	23fc      	movs	r3, #252	; 0xfc
 80079c0:	18fb      	adds	r3, r7, r3
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	b29b      	uxth	r3, r3
 80079c6:	029b      	lsls	r3, r3, #10
 80079c8:	b29a      	uxth	r2, r3
 80079ca:	697b      	ldr	r3, [r7, #20]
 80079cc:	801a      	strh	r2, [r3, #0]
 80079ce:	e03a      	b.n	8007a46 <USB_EPStartXfer+0x382>
 80079d0:	1d7b      	adds	r3, r7, #5
 80079d2:	33ff      	adds	r3, #255	; 0xff
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	095b      	lsrs	r3, r3, #5
 80079d8:	21fc      	movs	r1, #252	; 0xfc
 80079da:	187a      	adds	r2, r7, r1
 80079dc:	6013      	str	r3, [r2, #0]
 80079de:	1d7b      	adds	r3, r7, #5
 80079e0:	33ff      	adds	r3, #255	; 0xff
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	221f      	movs	r2, #31
 80079e6:	4013      	ands	r3, r2
 80079e8:	d104      	bne.n	80079f4 <USB_EPStartXfer+0x330>
 80079ea:	187b      	adds	r3, r7, r1
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	3b01      	subs	r3, #1
 80079f0:	187a      	adds	r2, r7, r1
 80079f2:	6013      	str	r3, [r2, #0]
 80079f4:	23fc      	movs	r3, #252	; 0xfc
 80079f6:	18fb      	adds	r3, r7, r3
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	b29b      	uxth	r3, r3
 80079fc:	029b      	lsls	r3, r3, #10
 80079fe:	b29b      	uxth	r3, r3
 8007a00:	4a1f      	ldr	r2, [pc, #124]	; (8007a80 <USB_EPStartXfer+0x3bc>)
 8007a02:	4313      	orrs	r3, r2
 8007a04:	b29a      	uxth	r2, r3
 8007a06:	697b      	ldr	r3, [r7, #20]
 8007a08:	801a      	strh	r2, [r3, #0]
 8007a0a:	e01c      	b.n	8007a46 <USB_EPStartXfer+0x382>
 8007a0c:	683b      	ldr	r3, [r7, #0]
 8007a0e:	785b      	ldrb	r3, [r3, #1]
 8007a10:	2b01      	cmp	r3, #1
 8007a12:	d118      	bne.n	8007a46 <USB_EPStartXfer+0x382>
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	623b      	str	r3, [r7, #32]
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	2250      	movs	r2, #80	; 0x50
 8007a1c:	5a9b      	ldrh	r3, [r3, r2]
 8007a1e:	b29b      	uxth	r3, r3
 8007a20:	001a      	movs	r2, r3
 8007a22:	6a3b      	ldr	r3, [r7, #32]
 8007a24:	189b      	adds	r3, r3, r2
 8007a26:	623b      	str	r3, [r7, #32]
 8007a28:	683b      	ldr	r3, [r7, #0]
 8007a2a:	781b      	ldrb	r3, [r3, #0]
 8007a2c:	00da      	lsls	r2, r3, #3
 8007a2e:	6a3b      	ldr	r3, [r7, #32]
 8007a30:	18d3      	adds	r3, r2, r3
 8007a32:	4a0e      	ldr	r2, [pc, #56]	; (8007a6c <USB_EPStartXfer+0x3a8>)
 8007a34:	4694      	mov	ip, r2
 8007a36:	4463      	add	r3, ip
 8007a38:	61fb      	str	r3, [r7, #28]
 8007a3a:	1d7b      	adds	r3, r7, #5
 8007a3c:	33ff      	adds	r3, #255	; 0xff
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	b29a      	uxth	r2, r3
 8007a42:	69fb      	ldr	r3, [r7, #28]
 8007a44:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8007a46:	2076      	movs	r0, #118	; 0x76
 8007a48:	183b      	adds	r3, r7, r0
 8007a4a:	683a      	ldr	r2, [r7, #0]
 8007a4c:	8912      	ldrh	r2, [r2, #8]
 8007a4e:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007a50:	683b      	ldr	r3, [r7, #0]
 8007a52:	6959      	ldr	r1, [r3, #20]
 8007a54:	1d7b      	adds	r3, r7, #5
 8007a56:	33ff      	adds	r3, #255	; 0xff
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	b29c      	uxth	r4, r3
 8007a5c:	183b      	adds	r3, r7, r0
 8007a5e:	881a      	ldrh	r2, [r3, #0]
 8007a60:	6878      	ldr	r0, [r7, #4]
 8007a62:	0023      	movs	r3, r4
 8007a64:	f001 f822 	bl	8008aac <USB_WritePMA>
 8007a68:	e301      	b.n	800806e <USB_EPStartXfer+0x9aa>
 8007a6a:	46c0      	nop			; (mov r8, r8)
 8007a6c:	00000402 	.word	0x00000402
 8007a70:	ffff8f8f 	.word	0xffff8f8f
 8007a74:	ffff8180 	.word	0xffff8180
 8007a78:	00000406 	.word	0x00000406
 8007a7c:	ffff83ff 	.word	0xffff83ff
 8007a80:	ffff8000 	.word	0xffff8000
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007a84:	683b      	ldr	r3, [r7, #0]
 8007a86:	785b      	ldrb	r3, [r3, #1]
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	d166      	bne.n	8007b5a <USB_EPStartXfer+0x496>
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	64bb      	str	r3, [r7, #72]	; 0x48
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	2250      	movs	r2, #80	; 0x50
 8007a94:	5a9b      	ldrh	r3, [r3, r2]
 8007a96:	b29b      	uxth	r3, r3
 8007a98:	001a      	movs	r2, r3
 8007a9a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007a9c:	189b      	adds	r3, r3, r2
 8007a9e:	64bb      	str	r3, [r7, #72]	; 0x48
 8007aa0:	683b      	ldr	r3, [r7, #0]
 8007aa2:	781b      	ldrb	r3, [r3, #0]
 8007aa4:	00da      	lsls	r2, r3, #3
 8007aa6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007aa8:	18d3      	adds	r3, r2, r3
 8007aaa:	4ac3      	ldr	r2, [pc, #780]	; (8007db8 <USB_EPStartXfer+0x6f4>)
 8007aac:	4694      	mov	ip, r2
 8007aae:	4463      	add	r3, ip
 8007ab0:	647b      	str	r3, [r7, #68]	; 0x44
 8007ab2:	1d7b      	adds	r3, r7, #5
 8007ab4:	33ff      	adds	r3, #255	; 0xff
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	d110      	bne.n	8007ade <USB_EPStartXfer+0x41a>
 8007abc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007abe:	881b      	ldrh	r3, [r3, #0]
 8007ac0:	b29b      	uxth	r3, r3
 8007ac2:	4abe      	ldr	r2, [pc, #760]	; (8007dbc <USB_EPStartXfer+0x6f8>)
 8007ac4:	4013      	ands	r3, r2
 8007ac6:	b29a      	uxth	r2, r3
 8007ac8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007aca:	801a      	strh	r2, [r3, #0]
 8007acc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007ace:	881b      	ldrh	r3, [r3, #0]
 8007ad0:	b29b      	uxth	r3, r3
 8007ad2:	4abb      	ldr	r2, [pc, #748]	; (8007dc0 <USB_EPStartXfer+0x6fc>)
 8007ad4:	4313      	orrs	r3, r2
 8007ad6:	b29a      	uxth	r2, r3
 8007ad8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007ada:	801a      	strh	r2, [r3, #0]
 8007adc:	e05a      	b.n	8007b94 <USB_EPStartXfer+0x4d0>
 8007ade:	1d7b      	adds	r3, r7, #5
 8007ae0:	33ff      	adds	r3, #255	; 0xff
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	2b3e      	cmp	r3, #62	; 0x3e
 8007ae6:	d81a      	bhi.n	8007b1e <USB_EPStartXfer+0x45a>
 8007ae8:	1d7b      	adds	r3, r7, #5
 8007aea:	33ff      	adds	r3, #255	; 0xff
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	085b      	lsrs	r3, r3, #1
 8007af0:	21f8      	movs	r1, #248	; 0xf8
 8007af2:	187a      	adds	r2, r7, r1
 8007af4:	6013      	str	r3, [r2, #0]
 8007af6:	1d7b      	adds	r3, r7, #5
 8007af8:	33ff      	adds	r3, #255	; 0xff
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	2201      	movs	r2, #1
 8007afe:	4013      	ands	r3, r2
 8007b00:	d004      	beq.n	8007b0c <USB_EPStartXfer+0x448>
 8007b02:	187b      	adds	r3, r7, r1
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	3301      	adds	r3, #1
 8007b08:	187a      	adds	r2, r7, r1
 8007b0a:	6013      	str	r3, [r2, #0]
 8007b0c:	23f8      	movs	r3, #248	; 0xf8
 8007b0e:	18fb      	adds	r3, r7, r3
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	b29b      	uxth	r3, r3
 8007b14:	029b      	lsls	r3, r3, #10
 8007b16:	b29a      	uxth	r2, r3
 8007b18:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007b1a:	801a      	strh	r2, [r3, #0]
 8007b1c:	e03a      	b.n	8007b94 <USB_EPStartXfer+0x4d0>
 8007b1e:	1d7b      	adds	r3, r7, #5
 8007b20:	33ff      	adds	r3, #255	; 0xff
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	095b      	lsrs	r3, r3, #5
 8007b26:	21f8      	movs	r1, #248	; 0xf8
 8007b28:	187a      	adds	r2, r7, r1
 8007b2a:	6013      	str	r3, [r2, #0]
 8007b2c:	1d7b      	adds	r3, r7, #5
 8007b2e:	33ff      	adds	r3, #255	; 0xff
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	221f      	movs	r2, #31
 8007b34:	4013      	ands	r3, r2
 8007b36:	d104      	bne.n	8007b42 <USB_EPStartXfer+0x47e>
 8007b38:	187b      	adds	r3, r7, r1
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	3b01      	subs	r3, #1
 8007b3e:	187a      	adds	r2, r7, r1
 8007b40:	6013      	str	r3, [r2, #0]
 8007b42:	23f8      	movs	r3, #248	; 0xf8
 8007b44:	18fb      	adds	r3, r7, r3
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	b29b      	uxth	r3, r3
 8007b4a:	029b      	lsls	r3, r3, #10
 8007b4c:	b29b      	uxth	r3, r3
 8007b4e:	4a9c      	ldr	r2, [pc, #624]	; (8007dc0 <USB_EPStartXfer+0x6fc>)
 8007b50:	4313      	orrs	r3, r2
 8007b52:	b29a      	uxth	r2, r3
 8007b54:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007b56:	801a      	strh	r2, [r3, #0]
 8007b58:	e01c      	b.n	8007b94 <USB_EPStartXfer+0x4d0>
 8007b5a:	683b      	ldr	r3, [r7, #0]
 8007b5c:	785b      	ldrb	r3, [r3, #1]
 8007b5e:	2b01      	cmp	r3, #1
 8007b60:	d118      	bne.n	8007b94 <USB_EPStartXfer+0x4d0>
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	653b      	str	r3, [r7, #80]	; 0x50
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	2250      	movs	r2, #80	; 0x50
 8007b6a:	5a9b      	ldrh	r3, [r3, r2]
 8007b6c:	b29b      	uxth	r3, r3
 8007b6e:	001a      	movs	r2, r3
 8007b70:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007b72:	189b      	adds	r3, r3, r2
 8007b74:	653b      	str	r3, [r7, #80]	; 0x50
 8007b76:	683b      	ldr	r3, [r7, #0]
 8007b78:	781b      	ldrb	r3, [r3, #0]
 8007b7a:	00da      	lsls	r2, r3, #3
 8007b7c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007b7e:	18d3      	adds	r3, r2, r3
 8007b80:	4a8d      	ldr	r2, [pc, #564]	; (8007db8 <USB_EPStartXfer+0x6f4>)
 8007b82:	4694      	mov	ip, r2
 8007b84:	4463      	add	r3, ip
 8007b86:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007b88:	1d7b      	adds	r3, r7, #5
 8007b8a:	33ff      	adds	r3, #255	; 0xff
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	b29a      	uxth	r2, r3
 8007b90:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007b92:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8007b94:	2076      	movs	r0, #118	; 0x76
 8007b96:	183b      	adds	r3, r7, r0
 8007b98:	683a      	ldr	r2, [r7, #0]
 8007b9a:	8912      	ldrh	r2, [r2, #8]
 8007b9c:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007b9e:	683b      	ldr	r3, [r7, #0]
 8007ba0:	6959      	ldr	r1, [r3, #20]
 8007ba2:	1d7b      	adds	r3, r7, #5
 8007ba4:	33ff      	adds	r3, #255	; 0xff
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	b29c      	uxth	r4, r3
 8007baa:	183b      	adds	r3, r7, r0
 8007bac:	881a      	ldrh	r2, [r3, #0]
 8007bae:	6878      	ldr	r0, [r7, #4]
 8007bb0:	0023      	movs	r3, r4
 8007bb2:	f000 ff7b 	bl	8008aac <USB_WritePMA>
            ep->xfer_buff += len;
 8007bb6:	683b      	ldr	r3, [r7, #0]
 8007bb8:	695a      	ldr	r2, [r3, #20]
 8007bba:	1d7b      	adds	r3, r7, #5
 8007bbc:	33ff      	adds	r3, #255	; 0xff
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	18d2      	adds	r2, r2, r3
 8007bc2:	683b      	ldr	r3, [r7, #0]
 8007bc4:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8007bc6:	683b      	ldr	r3, [r7, #0]
 8007bc8:	6a1a      	ldr	r2, [r3, #32]
 8007bca:	683b      	ldr	r3, [r7, #0]
 8007bcc:	691b      	ldr	r3, [r3, #16]
 8007bce:	429a      	cmp	r2, r3
 8007bd0:	d908      	bls.n	8007be4 <USB_EPStartXfer+0x520>
            {
              ep->xfer_len_db -= len;
 8007bd2:	683b      	ldr	r3, [r7, #0]
 8007bd4:	6a1a      	ldr	r2, [r3, #32]
 8007bd6:	1d7b      	adds	r3, r7, #5
 8007bd8:	33ff      	adds	r3, #255	; 0xff
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	1ad2      	subs	r2, r2, r3
 8007bde:	683b      	ldr	r3, [r7, #0]
 8007be0:	621a      	str	r2, [r3, #32]
 8007be2:	e007      	b.n	8007bf4 <USB_EPStartXfer+0x530>
            }
            else
            {
              len = ep->xfer_len_db;
 8007be4:	683b      	ldr	r3, [r7, #0]
 8007be6:	6a1b      	ldr	r3, [r3, #32]
 8007be8:	1d7a      	adds	r2, r7, #5
 8007bea:	32ff      	adds	r2, #255	; 0xff
 8007bec:	6013      	str	r3, [r2, #0]
              ep->xfer_len_db = 0U;
 8007bee:	683b      	ldr	r3, [r7, #0]
 8007bf0:	2200      	movs	r2, #0
 8007bf2:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	643b      	str	r3, [r7, #64]	; 0x40
 8007bf8:	683b      	ldr	r3, [r7, #0]
 8007bfa:	785b      	ldrb	r3, [r3, #1]
 8007bfc:	2b00      	cmp	r3, #0
 8007bfe:	d166      	bne.n	8007cce <USB_EPStartXfer+0x60a>
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	63bb      	str	r3, [r7, #56]	; 0x38
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	2250      	movs	r2, #80	; 0x50
 8007c08:	5a9b      	ldrh	r3, [r3, r2]
 8007c0a:	b29b      	uxth	r3, r3
 8007c0c:	001a      	movs	r2, r3
 8007c0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c10:	189b      	adds	r3, r3, r2
 8007c12:	63bb      	str	r3, [r7, #56]	; 0x38
 8007c14:	683b      	ldr	r3, [r7, #0]
 8007c16:	781b      	ldrb	r3, [r3, #0]
 8007c18:	00da      	lsls	r2, r3, #3
 8007c1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c1c:	18d3      	adds	r3, r2, r3
 8007c1e:	4a69      	ldr	r2, [pc, #420]	; (8007dc4 <USB_EPStartXfer+0x700>)
 8007c20:	4694      	mov	ip, r2
 8007c22:	4463      	add	r3, ip
 8007c24:	637b      	str	r3, [r7, #52]	; 0x34
 8007c26:	1d7b      	adds	r3, r7, #5
 8007c28:	33ff      	adds	r3, #255	; 0xff
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	d110      	bne.n	8007c52 <USB_EPStartXfer+0x58e>
 8007c30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c32:	881b      	ldrh	r3, [r3, #0]
 8007c34:	b29b      	uxth	r3, r3
 8007c36:	4a61      	ldr	r2, [pc, #388]	; (8007dbc <USB_EPStartXfer+0x6f8>)
 8007c38:	4013      	ands	r3, r2
 8007c3a:	b29a      	uxth	r2, r3
 8007c3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c3e:	801a      	strh	r2, [r3, #0]
 8007c40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c42:	881b      	ldrh	r3, [r3, #0]
 8007c44:	b29b      	uxth	r3, r3
 8007c46:	4a5e      	ldr	r2, [pc, #376]	; (8007dc0 <USB_EPStartXfer+0x6fc>)
 8007c48:	4313      	orrs	r3, r2
 8007c4a:	b29a      	uxth	r2, r3
 8007c4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c4e:	801a      	strh	r2, [r3, #0]
 8007c50:	e058      	b.n	8007d04 <USB_EPStartXfer+0x640>
 8007c52:	1d7b      	adds	r3, r7, #5
 8007c54:	33ff      	adds	r3, #255	; 0xff
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	2b3e      	cmp	r3, #62	; 0x3e
 8007c5a:	d81a      	bhi.n	8007c92 <USB_EPStartXfer+0x5ce>
 8007c5c:	1d7b      	adds	r3, r7, #5
 8007c5e:	33ff      	adds	r3, #255	; 0xff
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	085b      	lsrs	r3, r3, #1
 8007c64:	21f4      	movs	r1, #244	; 0xf4
 8007c66:	187a      	adds	r2, r7, r1
 8007c68:	6013      	str	r3, [r2, #0]
 8007c6a:	1d7b      	adds	r3, r7, #5
 8007c6c:	33ff      	adds	r3, #255	; 0xff
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	2201      	movs	r2, #1
 8007c72:	4013      	ands	r3, r2
 8007c74:	d004      	beq.n	8007c80 <USB_EPStartXfer+0x5bc>
 8007c76:	187b      	adds	r3, r7, r1
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	3301      	adds	r3, #1
 8007c7c:	187a      	adds	r2, r7, r1
 8007c7e:	6013      	str	r3, [r2, #0]
 8007c80:	23f4      	movs	r3, #244	; 0xf4
 8007c82:	18fb      	adds	r3, r7, r3
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	b29b      	uxth	r3, r3
 8007c88:	029b      	lsls	r3, r3, #10
 8007c8a:	b29a      	uxth	r2, r3
 8007c8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c8e:	801a      	strh	r2, [r3, #0]
 8007c90:	e038      	b.n	8007d04 <USB_EPStartXfer+0x640>
 8007c92:	1d7b      	adds	r3, r7, #5
 8007c94:	33ff      	adds	r3, #255	; 0xff
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	095b      	lsrs	r3, r3, #5
 8007c9a:	21f4      	movs	r1, #244	; 0xf4
 8007c9c:	187a      	adds	r2, r7, r1
 8007c9e:	6013      	str	r3, [r2, #0]
 8007ca0:	1d7b      	adds	r3, r7, #5
 8007ca2:	33ff      	adds	r3, #255	; 0xff
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	221f      	movs	r2, #31
 8007ca8:	4013      	ands	r3, r2
 8007caa:	d104      	bne.n	8007cb6 <USB_EPStartXfer+0x5f2>
 8007cac:	187b      	adds	r3, r7, r1
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	3b01      	subs	r3, #1
 8007cb2:	187a      	adds	r2, r7, r1
 8007cb4:	6013      	str	r3, [r2, #0]
 8007cb6:	23f4      	movs	r3, #244	; 0xf4
 8007cb8:	18fb      	adds	r3, r7, r3
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	b29b      	uxth	r3, r3
 8007cbe:	029b      	lsls	r3, r3, #10
 8007cc0:	b29b      	uxth	r3, r3
 8007cc2:	4a3f      	ldr	r2, [pc, #252]	; (8007dc0 <USB_EPStartXfer+0x6fc>)
 8007cc4:	4313      	orrs	r3, r2
 8007cc6:	b29a      	uxth	r2, r3
 8007cc8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007cca:	801a      	strh	r2, [r3, #0]
 8007ccc:	e01a      	b.n	8007d04 <USB_EPStartXfer+0x640>
 8007cce:	683b      	ldr	r3, [r7, #0]
 8007cd0:	785b      	ldrb	r3, [r3, #1]
 8007cd2:	2b01      	cmp	r3, #1
 8007cd4:	d116      	bne.n	8007d04 <USB_EPStartXfer+0x640>
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	2250      	movs	r2, #80	; 0x50
 8007cda:	5a9b      	ldrh	r3, [r3, r2]
 8007cdc:	b29b      	uxth	r3, r3
 8007cde:	001a      	movs	r2, r3
 8007ce0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007ce2:	189b      	adds	r3, r3, r2
 8007ce4:	643b      	str	r3, [r7, #64]	; 0x40
 8007ce6:	683b      	ldr	r3, [r7, #0]
 8007ce8:	781b      	ldrb	r3, [r3, #0]
 8007cea:	00da      	lsls	r2, r3, #3
 8007cec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007cee:	18d3      	adds	r3, r2, r3
 8007cf0:	4a34      	ldr	r2, [pc, #208]	; (8007dc4 <USB_EPStartXfer+0x700>)
 8007cf2:	4694      	mov	ip, r2
 8007cf4:	4463      	add	r3, ip
 8007cf6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007cf8:	1d7b      	adds	r3, r7, #5
 8007cfa:	33ff      	adds	r3, #255	; 0xff
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	b29a      	uxth	r2, r3
 8007d00:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007d02:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8007d04:	2076      	movs	r0, #118	; 0x76
 8007d06:	183b      	adds	r3, r7, r0
 8007d08:	683a      	ldr	r2, [r7, #0]
 8007d0a:	8952      	ldrh	r2, [r2, #10]
 8007d0c:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007d0e:	683b      	ldr	r3, [r7, #0]
 8007d10:	6959      	ldr	r1, [r3, #20]
 8007d12:	1d7b      	adds	r3, r7, #5
 8007d14:	33ff      	adds	r3, #255	; 0xff
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	b29c      	uxth	r4, r3
 8007d1a:	183b      	adds	r3, r7, r0
 8007d1c:	881a      	ldrh	r2, [r3, #0]
 8007d1e:	6878      	ldr	r0, [r7, #4]
 8007d20:	0023      	movs	r3, r4
 8007d22:	f000 fec3 	bl	8008aac <USB_WritePMA>
 8007d26:	e1a2      	b.n	800806e <USB_EPStartXfer+0x9aa>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8007d28:	683b      	ldr	r3, [r7, #0]
 8007d2a:	6a1b      	ldr	r3, [r3, #32]
 8007d2c:	1d7a      	adds	r2, r7, #5
 8007d2e:	32ff      	adds	r2, #255	; 0xff
 8007d30:	6013      	str	r3, [r2, #0]

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8007d32:	687a      	ldr	r2, [r7, #4]
 8007d34:	683b      	ldr	r3, [r7, #0]
 8007d36:	781b      	ldrb	r3, [r3, #0]
 8007d38:	009b      	lsls	r3, r3, #2
 8007d3a:	18d3      	adds	r3, r2, r3
 8007d3c:	881b      	ldrh	r3, [r3, #0]
 8007d3e:	b29a      	uxth	r2, r3
 8007d40:	2062      	movs	r0, #98	; 0x62
 8007d42:	183b      	adds	r3, r7, r0
 8007d44:	4920      	ldr	r1, [pc, #128]	; (8007dc8 <USB_EPStartXfer+0x704>)
 8007d46:	400a      	ands	r2, r1
 8007d48:	801a      	strh	r2, [r3, #0]
 8007d4a:	687a      	ldr	r2, [r7, #4]
 8007d4c:	683b      	ldr	r3, [r7, #0]
 8007d4e:	781b      	ldrb	r3, [r3, #0]
 8007d50:	009b      	lsls	r3, r3, #2
 8007d52:	18d3      	adds	r3, r2, r3
 8007d54:	183a      	adds	r2, r7, r0
 8007d56:	8812      	ldrh	r2, [r2, #0]
 8007d58:	491c      	ldr	r1, [pc, #112]	; (8007dcc <USB_EPStartXfer+0x708>)
 8007d5a:	430a      	orrs	r2, r1
 8007d5c:	b292      	uxth	r2, r2
 8007d5e:	801a      	strh	r2, [r3, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	2250      	movs	r2, #80	; 0x50
 8007d68:	5a9b      	ldrh	r3, [r3, r2]
 8007d6a:	b29b      	uxth	r3, r3
 8007d6c:	001a      	movs	r2, r3
 8007d6e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007d70:	189b      	adds	r3, r3, r2
 8007d72:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007d74:	683b      	ldr	r3, [r7, #0]
 8007d76:	781b      	ldrb	r3, [r3, #0]
 8007d78:	00da      	lsls	r2, r3, #3
 8007d7a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007d7c:	18d3      	adds	r3, r2, r3
 8007d7e:	4a0e      	ldr	r2, [pc, #56]	; (8007db8 <USB_EPStartXfer+0x6f4>)
 8007d80:	4694      	mov	ip, r2
 8007d82:	4463      	add	r3, ip
 8007d84:	65bb      	str	r3, [r7, #88]	; 0x58
 8007d86:	1d7b      	adds	r3, r7, #5
 8007d88:	33ff      	adds	r3, #255	; 0xff
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	b29a      	uxth	r2, r3
 8007d8e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007d90:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8007d92:	2076      	movs	r0, #118	; 0x76
 8007d94:	183b      	adds	r3, r7, r0
 8007d96:	683a      	ldr	r2, [r7, #0]
 8007d98:	8912      	ldrh	r2, [r2, #8]
 8007d9a:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007d9c:	683b      	ldr	r3, [r7, #0]
 8007d9e:	6959      	ldr	r1, [r3, #20]
 8007da0:	1d7b      	adds	r3, r7, #5
 8007da2:	33ff      	adds	r3, #255	; 0xff
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	b29c      	uxth	r4, r3
 8007da8:	183b      	adds	r3, r7, r0
 8007daa:	881a      	ldrh	r2, [r3, #0]
 8007dac:	6878      	ldr	r0, [r7, #4]
 8007dae:	0023      	movs	r3, r4
 8007db0:	f000 fe7c 	bl	8008aac <USB_WritePMA>
 8007db4:	e15b      	b.n	800806e <USB_EPStartXfer+0x9aa>
 8007db6:	46c0      	nop			; (mov r8, r8)
 8007db8:	00000402 	.word	0x00000402
 8007dbc:	ffff83ff 	.word	0xffff83ff
 8007dc0:	ffff8000 	.word	0xffff8000
 8007dc4:	00000406 	.word	0x00000406
 8007dc8:	ffff8e8f 	.word	0xffff8e8f
 8007dcc:	ffff8080 	.word	0xffff8080
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8007dd0:	683b      	ldr	r3, [r7, #0]
 8007dd2:	6a1a      	ldr	r2, [r3, #32]
 8007dd4:	1d7b      	adds	r3, r7, #5
 8007dd6:	33ff      	adds	r3, #255	; 0xff
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	1ad2      	subs	r2, r2, r3
 8007ddc:	683b      	ldr	r3, [r7, #0]
 8007dde:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8007de0:	687a      	ldr	r2, [r7, #4]
 8007de2:	683b      	ldr	r3, [r7, #0]
 8007de4:	781b      	ldrb	r3, [r3, #0]
 8007de6:	009b      	lsls	r3, r3, #2
 8007de8:	18d3      	adds	r3, r2, r3
 8007dea:	881b      	ldrh	r3, [r3, #0]
 8007dec:	b29b      	uxth	r3, r3
 8007dee:	001a      	movs	r2, r3
 8007df0:	2340      	movs	r3, #64	; 0x40
 8007df2:	4013      	ands	r3, r2
 8007df4:	d100      	bne.n	8007df8 <USB_EPStartXfer+0x734>
 8007df6:	e099      	b.n	8007f2c <USB_EPStartXfer+0x868>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	673b      	str	r3, [r7, #112]	; 0x70
 8007dfc:	683b      	ldr	r3, [r7, #0]
 8007dfe:	785b      	ldrb	r3, [r3, #1]
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	d166      	bne.n	8007ed2 <USB_EPStartXfer+0x80e>
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	66bb      	str	r3, [r7, #104]	; 0x68
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	2250      	movs	r2, #80	; 0x50
 8007e0c:	5a9b      	ldrh	r3, [r3, r2]
 8007e0e:	b29b      	uxth	r3, r3
 8007e10:	001a      	movs	r2, r3
 8007e12:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007e14:	189b      	adds	r3, r3, r2
 8007e16:	66bb      	str	r3, [r7, #104]	; 0x68
 8007e18:	683b      	ldr	r3, [r7, #0]
 8007e1a:	781b      	ldrb	r3, [r3, #0]
 8007e1c:	00da      	lsls	r2, r3, #3
 8007e1e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007e20:	18d3      	adds	r3, r2, r3
 8007e22:	4ad0      	ldr	r2, [pc, #832]	; (8008164 <USB_EPStartXfer+0xaa0>)
 8007e24:	4694      	mov	ip, r2
 8007e26:	4463      	add	r3, ip
 8007e28:	667b      	str	r3, [r7, #100]	; 0x64
 8007e2a:	1d7b      	adds	r3, r7, #5
 8007e2c:	33ff      	adds	r3, #255	; 0xff
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	2b00      	cmp	r3, #0
 8007e32:	d110      	bne.n	8007e56 <USB_EPStartXfer+0x792>
 8007e34:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007e36:	881b      	ldrh	r3, [r3, #0]
 8007e38:	b29b      	uxth	r3, r3
 8007e3a:	4acb      	ldr	r2, [pc, #812]	; (8008168 <USB_EPStartXfer+0xaa4>)
 8007e3c:	4013      	ands	r3, r2
 8007e3e:	b29a      	uxth	r2, r3
 8007e40:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007e42:	801a      	strh	r2, [r3, #0]
 8007e44:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007e46:	881b      	ldrh	r3, [r3, #0]
 8007e48:	b29b      	uxth	r3, r3
 8007e4a:	4ac8      	ldr	r2, [pc, #800]	; (800816c <USB_EPStartXfer+0xaa8>)
 8007e4c:	4313      	orrs	r3, r2
 8007e4e:	b29a      	uxth	r2, r3
 8007e50:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007e52:	801a      	strh	r2, [r3, #0]
 8007e54:	e058      	b.n	8007f08 <USB_EPStartXfer+0x844>
 8007e56:	1d7b      	adds	r3, r7, #5
 8007e58:	33ff      	adds	r3, #255	; 0xff
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	2b3e      	cmp	r3, #62	; 0x3e
 8007e5e:	d81a      	bhi.n	8007e96 <USB_EPStartXfer+0x7d2>
 8007e60:	1d7b      	adds	r3, r7, #5
 8007e62:	33ff      	adds	r3, #255	; 0xff
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	085b      	lsrs	r3, r3, #1
 8007e68:	21f0      	movs	r1, #240	; 0xf0
 8007e6a:	187a      	adds	r2, r7, r1
 8007e6c:	6013      	str	r3, [r2, #0]
 8007e6e:	1d7b      	adds	r3, r7, #5
 8007e70:	33ff      	adds	r3, #255	; 0xff
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	2201      	movs	r2, #1
 8007e76:	4013      	ands	r3, r2
 8007e78:	d004      	beq.n	8007e84 <USB_EPStartXfer+0x7c0>
 8007e7a:	187b      	adds	r3, r7, r1
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	3301      	adds	r3, #1
 8007e80:	187a      	adds	r2, r7, r1
 8007e82:	6013      	str	r3, [r2, #0]
 8007e84:	23f0      	movs	r3, #240	; 0xf0
 8007e86:	18fb      	adds	r3, r7, r3
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	b29b      	uxth	r3, r3
 8007e8c:	029b      	lsls	r3, r3, #10
 8007e8e:	b29a      	uxth	r2, r3
 8007e90:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007e92:	801a      	strh	r2, [r3, #0]
 8007e94:	e038      	b.n	8007f08 <USB_EPStartXfer+0x844>
 8007e96:	1d7b      	adds	r3, r7, #5
 8007e98:	33ff      	adds	r3, #255	; 0xff
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	095b      	lsrs	r3, r3, #5
 8007e9e:	21f0      	movs	r1, #240	; 0xf0
 8007ea0:	187a      	adds	r2, r7, r1
 8007ea2:	6013      	str	r3, [r2, #0]
 8007ea4:	1d7b      	adds	r3, r7, #5
 8007ea6:	33ff      	adds	r3, #255	; 0xff
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	221f      	movs	r2, #31
 8007eac:	4013      	ands	r3, r2
 8007eae:	d104      	bne.n	8007eba <USB_EPStartXfer+0x7f6>
 8007eb0:	187b      	adds	r3, r7, r1
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	3b01      	subs	r3, #1
 8007eb6:	187a      	adds	r2, r7, r1
 8007eb8:	6013      	str	r3, [r2, #0]
 8007eba:	23f0      	movs	r3, #240	; 0xf0
 8007ebc:	18fb      	adds	r3, r7, r3
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	b29b      	uxth	r3, r3
 8007ec2:	029b      	lsls	r3, r3, #10
 8007ec4:	b29b      	uxth	r3, r3
 8007ec6:	4aa9      	ldr	r2, [pc, #676]	; (800816c <USB_EPStartXfer+0xaa8>)
 8007ec8:	4313      	orrs	r3, r2
 8007eca:	b29a      	uxth	r2, r3
 8007ecc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007ece:	801a      	strh	r2, [r3, #0]
 8007ed0:	e01a      	b.n	8007f08 <USB_EPStartXfer+0x844>
 8007ed2:	683b      	ldr	r3, [r7, #0]
 8007ed4:	785b      	ldrb	r3, [r3, #1]
 8007ed6:	2b01      	cmp	r3, #1
 8007ed8:	d116      	bne.n	8007f08 <USB_EPStartXfer+0x844>
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	2250      	movs	r2, #80	; 0x50
 8007ede:	5a9b      	ldrh	r3, [r3, r2]
 8007ee0:	b29b      	uxth	r3, r3
 8007ee2:	001a      	movs	r2, r3
 8007ee4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007ee6:	189b      	adds	r3, r3, r2
 8007ee8:	673b      	str	r3, [r7, #112]	; 0x70
 8007eea:	683b      	ldr	r3, [r7, #0]
 8007eec:	781b      	ldrb	r3, [r3, #0]
 8007eee:	00da      	lsls	r2, r3, #3
 8007ef0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007ef2:	18d3      	adds	r3, r2, r3
 8007ef4:	4a9b      	ldr	r2, [pc, #620]	; (8008164 <USB_EPStartXfer+0xaa0>)
 8007ef6:	4694      	mov	ip, r2
 8007ef8:	4463      	add	r3, ip
 8007efa:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007efc:	1d7b      	adds	r3, r7, #5
 8007efe:	33ff      	adds	r3, #255	; 0xff
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	b29a      	uxth	r2, r3
 8007f04:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007f06:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8007f08:	2076      	movs	r0, #118	; 0x76
 8007f0a:	183b      	adds	r3, r7, r0
 8007f0c:	683a      	ldr	r2, [r7, #0]
 8007f0e:	8952      	ldrh	r2, [r2, #10]
 8007f10:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007f12:	683b      	ldr	r3, [r7, #0]
 8007f14:	6959      	ldr	r1, [r3, #20]
 8007f16:	1d7b      	adds	r3, r7, #5
 8007f18:	33ff      	adds	r3, #255	; 0xff
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	b29c      	uxth	r4, r3
 8007f1e:	183b      	adds	r3, r7, r0
 8007f20:	881a      	ldrh	r2, [r3, #0]
 8007f22:	6878      	ldr	r0, [r7, #4]
 8007f24:	0023      	movs	r3, r4
 8007f26:	f000 fdc1 	bl	8008aac <USB_WritePMA>
 8007f2a:	e0a0      	b.n	800806e <USB_EPStartXfer+0x9aa>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007f2c:	683b      	ldr	r3, [r7, #0]
 8007f2e:	785b      	ldrb	r3, [r3, #1]
 8007f30:	2b00      	cmp	r3, #0
 8007f32:	d166      	bne.n	8008002 <USB_EPStartXfer+0x93e>
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	67fb      	str	r3, [r7, #124]	; 0x7c
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	2250      	movs	r2, #80	; 0x50
 8007f3c:	5a9b      	ldrh	r3, [r3, r2]
 8007f3e:	b29b      	uxth	r3, r3
 8007f40:	001a      	movs	r2, r3
 8007f42:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007f44:	189b      	adds	r3, r3, r2
 8007f46:	67fb      	str	r3, [r7, #124]	; 0x7c
 8007f48:	683b      	ldr	r3, [r7, #0]
 8007f4a:	781b      	ldrb	r3, [r3, #0]
 8007f4c:	00da      	lsls	r2, r3, #3
 8007f4e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007f50:	18d3      	adds	r3, r2, r3
 8007f52:	4a87      	ldr	r2, [pc, #540]	; (8008170 <USB_EPStartXfer+0xaac>)
 8007f54:	4694      	mov	ip, r2
 8007f56:	4463      	add	r3, ip
 8007f58:	67bb      	str	r3, [r7, #120]	; 0x78
 8007f5a:	1d7b      	adds	r3, r7, #5
 8007f5c:	33ff      	adds	r3, #255	; 0xff
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	2b00      	cmp	r3, #0
 8007f62:	d110      	bne.n	8007f86 <USB_EPStartXfer+0x8c2>
 8007f64:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007f66:	881b      	ldrh	r3, [r3, #0]
 8007f68:	b29b      	uxth	r3, r3
 8007f6a:	4a7f      	ldr	r2, [pc, #508]	; (8008168 <USB_EPStartXfer+0xaa4>)
 8007f6c:	4013      	ands	r3, r2
 8007f6e:	b29a      	uxth	r2, r3
 8007f70:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007f72:	801a      	strh	r2, [r3, #0]
 8007f74:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007f76:	881b      	ldrh	r3, [r3, #0]
 8007f78:	b29b      	uxth	r3, r3
 8007f7a:	4a7c      	ldr	r2, [pc, #496]	; (800816c <USB_EPStartXfer+0xaa8>)
 8007f7c:	4313      	orrs	r3, r2
 8007f7e:	b29a      	uxth	r2, r3
 8007f80:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007f82:	801a      	strh	r2, [r3, #0]
 8007f84:	e062      	b.n	800804c <USB_EPStartXfer+0x988>
 8007f86:	1d7b      	adds	r3, r7, #5
 8007f88:	33ff      	adds	r3, #255	; 0xff
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	2b3e      	cmp	r3, #62	; 0x3e
 8007f8e:	d81a      	bhi.n	8007fc6 <USB_EPStartXfer+0x902>
 8007f90:	1d7b      	adds	r3, r7, #5
 8007f92:	33ff      	adds	r3, #255	; 0xff
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	085b      	lsrs	r3, r3, #1
 8007f98:	21ec      	movs	r1, #236	; 0xec
 8007f9a:	187a      	adds	r2, r7, r1
 8007f9c:	6013      	str	r3, [r2, #0]
 8007f9e:	1d7b      	adds	r3, r7, #5
 8007fa0:	33ff      	adds	r3, #255	; 0xff
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	2201      	movs	r2, #1
 8007fa6:	4013      	ands	r3, r2
 8007fa8:	d004      	beq.n	8007fb4 <USB_EPStartXfer+0x8f0>
 8007faa:	187b      	adds	r3, r7, r1
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	3301      	adds	r3, #1
 8007fb0:	187a      	adds	r2, r7, r1
 8007fb2:	6013      	str	r3, [r2, #0]
 8007fb4:	23ec      	movs	r3, #236	; 0xec
 8007fb6:	18fb      	adds	r3, r7, r3
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	b29b      	uxth	r3, r3
 8007fbc:	029b      	lsls	r3, r3, #10
 8007fbe:	b29a      	uxth	r2, r3
 8007fc0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007fc2:	801a      	strh	r2, [r3, #0]
 8007fc4:	e042      	b.n	800804c <USB_EPStartXfer+0x988>
 8007fc6:	1d7b      	adds	r3, r7, #5
 8007fc8:	33ff      	adds	r3, #255	; 0xff
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	095b      	lsrs	r3, r3, #5
 8007fce:	21ec      	movs	r1, #236	; 0xec
 8007fd0:	187a      	adds	r2, r7, r1
 8007fd2:	6013      	str	r3, [r2, #0]
 8007fd4:	1d7b      	adds	r3, r7, #5
 8007fd6:	33ff      	adds	r3, #255	; 0xff
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	221f      	movs	r2, #31
 8007fdc:	4013      	ands	r3, r2
 8007fde:	d104      	bne.n	8007fea <USB_EPStartXfer+0x926>
 8007fe0:	187b      	adds	r3, r7, r1
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	3b01      	subs	r3, #1
 8007fe6:	187a      	adds	r2, r7, r1
 8007fe8:	6013      	str	r3, [r2, #0]
 8007fea:	23ec      	movs	r3, #236	; 0xec
 8007fec:	18fb      	adds	r3, r7, r3
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	b29b      	uxth	r3, r3
 8007ff2:	029b      	lsls	r3, r3, #10
 8007ff4:	b29b      	uxth	r3, r3
 8007ff6:	4a5d      	ldr	r2, [pc, #372]	; (800816c <USB_EPStartXfer+0xaa8>)
 8007ff8:	4313      	orrs	r3, r2
 8007ffa:	b29a      	uxth	r2, r3
 8007ffc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007ffe:	801a      	strh	r2, [r3, #0]
 8008000:	e024      	b.n	800804c <USB_EPStartXfer+0x988>
 8008002:	683b      	ldr	r3, [r7, #0]
 8008004:	785b      	ldrb	r3, [r3, #1]
 8008006:	2b01      	cmp	r3, #1
 8008008:	d120      	bne.n	800804c <USB_EPStartXfer+0x988>
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	2184      	movs	r1, #132	; 0x84
 800800e:	187a      	adds	r2, r7, r1
 8008010:	6013      	str	r3, [r2, #0]
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	2250      	movs	r2, #80	; 0x50
 8008016:	5a9b      	ldrh	r3, [r3, r2]
 8008018:	b29b      	uxth	r3, r3
 800801a:	001a      	movs	r2, r3
 800801c:	187b      	adds	r3, r7, r1
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	189b      	adds	r3, r3, r2
 8008022:	187a      	adds	r2, r7, r1
 8008024:	6013      	str	r3, [r2, #0]
 8008026:	683b      	ldr	r3, [r7, #0]
 8008028:	781b      	ldrb	r3, [r3, #0]
 800802a:	00da      	lsls	r2, r3, #3
 800802c:	187b      	adds	r3, r7, r1
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	18d3      	adds	r3, r2, r3
 8008032:	4a4f      	ldr	r2, [pc, #316]	; (8008170 <USB_EPStartXfer+0xaac>)
 8008034:	4694      	mov	ip, r2
 8008036:	4463      	add	r3, ip
 8008038:	2180      	movs	r1, #128	; 0x80
 800803a:	187a      	adds	r2, r7, r1
 800803c:	6013      	str	r3, [r2, #0]
 800803e:	1d7b      	adds	r3, r7, #5
 8008040:	33ff      	adds	r3, #255	; 0xff
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	b29a      	uxth	r2, r3
 8008046:	187b      	adds	r3, r7, r1
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800804c:	2076      	movs	r0, #118	; 0x76
 800804e:	183b      	adds	r3, r7, r0
 8008050:	683a      	ldr	r2, [r7, #0]
 8008052:	8912      	ldrh	r2, [r2, #8]
 8008054:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008056:	683b      	ldr	r3, [r7, #0]
 8008058:	6959      	ldr	r1, [r3, #20]
 800805a:	1d7b      	adds	r3, r7, #5
 800805c:	33ff      	adds	r3, #255	; 0xff
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	b29c      	uxth	r4, r3
 8008062:	183b      	adds	r3, r7, r0
 8008064:	881a      	ldrh	r2, [r3, #0]
 8008066:	6878      	ldr	r0, [r7, #4]
 8008068:	0023      	movs	r3, r4
 800806a:	f000 fd1f 	bl	8008aac <USB_WritePMA>
        }
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800806e:	687a      	ldr	r2, [r7, #4]
 8008070:	683b      	ldr	r3, [r7, #0]
 8008072:	781b      	ldrb	r3, [r3, #0]
 8008074:	009b      	lsls	r3, r3, #2
 8008076:	18d3      	adds	r3, r2, r3
 8008078:	881b      	ldrh	r3, [r3, #0]
 800807a:	b29a      	uxth	r2, r3
 800807c:	200a      	movs	r0, #10
 800807e:	183b      	adds	r3, r7, r0
 8008080:	493c      	ldr	r1, [pc, #240]	; (8008174 <USB_EPStartXfer+0xab0>)
 8008082:	400a      	ands	r2, r1
 8008084:	801a      	strh	r2, [r3, #0]
 8008086:	183b      	adds	r3, r7, r0
 8008088:	183a      	adds	r2, r7, r0
 800808a:	8812      	ldrh	r2, [r2, #0]
 800808c:	2110      	movs	r1, #16
 800808e:	404a      	eors	r2, r1
 8008090:	801a      	strh	r2, [r3, #0]
 8008092:	183b      	adds	r3, r7, r0
 8008094:	183a      	adds	r2, r7, r0
 8008096:	8812      	ldrh	r2, [r2, #0]
 8008098:	2120      	movs	r1, #32
 800809a:	404a      	eors	r2, r1
 800809c:	801a      	strh	r2, [r3, #0]
 800809e:	687a      	ldr	r2, [r7, #4]
 80080a0:	683b      	ldr	r3, [r7, #0]
 80080a2:	781b      	ldrb	r3, [r3, #0]
 80080a4:	009b      	lsls	r3, r3, #2
 80080a6:	18d3      	adds	r3, r2, r3
 80080a8:	183a      	adds	r2, r7, r0
 80080aa:	8812      	ldrh	r2, [r2, #0]
 80080ac:	4932      	ldr	r1, [pc, #200]	; (8008178 <USB_EPStartXfer+0xab4>)
 80080ae:	430a      	orrs	r2, r1
 80080b0:	b292      	uxth	r2, r2
 80080b2:	801a      	strh	r2, [r3, #0]
 80080b4:	f000 fbaf 	bl	8008816 <USB_EPStartXfer+0x1152>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 80080b8:	683b      	ldr	r3, [r7, #0]
 80080ba:	7b1b      	ldrb	r3, [r3, #12]
 80080bc:	2b00      	cmp	r3, #0
 80080be:	d000      	beq.n	80080c2 <USB_EPStartXfer+0x9fe>
 80080c0:	e09e      	b.n	8008200 <USB_EPStartXfer+0xb3c>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 80080c2:	683b      	ldr	r3, [r7, #0]
 80080c4:	699a      	ldr	r2, [r3, #24]
 80080c6:	683b      	ldr	r3, [r7, #0]
 80080c8:	691b      	ldr	r3, [r3, #16]
 80080ca:	429a      	cmp	r2, r3
 80080cc:	d90d      	bls.n	80080ea <USB_EPStartXfer+0xa26>
      {
        len = ep->maxpacket;
 80080ce:	683b      	ldr	r3, [r7, #0]
 80080d0:	691b      	ldr	r3, [r3, #16]
 80080d2:	1d7a      	adds	r2, r7, #5
 80080d4:	32ff      	adds	r2, #255	; 0xff
 80080d6:	6013      	str	r3, [r2, #0]
        ep->xfer_len -= len;
 80080d8:	683b      	ldr	r3, [r7, #0]
 80080da:	699a      	ldr	r2, [r3, #24]
 80080dc:	1d7b      	adds	r3, r7, #5
 80080de:	33ff      	adds	r3, #255	; 0xff
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	1ad2      	subs	r2, r2, r3
 80080e4:	683b      	ldr	r3, [r7, #0]
 80080e6:	619a      	str	r2, [r3, #24]
 80080e8:	e007      	b.n	80080fa <USB_EPStartXfer+0xa36>
      }
      else
      {
        len = ep->xfer_len;
 80080ea:	683b      	ldr	r3, [r7, #0]
 80080ec:	699b      	ldr	r3, [r3, #24]
 80080ee:	1d7a      	adds	r2, r7, #5
 80080f0:	32ff      	adds	r2, #255	; 0xff
 80080f2:	6013      	str	r3, [r2, #0]
        ep->xfer_len = 0U;
 80080f4:	683b      	ldr	r3, [r7, #0]
 80080f6:	2200      	movs	r2, #0
 80080f8:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	2190      	movs	r1, #144	; 0x90
 80080fe:	187a      	adds	r2, r7, r1
 8008100:	6013      	str	r3, [r2, #0]
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	2250      	movs	r2, #80	; 0x50
 8008106:	5a9b      	ldrh	r3, [r3, r2]
 8008108:	b29b      	uxth	r3, r3
 800810a:	001a      	movs	r2, r3
 800810c:	187b      	adds	r3, r7, r1
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	189b      	adds	r3, r3, r2
 8008112:	187a      	adds	r2, r7, r1
 8008114:	6013      	str	r3, [r2, #0]
 8008116:	683b      	ldr	r3, [r7, #0]
 8008118:	781b      	ldrb	r3, [r3, #0]
 800811a:	00da      	lsls	r2, r3, #3
 800811c:	187b      	adds	r3, r7, r1
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	18d3      	adds	r3, r2, r3
 8008122:	4a10      	ldr	r2, [pc, #64]	; (8008164 <USB_EPStartXfer+0xaa0>)
 8008124:	4694      	mov	ip, r2
 8008126:	4463      	add	r3, ip
 8008128:	218c      	movs	r1, #140	; 0x8c
 800812a:	187a      	adds	r2, r7, r1
 800812c:	6013      	str	r3, [r2, #0]
 800812e:	1d7b      	adds	r3, r7, #5
 8008130:	33ff      	adds	r3, #255	; 0xff
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	2b00      	cmp	r3, #0
 8008136:	d121      	bne.n	800817c <USB_EPStartXfer+0xab8>
 8008138:	187b      	adds	r3, r7, r1
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	881b      	ldrh	r3, [r3, #0]
 800813e:	b29b      	uxth	r3, r3
 8008140:	4a09      	ldr	r2, [pc, #36]	; (8008168 <USB_EPStartXfer+0xaa4>)
 8008142:	4013      	ands	r3, r2
 8008144:	b29a      	uxth	r2, r3
 8008146:	187b      	adds	r3, r7, r1
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	801a      	strh	r2, [r3, #0]
 800814c:	187b      	adds	r3, r7, r1
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	881b      	ldrh	r3, [r3, #0]
 8008152:	b29b      	uxth	r3, r3
 8008154:	4a05      	ldr	r2, [pc, #20]	; (800816c <USB_EPStartXfer+0xaa8>)
 8008156:	4313      	orrs	r3, r2
 8008158:	b29a      	uxth	r2, r3
 800815a:	187b      	adds	r3, r7, r1
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	801a      	strh	r2, [r3, #0]
 8008160:	e334      	b.n	80087cc <USB_EPStartXfer+0x1108>
 8008162:	46c0      	nop			; (mov r8, r8)
 8008164:	00000406 	.word	0x00000406
 8008168:	ffff83ff 	.word	0xffff83ff
 800816c:	ffff8000 	.word	0xffff8000
 8008170:	00000402 	.word	0x00000402
 8008174:	ffff8fbf 	.word	0xffff8fbf
 8008178:	ffff8080 	.word	0xffff8080
 800817c:	1d7b      	adds	r3, r7, #5
 800817e:	33ff      	adds	r3, #255	; 0xff
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	2b3e      	cmp	r3, #62	; 0x3e
 8008184:	d81c      	bhi.n	80081c0 <USB_EPStartXfer+0xafc>
 8008186:	1d7b      	adds	r3, r7, #5
 8008188:	33ff      	adds	r3, #255	; 0xff
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	085b      	lsrs	r3, r3, #1
 800818e:	21e8      	movs	r1, #232	; 0xe8
 8008190:	187a      	adds	r2, r7, r1
 8008192:	6013      	str	r3, [r2, #0]
 8008194:	1d7b      	adds	r3, r7, #5
 8008196:	33ff      	adds	r3, #255	; 0xff
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	2201      	movs	r2, #1
 800819c:	4013      	ands	r3, r2
 800819e:	d004      	beq.n	80081aa <USB_EPStartXfer+0xae6>
 80081a0:	187b      	adds	r3, r7, r1
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	3301      	adds	r3, #1
 80081a6:	187a      	adds	r2, r7, r1
 80081a8:	6013      	str	r3, [r2, #0]
 80081aa:	23e8      	movs	r3, #232	; 0xe8
 80081ac:	18fb      	adds	r3, r7, r3
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	b29b      	uxth	r3, r3
 80081b2:	029b      	lsls	r3, r3, #10
 80081b4:	b29a      	uxth	r2, r3
 80081b6:	238c      	movs	r3, #140	; 0x8c
 80081b8:	18fb      	adds	r3, r7, r3
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	801a      	strh	r2, [r3, #0]
 80081be:	e305      	b.n	80087cc <USB_EPStartXfer+0x1108>
 80081c0:	1d7b      	adds	r3, r7, #5
 80081c2:	33ff      	adds	r3, #255	; 0xff
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	095b      	lsrs	r3, r3, #5
 80081c8:	21e8      	movs	r1, #232	; 0xe8
 80081ca:	187a      	adds	r2, r7, r1
 80081cc:	6013      	str	r3, [r2, #0]
 80081ce:	1d7b      	adds	r3, r7, #5
 80081d0:	33ff      	adds	r3, #255	; 0xff
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	221f      	movs	r2, #31
 80081d6:	4013      	ands	r3, r2
 80081d8:	d104      	bne.n	80081e4 <USB_EPStartXfer+0xb20>
 80081da:	187b      	adds	r3, r7, r1
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	3b01      	subs	r3, #1
 80081e0:	187a      	adds	r2, r7, r1
 80081e2:	6013      	str	r3, [r2, #0]
 80081e4:	23e8      	movs	r3, #232	; 0xe8
 80081e6:	18fb      	adds	r3, r7, r3
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	b29b      	uxth	r3, r3
 80081ec:	029b      	lsls	r3, r3, #10
 80081ee:	b29b      	uxth	r3, r3
 80081f0:	4aca      	ldr	r2, [pc, #808]	; (800851c <USB_EPStartXfer+0xe58>)
 80081f2:	4313      	orrs	r3, r2
 80081f4:	b29a      	uxth	r2, r3
 80081f6:	238c      	movs	r3, #140	; 0x8c
 80081f8:	18fb      	adds	r3, r7, r3
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	801a      	strh	r2, [r3, #0]
 80081fe:	e2e5      	b.n	80087cc <USB_EPStartXfer+0x1108>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8008200:	683b      	ldr	r3, [r7, #0]
 8008202:	78db      	ldrb	r3, [r3, #3]
 8008204:	2b02      	cmp	r3, #2
 8008206:	d000      	beq.n	800820a <USB_EPStartXfer+0xb46>
 8008208:	e16f      	b.n	80084ea <USB_EPStartXfer+0xe26>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800820a:	683b      	ldr	r3, [r7, #0]
 800820c:	785b      	ldrb	r3, [r3, #1]
 800820e:	2b00      	cmp	r3, #0
 8008210:	d16f      	bne.n	80082f2 <USB_EPStartXfer+0xc2e>
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	21ac      	movs	r1, #172	; 0xac
 8008216:	187a      	adds	r2, r7, r1
 8008218:	6013      	str	r3, [r2, #0]
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	2250      	movs	r2, #80	; 0x50
 800821e:	5a9b      	ldrh	r3, [r3, r2]
 8008220:	b29b      	uxth	r3, r3
 8008222:	001a      	movs	r2, r3
 8008224:	187b      	adds	r3, r7, r1
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	189b      	adds	r3, r3, r2
 800822a:	187a      	adds	r2, r7, r1
 800822c:	6013      	str	r3, [r2, #0]
 800822e:	683b      	ldr	r3, [r7, #0]
 8008230:	781b      	ldrb	r3, [r3, #0]
 8008232:	00da      	lsls	r2, r3, #3
 8008234:	187b      	adds	r3, r7, r1
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	18d3      	adds	r3, r2, r3
 800823a:	4ab9      	ldr	r2, [pc, #740]	; (8008520 <USB_EPStartXfer+0xe5c>)
 800823c:	4694      	mov	ip, r2
 800823e:	4463      	add	r3, ip
 8008240:	21a8      	movs	r1, #168	; 0xa8
 8008242:	187a      	adds	r2, r7, r1
 8008244:	6013      	str	r3, [r2, #0]
 8008246:	683b      	ldr	r3, [r7, #0]
 8008248:	691b      	ldr	r3, [r3, #16]
 800824a:	2b00      	cmp	r3, #0
 800824c:	d114      	bne.n	8008278 <USB_EPStartXfer+0xbb4>
 800824e:	187b      	adds	r3, r7, r1
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	881b      	ldrh	r3, [r3, #0]
 8008254:	b29b      	uxth	r3, r3
 8008256:	4ab3      	ldr	r2, [pc, #716]	; (8008524 <USB_EPStartXfer+0xe60>)
 8008258:	4013      	ands	r3, r2
 800825a:	b29a      	uxth	r2, r3
 800825c:	187b      	adds	r3, r7, r1
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	801a      	strh	r2, [r3, #0]
 8008262:	187b      	adds	r3, r7, r1
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	881b      	ldrh	r3, [r3, #0]
 8008268:	b29b      	uxth	r3, r3
 800826a:	4aac      	ldr	r2, [pc, #688]	; (800851c <USB_EPStartXfer+0xe58>)
 800826c:	4313      	orrs	r3, r2
 800826e:	b29a      	uxth	r2, r3
 8008270:	187b      	adds	r3, r7, r1
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	801a      	strh	r2, [r3, #0]
 8008276:	e060      	b.n	800833a <USB_EPStartXfer+0xc76>
 8008278:	683b      	ldr	r3, [r7, #0]
 800827a:	691b      	ldr	r3, [r3, #16]
 800827c:	2b3e      	cmp	r3, #62	; 0x3e
 800827e:	d81a      	bhi.n	80082b6 <USB_EPStartXfer+0xbf2>
 8008280:	683b      	ldr	r3, [r7, #0]
 8008282:	691b      	ldr	r3, [r3, #16]
 8008284:	085b      	lsrs	r3, r3, #1
 8008286:	21e4      	movs	r1, #228	; 0xe4
 8008288:	187a      	adds	r2, r7, r1
 800828a:	6013      	str	r3, [r2, #0]
 800828c:	683b      	ldr	r3, [r7, #0]
 800828e:	691b      	ldr	r3, [r3, #16]
 8008290:	2201      	movs	r2, #1
 8008292:	4013      	ands	r3, r2
 8008294:	d004      	beq.n	80082a0 <USB_EPStartXfer+0xbdc>
 8008296:	187b      	adds	r3, r7, r1
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	3301      	adds	r3, #1
 800829c:	187a      	adds	r2, r7, r1
 800829e:	6013      	str	r3, [r2, #0]
 80082a0:	23e4      	movs	r3, #228	; 0xe4
 80082a2:	18fb      	adds	r3, r7, r3
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	b29b      	uxth	r3, r3
 80082a8:	029b      	lsls	r3, r3, #10
 80082aa:	b29a      	uxth	r2, r3
 80082ac:	23a8      	movs	r3, #168	; 0xa8
 80082ae:	18fb      	adds	r3, r7, r3
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	801a      	strh	r2, [r3, #0]
 80082b4:	e041      	b.n	800833a <USB_EPStartXfer+0xc76>
 80082b6:	683b      	ldr	r3, [r7, #0]
 80082b8:	691b      	ldr	r3, [r3, #16]
 80082ba:	095b      	lsrs	r3, r3, #5
 80082bc:	21e4      	movs	r1, #228	; 0xe4
 80082be:	187a      	adds	r2, r7, r1
 80082c0:	6013      	str	r3, [r2, #0]
 80082c2:	683b      	ldr	r3, [r7, #0]
 80082c4:	691b      	ldr	r3, [r3, #16]
 80082c6:	221f      	movs	r2, #31
 80082c8:	4013      	ands	r3, r2
 80082ca:	d104      	bne.n	80082d6 <USB_EPStartXfer+0xc12>
 80082cc:	187b      	adds	r3, r7, r1
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	3b01      	subs	r3, #1
 80082d2:	187a      	adds	r2, r7, r1
 80082d4:	6013      	str	r3, [r2, #0]
 80082d6:	23e4      	movs	r3, #228	; 0xe4
 80082d8:	18fb      	adds	r3, r7, r3
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	b29b      	uxth	r3, r3
 80082de:	029b      	lsls	r3, r3, #10
 80082e0:	b29b      	uxth	r3, r3
 80082e2:	4a8e      	ldr	r2, [pc, #568]	; (800851c <USB_EPStartXfer+0xe58>)
 80082e4:	4313      	orrs	r3, r2
 80082e6:	b29a      	uxth	r2, r3
 80082e8:	23a8      	movs	r3, #168	; 0xa8
 80082ea:	18fb      	adds	r3, r7, r3
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	801a      	strh	r2, [r3, #0]
 80082f0:	e023      	b.n	800833a <USB_EPStartXfer+0xc76>
 80082f2:	683b      	ldr	r3, [r7, #0]
 80082f4:	785b      	ldrb	r3, [r3, #1]
 80082f6:	2b01      	cmp	r3, #1
 80082f8:	d11f      	bne.n	800833a <USB_EPStartXfer+0xc76>
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	21b4      	movs	r1, #180	; 0xb4
 80082fe:	187a      	adds	r2, r7, r1
 8008300:	6013      	str	r3, [r2, #0]
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	2250      	movs	r2, #80	; 0x50
 8008306:	5a9b      	ldrh	r3, [r3, r2]
 8008308:	b29b      	uxth	r3, r3
 800830a:	001a      	movs	r2, r3
 800830c:	187b      	adds	r3, r7, r1
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	189b      	adds	r3, r3, r2
 8008312:	187a      	adds	r2, r7, r1
 8008314:	6013      	str	r3, [r2, #0]
 8008316:	683b      	ldr	r3, [r7, #0]
 8008318:	781b      	ldrb	r3, [r3, #0]
 800831a:	00da      	lsls	r2, r3, #3
 800831c:	187b      	adds	r3, r7, r1
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	18d3      	adds	r3, r2, r3
 8008322:	4a7f      	ldr	r2, [pc, #508]	; (8008520 <USB_EPStartXfer+0xe5c>)
 8008324:	4694      	mov	ip, r2
 8008326:	4463      	add	r3, ip
 8008328:	21b0      	movs	r1, #176	; 0xb0
 800832a:	187a      	adds	r2, r7, r1
 800832c:	6013      	str	r3, [r2, #0]
 800832e:	683b      	ldr	r3, [r7, #0]
 8008330:	691b      	ldr	r3, [r3, #16]
 8008332:	b29a      	uxth	r2, r3
 8008334:	187b      	adds	r3, r7, r1
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	801a      	strh	r2, [r3, #0]
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	22a4      	movs	r2, #164	; 0xa4
 800833e:	18ba      	adds	r2, r7, r2
 8008340:	6013      	str	r3, [r2, #0]
 8008342:	683b      	ldr	r3, [r7, #0]
 8008344:	785b      	ldrb	r3, [r3, #1]
 8008346:	2b00      	cmp	r3, #0
 8008348:	d16f      	bne.n	800842a <USB_EPStartXfer+0xd66>
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	219c      	movs	r1, #156	; 0x9c
 800834e:	187a      	adds	r2, r7, r1
 8008350:	6013      	str	r3, [r2, #0]
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	2250      	movs	r2, #80	; 0x50
 8008356:	5a9b      	ldrh	r3, [r3, r2]
 8008358:	b29b      	uxth	r3, r3
 800835a:	001a      	movs	r2, r3
 800835c:	187b      	adds	r3, r7, r1
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	189b      	adds	r3, r3, r2
 8008362:	187a      	adds	r2, r7, r1
 8008364:	6013      	str	r3, [r2, #0]
 8008366:	683b      	ldr	r3, [r7, #0]
 8008368:	781b      	ldrb	r3, [r3, #0]
 800836a:	00da      	lsls	r2, r3, #3
 800836c:	187b      	adds	r3, r7, r1
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	18d3      	adds	r3, r2, r3
 8008372:	4a6d      	ldr	r2, [pc, #436]	; (8008528 <USB_EPStartXfer+0xe64>)
 8008374:	4694      	mov	ip, r2
 8008376:	4463      	add	r3, ip
 8008378:	2198      	movs	r1, #152	; 0x98
 800837a:	187a      	adds	r2, r7, r1
 800837c:	6013      	str	r3, [r2, #0]
 800837e:	683b      	ldr	r3, [r7, #0]
 8008380:	691b      	ldr	r3, [r3, #16]
 8008382:	2b00      	cmp	r3, #0
 8008384:	d114      	bne.n	80083b0 <USB_EPStartXfer+0xcec>
 8008386:	187b      	adds	r3, r7, r1
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	881b      	ldrh	r3, [r3, #0]
 800838c:	b29b      	uxth	r3, r3
 800838e:	4a65      	ldr	r2, [pc, #404]	; (8008524 <USB_EPStartXfer+0xe60>)
 8008390:	4013      	ands	r3, r2
 8008392:	b29a      	uxth	r2, r3
 8008394:	187b      	adds	r3, r7, r1
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	801a      	strh	r2, [r3, #0]
 800839a:	187b      	adds	r3, r7, r1
 800839c:	681b      	ldr	r3, [r3, #0]
 800839e:	881b      	ldrh	r3, [r3, #0]
 80083a0:	b29b      	uxth	r3, r3
 80083a2:	4a5e      	ldr	r2, [pc, #376]	; (800851c <USB_EPStartXfer+0xe58>)
 80083a4:	4313      	orrs	r3, r2
 80083a6:	b29a      	uxth	r2, r3
 80083a8:	187b      	adds	r3, r7, r1
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	801a      	strh	r2, [r3, #0]
 80083ae:	e05d      	b.n	800846c <USB_EPStartXfer+0xda8>
 80083b0:	683b      	ldr	r3, [r7, #0]
 80083b2:	691b      	ldr	r3, [r3, #16]
 80083b4:	2b3e      	cmp	r3, #62	; 0x3e
 80083b6:	d81a      	bhi.n	80083ee <USB_EPStartXfer+0xd2a>
 80083b8:	683b      	ldr	r3, [r7, #0]
 80083ba:	691b      	ldr	r3, [r3, #16]
 80083bc:	085b      	lsrs	r3, r3, #1
 80083be:	21e0      	movs	r1, #224	; 0xe0
 80083c0:	187a      	adds	r2, r7, r1
 80083c2:	6013      	str	r3, [r2, #0]
 80083c4:	683b      	ldr	r3, [r7, #0]
 80083c6:	691b      	ldr	r3, [r3, #16]
 80083c8:	2201      	movs	r2, #1
 80083ca:	4013      	ands	r3, r2
 80083cc:	d004      	beq.n	80083d8 <USB_EPStartXfer+0xd14>
 80083ce:	187b      	adds	r3, r7, r1
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	3301      	adds	r3, #1
 80083d4:	187a      	adds	r2, r7, r1
 80083d6:	6013      	str	r3, [r2, #0]
 80083d8:	23e0      	movs	r3, #224	; 0xe0
 80083da:	18fb      	adds	r3, r7, r3
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	b29b      	uxth	r3, r3
 80083e0:	029b      	lsls	r3, r3, #10
 80083e2:	b29a      	uxth	r2, r3
 80083e4:	2398      	movs	r3, #152	; 0x98
 80083e6:	18fb      	adds	r3, r7, r3
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	801a      	strh	r2, [r3, #0]
 80083ec:	e03e      	b.n	800846c <USB_EPStartXfer+0xda8>
 80083ee:	683b      	ldr	r3, [r7, #0]
 80083f0:	691b      	ldr	r3, [r3, #16]
 80083f2:	095b      	lsrs	r3, r3, #5
 80083f4:	21e0      	movs	r1, #224	; 0xe0
 80083f6:	187a      	adds	r2, r7, r1
 80083f8:	6013      	str	r3, [r2, #0]
 80083fa:	683b      	ldr	r3, [r7, #0]
 80083fc:	691b      	ldr	r3, [r3, #16]
 80083fe:	221f      	movs	r2, #31
 8008400:	4013      	ands	r3, r2
 8008402:	d104      	bne.n	800840e <USB_EPStartXfer+0xd4a>
 8008404:	187b      	adds	r3, r7, r1
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	3b01      	subs	r3, #1
 800840a:	187a      	adds	r2, r7, r1
 800840c:	6013      	str	r3, [r2, #0]
 800840e:	23e0      	movs	r3, #224	; 0xe0
 8008410:	18fb      	adds	r3, r7, r3
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	b29b      	uxth	r3, r3
 8008416:	029b      	lsls	r3, r3, #10
 8008418:	b29b      	uxth	r3, r3
 800841a:	4a40      	ldr	r2, [pc, #256]	; (800851c <USB_EPStartXfer+0xe58>)
 800841c:	4313      	orrs	r3, r2
 800841e:	b29a      	uxth	r2, r3
 8008420:	2398      	movs	r3, #152	; 0x98
 8008422:	18fb      	adds	r3, r7, r3
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	801a      	strh	r2, [r3, #0]
 8008428:	e020      	b.n	800846c <USB_EPStartXfer+0xda8>
 800842a:	683b      	ldr	r3, [r7, #0]
 800842c:	785b      	ldrb	r3, [r3, #1]
 800842e:	2b01      	cmp	r3, #1
 8008430:	d11c      	bne.n	800846c <USB_EPStartXfer+0xda8>
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	2250      	movs	r2, #80	; 0x50
 8008436:	5a9b      	ldrh	r3, [r3, r2]
 8008438:	b29b      	uxth	r3, r3
 800843a:	001a      	movs	r2, r3
 800843c:	21a4      	movs	r1, #164	; 0xa4
 800843e:	187b      	adds	r3, r7, r1
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	189b      	adds	r3, r3, r2
 8008444:	187a      	adds	r2, r7, r1
 8008446:	6013      	str	r3, [r2, #0]
 8008448:	683b      	ldr	r3, [r7, #0]
 800844a:	781b      	ldrb	r3, [r3, #0]
 800844c:	00da      	lsls	r2, r3, #3
 800844e:	187b      	adds	r3, r7, r1
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	18d3      	adds	r3, r2, r3
 8008454:	4a34      	ldr	r2, [pc, #208]	; (8008528 <USB_EPStartXfer+0xe64>)
 8008456:	4694      	mov	ip, r2
 8008458:	4463      	add	r3, ip
 800845a:	21a0      	movs	r1, #160	; 0xa0
 800845c:	187a      	adds	r2, r7, r1
 800845e:	6013      	str	r3, [r2, #0]
 8008460:	683b      	ldr	r3, [r7, #0]
 8008462:	691b      	ldr	r3, [r3, #16]
 8008464:	b29a      	uxth	r2, r3
 8008466:	187b      	adds	r3, r7, r1
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800846c:	683b      	ldr	r3, [r7, #0]
 800846e:	69db      	ldr	r3, [r3, #28]
 8008470:	2b00      	cmp	r3, #0
 8008472:	d100      	bne.n	8008476 <USB_EPStartXfer+0xdb2>
 8008474:	e1aa      	b.n	80087cc <USB_EPStartXfer+0x1108>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8008476:	687a      	ldr	r2, [r7, #4]
 8008478:	683b      	ldr	r3, [r7, #0]
 800847a:	781b      	ldrb	r3, [r3, #0]
 800847c:	009b      	lsls	r3, r3, #2
 800847e:	18d2      	adds	r2, r2, r3
 8008480:	2196      	movs	r1, #150	; 0x96
 8008482:	187b      	adds	r3, r7, r1
 8008484:	8812      	ldrh	r2, [r2, #0]
 8008486:	801a      	strh	r2, [r3, #0]

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8008488:	187b      	adds	r3, r7, r1
 800848a:	881a      	ldrh	r2, [r3, #0]
 800848c:	2380      	movs	r3, #128	; 0x80
 800848e:	01db      	lsls	r3, r3, #7
 8008490:	4013      	ands	r3, r2
 8008492:	d004      	beq.n	800849e <USB_EPStartXfer+0xdda>
 8008494:	187b      	adds	r3, r7, r1
 8008496:	881b      	ldrh	r3, [r3, #0]
 8008498:	2240      	movs	r2, #64	; 0x40
 800849a:	4013      	ands	r3, r2
 800849c:	d10d      	bne.n	80084ba <USB_EPStartXfer+0xdf6>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800849e:	2196      	movs	r1, #150	; 0x96
 80084a0:	187b      	adds	r3, r7, r1
 80084a2:	881a      	ldrh	r2, [r3, #0]
 80084a4:	2380      	movs	r3, #128	; 0x80
 80084a6:	01db      	lsls	r3, r3, #7
 80084a8:	4013      	ands	r3, r2
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80084aa:	d000      	beq.n	80084ae <USB_EPStartXfer+0xdea>
 80084ac:	e18e      	b.n	80087cc <USB_EPStartXfer+0x1108>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80084ae:	187b      	adds	r3, r7, r1
 80084b0:	881b      	ldrh	r3, [r3, #0]
 80084b2:	2240      	movs	r2, #64	; 0x40
 80084b4:	4013      	ands	r3, r2
 80084b6:	d000      	beq.n	80084ba <USB_EPStartXfer+0xdf6>
 80084b8:	e188      	b.n	80087cc <USB_EPStartXfer+0x1108>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 80084ba:	687a      	ldr	r2, [r7, #4]
 80084bc:	683b      	ldr	r3, [r7, #0]
 80084be:	781b      	ldrb	r3, [r3, #0]
 80084c0:	009b      	lsls	r3, r3, #2
 80084c2:	18d3      	adds	r3, r2, r3
 80084c4:	881b      	ldrh	r3, [r3, #0]
 80084c6:	b29a      	uxth	r2, r3
 80084c8:	2094      	movs	r0, #148	; 0x94
 80084ca:	183b      	adds	r3, r7, r0
 80084cc:	4917      	ldr	r1, [pc, #92]	; (800852c <USB_EPStartXfer+0xe68>)
 80084ce:	400a      	ands	r2, r1
 80084d0:	801a      	strh	r2, [r3, #0]
 80084d2:	687a      	ldr	r2, [r7, #4]
 80084d4:	683b      	ldr	r3, [r7, #0]
 80084d6:	781b      	ldrb	r3, [r3, #0]
 80084d8:	009b      	lsls	r3, r3, #2
 80084da:	18d3      	adds	r3, r2, r3
 80084dc:	183a      	adds	r2, r7, r0
 80084de:	8812      	ldrh	r2, [r2, #0]
 80084e0:	4913      	ldr	r1, [pc, #76]	; (8008530 <USB_EPStartXfer+0xe6c>)
 80084e2:	430a      	orrs	r2, r1
 80084e4:	b292      	uxth	r2, r2
 80084e6:	801a      	strh	r2, [r3, #0]
 80084e8:	e170      	b.n	80087cc <USB_EPStartXfer+0x1108>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 80084ea:	683b      	ldr	r3, [r7, #0]
 80084ec:	78db      	ldrb	r3, [r3, #3]
 80084ee:	2b01      	cmp	r3, #1
 80084f0:	d000      	beq.n	80084f4 <USB_EPStartXfer+0xe30>
 80084f2:	e169      	b.n	80087c8 <USB_EPStartXfer+0x1104>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 80084f4:	683b      	ldr	r3, [r7, #0]
 80084f6:	699a      	ldr	r2, [r3, #24]
 80084f8:	683b      	ldr	r3, [r7, #0]
 80084fa:	691b      	ldr	r3, [r3, #16]
 80084fc:	429a      	cmp	r2, r3
 80084fe:	d919      	bls.n	8008534 <USB_EPStartXfer+0xe70>
        {
          len = ep->maxpacket;
 8008500:	683b      	ldr	r3, [r7, #0]
 8008502:	691b      	ldr	r3, [r3, #16]
 8008504:	1d7a      	adds	r2, r7, #5
 8008506:	32ff      	adds	r2, #255	; 0xff
 8008508:	6013      	str	r3, [r2, #0]
          ep->xfer_len -= len;
 800850a:	683b      	ldr	r3, [r7, #0]
 800850c:	699a      	ldr	r2, [r3, #24]
 800850e:	1d7b      	adds	r3, r7, #5
 8008510:	33ff      	adds	r3, #255	; 0xff
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	1ad2      	subs	r2, r2, r3
 8008516:	683b      	ldr	r3, [r7, #0]
 8008518:	619a      	str	r2, [r3, #24]
 800851a:	e013      	b.n	8008544 <USB_EPStartXfer+0xe80>
 800851c:	ffff8000 	.word	0xffff8000
 8008520:	00000402 	.word	0x00000402
 8008524:	ffff83ff 	.word	0xffff83ff
 8008528:	00000406 	.word	0x00000406
 800852c:	ffff8f8f 	.word	0xffff8f8f
 8008530:	ffff80c0 	.word	0xffff80c0
        }
        else
        {
          len = ep->xfer_len;
 8008534:	683b      	ldr	r3, [r7, #0]
 8008536:	699b      	ldr	r3, [r3, #24]
 8008538:	1d7a      	adds	r2, r7, #5
 800853a:	32ff      	adds	r2, #255	; 0xff
 800853c:	6013      	str	r3, [r2, #0]
          ep->xfer_len = 0U;
 800853e:	683b      	ldr	r3, [r7, #0]
 8008540:	2200      	movs	r2, #0
 8008542:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8008544:	683b      	ldr	r3, [r7, #0]
 8008546:	785b      	ldrb	r3, [r3, #1]
 8008548:	2b00      	cmp	r3, #0
 800854a:	d000      	beq.n	800854e <USB_EPStartXfer+0xe8a>
 800854c:	e075      	b.n	800863a <USB_EPStartXfer+0xf76>
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	21cc      	movs	r1, #204	; 0xcc
 8008552:	187a      	adds	r2, r7, r1
 8008554:	6013      	str	r3, [r2, #0]
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	2250      	movs	r2, #80	; 0x50
 800855a:	5a9b      	ldrh	r3, [r3, r2]
 800855c:	b29b      	uxth	r3, r3
 800855e:	001a      	movs	r2, r3
 8008560:	187b      	adds	r3, r7, r1
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	189b      	adds	r3, r3, r2
 8008566:	187a      	adds	r2, r7, r1
 8008568:	6013      	str	r3, [r2, #0]
 800856a:	683b      	ldr	r3, [r7, #0]
 800856c:	781b      	ldrb	r3, [r3, #0]
 800856e:	00da      	lsls	r2, r3, #3
 8008570:	187b      	adds	r3, r7, r1
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	18d3      	adds	r3, r2, r3
 8008576:	4aaa      	ldr	r2, [pc, #680]	; (8008820 <USB_EPStartXfer+0x115c>)
 8008578:	4694      	mov	ip, r2
 800857a:	4463      	add	r3, ip
 800857c:	21c8      	movs	r1, #200	; 0xc8
 800857e:	187a      	adds	r2, r7, r1
 8008580:	6013      	str	r3, [r2, #0]
 8008582:	1d7b      	adds	r3, r7, #5
 8008584:	33ff      	adds	r3, #255	; 0xff
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	2b00      	cmp	r3, #0
 800858a:	d114      	bne.n	80085b6 <USB_EPStartXfer+0xef2>
 800858c:	187b      	adds	r3, r7, r1
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	881b      	ldrh	r3, [r3, #0]
 8008592:	b29b      	uxth	r3, r3
 8008594:	4aa3      	ldr	r2, [pc, #652]	; (8008824 <USB_EPStartXfer+0x1160>)
 8008596:	4013      	ands	r3, r2
 8008598:	b29a      	uxth	r2, r3
 800859a:	187b      	adds	r3, r7, r1
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	801a      	strh	r2, [r3, #0]
 80085a0:	187b      	adds	r3, r7, r1
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	881b      	ldrh	r3, [r3, #0]
 80085a6:	b29b      	uxth	r3, r3
 80085a8:	4a9f      	ldr	r2, [pc, #636]	; (8008828 <USB_EPStartXfer+0x1164>)
 80085aa:	4313      	orrs	r3, r2
 80085ac:	b29a      	uxth	r2, r3
 80085ae:	187b      	adds	r3, r7, r1
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	801a      	strh	r2, [r3, #0]
 80085b4:	e066      	b.n	8008684 <USB_EPStartXfer+0xfc0>
 80085b6:	1d7b      	adds	r3, r7, #5
 80085b8:	33ff      	adds	r3, #255	; 0xff
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	2b3e      	cmp	r3, #62	; 0x3e
 80085be:	d81c      	bhi.n	80085fa <USB_EPStartXfer+0xf36>
 80085c0:	1d7b      	adds	r3, r7, #5
 80085c2:	33ff      	adds	r3, #255	; 0xff
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	085b      	lsrs	r3, r3, #1
 80085c8:	21dc      	movs	r1, #220	; 0xdc
 80085ca:	187a      	adds	r2, r7, r1
 80085cc:	6013      	str	r3, [r2, #0]
 80085ce:	1d7b      	adds	r3, r7, #5
 80085d0:	33ff      	adds	r3, #255	; 0xff
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	2201      	movs	r2, #1
 80085d6:	4013      	ands	r3, r2
 80085d8:	d004      	beq.n	80085e4 <USB_EPStartXfer+0xf20>
 80085da:	187b      	adds	r3, r7, r1
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	3301      	adds	r3, #1
 80085e0:	187a      	adds	r2, r7, r1
 80085e2:	6013      	str	r3, [r2, #0]
 80085e4:	23dc      	movs	r3, #220	; 0xdc
 80085e6:	18fb      	adds	r3, r7, r3
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	b29b      	uxth	r3, r3
 80085ec:	029b      	lsls	r3, r3, #10
 80085ee:	b29a      	uxth	r2, r3
 80085f0:	23c8      	movs	r3, #200	; 0xc8
 80085f2:	18fb      	adds	r3, r7, r3
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	801a      	strh	r2, [r3, #0]
 80085f8:	e044      	b.n	8008684 <USB_EPStartXfer+0xfc0>
 80085fa:	1d7b      	adds	r3, r7, #5
 80085fc:	33ff      	adds	r3, #255	; 0xff
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	095b      	lsrs	r3, r3, #5
 8008602:	21dc      	movs	r1, #220	; 0xdc
 8008604:	187a      	adds	r2, r7, r1
 8008606:	6013      	str	r3, [r2, #0]
 8008608:	1d7b      	adds	r3, r7, #5
 800860a:	33ff      	adds	r3, #255	; 0xff
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	221f      	movs	r2, #31
 8008610:	4013      	ands	r3, r2
 8008612:	d104      	bne.n	800861e <USB_EPStartXfer+0xf5a>
 8008614:	187b      	adds	r3, r7, r1
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	3b01      	subs	r3, #1
 800861a:	187a      	adds	r2, r7, r1
 800861c:	6013      	str	r3, [r2, #0]
 800861e:	23dc      	movs	r3, #220	; 0xdc
 8008620:	18fb      	adds	r3, r7, r3
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	b29b      	uxth	r3, r3
 8008626:	029b      	lsls	r3, r3, #10
 8008628:	b29b      	uxth	r3, r3
 800862a:	4a7f      	ldr	r2, [pc, #508]	; (8008828 <USB_EPStartXfer+0x1164>)
 800862c:	4313      	orrs	r3, r2
 800862e:	b29a      	uxth	r2, r3
 8008630:	23c8      	movs	r3, #200	; 0xc8
 8008632:	18fb      	adds	r3, r7, r3
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	801a      	strh	r2, [r3, #0]
 8008638:	e024      	b.n	8008684 <USB_EPStartXfer+0xfc0>
 800863a:	683b      	ldr	r3, [r7, #0]
 800863c:	785b      	ldrb	r3, [r3, #1]
 800863e:	2b01      	cmp	r3, #1
 8008640:	d120      	bne.n	8008684 <USB_EPStartXfer+0xfc0>
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	21d4      	movs	r1, #212	; 0xd4
 8008646:	187a      	adds	r2, r7, r1
 8008648:	6013      	str	r3, [r2, #0]
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	2250      	movs	r2, #80	; 0x50
 800864e:	5a9b      	ldrh	r3, [r3, r2]
 8008650:	b29b      	uxth	r3, r3
 8008652:	001a      	movs	r2, r3
 8008654:	187b      	adds	r3, r7, r1
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	189b      	adds	r3, r3, r2
 800865a:	187a      	adds	r2, r7, r1
 800865c:	6013      	str	r3, [r2, #0]
 800865e:	683b      	ldr	r3, [r7, #0]
 8008660:	781b      	ldrb	r3, [r3, #0]
 8008662:	00da      	lsls	r2, r3, #3
 8008664:	187b      	adds	r3, r7, r1
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	18d3      	adds	r3, r2, r3
 800866a:	4a6d      	ldr	r2, [pc, #436]	; (8008820 <USB_EPStartXfer+0x115c>)
 800866c:	4694      	mov	ip, r2
 800866e:	4463      	add	r3, ip
 8008670:	21d0      	movs	r1, #208	; 0xd0
 8008672:	187a      	adds	r2, r7, r1
 8008674:	6013      	str	r3, [r2, #0]
 8008676:	1d7b      	adds	r3, r7, #5
 8008678:	33ff      	adds	r3, #255	; 0xff
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	b29a      	uxth	r2, r3
 800867e:	187b      	adds	r3, r7, r1
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	801a      	strh	r2, [r3, #0]
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	22c4      	movs	r2, #196	; 0xc4
 8008688:	18ba      	adds	r2, r7, r2
 800868a:	6013      	str	r3, [r2, #0]
 800868c:	683b      	ldr	r3, [r7, #0]
 800868e:	785b      	ldrb	r3, [r3, #1]
 8008690:	2b00      	cmp	r3, #0
 8008692:	d000      	beq.n	8008696 <USB_EPStartXfer+0xfd2>
 8008694:	e075      	b.n	8008782 <USB_EPStartXfer+0x10be>
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	21bc      	movs	r1, #188	; 0xbc
 800869a:	187a      	adds	r2, r7, r1
 800869c:	6013      	str	r3, [r2, #0]
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	2250      	movs	r2, #80	; 0x50
 80086a2:	5a9b      	ldrh	r3, [r3, r2]
 80086a4:	b29b      	uxth	r3, r3
 80086a6:	001a      	movs	r2, r3
 80086a8:	187b      	adds	r3, r7, r1
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	189b      	adds	r3, r3, r2
 80086ae:	187a      	adds	r2, r7, r1
 80086b0:	6013      	str	r3, [r2, #0]
 80086b2:	683b      	ldr	r3, [r7, #0]
 80086b4:	781b      	ldrb	r3, [r3, #0]
 80086b6:	00da      	lsls	r2, r3, #3
 80086b8:	187b      	adds	r3, r7, r1
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	18d3      	adds	r3, r2, r3
 80086be:	4a5b      	ldr	r2, [pc, #364]	; (800882c <USB_EPStartXfer+0x1168>)
 80086c0:	4694      	mov	ip, r2
 80086c2:	4463      	add	r3, ip
 80086c4:	21b8      	movs	r1, #184	; 0xb8
 80086c6:	187a      	adds	r2, r7, r1
 80086c8:	6013      	str	r3, [r2, #0]
 80086ca:	1d7b      	adds	r3, r7, #5
 80086cc:	33ff      	adds	r3, #255	; 0xff
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	2b00      	cmp	r3, #0
 80086d2:	d114      	bne.n	80086fe <USB_EPStartXfer+0x103a>
 80086d4:	187b      	adds	r3, r7, r1
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	881b      	ldrh	r3, [r3, #0]
 80086da:	b29b      	uxth	r3, r3
 80086dc:	4a51      	ldr	r2, [pc, #324]	; (8008824 <USB_EPStartXfer+0x1160>)
 80086de:	4013      	ands	r3, r2
 80086e0:	b29a      	uxth	r2, r3
 80086e2:	187b      	adds	r3, r7, r1
 80086e4:	681b      	ldr	r3, [r3, #0]
 80086e6:	801a      	strh	r2, [r3, #0]
 80086e8:	187b      	adds	r3, r7, r1
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	881b      	ldrh	r3, [r3, #0]
 80086ee:	b29b      	uxth	r3, r3
 80086f0:	4a4d      	ldr	r2, [pc, #308]	; (8008828 <USB_EPStartXfer+0x1164>)
 80086f2:	4313      	orrs	r3, r2
 80086f4:	b29a      	uxth	r2, r3
 80086f6:	187b      	adds	r3, r7, r1
 80086f8:	681b      	ldr	r3, [r3, #0]
 80086fa:	801a      	strh	r2, [r3, #0]
 80086fc:	e066      	b.n	80087cc <USB_EPStartXfer+0x1108>
 80086fe:	1d7b      	adds	r3, r7, #5
 8008700:	33ff      	adds	r3, #255	; 0xff
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	2b3e      	cmp	r3, #62	; 0x3e
 8008706:	d81c      	bhi.n	8008742 <USB_EPStartXfer+0x107e>
 8008708:	1d7b      	adds	r3, r7, #5
 800870a:	33ff      	adds	r3, #255	; 0xff
 800870c:	681b      	ldr	r3, [r3, #0]
 800870e:	085b      	lsrs	r3, r3, #1
 8008710:	21d8      	movs	r1, #216	; 0xd8
 8008712:	187a      	adds	r2, r7, r1
 8008714:	6013      	str	r3, [r2, #0]
 8008716:	1d7b      	adds	r3, r7, #5
 8008718:	33ff      	adds	r3, #255	; 0xff
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	2201      	movs	r2, #1
 800871e:	4013      	ands	r3, r2
 8008720:	d004      	beq.n	800872c <USB_EPStartXfer+0x1068>
 8008722:	187b      	adds	r3, r7, r1
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	3301      	adds	r3, #1
 8008728:	187a      	adds	r2, r7, r1
 800872a:	6013      	str	r3, [r2, #0]
 800872c:	23d8      	movs	r3, #216	; 0xd8
 800872e:	18fb      	adds	r3, r7, r3
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	b29b      	uxth	r3, r3
 8008734:	029b      	lsls	r3, r3, #10
 8008736:	b29a      	uxth	r2, r3
 8008738:	23b8      	movs	r3, #184	; 0xb8
 800873a:	18fb      	adds	r3, r7, r3
 800873c:	681b      	ldr	r3, [r3, #0]
 800873e:	801a      	strh	r2, [r3, #0]
 8008740:	e044      	b.n	80087cc <USB_EPStartXfer+0x1108>
 8008742:	1d7b      	adds	r3, r7, #5
 8008744:	33ff      	adds	r3, #255	; 0xff
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	095b      	lsrs	r3, r3, #5
 800874a:	21d8      	movs	r1, #216	; 0xd8
 800874c:	187a      	adds	r2, r7, r1
 800874e:	6013      	str	r3, [r2, #0]
 8008750:	1d7b      	adds	r3, r7, #5
 8008752:	33ff      	adds	r3, #255	; 0xff
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	221f      	movs	r2, #31
 8008758:	4013      	ands	r3, r2
 800875a:	d104      	bne.n	8008766 <USB_EPStartXfer+0x10a2>
 800875c:	187b      	adds	r3, r7, r1
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	3b01      	subs	r3, #1
 8008762:	187a      	adds	r2, r7, r1
 8008764:	6013      	str	r3, [r2, #0]
 8008766:	23d8      	movs	r3, #216	; 0xd8
 8008768:	18fb      	adds	r3, r7, r3
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	b29b      	uxth	r3, r3
 800876e:	029b      	lsls	r3, r3, #10
 8008770:	b29b      	uxth	r3, r3
 8008772:	4a2d      	ldr	r2, [pc, #180]	; (8008828 <USB_EPStartXfer+0x1164>)
 8008774:	4313      	orrs	r3, r2
 8008776:	b29a      	uxth	r2, r3
 8008778:	23b8      	movs	r3, #184	; 0xb8
 800877a:	18fb      	adds	r3, r7, r3
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	801a      	strh	r2, [r3, #0]
 8008780:	e024      	b.n	80087cc <USB_EPStartXfer+0x1108>
 8008782:	683b      	ldr	r3, [r7, #0]
 8008784:	785b      	ldrb	r3, [r3, #1]
 8008786:	2b01      	cmp	r3, #1
 8008788:	d120      	bne.n	80087cc <USB_EPStartXfer+0x1108>
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	2250      	movs	r2, #80	; 0x50
 800878e:	5a9b      	ldrh	r3, [r3, r2]
 8008790:	b29b      	uxth	r3, r3
 8008792:	001a      	movs	r2, r3
 8008794:	21c4      	movs	r1, #196	; 0xc4
 8008796:	187b      	adds	r3, r7, r1
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	189b      	adds	r3, r3, r2
 800879c:	187a      	adds	r2, r7, r1
 800879e:	6013      	str	r3, [r2, #0]
 80087a0:	683b      	ldr	r3, [r7, #0]
 80087a2:	781b      	ldrb	r3, [r3, #0]
 80087a4:	00da      	lsls	r2, r3, #3
 80087a6:	187b      	adds	r3, r7, r1
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	18d3      	adds	r3, r2, r3
 80087ac:	4a1f      	ldr	r2, [pc, #124]	; (800882c <USB_EPStartXfer+0x1168>)
 80087ae:	4694      	mov	ip, r2
 80087b0:	4463      	add	r3, ip
 80087b2:	21c0      	movs	r1, #192	; 0xc0
 80087b4:	187a      	adds	r2, r7, r1
 80087b6:	6013      	str	r3, [r2, #0]
 80087b8:	1d7b      	adds	r3, r7, #5
 80087ba:	33ff      	adds	r3, #255	; 0xff
 80087bc:	681b      	ldr	r3, [r3, #0]
 80087be:	b29a      	uxth	r2, r3
 80087c0:	187b      	adds	r3, r7, r1
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	801a      	strh	r2, [r3, #0]
 80087c6:	e001      	b.n	80087cc <USB_EPStartXfer+0x1108>
      }
      else
      {
        return HAL_ERROR;
 80087c8:	2301      	movs	r3, #1
 80087ca:	e025      	b.n	8008818 <USB_EPStartXfer+0x1154>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80087cc:	687a      	ldr	r2, [r7, #4]
 80087ce:	683b      	ldr	r3, [r7, #0]
 80087d0:	781b      	ldrb	r3, [r3, #0]
 80087d2:	009b      	lsls	r3, r3, #2
 80087d4:	18d3      	adds	r3, r2, r3
 80087d6:	881b      	ldrh	r3, [r3, #0]
 80087d8:	b29a      	uxth	r2, r3
 80087da:	208a      	movs	r0, #138	; 0x8a
 80087dc:	183b      	adds	r3, r7, r0
 80087de:	4914      	ldr	r1, [pc, #80]	; (8008830 <USB_EPStartXfer+0x116c>)
 80087e0:	400a      	ands	r2, r1
 80087e2:	801a      	strh	r2, [r3, #0]
 80087e4:	183b      	adds	r3, r7, r0
 80087e6:	183a      	adds	r2, r7, r0
 80087e8:	8812      	ldrh	r2, [r2, #0]
 80087ea:	2180      	movs	r1, #128	; 0x80
 80087ec:	0149      	lsls	r1, r1, #5
 80087ee:	404a      	eors	r2, r1
 80087f0:	801a      	strh	r2, [r3, #0]
 80087f2:	183b      	adds	r3, r7, r0
 80087f4:	183a      	adds	r2, r7, r0
 80087f6:	8812      	ldrh	r2, [r2, #0]
 80087f8:	2180      	movs	r1, #128	; 0x80
 80087fa:	0189      	lsls	r1, r1, #6
 80087fc:	404a      	eors	r2, r1
 80087fe:	801a      	strh	r2, [r3, #0]
 8008800:	687a      	ldr	r2, [r7, #4]
 8008802:	683b      	ldr	r3, [r7, #0]
 8008804:	781b      	ldrb	r3, [r3, #0]
 8008806:	009b      	lsls	r3, r3, #2
 8008808:	18d3      	adds	r3, r2, r3
 800880a:	183a      	adds	r2, r7, r0
 800880c:	8812      	ldrh	r2, [r2, #0]
 800880e:	4909      	ldr	r1, [pc, #36]	; (8008834 <USB_EPStartXfer+0x1170>)
 8008810:	430a      	orrs	r2, r1
 8008812:	b292      	uxth	r2, r2
 8008814:	801a      	strh	r2, [r3, #0]
  }

  return HAL_OK;
 8008816:	2300      	movs	r3, #0
}
 8008818:	0018      	movs	r0, r3
 800881a:	46bd      	mov	sp, r7
 800881c:	b043      	add	sp, #268	; 0x10c
 800881e:	bd90      	pop	{r4, r7, pc}
 8008820:	00000402 	.word	0x00000402
 8008824:	ffff83ff 	.word	0xffff83ff
 8008828:	ffff8000 	.word	0xffff8000
 800882c:	00000406 	.word	0x00000406
 8008830:	ffffbf8f 	.word	0xffffbf8f
 8008834:	ffff8080 	.word	0xffff8080

08008838 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008838:	b580      	push	{r7, lr}
 800883a:	b084      	sub	sp, #16
 800883c:	af00      	add	r7, sp, #0
 800883e:	6078      	str	r0, [r7, #4]
 8008840:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8008842:	683b      	ldr	r3, [r7, #0]
 8008844:	785b      	ldrb	r3, [r3, #1]
 8008846:	2b00      	cmp	r3, #0
 8008848:	d01d      	beq.n	8008886 <USB_EPSetStall+0x4e>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800884a:	687a      	ldr	r2, [r7, #4]
 800884c:	683b      	ldr	r3, [r7, #0]
 800884e:	781b      	ldrb	r3, [r3, #0]
 8008850:	009b      	lsls	r3, r3, #2
 8008852:	18d3      	adds	r3, r2, r3
 8008854:	881b      	ldrh	r3, [r3, #0]
 8008856:	b29a      	uxth	r2, r3
 8008858:	200c      	movs	r0, #12
 800885a:	183b      	adds	r3, r7, r0
 800885c:	491b      	ldr	r1, [pc, #108]	; (80088cc <USB_EPSetStall+0x94>)
 800885e:	400a      	ands	r2, r1
 8008860:	801a      	strh	r2, [r3, #0]
 8008862:	183b      	adds	r3, r7, r0
 8008864:	183a      	adds	r2, r7, r0
 8008866:	8812      	ldrh	r2, [r2, #0]
 8008868:	2110      	movs	r1, #16
 800886a:	404a      	eors	r2, r1
 800886c:	801a      	strh	r2, [r3, #0]
 800886e:	687a      	ldr	r2, [r7, #4]
 8008870:	683b      	ldr	r3, [r7, #0]
 8008872:	781b      	ldrb	r3, [r3, #0]
 8008874:	009b      	lsls	r3, r3, #2
 8008876:	18d3      	adds	r3, r2, r3
 8008878:	183a      	adds	r2, r7, r0
 800887a:	8812      	ldrh	r2, [r2, #0]
 800887c:	4914      	ldr	r1, [pc, #80]	; (80088d0 <USB_EPSetStall+0x98>)
 800887e:	430a      	orrs	r2, r1
 8008880:	b292      	uxth	r2, r2
 8008882:	801a      	strh	r2, [r3, #0]
 8008884:	e01d      	b.n	80088c2 <USB_EPSetStall+0x8a>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8008886:	687a      	ldr	r2, [r7, #4]
 8008888:	683b      	ldr	r3, [r7, #0]
 800888a:	781b      	ldrb	r3, [r3, #0]
 800888c:	009b      	lsls	r3, r3, #2
 800888e:	18d3      	adds	r3, r2, r3
 8008890:	881b      	ldrh	r3, [r3, #0]
 8008892:	b29a      	uxth	r2, r3
 8008894:	200e      	movs	r0, #14
 8008896:	183b      	adds	r3, r7, r0
 8008898:	490e      	ldr	r1, [pc, #56]	; (80088d4 <USB_EPSetStall+0x9c>)
 800889a:	400a      	ands	r2, r1
 800889c:	801a      	strh	r2, [r3, #0]
 800889e:	183b      	adds	r3, r7, r0
 80088a0:	183a      	adds	r2, r7, r0
 80088a2:	8812      	ldrh	r2, [r2, #0]
 80088a4:	2180      	movs	r1, #128	; 0x80
 80088a6:	0149      	lsls	r1, r1, #5
 80088a8:	404a      	eors	r2, r1
 80088aa:	801a      	strh	r2, [r3, #0]
 80088ac:	687a      	ldr	r2, [r7, #4]
 80088ae:	683b      	ldr	r3, [r7, #0]
 80088b0:	781b      	ldrb	r3, [r3, #0]
 80088b2:	009b      	lsls	r3, r3, #2
 80088b4:	18d3      	adds	r3, r2, r3
 80088b6:	183a      	adds	r2, r7, r0
 80088b8:	8812      	ldrh	r2, [r2, #0]
 80088ba:	4905      	ldr	r1, [pc, #20]	; (80088d0 <USB_EPSetStall+0x98>)
 80088bc:	430a      	orrs	r2, r1
 80088be:	b292      	uxth	r2, r2
 80088c0:	801a      	strh	r2, [r3, #0]
  }

  return HAL_OK;
 80088c2:	2300      	movs	r3, #0
}
 80088c4:	0018      	movs	r0, r3
 80088c6:	46bd      	mov	sp, r7
 80088c8:	b004      	add	sp, #16
 80088ca:	bd80      	pop	{r7, pc}
 80088cc:	ffff8fbf 	.word	0xffff8fbf
 80088d0:	ffff8080 	.word	0xffff8080
 80088d4:	ffffbf8f 	.word	0xffffbf8f

080088d8 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80088d8:	b580      	push	{r7, lr}
 80088da:	b086      	sub	sp, #24
 80088dc:	af00      	add	r7, sp, #0
 80088de:	6078      	str	r0, [r7, #4]
 80088e0:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80088e2:	683b      	ldr	r3, [r7, #0]
 80088e4:	7b1b      	ldrb	r3, [r3, #12]
 80088e6:	2b00      	cmp	r3, #0
 80088e8:	d000      	beq.n	80088ec <USB_EPClearStall+0x14>
 80088ea:	e095      	b.n	8008a18 <USB_EPClearStall+0x140>
  {
    if (ep->is_in != 0U)
 80088ec:	683b      	ldr	r3, [r7, #0]
 80088ee:	785b      	ldrb	r3, [r3, #1]
 80088f0:	2b00      	cmp	r3, #0
 80088f2:	d046      	beq.n	8008982 <USB_EPClearStall+0xaa>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80088f4:	687a      	ldr	r2, [r7, #4]
 80088f6:	683b      	ldr	r3, [r7, #0]
 80088f8:	781b      	ldrb	r3, [r3, #0]
 80088fa:	009b      	lsls	r3, r3, #2
 80088fc:	18d2      	adds	r2, r2, r3
 80088fe:	2110      	movs	r1, #16
 8008900:	187b      	adds	r3, r7, r1
 8008902:	8812      	ldrh	r2, [r2, #0]
 8008904:	801a      	strh	r2, [r3, #0]
 8008906:	187b      	adds	r3, r7, r1
 8008908:	881b      	ldrh	r3, [r3, #0]
 800890a:	2240      	movs	r2, #64	; 0x40
 800890c:	4013      	ands	r3, r2
 800890e:	d016      	beq.n	800893e <USB_EPClearStall+0x66>
 8008910:	687a      	ldr	r2, [r7, #4]
 8008912:	683b      	ldr	r3, [r7, #0]
 8008914:	781b      	ldrb	r3, [r3, #0]
 8008916:	009b      	lsls	r3, r3, #2
 8008918:	18d3      	adds	r3, r2, r3
 800891a:	881b      	ldrh	r3, [r3, #0]
 800891c:	b29a      	uxth	r2, r3
 800891e:	200e      	movs	r0, #14
 8008920:	183b      	adds	r3, r7, r0
 8008922:	4940      	ldr	r1, [pc, #256]	; (8008a24 <USB_EPClearStall+0x14c>)
 8008924:	400a      	ands	r2, r1
 8008926:	801a      	strh	r2, [r3, #0]
 8008928:	687a      	ldr	r2, [r7, #4]
 800892a:	683b      	ldr	r3, [r7, #0]
 800892c:	781b      	ldrb	r3, [r3, #0]
 800892e:	009b      	lsls	r3, r3, #2
 8008930:	18d3      	adds	r3, r2, r3
 8008932:	183a      	adds	r2, r7, r0
 8008934:	8812      	ldrh	r2, [r2, #0]
 8008936:	493c      	ldr	r1, [pc, #240]	; (8008a28 <USB_EPClearStall+0x150>)
 8008938:	430a      	orrs	r2, r1
 800893a:	b292      	uxth	r2, r2
 800893c:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 800893e:	683b      	ldr	r3, [r7, #0]
 8008940:	78db      	ldrb	r3, [r3, #3]
 8008942:	2b01      	cmp	r3, #1
 8008944:	d068      	beq.n	8008a18 <USB_EPClearStall+0x140>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8008946:	687a      	ldr	r2, [r7, #4]
 8008948:	683b      	ldr	r3, [r7, #0]
 800894a:	781b      	ldrb	r3, [r3, #0]
 800894c:	009b      	lsls	r3, r3, #2
 800894e:	18d3      	adds	r3, r2, r3
 8008950:	881b      	ldrh	r3, [r3, #0]
 8008952:	b29a      	uxth	r2, r3
 8008954:	200c      	movs	r0, #12
 8008956:	183b      	adds	r3, r7, r0
 8008958:	4934      	ldr	r1, [pc, #208]	; (8008a2c <USB_EPClearStall+0x154>)
 800895a:	400a      	ands	r2, r1
 800895c:	801a      	strh	r2, [r3, #0]
 800895e:	183b      	adds	r3, r7, r0
 8008960:	183a      	adds	r2, r7, r0
 8008962:	8812      	ldrh	r2, [r2, #0]
 8008964:	2120      	movs	r1, #32
 8008966:	404a      	eors	r2, r1
 8008968:	801a      	strh	r2, [r3, #0]
 800896a:	687a      	ldr	r2, [r7, #4]
 800896c:	683b      	ldr	r3, [r7, #0]
 800896e:	781b      	ldrb	r3, [r3, #0]
 8008970:	009b      	lsls	r3, r3, #2
 8008972:	18d3      	adds	r3, r2, r3
 8008974:	183a      	adds	r2, r7, r0
 8008976:	8812      	ldrh	r2, [r2, #0]
 8008978:	492d      	ldr	r1, [pc, #180]	; (8008a30 <USB_EPClearStall+0x158>)
 800897a:	430a      	orrs	r2, r1
 800897c:	b292      	uxth	r2, r2
 800897e:	801a      	strh	r2, [r3, #0]
 8008980:	e04a      	b.n	8008a18 <USB_EPClearStall+0x140>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008982:	687a      	ldr	r2, [r7, #4]
 8008984:	683b      	ldr	r3, [r7, #0]
 8008986:	781b      	ldrb	r3, [r3, #0]
 8008988:	009b      	lsls	r3, r3, #2
 800898a:	18d2      	adds	r2, r2, r3
 800898c:	2116      	movs	r1, #22
 800898e:	187b      	adds	r3, r7, r1
 8008990:	8812      	ldrh	r2, [r2, #0]
 8008992:	801a      	strh	r2, [r3, #0]
 8008994:	187b      	adds	r3, r7, r1
 8008996:	881a      	ldrh	r2, [r3, #0]
 8008998:	2380      	movs	r3, #128	; 0x80
 800899a:	01db      	lsls	r3, r3, #7
 800899c:	4013      	ands	r3, r2
 800899e:	d016      	beq.n	80089ce <USB_EPClearStall+0xf6>
 80089a0:	687a      	ldr	r2, [r7, #4]
 80089a2:	683b      	ldr	r3, [r7, #0]
 80089a4:	781b      	ldrb	r3, [r3, #0]
 80089a6:	009b      	lsls	r3, r3, #2
 80089a8:	18d3      	adds	r3, r2, r3
 80089aa:	881b      	ldrh	r3, [r3, #0]
 80089ac:	b29a      	uxth	r2, r3
 80089ae:	2014      	movs	r0, #20
 80089b0:	183b      	adds	r3, r7, r0
 80089b2:	491c      	ldr	r1, [pc, #112]	; (8008a24 <USB_EPClearStall+0x14c>)
 80089b4:	400a      	ands	r2, r1
 80089b6:	801a      	strh	r2, [r3, #0]
 80089b8:	687a      	ldr	r2, [r7, #4]
 80089ba:	683b      	ldr	r3, [r7, #0]
 80089bc:	781b      	ldrb	r3, [r3, #0]
 80089be:	009b      	lsls	r3, r3, #2
 80089c0:	18d3      	adds	r3, r2, r3
 80089c2:	183a      	adds	r2, r7, r0
 80089c4:	8812      	ldrh	r2, [r2, #0]
 80089c6:	491b      	ldr	r1, [pc, #108]	; (8008a34 <USB_EPClearStall+0x15c>)
 80089c8:	430a      	orrs	r2, r1
 80089ca:	b292      	uxth	r2, r2
 80089cc:	801a      	strh	r2, [r3, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80089ce:	687a      	ldr	r2, [r7, #4]
 80089d0:	683b      	ldr	r3, [r7, #0]
 80089d2:	781b      	ldrb	r3, [r3, #0]
 80089d4:	009b      	lsls	r3, r3, #2
 80089d6:	18d3      	adds	r3, r2, r3
 80089d8:	881b      	ldrh	r3, [r3, #0]
 80089da:	b29a      	uxth	r2, r3
 80089dc:	2012      	movs	r0, #18
 80089de:	183b      	adds	r3, r7, r0
 80089e0:	4915      	ldr	r1, [pc, #84]	; (8008a38 <USB_EPClearStall+0x160>)
 80089e2:	400a      	ands	r2, r1
 80089e4:	801a      	strh	r2, [r3, #0]
 80089e6:	183b      	adds	r3, r7, r0
 80089e8:	183a      	adds	r2, r7, r0
 80089ea:	8812      	ldrh	r2, [r2, #0]
 80089ec:	2180      	movs	r1, #128	; 0x80
 80089ee:	0149      	lsls	r1, r1, #5
 80089f0:	404a      	eors	r2, r1
 80089f2:	801a      	strh	r2, [r3, #0]
 80089f4:	183b      	adds	r3, r7, r0
 80089f6:	183a      	adds	r2, r7, r0
 80089f8:	8812      	ldrh	r2, [r2, #0]
 80089fa:	2180      	movs	r1, #128	; 0x80
 80089fc:	0189      	lsls	r1, r1, #6
 80089fe:	404a      	eors	r2, r1
 8008a00:	801a      	strh	r2, [r3, #0]
 8008a02:	687a      	ldr	r2, [r7, #4]
 8008a04:	683b      	ldr	r3, [r7, #0]
 8008a06:	781b      	ldrb	r3, [r3, #0]
 8008a08:	009b      	lsls	r3, r3, #2
 8008a0a:	18d3      	adds	r3, r2, r3
 8008a0c:	183a      	adds	r2, r7, r0
 8008a0e:	8812      	ldrh	r2, [r2, #0]
 8008a10:	4907      	ldr	r1, [pc, #28]	; (8008a30 <USB_EPClearStall+0x158>)
 8008a12:	430a      	orrs	r2, r1
 8008a14:	b292      	uxth	r2, r2
 8008a16:	801a      	strh	r2, [r3, #0]
    }
  }

  return HAL_OK;
 8008a18:	2300      	movs	r3, #0
}
 8008a1a:	0018      	movs	r0, r3
 8008a1c:	46bd      	mov	sp, r7
 8008a1e:	b006      	add	sp, #24
 8008a20:	bd80      	pop	{r7, pc}
 8008a22:	46c0      	nop			; (mov r8, r8)
 8008a24:	ffff8f8f 	.word	0xffff8f8f
 8008a28:	ffff80c0 	.word	0xffff80c0
 8008a2c:	ffff8fbf 	.word	0xffff8fbf
 8008a30:	ffff8080 	.word	0xffff8080
 8008a34:	ffffc080 	.word	0xffffc080
 8008a38:	ffffbf8f 	.word	0xffffbf8f

08008a3c <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8008a3c:	b580      	push	{r7, lr}
 8008a3e:	b082      	sub	sp, #8
 8008a40:	af00      	add	r7, sp, #0
 8008a42:	6078      	str	r0, [r7, #4]
 8008a44:	000a      	movs	r2, r1
 8008a46:	1cfb      	adds	r3, r7, #3
 8008a48:	701a      	strb	r2, [r3, #0]
  if (address == 0U)
 8008a4a:	1cfb      	adds	r3, r7, #3
 8008a4c:	781b      	ldrb	r3, [r3, #0]
 8008a4e:	2b00      	cmp	r3, #0
 8008a50:	d103      	bne.n	8008a5a <USB_SetDevAddress+0x1e>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	224c      	movs	r2, #76	; 0x4c
 8008a56:	2180      	movs	r1, #128	; 0x80
 8008a58:	5299      	strh	r1, [r3, r2]
  }

  return HAL_OK;
 8008a5a:	2300      	movs	r3, #0
}
 8008a5c:	0018      	movs	r0, r3
 8008a5e:	46bd      	mov	sp, r7
 8008a60:	b002      	add	sp, #8
 8008a62:	bd80      	pop	{r7, pc}

08008a64 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8008a64:	b580      	push	{r7, lr}
 8008a66:	b082      	sub	sp, #8
 8008a68:	af00      	add	r7, sp, #0
 8008a6a:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	2258      	movs	r2, #88	; 0x58
 8008a70:	5a9b      	ldrh	r3, [r3, r2]
 8008a72:	b29b      	uxth	r3, r3
 8008a74:	4a05      	ldr	r2, [pc, #20]	; (8008a8c <USB_DevConnect+0x28>)
 8008a76:	4313      	orrs	r3, r2
 8008a78:	b299      	uxth	r1, r3
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	2258      	movs	r2, #88	; 0x58
 8008a7e:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8008a80:	2300      	movs	r3, #0
}
 8008a82:	0018      	movs	r0, r3
 8008a84:	46bd      	mov	sp, r7
 8008a86:	b002      	add	sp, #8
 8008a88:	bd80      	pop	{r7, pc}
 8008a8a:	46c0      	nop			; (mov r8, r8)
 8008a8c:	ffff8000 	.word	0xffff8000

08008a90 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8008a90:	b580      	push	{r7, lr}
 8008a92:	b084      	sub	sp, #16
 8008a94:	af00      	add	r7, sp, #0
 8008a96:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	2244      	movs	r2, #68	; 0x44
 8008a9c:	5a9b      	ldrh	r3, [r3, r2]
 8008a9e:	b29b      	uxth	r3, r3
 8008aa0:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8008aa2:	68fb      	ldr	r3, [r7, #12]
}
 8008aa4:	0018      	movs	r0, r3
 8008aa6:	46bd      	mov	sp, r7
 8008aa8:	b004      	add	sp, #16
 8008aaa:	bd80      	pop	{r7, pc}

08008aac <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8008aac:	b580      	push	{r7, lr}
 8008aae:	b08c      	sub	sp, #48	; 0x30
 8008ab0:	af00      	add	r7, sp, #0
 8008ab2:	60f8      	str	r0, [r7, #12]
 8008ab4:	60b9      	str	r1, [r7, #8]
 8008ab6:	0019      	movs	r1, r3
 8008ab8:	1dbb      	adds	r3, r7, #6
 8008aba:	801a      	strh	r2, [r3, #0]
 8008abc:	1d3b      	adds	r3, r7, #4
 8008abe:	1c0a      	adds	r2, r1, #0
 8008ac0:	801a      	strh	r2, [r3, #0]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8008ac2:	1d3b      	adds	r3, r7, #4
 8008ac4:	881b      	ldrh	r3, [r3, #0]
 8008ac6:	3301      	adds	r3, #1
 8008ac8:	085b      	lsrs	r3, r3, #1
 8008aca:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8008acc:	68fb      	ldr	r3, [r7, #12]
 8008ace:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8008ad0:	68bb      	ldr	r3, [r7, #8]
 8008ad2:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8008ad4:	1dbb      	adds	r3, r7, #6
 8008ad6:	881a      	ldrh	r2, [r3, #0]
 8008ad8:	69fb      	ldr	r3, [r7, #28]
 8008ada:	18d3      	adds	r3, r2, r3
 8008adc:	2280      	movs	r2, #128	; 0x80
 8008ade:	00d2      	lsls	r2, r2, #3
 8008ae0:	4694      	mov	ip, r2
 8008ae2:	4463      	add	r3, ip
 8008ae4:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8008ae6:	6a3b      	ldr	r3, [r7, #32]
 8008ae8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008aea:	e01b      	b.n	8008b24 <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 8008aec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008aee:	781b      	ldrb	r3, [r3, #0]
 8008af0:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8008af2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008af4:	3301      	adds	r3, #1
 8008af6:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8008af8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008afa:	781b      	ldrb	r3, [r3, #0]
 8008afc:	b29b      	uxth	r3, r3
 8008afe:	021b      	lsls	r3, r3, #8
 8008b00:	b29b      	uxth	r3, r3
 8008b02:	001a      	movs	r2, r3
 8008b04:	69bb      	ldr	r3, [r7, #24]
 8008b06:	4313      	orrs	r3, r2
 8008b08:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8008b0a:	697b      	ldr	r3, [r7, #20]
 8008b0c:	b29a      	uxth	r2, r3
 8008b0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b10:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8008b12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b14:	3302      	adds	r3, #2
 8008b16:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
#endif

    pBuf++;
 8008b18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b1a:	3301      	adds	r3, #1
 8008b1c:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8008b1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b20:	3b01      	subs	r3, #1
 8008b22:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008b24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b26:	2b00      	cmp	r3, #0
 8008b28:	d1e0      	bne.n	8008aec <USB_WritePMA+0x40>
  }
}
 8008b2a:	46c0      	nop			; (mov r8, r8)
 8008b2c:	46c0      	nop			; (mov r8, r8)
 8008b2e:	46bd      	mov	sp, r7
 8008b30:	b00c      	add	sp, #48	; 0x30
 8008b32:	bd80      	pop	{r7, pc}

08008b34 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8008b34:	b580      	push	{r7, lr}
 8008b36:	b08a      	sub	sp, #40	; 0x28
 8008b38:	af00      	add	r7, sp, #0
 8008b3a:	60f8      	str	r0, [r7, #12]
 8008b3c:	60b9      	str	r1, [r7, #8]
 8008b3e:	0019      	movs	r1, r3
 8008b40:	1dbb      	adds	r3, r7, #6
 8008b42:	801a      	strh	r2, [r3, #0]
 8008b44:	1d3b      	adds	r3, r7, #4
 8008b46:	1c0a      	adds	r2, r1, #0
 8008b48:	801a      	strh	r2, [r3, #0]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8008b4a:	1d3b      	adds	r3, r7, #4
 8008b4c:	881b      	ldrh	r3, [r3, #0]
 8008b4e:	085b      	lsrs	r3, r3, #1
 8008b50:	b29b      	uxth	r3, r3
 8008b52:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8008b54:	68fb      	ldr	r3, [r7, #12]
 8008b56:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8008b58:	68bb      	ldr	r3, [r7, #8]
 8008b5a:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8008b5c:	1dbb      	adds	r3, r7, #6
 8008b5e:	881a      	ldrh	r2, [r3, #0]
 8008b60:	697b      	ldr	r3, [r7, #20]
 8008b62:	18d3      	adds	r3, r2, r3
 8008b64:	2280      	movs	r2, #128	; 0x80
 8008b66:	00d2      	lsls	r2, r2, #3
 8008b68:	4694      	mov	ip, r2
 8008b6a:	4463      	add	r3, ip
 8008b6c:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8008b6e:	69bb      	ldr	r3, [r7, #24]
 8008b70:	627b      	str	r3, [r7, #36]	; 0x24
 8008b72:	e018      	b.n	8008ba6 <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8008b74:	6a3b      	ldr	r3, [r7, #32]
 8008b76:	881b      	ldrh	r3, [r3, #0]
 8008b78:	b29b      	uxth	r3, r3
 8008b7a:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8008b7c:	6a3b      	ldr	r3, [r7, #32]
 8008b7e:	3302      	adds	r3, #2
 8008b80:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8008b82:	693b      	ldr	r3, [r7, #16]
 8008b84:	b2da      	uxtb	r2, r3
 8008b86:	69fb      	ldr	r3, [r7, #28]
 8008b88:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8008b8a:	69fb      	ldr	r3, [r7, #28]
 8008b8c:	3301      	adds	r3, #1
 8008b8e:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8008b90:	693b      	ldr	r3, [r7, #16]
 8008b92:	0a1b      	lsrs	r3, r3, #8
 8008b94:	b2da      	uxtb	r2, r3
 8008b96:	69fb      	ldr	r3, [r7, #28]
 8008b98:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8008b9a:	69fb      	ldr	r3, [r7, #28]
 8008b9c:	3301      	adds	r3, #1
 8008b9e:	61fb      	str	r3, [r7, #28]
  for (i = n; i != 0U; i--)
 8008ba0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ba2:	3b01      	subs	r3, #1
 8008ba4:	627b      	str	r3, [r7, #36]	; 0x24
 8008ba6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ba8:	2b00      	cmp	r3, #0
 8008baa:	d1e3      	bne.n	8008b74 <USB_ReadPMA+0x40>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8008bac:	1d3b      	adds	r3, r7, #4
 8008bae:	881b      	ldrh	r3, [r3, #0]
 8008bb0:	2201      	movs	r2, #1
 8008bb2:	4013      	ands	r3, r2
 8008bb4:	b29b      	uxth	r3, r3
 8008bb6:	2b00      	cmp	r3, #0
 8008bb8:	d007      	beq.n	8008bca <USB_ReadPMA+0x96>
  {
    temp = *pdwVal;
 8008bba:	6a3b      	ldr	r3, [r7, #32]
 8008bbc:	881b      	ldrh	r3, [r3, #0]
 8008bbe:	b29b      	uxth	r3, r3
 8008bc0:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8008bc2:	693b      	ldr	r3, [r7, #16]
 8008bc4:	b2da      	uxtb	r2, r3
 8008bc6:	69fb      	ldr	r3, [r7, #28]
 8008bc8:	701a      	strb	r2, [r3, #0]
  }
}
 8008bca:	46c0      	nop			; (mov r8, r8)
 8008bcc:	46bd      	mov	sp, r7
 8008bce:	b00a      	add	sp, #40	; 0x28
 8008bd0:	bd80      	pop	{r7, pc}

08008bd2 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008bd2:	b580      	push	{r7, lr}
 8008bd4:	b084      	sub	sp, #16
 8008bd6:	af00      	add	r7, sp, #0
 8008bd8:	6078      	str	r0, [r7, #4]
 8008bda:	000a      	movs	r2, r1
 8008bdc:	1cfb      	adds	r3, r7, #3
 8008bde:	701a      	strb	r2, [r3, #0]
  uint8_t ret = 0U;
 8008be0:	230f      	movs	r3, #15
 8008be2:	18fb      	adds	r3, r7, r3
 8008be4:	2200      	movs	r2, #0
 8008be6:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	7c1b      	ldrb	r3, [r3, #16]
 8008bec:	2b00      	cmp	r3, #0
 8008bee:	d116      	bne.n	8008c1e <USBD_CDC_Init+0x4c>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8008bf0:	2380      	movs	r3, #128	; 0x80
 8008bf2:	009b      	lsls	r3, r3, #2
 8008bf4:	6878      	ldr	r0, [r7, #4]
 8008bf6:	2202      	movs	r2, #2
 8008bf8:	2181      	movs	r1, #129	; 0x81
 8008bfa:	f002 f8b4 	bl	800ad66 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	2201      	movs	r2, #1
 8008c02:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8008c04:	2380      	movs	r3, #128	; 0x80
 8008c06:	009b      	lsls	r3, r3, #2
 8008c08:	6878      	ldr	r0, [r7, #4]
 8008c0a:	2202      	movs	r2, #2
 8008c0c:	2101      	movs	r1, #1
 8008c0e:	f002 f8aa 	bl	800ad66 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8008c12:	687a      	ldr	r2, [r7, #4]
 8008c14:	23b6      	movs	r3, #182	; 0xb6
 8008c16:	005b      	lsls	r3, r3, #1
 8008c18:	2101      	movs	r1, #1
 8008c1a:	50d1      	str	r1, [r2, r3]
 8008c1c:	e013      	b.n	8008c46 <USBD_CDC_Init+0x74>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8008c1e:	6878      	ldr	r0, [r7, #4]
 8008c20:	2340      	movs	r3, #64	; 0x40
 8008c22:	2202      	movs	r2, #2
 8008c24:	2181      	movs	r1, #129	; 0x81
 8008c26:	f002 f89e 	bl	800ad66 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	2201      	movs	r2, #1
 8008c2e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8008c30:	6878      	ldr	r0, [r7, #4]
 8008c32:	2340      	movs	r3, #64	; 0x40
 8008c34:	2202      	movs	r2, #2
 8008c36:	2101      	movs	r1, #1
 8008c38:	f002 f895 	bl	800ad66 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8008c3c:	687a      	ldr	r2, [r7, #4]
 8008c3e:	23b6      	movs	r3, #182	; 0xb6
 8008c40:	005b      	lsls	r3, r3, #1
 8008c42:	2101      	movs	r1, #1
 8008c44:	50d1      	str	r1, [r2, r3]
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8008c46:	6878      	ldr	r0, [r7, #4]
 8008c48:	2308      	movs	r3, #8
 8008c4a:	2203      	movs	r2, #3
 8008c4c:	2182      	movs	r1, #130	; 0x82
 8008c4e:	f002 f88a 	bl	800ad66 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	2201      	movs	r2, #1
 8008c56:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8008c58:	2387      	movs	r3, #135	; 0x87
 8008c5a:	009b      	lsls	r3, r3, #2
 8008c5c:	0018      	movs	r0, r3
 8008c5e:	f002 fa1b 	bl	800b098 <USBD_static_malloc>
 8008c62:	0001      	movs	r1, r0
 8008c64:	687a      	ldr	r2, [r7, #4]
 8008c66:	23ae      	movs	r3, #174	; 0xae
 8008c68:	009b      	lsls	r3, r3, #2
 8008c6a:	50d1      	str	r1, [r2, r3]

  if (pdev->pClassData == NULL)
 8008c6c:	687a      	ldr	r2, [r7, #4]
 8008c6e:	23ae      	movs	r3, #174	; 0xae
 8008c70:	009b      	lsls	r3, r3, #2
 8008c72:	58d3      	ldr	r3, [r2, r3]
 8008c74:	2b00      	cmp	r3, #0
 8008c76:	d104      	bne.n	8008c82 <USBD_CDC_Init+0xb0>
  {
    ret = 1U;
 8008c78:	230f      	movs	r3, #15
 8008c7a:	18fb      	adds	r3, r7, r3
 8008c7c:	2201      	movs	r2, #1
 8008c7e:	701a      	strb	r2, [r3, #0]
 8008c80:	e02c      	b.n	8008cdc <USBD_CDC_Init+0x10a>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008c82:	687a      	ldr	r2, [r7, #4]
 8008c84:	23ae      	movs	r3, #174	; 0xae
 8008c86:	009b      	lsls	r3, r3, #2
 8008c88:	58d3      	ldr	r3, [r2, r3]
 8008c8a:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8008c8c:	687a      	ldr	r2, [r7, #4]
 8008c8e:	23af      	movs	r3, #175	; 0xaf
 8008c90:	009b      	lsls	r3, r3, #2
 8008c92:	58d3      	ldr	r3, [r2, r3]
 8008c94:	681b      	ldr	r3, [r3, #0]
 8008c96:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8008c98:	68ba      	ldr	r2, [r7, #8]
 8008c9a:	2385      	movs	r3, #133	; 0x85
 8008c9c:	009b      	lsls	r3, r3, #2
 8008c9e:	2100      	movs	r1, #0
 8008ca0:	50d1      	str	r1, [r2, r3]
    hcdc->RxState = 0U;
 8008ca2:	68ba      	ldr	r2, [r7, #8]
 8008ca4:	2386      	movs	r3, #134	; 0x86
 8008ca6:	009b      	lsls	r3, r3, #2
 8008ca8:	2100      	movs	r1, #0
 8008caa:	50d1      	str	r1, [r2, r3]

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	7c1b      	ldrb	r3, [r3, #16]
 8008cb0:	2b00      	cmp	r3, #0
 8008cb2:	d10a      	bne.n	8008cca <USBD_CDC_Init+0xf8>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008cb4:	68ba      	ldr	r2, [r7, #8]
 8008cb6:	2381      	movs	r3, #129	; 0x81
 8008cb8:	009b      	lsls	r3, r3, #2
 8008cba:	58d2      	ldr	r2, [r2, r3]
 8008cbc:	2380      	movs	r3, #128	; 0x80
 8008cbe:	009b      	lsls	r3, r3, #2
 8008cc0:	6878      	ldr	r0, [r7, #4]
 8008cc2:	2101      	movs	r1, #1
 8008cc4:	f002 f99a 	bl	800affc <USBD_LL_PrepareReceive>
 8008cc8:	e008      	b.n	8008cdc <USBD_CDC_Init+0x10a>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008cca:	68ba      	ldr	r2, [r7, #8]
 8008ccc:	2381      	movs	r3, #129	; 0x81
 8008cce:	009b      	lsls	r3, r3, #2
 8008cd0:	58d2      	ldr	r2, [r2, r3]
 8008cd2:	6878      	ldr	r0, [r7, #4]
 8008cd4:	2340      	movs	r3, #64	; 0x40
 8008cd6:	2101      	movs	r1, #1
 8008cd8:	f002 f990 	bl	800affc <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8008cdc:	230f      	movs	r3, #15
 8008cde:	18fb      	adds	r3, r7, r3
 8008ce0:	781b      	ldrb	r3, [r3, #0]
}
 8008ce2:	0018      	movs	r0, r3
 8008ce4:	46bd      	mov	sp, r7
 8008ce6:	b004      	add	sp, #16
 8008ce8:	bd80      	pop	{r7, pc}

08008cea <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008cea:	b580      	push	{r7, lr}
 8008cec:	b084      	sub	sp, #16
 8008cee:	af00      	add	r7, sp, #0
 8008cf0:	6078      	str	r0, [r7, #4]
 8008cf2:	000a      	movs	r2, r1
 8008cf4:	1cfb      	adds	r3, r7, #3
 8008cf6:	701a      	strb	r2, [r3, #0]
  uint8_t ret = 0U;
 8008cf8:	230f      	movs	r3, #15
 8008cfa:	18fb      	adds	r3, r7, r3
 8008cfc:	2200      	movs	r2, #0
 8008cfe:	701a      	strb	r2, [r3, #0]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	2181      	movs	r1, #129	; 0x81
 8008d04:	0018      	movs	r0, r3
 8008d06:	f002 f865 	bl	800add4 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	2200      	movs	r2, #0
 8008d0e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	2101      	movs	r1, #1
 8008d14:	0018      	movs	r0, r3
 8008d16:	f002 f85d 	bl	800add4 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8008d1a:	687a      	ldr	r2, [r7, #4]
 8008d1c:	23b6      	movs	r3, #182	; 0xb6
 8008d1e:	005b      	lsls	r3, r3, #1
 8008d20:	2100      	movs	r1, #0
 8008d22:	50d1      	str	r1, [r2, r3]

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	2182      	movs	r1, #130	; 0x82
 8008d28:	0018      	movs	r0, r3
 8008d2a:	f002 f853 	bl	800add4 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	2200      	movs	r2, #0
 8008d32:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8008d34:	687a      	ldr	r2, [r7, #4]
 8008d36:	23ae      	movs	r3, #174	; 0xae
 8008d38:	009b      	lsls	r3, r3, #2
 8008d3a:	58d3      	ldr	r3, [r2, r3]
 8008d3c:	2b00      	cmp	r3, #0
 8008d3e:	d011      	beq.n	8008d64 <USBD_CDC_DeInit+0x7a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8008d40:	687a      	ldr	r2, [r7, #4]
 8008d42:	23af      	movs	r3, #175	; 0xaf
 8008d44:	009b      	lsls	r3, r3, #2
 8008d46:	58d3      	ldr	r3, [r2, r3]
 8008d48:	685b      	ldr	r3, [r3, #4]
 8008d4a:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8008d4c:	687a      	ldr	r2, [r7, #4]
 8008d4e:	23ae      	movs	r3, #174	; 0xae
 8008d50:	009b      	lsls	r3, r3, #2
 8008d52:	58d3      	ldr	r3, [r2, r3]
 8008d54:	0018      	movs	r0, r3
 8008d56:	f002 f9ab 	bl	800b0b0 <USBD_static_free>
    pdev->pClassData = NULL;
 8008d5a:	687a      	ldr	r2, [r7, #4]
 8008d5c:	23ae      	movs	r3, #174	; 0xae
 8008d5e:	009b      	lsls	r3, r3, #2
 8008d60:	2100      	movs	r1, #0
 8008d62:	50d1      	str	r1, [r2, r3]
  }

  return ret;
 8008d64:	230f      	movs	r3, #15
 8008d66:	18fb      	adds	r3, r7, r3
 8008d68:	781b      	ldrb	r3, [r3, #0]
}
 8008d6a:	0018      	movs	r0, r3
 8008d6c:	46bd      	mov	sp, r7
 8008d6e:	b004      	add	sp, #16
 8008d70:	bd80      	pop	{r7, pc}
	...

08008d74 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8008d74:	b580      	push	{r7, lr}
 8008d76:	b086      	sub	sp, #24
 8008d78:	af00      	add	r7, sp, #0
 8008d7a:	6078      	str	r0, [r7, #4]
 8008d7c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008d7e:	687a      	ldr	r2, [r7, #4]
 8008d80:	23ae      	movs	r3, #174	; 0xae
 8008d82:	009b      	lsls	r3, r3, #2
 8008d84:	58d3      	ldr	r3, [r2, r3]
 8008d86:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8008d88:	230f      	movs	r3, #15
 8008d8a:	18fb      	adds	r3, r7, r3
 8008d8c:	2200      	movs	r2, #0
 8008d8e:	701a      	strb	r2, [r3, #0]
  uint16_t status_info = 0U;
 8008d90:	230c      	movs	r3, #12
 8008d92:	18fb      	adds	r3, r7, r3
 8008d94:	2200      	movs	r2, #0
 8008d96:	801a      	strh	r2, [r3, #0]
  uint8_t ret = USBD_OK;
 8008d98:	2317      	movs	r3, #23
 8008d9a:	18fb      	adds	r3, r7, r3
 8008d9c:	2200      	movs	r2, #0
 8008d9e:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008da0:	683b      	ldr	r3, [r7, #0]
 8008da2:	781b      	ldrb	r3, [r3, #0]
 8008da4:	001a      	movs	r2, r3
 8008da6:	2360      	movs	r3, #96	; 0x60
 8008da8:	4013      	ands	r3, r2
 8008daa:	d03d      	beq.n	8008e28 <USBD_CDC_Setup+0xb4>
 8008dac:	2b20      	cmp	r3, #32
 8008dae:	d000      	beq.n	8008db2 <USBD_CDC_Setup+0x3e>
 8008db0:	e094      	b.n	8008edc <USBD_CDC_Setup+0x168>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 8008db2:	683b      	ldr	r3, [r7, #0]
 8008db4:	88db      	ldrh	r3, [r3, #6]
 8008db6:	2b00      	cmp	r3, #0
 8008db8:	d02b      	beq.n	8008e12 <USBD_CDC_Setup+0x9e>
      {
        if (req->bmRequest & 0x80U)
 8008dba:	683b      	ldr	r3, [r7, #0]
 8008dbc:	781b      	ldrb	r3, [r3, #0]
 8008dbe:	b25b      	sxtb	r3, r3
 8008dc0:	2b00      	cmp	r3, #0
 8008dc2:	da12      	bge.n	8008dea <USBD_CDC_Setup+0x76>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008dc4:	687a      	ldr	r2, [r7, #4]
 8008dc6:	23af      	movs	r3, #175	; 0xaf
 8008dc8:	009b      	lsls	r3, r3, #2
 8008dca:	58d3      	ldr	r3, [r2, r3]
 8008dcc:	689b      	ldr	r3, [r3, #8]
 8008dce:	683a      	ldr	r2, [r7, #0]
 8008dd0:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8008dd2:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008dd4:	683a      	ldr	r2, [r7, #0]
 8008dd6:	88d2      	ldrh	r2, [r2, #6]
 8008dd8:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8008dda:	6939      	ldr	r1, [r7, #16]
 8008ddc:	683b      	ldr	r3, [r7, #0]
 8008dde:	88da      	ldrh	r2, [r3, #6]
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	0018      	movs	r0, r3
 8008de4:	f001 fbb2 	bl	800a54c <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8008de8:	e083      	b.n	8008ef2 <USBD_CDC_Setup+0x17e>
          hcdc->CmdOpCode = req->bRequest;
 8008dea:	683b      	ldr	r3, [r7, #0]
 8008dec:	7859      	ldrb	r1, [r3, #1]
 8008dee:	693a      	ldr	r2, [r7, #16]
 8008df0:	2380      	movs	r3, #128	; 0x80
 8008df2:	009b      	lsls	r3, r3, #2
 8008df4:	54d1      	strb	r1, [r2, r3]
          hcdc->CmdLength = (uint8_t)req->wLength;
 8008df6:	683b      	ldr	r3, [r7, #0]
 8008df8:	88db      	ldrh	r3, [r3, #6]
 8008dfa:	b2d9      	uxtb	r1, r3
 8008dfc:	693b      	ldr	r3, [r7, #16]
 8008dfe:	4a40      	ldr	r2, [pc, #256]	; (8008f00 <USBD_CDC_Setup+0x18c>)
 8008e00:	5499      	strb	r1, [r3, r2]
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8008e02:	6939      	ldr	r1, [r7, #16]
 8008e04:	683b      	ldr	r3, [r7, #0]
 8008e06:	88da      	ldrh	r2, [r3, #6]
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	0018      	movs	r0, r3
 8008e0c:	f001 fbd1 	bl	800a5b2 <USBD_CtlPrepareRx>
      break;
 8008e10:	e06f      	b.n	8008ef2 <USBD_CDC_Setup+0x17e>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008e12:	687a      	ldr	r2, [r7, #4]
 8008e14:	23af      	movs	r3, #175	; 0xaf
 8008e16:	009b      	lsls	r3, r3, #2
 8008e18:	58d3      	ldr	r3, [r2, r3]
 8008e1a:	689b      	ldr	r3, [r3, #8]
 8008e1c:	683a      	ldr	r2, [r7, #0]
 8008e1e:	7850      	ldrb	r0, [r2, #1]
 8008e20:	6839      	ldr	r1, [r7, #0]
 8008e22:	2200      	movs	r2, #0
 8008e24:	4798      	blx	r3
      break;
 8008e26:	e064      	b.n	8008ef2 <USBD_CDC_Setup+0x17e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008e28:	683b      	ldr	r3, [r7, #0]
 8008e2a:	785b      	ldrb	r3, [r3, #1]
 8008e2c:	2b0b      	cmp	r3, #11
 8008e2e:	d037      	beq.n	8008ea0 <USBD_CDC_Setup+0x12c>
 8008e30:	dc47      	bgt.n	8008ec2 <USBD_CDC_Setup+0x14e>
 8008e32:	2b00      	cmp	r3, #0
 8008e34:	d002      	beq.n	8008e3c <USBD_CDC_Setup+0xc8>
 8008e36:	2b0a      	cmp	r3, #10
 8008e38:	d019      	beq.n	8008e6e <USBD_CDC_Setup+0xfa>
 8008e3a:	e042      	b.n	8008ec2 <USBD_CDC_Setup+0x14e>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008e3c:	687a      	ldr	r2, [r7, #4]
 8008e3e:	23a7      	movs	r3, #167	; 0xa7
 8008e40:	009b      	lsls	r3, r3, #2
 8008e42:	5cd3      	ldrb	r3, [r2, r3]
 8008e44:	2b03      	cmp	r3, #3
 8008e46:	d107      	bne.n	8008e58 <USBD_CDC_Setup+0xe4>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8008e48:	230c      	movs	r3, #12
 8008e4a:	18f9      	adds	r1, r7, r3
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	2202      	movs	r2, #2
 8008e50:	0018      	movs	r0, r3
 8008e52:	f001 fb7b 	bl	800a54c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008e56:	e040      	b.n	8008eda <USBD_CDC_Setup+0x166>
            USBD_CtlError(pdev, req);
 8008e58:	683a      	ldr	r2, [r7, #0]
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	0011      	movs	r1, r2
 8008e5e:	0018      	movs	r0, r3
 8008e60:	f001 faf6 	bl	800a450 <USBD_CtlError>
            ret = USBD_FAIL;
 8008e64:	2317      	movs	r3, #23
 8008e66:	18fb      	adds	r3, r7, r3
 8008e68:	2202      	movs	r2, #2
 8008e6a:	701a      	strb	r2, [r3, #0]
          break;
 8008e6c:	e035      	b.n	8008eda <USBD_CDC_Setup+0x166>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008e6e:	687a      	ldr	r2, [r7, #4]
 8008e70:	23a7      	movs	r3, #167	; 0xa7
 8008e72:	009b      	lsls	r3, r3, #2
 8008e74:	5cd3      	ldrb	r3, [r2, r3]
 8008e76:	2b03      	cmp	r3, #3
 8008e78:	d107      	bne.n	8008e8a <USBD_CDC_Setup+0x116>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8008e7a:	230f      	movs	r3, #15
 8008e7c:	18f9      	adds	r1, r7, r3
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	2201      	movs	r2, #1
 8008e82:	0018      	movs	r0, r3
 8008e84:	f001 fb62 	bl	800a54c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008e88:	e027      	b.n	8008eda <USBD_CDC_Setup+0x166>
            USBD_CtlError(pdev, req);
 8008e8a:	683a      	ldr	r2, [r7, #0]
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	0011      	movs	r1, r2
 8008e90:	0018      	movs	r0, r3
 8008e92:	f001 fadd 	bl	800a450 <USBD_CtlError>
            ret = USBD_FAIL;
 8008e96:	2317      	movs	r3, #23
 8008e98:	18fb      	adds	r3, r7, r3
 8008e9a:	2202      	movs	r2, #2
 8008e9c:	701a      	strb	r2, [r3, #0]
          break;
 8008e9e:	e01c      	b.n	8008eda <USBD_CDC_Setup+0x166>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8008ea0:	687a      	ldr	r2, [r7, #4]
 8008ea2:	23a7      	movs	r3, #167	; 0xa7
 8008ea4:	009b      	lsls	r3, r3, #2
 8008ea6:	5cd3      	ldrb	r3, [r2, r3]
 8008ea8:	2b03      	cmp	r3, #3
 8008eaa:	d015      	beq.n	8008ed8 <USBD_CDC_Setup+0x164>
          {
            USBD_CtlError(pdev, req);
 8008eac:	683a      	ldr	r2, [r7, #0]
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	0011      	movs	r1, r2
 8008eb2:	0018      	movs	r0, r3
 8008eb4:	f001 facc 	bl	800a450 <USBD_CtlError>
            ret = USBD_FAIL;
 8008eb8:	2317      	movs	r3, #23
 8008eba:	18fb      	adds	r3, r7, r3
 8008ebc:	2202      	movs	r2, #2
 8008ebe:	701a      	strb	r2, [r3, #0]
          }
          break;
 8008ec0:	e00a      	b.n	8008ed8 <USBD_CDC_Setup+0x164>

        default:
          USBD_CtlError(pdev, req);
 8008ec2:	683a      	ldr	r2, [r7, #0]
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	0011      	movs	r1, r2
 8008ec8:	0018      	movs	r0, r3
 8008eca:	f001 fac1 	bl	800a450 <USBD_CtlError>
          ret = USBD_FAIL;
 8008ece:	2317      	movs	r3, #23
 8008ed0:	18fb      	adds	r3, r7, r3
 8008ed2:	2202      	movs	r2, #2
 8008ed4:	701a      	strb	r2, [r3, #0]
          break;
 8008ed6:	e000      	b.n	8008eda <USBD_CDC_Setup+0x166>
          break;
 8008ed8:	46c0      	nop			; (mov r8, r8)
      }
      break;
 8008eda:	e00a      	b.n	8008ef2 <USBD_CDC_Setup+0x17e>

    default:
      USBD_CtlError(pdev, req);
 8008edc:	683a      	ldr	r2, [r7, #0]
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	0011      	movs	r1, r2
 8008ee2:	0018      	movs	r0, r3
 8008ee4:	f001 fab4 	bl	800a450 <USBD_CtlError>
      ret = USBD_FAIL;
 8008ee8:	2317      	movs	r3, #23
 8008eea:	18fb      	adds	r3, r7, r3
 8008eec:	2202      	movs	r2, #2
 8008eee:	701a      	strb	r2, [r3, #0]
      break;
 8008ef0:	46c0      	nop			; (mov r8, r8)
  }

  return ret;
 8008ef2:	2317      	movs	r3, #23
 8008ef4:	18fb      	adds	r3, r7, r3
 8008ef6:	781b      	ldrb	r3, [r3, #0]
}
 8008ef8:	0018      	movs	r0, r3
 8008efa:	46bd      	mov	sp, r7
 8008efc:	b006      	add	sp, #24
 8008efe:	bd80      	pop	{r7, pc}
 8008f00:	00000201 	.word	0x00000201

08008f04 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008f04:	b580      	push	{r7, lr}
 8008f06:	b084      	sub	sp, #16
 8008f08:	af00      	add	r7, sp, #0
 8008f0a:	6078      	str	r0, [r7, #4]
 8008f0c:	000a      	movs	r2, r1
 8008f0e:	1cfb      	adds	r3, r7, #3
 8008f10:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008f12:	687a      	ldr	r2, [r7, #4]
 8008f14:	23ae      	movs	r3, #174	; 0xae
 8008f16:	009b      	lsls	r3, r3, #2
 8008f18:	58d3      	ldr	r3, [r2, r3]
 8008f1a:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8008f1c:	687a      	ldr	r2, [r7, #4]
 8008f1e:	23b0      	movs	r3, #176	; 0xb0
 8008f20:	009b      	lsls	r3, r3, #2
 8008f22:	58d3      	ldr	r3, [r2, r3]
 8008f24:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 8008f26:	687a      	ldr	r2, [r7, #4]
 8008f28:	23ae      	movs	r3, #174	; 0xae
 8008f2a:	009b      	lsls	r3, r3, #2
 8008f2c:	58d3      	ldr	r3, [r2, r3]
 8008f2e:	2b00      	cmp	r3, #0
 8008f30:	d03e      	beq.n	8008fb0 <USBD_CDC_DataIn+0xac>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8008f32:	1cfb      	adds	r3, r7, #3
 8008f34:	781a      	ldrb	r2, [r3, #0]
 8008f36:	6879      	ldr	r1, [r7, #4]
 8008f38:	0013      	movs	r3, r2
 8008f3a:	009b      	lsls	r3, r3, #2
 8008f3c:	189b      	adds	r3, r3, r2
 8008f3e:	009b      	lsls	r3, r3, #2
 8008f40:	18cb      	adds	r3, r1, r3
 8008f42:	331c      	adds	r3, #28
 8008f44:	681b      	ldr	r3, [r3, #0]
 8008f46:	2b00      	cmp	r3, #0
 8008f48:	d02b      	beq.n	8008fa2 <USBD_CDC_DataIn+0x9e>
 8008f4a:	1cfb      	adds	r3, r7, #3
 8008f4c:	781a      	ldrb	r2, [r3, #0]
 8008f4e:	6879      	ldr	r1, [r7, #4]
 8008f50:	0013      	movs	r3, r2
 8008f52:	009b      	lsls	r3, r3, #2
 8008f54:	189b      	adds	r3, r3, r2
 8008f56:	009b      	lsls	r3, r3, #2
 8008f58:	18cb      	adds	r3, r1, r3
 8008f5a:	331c      	adds	r3, #28
 8008f5c:	6818      	ldr	r0, [r3, #0]
 8008f5e:	1cfb      	adds	r3, r7, #3
 8008f60:	781a      	ldrb	r2, [r3, #0]
 8008f62:	68b9      	ldr	r1, [r7, #8]
 8008f64:	0013      	movs	r3, r2
 8008f66:	009b      	lsls	r3, r3, #2
 8008f68:	189b      	adds	r3, r3, r2
 8008f6a:	00db      	lsls	r3, r3, #3
 8008f6c:	18cb      	adds	r3, r1, r3
 8008f6e:	3338      	adds	r3, #56	; 0x38
 8008f70:	681b      	ldr	r3, [r3, #0]
 8008f72:	0019      	movs	r1, r3
 8008f74:	f7f7 f960 	bl	8000238 <__aeabi_uidivmod>
 8008f78:	1e0b      	subs	r3, r1, #0
 8008f7a:	d112      	bne.n	8008fa2 <USBD_CDC_DataIn+0x9e>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8008f7c:	1cfb      	adds	r3, r7, #3
 8008f7e:	781a      	ldrb	r2, [r3, #0]
 8008f80:	6879      	ldr	r1, [r7, #4]
 8008f82:	0013      	movs	r3, r2
 8008f84:	009b      	lsls	r3, r3, #2
 8008f86:	189b      	adds	r3, r3, r2
 8008f88:	009b      	lsls	r3, r3, #2
 8008f8a:	18cb      	adds	r3, r1, r3
 8008f8c:	331c      	adds	r3, #28
 8008f8e:	2200      	movs	r2, #0
 8008f90:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8008f92:	1cfb      	adds	r3, r7, #3
 8008f94:	7819      	ldrb	r1, [r3, #0]
 8008f96:	6878      	ldr	r0, [r7, #4]
 8008f98:	2300      	movs	r3, #0
 8008f9a:	2200      	movs	r2, #0
 8008f9c:	f001 fff7 	bl	800af8e <USBD_LL_Transmit>
 8008fa0:	e004      	b.n	8008fac <USBD_CDC_DataIn+0xa8>
    }
    else
    {
      hcdc->TxState = 0U;
 8008fa2:	68fa      	ldr	r2, [r7, #12]
 8008fa4:	2385      	movs	r3, #133	; 0x85
 8008fa6:	009b      	lsls	r3, r3, #2
 8008fa8:	2100      	movs	r1, #0
 8008faa:	50d1      	str	r1, [r2, r3]
    }
    return USBD_OK;
 8008fac:	2300      	movs	r3, #0
 8008fae:	e000      	b.n	8008fb2 <USBD_CDC_DataIn+0xae>
  }
  else
  {
    return USBD_FAIL;
 8008fb0:	2302      	movs	r3, #2
  }
}
 8008fb2:	0018      	movs	r0, r3
 8008fb4:	46bd      	mov	sp, r7
 8008fb6:	b004      	add	sp, #16
 8008fb8:	bd80      	pop	{r7, pc}

08008fba <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008fba:	b580      	push	{r7, lr}
 8008fbc:	b084      	sub	sp, #16
 8008fbe:	af00      	add	r7, sp, #0
 8008fc0:	6078      	str	r0, [r7, #4]
 8008fc2:	000a      	movs	r2, r1
 8008fc4:	1cfb      	adds	r3, r7, #3
 8008fc6:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008fc8:	687a      	ldr	r2, [r7, #4]
 8008fca:	23ae      	movs	r3, #174	; 0xae
 8008fcc:	009b      	lsls	r3, r3, #2
 8008fce:	58d3      	ldr	r3, [r2, r3]
 8008fd0:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8008fd2:	1cfb      	adds	r3, r7, #3
 8008fd4:	781a      	ldrb	r2, [r3, #0]
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	0011      	movs	r1, r2
 8008fda:	0018      	movs	r0, r3
 8008fdc:	f002 f845 	bl	800b06a <USBD_LL_GetRxDataSize>
 8008fe0:	0001      	movs	r1, r0
 8008fe2:	68fa      	ldr	r2, [r7, #12]
 8008fe4:	2383      	movs	r3, #131	; 0x83
 8008fe6:	009b      	lsls	r3, r3, #2
 8008fe8:	50d1      	str	r1, [r2, r3]

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8008fea:	687a      	ldr	r2, [r7, #4]
 8008fec:	23ae      	movs	r3, #174	; 0xae
 8008fee:	009b      	lsls	r3, r3, #2
 8008ff0:	58d3      	ldr	r3, [r2, r3]
 8008ff2:	2b00      	cmp	r3, #0
 8008ff4:	d011      	beq.n	800901a <USBD_CDC_DataOut+0x60>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8008ff6:	687a      	ldr	r2, [r7, #4]
 8008ff8:	23af      	movs	r3, #175	; 0xaf
 8008ffa:	009b      	lsls	r3, r3, #2
 8008ffc:	58d3      	ldr	r3, [r2, r3]
 8008ffe:	68da      	ldr	r2, [r3, #12]
 8009000:	68f9      	ldr	r1, [r7, #12]
 8009002:	2381      	movs	r3, #129	; 0x81
 8009004:	009b      	lsls	r3, r3, #2
 8009006:	58c8      	ldr	r0, [r1, r3]
 8009008:	68fb      	ldr	r3, [r7, #12]
 800900a:	2183      	movs	r1, #131	; 0x83
 800900c:	0089      	lsls	r1, r1, #2
 800900e:	468c      	mov	ip, r1
 8009010:	4463      	add	r3, ip
 8009012:	0019      	movs	r1, r3
 8009014:	4790      	blx	r2

    return USBD_OK;
 8009016:	2300      	movs	r3, #0
 8009018:	e000      	b.n	800901c <USBD_CDC_DataOut+0x62>
  }
  else
  {
    return USBD_FAIL;
 800901a:	2302      	movs	r3, #2
  }
}
 800901c:	0018      	movs	r0, r3
 800901e:	46bd      	mov	sp, r7
 8009020:	b004      	add	sp, #16
 8009022:	bd80      	pop	{r7, pc}

08009024 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8009024:	b590      	push	{r4, r7, lr}
 8009026:	b085      	sub	sp, #20
 8009028:	af00      	add	r7, sp, #0
 800902a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800902c:	687a      	ldr	r2, [r7, #4]
 800902e:	23ae      	movs	r3, #174	; 0xae
 8009030:	009b      	lsls	r3, r3, #2
 8009032:	58d3      	ldr	r3, [r2, r3]
 8009034:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8009036:	687a      	ldr	r2, [r7, #4]
 8009038:	23af      	movs	r3, #175	; 0xaf
 800903a:	009b      	lsls	r3, r3, #2
 800903c:	58d3      	ldr	r3, [r2, r3]
 800903e:	2b00      	cmp	r3, #0
 8009040:	d019      	beq.n	8009076 <USBD_CDC_EP0_RxReady+0x52>
 8009042:	68fa      	ldr	r2, [r7, #12]
 8009044:	2380      	movs	r3, #128	; 0x80
 8009046:	009b      	lsls	r3, r3, #2
 8009048:	5cd3      	ldrb	r3, [r2, r3]
 800904a:	2bff      	cmp	r3, #255	; 0xff
 800904c:	d013      	beq.n	8009076 <USBD_CDC_EP0_RxReady+0x52>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800904e:	687a      	ldr	r2, [r7, #4]
 8009050:	23af      	movs	r3, #175	; 0xaf
 8009052:	009b      	lsls	r3, r3, #2
 8009054:	58d3      	ldr	r3, [r2, r3]
 8009056:	689b      	ldr	r3, [r3, #8]
 8009058:	68f9      	ldr	r1, [r7, #12]
 800905a:	2280      	movs	r2, #128	; 0x80
 800905c:	0092      	lsls	r2, r2, #2
 800905e:	5c88      	ldrb	r0, [r1, r2]
                                                      (uint8_t *)(void *)hcdc->data,
 8009060:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8009062:	68fa      	ldr	r2, [r7, #12]
 8009064:	4c06      	ldr	r4, [pc, #24]	; (8009080 <USBD_CDC_EP0_RxReady+0x5c>)
 8009066:	5d12      	ldrb	r2, [r2, r4]
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8009068:	b292      	uxth	r2, r2
 800906a:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800906c:	68fa      	ldr	r2, [r7, #12]
 800906e:	2380      	movs	r3, #128	; 0x80
 8009070:	009b      	lsls	r3, r3, #2
 8009072:	21ff      	movs	r1, #255	; 0xff
 8009074:	54d1      	strb	r1, [r2, r3]

  }
  return USBD_OK;
 8009076:	2300      	movs	r3, #0
}
 8009078:	0018      	movs	r0, r3
 800907a:	46bd      	mov	sp, r7
 800907c:	b005      	add	sp, #20
 800907e:	bd90      	pop	{r4, r7, pc}
 8009080:	00000201 	.word	0x00000201

08009084 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8009084:	b580      	push	{r7, lr}
 8009086:	b082      	sub	sp, #8
 8009088:	af00      	add	r7, sp, #0
 800908a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	2243      	movs	r2, #67	; 0x43
 8009090:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8009092:	4b02      	ldr	r3, [pc, #8]	; (800909c <USBD_CDC_GetFSCfgDesc+0x18>)
}
 8009094:	0018      	movs	r0, r3
 8009096:	46bd      	mov	sp, r7
 8009098:	b002      	add	sp, #8
 800909a:	bd80      	pop	{r7, pc}
 800909c:	20000094 	.word	0x20000094

080090a0 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80090a0:	b580      	push	{r7, lr}
 80090a2:	b082      	sub	sp, #8
 80090a4:	af00      	add	r7, sp, #0
 80090a6:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	2243      	movs	r2, #67	; 0x43
 80090ac:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 80090ae:	4b02      	ldr	r3, [pc, #8]	; (80090b8 <USBD_CDC_GetHSCfgDesc+0x18>)
}
 80090b0:	0018      	movs	r0, r3
 80090b2:	46bd      	mov	sp, r7
 80090b4:	b002      	add	sp, #8
 80090b6:	bd80      	pop	{r7, pc}
 80090b8:	20000050 	.word	0x20000050

080090bc <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80090bc:	b580      	push	{r7, lr}
 80090be:	b082      	sub	sp, #8
 80090c0:	af00      	add	r7, sp, #0
 80090c2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	2243      	movs	r2, #67	; 0x43
 80090c8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 80090ca:	4b02      	ldr	r3, [pc, #8]	; (80090d4 <USBD_CDC_GetOtherSpeedCfgDesc+0x18>)
}
 80090cc:	0018      	movs	r0, r3
 80090ce:	46bd      	mov	sp, r7
 80090d0:	b002      	add	sp, #8
 80090d2:	bd80      	pop	{r7, pc}
 80090d4:	200000d8 	.word	0x200000d8

080090d8 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80090d8:	b580      	push	{r7, lr}
 80090da:	b082      	sub	sp, #8
 80090dc:	af00      	add	r7, sp, #0
 80090de:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	220a      	movs	r2, #10
 80090e4:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 80090e6:	4b02      	ldr	r3, [pc, #8]	; (80090f0 <USBD_CDC_GetDeviceQualifierDescriptor+0x18>)
}
 80090e8:	0018      	movs	r0, r3
 80090ea:	46bd      	mov	sp, r7
 80090ec:	b002      	add	sp, #8
 80090ee:	bd80      	pop	{r7, pc}
 80090f0:	2000000c 	.word	0x2000000c

080090f4 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 80090f4:	b580      	push	{r7, lr}
 80090f6:	b084      	sub	sp, #16
 80090f8:	af00      	add	r7, sp, #0
 80090fa:	6078      	str	r0, [r7, #4]
 80090fc:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 80090fe:	200f      	movs	r0, #15
 8009100:	183b      	adds	r3, r7, r0
 8009102:	2202      	movs	r2, #2
 8009104:	701a      	strb	r2, [r3, #0]

  if (fops != NULL)
 8009106:	683b      	ldr	r3, [r7, #0]
 8009108:	2b00      	cmp	r3, #0
 800910a:	d007      	beq.n	800911c <USBD_CDC_RegisterInterface+0x28>
  {
    pdev->pUserData = fops;
 800910c:	687a      	ldr	r2, [r7, #4]
 800910e:	23af      	movs	r3, #175	; 0xaf
 8009110:	009b      	lsls	r3, r3, #2
 8009112:	6839      	ldr	r1, [r7, #0]
 8009114:	50d1      	str	r1, [r2, r3]
    ret = USBD_OK;
 8009116:	183b      	adds	r3, r7, r0
 8009118:	2200      	movs	r2, #0
 800911a:	701a      	strb	r2, [r3, #0]
  }

  return ret;
 800911c:	230f      	movs	r3, #15
 800911e:	18fb      	adds	r3, r7, r3
 8009120:	781b      	ldrb	r3, [r3, #0]
}
 8009122:	0018      	movs	r0, r3
 8009124:	46bd      	mov	sp, r7
 8009126:	b004      	add	sp, #16
 8009128:	bd80      	pop	{r7, pc}

0800912a <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 800912a:	b580      	push	{r7, lr}
 800912c:	b086      	sub	sp, #24
 800912e:	af00      	add	r7, sp, #0
 8009130:	60f8      	str	r0, [r7, #12]
 8009132:	60b9      	str	r1, [r7, #8]
 8009134:	1dbb      	adds	r3, r7, #6
 8009136:	801a      	strh	r2, [r3, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009138:	68fa      	ldr	r2, [r7, #12]
 800913a:	23ae      	movs	r3, #174	; 0xae
 800913c:	009b      	lsls	r3, r3, #2
 800913e:	58d3      	ldr	r3, [r2, r3]
 8009140:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8009142:	697a      	ldr	r2, [r7, #20]
 8009144:	2382      	movs	r3, #130	; 0x82
 8009146:	009b      	lsls	r3, r3, #2
 8009148:	68b9      	ldr	r1, [r7, #8]
 800914a:	50d1      	str	r1, [r2, r3]
  hcdc->TxLength = length;
 800914c:	1dbb      	adds	r3, r7, #6
 800914e:	8819      	ldrh	r1, [r3, #0]
 8009150:	697a      	ldr	r2, [r7, #20]
 8009152:	2384      	movs	r3, #132	; 0x84
 8009154:	009b      	lsls	r3, r3, #2
 8009156:	50d1      	str	r1, [r2, r3]

  return USBD_OK;
 8009158:	2300      	movs	r3, #0
}
 800915a:	0018      	movs	r0, r3
 800915c:	46bd      	mov	sp, r7
 800915e:	b006      	add	sp, #24
 8009160:	bd80      	pop	{r7, pc}

08009162 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 8009162:	b580      	push	{r7, lr}
 8009164:	b084      	sub	sp, #16
 8009166:	af00      	add	r7, sp, #0
 8009168:	6078      	str	r0, [r7, #4]
 800916a:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800916c:	687a      	ldr	r2, [r7, #4]
 800916e:	23ae      	movs	r3, #174	; 0xae
 8009170:	009b      	lsls	r3, r3, #2
 8009172:	58d3      	ldr	r3, [r2, r3]
 8009174:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8009176:	68fa      	ldr	r2, [r7, #12]
 8009178:	2381      	movs	r3, #129	; 0x81
 800917a:	009b      	lsls	r3, r3, #2
 800917c:	6839      	ldr	r1, [r7, #0]
 800917e:	50d1      	str	r1, [r2, r3]

  return USBD_OK;
 8009180:	2300      	movs	r3, #0
}
 8009182:	0018      	movs	r0, r3
 8009184:	46bd      	mov	sp, r7
 8009186:	b004      	add	sp, #16
 8009188:	bd80      	pop	{r7, pc}

0800918a <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800918a:	b580      	push	{r7, lr}
 800918c:	b084      	sub	sp, #16
 800918e:	af00      	add	r7, sp, #0
 8009190:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009192:	687a      	ldr	r2, [r7, #4]
 8009194:	23ae      	movs	r3, #174	; 0xae
 8009196:	009b      	lsls	r3, r3, #2
 8009198:	58d3      	ldr	r3, [r2, r3]
 800919a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 800919c:	687a      	ldr	r2, [r7, #4]
 800919e:	23ae      	movs	r3, #174	; 0xae
 80091a0:	009b      	lsls	r3, r3, #2
 80091a2:	58d3      	ldr	r3, [r2, r3]
 80091a4:	2b00      	cmp	r3, #0
 80091a6:	d022      	beq.n	80091ee <USBD_CDC_TransmitPacket+0x64>
  {
    if (hcdc->TxState == 0U)
 80091a8:	68fa      	ldr	r2, [r7, #12]
 80091aa:	2385      	movs	r3, #133	; 0x85
 80091ac:	009b      	lsls	r3, r3, #2
 80091ae:	58d3      	ldr	r3, [r2, r3]
 80091b0:	2b00      	cmp	r3, #0
 80091b2:	d11a      	bne.n	80091ea <USBD_CDC_TransmitPacket+0x60>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 80091b4:	68fa      	ldr	r2, [r7, #12]
 80091b6:	2385      	movs	r3, #133	; 0x85
 80091b8:	009b      	lsls	r3, r3, #2
 80091ba:	2101      	movs	r1, #1
 80091bc:	50d1      	str	r1, [r2, r3]

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 80091be:	68fa      	ldr	r2, [r7, #12]
 80091c0:	2384      	movs	r3, #132	; 0x84
 80091c2:	009b      	lsls	r3, r3, #2
 80091c4:	58d2      	ldr	r2, [r2, r3]
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 80091ca:	68fa      	ldr	r2, [r7, #12]
 80091cc:	2382      	movs	r3, #130	; 0x82
 80091ce:	009b      	lsls	r3, r3, #2
 80091d0:	58d1      	ldr	r1, [r2, r3]
                       (uint16_t)hcdc->TxLength);
 80091d2:	68fa      	ldr	r2, [r7, #12]
 80091d4:	2384      	movs	r3, #132	; 0x84
 80091d6:	009b      	lsls	r3, r3, #2
 80091d8:	58d3      	ldr	r3, [r2, r3]
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 80091da:	b29b      	uxth	r3, r3
 80091dc:	6878      	ldr	r0, [r7, #4]
 80091de:	000a      	movs	r2, r1
 80091e0:	2181      	movs	r1, #129	; 0x81
 80091e2:	f001 fed4 	bl	800af8e <USBD_LL_Transmit>

      return USBD_OK;
 80091e6:	2300      	movs	r3, #0
 80091e8:	e002      	b.n	80091f0 <USBD_CDC_TransmitPacket+0x66>
    }
    else
    {
      return USBD_BUSY;
 80091ea:	2301      	movs	r3, #1
 80091ec:	e000      	b.n	80091f0 <USBD_CDC_TransmitPacket+0x66>
    }
  }
  else
  {
    return USBD_FAIL;
 80091ee:	2302      	movs	r3, #2
  }
}
 80091f0:	0018      	movs	r0, r3
 80091f2:	46bd      	mov	sp, r7
 80091f4:	b004      	add	sp, #16
 80091f6:	bd80      	pop	{r7, pc}

080091f8 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80091f8:	b580      	push	{r7, lr}
 80091fa:	b084      	sub	sp, #16
 80091fc:	af00      	add	r7, sp, #0
 80091fe:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009200:	687a      	ldr	r2, [r7, #4]
 8009202:	23ae      	movs	r3, #174	; 0xae
 8009204:	009b      	lsls	r3, r3, #2
 8009206:	58d3      	ldr	r3, [r2, r3]
 8009208:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 800920a:	687a      	ldr	r2, [r7, #4]
 800920c:	23ae      	movs	r3, #174	; 0xae
 800920e:	009b      	lsls	r3, r3, #2
 8009210:	58d3      	ldr	r3, [r2, r3]
 8009212:	2b00      	cmp	r3, #0
 8009214:	d019      	beq.n	800924a <USBD_CDC_ReceivePacket+0x52>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	7c1b      	ldrb	r3, [r3, #16]
 800921a:	2b00      	cmp	r3, #0
 800921c:	d10a      	bne.n	8009234 <USBD_CDC_ReceivePacket+0x3c>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800921e:	68fa      	ldr	r2, [r7, #12]
 8009220:	2381      	movs	r3, #129	; 0x81
 8009222:	009b      	lsls	r3, r3, #2
 8009224:	58d2      	ldr	r2, [r2, r3]
 8009226:	2380      	movs	r3, #128	; 0x80
 8009228:	009b      	lsls	r3, r3, #2
 800922a:	6878      	ldr	r0, [r7, #4]
 800922c:	2101      	movs	r1, #1
 800922e:	f001 fee5 	bl	800affc <USBD_LL_PrepareReceive>
 8009232:	e008      	b.n	8009246 <USBD_CDC_ReceivePacket+0x4e>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8009234:	68fa      	ldr	r2, [r7, #12]
 8009236:	2381      	movs	r3, #129	; 0x81
 8009238:	009b      	lsls	r3, r3, #2
 800923a:	58d2      	ldr	r2, [r2, r3]
 800923c:	6878      	ldr	r0, [r7, #4]
 800923e:	2340      	movs	r3, #64	; 0x40
 8009240:	2101      	movs	r1, #1
 8009242:	f001 fedb 	bl	800affc <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8009246:	2300      	movs	r3, #0
 8009248:	e000      	b.n	800924c <USBD_CDC_ReceivePacket+0x54>
  }
  else
  {
    return USBD_FAIL;
 800924a:	2302      	movs	r3, #2
  }
}
 800924c:	0018      	movs	r0, r3
 800924e:	46bd      	mov	sp, r7
 8009250:	b004      	add	sp, #16
 8009252:	bd80      	pop	{r7, pc}

08009254 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8009254:	b580      	push	{r7, lr}
 8009256:	b084      	sub	sp, #16
 8009258:	af00      	add	r7, sp, #0
 800925a:	60f8      	str	r0, [r7, #12]
 800925c:	60b9      	str	r1, [r7, #8]
 800925e:	1dfb      	adds	r3, r7, #7
 8009260:	701a      	strb	r2, [r3, #0]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8009262:	68fb      	ldr	r3, [r7, #12]
 8009264:	2b00      	cmp	r3, #0
 8009266:	d101      	bne.n	800926c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8009268:	2302      	movs	r3, #2
 800926a:	e020      	b.n	80092ae <USBD_Init+0x5a>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 800926c:	68fa      	ldr	r2, [r7, #12]
 800926e:	23ad      	movs	r3, #173	; 0xad
 8009270:	009b      	lsls	r3, r3, #2
 8009272:	58d3      	ldr	r3, [r2, r3]
 8009274:	2b00      	cmp	r3, #0
 8009276:	d004      	beq.n	8009282 <USBD_Init+0x2e>
  {
    pdev->pClass = NULL;
 8009278:	68fa      	ldr	r2, [r7, #12]
 800927a:	23ad      	movs	r3, #173	; 0xad
 800927c:	009b      	lsls	r3, r3, #2
 800927e:	2100      	movs	r1, #0
 8009280:	50d1      	str	r1, [r2, r3]
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8009282:	68bb      	ldr	r3, [r7, #8]
 8009284:	2b00      	cmp	r3, #0
 8009286:	d004      	beq.n	8009292 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8009288:	68fa      	ldr	r2, [r7, #12]
 800928a:	23ac      	movs	r3, #172	; 0xac
 800928c:	009b      	lsls	r3, r3, #2
 800928e:	68b9      	ldr	r1, [r7, #8]
 8009290:	50d1      	str	r1, [r2, r3]
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009292:	68fa      	ldr	r2, [r7, #12]
 8009294:	23a7      	movs	r3, #167	; 0xa7
 8009296:	009b      	lsls	r3, r3, #2
 8009298:	2101      	movs	r1, #1
 800929a:	54d1      	strb	r1, [r2, r3]
  pdev->id = id;
 800929c:	68fb      	ldr	r3, [r7, #12]
 800929e:	1dfa      	adds	r2, r7, #7
 80092a0:	7812      	ldrb	r2, [r2, #0]
 80092a2:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 80092a4:	68fb      	ldr	r3, [r7, #12]
 80092a6:	0018      	movs	r0, r3
 80092a8:	f001 fcd4 	bl	800ac54 <USBD_LL_Init>

  return USBD_OK;
 80092ac:	2300      	movs	r3, #0
}
 80092ae:	0018      	movs	r0, r3
 80092b0:	46bd      	mov	sp, r7
 80092b2:	b004      	add	sp, #16
 80092b4:	bd80      	pop	{r7, pc}

080092b6 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80092b6:	b580      	push	{r7, lr}
 80092b8:	b084      	sub	sp, #16
 80092ba:	af00      	add	r7, sp, #0
 80092bc:	6078      	str	r0, [r7, #4]
 80092be:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 80092c0:	200f      	movs	r0, #15
 80092c2:	183b      	adds	r3, r7, r0
 80092c4:	2200      	movs	r2, #0
 80092c6:	701a      	strb	r2, [r3, #0]
  if (pclass != NULL)
 80092c8:	683b      	ldr	r3, [r7, #0]
 80092ca:	2b00      	cmp	r3, #0
 80092cc:	d008      	beq.n	80092e0 <USBD_RegisterClass+0x2a>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 80092ce:	687a      	ldr	r2, [r7, #4]
 80092d0:	23ad      	movs	r3, #173	; 0xad
 80092d2:	009b      	lsls	r3, r3, #2
 80092d4:	6839      	ldr	r1, [r7, #0]
 80092d6:	50d1      	str	r1, [r2, r3]
    status = USBD_OK;
 80092d8:	183b      	adds	r3, r7, r0
 80092da:	2200      	movs	r2, #0
 80092dc:	701a      	strb	r2, [r3, #0]
 80092de:	e003      	b.n	80092e8 <USBD_RegisterClass+0x32>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 80092e0:	230f      	movs	r3, #15
 80092e2:	18fb      	adds	r3, r7, r3
 80092e4:	2202      	movs	r2, #2
 80092e6:	701a      	strb	r2, [r3, #0]
  }

  return status;
 80092e8:	230f      	movs	r3, #15
 80092ea:	18fb      	adds	r3, r7, r3
 80092ec:	781b      	ldrb	r3, [r3, #0]
}
 80092ee:	0018      	movs	r0, r3
 80092f0:	46bd      	mov	sp, r7
 80092f2:	b004      	add	sp, #16
 80092f4:	bd80      	pop	{r7, pc}

080092f6 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 80092f6:	b580      	push	{r7, lr}
 80092f8:	b082      	sub	sp, #8
 80092fa:	af00      	add	r7, sp, #0
 80092fc:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	0018      	movs	r0, r3
 8009302:	f001 fd0b 	bl	800ad1c <USBD_LL_Start>

  return USBD_OK;
 8009306:	2300      	movs	r3, #0
}
 8009308:	0018      	movs	r0, r3
 800930a:	46bd      	mov	sp, r7
 800930c:	b002      	add	sp, #8
 800930e:	bd80      	pop	{r7, pc}

08009310 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8009310:	b580      	push	{r7, lr}
 8009312:	b082      	sub	sp, #8
 8009314:	af00      	add	r7, sp, #0
 8009316:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8009318:	2300      	movs	r3, #0
}
 800931a:	0018      	movs	r0, r3
 800931c:	46bd      	mov	sp, r7
 800931e:	b002      	add	sp, #8
 8009320:	bd80      	pop	{r7, pc}

08009322 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8009322:	b590      	push	{r4, r7, lr}
 8009324:	b085      	sub	sp, #20
 8009326:	af00      	add	r7, sp, #0
 8009328:	6078      	str	r0, [r7, #4]
 800932a:	000a      	movs	r2, r1
 800932c:	1cfb      	adds	r3, r7, #3
 800932e:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8009330:	240f      	movs	r4, #15
 8009332:	193b      	adds	r3, r7, r4
 8009334:	2202      	movs	r2, #2
 8009336:	701a      	strb	r2, [r3, #0]

  if (pdev->pClass != NULL)
 8009338:	687a      	ldr	r2, [r7, #4]
 800933a:	23ad      	movs	r3, #173	; 0xad
 800933c:	009b      	lsls	r3, r3, #2
 800933e:	58d3      	ldr	r3, [r2, r3]
 8009340:	2b00      	cmp	r3, #0
 8009342:	d00e      	beq.n	8009362 <USBD_SetClassConfig+0x40>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8009344:	687a      	ldr	r2, [r7, #4]
 8009346:	23ad      	movs	r3, #173	; 0xad
 8009348:	009b      	lsls	r3, r3, #2
 800934a:	58d3      	ldr	r3, [r2, r3]
 800934c:	681b      	ldr	r3, [r3, #0]
 800934e:	1cfa      	adds	r2, r7, #3
 8009350:	7811      	ldrb	r1, [r2, #0]
 8009352:	687a      	ldr	r2, [r7, #4]
 8009354:	0010      	movs	r0, r2
 8009356:	4798      	blx	r3
 8009358:	1e03      	subs	r3, r0, #0
 800935a:	d102      	bne.n	8009362 <USBD_SetClassConfig+0x40>
    {
      ret = USBD_OK;
 800935c:	193b      	adds	r3, r7, r4
 800935e:	2200      	movs	r2, #0
 8009360:	701a      	strb	r2, [r3, #0]
    }
  }

  return ret;
 8009362:	230f      	movs	r3, #15
 8009364:	18fb      	adds	r3, r7, r3
 8009366:	781b      	ldrb	r3, [r3, #0]
}
 8009368:	0018      	movs	r0, r3
 800936a:	46bd      	mov	sp, r7
 800936c:	b005      	add	sp, #20
 800936e:	bd90      	pop	{r4, r7, pc}

08009370 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8009370:	b580      	push	{r7, lr}
 8009372:	b082      	sub	sp, #8
 8009374:	af00      	add	r7, sp, #0
 8009376:	6078      	str	r0, [r7, #4]
 8009378:	000a      	movs	r2, r1
 800937a:	1cfb      	adds	r3, r7, #3
 800937c:	701a      	strb	r2, [r3, #0]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 800937e:	687a      	ldr	r2, [r7, #4]
 8009380:	23ad      	movs	r3, #173	; 0xad
 8009382:	009b      	lsls	r3, r3, #2
 8009384:	58d3      	ldr	r3, [r2, r3]
 8009386:	685b      	ldr	r3, [r3, #4]
 8009388:	1cfa      	adds	r2, r7, #3
 800938a:	7811      	ldrb	r1, [r2, #0]
 800938c:	687a      	ldr	r2, [r7, #4]
 800938e:	0010      	movs	r0, r2
 8009390:	4798      	blx	r3

  return USBD_OK;
 8009392:	2300      	movs	r3, #0
}
 8009394:	0018      	movs	r0, r3
 8009396:	46bd      	mov	sp, r7
 8009398:	b002      	add	sp, #8
 800939a:	bd80      	pop	{r7, pc}

0800939c <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800939c:	b580      	push	{r7, lr}
 800939e:	b082      	sub	sp, #8
 80093a0:	af00      	add	r7, sp, #0
 80093a2:	6078      	str	r0, [r7, #4]
 80093a4:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	22aa      	movs	r2, #170	; 0xaa
 80093aa:	0092      	lsls	r2, r2, #2
 80093ac:	4694      	mov	ip, r2
 80093ae:	4463      	add	r3, ip
 80093b0:	683a      	ldr	r2, [r7, #0]
 80093b2:	0011      	movs	r1, r2
 80093b4:	0018      	movs	r0, r3
 80093b6:	f001 f810 	bl	800a3da <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80093ba:	687a      	ldr	r2, [r7, #4]
 80093bc:	23a5      	movs	r3, #165	; 0xa5
 80093be:	009b      	lsls	r3, r3, #2
 80093c0:	2101      	movs	r1, #1
 80093c2:	50d1      	str	r1, [r2, r3]

  pdev->ep0_data_len = pdev->request.wLength;
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	4a23      	ldr	r2, [pc, #140]	; (8009454 <USBD_LL_SetupStage+0xb8>)
 80093c8:	5a9b      	ldrh	r3, [r3, r2]
 80093ca:	0019      	movs	r1, r3
 80093cc:	687a      	ldr	r2, [r7, #4]
 80093ce:	23a6      	movs	r3, #166	; 0xa6
 80093d0:	009b      	lsls	r3, r3, #2
 80093d2:	50d1      	str	r1, [r2, r3]

  switch (pdev->request.bmRequest & 0x1FU)
 80093d4:	687a      	ldr	r2, [r7, #4]
 80093d6:	23aa      	movs	r3, #170	; 0xaa
 80093d8:	009b      	lsls	r3, r3, #2
 80093da:	5cd3      	ldrb	r3, [r2, r3]
 80093dc:	001a      	movs	r2, r3
 80093de:	231f      	movs	r3, #31
 80093e0:	4013      	ands	r3, r2
 80093e2:	2b02      	cmp	r3, #2
 80093e4:	d019      	beq.n	800941a <USBD_LL_SetupStage+0x7e>
 80093e6:	d822      	bhi.n	800942e <USBD_LL_SetupStage+0x92>
 80093e8:	2b00      	cmp	r3, #0
 80093ea:	d002      	beq.n	80093f2 <USBD_LL_SetupStage+0x56>
 80093ec:	2b01      	cmp	r3, #1
 80093ee:	d00a      	beq.n	8009406 <USBD_LL_SetupStage+0x6a>
 80093f0:	e01d      	b.n	800942e <USBD_LL_SetupStage+0x92>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	22aa      	movs	r2, #170	; 0xaa
 80093f6:	0092      	lsls	r2, r2, #2
 80093f8:	189a      	adds	r2, r3, r2
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	0011      	movs	r1, r2
 80093fe:	0018      	movs	r0, r3
 8009400:	f000 fa10 	bl	8009824 <USBD_StdDevReq>
      break;
 8009404:	e020      	b.n	8009448 <USBD_LL_SetupStage+0xac>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	22aa      	movs	r2, #170	; 0xaa
 800940a:	0092      	lsls	r2, r2, #2
 800940c:	189a      	adds	r2, r3, r2
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	0011      	movs	r1, r2
 8009412:	0018      	movs	r0, r3
 8009414:	f000 fa78 	bl	8009908 <USBD_StdItfReq>
      break;
 8009418:	e016      	b.n	8009448 <USBD_LL_SetupStage+0xac>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	22aa      	movs	r2, #170	; 0xaa
 800941e:	0092      	lsls	r2, r2, #2
 8009420:	189a      	adds	r2, r3, r2
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	0011      	movs	r1, r2
 8009426:	0018      	movs	r0, r3
 8009428:	f000 fac5 	bl	80099b6 <USBD_StdEPReq>
      break;
 800942c:	e00c      	b.n	8009448 <USBD_LL_SetupStage+0xac>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800942e:	687a      	ldr	r2, [r7, #4]
 8009430:	23aa      	movs	r3, #170	; 0xaa
 8009432:	009b      	lsls	r3, r3, #2
 8009434:	5cd3      	ldrb	r3, [r2, r3]
 8009436:	227f      	movs	r2, #127	; 0x7f
 8009438:	4393      	bics	r3, r2
 800943a:	b2da      	uxtb	r2, r3
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	0011      	movs	r1, r2
 8009440:	0018      	movs	r0, r3
 8009442:	f001 fcf2 	bl	800ae2a <USBD_LL_StallEP>
      break;
 8009446:	46c0      	nop			; (mov r8, r8)
  }

  return USBD_OK;
 8009448:	2300      	movs	r3, #0
}
 800944a:	0018      	movs	r0, r3
 800944c:	46bd      	mov	sp, r7
 800944e:	b002      	add	sp, #8
 8009450:	bd80      	pop	{r7, pc}
 8009452:	46c0      	nop			; (mov r8, r8)
 8009454:	000002ae 	.word	0x000002ae

08009458 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8009458:	b580      	push	{r7, lr}
 800945a:	b086      	sub	sp, #24
 800945c:	af00      	add	r7, sp, #0
 800945e:	60f8      	str	r0, [r7, #12]
 8009460:	607a      	str	r2, [r7, #4]
 8009462:	200b      	movs	r0, #11
 8009464:	183b      	adds	r3, r7, r0
 8009466:	1c0a      	adds	r2, r1, #0
 8009468:	701a      	strb	r2, [r3, #0]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800946a:	183b      	adds	r3, r7, r0
 800946c:	781b      	ldrb	r3, [r3, #0]
 800946e:	2b00      	cmp	r3, #0
 8009470:	d154      	bne.n	800951c <USBD_LL_DataOutStage+0xc4>
  {
    pep = &pdev->ep_out[0];
 8009472:	68fb      	ldr	r3, [r7, #12]
 8009474:	3355      	adds	r3, #85	; 0x55
 8009476:	33ff      	adds	r3, #255	; 0xff
 8009478:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800947a:	68fa      	ldr	r2, [r7, #12]
 800947c:	23a5      	movs	r3, #165	; 0xa5
 800947e:	009b      	lsls	r3, r3, #2
 8009480:	58d3      	ldr	r3, [r2, r3]
 8009482:	2b03      	cmp	r3, #3
 8009484:	d139      	bne.n	80094fa <USBD_LL_DataOutStage+0xa2>
    {
      if (pep->rem_length > pep->maxpacket)
 8009486:	697b      	ldr	r3, [r7, #20]
 8009488:	68da      	ldr	r2, [r3, #12]
 800948a:	697b      	ldr	r3, [r7, #20]
 800948c:	691b      	ldr	r3, [r3, #16]
 800948e:	429a      	cmp	r2, r3
 8009490:	d919      	bls.n	80094c6 <USBD_LL_DataOutStage+0x6e>
      {
        pep->rem_length -= pep->maxpacket;
 8009492:	697b      	ldr	r3, [r7, #20]
 8009494:	68da      	ldr	r2, [r3, #12]
 8009496:	697b      	ldr	r3, [r7, #20]
 8009498:	691b      	ldr	r3, [r3, #16]
 800949a:	1ad2      	subs	r2, r2, r3
 800949c:	697b      	ldr	r3, [r7, #20]
 800949e:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80094a0:	697b      	ldr	r3, [r7, #20]
 80094a2:	68da      	ldr	r2, [r3, #12]
 80094a4:	697b      	ldr	r3, [r7, #20]
 80094a6:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 80094a8:	429a      	cmp	r2, r3
 80094aa:	d203      	bcs.n	80094b4 <USBD_LL_DataOutStage+0x5c>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80094ac:	697b      	ldr	r3, [r7, #20]
 80094ae:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 80094b0:	b29b      	uxth	r3, r3
 80094b2:	e002      	b.n	80094ba <USBD_LL_DataOutStage+0x62>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80094b4:	697b      	ldr	r3, [r7, #20]
 80094b6:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 80094b8:	b29b      	uxth	r3, r3
 80094ba:	6879      	ldr	r1, [r7, #4]
 80094bc:	68f8      	ldr	r0, [r7, #12]
 80094be:	001a      	movs	r2, r3
 80094c0:	f001 f89b 	bl	800a5fa <USBD_CtlContinueRx>
 80094c4:	e045      	b.n	8009552 <USBD_LL_DataOutStage+0xfa>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80094c6:	68fa      	ldr	r2, [r7, #12]
 80094c8:	23ad      	movs	r3, #173	; 0xad
 80094ca:	009b      	lsls	r3, r3, #2
 80094cc:	58d3      	ldr	r3, [r2, r3]
 80094ce:	691b      	ldr	r3, [r3, #16]
 80094d0:	2b00      	cmp	r3, #0
 80094d2:	d00d      	beq.n	80094f0 <USBD_LL_DataOutStage+0x98>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 80094d4:	68fa      	ldr	r2, [r7, #12]
 80094d6:	23a7      	movs	r3, #167	; 0xa7
 80094d8:	009b      	lsls	r3, r3, #2
 80094da:	5cd3      	ldrb	r3, [r2, r3]
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80094dc:	2b03      	cmp	r3, #3
 80094de:	d107      	bne.n	80094f0 <USBD_LL_DataOutStage+0x98>
        {
          pdev->pClass->EP0_RxReady(pdev);
 80094e0:	68fa      	ldr	r2, [r7, #12]
 80094e2:	23ad      	movs	r3, #173	; 0xad
 80094e4:	009b      	lsls	r3, r3, #2
 80094e6:	58d3      	ldr	r3, [r2, r3]
 80094e8:	691b      	ldr	r3, [r3, #16]
 80094ea:	68fa      	ldr	r2, [r7, #12]
 80094ec:	0010      	movs	r0, r2
 80094ee:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 80094f0:	68fb      	ldr	r3, [r7, #12]
 80094f2:	0018      	movs	r0, r3
 80094f4:	f001 f894 	bl	800a620 <USBD_CtlSendStatus>
 80094f8:	e02b      	b.n	8009552 <USBD_LL_DataOutStage+0xfa>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 80094fa:	68fa      	ldr	r2, [r7, #12]
 80094fc:	23a5      	movs	r3, #165	; 0xa5
 80094fe:	009b      	lsls	r3, r3, #2
 8009500:	58d3      	ldr	r3, [r2, r3]
 8009502:	2b05      	cmp	r3, #5
 8009504:	d125      	bne.n	8009552 <USBD_LL_DataOutStage+0xfa>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8009506:	68fa      	ldr	r2, [r7, #12]
 8009508:	23a5      	movs	r3, #165	; 0xa5
 800950a:	009b      	lsls	r3, r3, #2
 800950c:	2100      	movs	r1, #0
 800950e:	50d1      	str	r1, [r2, r3]
        USBD_LL_StallEP(pdev, 0U);
 8009510:	68fb      	ldr	r3, [r7, #12]
 8009512:	2100      	movs	r1, #0
 8009514:	0018      	movs	r0, r3
 8009516:	f001 fc88 	bl	800ae2a <USBD_LL_StallEP>
 800951a:	e01a      	b.n	8009552 <USBD_LL_DataOutStage+0xfa>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800951c:	68fa      	ldr	r2, [r7, #12]
 800951e:	23ad      	movs	r3, #173	; 0xad
 8009520:	009b      	lsls	r3, r3, #2
 8009522:	58d3      	ldr	r3, [r2, r3]
 8009524:	699b      	ldr	r3, [r3, #24]
 8009526:	2b00      	cmp	r3, #0
 8009528:	d011      	beq.n	800954e <USBD_LL_DataOutStage+0xf6>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800952a:	68fa      	ldr	r2, [r7, #12]
 800952c:	23a7      	movs	r3, #167	; 0xa7
 800952e:	009b      	lsls	r3, r3, #2
 8009530:	5cd3      	ldrb	r3, [r2, r3]
  else if ((pdev->pClass->DataOut != NULL) &&
 8009532:	2b03      	cmp	r3, #3
 8009534:	d10b      	bne.n	800954e <USBD_LL_DataOutStage+0xf6>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8009536:	68fa      	ldr	r2, [r7, #12]
 8009538:	23ad      	movs	r3, #173	; 0xad
 800953a:	009b      	lsls	r3, r3, #2
 800953c:	58d3      	ldr	r3, [r2, r3]
 800953e:	699b      	ldr	r3, [r3, #24]
 8009540:	220b      	movs	r2, #11
 8009542:	18ba      	adds	r2, r7, r2
 8009544:	7811      	ldrb	r1, [r2, #0]
 8009546:	68fa      	ldr	r2, [r7, #12]
 8009548:	0010      	movs	r0, r2
 800954a:	4798      	blx	r3
 800954c:	e001      	b.n	8009552 <USBD_LL_DataOutStage+0xfa>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800954e:	2302      	movs	r3, #2
 8009550:	e000      	b.n	8009554 <USBD_LL_DataOutStage+0xfc>
  }

  return USBD_OK;
 8009552:	2300      	movs	r3, #0
}
 8009554:	0018      	movs	r0, r3
 8009556:	46bd      	mov	sp, r7
 8009558:	b006      	add	sp, #24
 800955a:	bd80      	pop	{r7, pc}

0800955c <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800955c:	b580      	push	{r7, lr}
 800955e:	b086      	sub	sp, #24
 8009560:	af00      	add	r7, sp, #0
 8009562:	60f8      	str	r0, [r7, #12]
 8009564:	607a      	str	r2, [r7, #4]
 8009566:	200b      	movs	r0, #11
 8009568:	183b      	adds	r3, r7, r0
 800956a:	1c0a      	adds	r2, r1, #0
 800956c:	701a      	strb	r2, [r3, #0]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800956e:	183b      	adds	r3, r7, r0
 8009570:	781b      	ldrb	r3, [r3, #0]
 8009572:	2b00      	cmp	r3, #0
 8009574:	d000      	beq.n	8009578 <USBD_LL_DataInStage+0x1c>
 8009576:	e08e      	b.n	8009696 <USBD_LL_DataInStage+0x13a>
  {
    pep = &pdev->ep_in[0];
 8009578:	68fb      	ldr	r3, [r7, #12]
 800957a:	3314      	adds	r3, #20
 800957c:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800957e:	68fa      	ldr	r2, [r7, #12]
 8009580:	23a5      	movs	r3, #165	; 0xa5
 8009582:	009b      	lsls	r3, r3, #2
 8009584:	58d3      	ldr	r3, [r2, r3]
 8009586:	2b02      	cmp	r3, #2
 8009588:	d164      	bne.n	8009654 <USBD_LL_DataInStage+0xf8>
    {
      if (pep->rem_length > pep->maxpacket)
 800958a:	697b      	ldr	r3, [r7, #20]
 800958c:	68da      	ldr	r2, [r3, #12]
 800958e:	697b      	ldr	r3, [r7, #20]
 8009590:	691b      	ldr	r3, [r3, #16]
 8009592:	429a      	cmp	r2, r3
 8009594:	d915      	bls.n	80095c2 <USBD_LL_DataInStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8009596:	697b      	ldr	r3, [r7, #20]
 8009598:	68da      	ldr	r2, [r3, #12]
 800959a:	697b      	ldr	r3, [r7, #20]
 800959c:	691b      	ldr	r3, [r3, #16]
 800959e:	1ad2      	subs	r2, r2, r3
 80095a0:	697b      	ldr	r3, [r7, #20]
 80095a2:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 80095a4:	697b      	ldr	r3, [r7, #20]
 80095a6:	68db      	ldr	r3, [r3, #12]
 80095a8:	b29a      	uxth	r2, r3
 80095aa:	6879      	ldr	r1, [r7, #4]
 80095ac:	68fb      	ldr	r3, [r7, #12]
 80095ae:	0018      	movs	r0, r3
 80095b0:	f000 ffec 	bl	800a58c <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80095b4:	68f8      	ldr	r0, [r7, #12]
 80095b6:	2300      	movs	r3, #0
 80095b8:	2200      	movs	r2, #0
 80095ba:	2100      	movs	r1, #0
 80095bc:	f001 fd1e 	bl	800affc <USBD_LL_PrepareReceive>
 80095c0:	e059      	b.n	8009676 <USBD_LL_DataInStage+0x11a>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 80095c2:	697b      	ldr	r3, [r7, #20]
 80095c4:	689a      	ldr	r2, [r3, #8]
 80095c6:	697b      	ldr	r3, [r7, #20]
 80095c8:	691b      	ldr	r3, [r3, #16]
 80095ca:	0019      	movs	r1, r3
 80095cc:	0010      	movs	r0, r2
 80095ce:	f7f6 fe33 	bl	8000238 <__aeabi_uidivmod>
 80095d2:	1e0b      	subs	r3, r1, #0
 80095d4:	d11f      	bne.n	8009616 <USBD_LL_DataInStage+0xba>
            (pep->total_length >= pep->maxpacket) &&
 80095d6:	697b      	ldr	r3, [r7, #20]
 80095d8:	689a      	ldr	r2, [r3, #8]
 80095da:	697b      	ldr	r3, [r7, #20]
 80095dc:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 80095de:	429a      	cmp	r2, r3
 80095e0:	d319      	bcc.n	8009616 <USBD_LL_DataInStage+0xba>
            (pep->total_length < pdev->ep0_data_len))
 80095e2:	697b      	ldr	r3, [r7, #20]
 80095e4:	689a      	ldr	r2, [r3, #8]
 80095e6:	68f9      	ldr	r1, [r7, #12]
 80095e8:	23a6      	movs	r3, #166	; 0xa6
 80095ea:	009b      	lsls	r3, r3, #2
 80095ec:	58cb      	ldr	r3, [r1, r3]
            (pep->total_length >= pep->maxpacket) &&
 80095ee:	429a      	cmp	r2, r3
 80095f0:	d211      	bcs.n	8009616 <USBD_LL_DataInStage+0xba>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 80095f2:	68fb      	ldr	r3, [r7, #12]
 80095f4:	2200      	movs	r2, #0
 80095f6:	2100      	movs	r1, #0
 80095f8:	0018      	movs	r0, r3
 80095fa:	f000 ffc7 	bl	800a58c <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80095fe:	68fa      	ldr	r2, [r7, #12]
 8009600:	23a6      	movs	r3, #166	; 0xa6
 8009602:	009b      	lsls	r3, r3, #2
 8009604:	2100      	movs	r1, #0
 8009606:	50d1      	str	r1, [r2, r3]

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009608:	68f8      	ldr	r0, [r7, #12]
 800960a:	2300      	movs	r3, #0
 800960c:	2200      	movs	r2, #0
 800960e:	2100      	movs	r1, #0
 8009610:	f001 fcf4 	bl	800affc <USBD_LL_PrepareReceive>
 8009614:	e02f      	b.n	8009676 <USBD_LL_DataInStage+0x11a>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8009616:	68fa      	ldr	r2, [r7, #12]
 8009618:	23ad      	movs	r3, #173	; 0xad
 800961a:	009b      	lsls	r3, r3, #2
 800961c:	58d3      	ldr	r3, [r2, r3]
 800961e:	68db      	ldr	r3, [r3, #12]
 8009620:	2b00      	cmp	r3, #0
 8009622:	d00d      	beq.n	8009640 <USBD_LL_DataInStage+0xe4>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8009624:	68fa      	ldr	r2, [r7, #12]
 8009626:	23a7      	movs	r3, #167	; 0xa7
 8009628:	009b      	lsls	r3, r3, #2
 800962a:	5cd3      	ldrb	r3, [r2, r3]
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800962c:	2b03      	cmp	r3, #3
 800962e:	d107      	bne.n	8009640 <USBD_LL_DataInStage+0xe4>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8009630:	68fa      	ldr	r2, [r7, #12]
 8009632:	23ad      	movs	r3, #173	; 0xad
 8009634:	009b      	lsls	r3, r3, #2
 8009636:	58d3      	ldr	r3, [r2, r3]
 8009638:	68db      	ldr	r3, [r3, #12]
 800963a:	68fa      	ldr	r2, [r7, #12]
 800963c:	0010      	movs	r0, r2
 800963e:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8009640:	68fb      	ldr	r3, [r7, #12]
 8009642:	2180      	movs	r1, #128	; 0x80
 8009644:	0018      	movs	r0, r3
 8009646:	f001 fbf0 	bl	800ae2a <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800964a:	68fb      	ldr	r3, [r7, #12]
 800964c:	0018      	movs	r0, r3
 800964e:	f000 fffb 	bl	800a648 <USBD_CtlReceiveStatus>
 8009652:	e010      	b.n	8009676 <USBD_LL_DataInStage+0x11a>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8009654:	68fa      	ldr	r2, [r7, #12]
 8009656:	23a5      	movs	r3, #165	; 0xa5
 8009658:	009b      	lsls	r3, r3, #2
 800965a:	58d3      	ldr	r3, [r2, r3]
 800965c:	2b04      	cmp	r3, #4
 800965e:	d005      	beq.n	800966c <USBD_LL_DataInStage+0x110>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8009660:	68fa      	ldr	r2, [r7, #12]
 8009662:	23a5      	movs	r3, #165	; 0xa5
 8009664:	009b      	lsls	r3, r3, #2
 8009666:	58d3      	ldr	r3, [r2, r3]
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8009668:	2b00      	cmp	r3, #0
 800966a:	d104      	bne.n	8009676 <USBD_LL_DataInStage+0x11a>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 800966c:	68fb      	ldr	r3, [r7, #12]
 800966e:	2180      	movs	r1, #128	; 0x80
 8009670:	0018      	movs	r0, r3
 8009672:	f001 fbda 	bl	800ae2a <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8009676:	68fa      	ldr	r2, [r7, #12]
 8009678:	23a8      	movs	r3, #168	; 0xa8
 800967a:	009b      	lsls	r3, r3, #2
 800967c:	5cd3      	ldrb	r3, [r2, r3]
 800967e:	2b01      	cmp	r3, #1
 8009680:	d124      	bne.n	80096cc <USBD_LL_DataInStage+0x170>
    {
      USBD_RunTestMode(pdev);
 8009682:	68fb      	ldr	r3, [r7, #12]
 8009684:	0018      	movs	r0, r3
 8009686:	f7ff fe43 	bl	8009310 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800968a:	68fa      	ldr	r2, [r7, #12]
 800968c:	23a8      	movs	r3, #168	; 0xa8
 800968e:	009b      	lsls	r3, r3, #2
 8009690:	2100      	movs	r1, #0
 8009692:	54d1      	strb	r1, [r2, r3]
 8009694:	e01a      	b.n	80096cc <USBD_LL_DataInStage+0x170>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8009696:	68fa      	ldr	r2, [r7, #12]
 8009698:	23ad      	movs	r3, #173	; 0xad
 800969a:	009b      	lsls	r3, r3, #2
 800969c:	58d3      	ldr	r3, [r2, r3]
 800969e:	695b      	ldr	r3, [r3, #20]
 80096a0:	2b00      	cmp	r3, #0
 80096a2:	d011      	beq.n	80096c8 <USBD_LL_DataInStage+0x16c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80096a4:	68fa      	ldr	r2, [r7, #12]
 80096a6:	23a7      	movs	r3, #167	; 0xa7
 80096a8:	009b      	lsls	r3, r3, #2
 80096aa:	5cd3      	ldrb	r3, [r2, r3]
  else if ((pdev->pClass->DataIn != NULL) &&
 80096ac:	2b03      	cmp	r3, #3
 80096ae:	d10b      	bne.n	80096c8 <USBD_LL_DataInStage+0x16c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 80096b0:	68fa      	ldr	r2, [r7, #12]
 80096b2:	23ad      	movs	r3, #173	; 0xad
 80096b4:	009b      	lsls	r3, r3, #2
 80096b6:	58d3      	ldr	r3, [r2, r3]
 80096b8:	695b      	ldr	r3, [r3, #20]
 80096ba:	220b      	movs	r2, #11
 80096bc:	18ba      	adds	r2, r7, r2
 80096be:	7811      	ldrb	r1, [r2, #0]
 80096c0:	68fa      	ldr	r2, [r7, #12]
 80096c2:	0010      	movs	r0, r2
 80096c4:	4798      	blx	r3
 80096c6:	e001      	b.n	80096cc <USBD_LL_DataInStage+0x170>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80096c8:	2302      	movs	r3, #2
 80096ca:	e000      	b.n	80096ce <USBD_LL_DataInStage+0x172>
  }

  return USBD_OK;
 80096cc:	2300      	movs	r3, #0
}
 80096ce:	0018      	movs	r0, r3
 80096d0:	46bd      	mov	sp, r7
 80096d2:	b006      	add	sp, #24
 80096d4:	bd80      	pop	{r7, pc}

080096d6 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80096d6:	b580      	push	{r7, lr}
 80096d8:	b082      	sub	sp, #8
 80096da:	af00      	add	r7, sp, #0
 80096dc:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80096de:	6878      	ldr	r0, [r7, #4]
 80096e0:	2340      	movs	r3, #64	; 0x40
 80096e2:	2200      	movs	r2, #0
 80096e4:	2100      	movs	r1, #0
 80096e6:	f001 fb3e 	bl	800ad66 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80096ea:	687a      	ldr	r2, [r7, #4]
 80096ec:	23ac      	movs	r3, #172	; 0xac
 80096ee:	005b      	lsls	r3, r3, #1
 80096f0:	2101      	movs	r1, #1
 80096f2:	50d1      	str	r1, [r2, r3]

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80096f4:	687a      	ldr	r2, [r7, #4]
 80096f6:	23b2      	movs	r3, #178	; 0xb2
 80096f8:	005b      	lsls	r3, r3, #1
 80096fa:	2140      	movs	r1, #64	; 0x40
 80096fc:	50d1      	str	r1, [r2, r3]

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80096fe:	6878      	ldr	r0, [r7, #4]
 8009700:	2340      	movs	r3, #64	; 0x40
 8009702:	2200      	movs	r2, #0
 8009704:	2180      	movs	r1, #128	; 0x80
 8009706:	f001 fb2e 	bl	800ad66 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	2201      	movs	r2, #1
 800970e:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	2240      	movs	r2, #64	; 0x40
 8009714:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009716:	687a      	ldr	r2, [r7, #4]
 8009718:	23a7      	movs	r3, #167	; 0xa7
 800971a:	009b      	lsls	r3, r3, #2
 800971c:	2101      	movs	r1, #1
 800971e:	54d1      	strb	r1, [r2, r3]
  pdev->ep0_state = USBD_EP0_IDLE;
 8009720:	687a      	ldr	r2, [r7, #4]
 8009722:	23a5      	movs	r3, #165	; 0xa5
 8009724:	009b      	lsls	r3, r3, #2
 8009726:	2100      	movs	r1, #0
 8009728:	50d1      	str	r1, [r2, r3]
  pdev->dev_config = 0U;
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	2200      	movs	r2, #0
 800972e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8009730:	687a      	ldr	r2, [r7, #4]
 8009732:	23a9      	movs	r3, #169	; 0xa9
 8009734:	009b      	lsls	r3, r3, #2
 8009736:	2100      	movs	r1, #0
 8009738:	50d1      	str	r1, [r2, r3]

  if (pdev->pClassData)
 800973a:	687a      	ldr	r2, [r7, #4]
 800973c:	23ae      	movs	r3, #174	; 0xae
 800973e:	009b      	lsls	r3, r3, #2
 8009740:	58d3      	ldr	r3, [r2, r3]
 8009742:	2b00      	cmp	r3, #0
 8009744:	d00a      	beq.n	800975c <USBD_LL_Reset+0x86>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8009746:	687a      	ldr	r2, [r7, #4]
 8009748:	23ad      	movs	r3, #173	; 0xad
 800974a:	009b      	lsls	r3, r3, #2
 800974c:	58d3      	ldr	r3, [r2, r3]
 800974e:	685a      	ldr	r2, [r3, #4]
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	685b      	ldr	r3, [r3, #4]
 8009754:	b2d9      	uxtb	r1, r3
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	0018      	movs	r0, r3
 800975a:	4790      	blx	r2
  }

  return USBD_OK;
 800975c:	2300      	movs	r3, #0
}
 800975e:	0018      	movs	r0, r3
 8009760:	46bd      	mov	sp, r7
 8009762:	b002      	add	sp, #8
 8009764:	bd80      	pop	{r7, pc}

08009766 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8009766:	b580      	push	{r7, lr}
 8009768:	b082      	sub	sp, #8
 800976a:	af00      	add	r7, sp, #0
 800976c:	6078      	str	r0, [r7, #4]
 800976e:	000a      	movs	r2, r1
 8009770:	1cfb      	adds	r3, r7, #3
 8009772:	701a      	strb	r2, [r3, #0]
  pdev->dev_speed = speed;
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	1cfa      	adds	r2, r7, #3
 8009778:	7812      	ldrb	r2, [r2, #0]
 800977a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800977c:	2300      	movs	r3, #0
}
 800977e:	0018      	movs	r0, r3
 8009780:	46bd      	mov	sp, r7
 8009782:	b002      	add	sp, #8
 8009784:	bd80      	pop	{r7, pc}
	...

08009788 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8009788:	b580      	push	{r7, lr}
 800978a:	b082      	sub	sp, #8
 800978c:	af00      	add	r7, sp, #0
 800978e:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8009790:	687a      	ldr	r2, [r7, #4]
 8009792:	23a7      	movs	r3, #167	; 0xa7
 8009794:	009b      	lsls	r3, r3, #2
 8009796:	5cd1      	ldrb	r1, [r2, r3]
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	4a06      	ldr	r2, [pc, #24]	; (80097b4 <USBD_LL_Suspend+0x2c>)
 800979c:	5499      	strb	r1, [r3, r2]
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800979e:	687a      	ldr	r2, [r7, #4]
 80097a0:	23a7      	movs	r3, #167	; 0xa7
 80097a2:	009b      	lsls	r3, r3, #2
 80097a4:	2104      	movs	r1, #4
 80097a6:	54d1      	strb	r1, [r2, r3]

  return USBD_OK;
 80097a8:	2300      	movs	r3, #0
}
 80097aa:	0018      	movs	r0, r3
 80097ac:	46bd      	mov	sp, r7
 80097ae:	b002      	add	sp, #8
 80097b0:	bd80      	pop	{r7, pc}
 80097b2:	46c0      	nop			; (mov r8, r8)
 80097b4:	0000029d 	.word	0x0000029d

080097b8 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80097b8:	b580      	push	{r7, lr}
 80097ba:	b082      	sub	sp, #8
 80097bc:	af00      	add	r7, sp, #0
 80097be:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80097c0:	687a      	ldr	r2, [r7, #4]
 80097c2:	23a7      	movs	r3, #167	; 0xa7
 80097c4:	009b      	lsls	r3, r3, #2
 80097c6:	5cd3      	ldrb	r3, [r2, r3]
 80097c8:	2b04      	cmp	r3, #4
 80097ca:	d106      	bne.n	80097da <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	4a05      	ldr	r2, [pc, #20]	; (80097e4 <USBD_LL_Resume+0x2c>)
 80097d0:	5c99      	ldrb	r1, [r3, r2]
 80097d2:	687a      	ldr	r2, [r7, #4]
 80097d4:	23a7      	movs	r3, #167	; 0xa7
 80097d6:	009b      	lsls	r3, r3, #2
 80097d8:	54d1      	strb	r1, [r2, r3]
  }

  return USBD_OK;
 80097da:	2300      	movs	r3, #0
}
 80097dc:	0018      	movs	r0, r3
 80097de:	46bd      	mov	sp, r7
 80097e0:	b002      	add	sp, #8
 80097e2:	bd80      	pop	{r7, pc}
 80097e4:	0000029d 	.word	0x0000029d

080097e8 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80097e8:	b580      	push	{r7, lr}
 80097ea:	b082      	sub	sp, #8
 80097ec:	af00      	add	r7, sp, #0
 80097ee:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80097f0:	687a      	ldr	r2, [r7, #4]
 80097f2:	23a7      	movs	r3, #167	; 0xa7
 80097f4:	009b      	lsls	r3, r3, #2
 80097f6:	5cd3      	ldrb	r3, [r2, r3]
 80097f8:	2b03      	cmp	r3, #3
 80097fa:	d10e      	bne.n	800981a <USBD_LL_SOF+0x32>
  {
    if (pdev->pClass->SOF != NULL)
 80097fc:	687a      	ldr	r2, [r7, #4]
 80097fe:	23ad      	movs	r3, #173	; 0xad
 8009800:	009b      	lsls	r3, r3, #2
 8009802:	58d3      	ldr	r3, [r2, r3]
 8009804:	69db      	ldr	r3, [r3, #28]
 8009806:	2b00      	cmp	r3, #0
 8009808:	d007      	beq.n	800981a <USBD_LL_SOF+0x32>
    {
      pdev->pClass->SOF(pdev);
 800980a:	687a      	ldr	r2, [r7, #4]
 800980c:	23ad      	movs	r3, #173	; 0xad
 800980e:	009b      	lsls	r3, r3, #2
 8009810:	58d3      	ldr	r3, [r2, r3]
 8009812:	69db      	ldr	r3, [r3, #28]
 8009814:	687a      	ldr	r2, [r7, #4]
 8009816:	0010      	movs	r0, r2
 8009818:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800981a:	2300      	movs	r3, #0
}
 800981c:	0018      	movs	r0, r3
 800981e:	46bd      	mov	sp, r7
 8009820:	b002      	add	sp, #8
 8009822:	bd80      	pop	{r7, pc}

08009824 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8009824:	b580      	push	{r7, lr}
 8009826:	b084      	sub	sp, #16
 8009828:	af00      	add	r7, sp, #0
 800982a:	6078      	str	r0, [r7, #4]
 800982c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800982e:	230f      	movs	r3, #15
 8009830:	18fb      	adds	r3, r7, r3
 8009832:	2200      	movs	r2, #0
 8009834:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009836:	683b      	ldr	r3, [r7, #0]
 8009838:	781b      	ldrb	r3, [r3, #0]
 800983a:	001a      	movs	r2, r3
 800983c:	2360      	movs	r3, #96	; 0x60
 800983e:	4013      	ands	r3, r2
 8009840:	2b40      	cmp	r3, #64	; 0x40
 8009842:	d004      	beq.n	800984e <USBD_StdDevReq+0x2a>
 8009844:	d84f      	bhi.n	80098e6 <USBD_StdDevReq+0xc2>
 8009846:	2b00      	cmp	r3, #0
 8009848:	d00b      	beq.n	8009862 <USBD_StdDevReq+0x3e>
 800984a:	2b20      	cmp	r3, #32
 800984c:	d14b      	bne.n	80098e6 <USBD_StdDevReq+0xc2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800984e:	687a      	ldr	r2, [r7, #4]
 8009850:	23ad      	movs	r3, #173	; 0xad
 8009852:	009b      	lsls	r3, r3, #2
 8009854:	58d3      	ldr	r3, [r2, r3]
 8009856:	689b      	ldr	r3, [r3, #8]
 8009858:	6839      	ldr	r1, [r7, #0]
 800985a:	687a      	ldr	r2, [r7, #4]
 800985c:	0010      	movs	r0, r2
 800985e:	4798      	blx	r3
      break;
 8009860:	e048      	b.n	80098f4 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009862:	683b      	ldr	r3, [r7, #0]
 8009864:	785b      	ldrb	r3, [r3, #1]
 8009866:	2b09      	cmp	r3, #9
 8009868:	d835      	bhi.n	80098d6 <USBD_StdDevReq+0xb2>
 800986a:	009a      	lsls	r2, r3, #2
 800986c:	4b25      	ldr	r3, [pc, #148]	; (8009904 <USBD_StdDevReq+0xe0>)
 800986e:	18d3      	adds	r3, r2, r3
 8009870:	681b      	ldr	r3, [r3, #0]
 8009872:	469f      	mov	pc, r3
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8009874:	683a      	ldr	r2, [r7, #0]
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	0011      	movs	r1, r2
 800987a:	0018      	movs	r0, r3
 800987c:	f000 fa52 	bl	8009d24 <USBD_GetDescriptor>
          break;
 8009880:	e030      	b.n	80098e4 <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8009882:	683a      	ldr	r2, [r7, #0]
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	0011      	movs	r1, r2
 8009888:	0018      	movs	r0, r3
 800988a:	f000 fbfd 	bl	800a088 <USBD_SetAddress>
          break;
 800988e:	e029      	b.n	80098e4 <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8009890:	683a      	ldr	r2, [r7, #0]
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	0011      	movs	r1, r2
 8009896:	0018      	movs	r0, r3
 8009898:	f000 fc4a 	bl	800a130 <USBD_SetConfig>
          break;
 800989c:	e022      	b.n	80098e4 <USBD_StdDevReq+0xc0>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800989e:	683a      	ldr	r2, [r7, #0]
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	0011      	movs	r1, r2
 80098a4:	0018      	movs	r0, r3
 80098a6:	f000 fce7 	bl	800a278 <USBD_GetConfig>
          break;
 80098aa:	e01b      	b.n	80098e4 <USBD_StdDevReq+0xc0>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80098ac:	683a      	ldr	r2, [r7, #0]
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	0011      	movs	r1, r2
 80098b2:	0018      	movs	r0, r3
 80098b4:	f000 fd1b 	bl	800a2ee <USBD_GetStatus>
          break;
 80098b8:	e014      	b.n	80098e4 <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80098ba:	683a      	ldr	r2, [r7, #0]
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	0011      	movs	r1, r2
 80098c0:	0018      	movs	r0, r3
 80098c2:	f000 fd4e 	bl	800a362 <USBD_SetFeature>
          break;
 80098c6:	e00d      	b.n	80098e4 <USBD_StdDevReq+0xc0>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80098c8:	683a      	ldr	r2, [r7, #0]
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	0011      	movs	r1, r2
 80098ce:	0018      	movs	r0, r3
 80098d0:	f000 fd5d 	bl	800a38e <USBD_ClrFeature>
          break;
 80098d4:	e006      	b.n	80098e4 <USBD_StdDevReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 80098d6:	683a      	ldr	r2, [r7, #0]
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	0011      	movs	r1, r2
 80098dc:	0018      	movs	r0, r3
 80098de:	f000 fdb7 	bl	800a450 <USBD_CtlError>
          break;
 80098e2:	46c0      	nop			; (mov r8, r8)
      }
      break;
 80098e4:	e006      	b.n	80098f4 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 80098e6:	683a      	ldr	r2, [r7, #0]
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	0011      	movs	r1, r2
 80098ec:	0018      	movs	r0, r3
 80098ee:	f000 fdaf 	bl	800a450 <USBD_CtlError>
      break;
 80098f2:	46c0      	nop			; (mov r8, r8)
  }

  return ret;
 80098f4:	230f      	movs	r3, #15
 80098f6:	18fb      	adds	r3, r7, r3
 80098f8:	781b      	ldrb	r3, [r3, #0]
}
 80098fa:	0018      	movs	r0, r3
 80098fc:	46bd      	mov	sp, r7
 80098fe:	b004      	add	sp, #16
 8009900:	bd80      	pop	{r7, pc}
 8009902:	46c0      	nop			; (mov r8, r8)
 8009904:	0800bb20 	.word	0x0800bb20

08009908 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8009908:	b5b0      	push	{r4, r5, r7, lr}
 800990a:	b084      	sub	sp, #16
 800990c:	af00      	add	r7, sp, #0
 800990e:	6078      	str	r0, [r7, #4]
 8009910:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009912:	230f      	movs	r3, #15
 8009914:	18fb      	adds	r3, r7, r3
 8009916:	2200      	movs	r2, #0
 8009918:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800991a:	683b      	ldr	r3, [r7, #0]
 800991c:	781b      	ldrb	r3, [r3, #0]
 800991e:	001a      	movs	r2, r3
 8009920:	2360      	movs	r3, #96	; 0x60
 8009922:	4013      	ands	r3, r2
 8009924:	2b40      	cmp	r3, #64	; 0x40
 8009926:	d004      	beq.n	8009932 <USBD_StdItfReq+0x2a>
 8009928:	d839      	bhi.n	800999e <USBD_StdItfReq+0x96>
 800992a:	2b00      	cmp	r3, #0
 800992c:	d001      	beq.n	8009932 <USBD_StdItfReq+0x2a>
 800992e:	2b20      	cmp	r3, #32
 8009930:	d135      	bne.n	800999e <USBD_StdItfReq+0x96>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8009932:	687a      	ldr	r2, [r7, #4]
 8009934:	23a7      	movs	r3, #167	; 0xa7
 8009936:	009b      	lsls	r3, r3, #2
 8009938:	5cd3      	ldrb	r3, [r2, r3]
 800993a:	3b01      	subs	r3, #1
 800993c:	2b02      	cmp	r3, #2
 800993e:	d825      	bhi.n	800998c <USBD_StdItfReq+0x84>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8009940:	683b      	ldr	r3, [r7, #0]
 8009942:	889b      	ldrh	r3, [r3, #4]
 8009944:	b2db      	uxtb	r3, r3
 8009946:	2b01      	cmp	r3, #1
 8009948:	d819      	bhi.n	800997e <USBD_StdItfReq+0x76>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800994a:	687a      	ldr	r2, [r7, #4]
 800994c:	23ad      	movs	r3, #173	; 0xad
 800994e:	009b      	lsls	r3, r3, #2
 8009950:	58d3      	ldr	r3, [r2, r3]
 8009952:	689b      	ldr	r3, [r3, #8]
 8009954:	250f      	movs	r5, #15
 8009956:	197c      	adds	r4, r7, r5
 8009958:	6839      	ldr	r1, [r7, #0]
 800995a:	687a      	ldr	r2, [r7, #4]
 800995c:	0010      	movs	r0, r2
 800995e:	4798      	blx	r3
 8009960:	0003      	movs	r3, r0
 8009962:	7023      	strb	r3, [r4, #0]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8009964:	683b      	ldr	r3, [r7, #0]
 8009966:	88db      	ldrh	r3, [r3, #6]
 8009968:	2b00      	cmp	r3, #0
 800996a:	d116      	bne.n	800999a <USBD_StdItfReq+0x92>
 800996c:	197b      	adds	r3, r7, r5
 800996e:	781b      	ldrb	r3, [r3, #0]
 8009970:	2b00      	cmp	r3, #0
 8009972:	d112      	bne.n	800999a <USBD_StdItfReq+0x92>
            {
              USBD_CtlSendStatus(pdev);
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	0018      	movs	r0, r3
 8009978:	f000 fe52 	bl	800a620 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800997c:	e00d      	b.n	800999a <USBD_StdItfReq+0x92>
            USBD_CtlError(pdev, req);
 800997e:	683a      	ldr	r2, [r7, #0]
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	0011      	movs	r1, r2
 8009984:	0018      	movs	r0, r3
 8009986:	f000 fd63 	bl	800a450 <USBD_CtlError>
          break;
 800998a:	e006      	b.n	800999a <USBD_StdItfReq+0x92>

        default:
          USBD_CtlError(pdev, req);
 800998c:	683a      	ldr	r2, [r7, #0]
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	0011      	movs	r1, r2
 8009992:	0018      	movs	r0, r3
 8009994:	f000 fd5c 	bl	800a450 <USBD_CtlError>
          break;
 8009998:	e000      	b.n	800999c <USBD_StdItfReq+0x94>
          break;
 800999a:	46c0      	nop			; (mov r8, r8)
      }
      break;
 800999c:	e006      	b.n	80099ac <USBD_StdItfReq+0xa4>

    default:
      USBD_CtlError(pdev, req);
 800999e:	683a      	ldr	r2, [r7, #0]
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	0011      	movs	r1, r2
 80099a4:	0018      	movs	r0, r3
 80099a6:	f000 fd53 	bl	800a450 <USBD_CtlError>
      break;
 80099aa:	46c0      	nop			; (mov r8, r8)
  }

  return USBD_OK;
 80099ac:	2300      	movs	r3, #0
}
 80099ae:	0018      	movs	r0, r3
 80099b0:	46bd      	mov	sp, r7
 80099b2:	b004      	add	sp, #16
 80099b4:	bdb0      	pop	{r4, r5, r7, pc}

080099b6 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 80099b6:	b5b0      	push	{r4, r5, r7, lr}
 80099b8:	b084      	sub	sp, #16
 80099ba:	af00      	add	r7, sp, #0
 80099bc:	6078      	str	r0, [r7, #4]
 80099be:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80099c0:	230f      	movs	r3, #15
 80099c2:	18fb      	adds	r3, r7, r3
 80099c4:	2200      	movs	r2, #0
 80099c6:	701a      	strb	r2, [r3, #0]
  ep_addr  = LOBYTE(req->wIndex);
 80099c8:	683b      	ldr	r3, [r7, #0]
 80099ca:	889a      	ldrh	r2, [r3, #4]
 80099cc:	230e      	movs	r3, #14
 80099ce:	18fb      	adds	r3, r7, r3
 80099d0:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80099d2:	683b      	ldr	r3, [r7, #0]
 80099d4:	781b      	ldrb	r3, [r3, #0]
 80099d6:	001a      	movs	r2, r3
 80099d8:	2360      	movs	r3, #96	; 0x60
 80099da:	4013      	ands	r3, r2
 80099dc:	2b40      	cmp	r3, #64	; 0x40
 80099de:	d006      	beq.n	80099ee <USBD_StdEPReq+0x38>
 80099e0:	d900      	bls.n	80099e4 <USBD_StdEPReq+0x2e>
 80099e2:	e190      	b.n	8009d06 <USBD_StdEPReq+0x350>
 80099e4:	2b00      	cmp	r3, #0
 80099e6:	d00c      	beq.n	8009a02 <USBD_StdEPReq+0x4c>
 80099e8:	2b20      	cmp	r3, #32
 80099ea:	d000      	beq.n	80099ee <USBD_StdEPReq+0x38>
 80099ec:	e18b      	b.n	8009d06 <USBD_StdEPReq+0x350>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 80099ee:	687a      	ldr	r2, [r7, #4]
 80099f0:	23ad      	movs	r3, #173	; 0xad
 80099f2:	009b      	lsls	r3, r3, #2
 80099f4:	58d3      	ldr	r3, [r2, r3]
 80099f6:	689b      	ldr	r3, [r3, #8]
 80099f8:	6839      	ldr	r1, [r7, #0]
 80099fa:	687a      	ldr	r2, [r7, #4]
 80099fc:	0010      	movs	r0, r2
 80099fe:	4798      	blx	r3
      break;
 8009a00:	e188      	b.n	8009d14 <USBD_StdEPReq+0x35e>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8009a02:	683b      	ldr	r3, [r7, #0]
 8009a04:	781b      	ldrb	r3, [r3, #0]
 8009a06:	001a      	movs	r2, r3
 8009a08:	2360      	movs	r3, #96	; 0x60
 8009a0a:	4013      	ands	r3, r2
 8009a0c:	2b20      	cmp	r3, #32
 8009a0e:	d10f      	bne.n	8009a30 <USBD_StdEPReq+0x7a>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009a10:	687a      	ldr	r2, [r7, #4]
 8009a12:	23ad      	movs	r3, #173	; 0xad
 8009a14:	009b      	lsls	r3, r3, #2
 8009a16:	58d3      	ldr	r3, [r2, r3]
 8009a18:	689b      	ldr	r3, [r3, #8]
 8009a1a:	250f      	movs	r5, #15
 8009a1c:	197c      	adds	r4, r7, r5
 8009a1e:	6839      	ldr	r1, [r7, #0]
 8009a20:	687a      	ldr	r2, [r7, #4]
 8009a22:	0010      	movs	r0, r2
 8009a24:	4798      	blx	r3
 8009a26:	0003      	movs	r3, r0
 8009a28:	7023      	strb	r3, [r4, #0]

        return ret;
 8009a2a:	197b      	adds	r3, r7, r5
 8009a2c:	781b      	ldrb	r3, [r3, #0]
 8009a2e:	e174      	b.n	8009d1a <USBD_StdEPReq+0x364>
      }

      switch (req->bRequest)
 8009a30:	683b      	ldr	r3, [r7, #0]
 8009a32:	785b      	ldrb	r3, [r3, #1]
 8009a34:	2b03      	cmp	r3, #3
 8009a36:	d007      	beq.n	8009a48 <USBD_StdEPReq+0x92>
 8009a38:	dd00      	ble.n	8009a3c <USBD_StdEPReq+0x86>
 8009a3a:	e15c      	b.n	8009cf6 <USBD_StdEPReq+0x340>
 8009a3c:	2b00      	cmp	r3, #0
 8009a3e:	d100      	bne.n	8009a42 <USBD_StdEPReq+0x8c>
 8009a40:	e092      	b.n	8009b68 <USBD_StdEPReq+0x1b2>
 8009a42:	2b01      	cmp	r3, #1
 8009a44:	d04b      	beq.n	8009ade <USBD_StdEPReq+0x128>
 8009a46:	e156      	b.n	8009cf6 <USBD_StdEPReq+0x340>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8009a48:	687a      	ldr	r2, [r7, #4]
 8009a4a:	23a7      	movs	r3, #167	; 0xa7
 8009a4c:	009b      	lsls	r3, r3, #2
 8009a4e:	5cd3      	ldrb	r3, [r2, r3]
 8009a50:	2b02      	cmp	r3, #2
 8009a52:	d002      	beq.n	8009a5a <USBD_StdEPReq+0xa4>
 8009a54:	2b03      	cmp	r3, #3
 8009a56:	d01d      	beq.n	8009a94 <USBD_StdEPReq+0xde>
 8009a58:	e039      	b.n	8009ace <USBD_StdEPReq+0x118>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009a5a:	220e      	movs	r2, #14
 8009a5c:	18bb      	adds	r3, r7, r2
 8009a5e:	781b      	ldrb	r3, [r3, #0]
 8009a60:	2b00      	cmp	r3, #0
 8009a62:	d010      	beq.n	8009a86 <USBD_StdEPReq+0xd0>
 8009a64:	18bb      	adds	r3, r7, r2
 8009a66:	781b      	ldrb	r3, [r3, #0]
 8009a68:	2b80      	cmp	r3, #128	; 0x80
 8009a6a:	d00c      	beq.n	8009a86 <USBD_StdEPReq+0xd0>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8009a6c:	18bb      	adds	r3, r7, r2
 8009a6e:	781a      	ldrb	r2, [r3, #0]
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	0011      	movs	r1, r2
 8009a74:	0018      	movs	r0, r3
 8009a76:	f001 f9d8 	bl	800ae2a <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	2180      	movs	r1, #128	; 0x80
 8009a7e:	0018      	movs	r0, r3
 8009a80:	f001 f9d3 	bl	800ae2a <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009a84:	e02a      	b.n	8009adc <USBD_StdEPReq+0x126>
                USBD_CtlError(pdev, req);
 8009a86:	683a      	ldr	r2, [r7, #0]
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	0011      	movs	r1, r2
 8009a8c:	0018      	movs	r0, r3
 8009a8e:	f000 fcdf 	bl	800a450 <USBD_CtlError>
              break;
 8009a92:	e023      	b.n	8009adc <USBD_StdEPReq+0x126>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009a94:	683b      	ldr	r3, [r7, #0]
 8009a96:	885b      	ldrh	r3, [r3, #2]
 8009a98:	2b00      	cmp	r3, #0
 8009a9a:	d113      	bne.n	8009ac4 <USBD_StdEPReq+0x10e>
              {
                if ((ep_addr != 0x00U) &&
 8009a9c:	220e      	movs	r2, #14
 8009a9e:	18bb      	adds	r3, r7, r2
 8009aa0:	781b      	ldrb	r3, [r3, #0]
 8009aa2:	2b00      	cmp	r3, #0
 8009aa4:	d00e      	beq.n	8009ac4 <USBD_StdEPReq+0x10e>
 8009aa6:	18bb      	adds	r3, r7, r2
 8009aa8:	781b      	ldrb	r3, [r3, #0]
 8009aaa:	2b80      	cmp	r3, #128	; 0x80
 8009aac:	d00a      	beq.n	8009ac4 <USBD_StdEPReq+0x10e>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8009aae:	683b      	ldr	r3, [r7, #0]
 8009ab0:	88db      	ldrh	r3, [r3, #6]
 8009ab2:	2b00      	cmp	r3, #0
 8009ab4:	d106      	bne.n	8009ac4 <USBD_StdEPReq+0x10e>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8009ab6:	18bb      	adds	r3, r7, r2
 8009ab8:	781a      	ldrb	r2, [r3, #0]
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	0011      	movs	r1, r2
 8009abe:	0018      	movs	r0, r3
 8009ac0:	f001 f9b3 	bl	800ae2a <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	0018      	movs	r0, r3
 8009ac8:	f000 fdaa 	bl	800a620 <USBD_CtlSendStatus>

              break;
 8009acc:	e006      	b.n	8009adc <USBD_StdEPReq+0x126>

            default:
              USBD_CtlError(pdev, req);
 8009ace:	683a      	ldr	r2, [r7, #0]
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	0011      	movs	r1, r2
 8009ad4:	0018      	movs	r0, r3
 8009ad6:	f000 fcbb 	bl	800a450 <USBD_CtlError>
              break;
 8009ada:	46c0      	nop			; (mov r8, r8)
          }
          break;
 8009adc:	e112      	b.n	8009d04 <USBD_StdEPReq+0x34e>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8009ade:	687a      	ldr	r2, [r7, #4]
 8009ae0:	23a7      	movs	r3, #167	; 0xa7
 8009ae2:	009b      	lsls	r3, r3, #2
 8009ae4:	5cd3      	ldrb	r3, [r2, r3]
 8009ae6:	2b02      	cmp	r3, #2
 8009ae8:	d002      	beq.n	8009af0 <USBD_StdEPReq+0x13a>
 8009aea:	2b03      	cmp	r3, #3
 8009aec:	d01d      	beq.n	8009b2a <USBD_StdEPReq+0x174>
 8009aee:	e032      	b.n	8009b56 <USBD_StdEPReq+0x1a0>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009af0:	220e      	movs	r2, #14
 8009af2:	18bb      	adds	r3, r7, r2
 8009af4:	781b      	ldrb	r3, [r3, #0]
 8009af6:	2b00      	cmp	r3, #0
 8009af8:	d010      	beq.n	8009b1c <USBD_StdEPReq+0x166>
 8009afa:	18bb      	adds	r3, r7, r2
 8009afc:	781b      	ldrb	r3, [r3, #0]
 8009afe:	2b80      	cmp	r3, #128	; 0x80
 8009b00:	d00c      	beq.n	8009b1c <USBD_StdEPReq+0x166>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8009b02:	18bb      	adds	r3, r7, r2
 8009b04:	781a      	ldrb	r2, [r3, #0]
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	0011      	movs	r1, r2
 8009b0a:	0018      	movs	r0, r3
 8009b0c:	f001 f98d 	bl	800ae2a <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	2180      	movs	r1, #128	; 0x80
 8009b14:	0018      	movs	r0, r3
 8009b16:	f001 f988 	bl	800ae2a <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009b1a:	e024      	b.n	8009b66 <USBD_StdEPReq+0x1b0>
                USBD_CtlError(pdev, req);
 8009b1c:	683a      	ldr	r2, [r7, #0]
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	0011      	movs	r1, r2
 8009b22:	0018      	movs	r0, r3
 8009b24:	f000 fc94 	bl	800a450 <USBD_CtlError>
              break;
 8009b28:	e01d      	b.n	8009b66 <USBD_StdEPReq+0x1b0>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009b2a:	683b      	ldr	r3, [r7, #0]
 8009b2c:	885b      	ldrh	r3, [r3, #2]
 8009b2e:	2b00      	cmp	r3, #0
 8009b30:	d118      	bne.n	8009b64 <USBD_StdEPReq+0x1ae>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8009b32:	210e      	movs	r1, #14
 8009b34:	187b      	adds	r3, r7, r1
 8009b36:	781b      	ldrb	r3, [r3, #0]
 8009b38:	227f      	movs	r2, #127	; 0x7f
 8009b3a:	4013      	ands	r3, r2
 8009b3c:	d006      	beq.n	8009b4c <USBD_StdEPReq+0x196>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8009b3e:	187b      	adds	r3, r7, r1
 8009b40:	781a      	ldrb	r2, [r3, #0]
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	0011      	movs	r1, r2
 8009b46:	0018      	movs	r0, r3
 8009b48:	f001 f99a 	bl	800ae80 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	0018      	movs	r0, r3
 8009b50:	f000 fd66 	bl	800a620 <USBD_CtlSendStatus>
              }
              break;
 8009b54:	e006      	b.n	8009b64 <USBD_StdEPReq+0x1ae>

            default:
              USBD_CtlError(pdev, req);
 8009b56:	683a      	ldr	r2, [r7, #0]
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	0011      	movs	r1, r2
 8009b5c:	0018      	movs	r0, r3
 8009b5e:	f000 fc77 	bl	800a450 <USBD_CtlError>
              break;
 8009b62:	e000      	b.n	8009b66 <USBD_StdEPReq+0x1b0>
              break;
 8009b64:	46c0      	nop			; (mov r8, r8)
          }
          break;
 8009b66:	e0cd      	b.n	8009d04 <USBD_StdEPReq+0x34e>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8009b68:	687a      	ldr	r2, [r7, #4]
 8009b6a:	23a7      	movs	r3, #167	; 0xa7
 8009b6c:	009b      	lsls	r3, r3, #2
 8009b6e:	5cd3      	ldrb	r3, [r2, r3]
 8009b70:	2b02      	cmp	r3, #2
 8009b72:	d002      	beq.n	8009b7a <USBD_StdEPReq+0x1c4>
 8009b74:	2b03      	cmp	r3, #3
 8009b76:	d03c      	beq.n	8009bf2 <USBD_StdEPReq+0x23c>
 8009b78:	e0b5      	b.n	8009ce6 <USBD_StdEPReq+0x330>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009b7a:	220e      	movs	r2, #14
 8009b7c:	18bb      	adds	r3, r7, r2
 8009b7e:	781b      	ldrb	r3, [r3, #0]
 8009b80:	2b00      	cmp	r3, #0
 8009b82:	d00a      	beq.n	8009b9a <USBD_StdEPReq+0x1e4>
 8009b84:	18bb      	adds	r3, r7, r2
 8009b86:	781b      	ldrb	r3, [r3, #0]
 8009b88:	2b80      	cmp	r3, #128	; 0x80
 8009b8a:	d006      	beq.n	8009b9a <USBD_StdEPReq+0x1e4>
              {
                USBD_CtlError(pdev, req);
 8009b8c:	683a      	ldr	r2, [r7, #0]
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	0011      	movs	r1, r2
 8009b92:	0018      	movs	r0, r3
 8009b94:	f000 fc5c 	bl	800a450 <USBD_CtlError>
                break;
 8009b98:	e0ac      	b.n	8009cf4 <USBD_StdEPReq+0x33e>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009b9a:	220e      	movs	r2, #14
 8009b9c:	18bb      	adds	r3, r7, r2
 8009b9e:	781b      	ldrb	r3, [r3, #0]
 8009ba0:	b25b      	sxtb	r3, r3
 8009ba2:	2b00      	cmp	r3, #0
 8009ba4:	da0c      	bge.n	8009bc0 <USBD_StdEPReq+0x20a>
 8009ba6:	18bb      	adds	r3, r7, r2
 8009ba8:	781b      	ldrb	r3, [r3, #0]
 8009baa:	227f      	movs	r2, #127	; 0x7f
 8009bac:	401a      	ands	r2, r3
 8009bae:	0013      	movs	r3, r2
 8009bb0:	009b      	lsls	r3, r3, #2
 8009bb2:	189b      	adds	r3, r3, r2
 8009bb4:	009b      	lsls	r3, r3, #2
 8009bb6:	3310      	adds	r3, #16
 8009bb8:	687a      	ldr	r2, [r7, #4]
 8009bba:	18d3      	adds	r3, r2, r3
 8009bbc:	3304      	adds	r3, #4
 8009bbe:	e00d      	b.n	8009bdc <USBD_StdEPReq+0x226>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009bc0:	230e      	movs	r3, #14
 8009bc2:	18fb      	adds	r3, r7, r3
 8009bc4:	781b      	ldrb	r3, [r3, #0]
 8009bc6:	227f      	movs	r2, #127	; 0x7f
 8009bc8:	401a      	ands	r2, r3
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009bca:	0013      	movs	r3, r2
 8009bcc:	009b      	lsls	r3, r3, #2
 8009bce:	189b      	adds	r3, r3, r2
 8009bd0:	009b      	lsls	r3, r3, #2
 8009bd2:	3351      	adds	r3, #81	; 0x51
 8009bd4:	33ff      	adds	r3, #255	; 0xff
 8009bd6:	687a      	ldr	r2, [r7, #4]
 8009bd8:	18d3      	adds	r3, r2, r3
 8009bda:	3304      	adds	r3, #4
 8009bdc:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8009bde:	68bb      	ldr	r3, [r7, #8]
 8009be0:	2200      	movs	r2, #0
 8009be2:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8009be4:	68b9      	ldr	r1, [r7, #8]
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	2202      	movs	r2, #2
 8009bea:	0018      	movs	r0, r3
 8009bec:	f000 fcae 	bl	800a54c <USBD_CtlSendData>
              break;
 8009bf0:	e080      	b.n	8009cf4 <USBD_StdEPReq+0x33e>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8009bf2:	220e      	movs	r2, #14
 8009bf4:	18bb      	adds	r3, r7, r2
 8009bf6:	781b      	ldrb	r3, [r3, #0]
 8009bf8:	b25b      	sxtb	r3, r3
 8009bfa:	2b00      	cmp	r3, #0
 8009bfc:	da14      	bge.n	8009c28 <USBD_StdEPReq+0x272>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8009bfe:	18bb      	adds	r3, r7, r2
 8009c00:	781b      	ldrb	r3, [r3, #0]
 8009c02:	220f      	movs	r2, #15
 8009c04:	401a      	ands	r2, r3
 8009c06:	6879      	ldr	r1, [r7, #4]
 8009c08:	0013      	movs	r3, r2
 8009c0a:	009b      	lsls	r3, r3, #2
 8009c0c:	189b      	adds	r3, r3, r2
 8009c0e:	009b      	lsls	r3, r3, #2
 8009c10:	18cb      	adds	r3, r1, r3
 8009c12:	3318      	adds	r3, #24
 8009c14:	681b      	ldr	r3, [r3, #0]
 8009c16:	2b00      	cmp	r3, #0
 8009c18:	d11e      	bne.n	8009c58 <USBD_StdEPReq+0x2a2>
                {
                  USBD_CtlError(pdev, req);
 8009c1a:	683a      	ldr	r2, [r7, #0]
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	0011      	movs	r1, r2
 8009c20:	0018      	movs	r0, r3
 8009c22:	f000 fc15 	bl	800a450 <USBD_CtlError>
                  break;
 8009c26:	e065      	b.n	8009cf4 <USBD_StdEPReq+0x33e>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8009c28:	230e      	movs	r3, #14
 8009c2a:	18fb      	adds	r3, r7, r3
 8009c2c:	781b      	ldrb	r3, [r3, #0]
 8009c2e:	220f      	movs	r2, #15
 8009c30:	401a      	ands	r2, r3
 8009c32:	6878      	ldr	r0, [r7, #4]
 8009c34:	23ac      	movs	r3, #172	; 0xac
 8009c36:	0059      	lsls	r1, r3, #1
 8009c38:	0013      	movs	r3, r2
 8009c3a:	009b      	lsls	r3, r3, #2
 8009c3c:	189b      	adds	r3, r3, r2
 8009c3e:	009b      	lsls	r3, r3, #2
 8009c40:	18c3      	adds	r3, r0, r3
 8009c42:	185b      	adds	r3, r3, r1
 8009c44:	681b      	ldr	r3, [r3, #0]
 8009c46:	2b00      	cmp	r3, #0
 8009c48:	d106      	bne.n	8009c58 <USBD_StdEPReq+0x2a2>
                {
                  USBD_CtlError(pdev, req);
 8009c4a:	683a      	ldr	r2, [r7, #0]
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	0011      	movs	r1, r2
 8009c50:	0018      	movs	r0, r3
 8009c52:	f000 fbfd 	bl	800a450 <USBD_CtlError>
                  break;
 8009c56:	e04d      	b.n	8009cf4 <USBD_StdEPReq+0x33e>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009c58:	220e      	movs	r2, #14
 8009c5a:	18bb      	adds	r3, r7, r2
 8009c5c:	781b      	ldrb	r3, [r3, #0]
 8009c5e:	b25b      	sxtb	r3, r3
 8009c60:	2b00      	cmp	r3, #0
 8009c62:	da0c      	bge.n	8009c7e <USBD_StdEPReq+0x2c8>
 8009c64:	18bb      	adds	r3, r7, r2
 8009c66:	781b      	ldrb	r3, [r3, #0]
 8009c68:	227f      	movs	r2, #127	; 0x7f
 8009c6a:	401a      	ands	r2, r3
 8009c6c:	0013      	movs	r3, r2
 8009c6e:	009b      	lsls	r3, r3, #2
 8009c70:	189b      	adds	r3, r3, r2
 8009c72:	009b      	lsls	r3, r3, #2
 8009c74:	3310      	adds	r3, #16
 8009c76:	687a      	ldr	r2, [r7, #4]
 8009c78:	18d3      	adds	r3, r2, r3
 8009c7a:	3304      	adds	r3, #4
 8009c7c:	e00d      	b.n	8009c9a <USBD_StdEPReq+0x2e4>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009c7e:	230e      	movs	r3, #14
 8009c80:	18fb      	adds	r3, r7, r3
 8009c82:	781b      	ldrb	r3, [r3, #0]
 8009c84:	227f      	movs	r2, #127	; 0x7f
 8009c86:	401a      	ands	r2, r3
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009c88:	0013      	movs	r3, r2
 8009c8a:	009b      	lsls	r3, r3, #2
 8009c8c:	189b      	adds	r3, r3, r2
 8009c8e:	009b      	lsls	r3, r3, #2
 8009c90:	3351      	adds	r3, #81	; 0x51
 8009c92:	33ff      	adds	r3, #255	; 0xff
 8009c94:	687a      	ldr	r2, [r7, #4]
 8009c96:	18d3      	adds	r3, r2, r3
 8009c98:	3304      	adds	r3, #4
 8009c9a:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8009c9c:	220e      	movs	r2, #14
 8009c9e:	18bb      	adds	r3, r7, r2
 8009ca0:	781b      	ldrb	r3, [r3, #0]
 8009ca2:	2b00      	cmp	r3, #0
 8009ca4:	d003      	beq.n	8009cae <USBD_StdEPReq+0x2f8>
 8009ca6:	18bb      	adds	r3, r7, r2
 8009ca8:	781b      	ldrb	r3, [r3, #0]
 8009caa:	2b80      	cmp	r3, #128	; 0x80
 8009cac:	d103      	bne.n	8009cb6 <USBD_StdEPReq+0x300>
              {
                pep->status = 0x0000U;
 8009cae:	68bb      	ldr	r3, [r7, #8]
 8009cb0:	2200      	movs	r2, #0
 8009cb2:	601a      	str	r2, [r3, #0]
 8009cb4:	e010      	b.n	8009cd8 <USBD_StdEPReq+0x322>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8009cb6:	230e      	movs	r3, #14
 8009cb8:	18fb      	adds	r3, r7, r3
 8009cba:	781a      	ldrb	r2, [r3, #0]
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	0011      	movs	r1, r2
 8009cc0:	0018      	movs	r0, r3
 8009cc2:	f001 f908 	bl	800aed6 <USBD_LL_IsStallEP>
 8009cc6:	1e03      	subs	r3, r0, #0
 8009cc8:	d003      	beq.n	8009cd2 <USBD_StdEPReq+0x31c>
              {
                pep->status = 0x0001U;
 8009cca:	68bb      	ldr	r3, [r7, #8]
 8009ccc:	2201      	movs	r2, #1
 8009cce:	601a      	str	r2, [r3, #0]
 8009cd0:	e002      	b.n	8009cd8 <USBD_StdEPReq+0x322>
              }
              else
              {
                pep->status = 0x0000U;
 8009cd2:	68bb      	ldr	r3, [r7, #8]
 8009cd4:	2200      	movs	r2, #0
 8009cd6:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8009cd8:	68b9      	ldr	r1, [r7, #8]
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	2202      	movs	r2, #2
 8009cde:	0018      	movs	r0, r3
 8009ce0:	f000 fc34 	bl	800a54c <USBD_CtlSendData>
              break;
 8009ce4:	e006      	b.n	8009cf4 <USBD_StdEPReq+0x33e>

            default:
              USBD_CtlError(pdev, req);
 8009ce6:	683a      	ldr	r2, [r7, #0]
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	0011      	movs	r1, r2
 8009cec:	0018      	movs	r0, r3
 8009cee:	f000 fbaf 	bl	800a450 <USBD_CtlError>
              break;
 8009cf2:	46c0      	nop			; (mov r8, r8)
          }
          break;
 8009cf4:	e006      	b.n	8009d04 <USBD_StdEPReq+0x34e>

        default:
          USBD_CtlError(pdev, req);
 8009cf6:	683a      	ldr	r2, [r7, #0]
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	0011      	movs	r1, r2
 8009cfc:	0018      	movs	r0, r3
 8009cfe:	f000 fba7 	bl	800a450 <USBD_CtlError>
          break;
 8009d02:	46c0      	nop			; (mov r8, r8)
      }
      break;
 8009d04:	e006      	b.n	8009d14 <USBD_StdEPReq+0x35e>

    default:
      USBD_CtlError(pdev, req);
 8009d06:	683a      	ldr	r2, [r7, #0]
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	0011      	movs	r1, r2
 8009d0c:	0018      	movs	r0, r3
 8009d0e:	f000 fb9f 	bl	800a450 <USBD_CtlError>
      break;
 8009d12:	46c0      	nop			; (mov r8, r8)
  }

  return ret;
 8009d14:	230f      	movs	r3, #15
 8009d16:	18fb      	adds	r3, r7, r3
 8009d18:	781b      	ldrb	r3, [r3, #0]
}
 8009d1a:	0018      	movs	r0, r3
 8009d1c:	46bd      	mov	sp, r7
 8009d1e:	b004      	add	sp, #16
 8009d20:	bdb0      	pop	{r4, r5, r7, pc}
	...

08009d24 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8009d24:	b580      	push	{r7, lr}
 8009d26:	b084      	sub	sp, #16
 8009d28:	af00      	add	r7, sp, #0
 8009d2a:	6078      	str	r0, [r7, #4]
 8009d2c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8009d2e:	2308      	movs	r3, #8
 8009d30:	18fb      	adds	r3, r7, r3
 8009d32:	2200      	movs	r2, #0
 8009d34:	801a      	strh	r2, [r3, #0]
  uint8_t *pbuf = NULL;
 8009d36:	2300      	movs	r3, #0
 8009d38:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8009d3a:	230b      	movs	r3, #11
 8009d3c:	18fb      	adds	r3, r7, r3
 8009d3e:	2200      	movs	r2, #0
 8009d40:	701a      	strb	r2, [r3, #0]

  switch (req->wValue >> 8)
 8009d42:	683b      	ldr	r3, [r7, #0]
 8009d44:	885b      	ldrh	r3, [r3, #2]
 8009d46:	0a1b      	lsrs	r3, r3, #8
 8009d48:	b29b      	uxth	r3, r3
 8009d4a:	2b07      	cmp	r3, #7
 8009d4c:	d900      	bls.n	8009d50 <USBD_GetDescriptor+0x2c>
 8009d4e:	e159      	b.n	800a004 <USBD_GetDescriptor+0x2e0>
 8009d50:	009a      	lsls	r2, r3, #2
 8009d52:	4bcb      	ldr	r3, [pc, #812]	; (800a080 <USBD_GetDescriptor+0x35c>)
 8009d54:	18d3      	adds	r3, r2, r3
 8009d56:	681b      	ldr	r3, [r3, #0]
 8009d58:	469f      	mov	pc, r3
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8009d5a:	687a      	ldr	r2, [r7, #4]
 8009d5c:	23ac      	movs	r3, #172	; 0xac
 8009d5e:	009b      	lsls	r3, r3, #2
 8009d60:	58d3      	ldr	r3, [r2, r3]
 8009d62:	681b      	ldr	r3, [r3, #0]
 8009d64:	687a      	ldr	r2, [r7, #4]
 8009d66:	7c12      	ldrb	r2, [r2, #16]
 8009d68:	2108      	movs	r1, #8
 8009d6a:	1879      	adds	r1, r7, r1
 8009d6c:	0010      	movs	r0, r2
 8009d6e:	4798      	blx	r3
 8009d70:	0003      	movs	r3, r0
 8009d72:	60fb      	str	r3, [r7, #12]
      break;
 8009d74:	e153      	b.n	800a01e <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	7c1b      	ldrb	r3, [r3, #16]
 8009d7a:	2b00      	cmp	r3, #0
 8009d7c:	d10f      	bne.n	8009d9e <USBD_GetDescriptor+0x7a>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8009d7e:	687a      	ldr	r2, [r7, #4]
 8009d80:	23ad      	movs	r3, #173	; 0xad
 8009d82:	009b      	lsls	r3, r3, #2
 8009d84:	58d3      	ldr	r3, [r2, r3]
 8009d86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009d88:	2208      	movs	r2, #8
 8009d8a:	18ba      	adds	r2, r7, r2
 8009d8c:	0010      	movs	r0, r2
 8009d8e:	4798      	blx	r3
 8009d90:	0003      	movs	r3, r0
 8009d92:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009d94:	68fb      	ldr	r3, [r7, #12]
 8009d96:	3301      	adds	r3, #1
 8009d98:	2202      	movs	r2, #2
 8009d9a:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8009d9c:	e13f      	b.n	800a01e <USBD_GetDescriptor+0x2fa>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8009d9e:	687a      	ldr	r2, [r7, #4]
 8009da0:	23ad      	movs	r3, #173	; 0xad
 8009da2:	009b      	lsls	r3, r3, #2
 8009da4:	58d3      	ldr	r3, [r2, r3]
 8009da6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009da8:	2208      	movs	r2, #8
 8009daa:	18ba      	adds	r2, r7, r2
 8009dac:	0010      	movs	r0, r2
 8009dae:	4798      	blx	r3
 8009db0:	0003      	movs	r3, r0
 8009db2:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009db4:	68fb      	ldr	r3, [r7, #12]
 8009db6:	3301      	adds	r3, #1
 8009db8:	2202      	movs	r2, #2
 8009dba:	701a      	strb	r2, [r3, #0]
      break;
 8009dbc:	e12f      	b.n	800a01e <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8009dbe:	683b      	ldr	r3, [r7, #0]
 8009dc0:	885b      	ldrh	r3, [r3, #2]
 8009dc2:	b2db      	uxtb	r3, r3
 8009dc4:	2b05      	cmp	r3, #5
 8009dc6:	d900      	bls.n	8009dca <USBD_GetDescriptor+0xa6>
 8009dc8:	e0d0      	b.n	8009f6c <USBD_GetDescriptor+0x248>
 8009dca:	009a      	lsls	r2, r3, #2
 8009dcc:	4bad      	ldr	r3, [pc, #692]	; (800a084 <USBD_GetDescriptor+0x360>)
 8009dce:	18d3      	adds	r3, r2, r3
 8009dd0:	681b      	ldr	r3, [r3, #0]
 8009dd2:	469f      	mov	pc, r3
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8009dd4:	687a      	ldr	r2, [r7, #4]
 8009dd6:	23ac      	movs	r3, #172	; 0xac
 8009dd8:	009b      	lsls	r3, r3, #2
 8009dda:	58d3      	ldr	r3, [r2, r3]
 8009ddc:	685b      	ldr	r3, [r3, #4]
 8009dde:	2b00      	cmp	r3, #0
 8009de0:	d00d      	beq.n	8009dfe <USBD_GetDescriptor+0xda>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8009de2:	687a      	ldr	r2, [r7, #4]
 8009de4:	23ac      	movs	r3, #172	; 0xac
 8009de6:	009b      	lsls	r3, r3, #2
 8009de8:	58d3      	ldr	r3, [r2, r3]
 8009dea:	685b      	ldr	r3, [r3, #4]
 8009dec:	687a      	ldr	r2, [r7, #4]
 8009dee:	7c12      	ldrb	r2, [r2, #16]
 8009df0:	2108      	movs	r1, #8
 8009df2:	1879      	adds	r1, r7, r1
 8009df4:	0010      	movs	r0, r2
 8009df6:	4798      	blx	r3
 8009df8:	0003      	movs	r3, r0
 8009dfa:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009dfc:	e0c3      	b.n	8009f86 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 8009dfe:	683a      	ldr	r2, [r7, #0]
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	0011      	movs	r1, r2
 8009e04:	0018      	movs	r0, r3
 8009e06:	f000 fb23 	bl	800a450 <USBD_CtlError>
            err++;
 8009e0a:	210b      	movs	r1, #11
 8009e0c:	187b      	adds	r3, r7, r1
 8009e0e:	781a      	ldrb	r2, [r3, #0]
 8009e10:	187b      	adds	r3, r7, r1
 8009e12:	3201      	adds	r2, #1
 8009e14:	701a      	strb	r2, [r3, #0]
          break;
 8009e16:	e0b6      	b.n	8009f86 <USBD_GetDescriptor+0x262>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8009e18:	687a      	ldr	r2, [r7, #4]
 8009e1a:	23ac      	movs	r3, #172	; 0xac
 8009e1c:	009b      	lsls	r3, r3, #2
 8009e1e:	58d3      	ldr	r3, [r2, r3]
 8009e20:	689b      	ldr	r3, [r3, #8]
 8009e22:	2b00      	cmp	r3, #0
 8009e24:	d00d      	beq.n	8009e42 <USBD_GetDescriptor+0x11e>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8009e26:	687a      	ldr	r2, [r7, #4]
 8009e28:	23ac      	movs	r3, #172	; 0xac
 8009e2a:	009b      	lsls	r3, r3, #2
 8009e2c:	58d3      	ldr	r3, [r2, r3]
 8009e2e:	689b      	ldr	r3, [r3, #8]
 8009e30:	687a      	ldr	r2, [r7, #4]
 8009e32:	7c12      	ldrb	r2, [r2, #16]
 8009e34:	2108      	movs	r1, #8
 8009e36:	1879      	adds	r1, r7, r1
 8009e38:	0010      	movs	r0, r2
 8009e3a:	4798      	blx	r3
 8009e3c:	0003      	movs	r3, r0
 8009e3e:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009e40:	e0a1      	b.n	8009f86 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 8009e42:	683a      	ldr	r2, [r7, #0]
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	0011      	movs	r1, r2
 8009e48:	0018      	movs	r0, r3
 8009e4a:	f000 fb01 	bl	800a450 <USBD_CtlError>
            err++;
 8009e4e:	210b      	movs	r1, #11
 8009e50:	187b      	adds	r3, r7, r1
 8009e52:	781a      	ldrb	r2, [r3, #0]
 8009e54:	187b      	adds	r3, r7, r1
 8009e56:	3201      	adds	r2, #1
 8009e58:	701a      	strb	r2, [r3, #0]
          break;
 8009e5a:	e094      	b.n	8009f86 <USBD_GetDescriptor+0x262>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8009e5c:	687a      	ldr	r2, [r7, #4]
 8009e5e:	23ac      	movs	r3, #172	; 0xac
 8009e60:	009b      	lsls	r3, r3, #2
 8009e62:	58d3      	ldr	r3, [r2, r3]
 8009e64:	68db      	ldr	r3, [r3, #12]
 8009e66:	2b00      	cmp	r3, #0
 8009e68:	d00d      	beq.n	8009e86 <USBD_GetDescriptor+0x162>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8009e6a:	687a      	ldr	r2, [r7, #4]
 8009e6c:	23ac      	movs	r3, #172	; 0xac
 8009e6e:	009b      	lsls	r3, r3, #2
 8009e70:	58d3      	ldr	r3, [r2, r3]
 8009e72:	68db      	ldr	r3, [r3, #12]
 8009e74:	687a      	ldr	r2, [r7, #4]
 8009e76:	7c12      	ldrb	r2, [r2, #16]
 8009e78:	2108      	movs	r1, #8
 8009e7a:	1879      	adds	r1, r7, r1
 8009e7c:	0010      	movs	r0, r2
 8009e7e:	4798      	blx	r3
 8009e80:	0003      	movs	r3, r0
 8009e82:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009e84:	e07f      	b.n	8009f86 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 8009e86:	683a      	ldr	r2, [r7, #0]
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	0011      	movs	r1, r2
 8009e8c:	0018      	movs	r0, r3
 8009e8e:	f000 fadf 	bl	800a450 <USBD_CtlError>
            err++;
 8009e92:	210b      	movs	r1, #11
 8009e94:	187b      	adds	r3, r7, r1
 8009e96:	781a      	ldrb	r2, [r3, #0]
 8009e98:	187b      	adds	r3, r7, r1
 8009e9a:	3201      	adds	r2, #1
 8009e9c:	701a      	strb	r2, [r3, #0]
          break;
 8009e9e:	e072      	b.n	8009f86 <USBD_GetDescriptor+0x262>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8009ea0:	687a      	ldr	r2, [r7, #4]
 8009ea2:	23ac      	movs	r3, #172	; 0xac
 8009ea4:	009b      	lsls	r3, r3, #2
 8009ea6:	58d3      	ldr	r3, [r2, r3]
 8009ea8:	691b      	ldr	r3, [r3, #16]
 8009eaa:	2b00      	cmp	r3, #0
 8009eac:	d00d      	beq.n	8009eca <USBD_GetDescriptor+0x1a6>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8009eae:	687a      	ldr	r2, [r7, #4]
 8009eb0:	23ac      	movs	r3, #172	; 0xac
 8009eb2:	009b      	lsls	r3, r3, #2
 8009eb4:	58d3      	ldr	r3, [r2, r3]
 8009eb6:	691b      	ldr	r3, [r3, #16]
 8009eb8:	687a      	ldr	r2, [r7, #4]
 8009eba:	7c12      	ldrb	r2, [r2, #16]
 8009ebc:	2108      	movs	r1, #8
 8009ebe:	1879      	adds	r1, r7, r1
 8009ec0:	0010      	movs	r0, r2
 8009ec2:	4798      	blx	r3
 8009ec4:	0003      	movs	r3, r0
 8009ec6:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009ec8:	e05d      	b.n	8009f86 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 8009eca:	683a      	ldr	r2, [r7, #0]
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	0011      	movs	r1, r2
 8009ed0:	0018      	movs	r0, r3
 8009ed2:	f000 fabd 	bl	800a450 <USBD_CtlError>
            err++;
 8009ed6:	210b      	movs	r1, #11
 8009ed8:	187b      	adds	r3, r7, r1
 8009eda:	781a      	ldrb	r2, [r3, #0]
 8009edc:	187b      	adds	r3, r7, r1
 8009ede:	3201      	adds	r2, #1
 8009ee0:	701a      	strb	r2, [r3, #0]
          break;
 8009ee2:	e050      	b.n	8009f86 <USBD_GetDescriptor+0x262>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8009ee4:	687a      	ldr	r2, [r7, #4]
 8009ee6:	23ac      	movs	r3, #172	; 0xac
 8009ee8:	009b      	lsls	r3, r3, #2
 8009eea:	58d3      	ldr	r3, [r2, r3]
 8009eec:	695b      	ldr	r3, [r3, #20]
 8009eee:	2b00      	cmp	r3, #0
 8009ef0:	d00d      	beq.n	8009f0e <USBD_GetDescriptor+0x1ea>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8009ef2:	687a      	ldr	r2, [r7, #4]
 8009ef4:	23ac      	movs	r3, #172	; 0xac
 8009ef6:	009b      	lsls	r3, r3, #2
 8009ef8:	58d3      	ldr	r3, [r2, r3]
 8009efa:	695b      	ldr	r3, [r3, #20]
 8009efc:	687a      	ldr	r2, [r7, #4]
 8009efe:	7c12      	ldrb	r2, [r2, #16]
 8009f00:	2108      	movs	r1, #8
 8009f02:	1879      	adds	r1, r7, r1
 8009f04:	0010      	movs	r0, r2
 8009f06:	4798      	blx	r3
 8009f08:	0003      	movs	r3, r0
 8009f0a:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009f0c:	e03b      	b.n	8009f86 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 8009f0e:	683a      	ldr	r2, [r7, #0]
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	0011      	movs	r1, r2
 8009f14:	0018      	movs	r0, r3
 8009f16:	f000 fa9b 	bl	800a450 <USBD_CtlError>
            err++;
 8009f1a:	210b      	movs	r1, #11
 8009f1c:	187b      	adds	r3, r7, r1
 8009f1e:	781a      	ldrb	r2, [r3, #0]
 8009f20:	187b      	adds	r3, r7, r1
 8009f22:	3201      	adds	r2, #1
 8009f24:	701a      	strb	r2, [r3, #0]
          break;
 8009f26:	e02e      	b.n	8009f86 <USBD_GetDescriptor+0x262>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8009f28:	687a      	ldr	r2, [r7, #4]
 8009f2a:	23ac      	movs	r3, #172	; 0xac
 8009f2c:	009b      	lsls	r3, r3, #2
 8009f2e:	58d3      	ldr	r3, [r2, r3]
 8009f30:	699b      	ldr	r3, [r3, #24]
 8009f32:	2b00      	cmp	r3, #0
 8009f34:	d00d      	beq.n	8009f52 <USBD_GetDescriptor+0x22e>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8009f36:	687a      	ldr	r2, [r7, #4]
 8009f38:	23ac      	movs	r3, #172	; 0xac
 8009f3a:	009b      	lsls	r3, r3, #2
 8009f3c:	58d3      	ldr	r3, [r2, r3]
 8009f3e:	699b      	ldr	r3, [r3, #24]
 8009f40:	687a      	ldr	r2, [r7, #4]
 8009f42:	7c12      	ldrb	r2, [r2, #16]
 8009f44:	2108      	movs	r1, #8
 8009f46:	1879      	adds	r1, r7, r1
 8009f48:	0010      	movs	r0, r2
 8009f4a:	4798      	blx	r3
 8009f4c:	0003      	movs	r3, r0
 8009f4e:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009f50:	e019      	b.n	8009f86 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 8009f52:	683a      	ldr	r2, [r7, #0]
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	0011      	movs	r1, r2
 8009f58:	0018      	movs	r0, r3
 8009f5a:	f000 fa79 	bl	800a450 <USBD_CtlError>
            err++;
 8009f5e:	210b      	movs	r1, #11
 8009f60:	187b      	adds	r3, r7, r1
 8009f62:	781a      	ldrb	r2, [r3, #0]
 8009f64:	187b      	adds	r3, r7, r1
 8009f66:	3201      	adds	r2, #1
 8009f68:	701a      	strb	r2, [r3, #0]
          break;
 8009f6a:	e00c      	b.n	8009f86 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8009f6c:	683a      	ldr	r2, [r7, #0]
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	0011      	movs	r1, r2
 8009f72:	0018      	movs	r0, r3
 8009f74:	f000 fa6c 	bl	800a450 <USBD_CtlError>
          err++;
 8009f78:	210b      	movs	r1, #11
 8009f7a:	187b      	adds	r3, r7, r1
 8009f7c:	781a      	ldrb	r2, [r3, #0]
 8009f7e:	187b      	adds	r3, r7, r1
 8009f80:	3201      	adds	r2, #1
 8009f82:	701a      	strb	r2, [r3, #0]
#endif
      }
      break;
 8009f84:	e04b      	b.n	800a01e <USBD_GetDescriptor+0x2fa>
 8009f86:	e04a      	b.n	800a01e <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	7c1b      	ldrb	r3, [r3, #16]
 8009f8c:	2b00      	cmp	r3, #0
 8009f8e:	d10b      	bne.n	8009fa8 <USBD_GetDescriptor+0x284>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8009f90:	687a      	ldr	r2, [r7, #4]
 8009f92:	23ad      	movs	r3, #173	; 0xad
 8009f94:	009b      	lsls	r3, r3, #2
 8009f96:	58d3      	ldr	r3, [r2, r3]
 8009f98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009f9a:	2208      	movs	r2, #8
 8009f9c:	18ba      	adds	r2, r7, r2
 8009f9e:	0010      	movs	r0, r2
 8009fa0:	4798      	blx	r3
 8009fa2:	0003      	movs	r3, r0
 8009fa4:	60fb      	str	r3, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009fa6:	e03a      	b.n	800a01e <USBD_GetDescriptor+0x2fa>
        USBD_CtlError(pdev, req);
 8009fa8:	683a      	ldr	r2, [r7, #0]
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	0011      	movs	r1, r2
 8009fae:	0018      	movs	r0, r3
 8009fb0:	f000 fa4e 	bl	800a450 <USBD_CtlError>
        err++;
 8009fb4:	210b      	movs	r1, #11
 8009fb6:	187b      	adds	r3, r7, r1
 8009fb8:	781a      	ldrb	r2, [r3, #0]
 8009fba:	187b      	adds	r3, r7, r1
 8009fbc:	3201      	adds	r2, #1
 8009fbe:	701a      	strb	r2, [r3, #0]
      break;
 8009fc0:	e02d      	b.n	800a01e <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	7c1b      	ldrb	r3, [r3, #16]
 8009fc6:	2b00      	cmp	r3, #0
 8009fc8:	d10f      	bne.n	8009fea <USBD_GetDescriptor+0x2c6>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8009fca:	687a      	ldr	r2, [r7, #4]
 8009fcc:	23ad      	movs	r3, #173	; 0xad
 8009fce:	009b      	lsls	r3, r3, #2
 8009fd0:	58d3      	ldr	r3, [r2, r3]
 8009fd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009fd4:	2208      	movs	r2, #8
 8009fd6:	18ba      	adds	r2, r7, r2
 8009fd8:	0010      	movs	r0, r2
 8009fda:	4798      	blx	r3
 8009fdc:	0003      	movs	r3, r0
 8009fde:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8009fe0:	68fb      	ldr	r3, [r7, #12]
 8009fe2:	3301      	adds	r3, #1
 8009fe4:	2207      	movs	r2, #7
 8009fe6:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009fe8:	e019      	b.n	800a01e <USBD_GetDescriptor+0x2fa>
        USBD_CtlError(pdev, req);
 8009fea:	683a      	ldr	r2, [r7, #0]
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	0011      	movs	r1, r2
 8009ff0:	0018      	movs	r0, r3
 8009ff2:	f000 fa2d 	bl	800a450 <USBD_CtlError>
        err++;
 8009ff6:	210b      	movs	r1, #11
 8009ff8:	187b      	adds	r3, r7, r1
 8009ffa:	781a      	ldrb	r2, [r3, #0]
 8009ffc:	187b      	adds	r3, r7, r1
 8009ffe:	3201      	adds	r2, #1
 800a000:	701a      	strb	r2, [r3, #0]
      break;
 800a002:	e00c      	b.n	800a01e <USBD_GetDescriptor+0x2fa>

    default:
      USBD_CtlError(pdev, req);
 800a004:	683a      	ldr	r2, [r7, #0]
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	0011      	movs	r1, r2
 800a00a:	0018      	movs	r0, r3
 800a00c:	f000 fa20 	bl	800a450 <USBD_CtlError>
      err++;
 800a010:	210b      	movs	r1, #11
 800a012:	187b      	adds	r3, r7, r1
 800a014:	781a      	ldrb	r2, [r3, #0]
 800a016:	187b      	adds	r3, r7, r1
 800a018:	3201      	adds	r2, #1
 800a01a:	701a      	strb	r2, [r3, #0]
      break;
 800a01c:	46c0      	nop			; (mov r8, r8)
  }

  if (err != 0U)
 800a01e:	230b      	movs	r3, #11
 800a020:	18fb      	adds	r3, r7, r3
 800a022:	781b      	ldrb	r3, [r3, #0]
 800a024:	2b00      	cmp	r3, #0
 800a026:	d127      	bne.n	800a078 <USBD_GetDescriptor+0x354>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 800a028:	2108      	movs	r1, #8
 800a02a:	187b      	adds	r3, r7, r1
 800a02c:	881b      	ldrh	r3, [r3, #0]
 800a02e:	2b00      	cmp	r3, #0
 800a030:	d019      	beq.n	800a066 <USBD_GetDescriptor+0x342>
 800a032:	683b      	ldr	r3, [r7, #0]
 800a034:	88db      	ldrh	r3, [r3, #6]
 800a036:	2b00      	cmp	r3, #0
 800a038:	d015      	beq.n	800a066 <USBD_GetDescriptor+0x342>
    {
      len = MIN(len, req->wLength);
 800a03a:	683b      	ldr	r3, [r7, #0]
 800a03c:	88da      	ldrh	r2, [r3, #6]
 800a03e:	187b      	adds	r3, r7, r1
 800a040:	881b      	ldrh	r3, [r3, #0]
 800a042:	1c18      	adds	r0, r3, #0
 800a044:	1c11      	adds	r1, r2, #0
 800a046:	b28a      	uxth	r2, r1
 800a048:	b283      	uxth	r3, r0
 800a04a:	429a      	cmp	r2, r3
 800a04c:	d900      	bls.n	800a050 <USBD_GetDescriptor+0x32c>
 800a04e:	1c01      	adds	r1, r0, #0
 800a050:	b28a      	uxth	r2, r1
 800a052:	2108      	movs	r1, #8
 800a054:	187b      	adds	r3, r7, r1
 800a056:	801a      	strh	r2, [r3, #0]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800a058:	187b      	adds	r3, r7, r1
 800a05a:	881a      	ldrh	r2, [r3, #0]
 800a05c:	68f9      	ldr	r1, [r7, #12]
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	0018      	movs	r0, r3
 800a062:	f000 fa73 	bl	800a54c <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 800a066:	683b      	ldr	r3, [r7, #0]
 800a068:	88db      	ldrh	r3, [r3, #6]
 800a06a:	2b00      	cmp	r3, #0
 800a06c:	d105      	bne.n	800a07a <USBD_GetDescriptor+0x356>
    {
      (void)USBD_CtlSendStatus(pdev);
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	0018      	movs	r0, r3
 800a072:	f000 fad5 	bl	800a620 <USBD_CtlSendStatus>
 800a076:	e000      	b.n	800a07a <USBD_GetDescriptor+0x356>
    return;
 800a078:	46c0      	nop			; (mov r8, r8)
    }
  }
}
 800a07a:	46bd      	mov	sp, r7
 800a07c:	b004      	add	sp, #16
 800a07e:	bd80      	pop	{r7, pc}
 800a080:	0800bb48 	.word	0x0800bb48
 800a084:	0800bb68 	.word	0x0800bb68

0800a088 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800a088:	b590      	push	{r4, r7, lr}
 800a08a:	b085      	sub	sp, #20
 800a08c:	af00      	add	r7, sp, #0
 800a08e:	6078      	str	r0, [r7, #4]
 800a090:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800a092:	683b      	ldr	r3, [r7, #0]
 800a094:	889b      	ldrh	r3, [r3, #4]
 800a096:	2b00      	cmp	r3, #0
 800a098:	d13d      	bne.n	800a116 <USBD_SetAddress+0x8e>
 800a09a:	683b      	ldr	r3, [r7, #0]
 800a09c:	88db      	ldrh	r3, [r3, #6]
 800a09e:	2b00      	cmp	r3, #0
 800a0a0:	d139      	bne.n	800a116 <USBD_SetAddress+0x8e>
 800a0a2:	683b      	ldr	r3, [r7, #0]
 800a0a4:	885b      	ldrh	r3, [r3, #2]
 800a0a6:	2b7f      	cmp	r3, #127	; 0x7f
 800a0a8:	d835      	bhi.n	800a116 <USBD_SetAddress+0x8e>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800a0aa:	683b      	ldr	r3, [r7, #0]
 800a0ac:	885b      	ldrh	r3, [r3, #2]
 800a0ae:	b2da      	uxtb	r2, r3
 800a0b0:	230f      	movs	r3, #15
 800a0b2:	18fb      	adds	r3, r7, r3
 800a0b4:	217f      	movs	r1, #127	; 0x7f
 800a0b6:	400a      	ands	r2, r1
 800a0b8:	701a      	strb	r2, [r3, #0]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a0ba:	687a      	ldr	r2, [r7, #4]
 800a0bc:	23a7      	movs	r3, #167	; 0xa7
 800a0be:	009b      	lsls	r3, r3, #2
 800a0c0:	5cd3      	ldrb	r3, [r2, r3]
 800a0c2:	2b03      	cmp	r3, #3
 800a0c4:	d106      	bne.n	800a0d4 <USBD_SetAddress+0x4c>
    {
      USBD_CtlError(pdev, req);
 800a0c6:	683a      	ldr	r2, [r7, #0]
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	0011      	movs	r1, r2
 800a0cc:	0018      	movs	r0, r3
 800a0ce:	f000 f9bf 	bl	800a450 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a0d2:	e027      	b.n	800a124 <USBD_SetAddress+0x9c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	240f      	movs	r4, #15
 800a0d8:	193a      	adds	r2, r7, r4
 800a0da:	4914      	ldr	r1, [pc, #80]	; (800a12c <USBD_SetAddress+0xa4>)
 800a0dc:	7812      	ldrb	r2, [r2, #0]
 800a0de:	545a      	strb	r2, [r3, r1]
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800a0e0:	193b      	adds	r3, r7, r4
 800a0e2:	781a      	ldrb	r2, [r3, #0]
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	0011      	movs	r1, r2
 800a0e8:	0018      	movs	r0, r3
 800a0ea:	f000 ff25 	bl	800af38 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	0018      	movs	r0, r3
 800a0f2:	f000 fa95 	bl	800a620 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800a0f6:	193b      	adds	r3, r7, r4
 800a0f8:	781b      	ldrb	r3, [r3, #0]
 800a0fa:	2b00      	cmp	r3, #0
 800a0fc:	d005      	beq.n	800a10a <USBD_SetAddress+0x82>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a0fe:	687a      	ldr	r2, [r7, #4]
 800a100:	23a7      	movs	r3, #167	; 0xa7
 800a102:	009b      	lsls	r3, r3, #2
 800a104:	2102      	movs	r1, #2
 800a106:	54d1      	strb	r1, [r2, r3]
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a108:	e00c      	b.n	800a124 <USBD_SetAddress+0x9c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800a10a:	687a      	ldr	r2, [r7, #4]
 800a10c:	23a7      	movs	r3, #167	; 0xa7
 800a10e:	009b      	lsls	r3, r3, #2
 800a110:	2101      	movs	r1, #1
 800a112:	54d1      	strb	r1, [r2, r3]
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a114:	e006      	b.n	800a124 <USBD_SetAddress+0x9c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800a116:	683a      	ldr	r2, [r7, #0]
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	0011      	movs	r1, r2
 800a11c:	0018      	movs	r0, r3
 800a11e:	f000 f997 	bl	800a450 <USBD_CtlError>
  }
}
 800a122:	46c0      	nop			; (mov r8, r8)
 800a124:	46c0      	nop			; (mov r8, r8)
 800a126:	46bd      	mov	sp, r7
 800a128:	b005      	add	sp, #20
 800a12a:	bd90      	pop	{r4, r7, pc}
 800a12c:	0000029e 	.word	0x0000029e

0800a130 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a130:	b580      	push	{r7, lr}
 800a132:	b082      	sub	sp, #8
 800a134:	af00      	add	r7, sp, #0
 800a136:	6078      	str	r0, [r7, #4]
 800a138:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800a13a:	683b      	ldr	r3, [r7, #0]
 800a13c:	885b      	ldrh	r3, [r3, #2]
 800a13e:	b2da      	uxtb	r2, r3
 800a140:	4b4c      	ldr	r3, [pc, #304]	; (800a274 <USBD_SetConfig+0x144>)
 800a142:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800a144:	4b4b      	ldr	r3, [pc, #300]	; (800a274 <USBD_SetConfig+0x144>)
 800a146:	781b      	ldrb	r3, [r3, #0]
 800a148:	2b01      	cmp	r3, #1
 800a14a:	d906      	bls.n	800a15a <USBD_SetConfig+0x2a>
  {
    USBD_CtlError(pdev, req);
 800a14c:	683a      	ldr	r2, [r7, #0]
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	0011      	movs	r1, r2
 800a152:	0018      	movs	r0, r3
 800a154:	f000 f97c 	bl	800a450 <USBD_CtlError>
 800a158:	e088      	b.n	800a26c <USBD_SetConfig+0x13c>
  }
  else
  {
    switch (pdev->dev_state)
 800a15a:	687a      	ldr	r2, [r7, #4]
 800a15c:	23a7      	movs	r3, #167	; 0xa7
 800a15e:	009b      	lsls	r3, r3, #2
 800a160:	5cd3      	ldrb	r3, [r2, r3]
 800a162:	2b02      	cmp	r3, #2
 800a164:	d002      	beq.n	800a16c <USBD_SetConfig+0x3c>
 800a166:	2b03      	cmp	r3, #3
 800a168:	d029      	beq.n	800a1be <USBD_SetConfig+0x8e>
 800a16a:	e071      	b.n	800a250 <USBD_SetConfig+0x120>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 800a16c:	4b41      	ldr	r3, [pc, #260]	; (800a274 <USBD_SetConfig+0x144>)
 800a16e:	781b      	ldrb	r3, [r3, #0]
 800a170:	2b00      	cmp	r3, #0
 800a172:	d01f      	beq.n	800a1b4 <USBD_SetConfig+0x84>
        {
          pdev->dev_config = cfgidx;
 800a174:	4b3f      	ldr	r3, [pc, #252]	; (800a274 <USBD_SetConfig+0x144>)
 800a176:	781b      	ldrb	r3, [r3, #0]
 800a178:	001a      	movs	r2, r3
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800a17e:	687a      	ldr	r2, [r7, #4]
 800a180:	23a7      	movs	r3, #167	; 0xa7
 800a182:	009b      	lsls	r3, r3, #2
 800a184:	2103      	movs	r1, #3
 800a186:	54d1      	strb	r1, [r2, r3]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800a188:	4b3a      	ldr	r3, [pc, #232]	; (800a274 <USBD_SetConfig+0x144>)
 800a18a:	781a      	ldrb	r2, [r3, #0]
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	0011      	movs	r1, r2
 800a190:	0018      	movs	r0, r3
 800a192:	f7ff f8c6 	bl	8009322 <USBD_SetClassConfig>
 800a196:	0003      	movs	r3, r0
 800a198:	2b02      	cmp	r3, #2
 800a19a:	d106      	bne.n	800a1aa <USBD_SetConfig+0x7a>
          {
            USBD_CtlError(pdev, req);
 800a19c:	683a      	ldr	r2, [r7, #0]
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	0011      	movs	r1, r2
 800a1a2:	0018      	movs	r0, r3
 800a1a4:	f000 f954 	bl	800a450 <USBD_CtlError>
            return;
 800a1a8:	e060      	b.n	800a26c <USBD_SetConfig+0x13c>
          }
          USBD_CtlSendStatus(pdev);
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	0018      	movs	r0, r3
 800a1ae:	f000 fa37 	bl	800a620 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800a1b2:	e05b      	b.n	800a26c <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	0018      	movs	r0, r3
 800a1b8:	f000 fa32 	bl	800a620 <USBD_CtlSendStatus>
        break;
 800a1bc:	e056      	b.n	800a26c <USBD_SetConfig+0x13c>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 800a1be:	4b2d      	ldr	r3, [pc, #180]	; (800a274 <USBD_SetConfig+0x144>)
 800a1c0:	781b      	ldrb	r3, [r3, #0]
 800a1c2:	2b00      	cmp	r3, #0
 800a1c4:	d115      	bne.n	800a1f2 <USBD_SetConfig+0xc2>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800a1c6:	687a      	ldr	r2, [r7, #4]
 800a1c8:	23a7      	movs	r3, #167	; 0xa7
 800a1ca:	009b      	lsls	r3, r3, #2
 800a1cc:	2102      	movs	r1, #2
 800a1ce:	54d1      	strb	r1, [r2, r3]
          pdev->dev_config = cfgidx;
 800a1d0:	4b28      	ldr	r3, [pc, #160]	; (800a274 <USBD_SetConfig+0x144>)
 800a1d2:	781b      	ldrb	r3, [r3, #0]
 800a1d4:	001a      	movs	r2, r3
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 800a1da:	4b26      	ldr	r3, [pc, #152]	; (800a274 <USBD_SetConfig+0x144>)
 800a1dc:	781a      	ldrb	r2, [r3, #0]
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	0011      	movs	r1, r2
 800a1e2:	0018      	movs	r0, r3
 800a1e4:	f7ff f8c4 	bl	8009370 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	0018      	movs	r0, r3
 800a1ec:	f000 fa18 	bl	800a620 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800a1f0:	e03c      	b.n	800a26c <USBD_SetConfig+0x13c>
        else if (cfgidx != pdev->dev_config)
 800a1f2:	4b20      	ldr	r3, [pc, #128]	; (800a274 <USBD_SetConfig+0x144>)
 800a1f4:	781b      	ldrb	r3, [r3, #0]
 800a1f6:	001a      	movs	r2, r3
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	685b      	ldr	r3, [r3, #4]
 800a1fc:	429a      	cmp	r2, r3
 800a1fe:	d022      	beq.n	800a246 <USBD_SetConfig+0x116>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	685b      	ldr	r3, [r3, #4]
 800a204:	b2da      	uxtb	r2, r3
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	0011      	movs	r1, r2
 800a20a:	0018      	movs	r0, r3
 800a20c:	f7ff f8b0 	bl	8009370 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800a210:	4b18      	ldr	r3, [pc, #96]	; (800a274 <USBD_SetConfig+0x144>)
 800a212:	781b      	ldrb	r3, [r3, #0]
 800a214:	001a      	movs	r2, r3
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800a21a:	4b16      	ldr	r3, [pc, #88]	; (800a274 <USBD_SetConfig+0x144>)
 800a21c:	781a      	ldrb	r2, [r3, #0]
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	0011      	movs	r1, r2
 800a222:	0018      	movs	r0, r3
 800a224:	f7ff f87d 	bl	8009322 <USBD_SetClassConfig>
 800a228:	0003      	movs	r3, r0
 800a22a:	2b02      	cmp	r3, #2
 800a22c:	d106      	bne.n	800a23c <USBD_SetConfig+0x10c>
            USBD_CtlError(pdev, req);
 800a22e:	683a      	ldr	r2, [r7, #0]
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	0011      	movs	r1, r2
 800a234:	0018      	movs	r0, r3
 800a236:	f000 f90b 	bl	800a450 <USBD_CtlError>
            return;
 800a23a:	e017      	b.n	800a26c <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	0018      	movs	r0, r3
 800a240:	f000 f9ee 	bl	800a620 <USBD_CtlSendStatus>
        break;
 800a244:	e012      	b.n	800a26c <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	0018      	movs	r0, r3
 800a24a:	f000 f9e9 	bl	800a620 <USBD_CtlSendStatus>
        break;
 800a24e:	e00d      	b.n	800a26c <USBD_SetConfig+0x13c>

      default:
        USBD_CtlError(pdev, req);
 800a250:	683a      	ldr	r2, [r7, #0]
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	0011      	movs	r1, r2
 800a256:	0018      	movs	r0, r3
 800a258:	f000 f8fa 	bl	800a450 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 800a25c:	4b05      	ldr	r3, [pc, #20]	; (800a274 <USBD_SetConfig+0x144>)
 800a25e:	781a      	ldrb	r2, [r3, #0]
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	0011      	movs	r1, r2
 800a264:	0018      	movs	r0, r3
 800a266:	f7ff f883 	bl	8009370 <USBD_ClrClassConfig>
        break;
 800a26a:	46c0      	nop			; (mov r8, r8)
    }
  }
}
 800a26c:	46bd      	mov	sp, r7
 800a26e:	b002      	add	sp, #8
 800a270:	bd80      	pop	{r7, pc}
 800a272:	46c0      	nop			; (mov r8, r8)
 800a274:	20000218 	.word	0x20000218

0800a278 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a278:	b580      	push	{r7, lr}
 800a27a:	b082      	sub	sp, #8
 800a27c:	af00      	add	r7, sp, #0
 800a27e:	6078      	str	r0, [r7, #4]
 800a280:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800a282:	683b      	ldr	r3, [r7, #0]
 800a284:	88db      	ldrh	r3, [r3, #6]
 800a286:	2b01      	cmp	r3, #1
 800a288:	d006      	beq.n	800a298 <USBD_GetConfig+0x20>
  {
    USBD_CtlError(pdev, req);
 800a28a:	683a      	ldr	r2, [r7, #0]
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	0011      	movs	r1, r2
 800a290:	0018      	movs	r0, r3
 800a292:	f000 f8dd 	bl	800a450 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800a296:	e026      	b.n	800a2e6 <USBD_GetConfig+0x6e>
    switch (pdev->dev_state)
 800a298:	687a      	ldr	r2, [r7, #4]
 800a29a:	23a7      	movs	r3, #167	; 0xa7
 800a29c:	009b      	lsls	r3, r3, #2
 800a29e:	5cd3      	ldrb	r3, [r2, r3]
 800a2a0:	2b02      	cmp	r3, #2
 800a2a2:	dc02      	bgt.n	800a2aa <USBD_GetConfig+0x32>
 800a2a4:	2b00      	cmp	r3, #0
 800a2a6:	dc03      	bgt.n	800a2b0 <USBD_GetConfig+0x38>
 800a2a8:	e016      	b.n	800a2d8 <USBD_GetConfig+0x60>
 800a2aa:	2b03      	cmp	r3, #3
 800a2ac:	d00c      	beq.n	800a2c8 <USBD_GetConfig+0x50>
 800a2ae:	e013      	b.n	800a2d8 <USBD_GetConfig+0x60>
        pdev->dev_default_config = 0U;
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	2200      	movs	r2, #0
 800a2b4:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	3308      	adds	r3, #8
 800a2ba:	0019      	movs	r1, r3
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	2201      	movs	r2, #1
 800a2c0:	0018      	movs	r0, r3
 800a2c2:	f000 f943 	bl	800a54c <USBD_CtlSendData>
        break;
 800a2c6:	e00e      	b.n	800a2e6 <USBD_GetConfig+0x6e>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	1d19      	adds	r1, r3, #4
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	2201      	movs	r2, #1
 800a2d0:	0018      	movs	r0, r3
 800a2d2:	f000 f93b 	bl	800a54c <USBD_CtlSendData>
        break;
 800a2d6:	e006      	b.n	800a2e6 <USBD_GetConfig+0x6e>
        USBD_CtlError(pdev, req);
 800a2d8:	683a      	ldr	r2, [r7, #0]
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	0011      	movs	r1, r2
 800a2de:	0018      	movs	r0, r3
 800a2e0:	f000 f8b6 	bl	800a450 <USBD_CtlError>
        break;
 800a2e4:	46c0      	nop			; (mov r8, r8)
}
 800a2e6:	46c0      	nop			; (mov r8, r8)
 800a2e8:	46bd      	mov	sp, r7
 800a2ea:	b002      	add	sp, #8
 800a2ec:	bd80      	pop	{r7, pc}

0800a2ee <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a2ee:	b580      	push	{r7, lr}
 800a2f0:	b082      	sub	sp, #8
 800a2f2:	af00      	add	r7, sp, #0
 800a2f4:	6078      	str	r0, [r7, #4]
 800a2f6:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a2f8:	687a      	ldr	r2, [r7, #4]
 800a2fa:	23a7      	movs	r3, #167	; 0xa7
 800a2fc:	009b      	lsls	r3, r3, #2
 800a2fe:	5cd3      	ldrb	r3, [r2, r3]
 800a300:	3b01      	subs	r3, #1
 800a302:	2b02      	cmp	r3, #2
 800a304:	d822      	bhi.n	800a34c <USBD_GetStatus+0x5e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800a306:	683b      	ldr	r3, [r7, #0]
 800a308:	88db      	ldrh	r3, [r3, #6]
 800a30a:	2b02      	cmp	r3, #2
 800a30c:	d006      	beq.n	800a31c <USBD_GetStatus+0x2e>
      {
        USBD_CtlError(pdev, req);
 800a30e:	683a      	ldr	r2, [r7, #0]
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	0011      	movs	r1, r2
 800a314:	0018      	movs	r0, r3
 800a316:	f000 f89b 	bl	800a450 <USBD_CtlError>
        break;
 800a31a:	e01e      	b.n	800a35a <USBD_GetStatus+0x6c>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	2201      	movs	r2, #1
 800a320:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 800a322:	687a      	ldr	r2, [r7, #4]
 800a324:	23a9      	movs	r3, #169	; 0xa9
 800a326:	009b      	lsls	r3, r3, #2
 800a328:	58d3      	ldr	r3, [r2, r3]
 800a32a:	2b00      	cmp	r3, #0
 800a32c:	d005      	beq.n	800a33a <USBD_GetStatus+0x4c>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	68db      	ldr	r3, [r3, #12]
 800a332:	2202      	movs	r2, #2
 800a334:	431a      	orrs	r2, r3
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	330c      	adds	r3, #12
 800a33e:	0019      	movs	r1, r3
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	2202      	movs	r2, #2
 800a344:	0018      	movs	r0, r3
 800a346:	f000 f901 	bl	800a54c <USBD_CtlSendData>
      break;
 800a34a:	e006      	b.n	800a35a <USBD_GetStatus+0x6c>

    default:
      USBD_CtlError(pdev, req);
 800a34c:	683a      	ldr	r2, [r7, #0]
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	0011      	movs	r1, r2
 800a352:	0018      	movs	r0, r3
 800a354:	f000 f87c 	bl	800a450 <USBD_CtlError>
      break;
 800a358:	46c0      	nop			; (mov r8, r8)
  }
}
 800a35a:	46c0      	nop			; (mov r8, r8)
 800a35c:	46bd      	mov	sp, r7
 800a35e:	b002      	add	sp, #8
 800a360:	bd80      	pop	{r7, pc}

0800a362 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800a362:	b580      	push	{r7, lr}
 800a364:	b082      	sub	sp, #8
 800a366:	af00      	add	r7, sp, #0
 800a368:	6078      	str	r0, [r7, #4]
 800a36a:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a36c:	683b      	ldr	r3, [r7, #0]
 800a36e:	885b      	ldrh	r3, [r3, #2]
 800a370:	2b01      	cmp	r3, #1
 800a372:	d108      	bne.n	800a386 <USBD_SetFeature+0x24>
  {
    pdev->dev_remote_wakeup = 1U;
 800a374:	687a      	ldr	r2, [r7, #4]
 800a376:	23a9      	movs	r3, #169	; 0xa9
 800a378:	009b      	lsls	r3, r3, #2
 800a37a:	2101      	movs	r1, #1
 800a37c:	50d1      	str	r1, [r2, r3]
    USBD_CtlSendStatus(pdev);
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	0018      	movs	r0, r3
 800a382:	f000 f94d 	bl	800a620 <USBD_CtlSendStatus>
  }
}
 800a386:	46c0      	nop			; (mov r8, r8)
 800a388:	46bd      	mov	sp, r7
 800a38a:	b002      	add	sp, #8
 800a38c:	bd80      	pop	{r7, pc}

0800a38e <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800a38e:	b580      	push	{r7, lr}
 800a390:	b082      	sub	sp, #8
 800a392:	af00      	add	r7, sp, #0
 800a394:	6078      	str	r0, [r7, #4]
 800a396:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a398:	687a      	ldr	r2, [r7, #4]
 800a39a:	23a7      	movs	r3, #167	; 0xa7
 800a39c:	009b      	lsls	r3, r3, #2
 800a39e:	5cd3      	ldrb	r3, [r2, r3]
 800a3a0:	3b01      	subs	r3, #1
 800a3a2:	2b02      	cmp	r3, #2
 800a3a4:	d80d      	bhi.n	800a3c2 <USBD_ClrFeature+0x34>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a3a6:	683b      	ldr	r3, [r7, #0]
 800a3a8:	885b      	ldrh	r3, [r3, #2]
 800a3aa:	2b01      	cmp	r3, #1
 800a3ac:	d110      	bne.n	800a3d0 <USBD_ClrFeature+0x42>
      {
        pdev->dev_remote_wakeup = 0U;
 800a3ae:	687a      	ldr	r2, [r7, #4]
 800a3b0:	23a9      	movs	r3, #169	; 0xa9
 800a3b2:	009b      	lsls	r3, r3, #2
 800a3b4:	2100      	movs	r1, #0
 800a3b6:	50d1      	str	r1, [r2, r3]
        USBD_CtlSendStatus(pdev);
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	0018      	movs	r0, r3
 800a3bc:	f000 f930 	bl	800a620 <USBD_CtlSendStatus>
      }
      break;
 800a3c0:	e006      	b.n	800a3d0 <USBD_ClrFeature+0x42>

    default:
      USBD_CtlError(pdev, req);
 800a3c2:	683a      	ldr	r2, [r7, #0]
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	0011      	movs	r1, r2
 800a3c8:	0018      	movs	r0, r3
 800a3ca:	f000 f841 	bl	800a450 <USBD_CtlError>
      break;
 800a3ce:	e000      	b.n	800a3d2 <USBD_ClrFeature+0x44>
      break;
 800a3d0:	46c0      	nop			; (mov r8, r8)
  }
}
 800a3d2:	46c0      	nop			; (mov r8, r8)
 800a3d4:	46bd      	mov	sp, r7
 800a3d6:	b002      	add	sp, #8
 800a3d8:	bd80      	pop	{r7, pc}

0800a3da <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800a3da:	b580      	push	{r7, lr}
 800a3dc:	b082      	sub	sp, #8
 800a3de:	af00      	add	r7, sp, #0
 800a3e0:	6078      	str	r0, [r7, #4]
 800a3e2:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 800a3e4:	683b      	ldr	r3, [r7, #0]
 800a3e6:	781a      	ldrb	r2, [r3, #0]
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 800a3ec:	683b      	ldr	r3, [r7, #0]
 800a3ee:	785a      	ldrb	r2, [r3, #1]
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 800a3f4:	683b      	ldr	r3, [r7, #0]
 800a3f6:	3302      	adds	r3, #2
 800a3f8:	781b      	ldrb	r3, [r3, #0]
 800a3fa:	b29a      	uxth	r2, r3
 800a3fc:	683b      	ldr	r3, [r7, #0]
 800a3fe:	3303      	adds	r3, #3
 800a400:	781b      	ldrb	r3, [r3, #0]
 800a402:	b29b      	uxth	r3, r3
 800a404:	021b      	lsls	r3, r3, #8
 800a406:	b29b      	uxth	r3, r3
 800a408:	18d3      	adds	r3, r2, r3
 800a40a:	b29a      	uxth	r2, r3
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 800a410:	683b      	ldr	r3, [r7, #0]
 800a412:	3304      	adds	r3, #4
 800a414:	781b      	ldrb	r3, [r3, #0]
 800a416:	b29a      	uxth	r2, r3
 800a418:	683b      	ldr	r3, [r7, #0]
 800a41a:	3305      	adds	r3, #5
 800a41c:	781b      	ldrb	r3, [r3, #0]
 800a41e:	b29b      	uxth	r3, r3
 800a420:	021b      	lsls	r3, r3, #8
 800a422:	b29b      	uxth	r3, r3
 800a424:	18d3      	adds	r3, r2, r3
 800a426:	b29a      	uxth	r2, r3
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 800a42c:	683b      	ldr	r3, [r7, #0]
 800a42e:	3306      	adds	r3, #6
 800a430:	781b      	ldrb	r3, [r3, #0]
 800a432:	b29a      	uxth	r2, r3
 800a434:	683b      	ldr	r3, [r7, #0]
 800a436:	3307      	adds	r3, #7
 800a438:	781b      	ldrb	r3, [r3, #0]
 800a43a:	b29b      	uxth	r3, r3
 800a43c:	021b      	lsls	r3, r3, #8
 800a43e:	b29b      	uxth	r3, r3
 800a440:	18d3      	adds	r3, r2, r3
 800a442:	b29a      	uxth	r2, r3
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	80da      	strh	r2, [r3, #6]

}
 800a448:	46c0      	nop			; (mov r8, r8)
 800a44a:	46bd      	mov	sp, r7
 800a44c:	b002      	add	sp, #8
 800a44e:	bd80      	pop	{r7, pc}

0800a450 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 800a450:	b580      	push	{r7, lr}
 800a452:	b082      	sub	sp, #8
 800a454:	af00      	add	r7, sp, #0
 800a456:	6078      	str	r0, [r7, #4]
 800a458:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	2180      	movs	r1, #128	; 0x80
 800a45e:	0018      	movs	r0, r3
 800a460:	f000 fce3 	bl	800ae2a <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	2100      	movs	r1, #0
 800a468:	0018      	movs	r0, r3
 800a46a:	f000 fcde 	bl	800ae2a <USBD_LL_StallEP>
}
 800a46e:	46c0      	nop			; (mov r8, r8)
 800a470:	46bd      	mov	sp, r7
 800a472:	b002      	add	sp, #8
 800a474:	bd80      	pop	{r7, pc}

0800a476 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800a476:	b590      	push	{r4, r7, lr}
 800a478:	b087      	sub	sp, #28
 800a47a:	af00      	add	r7, sp, #0
 800a47c:	60f8      	str	r0, [r7, #12]
 800a47e:	60b9      	str	r1, [r7, #8]
 800a480:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800a482:	2417      	movs	r4, #23
 800a484:	193b      	adds	r3, r7, r4
 800a486:	2200      	movs	r2, #0
 800a488:	701a      	strb	r2, [r3, #0]

  if (desc != NULL)
 800a48a:	68fb      	ldr	r3, [r7, #12]
 800a48c:	2b00      	cmp	r3, #0
 800a48e:	d03c      	beq.n	800a50a <USBD_GetString+0x94>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800a490:	68fb      	ldr	r3, [r7, #12]
 800a492:	0018      	movs	r0, r3
 800a494:	f000 f83d 	bl	800a512 <USBD_GetLen>
 800a498:	0003      	movs	r3, r0
 800a49a:	3301      	adds	r3, #1
 800a49c:	b29b      	uxth	r3, r3
 800a49e:	18db      	adds	r3, r3, r3
 800a4a0:	b29a      	uxth	r2, r3
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800a4a6:	193b      	adds	r3, r7, r4
 800a4a8:	781b      	ldrb	r3, [r3, #0]
 800a4aa:	193a      	adds	r2, r7, r4
 800a4ac:	1c59      	adds	r1, r3, #1
 800a4ae:	7011      	strb	r1, [r2, #0]
 800a4b0:	001a      	movs	r2, r3
 800a4b2:	68bb      	ldr	r3, [r7, #8]
 800a4b4:	189b      	adds	r3, r3, r2
 800a4b6:	687a      	ldr	r2, [r7, #4]
 800a4b8:	7812      	ldrb	r2, [r2, #0]
 800a4ba:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800a4bc:	193b      	adds	r3, r7, r4
 800a4be:	781b      	ldrb	r3, [r3, #0]
 800a4c0:	193a      	adds	r2, r7, r4
 800a4c2:	1c59      	adds	r1, r3, #1
 800a4c4:	7011      	strb	r1, [r2, #0]
 800a4c6:	001a      	movs	r2, r3
 800a4c8:	68bb      	ldr	r3, [r7, #8]
 800a4ca:	189b      	adds	r3, r3, r2
 800a4cc:	2203      	movs	r2, #3
 800a4ce:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800a4d0:	e017      	b.n	800a502 <USBD_GetString+0x8c>
    {
      unicode[idx++] = *desc++;
 800a4d2:	68fb      	ldr	r3, [r7, #12]
 800a4d4:	1c5a      	adds	r2, r3, #1
 800a4d6:	60fa      	str	r2, [r7, #12]
 800a4d8:	2417      	movs	r4, #23
 800a4da:	193a      	adds	r2, r7, r4
 800a4dc:	7812      	ldrb	r2, [r2, #0]
 800a4de:	1939      	adds	r1, r7, r4
 800a4e0:	1c50      	adds	r0, r2, #1
 800a4e2:	7008      	strb	r0, [r1, #0]
 800a4e4:	0011      	movs	r1, r2
 800a4e6:	68ba      	ldr	r2, [r7, #8]
 800a4e8:	1852      	adds	r2, r2, r1
 800a4ea:	781b      	ldrb	r3, [r3, #0]
 800a4ec:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800a4ee:	193b      	adds	r3, r7, r4
 800a4f0:	781b      	ldrb	r3, [r3, #0]
 800a4f2:	193a      	adds	r2, r7, r4
 800a4f4:	1c59      	adds	r1, r3, #1
 800a4f6:	7011      	strb	r1, [r2, #0]
 800a4f8:	001a      	movs	r2, r3
 800a4fa:	68bb      	ldr	r3, [r7, #8]
 800a4fc:	189b      	adds	r3, r3, r2
 800a4fe:	2200      	movs	r2, #0
 800a500:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800a502:	68fb      	ldr	r3, [r7, #12]
 800a504:	781b      	ldrb	r3, [r3, #0]
 800a506:	2b00      	cmp	r3, #0
 800a508:	d1e3      	bne.n	800a4d2 <USBD_GetString+0x5c>
    }
  }
}
 800a50a:	46c0      	nop			; (mov r8, r8)
 800a50c:	46bd      	mov	sp, r7
 800a50e:	b007      	add	sp, #28
 800a510:	bd90      	pop	{r4, r7, pc}

0800a512 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800a512:	b580      	push	{r7, lr}
 800a514:	b084      	sub	sp, #16
 800a516:	af00      	add	r7, sp, #0
 800a518:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800a51a:	230f      	movs	r3, #15
 800a51c:	18fb      	adds	r3, r7, r3
 800a51e:	2200      	movs	r2, #0
 800a520:	701a      	strb	r2, [r3, #0]

  while (*buf != '\0')
 800a522:	e008      	b.n	800a536 <USBD_GetLen+0x24>
  {
    len++;
 800a524:	210f      	movs	r1, #15
 800a526:	187b      	adds	r3, r7, r1
 800a528:	781a      	ldrb	r2, [r3, #0]
 800a52a:	187b      	adds	r3, r7, r1
 800a52c:	3201      	adds	r2, #1
 800a52e:	701a      	strb	r2, [r3, #0]
    buf++;
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	3301      	adds	r3, #1
 800a534:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	781b      	ldrb	r3, [r3, #0]
 800a53a:	2b00      	cmp	r3, #0
 800a53c:	d1f2      	bne.n	800a524 <USBD_GetLen+0x12>
  }

  return len;
 800a53e:	230f      	movs	r3, #15
 800a540:	18fb      	adds	r3, r7, r3
 800a542:	781b      	ldrb	r3, [r3, #0]
}
 800a544:	0018      	movs	r0, r3
 800a546:	46bd      	mov	sp, r7
 800a548:	b004      	add	sp, #16
 800a54a:	bd80      	pop	{r7, pc}

0800a54c <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 800a54c:	b580      	push	{r7, lr}
 800a54e:	b084      	sub	sp, #16
 800a550:	af00      	add	r7, sp, #0
 800a552:	60f8      	str	r0, [r7, #12]
 800a554:	60b9      	str	r1, [r7, #8]
 800a556:	1dbb      	adds	r3, r7, #6
 800a558:	801a      	strh	r2, [r3, #0]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800a55a:	68fa      	ldr	r2, [r7, #12]
 800a55c:	23a5      	movs	r3, #165	; 0xa5
 800a55e:	009b      	lsls	r3, r3, #2
 800a560:	2102      	movs	r1, #2
 800a562:	50d1      	str	r1, [r2, r3]
  pdev->ep_in[0].total_length = len;
 800a564:	1dbb      	adds	r3, r7, #6
 800a566:	881a      	ldrh	r2, [r3, #0]
 800a568:	68fb      	ldr	r3, [r7, #12]
 800a56a:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800a56c:	1dbb      	adds	r3, r7, #6
 800a56e:	881a      	ldrh	r2, [r3, #0]
 800a570:	68fb      	ldr	r3, [r7, #12]
 800a572:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a574:	1dbb      	adds	r3, r7, #6
 800a576:	881b      	ldrh	r3, [r3, #0]
 800a578:	68ba      	ldr	r2, [r7, #8]
 800a57a:	68f8      	ldr	r0, [r7, #12]
 800a57c:	2100      	movs	r1, #0
 800a57e:	f000 fd06 	bl	800af8e <USBD_LL_Transmit>

  return USBD_OK;
 800a582:	2300      	movs	r3, #0
}
 800a584:	0018      	movs	r0, r3
 800a586:	46bd      	mov	sp, r7
 800a588:	b004      	add	sp, #16
 800a58a:	bd80      	pop	{r7, pc}

0800a58c <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 800a58c:	b580      	push	{r7, lr}
 800a58e:	b084      	sub	sp, #16
 800a590:	af00      	add	r7, sp, #0
 800a592:	60f8      	str	r0, [r7, #12]
 800a594:	60b9      	str	r1, [r7, #8]
 800a596:	1dbb      	adds	r3, r7, #6
 800a598:	801a      	strh	r2, [r3, #0]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a59a:	1dbb      	adds	r3, r7, #6
 800a59c:	881b      	ldrh	r3, [r3, #0]
 800a59e:	68ba      	ldr	r2, [r7, #8]
 800a5a0:	68f8      	ldr	r0, [r7, #12]
 800a5a2:	2100      	movs	r1, #0
 800a5a4:	f000 fcf3 	bl	800af8e <USBD_LL_Transmit>

  return USBD_OK;
 800a5a8:	2300      	movs	r3, #0
}
 800a5aa:	0018      	movs	r0, r3
 800a5ac:	46bd      	mov	sp, r7
 800a5ae:	b004      	add	sp, #16
 800a5b0:	bd80      	pop	{r7, pc}

0800a5b2 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 800a5b2:	b580      	push	{r7, lr}
 800a5b4:	b084      	sub	sp, #16
 800a5b6:	af00      	add	r7, sp, #0
 800a5b8:	60f8      	str	r0, [r7, #12]
 800a5ba:	60b9      	str	r1, [r7, #8]
 800a5bc:	1dbb      	adds	r3, r7, #6
 800a5be:	801a      	strh	r2, [r3, #0]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800a5c0:	68fa      	ldr	r2, [r7, #12]
 800a5c2:	23a5      	movs	r3, #165	; 0xa5
 800a5c4:	009b      	lsls	r3, r3, #2
 800a5c6:	2103      	movs	r1, #3
 800a5c8:	50d1      	str	r1, [r2, r3]
  pdev->ep_out[0].total_length = len;
 800a5ca:	1dbb      	adds	r3, r7, #6
 800a5cc:	8819      	ldrh	r1, [r3, #0]
 800a5ce:	68fa      	ldr	r2, [r7, #12]
 800a5d0:	23ae      	movs	r3, #174	; 0xae
 800a5d2:	005b      	lsls	r3, r3, #1
 800a5d4:	50d1      	str	r1, [r2, r3]
  pdev->ep_out[0].rem_length   = len;
 800a5d6:	1dbb      	adds	r3, r7, #6
 800a5d8:	8819      	ldrh	r1, [r3, #0]
 800a5da:	68fa      	ldr	r2, [r7, #12]
 800a5dc:	23b0      	movs	r3, #176	; 0xb0
 800a5de:	005b      	lsls	r3, r3, #1
 800a5e0:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a5e2:	1dbb      	adds	r3, r7, #6
 800a5e4:	881b      	ldrh	r3, [r3, #0]
 800a5e6:	68ba      	ldr	r2, [r7, #8]
 800a5e8:	68f8      	ldr	r0, [r7, #12]
 800a5ea:	2100      	movs	r1, #0
 800a5ec:	f000 fd06 	bl	800affc <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a5f0:	2300      	movs	r3, #0
}
 800a5f2:	0018      	movs	r0, r3
 800a5f4:	46bd      	mov	sp, r7
 800a5f6:	b004      	add	sp, #16
 800a5f8:	bd80      	pop	{r7, pc}

0800a5fa <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 800a5fa:	b580      	push	{r7, lr}
 800a5fc:	b084      	sub	sp, #16
 800a5fe:	af00      	add	r7, sp, #0
 800a600:	60f8      	str	r0, [r7, #12]
 800a602:	60b9      	str	r1, [r7, #8]
 800a604:	1dbb      	adds	r3, r7, #6
 800a606:	801a      	strh	r2, [r3, #0]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a608:	1dbb      	adds	r3, r7, #6
 800a60a:	881b      	ldrh	r3, [r3, #0]
 800a60c:	68ba      	ldr	r2, [r7, #8]
 800a60e:	68f8      	ldr	r0, [r7, #12]
 800a610:	2100      	movs	r1, #0
 800a612:	f000 fcf3 	bl	800affc <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a616:	2300      	movs	r3, #0
}
 800a618:	0018      	movs	r0, r3
 800a61a:	46bd      	mov	sp, r7
 800a61c:	b004      	add	sp, #16
 800a61e:	bd80      	pop	{r7, pc}

0800a620 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800a620:	b580      	push	{r7, lr}
 800a622:	b082      	sub	sp, #8
 800a624:	af00      	add	r7, sp, #0
 800a626:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800a628:	687a      	ldr	r2, [r7, #4]
 800a62a:	23a5      	movs	r3, #165	; 0xa5
 800a62c:	009b      	lsls	r3, r3, #2
 800a62e:	2104      	movs	r1, #4
 800a630:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800a632:	6878      	ldr	r0, [r7, #4]
 800a634:	2300      	movs	r3, #0
 800a636:	2200      	movs	r2, #0
 800a638:	2100      	movs	r1, #0
 800a63a:	f000 fca8 	bl	800af8e <USBD_LL_Transmit>

  return USBD_OK;
 800a63e:	2300      	movs	r3, #0
}
 800a640:	0018      	movs	r0, r3
 800a642:	46bd      	mov	sp, r7
 800a644:	b002      	add	sp, #8
 800a646:	bd80      	pop	{r7, pc}

0800a648 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800a648:	b580      	push	{r7, lr}
 800a64a:	b082      	sub	sp, #8
 800a64c:	af00      	add	r7, sp, #0
 800a64e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800a650:	687a      	ldr	r2, [r7, #4]
 800a652:	23a5      	movs	r3, #165	; 0xa5
 800a654:	009b      	lsls	r3, r3, #2
 800a656:	2105      	movs	r1, #5
 800a658:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a65a:	6878      	ldr	r0, [r7, #4]
 800a65c:	2300      	movs	r3, #0
 800a65e:	2200      	movs	r2, #0
 800a660:	2100      	movs	r1, #0
 800a662:	f000 fccb 	bl	800affc <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a666:	2300      	movs	r3, #0
}
 800a668:	0018      	movs	r0, r3
 800a66a:	46bd      	mov	sp, r7
 800a66c:	b002      	add	sp, #8
 800a66e:	bd80      	pop	{r7, pc}

0800a670 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800a670:	b580      	push	{r7, lr}
 800a672:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800a674:	4914      	ldr	r1, [pc, #80]	; (800a6c8 <MX_USB_DEVICE_Init+0x58>)
 800a676:	4b15      	ldr	r3, [pc, #84]	; (800a6cc <MX_USB_DEVICE_Init+0x5c>)
 800a678:	2200      	movs	r2, #0
 800a67a:	0018      	movs	r0, r3
 800a67c:	f7fe fdea 	bl	8009254 <USBD_Init>
 800a680:	1e03      	subs	r3, r0, #0
 800a682:	d001      	beq.n	800a688 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800a684:	f7f6 feee 	bl	8001464 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800a688:	4a11      	ldr	r2, [pc, #68]	; (800a6d0 <MX_USB_DEVICE_Init+0x60>)
 800a68a:	4b10      	ldr	r3, [pc, #64]	; (800a6cc <MX_USB_DEVICE_Init+0x5c>)
 800a68c:	0011      	movs	r1, r2
 800a68e:	0018      	movs	r0, r3
 800a690:	f7fe fe11 	bl	80092b6 <USBD_RegisterClass>
 800a694:	1e03      	subs	r3, r0, #0
 800a696:	d001      	beq.n	800a69c <MX_USB_DEVICE_Init+0x2c>
  {
    Error_Handler();
 800a698:	f7f6 fee4 	bl	8001464 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800a69c:	4a0d      	ldr	r2, [pc, #52]	; (800a6d4 <MX_USB_DEVICE_Init+0x64>)
 800a69e:	4b0b      	ldr	r3, [pc, #44]	; (800a6cc <MX_USB_DEVICE_Init+0x5c>)
 800a6a0:	0011      	movs	r1, r2
 800a6a2:	0018      	movs	r0, r3
 800a6a4:	f7fe fd26 	bl	80090f4 <USBD_CDC_RegisterInterface>
 800a6a8:	1e03      	subs	r3, r0, #0
 800a6aa:	d001      	beq.n	800a6b0 <MX_USB_DEVICE_Init+0x40>
  {
    Error_Handler();
 800a6ac:	f7f6 feda 	bl	8001464 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800a6b0:	4b06      	ldr	r3, [pc, #24]	; (800a6cc <MX_USB_DEVICE_Init+0x5c>)
 800a6b2:	0018      	movs	r0, r3
 800a6b4:	f7fe fe1f 	bl	80092f6 <USBD_Start>
 800a6b8:	1e03      	subs	r3, r0, #0
 800a6ba:	d001      	beq.n	800a6c0 <MX_USB_DEVICE_Init+0x50>
  {
    Error_Handler();
 800a6bc:	f7f6 fed2 	bl	8001464 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800a6c0:	46c0      	nop			; (mov r8, r8)
 800a6c2:	46bd      	mov	sp, r7
 800a6c4:	bd80      	pop	{r7, pc}
 800a6c6:	46c0      	nop			; (mov r8, r8)
 800a6c8:	2000012c 	.word	0x2000012c
 800a6cc:	2000061c 	.word	0x2000061c
 800a6d0:	20000018 	.word	0x20000018
 800a6d4:	2000011c 	.word	0x2000011c

0800a6d8 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800a6d8:	b580      	push	{r7, lr}
 800a6da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800a6dc:	4907      	ldr	r1, [pc, #28]	; (800a6fc <CDC_Init_FS+0x24>)
 800a6de:	4b08      	ldr	r3, [pc, #32]	; (800a700 <CDC_Init_FS+0x28>)
 800a6e0:	2200      	movs	r2, #0
 800a6e2:	0018      	movs	r0, r3
 800a6e4:	f7fe fd21 	bl	800912a <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800a6e8:	4a06      	ldr	r2, [pc, #24]	; (800a704 <CDC_Init_FS+0x2c>)
 800a6ea:	4b05      	ldr	r3, [pc, #20]	; (800a700 <CDC_Init_FS+0x28>)
 800a6ec:	0011      	movs	r1, r2
 800a6ee:	0018      	movs	r0, r3
 800a6f0:	f7fe fd37 	bl	8009162 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800a6f4:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800a6f6:	0018      	movs	r0, r3
 800a6f8:	46bd      	mov	sp, r7
 800a6fa:	bd80      	pop	{r7, pc}
 800a6fc:	20000cc8 	.word	0x20000cc8
 800a700:	2000061c 	.word	0x2000061c
 800a704:	200008e0 	.word	0x200008e0

0800a708 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800a708:	b580      	push	{r7, lr}
 800a70a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800a70c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800a70e:	0018      	movs	r0, r3
 800a710:	46bd      	mov	sp, r7
 800a712:	bd80      	pop	{r7, pc}

0800a714 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800a714:	b580      	push	{r7, lr}
 800a716:	b082      	sub	sp, #8
 800a718:	af00      	add	r7, sp, #0
 800a71a:	6039      	str	r1, [r7, #0]
 800a71c:	0011      	movs	r1, r2
 800a71e:	1dfb      	adds	r3, r7, #7
 800a720:	1c02      	adds	r2, r0, #0
 800a722:	701a      	strb	r2, [r3, #0]
 800a724:	1d3b      	adds	r3, r7, #4
 800a726:	1c0a      	adds	r2, r1, #0
 800a728:	801a      	strh	r2, [r3, #0]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800a72a:	1dfb      	adds	r3, r7, #7
 800a72c:	781b      	ldrb	r3, [r3, #0]
 800a72e:	2b23      	cmp	r3, #35	; 0x23
 800a730:	d804      	bhi.n	800a73c <CDC_Control_FS+0x28>
 800a732:	009a      	lsls	r2, r3, #2
 800a734:	4b04      	ldr	r3, [pc, #16]	; (800a748 <CDC_Control_FS+0x34>)
 800a736:	18d3      	adds	r3, r2, r3
 800a738:	681b      	ldr	r3, [r3, #0]
 800a73a:	469f      	mov	pc, r3
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800a73c:	46c0      	nop			; (mov r8, r8)
  }

  return (USBD_OK);
 800a73e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800a740:	0018      	movs	r0, r3
 800a742:	46bd      	mov	sp, r7
 800a744:	b002      	add	sp, #8
 800a746:	bd80      	pop	{r7, pc}
 800a748:	0800bb80 	.word	0x0800bb80

0800a74c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800a74c:	b590      	push	{r4, r7, lr}
 800a74e:	b085      	sub	sp, #20
 800a750:	af00      	add	r7, sp, #0
 800a752:	6078      	str	r0, [r7, #4]
 800a754:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */

  flags.data_received = 1;
 800a756:	4b18      	ldr	r3, [pc, #96]	; (800a7b8 <CDC_Receive_FS+0x6c>)
 800a758:	785a      	ldrb	r2, [r3, #1]
 800a75a:	2101      	movs	r1, #1
 800a75c:	430a      	orrs	r2, r1
 800a75e:	705a      	strb	r2, [r3, #1]

  for(uint8_t i = 0; i < *Len; i++)
 800a760:	230f      	movs	r3, #15
 800a762:	18fb      	adds	r3, r7, r3
 800a764:	2200      	movs	r2, #0
 800a766:	701a      	strb	r2, [r3, #0]
 800a768:	e00f      	b.n	800a78a <CDC_Receive_FS+0x3e>
  {
	  push(USB_Rx_Buffer, Buf[i]);
 800a76a:	4b14      	ldr	r3, [pc, #80]	; (800a7bc <CDC_Receive_FS+0x70>)
 800a76c:	6818      	ldr	r0, [r3, #0]
 800a76e:	240f      	movs	r4, #15
 800a770:	193b      	adds	r3, r7, r4
 800a772:	781b      	ldrb	r3, [r3, #0]
 800a774:	687a      	ldr	r2, [r7, #4]
 800a776:	18d3      	adds	r3, r2, r3
 800a778:	781b      	ldrb	r3, [r3, #0]
 800a77a:	0019      	movs	r1, r3
 800a77c:	f7f6 feac 	bl	80014d8 <push>
  for(uint8_t i = 0; i < *Len; i++)
 800a780:	193b      	adds	r3, r7, r4
 800a782:	781a      	ldrb	r2, [r3, #0]
 800a784:	193b      	adds	r3, r7, r4
 800a786:	3201      	adds	r2, #1
 800a788:	701a      	strb	r2, [r3, #0]
 800a78a:	230f      	movs	r3, #15
 800a78c:	18fb      	adds	r3, r7, r3
 800a78e:	781a      	ldrb	r2, [r3, #0]
 800a790:	683b      	ldr	r3, [r7, #0]
 800a792:	681b      	ldr	r3, [r3, #0]
 800a794:	429a      	cmp	r2, r3
 800a796:	d3e8      	bcc.n	800a76a <CDC_Receive_FS+0x1e>
  }

  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800a798:	687a      	ldr	r2, [r7, #4]
 800a79a:	4b09      	ldr	r3, [pc, #36]	; (800a7c0 <CDC_Receive_FS+0x74>)
 800a79c:	0011      	movs	r1, r2
 800a79e:	0018      	movs	r0, r3
 800a7a0:	f7fe fcdf 	bl	8009162 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800a7a4:	4b06      	ldr	r3, [pc, #24]	; (800a7c0 <CDC_Receive_FS+0x74>)
 800a7a6:	0018      	movs	r0, r3
 800a7a8:	f7fe fd26 	bl	80091f8 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800a7ac:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800a7ae:	0018      	movs	r0, r3
 800a7b0:	46bd      	mov	sp, r7
 800a7b2:	b005      	add	sp, #20
 800a7b4:	bd90      	pop	{r4, r7, pc}
 800a7b6:	46c0      	nop			; (mov r8, r8)
 800a7b8:	20000590 	.word	0x20000590
 800a7bc:	200010b0 	.word	0x200010b0
 800a7c0:	2000061c 	.word	0x2000061c

0800a7c4 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800a7c4:	b5b0      	push	{r4, r5, r7, lr}
 800a7c6:	b084      	sub	sp, #16
 800a7c8:	af00      	add	r7, sp, #0
 800a7ca:	6078      	str	r0, [r7, #4]
 800a7cc:	000a      	movs	r2, r1
 800a7ce:	1cbb      	adds	r3, r7, #2
 800a7d0:	801a      	strh	r2, [r3, #0]
  uint8_t result = USBD_OK;
 800a7d2:	230f      	movs	r3, #15
 800a7d4:	18fb      	adds	r3, r7, r3
 800a7d6:	2200      	movs	r2, #0
 800a7d8:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800a7da:	4a11      	ldr	r2, [pc, #68]	; (800a820 <CDC_Transmit_FS+0x5c>)
 800a7dc:	23ae      	movs	r3, #174	; 0xae
 800a7de:	009b      	lsls	r3, r3, #2
 800a7e0:	58d3      	ldr	r3, [r2, r3]
 800a7e2:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800a7e4:	68ba      	ldr	r2, [r7, #8]
 800a7e6:	2385      	movs	r3, #133	; 0x85
 800a7e8:	009b      	lsls	r3, r3, #2
 800a7ea:	58d3      	ldr	r3, [r2, r3]
 800a7ec:	2b00      	cmp	r3, #0
 800a7ee:	d001      	beq.n	800a7f4 <CDC_Transmit_FS+0x30>
    return USBD_BUSY;
 800a7f0:	2301      	movs	r3, #1
 800a7f2:	e010      	b.n	800a816 <CDC_Transmit_FS+0x52>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800a7f4:	1cbb      	adds	r3, r7, #2
 800a7f6:	881a      	ldrh	r2, [r3, #0]
 800a7f8:	6879      	ldr	r1, [r7, #4]
 800a7fa:	4b09      	ldr	r3, [pc, #36]	; (800a820 <CDC_Transmit_FS+0x5c>)
 800a7fc:	0018      	movs	r0, r3
 800a7fe:	f7fe fc94 	bl	800912a <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800a802:	250f      	movs	r5, #15
 800a804:	197c      	adds	r4, r7, r5
 800a806:	4b06      	ldr	r3, [pc, #24]	; (800a820 <CDC_Transmit_FS+0x5c>)
 800a808:	0018      	movs	r0, r3
 800a80a:	f7fe fcbe 	bl	800918a <USBD_CDC_TransmitPacket>
 800a80e:	0003      	movs	r3, r0
 800a810:	7023      	strb	r3, [r4, #0]
  /* USER CODE END 7 */
  return result;
 800a812:	197b      	adds	r3, r7, r5
 800a814:	781b      	ldrb	r3, [r3, #0]
}
 800a816:	0018      	movs	r0, r3
 800a818:	46bd      	mov	sp, r7
 800a81a:	b004      	add	sp, #16
 800a81c:	bdb0      	pop	{r4, r5, r7, pc}
 800a81e:	46c0      	nop			; (mov r8, r8)
 800a820:	2000061c 	.word	0x2000061c

0800a824 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a824:	b580      	push	{r7, lr}
 800a826:	b082      	sub	sp, #8
 800a828:	af00      	add	r7, sp, #0
 800a82a:	0002      	movs	r2, r0
 800a82c:	6039      	str	r1, [r7, #0]
 800a82e:	1dfb      	adds	r3, r7, #7
 800a830:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800a832:	683b      	ldr	r3, [r7, #0]
 800a834:	2212      	movs	r2, #18
 800a836:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800a838:	4b02      	ldr	r3, [pc, #8]	; (800a844 <USBD_FS_DeviceDescriptor+0x20>)
}
 800a83a:	0018      	movs	r0, r3
 800a83c:	46bd      	mov	sp, r7
 800a83e:	b002      	add	sp, #8
 800a840:	bd80      	pop	{r7, pc}
 800a842:	46c0      	nop			; (mov r8, r8)
 800a844:	20000148 	.word	0x20000148

0800a848 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a848:	b580      	push	{r7, lr}
 800a84a:	b082      	sub	sp, #8
 800a84c:	af00      	add	r7, sp, #0
 800a84e:	0002      	movs	r2, r0
 800a850:	6039      	str	r1, [r7, #0]
 800a852:	1dfb      	adds	r3, r7, #7
 800a854:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800a856:	683b      	ldr	r3, [r7, #0]
 800a858:	2204      	movs	r2, #4
 800a85a:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800a85c:	4b02      	ldr	r3, [pc, #8]	; (800a868 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800a85e:	0018      	movs	r0, r3
 800a860:	46bd      	mov	sp, r7
 800a862:	b002      	add	sp, #8
 800a864:	bd80      	pop	{r7, pc}
 800a866:	46c0      	nop			; (mov r8, r8)
 800a868:	2000015c 	.word	0x2000015c

0800a86c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a86c:	b580      	push	{r7, lr}
 800a86e:	b082      	sub	sp, #8
 800a870:	af00      	add	r7, sp, #0
 800a872:	0002      	movs	r2, r0
 800a874:	6039      	str	r1, [r7, #0]
 800a876:	1dfb      	adds	r3, r7, #7
 800a878:	701a      	strb	r2, [r3, #0]
  if(speed == 0)
 800a87a:	1dfb      	adds	r3, r7, #7
 800a87c:	781b      	ldrb	r3, [r3, #0]
 800a87e:	2b00      	cmp	r3, #0
 800a880:	d106      	bne.n	800a890 <USBD_FS_ProductStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a882:	683a      	ldr	r2, [r7, #0]
 800a884:	4908      	ldr	r1, [pc, #32]	; (800a8a8 <USBD_FS_ProductStrDescriptor+0x3c>)
 800a886:	4b09      	ldr	r3, [pc, #36]	; (800a8ac <USBD_FS_ProductStrDescriptor+0x40>)
 800a888:	0018      	movs	r0, r3
 800a88a:	f7ff fdf4 	bl	800a476 <USBD_GetString>
 800a88e:	e005      	b.n	800a89c <USBD_FS_ProductStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a890:	683a      	ldr	r2, [r7, #0]
 800a892:	4905      	ldr	r1, [pc, #20]	; (800a8a8 <USBD_FS_ProductStrDescriptor+0x3c>)
 800a894:	4b05      	ldr	r3, [pc, #20]	; (800a8ac <USBD_FS_ProductStrDescriptor+0x40>)
 800a896:	0018      	movs	r0, r3
 800a898:	f7ff fded 	bl	800a476 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a89c:	4b02      	ldr	r3, [pc, #8]	; (800a8a8 <USBD_FS_ProductStrDescriptor+0x3c>)
}
 800a89e:	0018      	movs	r0, r3
 800a8a0:	46bd      	mov	sp, r7
 800a8a2:	b002      	add	sp, #8
 800a8a4:	bd80      	pop	{r7, pc}
 800a8a6:	46c0      	nop			; (mov r8, r8)
 800a8a8:	200010b4 	.word	0x200010b4
 800a8ac:	0800baa8 	.word	0x0800baa8

0800a8b0 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a8b0:	b580      	push	{r7, lr}
 800a8b2:	b082      	sub	sp, #8
 800a8b4:	af00      	add	r7, sp, #0
 800a8b6:	0002      	movs	r2, r0
 800a8b8:	6039      	str	r1, [r7, #0]
 800a8ba:	1dfb      	adds	r3, r7, #7
 800a8bc:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800a8be:	683a      	ldr	r2, [r7, #0]
 800a8c0:	4904      	ldr	r1, [pc, #16]	; (800a8d4 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800a8c2:	4b05      	ldr	r3, [pc, #20]	; (800a8d8 <USBD_FS_ManufacturerStrDescriptor+0x28>)
 800a8c4:	0018      	movs	r0, r3
 800a8c6:	f7ff fdd6 	bl	800a476 <USBD_GetString>
  return USBD_StrDesc;
 800a8ca:	4b02      	ldr	r3, [pc, #8]	; (800a8d4 <USBD_FS_ManufacturerStrDescriptor+0x24>)
}
 800a8cc:	0018      	movs	r0, r3
 800a8ce:	46bd      	mov	sp, r7
 800a8d0:	b002      	add	sp, #8
 800a8d2:	bd80      	pop	{r7, pc}
 800a8d4:	200010b4 	.word	0x200010b4
 800a8d8:	0800bac0 	.word	0x0800bac0

0800a8dc <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a8dc:	b580      	push	{r7, lr}
 800a8de:	b082      	sub	sp, #8
 800a8e0:	af00      	add	r7, sp, #0
 800a8e2:	0002      	movs	r2, r0
 800a8e4:	6039      	str	r1, [r7, #0]
 800a8e6:	1dfb      	adds	r3, r7, #7
 800a8e8:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800a8ea:	683b      	ldr	r3, [r7, #0]
 800a8ec:	221a      	movs	r2, #26
 800a8ee:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800a8f0:	f000 f84c 	bl	800a98c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800a8f4:	4b02      	ldr	r3, [pc, #8]	; (800a900 <USBD_FS_SerialStrDescriptor+0x24>)
}
 800a8f6:	0018      	movs	r0, r3
 800a8f8:	46bd      	mov	sp, r7
 800a8fa:	b002      	add	sp, #8
 800a8fc:	bd80      	pop	{r7, pc}
 800a8fe:	46c0      	nop			; (mov r8, r8)
 800a900:	20000160 	.word	0x20000160

0800a904 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a904:	b580      	push	{r7, lr}
 800a906:	b082      	sub	sp, #8
 800a908:	af00      	add	r7, sp, #0
 800a90a:	0002      	movs	r2, r0
 800a90c:	6039      	str	r1, [r7, #0]
 800a90e:	1dfb      	adds	r3, r7, #7
 800a910:	701a      	strb	r2, [r3, #0]
  if(speed == USBD_SPEED_HIGH)
 800a912:	1dfb      	adds	r3, r7, #7
 800a914:	781b      	ldrb	r3, [r3, #0]
 800a916:	2b00      	cmp	r3, #0
 800a918:	d106      	bne.n	800a928 <USBD_FS_ConfigStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a91a:	683a      	ldr	r2, [r7, #0]
 800a91c:	4908      	ldr	r1, [pc, #32]	; (800a940 <USBD_FS_ConfigStrDescriptor+0x3c>)
 800a91e:	4b09      	ldr	r3, [pc, #36]	; (800a944 <USBD_FS_ConfigStrDescriptor+0x40>)
 800a920:	0018      	movs	r0, r3
 800a922:	f7ff fda8 	bl	800a476 <USBD_GetString>
 800a926:	e005      	b.n	800a934 <USBD_FS_ConfigStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a928:	683a      	ldr	r2, [r7, #0]
 800a92a:	4905      	ldr	r1, [pc, #20]	; (800a940 <USBD_FS_ConfigStrDescriptor+0x3c>)
 800a92c:	4b05      	ldr	r3, [pc, #20]	; (800a944 <USBD_FS_ConfigStrDescriptor+0x40>)
 800a92e:	0018      	movs	r0, r3
 800a930:	f7ff fda1 	bl	800a476 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a934:	4b02      	ldr	r3, [pc, #8]	; (800a940 <USBD_FS_ConfigStrDescriptor+0x3c>)
}
 800a936:	0018      	movs	r0, r3
 800a938:	46bd      	mov	sp, r7
 800a93a:	b002      	add	sp, #8
 800a93c:	bd80      	pop	{r7, pc}
 800a93e:	46c0      	nop			; (mov r8, r8)
 800a940:	200010b4 	.word	0x200010b4
 800a944:	0800bad4 	.word	0x0800bad4

0800a948 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a948:	b580      	push	{r7, lr}
 800a94a:	b082      	sub	sp, #8
 800a94c:	af00      	add	r7, sp, #0
 800a94e:	0002      	movs	r2, r0
 800a950:	6039      	str	r1, [r7, #0]
 800a952:	1dfb      	adds	r3, r7, #7
 800a954:	701a      	strb	r2, [r3, #0]
  if(speed == 0)
 800a956:	1dfb      	adds	r3, r7, #7
 800a958:	781b      	ldrb	r3, [r3, #0]
 800a95a:	2b00      	cmp	r3, #0
 800a95c:	d106      	bne.n	800a96c <USBD_FS_InterfaceStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a95e:	683a      	ldr	r2, [r7, #0]
 800a960:	4908      	ldr	r1, [pc, #32]	; (800a984 <USBD_FS_InterfaceStrDescriptor+0x3c>)
 800a962:	4b09      	ldr	r3, [pc, #36]	; (800a988 <USBD_FS_InterfaceStrDescriptor+0x40>)
 800a964:	0018      	movs	r0, r3
 800a966:	f7ff fd86 	bl	800a476 <USBD_GetString>
 800a96a:	e005      	b.n	800a978 <USBD_FS_InterfaceStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a96c:	683a      	ldr	r2, [r7, #0]
 800a96e:	4905      	ldr	r1, [pc, #20]	; (800a984 <USBD_FS_InterfaceStrDescriptor+0x3c>)
 800a970:	4b05      	ldr	r3, [pc, #20]	; (800a988 <USBD_FS_InterfaceStrDescriptor+0x40>)
 800a972:	0018      	movs	r0, r3
 800a974:	f7ff fd7f 	bl	800a476 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a978:	4b02      	ldr	r3, [pc, #8]	; (800a984 <USBD_FS_InterfaceStrDescriptor+0x3c>)
}
 800a97a:	0018      	movs	r0, r3
 800a97c:	46bd      	mov	sp, r7
 800a97e:	b002      	add	sp, #8
 800a980:	bd80      	pop	{r7, pc}
 800a982:	46c0      	nop			; (mov r8, r8)
 800a984:	200010b4 	.word	0x200010b4
 800a988:	0800bae0 	.word	0x0800bae0

0800a98c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800a98c:	b580      	push	{r7, lr}
 800a98e:	b084      	sub	sp, #16
 800a990:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800a992:	4b10      	ldr	r3, [pc, #64]	; (800a9d4 <Get_SerialNum+0x48>)
 800a994:	681b      	ldr	r3, [r3, #0]
 800a996:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800a998:	4b0f      	ldr	r3, [pc, #60]	; (800a9d8 <Get_SerialNum+0x4c>)
 800a99a:	681b      	ldr	r3, [r3, #0]
 800a99c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800a99e:	4b0f      	ldr	r3, [pc, #60]	; (800a9dc <Get_SerialNum+0x50>)
 800a9a0:	681b      	ldr	r3, [r3, #0]
 800a9a2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800a9a4:	68fa      	ldr	r2, [r7, #12]
 800a9a6:	687b      	ldr	r3, [r7, #4]
 800a9a8:	18d3      	adds	r3, r2, r3
 800a9aa:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800a9ac:	68fb      	ldr	r3, [r7, #12]
 800a9ae:	2b00      	cmp	r3, #0
 800a9b0:	d00b      	beq.n	800a9ca <Get_SerialNum+0x3e>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800a9b2:	490b      	ldr	r1, [pc, #44]	; (800a9e0 <Get_SerialNum+0x54>)
 800a9b4:	68fb      	ldr	r3, [r7, #12]
 800a9b6:	2208      	movs	r2, #8
 800a9b8:	0018      	movs	r0, r3
 800a9ba:	f000 f815 	bl	800a9e8 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800a9be:	4909      	ldr	r1, [pc, #36]	; (800a9e4 <Get_SerialNum+0x58>)
 800a9c0:	68bb      	ldr	r3, [r7, #8]
 800a9c2:	2204      	movs	r2, #4
 800a9c4:	0018      	movs	r0, r3
 800a9c6:	f000 f80f 	bl	800a9e8 <IntToUnicode>
  }
}
 800a9ca:	46c0      	nop			; (mov r8, r8)
 800a9cc:	46bd      	mov	sp, r7
 800a9ce:	b004      	add	sp, #16
 800a9d0:	bd80      	pop	{r7, pc}
 800a9d2:	46c0      	nop			; (mov r8, r8)
 800a9d4:	1ffff7ac 	.word	0x1ffff7ac
 800a9d8:	1ffff7b0 	.word	0x1ffff7b0
 800a9dc:	1ffff7b4 	.word	0x1ffff7b4
 800a9e0:	20000162 	.word	0x20000162
 800a9e4:	20000172 	.word	0x20000172

0800a9e8 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800a9e8:	b580      	push	{r7, lr}
 800a9ea:	b086      	sub	sp, #24
 800a9ec:	af00      	add	r7, sp, #0
 800a9ee:	60f8      	str	r0, [r7, #12]
 800a9f0:	60b9      	str	r1, [r7, #8]
 800a9f2:	1dfb      	adds	r3, r7, #7
 800a9f4:	701a      	strb	r2, [r3, #0]
  uint8_t idx = 0;
 800a9f6:	2117      	movs	r1, #23
 800a9f8:	187b      	adds	r3, r7, r1
 800a9fa:	2200      	movs	r2, #0
 800a9fc:	701a      	strb	r2, [r3, #0]

  for (idx = 0; idx < len; idx++)
 800a9fe:	187b      	adds	r3, r7, r1
 800aa00:	2200      	movs	r2, #0
 800aa02:	701a      	strb	r2, [r3, #0]
 800aa04:	e02f      	b.n	800aa66 <IntToUnicode+0x7e>
  {
    if (((value >> 28)) < 0xA)
 800aa06:	68fb      	ldr	r3, [r7, #12]
 800aa08:	0f1b      	lsrs	r3, r3, #28
 800aa0a:	2b09      	cmp	r3, #9
 800aa0c:	d80d      	bhi.n	800aa2a <IntToUnicode+0x42>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800aa0e:	68fb      	ldr	r3, [r7, #12]
 800aa10:	0f1b      	lsrs	r3, r3, #28
 800aa12:	b2da      	uxtb	r2, r3
 800aa14:	2317      	movs	r3, #23
 800aa16:	18fb      	adds	r3, r7, r3
 800aa18:	781b      	ldrb	r3, [r3, #0]
 800aa1a:	005b      	lsls	r3, r3, #1
 800aa1c:	0019      	movs	r1, r3
 800aa1e:	68bb      	ldr	r3, [r7, #8]
 800aa20:	185b      	adds	r3, r3, r1
 800aa22:	3230      	adds	r2, #48	; 0x30
 800aa24:	b2d2      	uxtb	r2, r2
 800aa26:	701a      	strb	r2, [r3, #0]
 800aa28:	e00c      	b.n	800aa44 <IntToUnicode+0x5c>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800aa2a:	68fb      	ldr	r3, [r7, #12]
 800aa2c:	0f1b      	lsrs	r3, r3, #28
 800aa2e:	b2da      	uxtb	r2, r3
 800aa30:	2317      	movs	r3, #23
 800aa32:	18fb      	adds	r3, r7, r3
 800aa34:	781b      	ldrb	r3, [r3, #0]
 800aa36:	005b      	lsls	r3, r3, #1
 800aa38:	0019      	movs	r1, r3
 800aa3a:	68bb      	ldr	r3, [r7, #8]
 800aa3c:	185b      	adds	r3, r3, r1
 800aa3e:	3237      	adds	r2, #55	; 0x37
 800aa40:	b2d2      	uxtb	r2, r2
 800aa42:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800aa44:	68fb      	ldr	r3, [r7, #12]
 800aa46:	011b      	lsls	r3, r3, #4
 800aa48:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800aa4a:	2117      	movs	r1, #23
 800aa4c:	187b      	adds	r3, r7, r1
 800aa4e:	781b      	ldrb	r3, [r3, #0]
 800aa50:	005b      	lsls	r3, r3, #1
 800aa52:	3301      	adds	r3, #1
 800aa54:	68ba      	ldr	r2, [r7, #8]
 800aa56:	18d3      	adds	r3, r2, r3
 800aa58:	2200      	movs	r2, #0
 800aa5a:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800aa5c:	187b      	adds	r3, r7, r1
 800aa5e:	781a      	ldrb	r2, [r3, #0]
 800aa60:	187b      	adds	r3, r7, r1
 800aa62:	3201      	adds	r2, #1
 800aa64:	701a      	strb	r2, [r3, #0]
 800aa66:	2317      	movs	r3, #23
 800aa68:	18fa      	adds	r2, r7, r3
 800aa6a:	1dfb      	adds	r3, r7, #7
 800aa6c:	7812      	ldrb	r2, [r2, #0]
 800aa6e:	781b      	ldrb	r3, [r3, #0]
 800aa70:	429a      	cmp	r2, r3
 800aa72:	d3c8      	bcc.n	800aa06 <IntToUnicode+0x1e>
  }
}
 800aa74:	46c0      	nop			; (mov r8, r8)
 800aa76:	46c0      	nop			; (mov r8, r8)
 800aa78:	46bd      	mov	sp, r7
 800aa7a:	b006      	add	sp, #24
 800aa7c:	bd80      	pop	{r7, pc}
	...

0800aa80 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800aa80:	b580      	push	{r7, lr}
 800aa82:	b084      	sub	sp, #16
 800aa84:	af00      	add	r7, sp, #0
 800aa86:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	681b      	ldr	r3, [r3, #0]
 800aa8c:	4a0e      	ldr	r2, [pc, #56]	; (800aac8 <HAL_PCD_MspInit+0x48>)
 800aa8e:	4293      	cmp	r3, r2
 800aa90:	d115      	bne.n	800aabe <HAL_PCD_MspInit+0x3e>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800aa92:	4b0e      	ldr	r3, [pc, #56]	; (800aacc <HAL_PCD_MspInit+0x4c>)
 800aa94:	69da      	ldr	r2, [r3, #28]
 800aa96:	4b0d      	ldr	r3, [pc, #52]	; (800aacc <HAL_PCD_MspInit+0x4c>)
 800aa98:	2180      	movs	r1, #128	; 0x80
 800aa9a:	0409      	lsls	r1, r1, #16
 800aa9c:	430a      	orrs	r2, r1
 800aa9e:	61da      	str	r2, [r3, #28]
 800aaa0:	4b0a      	ldr	r3, [pc, #40]	; (800aacc <HAL_PCD_MspInit+0x4c>)
 800aaa2:	69da      	ldr	r2, [r3, #28]
 800aaa4:	2380      	movs	r3, #128	; 0x80
 800aaa6:	041b      	lsls	r3, r3, #16
 800aaa8:	4013      	ands	r3, r2
 800aaaa:	60fb      	str	r3, [r7, #12]
 800aaac:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_IRQn, 0, 0);
 800aaae:	2200      	movs	r2, #0
 800aab0:	2100      	movs	r1, #0
 800aab2:	201f      	movs	r0, #31
 800aab4:	f7f7 fb5c 	bl	8002170 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_IRQn);
 800aab8:	201f      	movs	r0, #31
 800aaba:	f7f7 fb6e 	bl	800219a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800aabe:	46c0      	nop			; (mov r8, r8)
 800aac0:	46bd      	mov	sp, r7
 800aac2:	b004      	add	sp, #16
 800aac4:	bd80      	pop	{r7, pc}
 800aac6:	46c0      	nop			; (mov r8, r8)
 800aac8:	40005c00 	.word	0x40005c00
 800aacc:	40021000 	.word	0x40021000

0800aad0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aad0:	b580      	push	{r7, lr}
 800aad2:	b082      	sub	sp, #8
 800aad4:	af00      	add	r7, sp, #0
 800aad6:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800aad8:	687a      	ldr	r2, [r7, #4]
 800aada:	23bc      	movs	r3, #188	; 0xbc
 800aadc:	009b      	lsls	r3, r3, #2
 800aade:	58d2      	ldr	r2, [r2, r3]
 800aae0:	687b      	ldr	r3, [r7, #4]
 800aae2:	21ac      	movs	r1, #172	; 0xac
 800aae4:	0089      	lsls	r1, r1, #2
 800aae6:	468c      	mov	ip, r1
 800aae8:	4463      	add	r3, ip
 800aaea:	0019      	movs	r1, r3
 800aaec:	0010      	movs	r0, r2
 800aaee:	f7fe fc55 	bl	800939c <USBD_LL_SetupStage>
}
 800aaf2:	46c0      	nop			; (mov r8, r8)
 800aaf4:	46bd      	mov	sp, r7
 800aaf6:	b002      	add	sp, #8
 800aaf8:	bd80      	pop	{r7, pc}

0800aafa <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aafa:	b590      	push	{r4, r7, lr}
 800aafc:	b083      	sub	sp, #12
 800aafe:	af00      	add	r7, sp, #0
 800ab00:	6078      	str	r0, [r7, #4]
 800ab02:	000a      	movs	r2, r1
 800ab04:	1cfb      	adds	r3, r7, #3
 800ab06:	701a      	strb	r2, [r3, #0]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800ab08:	687a      	ldr	r2, [r7, #4]
 800ab0a:	23bc      	movs	r3, #188	; 0xbc
 800ab0c:	009b      	lsls	r3, r3, #2
 800ab0e:	58d4      	ldr	r4, [r2, r3]
 800ab10:	1cfb      	adds	r3, r7, #3
 800ab12:	781a      	ldrb	r2, [r3, #0]
 800ab14:	6878      	ldr	r0, [r7, #4]
 800ab16:	23be      	movs	r3, #190	; 0xbe
 800ab18:	0059      	lsls	r1, r3, #1
 800ab1a:	0013      	movs	r3, r2
 800ab1c:	009b      	lsls	r3, r3, #2
 800ab1e:	189b      	adds	r3, r3, r2
 800ab20:	00db      	lsls	r3, r3, #3
 800ab22:	18c3      	adds	r3, r0, r3
 800ab24:	185b      	adds	r3, r3, r1
 800ab26:	681a      	ldr	r2, [r3, #0]
 800ab28:	1cfb      	adds	r3, r7, #3
 800ab2a:	781b      	ldrb	r3, [r3, #0]
 800ab2c:	0019      	movs	r1, r3
 800ab2e:	0020      	movs	r0, r4
 800ab30:	f7fe fc92 	bl	8009458 <USBD_LL_DataOutStage>
}
 800ab34:	46c0      	nop			; (mov r8, r8)
 800ab36:	46bd      	mov	sp, r7
 800ab38:	b003      	add	sp, #12
 800ab3a:	bd90      	pop	{r4, r7, pc}

0800ab3c <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ab3c:	b580      	push	{r7, lr}
 800ab3e:	b082      	sub	sp, #8
 800ab40:	af00      	add	r7, sp, #0
 800ab42:	6078      	str	r0, [r7, #4]
 800ab44:	000a      	movs	r2, r1
 800ab46:	1cfb      	adds	r3, r7, #3
 800ab48:	701a      	strb	r2, [r3, #0]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800ab4a:	687a      	ldr	r2, [r7, #4]
 800ab4c:	23bc      	movs	r3, #188	; 0xbc
 800ab4e:	009b      	lsls	r3, r3, #2
 800ab50:	58d0      	ldr	r0, [r2, r3]
 800ab52:	1cfb      	adds	r3, r7, #3
 800ab54:	781a      	ldrb	r2, [r3, #0]
 800ab56:	6879      	ldr	r1, [r7, #4]
 800ab58:	0013      	movs	r3, r2
 800ab5a:	009b      	lsls	r3, r3, #2
 800ab5c:	189b      	adds	r3, r3, r2
 800ab5e:	00db      	lsls	r3, r3, #3
 800ab60:	18cb      	adds	r3, r1, r3
 800ab62:	333c      	adds	r3, #60	; 0x3c
 800ab64:	681a      	ldr	r2, [r3, #0]
 800ab66:	1cfb      	adds	r3, r7, #3
 800ab68:	781b      	ldrb	r3, [r3, #0]
 800ab6a:	0019      	movs	r1, r3
 800ab6c:	f7fe fcf6 	bl	800955c <USBD_LL_DataInStage>
}
 800ab70:	46c0      	nop			; (mov r8, r8)
 800ab72:	46bd      	mov	sp, r7
 800ab74:	b002      	add	sp, #8
 800ab76:	bd80      	pop	{r7, pc}

0800ab78 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ab78:	b580      	push	{r7, lr}
 800ab7a:	b082      	sub	sp, #8
 800ab7c:	af00      	add	r7, sp, #0
 800ab7e:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800ab80:	687a      	ldr	r2, [r7, #4]
 800ab82:	23bc      	movs	r3, #188	; 0xbc
 800ab84:	009b      	lsls	r3, r3, #2
 800ab86:	58d3      	ldr	r3, [r2, r3]
 800ab88:	0018      	movs	r0, r3
 800ab8a:	f7fe fe2d 	bl	80097e8 <USBD_LL_SOF>
}
 800ab8e:	46c0      	nop			; (mov r8, r8)
 800ab90:	46bd      	mov	sp, r7
 800ab92:	b002      	add	sp, #8
 800ab94:	bd80      	pop	{r7, pc}

0800ab96 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ab96:	b580      	push	{r7, lr}
 800ab98:	b084      	sub	sp, #16
 800ab9a:	af00      	add	r7, sp, #0
 800ab9c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800ab9e:	230f      	movs	r3, #15
 800aba0:	18fb      	adds	r3, r7, r3
 800aba2:	2201      	movs	r2, #1
 800aba4:	701a      	strb	r2, [r3, #0]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800aba6:	687b      	ldr	r3, [r7, #4]
 800aba8:	689b      	ldr	r3, [r3, #8]
 800abaa:	2b02      	cmp	r3, #2
 800abac:	d001      	beq.n	800abb2 <HAL_PCD_ResetCallback+0x1c>
  {
    Error_Handler();
 800abae:	f7f6 fc59 	bl	8001464 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800abb2:	687a      	ldr	r2, [r7, #4]
 800abb4:	23bc      	movs	r3, #188	; 0xbc
 800abb6:	009b      	lsls	r3, r3, #2
 800abb8:	58d2      	ldr	r2, [r2, r3]
 800abba:	230f      	movs	r3, #15
 800abbc:	18fb      	adds	r3, r7, r3
 800abbe:	781b      	ldrb	r3, [r3, #0]
 800abc0:	0019      	movs	r1, r3
 800abc2:	0010      	movs	r0, r2
 800abc4:	f7fe fdcf 	bl	8009766 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800abc8:	687a      	ldr	r2, [r7, #4]
 800abca:	23bc      	movs	r3, #188	; 0xbc
 800abcc:	009b      	lsls	r3, r3, #2
 800abce:	58d3      	ldr	r3, [r2, r3]
 800abd0:	0018      	movs	r0, r3
 800abd2:	f7fe fd80 	bl	80096d6 <USBD_LL_Reset>
}
 800abd6:	46c0      	nop			; (mov r8, r8)
 800abd8:	46bd      	mov	sp, r7
 800abda:	b004      	add	sp, #16
 800abdc:	bd80      	pop	{r7, pc}
	...

0800abe0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800abe0:	b580      	push	{r7, lr}
 800abe2:	b082      	sub	sp, #8
 800abe4:	af00      	add	r7, sp, #0
 800abe6:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800abe8:	687a      	ldr	r2, [r7, #4]
 800abea:	23bc      	movs	r3, #188	; 0xbc
 800abec:	009b      	lsls	r3, r3, #2
 800abee:	58d3      	ldr	r3, [r2, r3]
 800abf0:	0018      	movs	r0, r3
 800abf2:	f7fe fdc9 	bl	8009788 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800abf6:	687b      	ldr	r3, [r7, #4]
 800abf8:	699b      	ldr	r3, [r3, #24]
 800abfa:	2b00      	cmp	r3, #0
 800abfc:	d005      	beq.n	800ac0a <HAL_PCD_SuspendCallback+0x2a>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800abfe:	4b05      	ldr	r3, [pc, #20]	; (800ac14 <HAL_PCD_SuspendCallback+0x34>)
 800ac00:	691a      	ldr	r2, [r3, #16]
 800ac02:	4b04      	ldr	r3, [pc, #16]	; (800ac14 <HAL_PCD_SuspendCallback+0x34>)
 800ac04:	2106      	movs	r1, #6
 800ac06:	430a      	orrs	r2, r1
 800ac08:	611a      	str	r2, [r3, #16]
  }
  /* USER CODE END 2 */
}
 800ac0a:	46c0      	nop			; (mov r8, r8)
 800ac0c:	46bd      	mov	sp, r7
 800ac0e:	b002      	add	sp, #8
 800ac10:	bd80      	pop	{r7, pc}
 800ac12:	46c0      	nop			; (mov r8, r8)
 800ac14:	e000ed00 	.word	0xe000ed00

0800ac18 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ac18:	b580      	push	{r7, lr}
 800ac1a:	b082      	sub	sp, #8
 800ac1c:	af00      	add	r7, sp, #0
 800ac1e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	699b      	ldr	r3, [r3, #24]
 800ac24:	2b00      	cmp	r3, #0
 800ac26:	d007      	beq.n	800ac38 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800ac28:	4b09      	ldr	r3, [pc, #36]	; (800ac50 <HAL_PCD_ResumeCallback+0x38>)
 800ac2a:	691a      	ldr	r2, [r3, #16]
 800ac2c:	4b08      	ldr	r3, [pc, #32]	; (800ac50 <HAL_PCD_ResumeCallback+0x38>)
 800ac2e:	2106      	movs	r1, #6
 800ac30:	438a      	bics	r2, r1
 800ac32:	611a      	str	r2, [r3, #16]
    SystemClockConfig_Resume();
 800ac34:	f000 fa44 	bl	800b0c0 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800ac38:	687a      	ldr	r2, [r7, #4]
 800ac3a:	23bc      	movs	r3, #188	; 0xbc
 800ac3c:	009b      	lsls	r3, r3, #2
 800ac3e:	58d3      	ldr	r3, [r2, r3]
 800ac40:	0018      	movs	r0, r3
 800ac42:	f7fe fdb9 	bl	80097b8 <USBD_LL_Resume>
}
 800ac46:	46c0      	nop			; (mov r8, r8)
 800ac48:	46bd      	mov	sp, r7
 800ac4a:	b002      	add	sp, #8
 800ac4c:	bd80      	pop	{r7, pc}
 800ac4e:	46c0      	nop			; (mov r8, r8)
 800ac50:	e000ed00 	.word	0xe000ed00

0800ac54 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800ac54:	b580      	push	{r7, lr}
 800ac56:	b082      	sub	sp, #8
 800ac58:	af00      	add	r7, sp, #0
 800ac5a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800ac5c:	4a2d      	ldr	r2, [pc, #180]	; (800ad14 <USBD_LL_Init+0xc0>)
 800ac5e:	23bc      	movs	r3, #188	; 0xbc
 800ac60:	009b      	lsls	r3, r3, #2
 800ac62:	6879      	ldr	r1, [r7, #4]
 800ac64:	50d1      	str	r1, [r2, r3]
  pdev->pData = &hpcd_USB_FS;
 800ac66:	687a      	ldr	r2, [r7, #4]
 800ac68:	23b0      	movs	r3, #176	; 0xb0
 800ac6a:	009b      	lsls	r3, r3, #2
 800ac6c:	4929      	ldr	r1, [pc, #164]	; (800ad14 <USBD_LL_Init+0xc0>)
 800ac6e:	50d1      	str	r1, [r2, r3]

  hpcd_USB_FS.Instance = USB;
 800ac70:	4b28      	ldr	r3, [pc, #160]	; (800ad14 <USBD_LL_Init+0xc0>)
 800ac72:	4a29      	ldr	r2, [pc, #164]	; (800ad18 <USBD_LL_Init+0xc4>)
 800ac74:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800ac76:	4b27      	ldr	r3, [pc, #156]	; (800ad14 <USBD_LL_Init+0xc0>)
 800ac78:	2208      	movs	r2, #8
 800ac7a:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800ac7c:	4b25      	ldr	r3, [pc, #148]	; (800ad14 <USBD_LL_Init+0xc0>)
 800ac7e:	2202      	movs	r2, #2
 800ac80:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800ac82:	4b24      	ldr	r3, [pc, #144]	; (800ad14 <USBD_LL_Init+0xc0>)
 800ac84:	2202      	movs	r2, #2
 800ac86:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800ac88:	4b22      	ldr	r3, [pc, #136]	; (800ad14 <USBD_LL_Init+0xc0>)
 800ac8a:	2200      	movs	r2, #0
 800ac8c:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800ac8e:	4b21      	ldr	r3, [pc, #132]	; (800ad14 <USBD_LL_Init+0xc0>)
 800ac90:	2200      	movs	r2, #0
 800ac92:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800ac94:	4b1f      	ldr	r3, [pc, #124]	; (800ad14 <USBD_LL_Init+0xc0>)
 800ac96:	2200      	movs	r2, #0
 800ac98:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800ac9a:	4b1e      	ldr	r3, [pc, #120]	; (800ad14 <USBD_LL_Init+0xc0>)
 800ac9c:	0018      	movs	r0, r3
 800ac9e:	f7f7 fe07 	bl	80028b0 <HAL_PCD_Init>
 800aca2:	1e03      	subs	r3, r0, #0
 800aca4:	d001      	beq.n	800acaa <USBD_LL_Init+0x56>
  {
    Error_Handler( );
 800aca6:	f7f6 fbdd 	bl	8001464 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800acaa:	687a      	ldr	r2, [r7, #4]
 800acac:	23b0      	movs	r3, #176	; 0xb0
 800acae:	009b      	lsls	r3, r3, #2
 800acb0:	58d0      	ldr	r0, [r2, r3]
 800acb2:	2318      	movs	r3, #24
 800acb4:	2200      	movs	r2, #0
 800acb6:	2100      	movs	r1, #0
 800acb8:	f7f9 fbe8 	bl	800448c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800acbc:	687a      	ldr	r2, [r7, #4]
 800acbe:	23b0      	movs	r3, #176	; 0xb0
 800acc0:	009b      	lsls	r3, r3, #2
 800acc2:	58d0      	ldr	r0, [r2, r3]
 800acc4:	2358      	movs	r3, #88	; 0x58
 800acc6:	2200      	movs	r2, #0
 800acc8:	2180      	movs	r1, #128	; 0x80
 800acca:	f7f9 fbdf 	bl	800448c <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800acce:	687a      	ldr	r2, [r7, #4]
 800acd0:	23b0      	movs	r3, #176	; 0xb0
 800acd2:	009b      	lsls	r3, r3, #2
 800acd4:	58d0      	ldr	r0, [r2, r3]
 800acd6:	23c0      	movs	r3, #192	; 0xc0
 800acd8:	2200      	movs	r2, #0
 800acda:	2181      	movs	r1, #129	; 0x81
 800acdc:	f7f9 fbd6 	bl	800448c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800ace0:	687a      	ldr	r2, [r7, #4]
 800ace2:	23b0      	movs	r3, #176	; 0xb0
 800ace4:	009b      	lsls	r3, r3, #2
 800ace6:	58d0      	ldr	r0, [r2, r3]
 800ace8:	2388      	movs	r3, #136	; 0x88
 800acea:	005b      	lsls	r3, r3, #1
 800acec:	2200      	movs	r2, #0
 800acee:	2101      	movs	r1, #1
 800acf0:	f7f9 fbcc 	bl	800448c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800acf4:	687a      	ldr	r2, [r7, #4]
 800acf6:	23b0      	movs	r3, #176	; 0xb0
 800acf8:	009b      	lsls	r3, r3, #2
 800acfa:	58d0      	ldr	r0, [r2, r3]
 800acfc:	2380      	movs	r3, #128	; 0x80
 800acfe:	005b      	lsls	r3, r3, #1
 800ad00:	2200      	movs	r2, #0
 800ad02:	2182      	movs	r1, #130	; 0x82
 800ad04:	f7f9 fbc2 	bl	800448c <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800ad08:	2300      	movs	r3, #0
}
 800ad0a:	0018      	movs	r0, r3
 800ad0c:	46bd      	mov	sp, r7
 800ad0e:	b002      	add	sp, #8
 800ad10:	bd80      	pop	{r7, pc}
 800ad12:	46c0      	nop			; (mov r8, r8)
 800ad14:	200012b4 	.word	0x200012b4
 800ad18:	40005c00 	.word	0x40005c00

0800ad1c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800ad1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ad1e:	b085      	sub	sp, #20
 800ad20:	af00      	add	r7, sp, #0
 800ad22:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ad24:	210f      	movs	r1, #15
 800ad26:	187b      	adds	r3, r7, r1
 800ad28:	2200      	movs	r2, #0
 800ad2a:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ad2c:	260e      	movs	r6, #14
 800ad2e:	19bb      	adds	r3, r7, r6
 800ad30:	2200      	movs	r2, #0
 800ad32:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_Start(pdev->pData);
 800ad34:	687a      	ldr	r2, [r7, #4]
 800ad36:	23b0      	movs	r3, #176	; 0xb0
 800ad38:	009b      	lsls	r3, r3, #2
 800ad3a:	58d3      	ldr	r3, [r2, r3]
 800ad3c:	000d      	movs	r5, r1
 800ad3e:	187c      	adds	r4, r7, r1
 800ad40:	0018      	movs	r0, r3
 800ad42:	f7f7 fec5 	bl	8002ad0 <HAL_PCD_Start>
 800ad46:	0003      	movs	r3, r0
 800ad48:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ad4a:	19bc      	adds	r4, r7, r6
 800ad4c:	197b      	adds	r3, r7, r5
 800ad4e:	781b      	ldrb	r3, [r3, #0]
 800ad50:	0018      	movs	r0, r3
 800ad52:	f000 f9bc 	bl	800b0ce <USBD_Get_USB_Status>
 800ad56:	0003      	movs	r3, r0
 800ad58:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800ad5a:	19bb      	adds	r3, r7, r6
 800ad5c:	781b      	ldrb	r3, [r3, #0]
}
 800ad5e:	0018      	movs	r0, r3
 800ad60:	46bd      	mov	sp, r7
 800ad62:	b005      	add	sp, #20
 800ad64:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800ad66 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800ad66:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ad68:	b085      	sub	sp, #20
 800ad6a:	af00      	add	r7, sp, #0
 800ad6c:	6078      	str	r0, [r7, #4]
 800ad6e:	000c      	movs	r4, r1
 800ad70:	0010      	movs	r0, r2
 800ad72:	0019      	movs	r1, r3
 800ad74:	1cfb      	adds	r3, r7, #3
 800ad76:	1c22      	adds	r2, r4, #0
 800ad78:	701a      	strb	r2, [r3, #0]
 800ad7a:	1cbb      	adds	r3, r7, #2
 800ad7c:	1c02      	adds	r2, r0, #0
 800ad7e:	701a      	strb	r2, [r3, #0]
 800ad80:	003b      	movs	r3, r7
 800ad82:	1c0a      	adds	r2, r1, #0
 800ad84:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ad86:	260f      	movs	r6, #15
 800ad88:	19bb      	adds	r3, r7, r6
 800ad8a:	2200      	movs	r2, #0
 800ad8c:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ad8e:	250e      	movs	r5, #14
 800ad90:	197b      	adds	r3, r7, r5
 800ad92:	2200      	movs	r2, #0
 800ad94:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800ad96:	687a      	ldr	r2, [r7, #4]
 800ad98:	23b0      	movs	r3, #176	; 0xb0
 800ad9a:	009b      	lsls	r3, r3, #2
 800ad9c:	58d0      	ldr	r0, [r2, r3]
 800ad9e:	19bc      	adds	r4, r7, r6
 800ada0:	1cbb      	adds	r3, r7, #2
 800ada2:	781d      	ldrb	r5, [r3, #0]
 800ada4:	003b      	movs	r3, r7
 800ada6:	881a      	ldrh	r2, [r3, #0]
 800ada8:	1cfb      	adds	r3, r7, #3
 800adaa:	7819      	ldrb	r1, [r3, #0]
 800adac:	002b      	movs	r3, r5
 800adae:	f7f8 f85c 	bl	8002e6a <HAL_PCD_EP_Open>
 800adb2:	0003      	movs	r3, r0
 800adb4:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800adb6:	250e      	movs	r5, #14
 800adb8:	197c      	adds	r4, r7, r5
 800adba:	19bb      	adds	r3, r7, r6
 800adbc:	781b      	ldrb	r3, [r3, #0]
 800adbe:	0018      	movs	r0, r3
 800adc0:	f000 f985 	bl	800b0ce <USBD_Get_USB_Status>
 800adc4:	0003      	movs	r3, r0
 800adc6:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800adc8:	197b      	adds	r3, r7, r5
 800adca:	781b      	ldrb	r3, [r3, #0]
}
 800adcc:	0018      	movs	r0, r3
 800adce:	46bd      	mov	sp, r7
 800add0:	b005      	add	sp, #20
 800add2:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800add4 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800add4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800add6:	b085      	sub	sp, #20
 800add8:	af00      	add	r7, sp, #0
 800adda:	6078      	str	r0, [r7, #4]
 800addc:	000a      	movs	r2, r1
 800adde:	1cfb      	adds	r3, r7, #3
 800ade0:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ade2:	210f      	movs	r1, #15
 800ade4:	187b      	adds	r3, r7, r1
 800ade6:	2200      	movs	r2, #0
 800ade8:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800adea:	260e      	movs	r6, #14
 800adec:	19bb      	adds	r3, r7, r6
 800adee:	2200      	movs	r2, #0
 800adf0:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800adf2:	687a      	ldr	r2, [r7, #4]
 800adf4:	23b0      	movs	r3, #176	; 0xb0
 800adf6:	009b      	lsls	r3, r3, #2
 800adf8:	58d2      	ldr	r2, [r2, r3]
 800adfa:	000d      	movs	r5, r1
 800adfc:	187c      	adds	r4, r7, r1
 800adfe:	1cfb      	adds	r3, r7, #3
 800ae00:	781b      	ldrb	r3, [r3, #0]
 800ae02:	0019      	movs	r1, r3
 800ae04:	0010      	movs	r0, r2
 800ae06:	f7f8 f8a8 	bl	8002f5a <HAL_PCD_EP_Close>
 800ae0a:	0003      	movs	r3, r0
 800ae0c:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ae0e:	19bc      	adds	r4, r7, r6
 800ae10:	197b      	adds	r3, r7, r5
 800ae12:	781b      	ldrb	r3, [r3, #0]
 800ae14:	0018      	movs	r0, r3
 800ae16:	f000 f95a 	bl	800b0ce <USBD_Get_USB_Status>
 800ae1a:	0003      	movs	r3, r0
 800ae1c:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800ae1e:	19bb      	adds	r3, r7, r6
 800ae20:	781b      	ldrb	r3, [r3, #0]
}
 800ae22:	0018      	movs	r0, r3
 800ae24:	46bd      	mov	sp, r7
 800ae26:	b005      	add	sp, #20
 800ae28:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800ae2a <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ae2a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ae2c:	b085      	sub	sp, #20
 800ae2e:	af00      	add	r7, sp, #0
 800ae30:	6078      	str	r0, [r7, #4]
 800ae32:	000a      	movs	r2, r1
 800ae34:	1cfb      	adds	r3, r7, #3
 800ae36:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ae38:	210f      	movs	r1, #15
 800ae3a:	187b      	adds	r3, r7, r1
 800ae3c:	2200      	movs	r2, #0
 800ae3e:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ae40:	260e      	movs	r6, #14
 800ae42:	19bb      	adds	r3, r7, r6
 800ae44:	2200      	movs	r2, #0
 800ae46:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800ae48:	687a      	ldr	r2, [r7, #4]
 800ae4a:	23b0      	movs	r3, #176	; 0xb0
 800ae4c:	009b      	lsls	r3, r3, #2
 800ae4e:	58d2      	ldr	r2, [r2, r3]
 800ae50:	000d      	movs	r5, r1
 800ae52:	187c      	adds	r4, r7, r1
 800ae54:	1cfb      	adds	r3, r7, #3
 800ae56:	781b      	ldrb	r3, [r3, #0]
 800ae58:	0019      	movs	r1, r3
 800ae5a:	0010      	movs	r0, r2
 800ae5c:	f7f8 f974 	bl	8003148 <HAL_PCD_EP_SetStall>
 800ae60:	0003      	movs	r3, r0
 800ae62:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ae64:	19bc      	adds	r4, r7, r6
 800ae66:	197b      	adds	r3, r7, r5
 800ae68:	781b      	ldrb	r3, [r3, #0]
 800ae6a:	0018      	movs	r0, r3
 800ae6c:	f000 f92f 	bl	800b0ce <USBD_Get_USB_Status>
 800ae70:	0003      	movs	r3, r0
 800ae72:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800ae74:	19bb      	adds	r3, r7, r6
 800ae76:	781b      	ldrb	r3, [r3, #0]
}
 800ae78:	0018      	movs	r0, r3
 800ae7a:	46bd      	mov	sp, r7
 800ae7c:	b005      	add	sp, #20
 800ae7e:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800ae80 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ae80:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ae82:	b085      	sub	sp, #20
 800ae84:	af00      	add	r7, sp, #0
 800ae86:	6078      	str	r0, [r7, #4]
 800ae88:	000a      	movs	r2, r1
 800ae8a:	1cfb      	adds	r3, r7, #3
 800ae8c:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ae8e:	210f      	movs	r1, #15
 800ae90:	187b      	adds	r3, r7, r1
 800ae92:	2200      	movs	r2, #0
 800ae94:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ae96:	260e      	movs	r6, #14
 800ae98:	19bb      	adds	r3, r7, r6
 800ae9a:	2200      	movs	r2, #0
 800ae9c:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800ae9e:	687a      	ldr	r2, [r7, #4]
 800aea0:	23b0      	movs	r3, #176	; 0xb0
 800aea2:	009b      	lsls	r3, r3, #2
 800aea4:	58d2      	ldr	r2, [r2, r3]
 800aea6:	000d      	movs	r5, r1
 800aea8:	187c      	adds	r4, r7, r1
 800aeaa:	1cfb      	adds	r3, r7, #3
 800aeac:	781b      	ldrb	r3, [r3, #0]
 800aeae:	0019      	movs	r1, r3
 800aeb0:	0010      	movs	r0, r2
 800aeb2:	f7f8 f9a5 	bl	8003200 <HAL_PCD_EP_ClrStall>
 800aeb6:	0003      	movs	r3, r0
 800aeb8:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800aeba:	19bc      	adds	r4, r7, r6
 800aebc:	197b      	adds	r3, r7, r5
 800aebe:	781b      	ldrb	r3, [r3, #0]
 800aec0:	0018      	movs	r0, r3
 800aec2:	f000 f904 	bl	800b0ce <USBD_Get_USB_Status>
 800aec6:	0003      	movs	r3, r0
 800aec8:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800aeca:	19bb      	adds	r3, r7, r6
 800aecc:	781b      	ldrb	r3, [r3, #0]
}
 800aece:	0018      	movs	r0, r3
 800aed0:	46bd      	mov	sp, r7
 800aed2:	b005      	add	sp, #20
 800aed4:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800aed6 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800aed6:	b580      	push	{r7, lr}
 800aed8:	b084      	sub	sp, #16
 800aeda:	af00      	add	r7, sp, #0
 800aedc:	6078      	str	r0, [r7, #4]
 800aede:	000a      	movs	r2, r1
 800aee0:	1cfb      	adds	r3, r7, #3
 800aee2:	701a      	strb	r2, [r3, #0]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800aee4:	687a      	ldr	r2, [r7, #4]
 800aee6:	23b0      	movs	r3, #176	; 0xb0
 800aee8:	009b      	lsls	r3, r3, #2
 800aeea:	58d3      	ldr	r3, [r2, r3]
 800aeec:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800aeee:	1cfb      	adds	r3, r7, #3
 800aef0:	781b      	ldrb	r3, [r3, #0]
 800aef2:	b25b      	sxtb	r3, r3
 800aef4:	2b00      	cmp	r3, #0
 800aef6:	da0d      	bge.n	800af14 <USBD_LL_IsStallEP+0x3e>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800aef8:	1cfb      	adds	r3, r7, #3
 800aefa:	781b      	ldrb	r3, [r3, #0]
 800aefc:	227f      	movs	r2, #127	; 0x7f
 800aefe:	4013      	ands	r3, r2
 800af00:	68f9      	ldr	r1, [r7, #12]
 800af02:	1c5a      	adds	r2, r3, #1
 800af04:	0013      	movs	r3, r2
 800af06:	009b      	lsls	r3, r3, #2
 800af08:	189b      	adds	r3, r3, r2
 800af0a:	00db      	lsls	r3, r3, #3
 800af0c:	18cb      	adds	r3, r1, r3
 800af0e:	3302      	adds	r3, #2
 800af10:	781b      	ldrb	r3, [r3, #0]
 800af12:	e00d      	b.n	800af30 <USBD_LL_IsStallEP+0x5a>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800af14:	1cfb      	adds	r3, r7, #3
 800af16:	781b      	ldrb	r3, [r3, #0]
 800af18:	227f      	movs	r2, #127	; 0x7f
 800af1a:	401a      	ands	r2, r3
 800af1c:	68f8      	ldr	r0, [r7, #12]
 800af1e:	23b5      	movs	r3, #181	; 0xb5
 800af20:	0059      	lsls	r1, r3, #1
 800af22:	0013      	movs	r3, r2
 800af24:	009b      	lsls	r3, r3, #2
 800af26:	189b      	adds	r3, r3, r2
 800af28:	00db      	lsls	r3, r3, #3
 800af2a:	18c3      	adds	r3, r0, r3
 800af2c:	185b      	adds	r3, r3, r1
 800af2e:	781b      	ldrb	r3, [r3, #0]
  }
}
 800af30:	0018      	movs	r0, r3
 800af32:	46bd      	mov	sp, r7
 800af34:	b004      	add	sp, #16
 800af36:	bd80      	pop	{r7, pc}

0800af38 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800af38:	b5f0      	push	{r4, r5, r6, r7, lr}
 800af3a:	b085      	sub	sp, #20
 800af3c:	af00      	add	r7, sp, #0
 800af3e:	6078      	str	r0, [r7, #4]
 800af40:	000a      	movs	r2, r1
 800af42:	1cfb      	adds	r3, r7, #3
 800af44:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800af46:	210f      	movs	r1, #15
 800af48:	187b      	adds	r3, r7, r1
 800af4a:	2200      	movs	r2, #0
 800af4c:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800af4e:	260e      	movs	r6, #14
 800af50:	19bb      	adds	r3, r7, r6
 800af52:	2200      	movs	r2, #0
 800af54:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800af56:	687a      	ldr	r2, [r7, #4]
 800af58:	23b0      	movs	r3, #176	; 0xb0
 800af5a:	009b      	lsls	r3, r3, #2
 800af5c:	58d2      	ldr	r2, [r2, r3]
 800af5e:	000d      	movs	r5, r1
 800af60:	187c      	adds	r4, r7, r1
 800af62:	1cfb      	adds	r3, r7, #3
 800af64:	781b      	ldrb	r3, [r3, #0]
 800af66:	0019      	movs	r1, r3
 800af68:	0010      	movs	r0, r2
 800af6a:	f7f7 ff53 	bl	8002e14 <HAL_PCD_SetAddress>
 800af6e:	0003      	movs	r3, r0
 800af70:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800af72:	19bc      	adds	r4, r7, r6
 800af74:	197b      	adds	r3, r7, r5
 800af76:	781b      	ldrb	r3, [r3, #0]
 800af78:	0018      	movs	r0, r3
 800af7a:	f000 f8a8 	bl	800b0ce <USBD_Get_USB_Status>
 800af7e:	0003      	movs	r3, r0
 800af80:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800af82:	19bb      	adds	r3, r7, r6
 800af84:	781b      	ldrb	r3, [r3, #0]
}
 800af86:	0018      	movs	r0, r3
 800af88:	46bd      	mov	sp, r7
 800af8a:	b005      	add	sp, #20
 800af8c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800af8e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800af8e:	b5f0      	push	{r4, r5, r6, r7, lr}
 800af90:	b087      	sub	sp, #28
 800af92:	af00      	add	r7, sp, #0
 800af94:	60f8      	str	r0, [r7, #12]
 800af96:	0008      	movs	r0, r1
 800af98:	607a      	str	r2, [r7, #4]
 800af9a:	0019      	movs	r1, r3
 800af9c:	230b      	movs	r3, #11
 800af9e:	18fb      	adds	r3, r7, r3
 800afa0:	1c02      	adds	r2, r0, #0
 800afa2:	701a      	strb	r2, [r3, #0]
 800afa4:	2408      	movs	r4, #8
 800afa6:	193b      	adds	r3, r7, r4
 800afa8:	1c0a      	adds	r2, r1, #0
 800afaa:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800afac:	2117      	movs	r1, #23
 800afae:	187b      	adds	r3, r7, r1
 800afb0:	2200      	movs	r2, #0
 800afb2:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800afb4:	2516      	movs	r5, #22
 800afb6:	197b      	adds	r3, r7, r5
 800afb8:	2200      	movs	r2, #0
 800afba:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800afbc:	68fa      	ldr	r2, [r7, #12]
 800afbe:	23b0      	movs	r3, #176	; 0xb0
 800afc0:	009b      	lsls	r3, r3, #2
 800afc2:	58d0      	ldr	r0, [r2, r3]
 800afc4:	193b      	adds	r3, r7, r4
 800afc6:	881d      	ldrh	r5, [r3, #0]
 800afc8:	000e      	movs	r6, r1
 800afca:	187c      	adds	r4, r7, r1
 800afcc:	687a      	ldr	r2, [r7, #4]
 800afce:	230b      	movs	r3, #11
 800afd0:	18fb      	adds	r3, r7, r3
 800afd2:	7819      	ldrb	r1, [r3, #0]
 800afd4:	002b      	movs	r3, r5
 800afd6:	f7f8 f86e 	bl	80030b6 <HAL_PCD_EP_Transmit>
 800afda:	0003      	movs	r3, r0
 800afdc:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800afde:	2516      	movs	r5, #22
 800afe0:	197c      	adds	r4, r7, r5
 800afe2:	19bb      	adds	r3, r7, r6
 800afe4:	781b      	ldrb	r3, [r3, #0]
 800afe6:	0018      	movs	r0, r3
 800afe8:	f000 f871 	bl	800b0ce <USBD_Get_USB_Status>
 800afec:	0003      	movs	r3, r0
 800afee:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800aff0:	197b      	adds	r3, r7, r5
 800aff2:	781b      	ldrb	r3, [r3, #0]
}
 800aff4:	0018      	movs	r0, r3
 800aff6:	46bd      	mov	sp, r7
 800aff8:	b007      	add	sp, #28
 800affa:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800affc <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800affc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800affe:	b087      	sub	sp, #28
 800b000:	af00      	add	r7, sp, #0
 800b002:	60f8      	str	r0, [r7, #12]
 800b004:	0008      	movs	r0, r1
 800b006:	607a      	str	r2, [r7, #4]
 800b008:	0019      	movs	r1, r3
 800b00a:	230b      	movs	r3, #11
 800b00c:	18fb      	adds	r3, r7, r3
 800b00e:	1c02      	adds	r2, r0, #0
 800b010:	701a      	strb	r2, [r3, #0]
 800b012:	2408      	movs	r4, #8
 800b014:	193b      	adds	r3, r7, r4
 800b016:	1c0a      	adds	r2, r1, #0
 800b018:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b01a:	2117      	movs	r1, #23
 800b01c:	187b      	adds	r3, r7, r1
 800b01e:	2200      	movs	r2, #0
 800b020:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b022:	2516      	movs	r5, #22
 800b024:	197b      	adds	r3, r7, r5
 800b026:	2200      	movs	r2, #0
 800b028:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800b02a:	68fa      	ldr	r2, [r7, #12]
 800b02c:	23b0      	movs	r3, #176	; 0xb0
 800b02e:	009b      	lsls	r3, r3, #2
 800b030:	58d0      	ldr	r0, [r2, r3]
 800b032:	193b      	adds	r3, r7, r4
 800b034:	881d      	ldrh	r5, [r3, #0]
 800b036:	000e      	movs	r6, r1
 800b038:	187c      	adds	r4, r7, r1
 800b03a:	687a      	ldr	r2, [r7, #4]
 800b03c:	230b      	movs	r3, #11
 800b03e:	18fb      	adds	r3, r7, r3
 800b040:	7819      	ldrb	r1, [r3, #0]
 800b042:	002b      	movs	r3, r5
 800b044:	f7f7 ffda 	bl	8002ffc <HAL_PCD_EP_Receive>
 800b048:	0003      	movs	r3, r0
 800b04a:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b04c:	2516      	movs	r5, #22
 800b04e:	197c      	adds	r4, r7, r5
 800b050:	19bb      	adds	r3, r7, r6
 800b052:	781b      	ldrb	r3, [r3, #0]
 800b054:	0018      	movs	r0, r3
 800b056:	f000 f83a 	bl	800b0ce <USBD_Get_USB_Status>
 800b05a:	0003      	movs	r3, r0
 800b05c:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800b05e:	197b      	adds	r3, r7, r5
 800b060:	781b      	ldrb	r3, [r3, #0]
}
 800b062:	0018      	movs	r0, r3
 800b064:	46bd      	mov	sp, r7
 800b066:	b007      	add	sp, #28
 800b068:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800b06a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b06a:	b580      	push	{r7, lr}
 800b06c:	b082      	sub	sp, #8
 800b06e:	af00      	add	r7, sp, #0
 800b070:	6078      	str	r0, [r7, #4]
 800b072:	000a      	movs	r2, r1
 800b074:	1cfb      	adds	r3, r7, #3
 800b076:	701a      	strb	r2, [r3, #0]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800b078:	687a      	ldr	r2, [r7, #4]
 800b07a:	23b0      	movs	r3, #176	; 0xb0
 800b07c:	009b      	lsls	r3, r3, #2
 800b07e:	58d2      	ldr	r2, [r2, r3]
 800b080:	1cfb      	adds	r3, r7, #3
 800b082:	781b      	ldrb	r3, [r3, #0]
 800b084:	0019      	movs	r1, r3
 800b086:	0010      	movs	r0, r2
 800b088:	f7f7 fffc 	bl	8003084 <HAL_PCD_EP_GetRxCount>
 800b08c:	0003      	movs	r3, r0
}
 800b08e:	0018      	movs	r0, r3
 800b090:	46bd      	mov	sp, r7
 800b092:	b002      	add	sp, #8
 800b094:	bd80      	pop	{r7, pc}
	...

0800b098 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800b098:	b580      	push	{r7, lr}
 800b09a:	b082      	sub	sp, #8
 800b09c:	af00      	add	r7, sp, #0
 800b09e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800b0a0:	4b02      	ldr	r3, [pc, #8]	; (800b0ac <USBD_static_malloc+0x14>)
}
 800b0a2:	0018      	movs	r0, r3
 800b0a4:	46bd      	mov	sp, r7
 800b0a6:	b002      	add	sp, #8
 800b0a8:	bd80      	pop	{r7, pc}
 800b0aa:	46c0      	nop			; (mov r8, r8)
 800b0ac:	2000021c 	.word	0x2000021c

0800b0b0 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800b0b0:	b580      	push	{r7, lr}
 800b0b2:	b082      	sub	sp, #8
 800b0b4:	af00      	add	r7, sp, #0
 800b0b6:	6078      	str	r0, [r7, #4]

}
 800b0b8:	46c0      	nop			; (mov r8, r8)
 800b0ba:	46bd      	mov	sp, r7
 800b0bc:	b002      	add	sp, #8
 800b0be:	bd80      	pop	{r7, pc}

0800b0c0 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB Resume CallBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800b0c0:	b580      	push	{r7, lr}
 800b0c2:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800b0c4:	f7f5 faa8 	bl	8000618 <SystemClock_Config>
}
 800b0c8:	46c0      	nop			; (mov r8, r8)
 800b0ca:	46bd      	mov	sp, r7
 800b0cc:	bd80      	pop	{r7, pc}

0800b0ce <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800b0ce:	b580      	push	{r7, lr}
 800b0d0:	b084      	sub	sp, #16
 800b0d2:	af00      	add	r7, sp, #0
 800b0d4:	0002      	movs	r2, r0
 800b0d6:	1dfb      	adds	r3, r7, #7
 800b0d8:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b0da:	230f      	movs	r3, #15
 800b0dc:	18fb      	adds	r3, r7, r3
 800b0de:	2200      	movs	r2, #0
 800b0e0:	701a      	strb	r2, [r3, #0]

  switch (hal_status)
 800b0e2:	1dfb      	adds	r3, r7, #7
 800b0e4:	781b      	ldrb	r3, [r3, #0]
 800b0e6:	2b03      	cmp	r3, #3
 800b0e8:	d017      	beq.n	800b11a <USBD_Get_USB_Status+0x4c>
 800b0ea:	dc1b      	bgt.n	800b124 <USBD_Get_USB_Status+0x56>
 800b0ec:	2b02      	cmp	r3, #2
 800b0ee:	d00f      	beq.n	800b110 <USBD_Get_USB_Status+0x42>
 800b0f0:	dc18      	bgt.n	800b124 <USBD_Get_USB_Status+0x56>
 800b0f2:	2b00      	cmp	r3, #0
 800b0f4:	d002      	beq.n	800b0fc <USBD_Get_USB_Status+0x2e>
 800b0f6:	2b01      	cmp	r3, #1
 800b0f8:	d005      	beq.n	800b106 <USBD_Get_USB_Status+0x38>
 800b0fa:	e013      	b.n	800b124 <USBD_Get_USB_Status+0x56>
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800b0fc:	230f      	movs	r3, #15
 800b0fe:	18fb      	adds	r3, r7, r3
 800b100:	2200      	movs	r2, #0
 800b102:	701a      	strb	r2, [r3, #0]
    break;
 800b104:	e013      	b.n	800b12e <USBD_Get_USB_Status+0x60>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800b106:	230f      	movs	r3, #15
 800b108:	18fb      	adds	r3, r7, r3
 800b10a:	2202      	movs	r2, #2
 800b10c:	701a      	strb	r2, [r3, #0]
    break;
 800b10e:	e00e      	b.n	800b12e <USBD_Get_USB_Status+0x60>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800b110:	230f      	movs	r3, #15
 800b112:	18fb      	adds	r3, r7, r3
 800b114:	2201      	movs	r2, #1
 800b116:	701a      	strb	r2, [r3, #0]
    break;
 800b118:	e009      	b.n	800b12e <USBD_Get_USB_Status+0x60>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800b11a:	230f      	movs	r3, #15
 800b11c:	18fb      	adds	r3, r7, r3
 800b11e:	2202      	movs	r2, #2
 800b120:	701a      	strb	r2, [r3, #0]
    break;
 800b122:	e004      	b.n	800b12e <USBD_Get_USB_Status+0x60>
    default :
      usb_status = USBD_FAIL;
 800b124:	230f      	movs	r3, #15
 800b126:	18fb      	adds	r3, r7, r3
 800b128:	2202      	movs	r2, #2
 800b12a:	701a      	strb	r2, [r3, #0]
    break;
 800b12c:	46c0      	nop			; (mov r8, r8)
  }
  return usb_status;
 800b12e:	230f      	movs	r3, #15
 800b130:	18fb      	adds	r3, r7, r3
 800b132:	781b      	ldrb	r3, [r3, #0]
}
 800b134:	0018      	movs	r0, r3
 800b136:	46bd      	mov	sp, r7
 800b138:	b004      	add	sp, #16
 800b13a:	bd80      	pop	{r7, pc}

0800b13c <__errno>:
 800b13c:	4b01      	ldr	r3, [pc, #4]	; (800b144 <__errno+0x8>)
 800b13e:	6818      	ldr	r0, [r3, #0]
 800b140:	4770      	bx	lr
 800b142:	46c0      	nop			; (mov r8, r8)
 800b144:	2000017c 	.word	0x2000017c

0800b148 <__libc_init_array>:
 800b148:	b570      	push	{r4, r5, r6, lr}
 800b14a:	2600      	movs	r6, #0
 800b14c:	4d0c      	ldr	r5, [pc, #48]	; (800b180 <__libc_init_array+0x38>)
 800b14e:	4c0d      	ldr	r4, [pc, #52]	; (800b184 <__libc_init_array+0x3c>)
 800b150:	1b64      	subs	r4, r4, r5
 800b152:	10a4      	asrs	r4, r4, #2
 800b154:	42a6      	cmp	r6, r4
 800b156:	d109      	bne.n	800b16c <__libc_init_array+0x24>
 800b158:	2600      	movs	r6, #0
 800b15a:	f000 fc5b 	bl	800ba14 <_init>
 800b15e:	4d0a      	ldr	r5, [pc, #40]	; (800b188 <__libc_init_array+0x40>)
 800b160:	4c0a      	ldr	r4, [pc, #40]	; (800b18c <__libc_init_array+0x44>)
 800b162:	1b64      	subs	r4, r4, r5
 800b164:	10a4      	asrs	r4, r4, #2
 800b166:	42a6      	cmp	r6, r4
 800b168:	d105      	bne.n	800b176 <__libc_init_array+0x2e>
 800b16a:	bd70      	pop	{r4, r5, r6, pc}
 800b16c:	00b3      	lsls	r3, r6, #2
 800b16e:	58eb      	ldr	r3, [r5, r3]
 800b170:	4798      	blx	r3
 800b172:	3601      	adds	r6, #1
 800b174:	e7ee      	b.n	800b154 <__libc_init_array+0xc>
 800b176:	00b3      	lsls	r3, r6, #2
 800b178:	58eb      	ldr	r3, [r5, r3]
 800b17a:	4798      	blx	r3
 800b17c:	3601      	adds	r6, #1
 800b17e:	e7f2      	b.n	800b166 <__libc_init_array+0x1e>
 800b180:	0800bc44 	.word	0x0800bc44
 800b184:	0800bc44 	.word	0x0800bc44
 800b188:	0800bc44 	.word	0x0800bc44
 800b18c:	0800bc48 	.word	0x0800bc48

0800b190 <malloc>:
 800b190:	b510      	push	{r4, lr}
 800b192:	4b03      	ldr	r3, [pc, #12]	; (800b1a0 <malloc+0x10>)
 800b194:	0001      	movs	r1, r0
 800b196:	6818      	ldr	r0, [r3, #0]
 800b198:	f000 f860 	bl	800b25c <_malloc_r>
 800b19c:	bd10      	pop	{r4, pc}
 800b19e:	46c0      	nop			; (mov r8, r8)
 800b1a0:	2000017c 	.word	0x2000017c

0800b1a4 <free>:
 800b1a4:	b510      	push	{r4, lr}
 800b1a6:	4b03      	ldr	r3, [pc, #12]	; (800b1b4 <free+0x10>)
 800b1a8:	0001      	movs	r1, r0
 800b1aa:	6818      	ldr	r0, [r3, #0]
 800b1ac:	f000 f80c 	bl	800b1c8 <_free_r>
 800b1b0:	bd10      	pop	{r4, pc}
 800b1b2:	46c0      	nop			; (mov r8, r8)
 800b1b4:	2000017c 	.word	0x2000017c

0800b1b8 <memset>:
 800b1b8:	0003      	movs	r3, r0
 800b1ba:	1882      	adds	r2, r0, r2
 800b1bc:	4293      	cmp	r3, r2
 800b1be:	d100      	bne.n	800b1c2 <memset+0xa>
 800b1c0:	4770      	bx	lr
 800b1c2:	7019      	strb	r1, [r3, #0]
 800b1c4:	3301      	adds	r3, #1
 800b1c6:	e7f9      	b.n	800b1bc <memset+0x4>

0800b1c8 <_free_r>:
 800b1c8:	b570      	push	{r4, r5, r6, lr}
 800b1ca:	0005      	movs	r5, r0
 800b1cc:	2900      	cmp	r1, #0
 800b1ce:	d010      	beq.n	800b1f2 <_free_r+0x2a>
 800b1d0:	1f0c      	subs	r4, r1, #4
 800b1d2:	6823      	ldr	r3, [r4, #0]
 800b1d4:	2b00      	cmp	r3, #0
 800b1d6:	da00      	bge.n	800b1da <_free_r+0x12>
 800b1d8:	18e4      	adds	r4, r4, r3
 800b1da:	0028      	movs	r0, r5
 800b1dc:	f000 f8ce 	bl	800b37c <__malloc_lock>
 800b1e0:	4a1d      	ldr	r2, [pc, #116]	; (800b258 <_free_r+0x90>)
 800b1e2:	6813      	ldr	r3, [r2, #0]
 800b1e4:	2b00      	cmp	r3, #0
 800b1e6:	d105      	bne.n	800b1f4 <_free_r+0x2c>
 800b1e8:	6063      	str	r3, [r4, #4]
 800b1ea:	6014      	str	r4, [r2, #0]
 800b1ec:	0028      	movs	r0, r5
 800b1ee:	f000 f8cd 	bl	800b38c <__malloc_unlock>
 800b1f2:	bd70      	pop	{r4, r5, r6, pc}
 800b1f4:	42a3      	cmp	r3, r4
 800b1f6:	d908      	bls.n	800b20a <_free_r+0x42>
 800b1f8:	6821      	ldr	r1, [r4, #0]
 800b1fa:	1860      	adds	r0, r4, r1
 800b1fc:	4283      	cmp	r3, r0
 800b1fe:	d1f3      	bne.n	800b1e8 <_free_r+0x20>
 800b200:	6818      	ldr	r0, [r3, #0]
 800b202:	685b      	ldr	r3, [r3, #4]
 800b204:	1841      	adds	r1, r0, r1
 800b206:	6021      	str	r1, [r4, #0]
 800b208:	e7ee      	b.n	800b1e8 <_free_r+0x20>
 800b20a:	001a      	movs	r2, r3
 800b20c:	685b      	ldr	r3, [r3, #4]
 800b20e:	2b00      	cmp	r3, #0
 800b210:	d001      	beq.n	800b216 <_free_r+0x4e>
 800b212:	42a3      	cmp	r3, r4
 800b214:	d9f9      	bls.n	800b20a <_free_r+0x42>
 800b216:	6811      	ldr	r1, [r2, #0]
 800b218:	1850      	adds	r0, r2, r1
 800b21a:	42a0      	cmp	r0, r4
 800b21c:	d10b      	bne.n	800b236 <_free_r+0x6e>
 800b21e:	6820      	ldr	r0, [r4, #0]
 800b220:	1809      	adds	r1, r1, r0
 800b222:	1850      	adds	r0, r2, r1
 800b224:	6011      	str	r1, [r2, #0]
 800b226:	4283      	cmp	r3, r0
 800b228:	d1e0      	bne.n	800b1ec <_free_r+0x24>
 800b22a:	6818      	ldr	r0, [r3, #0]
 800b22c:	685b      	ldr	r3, [r3, #4]
 800b22e:	1841      	adds	r1, r0, r1
 800b230:	6011      	str	r1, [r2, #0]
 800b232:	6053      	str	r3, [r2, #4]
 800b234:	e7da      	b.n	800b1ec <_free_r+0x24>
 800b236:	42a0      	cmp	r0, r4
 800b238:	d902      	bls.n	800b240 <_free_r+0x78>
 800b23a:	230c      	movs	r3, #12
 800b23c:	602b      	str	r3, [r5, #0]
 800b23e:	e7d5      	b.n	800b1ec <_free_r+0x24>
 800b240:	6821      	ldr	r1, [r4, #0]
 800b242:	1860      	adds	r0, r4, r1
 800b244:	4283      	cmp	r3, r0
 800b246:	d103      	bne.n	800b250 <_free_r+0x88>
 800b248:	6818      	ldr	r0, [r3, #0]
 800b24a:	685b      	ldr	r3, [r3, #4]
 800b24c:	1841      	adds	r1, r0, r1
 800b24e:	6021      	str	r1, [r4, #0]
 800b250:	6063      	str	r3, [r4, #4]
 800b252:	6054      	str	r4, [r2, #4]
 800b254:	e7ca      	b.n	800b1ec <_free_r+0x24>
 800b256:	46c0      	nop			; (mov r8, r8)
 800b258:	2000043c 	.word	0x2000043c

0800b25c <_malloc_r>:
 800b25c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b25e:	2303      	movs	r3, #3
 800b260:	1ccd      	adds	r5, r1, #3
 800b262:	439d      	bics	r5, r3
 800b264:	3508      	adds	r5, #8
 800b266:	0006      	movs	r6, r0
 800b268:	2d0c      	cmp	r5, #12
 800b26a:	d21f      	bcs.n	800b2ac <_malloc_r+0x50>
 800b26c:	250c      	movs	r5, #12
 800b26e:	42a9      	cmp	r1, r5
 800b270:	d81e      	bhi.n	800b2b0 <_malloc_r+0x54>
 800b272:	0030      	movs	r0, r6
 800b274:	f000 f882 	bl	800b37c <__malloc_lock>
 800b278:	4925      	ldr	r1, [pc, #148]	; (800b310 <_malloc_r+0xb4>)
 800b27a:	680a      	ldr	r2, [r1, #0]
 800b27c:	0014      	movs	r4, r2
 800b27e:	2c00      	cmp	r4, #0
 800b280:	d11a      	bne.n	800b2b8 <_malloc_r+0x5c>
 800b282:	4f24      	ldr	r7, [pc, #144]	; (800b314 <_malloc_r+0xb8>)
 800b284:	683b      	ldr	r3, [r7, #0]
 800b286:	2b00      	cmp	r3, #0
 800b288:	d104      	bne.n	800b294 <_malloc_r+0x38>
 800b28a:	0021      	movs	r1, r4
 800b28c:	0030      	movs	r0, r6
 800b28e:	f000 f843 	bl	800b318 <_sbrk_r>
 800b292:	6038      	str	r0, [r7, #0]
 800b294:	0029      	movs	r1, r5
 800b296:	0030      	movs	r0, r6
 800b298:	f000 f83e 	bl	800b318 <_sbrk_r>
 800b29c:	1c43      	adds	r3, r0, #1
 800b29e:	d12b      	bne.n	800b2f8 <_malloc_r+0x9c>
 800b2a0:	230c      	movs	r3, #12
 800b2a2:	0030      	movs	r0, r6
 800b2a4:	6033      	str	r3, [r6, #0]
 800b2a6:	f000 f871 	bl	800b38c <__malloc_unlock>
 800b2aa:	e003      	b.n	800b2b4 <_malloc_r+0x58>
 800b2ac:	2d00      	cmp	r5, #0
 800b2ae:	dade      	bge.n	800b26e <_malloc_r+0x12>
 800b2b0:	230c      	movs	r3, #12
 800b2b2:	6033      	str	r3, [r6, #0]
 800b2b4:	2000      	movs	r0, #0
 800b2b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b2b8:	6823      	ldr	r3, [r4, #0]
 800b2ba:	1b5b      	subs	r3, r3, r5
 800b2bc:	d419      	bmi.n	800b2f2 <_malloc_r+0x96>
 800b2be:	2b0b      	cmp	r3, #11
 800b2c0:	d903      	bls.n	800b2ca <_malloc_r+0x6e>
 800b2c2:	6023      	str	r3, [r4, #0]
 800b2c4:	18e4      	adds	r4, r4, r3
 800b2c6:	6025      	str	r5, [r4, #0]
 800b2c8:	e003      	b.n	800b2d2 <_malloc_r+0x76>
 800b2ca:	6863      	ldr	r3, [r4, #4]
 800b2cc:	42a2      	cmp	r2, r4
 800b2ce:	d10e      	bne.n	800b2ee <_malloc_r+0x92>
 800b2d0:	600b      	str	r3, [r1, #0]
 800b2d2:	0030      	movs	r0, r6
 800b2d4:	f000 f85a 	bl	800b38c <__malloc_unlock>
 800b2d8:	0020      	movs	r0, r4
 800b2da:	2207      	movs	r2, #7
 800b2dc:	300b      	adds	r0, #11
 800b2de:	1d23      	adds	r3, r4, #4
 800b2e0:	4390      	bics	r0, r2
 800b2e2:	1ac2      	subs	r2, r0, r3
 800b2e4:	4298      	cmp	r0, r3
 800b2e6:	d0e6      	beq.n	800b2b6 <_malloc_r+0x5a>
 800b2e8:	1a1b      	subs	r3, r3, r0
 800b2ea:	50a3      	str	r3, [r4, r2]
 800b2ec:	e7e3      	b.n	800b2b6 <_malloc_r+0x5a>
 800b2ee:	6053      	str	r3, [r2, #4]
 800b2f0:	e7ef      	b.n	800b2d2 <_malloc_r+0x76>
 800b2f2:	0022      	movs	r2, r4
 800b2f4:	6864      	ldr	r4, [r4, #4]
 800b2f6:	e7c2      	b.n	800b27e <_malloc_r+0x22>
 800b2f8:	2303      	movs	r3, #3
 800b2fa:	1cc4      	adds	r4, r0, #3
 800b2fc:	439c      	bics	r4, r3
 800b2fe:	42a0      	cmp	r0, r4
 800b300:	d0e1      	beq.n	800b2c6 <_malloc_r+0x6a>
 800b302:	1a21      	subs	r1, r4, r0
 800b304:	0030      	movs	r0, r6
 800b306:	f000 f807 	bl	800b318 <_sbrk_r>
 800b30a:	1c43      	adds	r3, r0, #1
 800b30c:	d1db      	bne.n	800b2c6 <_malloc_r+0x6a>
 800b30e:	e7c7      	b.n	800b2a0 <_malloc_r+0x44>
 800b310:	2000043c 	.word	0x2000043c
 800b314:	20000440 	.word	0x20000440

0800b318 <_sbrk_r>:
 800b318:	2300      	movs	r3, #0
 800b31a:	b570      	push	{r4, r5, r6, lr}
 800b31c:	4d06      	ldr	r5, [pc, #24]	; (800b338 <_sbrk_r+0x20>)
 800b31e:	0004      	movs	r4, r0
 800b320:	0008      	movs	r0, r1
 800b322:	602b      	str	r3, [r5, #0]
 800b324:	f7f6 fb60 	bl	80019e8 <_sbrk>
 800b328:	1c43      	adds	r3, r0, #1
 800b32a:	d103      	bne.n	800b334 <_sbrk_r+0x1c>
 800b32c:	682b      	ldr	r3, [r5, #0]
 800b32e:	2b00      	cmp	r3, #0
 800b330:	d000      	beq.n	800b334 <_sbrk_r+0x1c>
 800b332:	6023      	str	r3, [r4, #0]
 800b334:	bd70      	pop	{r4, r5, r6, pc}
 800b336:	46c0      	nop			; (mov r8, r8)
 800b338:	200015a8 	.word	0x200015a8

0800b33c <siprintf>:
 800b33c:	b40e      	push	{r1, r2, r3}
 800b33e:	b500      	push	{lr}
 800b340:	490b      	ldr	r1, [pc, #44]	; (800b370 <siprintf+0x34>)
 800b342:	b09c      	sub	sp, #112	; 0x70
 800b344:	ab1d      	add	r3, sp, #116	; 0x74
 800b346:	9002      	str	r0, [sp, #8]
 800b348:	9006      	str	r0, [sp, #24]
 800b34a:	9107      	str	r1, [sp, #28]
 800b34c:	9104      	str	r1, [sp, #16]
 800b34e:	4809      	ldr	r0, [pc, #36]	; (800b374 <siprintf+0x38>)
 800b350:	4909      	ldr	r1, [pc, #36]	; (800b378 <siprintf+0x3c>)
 800b352:	cb04      	ldmia	r3!, {r2}
 800b354:	9105      	str	r1, [sp, #20]
 800b356:	6800      	ldr	r0, [r0, #0]
 800b358:	a902      	add	r1, sp, #8
 800b35a:	9301      	str	r3, [sp, #4]
 800b35c:	f000 f880 	bl	800b460 <_svfiprintf_r>
 800b360:	2300      	movs	r3, #0
 800b362:	9a02      	ldr	r2, [sp, #8]
 800b364:	7013      	strb	r3, [r2, #0]
 800b366:	b01c      	add	sp, #112	; 0x70
 800b368:	bc08      	pop	{r3}
 800b36a:	b003      	add	sp, #12
 800b36c:	4718      	bx	r3
 800b36e:	46c0      	nop			; (mov r8, r8)
 800b370:	7fffffff 	.word	0x7fffffff
 800b374:	2000017c 	.word	0x2000017c
 800b378:	ffff0208 	.word	0xffff0208

0800b37c <__malloc_lock>:
 800b37c:	b510      	push	{r4, lr}
 800b37e:	4802      	ldr	r0, [pc, #8]	; (800b388 <__malloc_lock+0xc>)
 800b380:	f000 faf0 	bl	800b964 <__retarget_lock_acquire_recursive>
 800b384:	bd10      	pop	{r4, pc}
 800b386:	46c0      	nop			; (mov r8, r8)
 800b388:	200015b0 	.word	0x200015b0

0800b38c <__malloc_unlock>:
 800b38c:	b510      	push	{r4, lr}
 800b38e:	4802      	ldr	r0, [pc, #8]	; (800b398 <__malloc_unlock+0xc>)
 800b390:	f000 fae9 	bl	800b966 <__retarget_lock_release_recursive>
 800b394:	bd10      	pop	{r4, pc}
 800b396:	46c0      	nop			; (mov r8, r8)
 800b398:	200015b0 	.word	0x200015b0

0800b39c <__ssputs_r>:
 800b39c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b39e:	688e      	ldr	r6, [r1, #8]
 800b3a0:	b085      	sub	sp, #20
 800b3a2:	0007      	movs	r7, r0
 800b3a4:	000c      	movs	r4, r1
 800b3a6:	9203      	str	r2, [sp, #12]
 800b3a8:	9301      	str	r3, [sp, #4]
 800b3aa:	429e      	cmp	r6, r3
 800b3ac:	d83c      	bhi.n	800b428 <__ssputs_r+0x8c>
 800b3ae:	2390      	movs	r3, #144	; 0x90
 800b3b0:	898a      	ldrh	r2, [r1, #12]
 800b3b2:	00db      	lsls	r3, r3, #3
 800b3b4:	421a      	tst	r2, r3
 800b3b6:	d034      	beq.n	800b422 <__ssputs_r+0x86>
 800b3b8:	2503      	movs	r5, #3
 800b3ba:	6909      	ldr	r1, [r1, #16]
 800b3bc:	6823      	ldr	r3, [r4, #0]
 800b3be:	1a5b      	subs	r3, r3, r1
 800b3c0:	9302      	str	r3, [sp, #8]
 800b3c2:	6963      	ldr	r3, [r4, #20]
 800b3c4:	9802      	ldr	r0, [sp, #8]
 800b3c6:	435d      	muls	r5, r3
 800b3c8:	0feb      	lsrs	r3, r5, #31
 800b3ca:	195d      	adds	r5, r3, r5
 800b3cc:	9b01      	ldr	r3, [sp, #4]
 800b3ce:	106d      	asrs	r5, r5, #1
 800b3d0:	3301      	adds	r3, #1
 800b3d2:	181b      	adds	r3, r3, r0
 800b3d4:	42ab      	cmp	r3, r5
 800b3d6:	d900      	bls.n	800b3da <__ssputs_r+0x3e>
 800b3d8:	001d      	movs	r5, r3
 800b3da:	0553      	lsls	r3, r2, #21
 800b3dc:	d532      	bpl.n	800b444 <__ssputs_r+0xa8>
 800b3de:	0029      	movs	r1, r5
 800b3e0:	0038      	movs	r0, r7
 800b3e2:	f7ff ff3b 	bl	800b25c <_malloc_r>
 800b3e6:	1e06      	subs	r6, r0, #0
 800b3e8:	d109      	bne.n	800b3fe <__ssputs_r+0x62>
 800b3ea:	230c      	movs	r3, #12
 800b3ec:	603b      	str	r3, [r7, #0]
 800b3ee:	2340      	movs	r3, #64	; 0x40
 800b3f0:	2001      	movs	r0, #1
 800b3f2:	89a2      	ldrh	r2, [r4, #12]
 800b3f4:	4240      	negs	r0, r0
 800b3f6:	4313      	orrs	r3, r2
 800b3f8:	81a3      	strh	r3, [r4, #12]
 800b3fa:	b005      	add	sp, #20
 800b3fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b3fe:	9a02      	ldr	r2, [sp, #8]
 800b400:	6921      	ldr	r1, [r4, #16]
 800b402:	f000 fabc 	bl	800b97e <memcpy>
 800b406:	89a3      	ldrh	r3, [r4, #12]
 800b408:	4a14      	ldr	r2, [pc, #80]	; (800b45c <__ssputs_r+0xc0>)
 800b40a:	401a      	ands	r2, r3
 800b40c:	2380      	movs	r3, #128	; 0x80
 800b40e:	4313      	orrs	r3, r2
 800b410:	81a3      	strh	r3, [r4, #12]
 800b412:	9b02      	ldr	r3, [sp, #8]
 800b414:	6126      	str	r6, [r4, #16]
 800b416:	18f6      	adds	r6, r6, r3
 800b418:	6026      	str	r6, [r4, #0]
 800b41a:	6165      	str	r5, [r4, #20]
 800b41c:	9e01      	ldr	r6, [sp, #4]
 800b41e:	1aed      	subs	r5, r5, r3
 800b420:	60a5      	str	r5, [r4, #8]
 800b422:	9b01      	ldr	r3, [sp, #4]
 800b424:	429e      	cmp	r6, r3
 800b426:	d900      	bls.n	800b42a <__ssputs_r+0x8e>
 800b428:	9e01      	ldr	r6, [sp, #4]
 800b42a:	0032      	movs	r2, r6
 800b42c:	9903      	ldr	r1, [sp, #12]
 800b42e:	6820      	ldr	r0, [r4, #0]
 800b430:	f000 faae 	bl	800b990 <memmove>
 800b434:	68a3      	ldr	r3, [r4, #8]
 800b436:	2000      	movs	r0, #0
 800b438:	1b9b      	subs	r3, r3, r6
 800b43a:	60a3      	str	r3, [r4, #8]
 800b43c:	6823      	ldr	r3, [r4, #0]
 800b43e:	199e      	adds	r6, r3, r6
 800b440:	6026      	str	r6, [r4, #0]
 800b442:	e7da      	b.n	800b3fa <__ssputs_r+0x5e>
 800b444:	002a      	movs	r2, r5
 800b446:	0038      	movs	r0, r7
 800b448:	f000 fab5 	bl	800b9b6 <_realloc_r>
 800b44c:	1e06      	subs	r6, r0, #0
 800b44e:	d1e0      	bne.n	800b412 <__ssputs_r+0x76>
 800b450:	0038      	movs	r0, r7
 800b452:	6921      	ldr	r1, [r4, #16]
 800b454:	f7ff feb8 	bl	800b1c8 <_free_r>
 800b458:	e7c7      	b.n	800b3ea <__ssputs_r+0x4e>
 800b45a:	46c0      	nop			; (mov r8, r8)
 800b45c:	fffffb7f 	.word	0xfffffb7f

0800b460 <_svfiprintf_r>:
 800b460:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b462:	b0a1      	sub	sp, #132	; 0x84
 800b464:	9003      	str	r0, [sp, #12]
 800b466:	001d      	movs	r5, r3
 800b468:	898b      	ldrh	r3, [r1, #12]
 800b46a:	000f      	movs	r7, r1
 800b46c:	0016      	movs	r6, r2
 800b46e:	061b      	lsls	r3, r3, #24
 800b470:	d511      	bpl.n	800b496 <_svfiprintf_r+0x36>
 800b472:	690b      	ldr	r3, [r1, #16]
 800b474:	2b00      	cmp	r3, #0
 800b476:	d10e      	bne.n	800b496 <_svfiprintf_r+0x36>
 800b478:	2140      	movs	r1, #64	; 0x40
 800b47a:	f7ff feef 	bl	800b25c <_malloc_r>
 800b47e:	6038      	str	r0, [r7, #0]
 800b480:	6138      	str	r0, [r7, #16]
 800b482:	2800      	cmp	r0, #0
 800b484:	d105      	bne.n	800b492 <_svfiprintf_r+0x32>
 800b486:	230c      	movs	r3, #12
 800b488:	9a03      	ldr	r2, [sp, #12]
 800b48a:	3801      	subs	r0, #1
 800b48c:	6013      	str	r3, [r2, #0]
 800b48e:	b021      	add	sp, #132	; 0x84
 800b490:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b492:	2340      	movs	r3, #64	; 0x40
 800b494:	617b      	str	r3, [r7, #20]
 800b496:	2300      	movs	r3, #0
 800b498:	ac08      	add	r4, sp, #32
 800b49a:	6163      	str	r3, [r4, #20]
 800b49c:	3320      	adds	r3, #32
 800b49e:	7663      	strb	r3, [r4, #25]
 800b4a0:	3310      	adds	r3, #16
 800b4a2:	76a3      	strb	r3, [r4, #26]
 800b4a4:	9507      	str	r5, [sp, #28]
 800b4a6:	0035      	movs	r5, r6
 800b4a8:	782b      	ldrb	r3, [r5, #0]
 800b4aa:	2b00      	cmp	r3, #0
 800b4ac:	d001      	beq.n	800b4b2 <_svfiprintf_r+0x52>
 800b4ae:	2b25      	cmp	r3, #37	; 0x25
 800b4b0:	d147      	bne.n	800b542 <_svfiprintf_r+0xe2>
 800b4b2:	1bab      	subs	r3, r5, r6
 800b4b4:	9305      	str	r3, [sp, #20]
 800b4b6:	42b5      	cmp	r5, r6
 800b4b8:	d00c      	beq.n	800b4d4 <_svfiprintf_r+0x74>
 800b4ba:	0032      	movs	r2, r6
 800b4bc:	0039      	movs	r1, r7
 800b4be:	9803      	ldr	r0, [sp, #12]
 800b4c0:	f7ff ff6c 	bl	800b39c <__ssputs_r>
 800b4c4:	1c43      	adds	r3, r0, #1
 800b4c6:	d100      	bne.n	800b4ca <_svfiprintf_r+0x6a>
 800b4c8:	e0ae      	b.n	800b628 <_svfiprintf_r+0x1c8>
 800b4ca:	6962      	ldr	r2, [r4, #20]
 800b4cc:	9b05      	ldr	r3, [sp, #20]
 800b4ce:	4694      	mov	ip, r2
 800b4d0:	4463      	add	r3, ip
 800b4d2:	6163      	str	r3, [r4, #20]
 800b4d4:	782b      	ldrb	r3, [r5, #0]
 800b4d6:	2b00      	cmp	r3, #0
 800b4d8:	d100      	bne.n	800b4dc <_svfiprintf_r+0x7c>
 800b4da:	e0a5      	b.n	800b628 <_svfiprintf_r+0x1c8>
 800b4dc:	2201      	movs	r2, #1
 800b4de:	2300      	movs	r3, #0
 800b4e0:	4252      	negs	r2, r2
 800b4e2:	6062      	str	r2, [r4, #4]
 800b4e4:	a904      	add	r1, sp, #16
 800b4e6:	3254      	adds	r2, #84	; 0x54
 800b4e8:	1852      	adds	r2, r2, r1
 800b4ea:	1c6e      	adds	r6, r5, #1
 800b4ec:	6023      	str	r3, [r4, #0]
 800b4ee:	60e3      	str	r3, [r4, #12]
 800b4f0:	60a3      	str	r3, [r4, #8]
 800b4f2:	7013      	strb	r3, [r2, #0]
 800b4f4:	65a3      	str	r3, [r4, #88]	; 0x58
 800b4f6:	2205      	movs	r2, #5
 800b4f8:	7831      	ldrb	r1, [r6, #0]
 800b4fa:	4854      	ldr	r0, [pc, #336]	; (800b64c <_svfiprintf_r+0x1ec>)
 800b4fc:	f000 fa34 	bl	800b968 <memchr>
 800b500:	1c75      	adds	r5, r6, #1
 800b502:	2800      	cmp	r0, #0
 800b504:	d11f      	bne.n	800b546 <_svfiprintf_r+0xe6>
 800b506:	6822      	ldr	r2, [r4, #0]
 800b508:	06d3      	lsls	r3, r2, #27
 800b50a:	d504      	bpl.n	800b516 <_svfiprintf_r+0xb6>
 800b50c:	2353      	movs	r3, #83	; 0x53
 800b50e:	a904      	add	r1, sp, #16
 800b510:	185b      	adds	r3, r3, r1
 800b512:	2120      	movs	r1, #32
 800b514:	7019      	strb	r1, [r3, #0]
 800b516:	0713      	lsls	r3, r2, #28
 800b518:	d504      	bpl.n	800b524 <_svfiprintf_r+0xc4>
 800b51a:	2353      	movs	r3, #83	; 0x53
 800b51c:	a904      	add	r1, sp, #16
 800b51e:	185b      	adds	r3, r3, r1
 800b520:	212b      	movs	r1, #43	; 0x2b
 800b522:	7019      	strb	r1, [r3, #0]
 800b524:	7833      	ldrb	r3, [r6, #0]
 800b526:	2b2a      	cmp	r3, #42	; 0x2a
 800b528:	d016      	beq.n	800b558 <_svfiprintf_r+0xf8>
 800b52a:	0035      	movs	r5, r6
 800b52c:	2100      	movs	r1, #0
 800b52e:	200a      	movs	r0, #10
 800b530:	68e3      	ldr	r3, [r4, #12]
 800b532:	782a      	ldrb	r2, [r5, #0]
 800b534:	1c6e      	adds	r6, r5, #1
 800b536:	3a30      	subs	r2, #48	; 0x30
 800b538:	2a09      	cmp	r2, #9
 800b53a:	d94e      	bls.n	800b5da <_svfiprintf_r+0x17a>
 800b53c:	2900      	cmp	r1, #0
 800b53e:	d111      	bne.n	800b564 <_svfiprintf_r+0x104>
 800b540:	e017      	b.n	800b572 <_svfiprintf_r+0x112>
 800b542:	3501      	adds	r5, #1
 800b544:	e7b0      	b.n	800b4a8 <_svfiprintf_r+0x48>
 800b546:	4b41      	ldr	r3, [pc, #260]	; (800b64c <_svfiprintf_r+0x1ec>)
 800b548:	6822      	ldr	r2, [r4, #0]
 800b54a:	1ac0      	subs	r0, r0, r3
 800b54c:	2301      	movs	r3, #1
 800b54e:	4083      	lsls	r3, r0
 800b550:	4313      	orrs	r3, r2
 800b552:	002e      	movs	r6, r5
 800b554:	6023      	str	r3, [r4, #0]
 800b556:	e7ce      	b.n	800b4f6 <_svfiprintf_r+0x96>
 800b558:	9b07      	ldr	r3, [sp, #28]
 800b55a:	1d19      	adds	r1, r3, #4
 800b55c:	681b      	ldr	r3, [r3, #0]
 800b55e:	9107      	str	r1, [sp, #28]
 800b560:	2b00      	cmp	r3, #0
 800b562:	db01      	blt.n	800b568 <_svfiprintf_r+0x108>
 800b564:	930b      	str	r3, [sp, #44]	; 0x2c
 800b566:	e004      	b.n	800b572 <_svfiprintf_r+0x112>
 800b568:	425b      	negs	r3, r3
 800b56a:	60e3      	str	r3, [r4, #12]
 800b56c:	2302      	movs	r3, #2
 800b56e:	4313      	orrs	r3, r2
 800b570:	6023      	str	r3, [r4, #0]
 800b572:	782b      	ldrb	r3, [r5, #0]
 800b574:	2b2e      	cmp	r3, #46	; 0x2e
 800b576:	d10a      	bne.n	800b58e <_svfiprintf_r+0x12e>
 800b578:	786b      	ldrb	r3, [r5, #1]
 800b57a:	2b2a      	cmp	r3, #42	; 0x2a
 800b57c:	d135      	bne.n	800b5ea <_svfiprintf_r+0x18a>
 800b57e:	9b07      	ldr	r3, [sp, #28]
 800b580:	3502      	adds	r5, #2
 800b582:	1d1a      	adds	r2, r3, #4
 800b584:	681b      	ldr	r3, [r3, #0]
 800b586:	9207      	str	r2, [sp, #28]
 800b588:	2b00      	cmp	r3, #0
 800b58a:	db2b      	blt.n	800b5e4 <_svfiprintf_r+0x184>
 800b58c:	9309      	str	r3, [sp, #36]	; 0x24
 800b58e:	4e30      	ldr	r6, [pc, #192]	; (800b650 <_svfiprintf_r+0x1f0>)
 800b590:	2203      	movs	r2, #3
 800b592:	0030      	movs	r0, r6
 800b594:	7829      	ldrb	r1, [r5, #0]
 800b596:	f000 f9e7 	bl	800b968 <memchr>
 800b59a:	2800      	cmp	r0, #0
 800b59c:	d006      	beq.n	800b5ac <_svfiprintf_r+0x14c>
 800b59e:	2340      	movs	r3, #64	; 0x40
 800b5a0:	1b80      	subs	r0, r0, r6
 800b5a2:	4083      	lsls	r3, r0
 800b5a4:	6822      	ldr	r2, [r4, #0]
 800b5a6:	3501      	adds	r5, #1
 800b5a8:	4313      	orrs	r3, r2
 800b5aa:	6023      	str	r3, [r4, #0]
 800b5ac:	7829      	ldrb	r1, [r5, #0]
 800b5ae:	2206      	movs	r2, #6
 800b5b0:	4828      	ldr	r0, [pc, #160]	; (800b654 <_svfiprintf_r+0x1f4>)
 800b5b2:	1c6e      	adds	r6, r5, #1
 800b5b4:	7621      	strb	r1, [r4, #24]
 800b5b6:	f000 f9d7 	bl	800b968 <memchr>
 800b5ba:	2800      	cmp	r0, #0
 800b5bc:	d03c      	beq.n	800b638 <_svfiprintf_r+0x1d8>
 800b5be:	4b26      	ldr	r3, [pc, #152]	; (800b658 <_svfiprintf_r+0x1f8>)
 800b5c0:	2b00      	cmp	r3, #0
 800b5c2:	d125      	bne.n	800b610 <_svfiprintf_r+0x1b0>
 800b5c4:	2207      	movs	r2, #7
 800b5c6:	9b07      	ldr	r3, [sp, #28]
 800b5c8:	3307      	adds	r3, #7
 800b5ca:	4393      	bics	r3, r2
 800b5cc:	3308      	adds	r3, #8
 800b5ce:	9307      	str	r3, [sp, #28]
 800b5d0:	6963      	ldr	r3, [r4, #20]
 800b5d2:	9a04      	ldr	r2, [sp, #16]
 800b5d4:	189b      	adds	r3, r3, r2
 800b5d6:	6163      	str	r3, [r4, #20]
 800b5d8:	e765      	b.n	800b4a6 <_svfiprintf_r+0x46>
 800b5da:	4343      	muls	r3, r0
 800b5dc:	0035      	movs	r5, r6
 800b5de:	2101      	movs	r1, #1
 800b5e0:	189b      	adds	r3, r3, r2
 800b5e2:	e7a6      	b.n	800b532 <_svfiprintf_r+0xd2>
 800b5e4:	2301      	movs	r3, #1
 800b5e6:	425b      	negs	r3, r3
 800b5e8:	e7d0      	b.n	800b58c <_svfiprintf_r+0x12c>
 800b5ea:	2300      	movs	r3, #0
 800b5ec:	200a      	movs	r0, #10
 800b5ee:	001a      	movs	r2, r3
 800b5f0:	3501      	adds	r5, #1
 800b5f2:	6063      	str	r3, [r4, #4]
 800b5f4:	7829      	ldrb	r1, [r5, #0]
 800b5f6:	1c6e      	adds	r6, r5, #1
 800b5f8:	3930      	subs	r1, #48	; 0x30
 800b5fa:	2909      	cmp	r1, #9
 800b5fc:	d903      	bls.n	800b606 <_svfiprintf_r+0x1a6>
 800b5fe:	2b00      	cmp	r3, #0
 800b600:	d0c5      	beq.n	800b58e <_svfiprintf_r+0x12e>
 800b602:	9209      	str	r2, [sp, #36]	; 0x24
 800b604:	e7c3      	b.n	800b58e <_svfiprintf_r+0x12e>
 800b606:	4342      	muls	r2, r0
 800b608:	0035      	movs	r5, r6
 800b60a:	2301      	movs	r3, #1
 800b60c:	1852      	adds	r2, r2, r1
 800b60e:	e7f1      	b.n	800b5f4 <_svfiprintf_r+0x194>
 800b610:	ab07      	add	r3, sp, #28
 800b612:	9300      	str	r3, [sp, #0]
 800b614:	003a      	movs	r2, r7
 800b616:	0021      	movs	r1, r4
 800b618:	4b10      	ldr	r3, [pc, #64]	; (800b65c <_svfiprintf_r+0x1fc>)
 800b61a:	9803      	ldr	r0, [sp, #12]
 800b61c:	e000      	b.n	800b620 <_svfiprintf_r+0x1c0>
 800b61e:	bf00      	nop
 800b620:	9004      	str	r0, [sp, #16]
 800b622:	9b04      	ldr	r3, [sp, #16]
 800b624:	3301      	adds	r3, #1
 800b626:	d1d3      	bne.n	800b5d0 <_svfiprintf_r+0x170>
 800b628:	89bb      	ldrh	r3, [r7, #12]
 800b62a:	980d      	ldr	r0, [sp, #52]	; 0x34
 800b62c:	065b      	lsls	r3, r3, #25
 800b62e:	d400      	bmi.n	800b632 <_svfiprintf_r+0x1d2>
 800b630:	e72d      	b.n	800b48e <_svfiprintf_r+0x2e>
 800b632:	2001      	movs	r0, #1
 800b634:	4240      	negs	r0, r0
 800b636:	e72a      	b.n	800b48e <_svfiprintf_r+0x2e>
 800b638:	ab07      	add	r3, sp, #28
 800b63a:	9300      	str	r3, [sp, #0]
 800b63c:	003a      	movs	r2, r7
 800b63e:	0021      	movs	r1, r4
 800b640:	4b06      	ldr	r3, [pc, #24]	; (800b65c <_svfiprintf_r+0x1fc>)
 800b642:	9803      	ldr	r0, [sp, #12]
 800b644:	f000 f87c 	bl	800b740 <_printf_i>
 800b648:	e7ea      	b.n	800b620 <_svfiprintf_r+0x1c0>
 800b64a:	46c0      	nop			; (mov r8, r8)
 800b64c:	0800bc10 	.word	0x0800bc10
 800b650:	0800bc16 	.word	0x0800bc16
 800b654:	0800bc1a 	.word	0x0800bc1a
 800b658:	00000000 	.word	0x00000000
 800b65c:	0800b39d 	.word	0x0800b39d

0800b660 <_printf_common>:
 800b660:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b662:	0015      	movs	r5, r2
 800b664:	9301      	str	r3, [sp, #4]
 800b666:	688a      	ldr	r2, [r1, #8]
 800b668:	690b      	ldr	r3, [r1, #16]
 800b66a:	000c      	movs	r4, r1
 800b66c:	9000      	str	r0, [sp, #0]
 800b66e:	4293      	cmp	r3, r2
 800b670:	da00      	bge.n	800b674 <_printf_common+0x14>
 800b672:	0013      	movs	r3, r2
 800b674:	0022      	movs	r2, r4
 800b676:	602b      	str	r3, [r5, #0]
 800b678:	3243      	adds	r2, #67	; 0x43
 800b67a:	7812      	ldrb	r2, [r2, #0]
 800b67c:	2a00      	cmp	r2, #0
 800b67e:	d001      	beq.n	800b684 <_printf_common+0x24>
 800b680:	3301      	adds	r3, #1
 800b682:	602b      	str	r3, [r5, #0]
 800b684:	6823      	ldr	r3, [r4, #0]
 800b686:	069b      	lsls	r3, r3, #26
 800b688:	d502      	bpl.n	800b690 <_printf_common+0x30>
 800b68a:	682b      	ldr	r3, [r5, #0]
 800b68c:	3302      	adds	r3, #2
 800b68e:	602b      	str	r3, [r5, #0]
 800b690:	6822      	ldr	r2, [r4, #0]
 800b692:	2306      	movs	r3, #6
 800b694:	0017      	movs	r7, r2
 800b696:	401f      	ands	r7, r3
 800b698:	421a      	tst	r2, r3
 800b69a:	d027      	beq.n	800b6ec <_printf_common+0x8c>
 800b69c:	0023      	movs	r3, r4
 800b69e:	3343      	adds	r3, #67	; 0x43
 800b6a0:	781b      	ldrb	r3, [r3, #0]
 800b6a2:	1e5a      	subs	r2, r3, #1
 800b6a4:	4193      	sbcs	r3, r2
 800b6a6:	6822      	ldr	r2, [r4, #0]
 800b6a8:	0692      	lsls	r2, r2, #26
 800b6aa:	d430      	bmi.n	800b70e <_printf_common+0xae>
 800b6ac:	0022      	movs	r2, r4
 800b6ae:	9901      	ldr	r1, [sp, #4]
 800b6b0:	9800      	ldr	r0, [sp, #0]
 800b6b2:	9e08      	ldr	r6, [sp, #32]
 800b6b4:	3243      	adds	r2, #67	; 0x43
 800b6b6:	47b0      	blx	r6
 800b6b8:	1c43      	adds	r3, r0, #1
 800b6ba:	d025      	beq.n	800b708 <_printf_common+0xa8>
 800b6bc:	2306      	movs	r3, #6
 800b6be:	6820      	ldr	r0, [r4, #0]
 800b6c0:	682a      	ldr	r2, [r5, #0]
 800b6c2:	68e1      	ldr	r1, [r4, #12]
 800b6c4:	2500      	movs	r5, #0
 800b6c6:	4003      	ands	r3, r0
 800b6c8:	2b04      	cmp	r3, #4
 800b6ca:	d103      	bne.n	800b6d4 <_printf_common+0x74>
 800b6cc:	1a8d      	subs	r5, r1, r2
 800b6ce:	43eb      	mvns	r3, r5
 800b6d0:	17db      	asrs	r3, r3, #31
 800b6d2:	401d      	ands	r5, r3
 800b6d4:	68a3      	ldr	r3, [r4, #8]
 800b6d6:	6922      	ldr	r2, [r4, #16]
 800b6d8:	4293      	cmp	r3, r2
 800b6da:	dd01      	ble.n	800b6e0 <_printf_common+0x80>
 800b6dc:	1a9b      	subs	r3, r3, r2
 800b6de:	18ed      	adds	r5, r5, r3
 800b6e0:	2700      	movs	r7, #0
 800b6e2:	42bd      	cmp	r5, r7
 800b6e4:	d120      	bne.n	800b728 <_printf_common+0xc8>
 800b6e6:	2000      	movs	r0, #0
 800b6e8:	e010      	b.n	800b70c <_printf_common+0xac>
 800b6ea:	3701      	adds	r7, #1
 800b6ec:	68e3      	ldr	r3, [r4, #12]
 800b6ee:	682a      	ldr	r2, [r5, #0]
 800b6f0:	1a9b      	subs	r3, r3, r2
 800b6f2:	42bb      	cmp	r3, r7
 800b6f4:	ddd2      	ble.n	800b69c <_printf_common+0x3c>
 800b6f6:	0022      	movs	r2, r4
 800b6f8:	2301      	movs	r3, #1
 800b6fa:	9901      	ldr	r1, [sp, #4]
 800b6fc:	9800      	ldr	r0, [sp, #0]
 800b6fe:	9e08      	ldr	r6, [sp, #32]
 800b700:	3219      	adds	r2, #25
 800b702:	47b0      	blx	r6
 800b704:	1c43      	adds	r3, r0, #1
 800b706:	d1f0      	bne.n	800b6ea <_printf_common+0x8a>
 800b708:	2001      	movs	r0, #1
 800b70a:	4240      	negs	r0, r0
 800b70c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800b70e:	2030      	movs	r0, #48	; 0x30
 800b710:	18e1      	adds	r1, r4, r3
 800b712:	3143      	adds	r1, #67	; 0x43
 800b714:	7008      	strb	r0, [r1, #0]
 800b716:	0021      	movs	r1, r4
 800b718:	1c5a      	adds	r2, r3, #1
 800b71a:	3145      	adds	r1, #69	; 0x45
 800b71c:	7809      	ldrb	r1, [r1, #0]
 800b71e:	18a2      	adds	r2, r4, r2
 800b720:	3243      	adds	r2, #67	; 0x43
 800b722:	3302      	adds	r3, #2
 800b724:	7011      	strb	r1, [r2, #0]
 800b726:	e7c1      	b.n	800b6ac <_printf_common+0x4c>
 800b728:	0022      	movs	r2, r4
 800b72a:	2301      	movs	r3, #1
 800b72c:	9901      	ldr	r1, [sp, #4]
 800b72e:	9800      	ldr	r0, [sp, #0]
 800b730:	9e08      	ldr	r6, [sp, #32]
 800b732:	321a      	adds	r2, #26
 800b734:	47b0      	blx	r6
 800b736:	1c43      	adds	r3, r0, #1
 800b738:	d0e6      	beq.n	800b708 <_printf_common+0xa8>
 800b73a:	3701      	adds	r7, #1
 800b73c:	e7d1      	b.n	800b6e2 <_printf_common+0x82>
	...

0800b740 <_printf_i>:
 800b740:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b742:	b08b      	sub	sp, #44	; 0x2c
 800b744:	9206      	str	r2, [sp, #24]
 800b746:	000a      	movs	r2, r1
 800b748:	3243      	adds	r2, #67	; 0x43
 800b74a:	9307      	str	r3, [sp, #28]
 800b74c:	9005      	str	r0, [sp, #20]
 800b74e:	9204      	str	r2, [sp, #16]
 800b750:	7e0a      	ldrb	r2, [r1, #24]
 800b752:	000c      	movs	r4, r1
 800b754:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b756:	2a78      	cmp	r2, #120	; 0x78
 800b758:	d806      	bhi.n	800b768 <_printf_i+0x28>
 800b75a:	2a62      	cmp	r2, #98	; 0x62
 800b75c:	d808      	bhi.n	800b770 <_printf_i+0x30>
 800b75e:	2a00      	cmp	r2, #0
 800b760:	d100      	bne.n	800b764 <_printf_i+0x24>
 800b762:	e0c0      	b.n	800b8e6 <_printf_i+0x1a6>
 800b764:	2a58      	cmp	r2, #88	; 0x58
 800b766:	d052      	beq.n	800b80e <_printf_i+0xce>
 800b768:	0026      	movs	r6, r4
 800b76a:	3642      	adds	r6, #66	; 0x42
 800b76c:	7032      	strb	r2, [r6, #0]
 800b76e:	e022      	b.n	800b7b6 <_printf_i+0x76>
 800b770:	0010      	movs	r0, r2
 800b772:	3863      	subs	r0, #99	; 0x63
 800b774:	2815      	cmp	r0, #21
 800b776:	d8f7      	bhi.n	800b768 <_printf_i+0x28>
 800b778:	f7f4 fcce 	bl	8000118 <__gnu_thumb1_case_shi>
 800b77c:	001f0016 	.word	0x001f0016
 800b780:	fff6fff6 	.word	0xfff6fff6
 800b784:	fff6fff6 	.word	0xfff6fff6
 800b788:	fff6001f 	.word	0xfff6001f
 800b78c:	fff6fff6 	.word	0xfff6fff6
 800b790:	00a8fff6 	.word	0x00a8fff6
 800b794:	009a0036 	.word	0x009a0036
 800b798:	fff6fff6 	.word	0xfff6fff6
 800b79c:	fff600b9 	.word	0xfff600b9
 800b7a0:	fff60036 	.word	0xfff60036
 800b7a4:	009efff6 	.word	0x009efff6
 800b7a8:	0026      	movs	r6, r4
 800b7aa:	681a      	ldr	r2, [r3, #0]
 800b7ac:	3642      	adds	r6, #66	; 0x42
 800b7ae:	1d11      	adds	r1, r2, #4
 800b7b0:	6019      	str	r1, [r3, #0]
 800b7b2:	6813      	ldr	r3, [r2, #0]
 800b7b4:	7033      	strb	r3, [r6, #0]
 800b7b6:	2301      	movs	r3, #1
 800b7b8:	e0a7      	b.n	800b90a <_printf_i+0x1ca>
 800b7ba:	6808      	ldr	r0, [r1, #0]
 800b7bc:	6819      	ldr	r1, [r3, #0]
 800b7be:	1d0a      	adds	r2, r1, #4
 800b7c0:	0605      	lsls	r5, r0, #24
 800b7c2:	d50b      	bpl.n	800b7dc <_printf_i+0x9c>
 800b7c4:	680d      	ldr	r5, [r1, #0]
 800b7c6:	601a      	str	r2, [r3, #0]
 800b7c8:	2d00      	cmp	r5, #0
 800b7ca:	da03      	bge.n	800b7d4 <_printf_i+0x94>
 800b7cc:	232d      	movs	r3, #45	; 0x2d
 800b7ce:	9a04      	ldr	r2, [sp, #16]
 800b7d0:	426d      	negs	r5, r5
 800b7d2:	7013      	strb	r3, [r2, #0]
 800b7d4:	4b61      	ldr	r3, [pc, #388]	; (800b95c <_printf_i+0x21c>)
 800b7d6:	270a      	movs	r7, #10
 800b7d8:	9303      	str	r3, [sp, #12]
 800b7da:	e032      	b.n	800b842 <_printf_i+0x102>
 800b7dc:	680d      	ldr	r5, [r1, #0]
 800b7de:	601a      	str	r2, [r3, #0]
 800b7e0:	0641      	lsls	r1, r0, #25
 800b7e2:	d5f1      	bpl.n	800b7c8 <_printf_i+0x88>
 800b7e4:	b22d      	sxth	r5, r5
 800b7e6:	e7ef      	b.n	800b7c8 <_printf_i+0x88>
 800b7e8:	680d      	ldr	r5, [r1, #0]
 800b7ea:	6819      	ldr	r1, [r3, #0]
 800b7ec:	1d08      	adds	r0, r1, #4
 800b7ee:	6018      	str	r0, [r3, #0]
 800b7f0:	062e      	lsls	r6, r5, #24
 800b7f2:	d501      	bpl.n	800b7f8 <_printf_i+0xb8>
 800b7f4:	680d      	ldr	r5, [r1, #0]
 800b7f6:	e003      	b.n	800b800 <_printf_i+0xc0>
 800b7f8:	066d      	lsls	r5, r5, #25
 800b7fa:	d5fb      	bpl.n	800b7f4 <_printf_i+0xb4>
 800b7fc:	680d      	ldr	r5, [r1, #0]
 800b7fe:	b2ad      	uxth	r5, r5
 800b800:	4b56      	ldr	r3, [pc, #344]	; (800b95c <_printf_i+0x21c>)
 800b802:	270a      	movs	r7, #10
 800b804:	9303      	str	r3, [sp, #12]
 800b806:	2a6f      	cmp	r2, #111	; 0x6f
 800b808:	d117      	bne.n	800b83a <_printf_i+0xfa>
 800b80a:	2708      	movs	r7, #8
 800b80c:	e015      	b.n	800b83a <_printf_i+0xfa>
 800b80e:	3145      	adds	r1, #69	; 0x45
 800b810:	700a      	strb	r2, [r1, #0]
 800b812:	4a52      	ldr	r2, [pc, #328]	; (800b95c <_printf_i+0x21c>)
 800b814:	9203      	str	r2, [sp, #12]
 800b816:	681a      	ldr	r2, [r3, #0]
 800b818:	6821      	ldr	r1, [r4, #0]
 800b81a:	ca20      	ldmia	r2!, {r5}
 800b81c:	601a      	str	r2, [r3, #0]
 800b81e:	0608      	lsls	r0, r1, #24
 800b820:	d550      	bpl.n	800b8c4 <_printf_i+0x184>
 800b822:	07cb      	lsls	r3, r1, #31
 800b824:	d502      	bpl.n	800b82c <_printf_i+0xec>
 800b826:	2320      	movs	r3, #32
 800b828:	4319      	orrs	r1, r3
 800b82a:	6021      	str	r1, [r4, #0]
 800b82c:	2710      	movs	r7, #16
 800b82e:	2d00      	cmp	r5, #0
 800b830:	d103      	bne.n	800b83a <_printf_i+0xfa>
 800b832:	2320      	movs	r3, #32
 800b834:	6822      	ldr	r2, [r4, #0]
 800b836:	439a      	bics	r2, r3
 800b838:	6022      	str	r2, [r4, #0]
 800b83a:	0023      	movs	r3, r4
 800b83c:	2200      	movs	r2, #0
 800b83e:	3343      	adds	r3, #67	; 0x43
 800b840:	701a      	strb	r2, [r3, #0]
 800b842:	6863      	ldr	r3, [r4, #4]
 800b844:	60a3      	str	r3, [r4, #8]
 800b846:	2b00      	cmp	r3, #0
 800b848:	db03      	blt.n	800b852 <_printf_i+0x112>
 800b84a:	2204      	movs	r2, #4
 800b84c:	6821      	ldr	r1, [r4, #0]
 800b84e:	4391      	bics	r1, r2
 800b850:	6021      	str	r1, [r4, #0]
 800b852:	2d00      	cmp	r5, #0
 800b854:	d102      	bne.n	800b85c <_printf_i+0x11c>
 800b856:	9e04      	ldr	r6, [sp, #16]
 800b858:	2b00      	cmp	r3, #0
 800b85a:	d00c      	beq.n	800b876 <_printf_i+0x136>
 800b85c:	9e04      	ldr	r6, [sp, #16]
 800b85e:	0028      	movs	r0, r5
 800b860:	0039      	movs	r1, r7
 800b862:	f7f4 fce9 	bl	8000238 <__aeabi_uidivmod>
 800b866:	9b03      	ldr	r3, [sp, #12]
 800b868:	3e01      	subs	r6, #1
 800b86a:	5c5b      	ldrb	r3, [r3, r1]
 800b86c:	7033      	strb	r3, [r6, #0]
 800b86e:	002b      	movs	r3, r5
 800b870:	0005      	movs	r5, r0
 800b872:	429f      	cmp	r7, r3
 800b874:	d9f3      	bls.n	800b85e <_printf_i+0x11e>
 800b876:	2f08      	cmp	r7, #8
 800b878:	d109      	bne.n	800b88e <_printf_i+0x14e>
 800b87a:	6823      	ldr	r3, [r4, #0]
 800b87c:	07db      	lsls	r3, r3, #31
 800b87e:	d506      	bpl.n	800b88e <_printf_i+0x14e>
 800b880:	6863      	ldr	r3, [r4, #4]
 800b882:	6922      	ldr	r2, [r4, #16]
 800b884:	4293      	cmp	r3, r2
 800b886:	dc02      	bgt.n	800b88e <_printf_i+0x14e>
 800b888:	2330      	movs	r3, #48	; 0x30
 800b88a:	3e01      	subs	r6, #1
 800b88c:	7033      	strb	r3, [r6, #0]
 800b88e:	9b04      	ldr	r3, [sp, #16]
 800b890:	1b9b      	subs	r3, r3, r6
 800b892:	6123      	str	r3, [r4, #16]
 800b894:	9b07      	ldr	r3, [sp, #28]
 800b896:	0021      	movs	r1, r4
 800b898:	9300      	str	r3, [sp, #0]
 800b89a:	9805      	ldr	r0, [sp, #20]
 800b89c:	9b06      	ldr	r3, [sp, #24]
 800b89e:	aa09      	add	r2, sp, #36	; 0x24
 800b8a0:	f7ff fede 	bl	800b660 <_printf_common>
 800b8a4:	1c43      	adds	r3, r0, #1
 800b8a6:	d135      	bne.n	800b914 <_printf_i+0x1d4>
 800b8a8:	2001      	movs	r0, #1
 800b8aa:	4240      	negs	r0, r0
 800b8ac:	b00b      	add	sp, #44	; 0x2c
 800b8ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b8b0:	2220      	movs	r2, #32
 800b8b2:	6809      	ldr	r1, [r1, #0]
 800b8b4:	430a      	orrs	r2, r1
 800b8b6:	6022      	str	r2, [r4, #0]
 800b8b8:	0022      	movs	r2, r4
 800b8ba:	2178      	movs	r1, #120	; 0x78
 800b8bc:	3245      	adds	r2, #69	; 0x45
 800b8be:	7011      	strb	r1, [r2, #0]
 800b8c0:	4a27      	ldr	r2, [pc, #156]	; (800b960 <_printf_i+0x220>)
 800b8c2:	e7a7      	b.n	800b814 <_printf_i+0xd4>
 800b8c4:	0648      	lsls	r0, r1, #25
 800b8c6:	d5ac      	bpl.n	800b822 <_printf_i+0xe2>
 800b8c8:	b2ad      	uxth	r5, r5
 800b8ca:	e7aa      	b.n	800b822 <_printf_i+0xe2>
 800b8cc:	681a      	ldr	r2, [r3, #0]
 800b8ce:	680d      	ldr	r5, [r1, #0]
 800b8d0:	1d10      	adds	r0, r2, #4
 800b8d2:	6949      	ldr	r1, [r1, #20]
 800b8d4:	6018      	str	r0, [r3, #0]
 800b8d6:	6813      	ldr	r3, [r2, #0]
 800b8d8:	062e      	lsls	r6, r5, #24
 800b8da:	d501      	bpl.n	800b8e0 <_printf_i+0x1a0>
 800b8dc:	6019      	str	r1, [r3, #0]
 800b8de:	e002      	b.n	800b8e6 <_printf_i+0x1a6>
 800b8e0:	066d      	lsls	r5, r5, #25
 800b8e2:	d5fb      	bpl.n	800b8dc <_printf_i+0x19c>
 800b8e4:	8019      	strh	r1, [r3, #0]
 800b8e6:	2300      	movs	r3, #0
 800b8e8:	9e04      	ldr	r6, [sp, #16]
 800b8ea:	6123      	str	r3, [r4, #16]
 800b8ec:	e7d2      	b.n	800b894 <_printf_i+0x154>
 800b8ee:	681a      	ldr	r2, [r3, #0]
 800b8f0:	1d11      	adds	r1, r2, #4
 800b8f2:	6019      	str	r1, [r3, #0]
 800b8f4:	6816      	ldr	r6, [r2, #0]
 800b8f6:	2100      	movs	r1, #0
 800b8f8:	0030      	movs	r0, r6
 800b8fa:	6862      	ldr	r2, [r4, #4]
 800b8fc:	f000 f834 	bl	800b968 <memchr>
 800b900:	2800      	cmp	r0, #0
 800b902:	d001      	beq.n	800b908 <_printf_i+0x1c8>
 800b904:	1b80      	subs	r0, r0, r6
 800b906:	6060      	str	r0, [r4, #4]
 800b908:	6863      	ldr	r3, [r4, #4]
 800b90a:	6123      	str	r3, [r4, #16]
 800b90c:	2300      	movs	r3, #0
 800b90e:	9a04      	ldr	r2, [sp, #16]
 800b910:	7013      	strb	r3, [r2, #0]
 800b912:	e7bf      	b.n	800b894 <_printf_i+0x154>
 800b914:	6923      	ldr	r3, [r4, #16]
 800b916:	0032      	movs	r2, r6
 800b918:	9906      	ldr	r1, [sp, #24]
 800b91a:	9805      	ldr	r0, [sp, #20]
 800b91c:	9d07      	ldr	r5, [sp, #28]
 800b91e:	47a8      	blx	r5
 800b920:	1c43      	adds	r3, r0, #1
 800b922:	d0c1      	beq.n	800b8a8 <_printf_i+0x168>
 800b924:	6823      	ldr	r3, [r4, #0]
 800b926:	079b      	lsls	r3, r3, #30
 800b928:	d415      	bmi.n	800b956 <_printf_i+0x216>
 800b92a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b92c:	68e0      	ldr	r0, [r4, #12]
 800b92e:	4298      	cmp	r0, r3
 800b930:	dabc      	bge.n	800b8ac <_printf_i+0x16c>
 800b932:	0018      	movs	r0, r3
 800b934:	e7ba      	b.n	800b8ac <_printf_i+0x16c>
 800b936:	0022      	movs	r2, r4
 800b938:	2301      	movs	r3, #1
 800b93a:	9906      	ldr	r1, [sp, #24]
 800b93c:	9805      	ldr	r0, [sp, #20]
 800b93e:	9e07      	ldr	r6, [sp, #28]
 800b940:	3219      	adds	r2, #25
 800b942:	47b0      	blx	r6
 800b944:	1c43      	adds	r3, r0, #1
 800b946:	d0af      	beq.n	800b8a8 <_printf_i+0x168>
 800b948:	3501      	adds	r5, #1
 800b94a:	68e3      	ldr	r3, [r4, #12]
 800b94c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b94e:	1a9b      	subs	r3, r3, r2
 800b950:	42ab      	cmp	r3, r5
 800b952:	dcf0      	bgt.n	800b936 <_printf_i+0x1f6>
 800b954:	e7e9      	b.n	800b92a <_printf_i+0x1ea>
 800b956:	2500      	movs	r5, #0
 800b958:	e7f7      	b.n	800b94a <_printf_i+0x20a>
 800b95a:	46c0      	nop			; (mov r8, r8)
 800b95c:	0800bc21 	.word	0x0800bc21
 800b960:	0800bc32 	.word	0x0800bc32

0800b964 <__retarget_lock_acquire_recursive>:
 800b964:	4770      	bx	lr

0800b966 <__retarget_lock_release_recursive>:
 800b966:	4770      	bx	lr

0800b968 <memchr>:
 800b968:	b2c9      	uxtb	r1, r1
 800b96a:	1882      	adds	r2, r0, r2
 800b96c:	4290      	cmp	r0, r2
 800b96e:	d101      	bne.n	800b974 <memchr+0xc>
 800b970:	2000      	movs	r0, #0
 800b972:	4770      	bx	lr
 800b974:	7803      	ldrb	r3, [r0, #0]
 800b976:	428b      	cmp	r3, r1
 800b978:	d0fb      	beq.n	800b972 <memchr+0xa>
 800b97a:	3001      	adds	r0, #1
 800b97c:	e7f6      	b.n	800b96c <memchr+0x4>

0800b97e <memcpy>:
 800b97e:	2300      	movs	r3, #0
 800b980:	b510      	push	{r4, lr}
 800b982:	429a      	cmp	r2, r3
 800b984:	d100      	bne.n	800b988 <memcpy+0xa>
 800b986:	bd10      	pop	{r4, pc}
 800b988:	5ccc      	ldrb	r4, [r1, r3]
 800b98a:	54c4      	strb	r4, [r0, r3]
 800b98c:	3301      	adds	r3, #1
 800b98e:	e7f8      	b.n	800b982 <memcpy+0x4>

0800b990 <memmove>:
 800b990:	b510      	push	{r4, lr}
 800b992:	4288      	cmp	r0, r1
 800b994:	d902      	bls.n	800b99c <memmove+0xc>
 800b996:	188b      	adds	r3, r1, r2
 800b998:	4298      	cmp	r0, r3
 800b99a:	d303      	bcc.n	800b9a4 <memmove+0x14>
 800b99c:	2300      	movs	r3, #0
 800b99e:	e007      	b.n	800b9b0 <memmove+0x20>
 800b9a0:	5c8b      	ldrb	r3, [r1, r2]
 800b9a2:	5483      	strb	r3, [r0, r2]
 800b9a4:	3a01      	subs	r2, #1
 800b9a6:	d2fb      	bcs.n	800b9a0 <memmove+0x10>
 800b9a8:	bd10      	pop	{r4, pc}
 800b9aa:	5ccc      	ldrb	r4, [r1, r3]
 800b9ac:	54c4      	strb	r4, [r0, r3]
 800b9ae:	3301      	adds	r3, #1
 800b9b0:	429a      	cmp	r2, r3
 800b9b2:	d1fa      	bne.n	800b9aa <memmove+0x1a>
 800b9b4:	e7f8      	b.n	800b9a8 <memmove+0x18>

0800b9b6 <_realloc_r>:
 800b9b6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b9b8:	0007      	movs	r7, r0
 800b9ba:	000d      	movs	r5, r1
 800b9bc:	0016      	movs	r6, r2
 800b9be:	2900      	cmp	r1, #0
 800b9c0:	d105      	bne.n	800b9ce <_realloc_r+0x18>
 800b9c2:	0011      	movs	r1, r2
 800b9c4:	f7ff fc4a 	bl	800b25c <_malloc_r>
 800b9c8:	0004      	movs	r4, r0
 800b9ca:	0020      	movs	r0, r4
 800b9cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b9ce:	2a00      	cmp	r2, #0
 800b9d0:	d103      	bne.n	800b9da <_realloc_r+0x24>
 800b9d2:	f7ff fbf9 	bl	800b1c8 <_free_r>
 800b9d6:	0034      	movs	r4, r6
 800b9d8:	e7f7      	b.n	800b9ca <_realloc_r+0x14>
 800b9da:	f000 f812 	bl	800ba02 <_malloc_usable_size_r>
 800b9de:	002c      	movs	r4, r5
 800b9e0:	42b0      	cmp	r0, r6
 800b9e2:	d2f2      	bcs.n	800b9ca <_realloc_r+0x14>
 800b9e4:	0031      	movs	r1, r6
 800b9e6:	0038      	movs	r0, r7
 800b9e8:	f7ff fc38 	bl	800b25c <_malloc_r>
 800b9ec:	1e04      	subs	r4, r0, #0
 800b9ee:	d0ec      	beq.n	800b9ca <_realloc_r+0x14>
 800b9f0:	0029      	movs	r1, r5
 800b9f2:	0032      	movs	r2, r6
 800b9f4:	f7ff ffc3 	bl	800b97e <memcpy>
 800b9f8:	0029      	movs	r1, r5
 800b9fa:	0038      	movs	r0, r7
 800b9fc:	f7ff fbe4 	bl	800b1c8 <_free_r>
 800ba00:	e7e3      	b.n	800b9ca <_realloc_r+0x14>

0800ba02 <_malloc_usable_size_r>:
 800ba02:	1f0b      	subs	r3, r1, #4
 800ba04:	681b      	ldr	r3, [r3, #0]
 800ba06:	1f18      	subs	r0, r3, #4
 800ba08:	2b00      	cmp	r3, #0
 800ba0a:	da01      	bge.n	800ba10 <_malloc_usable_size_r+0xe>
 800ba0c:	580b      	ldr	r3, [r1, r0]
 800ba0e:	18c0      	adds	r0, r0, r3
 800ba10:	4770      	bx	lr
	...

0800ba14 <_init>:
 800ba14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ba16:	46c0      	nop			; (mov r8, r8)
 800ba18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ba1a:	bc08      	pop	{r3}
 800ba1c:	469e      	mov	lr, r3
 800ba1e:	4770      	bx	lr

0800ba20 <_fini>:
 800ba20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ba22:	46c0      	nop			; (mov r8, r8)
 800ba24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ba26:	bc08      	pop	{r3}
 800ba28:	469e      	mov	lr, r3
 800ba2a:	4770      	bx	lr
