
Zahoreni_zdroju.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d420  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000270  0800d4e0  0800d4e0  0001d4e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d750  0800d750  000201e0  2**0
                  CONTENTS
  4 .ARM          00000000  0800d750  0800d750  000201e0  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800d750  0800d750  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d750  0800d750  0001d750  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d754  0800d754  0001d754  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800d758  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000145c  200001e0  0800d938  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000163c  0800d938  0002163c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002be6d  00000000  00000000  00020208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000515f  00000000  00000000  0004c075  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001768  00000000  00000000  000511d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001580  00000000  00000000  00052940  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002071e  00000000  00000000  00053ec0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00020a9e  00000000  00000000  000745de  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a4709  00000000  00000000  0009507c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00139785  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000056e0  00000000  00000000  001397d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200001e0 	.word	0x200001e0
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800d4c8 	.word	0x0800d4c8

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200001e4 	.word	0x200001e4
 8000104:	0800d4c8 	.word	0x0800d4c8

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_shi>:
 8000118:	b403      	push	{r0, r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0040      	lsls	r0, r0, #1
 8000120:	0049      	lsls	r1, r1, #1
 8000122:	5e09      	ldrsh	r1, [r1, r0]
 8000124:	0049      	lsls	r1, r1, #1
 8000126:	448e      	add	lr, r1
 8000128:	bc03      	pop	{r0, r1}
 800012a:	4770      	bx	lr

0800012c <__udivsi3>:
 800012c:	2200      	movs	r2, #0
 800012e:	0843      	lsrs	r3, r0, #1
 8000130:	428b      	cmp	r3, r1
 8000132:	d374      	bcc.n	800021e <__udivsi3+0xf2>
 8000134:	0903      	lsrs	r3, r0, #4
 8000136:	428b      	cmp	r3, r1
 8000138:	d35f      	bcc.n	80001fa <__udivsi3+0xce>
 800013a:	0a03      	lsrs	r3, r0, #8
 800013c:	428b      	cmp	r3, r1
 800013e:	d344      	bcc.n	80001ca <__udivsi3+0x9e>
 8000140:	0b03      	lsrs	r3, r0, #12
 8000142:	428b      	cmp	r3, r1
 8000144:	d328      	bcc.n	8000198 <__udivsi3+0x6c>
 8000146:	0c03      	lsrs	r3, r0, #16
 8000148:	428b      	cmp	r3, r1
 800014a:	d30d      	bcc.n	8000168 <__udivsi3+0x3c>
 800014c:	22ff      	movs	r2, #255	; 0xff
 800014e:	0209      	lsls	r1, r1, #8
 8000150:	ba12      	rev	r2, r2
 8000152:	0c03      	lsrs	r3, r0, #16
 8000154:	428b      	cmp	r3, r1
 8000156:	d302      	bcc.n	800015e <__udivsi3+0x32>
 8000158:	1212      	asrs	r2, r2, #8
 800015a:	0209      	lsls	r1, r1, #8
 800015c:	d065      	beq.n	800022a <__udivsi3+0xfe>
 800015e:	0b03      	lsrs	r3, r0, #12
 8000160:	428b      	cmp	r3, r1
 8000162:	d319      	bcc.n	8000198 <__udivsi3+0x6c>
 8000164:	e000      	b.n	8000168 <__udivsi3+0x3c>
 8000166:	0a09      	lsrs	r1, r1, #8
 8000168:	0bc3      	lsrs	r3, r0, #15
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x46>
 800016e:	03cb      	lsls	r3, r1, #15
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b83      	lsrs	r3, r0, #14
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x52>
 800017a:	038b      	lsls	r3, r1, #14
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0b43      	lsrs	r3, r0, #13
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x5e>
 8000186:	034b      	lsls	r3, r1, #13
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b03      	lsrs	r3, r0, #12
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x6a>
 8000192:	030b      	lsls	r3, r1, #12
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0ac3      	lsrs	r3, r0, #11
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x76>
 800019e:	02cb      	lsls	r3, r1, #11
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a83      	lsrs	r3, r0, #10
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x82>
 80001aa:	028b      	lsls	r3, r1, #10
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0a43      	lsrs	r3, r0, #9
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x8e>
 80001b6:	024b      	lsls	r3, r1, #9
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a03      	lsrs	r3, r0, #8
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x9a>
 80001c2:	020b      	lsls	r3, r1, #8
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	d2cd      	bcs.n	8000166 <__udivsi3+0x3a>
 80001ca:	09c3      	lsrs	r3, r0, #7
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xa8>
 80001d0:	01cb      	lsls	r3, r1, #7
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0983      	lsrs	r3, r0, #6
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xb4>
 80001dc:	018b      	lsls	r3, r1, #6
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0943      	lsrs	r3, r0, #5
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xc0>
 80001e8:	014b      	lsls	r3, r1, #5
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0903      	lsrs	r3, r0, #4
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xcc>
 80001f4:	010b      	lsls	r3, r1, #4
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	08c3      	lsrs	r3, r0, #3
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xd8>
 8000200:	00cb      	lsls	r3, r1, #3
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0883      	lsrs	r3, r0, #2
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xe4>
 800020c:	008b      	lsls	r3, r1, #2
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0843      	lsrs	r3, r0, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xf0>
 8000218:	004b      	lsls	r3, r1, #1
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	1a41      	subs	r1, r0, r1
 8000220:	d200      	bcs.n	8000224 <__udivsi3+0xf8>
 8000222:	4601      	mov	r1, r0
 8000224:	4152      	adcs	r2, r2
 8000226:	4610      	mov	r0, r2
 8000228:	4770      	bx	lr
 800022a:	e7ff      	b.n	800022c <__udivsi3+0x100>
 800022c:	b501      	push	{r0, lr}
 800022e:	2000      	movs	r0, #0
 8000230:	f000 f8f0 	bl	8000414 <__aeabi_idiv0>
 8000234:	bd02      	pop	{r1, pc}
 8000236:	46c0      	nop			; (mov r8, r8)

08000238 <__aeabi_uidivmod>:
 8000238:	2900      	cmp	r1, #0
 800023a:	d0f7      	beq.n	800022c <__udivsi3+0x100>
 800023c:	e776      	b.n	800012c <__udivsi3>
 800023e:	4770      	bx	lr

08000240 <__divsi3>:
 8000240:	4603      	mov	r3, r0
 8000242:	430b      	orrs	r3, r1
 8000244:	d47f      	bmi.n	8000346 <__divsi3+0x106>
 8000246:	2200      	movs	r2, #0
 8000248:	0843      	lsrs	r3, r0, #1
 800024a:	428b      	cmp	r3, r1
 800024c:	d374      	bcc.n	8000338 <__divsi3+0xf8>
 800024e:	0903      	lsrs	r3, r0, #4
 8000250:	428b      	cmp	r3, r1
 8000252:	d35f      	bcc.n	8000314 <__divsi3+0xd4>
 8000254:	0a03      	lsrs	r3, r0, #8
 8000256:	428b      	cmp	r3, r1
 8000258:	d344      	bcc.n	80002e4 <__divsi3+0xa4>
 800025a:	0b03      	lsrs	r3, r0, #12
 800025c:	428b      	cmp	r3, r1
 800025e:	d328      	bcc.n	80002b2 <__divsi3+0x72>
 8000260:	0c03      	lsrs	r3, r0, #16
 8000262:	428b      	cmp	r3, r1
 8000264:	d30d      	bcc.n	8000282 <__divsi3+0x42>
 8000266:	22ff      	movs	r2, #255	; 0xff
 8000268:	0209      	lsls	r1, r1, #8
 800026a:	ba12      	rev	r2, r2
 800026c:	0c03      	lsrs	r3, r0, #16
 800026e:	428b      	cmp	r3, r1
 8000270:	d302      	bcc.n	8000278 <__divsi3+0x38>
 8000272:	1212      	asrs	r2, r2, #8
 8000274:	0209      	lsls	r1, r1, #8
 8000276:	d065      	beq.n	8000344 <__divsi3+0x104>
 8000278:	0b03      	lsrs	r3, r0, #12
 800027a:	428b      	cmp	r3, r1
 800027c:	d319      	bcc.n	80002b2 <__divsi3+0x72>
 800027e:	e000      	b.n	8000282 <__divsi3+0x42>
 8000280:	0a09      	lsrs	r1, r1, #8
 8000282:	0bc3      	lsrs	r3, r0, #15
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x4c>
 8000288:	03cb      	lsls	r3, r1, #15
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0b83      	lsrs	r3, r0, #14
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x58>
 8000294:	038b      	lsls	r3, r1, #14
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0b43      	lsrs	r3, r0, #13
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x64>
 80002a0:	034b      	lsls	r3, r1, #13
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0b03      	lsrs	r3, r0, #12
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x70>
 80002ac:	030b      	lsls	r3, r1, #12
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0ac3      	lsrs	r3, r0, #11
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0x7c>
 80002b8:	02cb      	lsls	r3, r1, #11
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	0a83      	lsrs	r3, r0, #10
 80002c0:	428b      	cmp	r3, r1
 80002c2:	d301      	bcc.n	80002c8 <__divsi3+0x88>
 80002c4:	028b      	lsls	r3, r1, #10
 80002c6:	1ac0      	subs	r0, r0, r3
 80002c8:	4152      	adcs	r2, r2
 80002ca:	0a43      	lsrs	r3, r0, #9
 80002cc:	428b      	cmp	r3, r1
 80002ce:	d301      	bcc.n	80002d4 <__divsi3+0x94>
 80002d0:	024b      	lsls	r3, r1, #9
 80002d2:	1ac0      	subs	r0, r0, r3
 80002d4:	4152      	adcs	r2, r2
 80002d6:	0a03      	lsrs	r3, r0, #8
 80002d8:	428b      	cmp	r3, r1
 80002da:	d301      	bcc.n	80002e0 <__divsi3+0xa0>
 80002dc:	020b      	lsls	r3, r1, #8
 80002de:	1ac0      	subs	r0, r0, r3
 80002e0:	4152      	adcs	r2, r2
 80002e2:	d2cd      	bcs.n	8000280 <__divsi3+0x40>
 80002e4:	09c3      	lsrs	r3, r0, #7
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xae>
 80002ea:	01cb      	lsls	r3, r1, #7
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	0983      	lsrs	r3, r0, #6
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xba>
 80002f6:	018b      	lsls	r3, r1, #6
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0943      	lsrs	r3, r0, #5
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xc6>
 8000302:	014b      	lsls	r3, r1, #5
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0903      	lsrs	r3, r0, #4
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xd2>
 800030e:	010b      	lsls	r3, r1, #4
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	08c3      	lsrs	r3, r0, #3
 8000316:	428b      	cmp	r3, r1
 8000318:	d301      	bcc.n	800031e <__divsi3+0xde>
 800031a:	00cb      	lsls	r3, r1, #3
 800031c:	1ac0      	subs	r0, r0, r3
 800031e:	4152      	adcs	r2, r2
 8000320:	0883      	lsrs	r3, r0, #2
 8000322:	428b      	cmp	r3, r1
 8000324:	d301      	bcc.n	800032a <__divsi3+0xea>
 8000326:	008b      	lsls	r3, r1, #2
 8000328:	1ac0      	subs	r0, r0, r3
 800032a:	4152      	adcs	r2, r2
 800032c:	0843      	lsrs	r3, r0, #1
 800032e:	428b      	cmp	r3, r1
 8000330:	d301      	bcc.n	8000336 <__divsi3+0xf6>
 8000332:	004b      	lsls	r3, r1, #1
 8000334:	1ac0      	subs	r0, r0, r3
 8000336:	4152      	adcs	r2, r2
 8000338:	1a41      	subs	r1, r0, r1
 800033a:	d200      	bcs.n	800033e <__divsi3+0xfe>
 800033c:	4601      	mov	r1, r0
 800033e:	4152      	adcs	r2, r2
 8000340:	4610      	mov	r0, r2
 8000342:	4770      	bx	lr
 8000344:	e05d      	b.n	8000402 <__divsi3+0x1c2>
 8000346:	0fca      	lsrs	r2, r1, #31
 8000348:	d000      	beq.n	800034c <__divsi3+0x10c>
 800034a:	4249      	negs	r1, r1
 800034c:	1003      	asrs	r3, r0, #32
 800034e:	d300      	bcc.n	8000352 <__divsi3+0x112>
 8000350:	4240      	negs	r0, r0
 8000352:	4053      	eors	r3, r2
 8000354:	2200      	movs	r2, #0
 8000356:	469c      	mov	ip, r3
 8000358:	0903      	lsrs	r3, r0, #4
 800035a:	428b      	cmp	r3, r1
 800035c:	d32d      	bcc.n	80003ba <__divsi3+0x17a>
 800035e:	0a03      	lsrs	r3, r0, #8
 8000360:	428b      	cmp	r3, r1
 8000362:	d312      	bcc.n	800038a <__divsi3+0x14a>
 8000364:	22fc      	movs	r2, #252	; 0xfc
 8000366:	0189      	lsls	r1, r1, #6
 8000368:	ba12      	rev	r2, r2
 800036a:	0a03      	lsrs	r3, r0, #8
 800036c:	428b      	cmp	r3, r1
 800036e:	d30c      	bcc.n	800038a <__divsi3+0x14a>
 8000370:	0189      	lsls	r1, r1, #6
 8000372:	1192      	asrs	r2, r2, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d308      	bcc.n	800038a <__divsi3+0x14a>
 8000378:	0189      	lsls	r1, r1, #6
 800037a:	1192      	asrs	r2, r2, #6
 800037c:	428b      	cmp	r3, r1
 800037e:	d304      	bcc.n	800038a <__divsi3+0x14a>
 8000380:	0189      	lsls	r1, r1, #6
 8000382:	d03a      	beq.n	80003fa <__divsi3+0x1ba>
 8000384:	1192      	asrs	r2, r2, #6
 8000386:	e000      	b.n	800038a <__divsi3+0x14a>
 8000388:	0989      	lsrs	r1, r1, #6
 800038a:	09c3      	lsrs	r3, r0, #7
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x154>
 8000390:	01cb      	lsls	r3, r1, #7
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	0983      	lsrs	r3, r0, #6
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x160>
 800039c:	018b      	lsls	r3, r1, #6
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0943      	lsrs	r3, r0, #5
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x16c>
 80003a8:	014b      	lsls	r3, r1, #5
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	0903      	lsrs	r3, r0, #4
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d301      	bcc.n	80003b8 <__divsi3+0x178>
 80003b4:	010b      	lsls	r3, r1, #4
 80003b6:	1ac0      	subs	r0, r0, r3
 80003b8:	4152      	adcs	r2, r2
 80003ba:	08c3      	lsrs	r3, r0, #3
 80003bc:	428b      	cmp	r3, r1
 80003be:	d301      	bcc.n	80003c4 <__divsi3+0x184>
 80003c0:	00cb      	lsls	r3, r1, #3
 80003c2:	1ac0      	subs	r0, r0, r3
 80003c4:	4152      	adcs	r2, r2
 80003c6:	0883      	lsrs	r3, r0, #2
 80003c8:	428b      	cmp	r3, r1
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x190>
 80003cc:	008b      	lsls	r3, r1, #2
 80003ce:	1ac0      	subs	r0, r0, r3
 80003d0:	4152      	adcs	r2, r2
 80003d2:	d2d9      	bcs.n	8000388 <__divsi3+0x148>
 80003d4:	0843      	lsrs	r3, r0, #1
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d301      	bcc.n	80003de <__divsi3+0x19e>
 80003da:	004b      	lsls	r3, r1, #1
 80003dc:	1ac0      	subs	r0, r0, r3
 80003de:	4152      	adcs	r2, r2
 80003e0:	1a41      	subs	r1, r0, r1
 80003e2:	d200      	bcs.n	80003e6 <__divsi3+0x1a6>
 80003e4:	4601      	mov	r1, r0
 80003e6:	4663      	mov	r3, ip
 80003e8:	4152      	adcs	r2, r2
 80003ea:	105b      	asrs	r3, r3, #1
 80003ec:	4610      	mov	r0, r2
 80003ee:	d301      	bcc.n	80003f4 <__divsi3+0x1b4>
 80003f0:	4240      	negs	r0, r0
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	d500      	bpl.n	80003f8 <__divsi3+0x1b8>
 80003f6:	4249      	negs	r1, r1
 80003f8:	4770      	bx	lr
 80003fa:	4663      	mov	r3, ip
 80003fc:	105b      	asrs	r3, r3, #1
 80003fe:	d300      	bcc.n	8000402 <__divsi3+0x1c2>
 8000400:	4240      	negs	r0, r0
 8000402:	b501      	push	{r0, lr}
 8000404:	2000      	movs	r0, #0
 8000406:	f000 f805 	bl	8000414 <__aeabi_idiv0>
 800040a:	bd02      	pop	{r1, pc}

0800040c <__aeabi_idivmod>:
 800040c:	2900      	cmp	r1, #0
 800040e:	d0f8      	beq.n	8000402 <__divsi3+0x1c2>
 8000410:	e716      	b.n	8000240 <__divsi3>
 8000412:	4770      	bx	lr

08000414 <__aeabi_idiv0>:
 8000414:	4770      	bx	lr
 8000416:	46c0      	nop			; (mov r8, r8)

08000418 <comHandler>:
 *
 * Při přijmutí instrukce nedochází k zpracování, ale pouze k nastavení adekvátního flagu.
 * Vykonání instrukce musí být zařízeno v jiné části hlavního programu.
 */
void comHandler(void)
{
 8000418:	b5f0      	push	{r4, r5, r6, r7, lr}
 800041a:	b0ad      	sub	sp, #180	; 0xb4
 800041c:	af00      	add	r7, sp, #0
	//___Příjem dat___//
	if(flags.data_received)
 800041e:	4be9      	ldr	r3, [pc, #932]	; (80007c4 <comHandler+0x3ac>)
 8000420:	7a1b      	ldrb	r3, [r3, #8]
 8000422:	2201      	movs	r2, #1
 8000424:	4013      	ands	r3, r2
 8000426:	b2db      	uxtb	r3, r3
 8000428:	2b00      	cmp	r3, #0
 800042a:	d100      	bne.n	800042e <comHandler+0x16>
 800042c:	e124      	b.n	8000678 <comHandler+0x260>
				pushStr(USB_Tx_Buffer, txt, strlen(txt));
#endif
				break;
			}
		}*/
		int start = 0;
 800042e:	2300      	movs	r3, #0
 8000430:	229c      	movs	r2, #156	; 0x9c
 8000432:	18ba      	adds	r2, r7, r2
 8000434:	6013      	str	r3, [r2, #0]

		for(int i = 0; i < USB_Rx_Buffer->filled; i++)
 8000436:	2300      	movs	r3, #0
 8000438:	2280      	movs	r2, #128	; 0x80
 800043a:	2120      	movs	r1, #32
 800043c:	468c      	mov	ip, r1
 800043e:	44bc      	add	ip, r7
 8000440:	4462      	add	r2, ip
 8000442:	6013      	str	r3, [r2, #0]
 8000444:	e066      	b.n	8000514 <comHandler+0xfc>
		{
			char tmp1, tmp2;
			at(USB_Rx_Buffer, i, &tmp1);
 8000446:	4be0      	ldr	r3, [pc, #896]	; (80007c8 <comHandler+0x3b0>)
 8000448:	681b      	ldr	r3, [r3, #0]
 800044a:	2667      	movs	r6, #103	; 0x67
 800044c:	2220      	movs	r2, #32
 800044e:	18ba      	adds	r2, r7, r2
 8000450:	1992      	adds	r2, r2, r6
 8000452:	2180      	movs	r1, #128	; 0x80
 8000454:	000c      	movs	r4, r1
 8000456:	2020      	movs	r0, #32
 8000458:	1838      	adds	r0, r7, r0
 800045a:	1840      	adds	r0, r0, r1
 800045c:	6801      	ldr	r1, [r0, #0]
 800045e:	0018      	movs	r0, r3
 8000460:	f001 fc34 	bl	8001ccc <at>
			at(USB_Rx_Buffer, i+1, &tmp2);
 8000464:	4bd8      	ldr	r3, [pc, #864]	; (80007c8 <comHandler+0x3b0>)
 8000466:	6818      	ldr	r0, [r3, #0]
 8000468:	0021      	movs	r1, r4
 800046a:	2320      	movs	r3, #32
 800046c:	18fb      	adds	r3, r7, r3
 800046e:	185b      	adds	r3, r3, r1
 8000470:	681b      	ldr	r3, [r3, #0]
 8000472:	3301      	adds	r3, #1
 8000474:	2266      	movs	r2, #102	; 0x66
 8000476:	2120      	movs	r1, #32
 8000478:	468c      	mov	ip, r1
 800047a:	44bc      	add	ip, r7
 800047c:	4462      	add	r2, ip
 800047e:	0019      	movs	r1, r3
 8000480:	f001 fc24 	bl	8001ccc <at>
			if(tmp1 == '>' && tmp1 == '>')	//začátek paketu
 8000484:	2320      	movs	r3, #32
 8000486:	18fb      	adds	r3, r7, r3
 8000488:	199b      	adds	r3, r3, r6
 800048a:	781b      	ldrb	r3, [r3, #0]
 800048c:	2b3e      	cmp	r3, #62	; 0x3e
 800048e:	d136      	bne.n	80004fe <comHandler+0xe6>
 8000490:	2320      	movs	r3, #32
 8000492:	18fb      	adds	r3, r7, r3
 8000494:	199b      	adds	r3, r3, r6
 8000496:	781b      	ldrb	r3, [r3, #0]
 8000498:	2b3e      	cmp	r3, #62	; 0x3e
 800049a:	d130      	bne.n	80004fe <comHandler+0xe6>
			{
				for(int y = 0; y < i; y++)	//vymazání obsahu buuferu před začátkem paketu
 800049c:	2300      	movs	r3, #0
 800049e:	2284      	movs	r2, #132	; 0x84
 80004a0:	2120      	movs	r1, #32
 80004a2:	468c      	mov	ip, r1
 80004a4:	44bc      	add	ip, r7
 80004a6:	4462      	add	r2, ip
 80004a8:	6013      	str	r3, [r2, #0]
 80004aa:	e015      	b.n	80004d8 <comHandler+0xc0>
				{
					char tmp;
					pop(USB_Rx_Buffer, &tmp);
 80004ac:	4bc6      	ldr	r3, [pc, #792]	; (80007c8 <comHandler+0x3b0>)
 80004ae:	681b      	ldr	r3, [r3, #0]
 80004b0:	2265      	movs	r2, #101	; 0x65
 80004b2:	2120      	movs	r1, #32
 80004b4:	468c      	mov	ip, r1
 80004b6:	44bc      	add	ip, r7
 80004b8:	4462      	add	r2, ip
 80004ba:	0011      	movs	r1, r2
 80004bc:	0018      	movs	r0, r3
 80004be:	f001 fbd2 	bl	8001c66 <pop>
				for(int y = 0; y < i; y++)	//vymazání obsahu buuferu před začátkem paketu
 80004c2:	2284      	movs	r2, #132	; 0x84
 80004c4:	2320      	movs	r3, #32
 80004c6:	18fb      	adds	r3, r7, r3
 80004c8:	189b      	adds	r3, r3, r2
 80004ca:	681b      	ldr	r3, [r3, #0]
 80004cc:	3301      	adds	r3, #1
 80004ce:	2120      	movs	r1, #32
 80004d0:	468c      	mov	ip, r1
 80004d2:	44bc      	add	ip, r7
 80004d4:	4462      	add	r2, ip
 80004d6:	6013      	str	r3, [r2, #0]
 80004d8:	2384      	movs	r3, #132	; 0x84
 80004da:	2220      	movs	r2, #32
 80004dc:	4694      	mov	ip, r2
 80004de:	44bc      	add	ip, r7
 80004e0:	4463      	add	r3, ip
 80004e2:	681a      	ldr	r2, [r3, #0]
 80004e4:	2380      	movs	r3, #128	; 0x80
 80004e6:	2120      	movs	r1, #32
 80004e8:	468c      	mov	ip, r1
 80004ea:	44bc      	add	ip, r7
 80004ec:	4463      	add	r3, ip
 80004ee:	681b      	ldr	r3, [r3, #0]
 80004f0:	429a      	cmp	r2, r3
 80004f2:	dbdb      	blt.n	80004ac <comHandler+0x94>
				}
				start = 1;
 80004f4:	2301      	movs	r3, #1
 80004f6:	229c      	movs	r2, #156	; 0x9c
 80004f8:	18ba      	adds	r2, r7, r2
 80004fa:	6013      	str	r3, [r2, #0]
 80004fc:	e015      	b.n	800052a <comHandler+0x112>
		for(int i = 0; i < USB_Rx_Buffer->filled; i++)
 80004fe:	2280      	movs	r2, #128	; 0x80
 8000500:	2320      	movs	r3, #32
 8000502:	18fb      	adds	r3, r7, r3
 8000504:	189b      	adds	r3, r3, r2
 8000506:	681b      	ldr	r3, [r3, #0]
 8000508:	3301      	adds	r3, #1
 800050a:	2120      	movs	r1, #32
 800050c:	468c      	mov	ip, r1
 800050e:	44bc      	add	ip, r7
 8000510:	4462      	add	r2, ip
 8000512:	6013      	str	r3, [r2, #0]
 8000514:	4bac      	ldr	r3, [pc, #688]	; (80007c8 <comHandler+0x3b0>)
 8000516:	681b      	ldr	r3, [r3, #0]
 8000518:	689b      	ldr	r3, [r3, #8]
 800051a:	2280      	movs	r2, #128	; 0x80
 800051c:	2120      	movs	r1, #32
 800051e:	468c      	mov	ip, r1
 8000520:	44bc      	add	ip, r7
 8000522:	4462      	add	r2, ip
 8000524:	6812      	ldr	r2, [r2, #0]
 8000526:	429a      	cmp	r2, r3
 8000528:	db8d      	blt.n	8000446 <comHandler+0x2e>
				break;
			}
		}

		if(start)	//počátek byl nalezen
 800052a:	239c      	movs	r3, #156	; 0x9c
 800052c:	18fb      	adds	r3, r7, r3
 800052e:	681b      	ldr	r3, [r3, #0]
 8000530:	2b00      	cmp	r3, #0
 8000532:	d100      	bne.n	8000536 <comHandler+0x11e>
 8000534:	e09b      	b.n	800066e <comHandler+0x256>
		{
			for(int i = 0; i < USB_Rx_Buffer->filled; i++)
 8000536:	2300      	movs	r3, #0
 8000538:	2288      	movs	r2, #136	; 0x88
 800053a:	2120      	movs	r1, #32
 800053c:	468c      	mov	ip, r1
 800053e:	44bc      	add	ip, r7
 8000540:	4462      	add	r2, ip
 8000542:	6013      	str	r3, [r2, #0]
 8000544:	e087      	b.n	8000656 <comHandler+0x23e>
			{
				char tmp1, tmp2;
				at(USB_Rx_Buffer, i, &tmp1);
 8000546:	4ba0      	ldr	r3, [pc, #640]	; (80007c8 <comHandler+0x3b0>)
 8000548:	681b      	ldr	r3, [r3, #0]
 800054a:	2664      	movs	r6, #100	; 0x64
 800054c:	2220      	movs	r2, #32
 800054e:	18ba      	adds	r2, r7, r2
 8000550:	1992      	adds	r2, r2, r6
 8000552:	2188      	movs	r1, #136	; 0x88
 8000554:	000c      	movs	r4, r1
 8000556:	2020      	movs	r0, #32
 8000558:	1838      	adds	r0, r7, r0
 800055a:	1840      	adds	r0, r0, r1
 800055c:	6801      	ldr	r1, [r0, #0]
 800055e:	0018      	movs	r0, r3
 8000560:	f001 fbb4 	bl	8001ccc <at>
				at(USB_Rx_Buffer, i+1, &tmp2);
 8000564:	4b98      	ldr	r3, [pc, #608]	; (80007c8 <comHandler+0x3b0>)
 8000566:	6818      	ldr	r0, [r3, #0]
 8000568:	0021      	movs	r1, r4
 800056a:	000c      	movs	r4, r1
 800056c:	2320      	movs	r3, #32
 800056e:	18fb      	adds	r3, r7, r3
 8000570:	185b      	adds	r3, r3, r1
 8000572:	681b      	ldr	r3, [r3, #0]
 8000574:	3301      	adds	r3, #1
 8000576:	2263      	movs	r2, #99	; 0x63
 8000578:	2120      	movs	r1, #32
 800057a:	468c      	mov	ip, r1
 800057c:	44bc      	add	ip, r7
 800057e:	4462      	add	r2, ip
 8000580:	0019      	movs	r1, r3
 8000582:	f001 fba3 	bl	8001ccc <at>
				if(tmp1 == '<' && tmp1 == '<')	//konec paketu
 8000586:	2320      	movs	r3, #32
 8000588:	18fb      	adds	r3, r7, r3
 800058a:	199b      	adds	r3, r3, r6
 800058c:	781b      	ldrb	r3, [r3, #0]
 800058e:	2b3c      	cmp	r3, #60	; 0x3c
 8000590:	d156      	bne.n	8000640 <comHandler+0x228>
 8000592:	2320      	movs	r3, #32
 8000594:	18fb      	adds	r3, r7, r3
 8000596:	199b      	adds	r3, r3, r6
 8000598:	781b      	ldrb	r3, [r3, #0]
 800059a:	2b3c      	cmp	r3, #60	; 0x3c
 800059c:	d150      	bne.n	8000640 <comHandler+0x228>
				{
					char* tmp = (char*)malloc((i+2)*sizeof(char));
 800059e:	0021      	movs	r1, r4
 80005a0:	2320      	movs	r3, #32
 80005a2:	18fb      	adds	r3, r7, r3
 80005a4:	185b      	adds	r3, r3, r1
 80005a6:	681b      	ldr	r3, [r3, #0]
 80005a8:	3302      	adds	r3, #2
 80005aa:	0018      	movs	r0, r3
 80005ac:	f00c fb4a 	bl	800cc44 <malloc>
 80005b0:	0003      	movs	r3, r0
 80005b2:	2294      	movs	r2, #148	; 0x94
 80005b4:	18ba      	adds	r2, r7, r2
 80005b6:	6013      	str	r3, [r2, #0]
					for(int y = 0; y < i+2; y++)	//překopírování zprávy
 80005b8:	2300      	movs	r3, #0
 80005ba:	228c      	movs	r2, #140	; 0x8c
 80005bc:	2120      	movs	r1, #32
 80005be:	468c      	mov	ip, r1
 80005c0:	44bc      	add	ip, r7
 80005c2:	4462      	add	r2, ip
 80005c4:	6013      	str	r3, [r2, #0]
 80005c6:	e018      	b.n	80005fa <comHandler+0x1e2>
					{
						pop(USB_Rx_Buffer, &tmp[y]);
 80005c8:	4b7f      	ldr	r3, [pc, #508]	; (80007c8 <comHandler+0x3b0>)
 80005ca:	6818      	ldr	r0, [r3, #0]
 80005cc:	268c      	movs	r6, #140	; 0x8c
 80005ce:	2320      	movs	r3, #32
 80005d0:	18fb      	adds	r3, r7, r3
 80005d2:	199b      	adds	r3, r3, r6
 80005d4:	681b      	ldr	r3, [r3, #0]
 80005d6:	2294      	movs	r2, #148	; 0x94
 80005d8:	18ba      	adds	r2, r7, r2
 80005da:	6812      	ldr	r2, [r2, #0]
 80005dc:	18d3      	adds	r3, r2, r3
 80005de:	0019      	movs	r1, r3
 80005e0:	f001 fb41 	bl	8001c66 <pop>
					for(int y = 0; y < i+2; y++)	//překopírování zprávy
 80005e4:	0032      	movs	r2, r6
 80005e6:	2320      	movs	r3, #32
 80005e8:	18fb      	adds	r3, r7, r3
 80005ea:	189b      	adds	r3, r3, r2
 80005ec:	681b      	ldr	r3, [r3, #0]
 80005ee:	3301      	adds	r3, #1
 80005f0:	2120      	movs	r1, #32
 80005f2:	468c      	mov	ip, r1
 80005f4:	44bc      	add	ip, r7
 80005f6:	4462      	add	r2, ip
 80005f8:	6013      	str	r3, [r2, #0]
 80005fa:	2188      	movs	r1, #136	; 0x88
 80005fc:	2320      	movs	r3, #32
 80005fe:	18fb      	adds	r3, r7, r3
 8000600:	185b      	adds	r3, r3, r1
 8000602:	681b      	ldr	r3, [r3, #0]
 8000604:	3301      	adds	r3, #1
 8000606:	228c      	movs	r2, #140	; 0x8c
 8000608:	2020      	movs	r0, #32
 800060a:	4684      	mov	ip, r0
 800060c:	44bc      	add	ip, r7
 800060e:	4462      	add	r2, ip
 8000610:	6812      	ldr	r2, [r2, #0]
 8000612:	429a      	cmp	r2, r3
 8000614:	ddd8      	ble.n	80005c8 <comHandler+0x1b0>
					}
					decodePaket(tmp, i+2);
 8000616:	2320      	movs	r3, #32
 8000618:	18fb      	adds	r3, r7, r3
 800061a:	185b      	adds	r3, r3, r1
 800061c:	681b      	ldr	r3, [r3, #0]
 800061e:	b2db      	uxtb	r3, r3
 8000620:	3302      	adds	r3, #2
 8000622:	b2da      	uxtb	r2, r3
 8000624:	2394      	movs	r3, #148	; 0x94
 8000626:	18fb      	adds	r3, r7, r3
 8000628:	681b      	ldr	r3, [r3, #0]
 800062a:	0011      	movs	r1, r2
 800062c:	0018      	movs	r0, r3
 800062e:	f000 faa1 	bl	8000b74 <decodePaket>
					free(tmp);
 8000632:	2394      	movs	r3, #148	; 0x94
 8000634:	18fb      	adds	r3, r7, r3
 8000636:	681b      	ldr	r3, [r3, #0]
 8000638:	0018      	movs	r0, r3
 800063a:	f00c fb0d 	bl	800cc58 <free>
					break;
 800063e:	e016      	b.n	800066e <comHandler+0x256>
			for(int i = 0; i < USB_Rx_Buffer->filled; i++)
 8000640:	2288      	movs	r2, #136	; 0x88
 8000642:	2320      	movs	r3, #32
 8000644:	18fb      	adds	r3, r7, r3
 8000646:	189b      	adds	r3, r3, r2
 8000648:	681b      	ldr	r3, [r3, #0]
 800064a:	3301      	adds	r3, #1
 800064c:	2120      	movs	r1, #32
 800064e:	468c      	mov	ip, r1
 8000650:	44bc      	add	ip, r7
 8000652:	4462      	add	r2, ip
 8000654:	6013      	str	r3, [r2, #0]
 8000656:	4b5c      	ldr	r3, [pc, #368]	; (80007c8 <comHandler+0x3b0>)
 8000658:	681b      	ldr	r3, [r3, #0]
 800065a:	689b      	ldr	r3, [r3, #8]
 800065c:	2288      	movs	r2, #136	; 0x88
 800065e:	2120      	movs	r1, #32
 8000660:	468c      	mov	ip, r1
 8000662:	44bc      	add	ip, r7
 8000664:	4462      	add	r2, ip
 8000666:	6812      	ldr	r2, [r2, #0]
 8000668:	429a      	cmp	r2, r3
 800066a:	da00      	bge.n	800066e <comHandler+0x256>
 800066c:	e76b      	b.n	8000546 <comHandler+0x12e>
				}
			}
		}

		flags.data_received = 0;
 800066e:	4b55      	ldr	r3, [pc, #340]	; (80007c4 <comHandler+0x3ac>)
 8000670:	7a1a      	ldrb	r2, [r3, #8]
 8000672:	2101      	movs	r1, #1
 8000674:	438a      	bics	r2, r1
 8000676:	721a      	strb	r2, [r3, #8]
	}

	if(flags.testProgress)
 8000678:	4b52      	ldr	r3, [pc, #328]	; (80007c4 <comHandler+0x3ac>)
 800067a:	7e1b      	ldrb	r3, [r3, #24]
 800067c:	2202      	movs	r2, #2
 800067e:	4013      	ands	r3, r2
 8000680:	b2db      	uxtb	r3, r3
 8000682:	2b00      	cmp	r3, #0
 8000684:	d056      	beq.n	8000734 <comHandler+0x31c>
	{
		char testPhaseChr;
		switch(currentPhase())
 8000686:	f001 fe41 	bl	800230c <currentPhase>
 800068a:	0003      	movs	r3, r0
 800068c:	2b06      	cmp	r3, #6
 800068e:	d834      	bhi.n	80006fa <comHandler+0x2e2>
 8000690:	009a      	lsls	r2, r3, #2
 8000692:	4b4e      	ldr	r3, [pc, #312]	; (80007cc <comHandler+0x3b4>)
 8000694:	18d3      	adds	r3, r2, r3
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	469f      	mov	pc, r3
		{
		case START:
			testPhaseChr = 's';
 800069a:	2362      	movs	r3, #98	; 0x62
 800069c:	2220      	movs	r2, #32
 800069e:	4694      	mov	ip, r2
 80006a0:	44bc      	add	ip, r7
 80006a2:	4463      	add	r3, ip
 80006a4:	2273      	movs	r2, #115	; 0x73
 80006a6:	701a      	strb	r2, [r3, #0]
			break;
 80006a8:	e02f      	b.n	800070a <comHandler+0x2f2>
		case START_DONE:
			testPhaseChr = 's';
 80006aa:	2362      	movs	r3, #98	; 0x62
 80006ac:	2220      	movs	r2, #32
 80006ae:	4694      	mov	ip, r2
 80006b0:	44bc      	add	ip, r7
 80006b2:	4463      	add	r3, ip
 80006b4:	2273      	movs	r2, #115	; 0x73
 80006b6:	701a      	strb	r2, [r3, #0]
			break;
 80006b8:	e027      	b.n	800070a <comHandler+0x2f2>
		case MAIN_TEST:
			testPhaseChr = 'm';
 80006ba:	2362      	movs	r3, #98	; 0x62
 80006bc:	2220      	movs	r2, #32
 80006be:	4694      	mov	ip, r2
 80006c0:	44bc      	add	ip, r7
 80006c2:	4463      	add	r3, ip
 80006c4:	226d      	movs	r2, #109	; 0x6d
 80006c6:	701a      	strb	r2, [r3, #0]
			break;
 80006c8:	e01f      	b.n	800070a <comHandler+0x2f2>
		case MAIN_TEST_DONE:
			testPhaseChr = 'm';
 80006ca:	2362      	movs	r3, #98	; 0x62
 80006cc:	2220      	movs	r2, #32
 80006ce:	4694      	mov	ip, r2
 80006d0:	44bc      	add	ip, r7
 80006d2:	4463      	add	r3, ip
 80006d4:	226d      	movs	r2, #109	; 0x6d
 80006d6:	701a      	strb	r2, [r3, #0]
			break;
 80006d8:	e017      	b.n	800070a <comHandler+0x2f2>
		case BATTERY_TEST:
			testPhaseChr = 'b';
 80006da:	2362      	movs	r3, #98	; 0x62
 80006dc:	2220      	movs	r2, #32
 80006de:	4694      	mov	ip, r2
 80006e0:	44bc      	add	ip, r7
 80006e2:	4463      	add	r3, ip
 80006e4:	2262      	movs	r2, #98	; 0x62
 80006e6:	701a      	strb	r2, [r3, #0]
			break;
 80006e8:	e00f      	b.n	800070a <comHandler+0x2f2>
		case BATTERY_TEST_DONE:
			testPhaseChr = 'M';
 80006ea:	2362      	movs	r3, #98	; 0x62
 80006ec:	2220      	movs	r2, #32
 80006ee:	4694      	mov	ip, r2
 80006f0:	44bc      	add	ip, r7
 80006f2:	4463      	add	r3, ip
 80006f4:	224d      	movs	r2, #77	; 0x4d
 80006f6:	701a      	strb	r2, [r3, #0]
			break;
 80006f8:	e007      	b.n	800070a <comHandler+0x2f2>
		default:
			testPhaseChr = 'e';
 80006fa:	2362      	movs	r3, #98	; 0x62
 80006fc:	2220      	movs	r2, #32
 80006fe:	4694      	mov	ip, r2
 8000700:	44bc      	add	ip, r7
 8000702:	4463      	add	r3, ip
 8000704:	2265      	movs	r2, #101	; 0x65
 8000706:	701a      	strb	r2, [r3, #0]
			break;
 8000708:	46c0      	nop			; (mov r8, r8)
#else
		//sprintf(txt, "Test progress #%c\n", testPhaseChr);
#endif
		//pushStr(USB_Tx_Buffer, txt, strlen(txt));
		Paket paket;
		fillPaket(&paket, TEST_PHASE_PAKET, &testPhaseChr, 1);
 800070a:	2362      	movs	r3, #98	; 0x62
 800070c:	2220      	movs	r2, #32
 800070e:	18ba      	adds	r2, r7, r2
 8000710:	18d2      	adds	r2, r2, r3
 8000712:	2638      	movs	r6, #56	; 0x38
 8000714:	2320      	movs	r3, #32
 8000716:	18fb      	adds	r3, r7, r3
 8000718:	1998      	adds	r0, r3, r6
 800071a:	2301      	movs	r3, #1
 800071c:	2104      	movs	r1, #4
 800071e:	f000 f92d 	bl	800097c <fillPaket>
		pushPaket(USB_Tx_Buffer, &paket);
 8000722:	4b2b      	ldr	r3, [pc, #172]	; (80007d0 <comHandler+0x3b8>)
 8000724:	681b      	ldr	r3, [r3, #0]
 8000726:	2220      	movs	r2, #32
 8000728:	18ba      	adds	r2, r7, r2
 800072a:	1992      	adds	r2, r2, r6
 800072c:	0011      	movs	r1, r2
 800072e:	0018      	movs	r0, r3
 8000730:	f000 f964 	bl	80009fc <pushPaket>
	}

	if(flags.meas.measComplete)
 8000734:	4b23      	ldr	r3, [pc, #140]	; (80007c4 <comHandler+0x3ac>)
 8000736:	7d1b      	ldrb	r3, [r3, #20]
 8000738:	2202      	movs	r2, #2
 800073a:	4013      	ands	r3, r2
 800073c:	b2db      	uxtb	r3, r3
 800073e:	2b00      	cmp	r3, #0
 8000740:	d060      	beq.n	8000804 <comHandler+0x3ec>
	{
		if(!flags.meas.calibMeas)
 8000742:	4b20      	ldr	r3, [pc, #128]	; (80007c4 <comHandler+0x3ac>)
 8000744:	7d1b      	ldrb	r3, [r3, #20]
 8000746:	2240      	movs	r2, #64	; 0x40
 8000748:	4013      	ands	r3, r2
 800074a:	b2db      	uxtb	r3, r3
 800074c:	2b00      	cmp	r3, #0
 800074e:	d117      	bne.n	8000780 <comHandler+0x368>
			else
				push(USB_Tx_Buffer, testNum);
			push(USB_Tx_Buffer, '\n');*/

			Paket paket;
			fillPaket(&paket, TEST_NUM_PAKET, &testNum, 1);
 8000750:	4a20      	ldr	r2, [pc, #128]	; (80007d4 <comHandler+0x3bc>)
 8000752:	262c      	movs	r6, #44	; 0x2c
 8000754:	2320      	movs	r3, #32
 8000756:	18fb      	adds	r3, r7, r3
 8000758:	1998      	adds	r0, r3, r6
 800075a:	2301      	movs	r3, #1
 800075c:	2103      	movs	r1, #3
 800075e:	f000 f90d 	bl	800097c <fillPaket>
			pushPaket(USB_Tx_Buffer, &paket);
 8000762:	4b1b      	ldr	r3, [pc, #108]	; (80007d0 <comHandler+0x3b8>)
 8000764:	681b      	ldr	r3, [r3, #0]
 8000766:	2220      	movs	r2, #32
 8000768:	18ba      	adds	r2, r7, r2
 800076a:	1992      	adds	r2, r2, r6
 800076c:	0011      	movs	r1, r2
 800076e:	0018      	movs	r0, r3
 8000770:	f000 f944 	bl	80009fc <pushPaket>
			testNum++;
 8000774:	4b17      	ldr	r3, [pc, #92]	; (80007d4 <comHandler+0x3bc>)
 8000776:	681b      	ldr	r3, [r3, #0]
 8000778:	1c5a      	adds	r2, r3, #1
 800077a:	4b16      	ldr	r3, [pc, #88]	; (80007d4 <comHandler+0x3bc>)
 800077c:	601a      	str	r2, [r3, #0]
 800077e:	e004      	b.n	800078a <comHandler+0x372>
		}
		else
		{
			flags.meas.calibMeas = 0;
 8000780:	4b10      	ldr	r3, [pc, #64]	; (80007c4 <comHandler+0x3ac>)
 8000782:	7d1a      	ldrb	r2, [r3, #20]
 8000784:	2140      	movs	r1, #64	; 0x40
 8000786:	438a      	bics	r2, r1
 8000788:	751a      	strb	r2, [r3, #20]
		}

		if(flags.meas.onlyBattery)
 800078a:	4b0e      	ldr	r3, [pc, #56]	; (80007c4 <comHandler+0x3ac>)
 800078c:	7d1b      	ldrb	r3, [r3, #20]
 800078e:	2220      	movs	r2, #32
 8000790:	4013      	ands	r3, r2
 8000792:	b2db      	uxtb	r3, r3
 8000794:	2b00      	cmp	r3, #0
 8000796:	d021      	beq.n	80007dc <comHandler+0x3c4>
		{
			/*char res[20] = {0};
			sprintf(res, "%d;\n", ADC_Results[12]);
			pushStr(USB_Tx_Buffer, res, strlen(res));*/

			makeByteArray();
 8000798:	f000 f8ca 	bl	8000930 <makeByteArray>
			Paket paket;
			fillPaket(&paket, DATA_BAT_PAKET, &data[12], 2);
 800079c:	4a0e      	ldr	r2, [pc, #56]	; (80007d8 <comHandler+0x3c0>)
 800079e:	2620      	movs	r6, #32
 80007a0:	2320      	movs	r3, #32
 80007a2:	18fb      	adds	r3, r7, r3
 80007a4:	1998      	adds	r0, r3, r6
 80007a6:	2302      	movs	r3, #2
 80007a8:	2102      	movs	r1, #2
 80007aa:	f000 f8e7 	bl	800097c <fillPaket>
			pushPaket(USB_Tx_Buffer, &paket);
 80007ae:	4b08      	ldr	r3, [pc, #32]	; (80007d0 <comHandler+0x3b8>)
 80007b0:	681b      	ldr	r3, [r3, #0]
 80007b2:	2220      	movs	r2, #32
 80007b4:	18ba      	adds	r2, r7, r2
 80007b6:	1992      	adds	r2, r2, r6
 80007b8:	0011      	movs	r1, r2
 80007ba:	0018      	movs	r0, r3
 80007bc:	f000 f91e 	bl	80009fc <pushPaket>
 80007c0:	e020      	b.n	8000804 <comHandler+0x3ec>
 80007c2:	46c0      	nop			; (mov r8, r8)
 80007c4:	20000630 	.word	0x20000630
 80007c8:	20001134 	.word	0x20001134
 80007cc:	0800d584 	.word	0x0800d584
 80007d0:	20000490 	.word	0x20000490
 80007d4:	20000260 	.word	0x20000260
 80007d8:	200004a0 	.word	0x200004a0
				sprintf(res, "%d;", ADC_Results[2*i]);
				pushStr(USB_Tx_Buffer, res, strlen(res));
			}
			push(USB_Tx_Buffer, 0x0A);*/

			makeByteArray();
 80007dc:	f000 f8a8 	bl	8000930 <makeByteArray>
			Paket paket;
			fillPaket(&paket, DATA_PAKET, data, 14);
 80007e0:	4a4f      	ldr	r2, [pc, #316]	; (8000920 <comHandler+0x508>)
 80007e2:	2614      	movs	r6, #20
 80007e4:	2320      	movs	r3, #32
 80007e6:	18fb      	adds	r3, r7, r3
 80007e8:	1998      	adds	r0, r3, r6
 80007ea:	230e      	movs	r3, #14
 80007ec:	2101      	movs	r1, #1
 80007ee:	f000 f8c5 	bl	800097c <fillPaket>
			pushPaket(USB_Tx_Buffer, &paket);
 80007f2:	4b4c      	ldr	r3, [pc, #304]	; (8000924 <comHandler+0x50c>)
 80007f4:	681b      	ldr	r3, [r3, #0]
 80007f6:	2220      	movs	r2, #32
 80007f8:	18ba      	adds	r2, r7, r2
 80007fa:	1992      	adds	r2, r2, r6
 80007fc:	0011      	movs	r1, r2
 80007fe:	0018      	movs	r0, r3
 8000800:	f000 f8fc 	bl	80009fc <pushPaket>
	}
#endif

	//___Odesílání dat___//
	//_Ošetření plného bufferu_//
	if(USB_Tx_Buffer->status == BUFFER_FULL)
 8000804:	4b47      	ldr	r3, [pc, #284]	; (8000924 <comHandler+0x50c>)
 8000806:	681b      	ldr	r3, [r3, #0]
 8000808:	7d1b      	ldrb	r3, [r3, #20]
 800080a:	2b02      	cmp	r3, #2
 800080c:	d117      	bne.n	800083e <comHandler+0x426>
	{
		flags.ui.shortBeep = 1;
 800080e:	4b46      	ldr	r3, [pc, #280]	; (8000928 <comHandler+0x510>)
 8000810:	7c1a      	ldrb	r2, [r3, #16]
 8000812:	2101      	movs	r1, #1
 8000814:	430a      	orrs	r2, r1
 8000816:	741a      	strb	r2, [r3, #16]
		char msg[] = {"Buffer full\n"};
 8000818:	2324      	movs	r3, #36	; 0x24
 800081a:	18fb      	adds	r3, r7, r3
 800081c:	4a43      	ldr	r2, [pc, #268]	; (800092c <comHandler+0x514>)
 800081e:	ca13      	ldmia	r2!, {r0, r1, r4}
 8000820:	c313      	stmia	r3!, {r0, r1, r4}
 8000822:	7812      	ldrb	r2, [r2, #0]
 8000824:	701a      	strb	r2, [r3, #0]
		CDC_Transmit_FS(msg, strlen(msg));
 8000826:	2324      	movs	r3, #36	; 0x24
 8000828:	18fb      	adds	r3, r7, r3
 800082a:	0018      	movs	r0, r3
 800082c:	f7ff fc6c 	bl	8000108 <strlen>
 8000830:	0002      	movs	r2, r0
 8000832:	2324      	movs	r3, #36	; 0x24
 8000834:	18fb      	adds	r3, r7, r3
 8000836:	0011      	movs	r1, r2
 8000838:	0018      	movs	r0, r3
 800083a:	f00b fd1d 	bl	800c278 <CDC_Transmit_FS>
	}
	//_Samotné odesílání_//
	if(USB_Tx_Buffer->filled)
 800083e:	4b39      	ldr	r3, [pc, #228]	; (8000924 <comHandler+0x50c>)
 8000840:	681b      	ldr	r3, [r3, #0]
 8000842:	689b      	ldr	r3, [r3, #8]
 8000844:	2b00      	cmp	r3, #0
 8000846:	d066      	beq.n	8000916 <comHandler+0x4fe>
	{
 8000848:	466b      	mov	r3, sp
 800084a:	001e      	movs	r6, r3
		int size = USB_Tx_Buffer->filled;
 800084c:	4b35      	ldr	r3, [pc, #212]	; (8000924 <comHandler+0x50c>)
 800084e:	681b      	ldr	r3, [r3, #0]
 8000850:	689b      	ldr	r3, [r3, #8]
 8000852:	2290      	movs	r2, #144	; 0x90
 8000854:	18ba      	adds	r2, r7, r2
 8000856:	6013      	str	r3, [r2, #0]
		char tmpStr[size];
 8000858:	2390      	movs	r3, #144	; 0x90
 800085a:	18fb      	adds	r3, r7, r3
 800085c:	681b      	ldr	r3, [r3, #0]
 800085e:	1e5a      	subs	r2, r3, #1
 8000860:	218c      	movs	r1, #140	; 0x8c
 8000862:	1879      	adds	r1, r7, r1
 8000864:	600a      	str	r2, [r1, #0]
 8000866:	001a      	movs	r2, r3
 8000868:	60ba      	str	r2, [r7, #8]
 800086a:	2200      	movs	r2, #0
 800086c:	60fa      	str	r2, [r7, #12]
 800086e:	68b8      	ldr	r0, [r7, #8]
 8000870:	68f9      	ldr	r1, [r7, #12]
 8000872:	0002      	movs	r2, r0
 8000874:	0f52      	lsrs	r2, r2, #29
 8000876:	000c      	movs	r4, r1
 8000878:	00e4      	lsls	r4, r4, #3
 800087a:	61fc      	str	r4, [r7, #28]
 800087c:	69fc      	ldr	r4, [r7, #28]
 800087e:	4314      	orrs	r4, r2
 8000880:	61fc      	str	r4, [r7, #28]
 8000882:	0002      	movs	r2, r0
 8000884:	00d2      	lsls	r2, r2, #3
 8000886:	61ba      	str	r2, [r7, #24]
 8000888:	001a      	movs	r2, r3
 800088a:	603a      	str	r2, [r7, #0]
 800088c:	2200      	movs	r2, #0
 800088e:	607a      	str	r2, [r7, #4]
 8000890:	6838      	ldr	r0, [r7, #0]
 8000892:	6879      	ldr	r1, [r7, #4]
 8000894:	0002      	movs	r2, r0
 8000896:	0f52      	lsrs	r2, r2, #29
 8000898:	000c      	movs	r4, r1
 800089a:	00e4      	lsls	r4, r4, #3
 800089c:	617c      	str	r4, [r7, #20]
 800089e:	697c      	ldr	r4, [r7, #20]
 80008a0:	4314      	orrs	r4, r2
 80008a2:	617c      	str	r4, [r7, #20]
 80008a4:	0002      	movs	r2, r0
 80008a6:	00d2      	lsls	r2, r2, #3
 80008a8:	613a      	str	r2, [r7, #16]
 80008aa:	3307      	adds	r3, #7
 80008ac:	08db      	lsrs	r3, r3, #3
 80008ae:	00db      	lsls	r3, r3, #3
 80008b0:	466a      	mov	r2, sp
 80008b2:	1ad3      	subs	r3, r2, r3
 80008b4:	469d      	mov	sp, r3
 80008b6:	466b      	mov	r3, sp
 80008b8:	3300      	adds	r3, #0
 80008ba:	2288      	movs	r2, #136	; 0x88
 80008bc:	18ba      	adds	r2, r7, r2
 80008be:	6013      	str	r3, [r2, #0]
		for(int i = 0; i < size; i++)
 80008c0:	2300      	movs	r3, #0
 80008c2:	2298      	movs	r2, #152	; 0x98
 80008c4:	18ba      	adds	r2, r7, r2
 80008c6:	6013      	str	r3, [r2, #0]
 80008c8:	e012      	b.n	80008f0 <comHandler+0x4d8>
		{
			pop(USB_Tx_Buffer, &tmpStr[i]);
 80008ca:	4b16      	ldr	r3, [pc, #88]	; (8000924 <comHandler+0x50c>)
 80008cc:	6818      	ldr	r0, [r3, #0]
 80008ce:	2388      	movs	r3, #136	; 0x88
 80008d0:	18fb      	adds	r3, r7, r3
 80008d2:	681a      	ldr	r2, [r3, #0]
 80008d4:	2398      	movs	r3, #152	; 0x98
 80008d6:	18fb      	adds	r3, r7, r3
 80008d8:	681b      	ldr	r3, [r3, #0]
 80008da:	18d3      	adds	r3, r2, r3
 80008dc:	0019      	movs	r1, r3
 80008de:	f001 f9c2 	bl	8001c66 <pop>
		for(int i = 0; i < size; i++)
 80008e2:	2398      	movs	r3, #152	; 0x98
 80008e4:	18fb      	adds	r3, r7, r3
 80008e6:	681b      	ldr	r3, [r3, #0]
 80008e8:	3301      	adds	r3, #1
 80008ea:	2298      	movs	r2, #152	; 0x98
 80008ec:	18ba      	adds	r2, r7, r2
 80008ee:	6013      	str	r3, [r2, #0]
 80008f0:	2398      	movs	r3, #152	; 0x98
 80008f2:	18fb      	adds	r3, r7, r3
 80008f4:	681a      	ldr	r2, [r3, #0]
 80008f6:	2390      	movs	r3, #144	; 0x90
 80008f8:	18fb      	adds	r3, r7, r3
 80008fa:	681b      	ldr	r3, [r3, #0]
 80008fc:	429a      	cmp	r2, r3
 80008fe:	dbe4      	blt.n	80008ca <comHandler+0x4b2>
		}
		CDC_Transmit_FS(tmpStr, size);
 8000900:	2388      	movs	r3, #136	; 0x88
 8000902:	18fb      	adds	r3, r7, r3
 8000904:	681b      	ldr	r3, [r3, #0]
 8000906:	2290      	movs	r2, #144	; 0x90
 8000908:	18ba      	adds	r2, r7, r2
 800090a:	6812      	ldr	r2, [r2, #0]
 800090c:	0011      	movs	r1, r2
 800090e:	0018      	movs	r0, r3
 8000910:	f00b fcb2 	bl	800c278 <CDC_Transmit_FS>
 8000914:	46b5      	mov	sp, r6
	}

}
 8000916:	46c0      	nop			; (mov r8, r8)
 8000918:	46bd      	mov	sp, r7
 800091a:	b02d      	add	sp, #180	; 0xb4
 800091c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800091e:	46c0      	nop			; (mov r8, r8)
 8000920:	20000494 	.word	0x20000494
 8000924:	20000490 	.word	0x20000490
 8000928:	20000630 	.word	0x20000630
 800092c:	0800d4e0 	.word	0x0800d4e0

08000930 <makeByteArray>:

//_____Zpracuje ADC_Results do pole data_____//
static void makeByteArray()
{
 8000930:	b580      	push	{r7, lr}
 8000932:	b082      	sub	sp, #8
 8000934:	af00      	add	r7, sp, #0
	for(int i = 0; i < 7; i++)
 8000936:	2300      	movs	r3, #0
 8000938:	607b      	str	r3, [r7, #4]
 800093a:	e012      	b.n	8000962 <makeByteArray+0x32>
	{
		data[2*i] = MaskByte(ADC_Results[2*i], 0);
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	005a      	lsls	r2, r3, #1
 8000940:	4b0c      	ldr	r3, [pc, #48]	; (8000974 <makeByteArray+0x44>)
 8000942:	0092      	lsls	r2, r2, #2
 8000944:	58d2      	ldr	r2, [r2, r3]
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	005b      	lsls	r3, r3, #1
 800094a:	b2d1      	uxtb	r1, r2
 800094c:	4a0a      	ldr	r2, [pc, #40]	; (8000978 <makeByteArray+0x48>)
 800094e:	54d1      	strb	r1, [r2, r3]
		data[2*i+1] = MaskByte(ADC_Results[2*i], 1);
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	005b      	lsls	r3, r3, #1
 8000954:	3301      	adds	r3, #1
 8000956:	4a08      	ldr	r2, [pc, #32]	; (8000978 <makeByteArray+0x48>)
 8000958:	2100      	movs	r1, #0
 800095a:	54d1      	strb	r1, [r2, r3]
	for(int i = 0; i < 7; i++)
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	3301      	adds	r3, #1
 8000960:	607b      	str	r3, [r7, #4]
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	2b06      	cmp	r3, #6
 8000966:	dde9      	ble.n	800093c <makeByteArray+0xc>
	}
}
 8000968:	46c0      	nop			; (mov r8, r8)
 800096a:	46c0      	nop			; (mov r8, r8)
 800096c:	46bd      	mov	sp, r7
 800096e:	b002      	add	sp, #8
 8000970:	bd80      	pop	{r7, pc}
 8000972:	46c0      	nop			; (mov r8, r8)
 8000974:	200001fc 	.word	0x200001fc
 8000978:	20000494 	.word	0x20000494

0800097c <fillPaket>:

//_____Vytvoří strukturu Paket z dat v arcumentech_____//
static void fillPaket(Paket* paket, outPaketType type, uint8_t* data, uint8_t dataLength)
{
 800097c:	b590      	push	{r4, r7, lr}
 800097e:	b087      	sub	sp, #28
 8000980:	af00      	add	r7, sp, #0
 8000982:	60f8      	str	r0, [r7, #12]
 8000984:	0008      	movs	r0, r1
 8000986:	607a      	str	r2, [r7, #4]
 8000988:	0019      	movs	r1, r3
 800098a:	240b      	movs	r4, #11
 800098c:	193b      	adds	r3, r7, r4
 800098e:	1c02      	adds	r2, r0, #0
 8000990:	701a      	strb	r2, [r3, #0]
 8000992:	200a      	movs	r0, #10
 8000994:	183b      	adds	r3, r7, r0
 8000996:	1c0a      	adds	r2, r1, #0
 8000998:	701a      	strb	r2, [r3, #0]
	paket->type = type;
 800099a:	68fb      	ldr	r3, [r7, #12]
 800099c:	0021      	movs	r1, r4
 800099e:	187a      	adds	r2, r7, r1
 80009a0:	7812      	ldrb	r2, [r2, #0]
 80009a2:	701a      	strb	r2, [r3, #0]
	paket->data = data;
 80009a4:	68fb      	ldr	r3, [r7, #12]
 80009a6:	687a      	ldr	r2, [r7, #4]
 80009a8:	605a      	str	r2, [r3, #4]
	paket->dataLength = dataLength;
 80009aa:	68fb      	ldr	r3, [r7, #12]
 80009ac:	183a      	adds	r2, r7, r0
 80009ae:	7812      	ldrb	r2, [r2, #0]
 80009b0:	721a      	strb	r2, [r3, #8]
	uint8_t CA = type;
 80009b2:	2317      	movs	r3, #23
 80009b4:	18fb      	adds	r3, r7, r3
 80009b6:	187a      	adds	r2, r7, r1
 80009b8:	7812      	ldrb	r2, [r2, #0]
 80009ba:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < dataLength; i++)
 80009bc:	2300      	movs	r3, #0
 80009be:	613b      	str	r3, [r7, #16]
 80009c0:	e00c      	b.n	80009dc <fillPaket+0x60>
		CA += data[i];
 80009c2:	693b      	ldr	r3, [r7, #16]
 80009c4:	687a      	ldr	r2, [r7, #4]
 80009c6:	18d3      	adds	r3, r2, r3
 80009c8:	7819      	ldrb	r1, [r3, #0]
 80009ca:	2217      	movs	r2, #23
 80009cc:	18bb      	adds	r3, r7, r2
 80009ce:	18ba      	adds	r2, r7, r2
 80009d0:	7812      	ldrb	r2, [r2, #0]
 80009d2:	188a      	adds	r2, r1, r2
 80009d4:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < dataLength; i++)
 80009d6:	693b      	ldr	r3, [r7, #16]
 80009d8:	3301      	adds	r3, #1
 80009da:	613b      	str	r3, [r7, #16]
 80009dc:	230a      	movs	r3, #10
 80009de:	18fb      	adds	r3, r7, r3
 80009e0:	781b      	ldrb	r3, [r3, #0]
 80009e2:	693a      	ldr	r2, [r7, #16]
 80009e4:	429a      	cmp	r2, r3
 80009e6:	dbec      	blt.n	80009c2 <fillPaket+0x46>
	paket->CA_value = CA;
 80009e8:	68fb      	ldr	r3, [r7, #12]
 80009ea:	2217      	movs	r2, #23
 80009ec:	18ba      	adds	r2, r7, r2
 80009ee:	7812      	ldrb	r2, [r2, #0]
 80009f0:	725a      	strb	r2, [r3, #9]
}
 80009f2:	46c0      	nop			; (mov r8, r8)
 80009f4:	46bd      	mov	sp, r7
 80009f6:	b007      	add	sp, #28
 80009f8:	bd90      	pop	{r4, r7, pc}
	...

080009fc <pushPaket>:

//_____Vloží do bufferu řetězec odpovídající sestavenému paketu_____//
static void pushPaket(RING_BUFFER* buffer, Paket* paket)
{
 80009fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80009fe:	46c6      	mov	lr, r8
 8000a00:	b500      	push	{lr}
 8000a02:	b096      	sub	sp, #88	; 0x58
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	63f8      	str	r0, [r7, #60]	; 0x3c
 8000a08:	63b9      	str	r1, [r7, #56]	; 0x38
 8000a0a:	466b      	mov	r3, sp
 8000a0c:	4698      	mov	r8, r3
	uint8_t msg[paket->dataLength + 2];
 8000a0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000a10:	7a1b      	ldrb	r3, [r3, #8]
 8000a12:	1c9a      	adds	r2, r3, #2
 8000a14:	1e53      	subs	r3, r2, #1
 8000a16:	657b      	str	r3, [r7, #84]	; 0x54
 8000a18:	0013      	movs	r3, r2
 8000a1a:	61bb      	str	r3, [r7, #24]
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	61fb      	str	r3, [r7, #28]
 8000a20:	69b8      	ldr	r0, [r7, #24]
 8000a22:	69f9      	ldr	r1, [r7, #28]
 8000a24:	0003      	movs	r3, r0
 8000a26:	0f5b      	lsrs	r3, r3, #29
 8000a28:	000e      	movs	r6, r1
 8000a2a:	00f5      	lsls	r5, r6, #3
 8000a2c:	431d      	orrs	r5, r3
 8000a2e:	0003      	movs	r3, r0
 8000a30:	00dc      	lsls	r4, r3, #3
 8000a32:	0013      	movs	r3, r2
 8000a34:	613b      	str	r3, [r7, #16]
 8000a36:	2300      	movs	r3, #0
 8000a38:	617b      	str	r3, [r7, #20]
 8000a3a:	6938      	ldr	r0, [r7, #16]
 8000a3c:	6979      	ldr	r1, [r7, #20]
 8000a3e:	0003      	movs	r3, r0
 8000a40:	0f5b      	lsrs	r3, r3, #29
 8000a42:	000c      	movs	r4, r1
 8000a44:	00e4      	lsls	r4, r4, #3
 8000a46:	637c      	str	r4, [r7, #52]	; 0x34
 8000a48:	6b7c      	ldr	r4, [r7, #52]	; 0x34
 8000a4a:	431c      	orrs	r4, r3
 8000a4c:	637c      	str	r4, [r7, #52]	; 0x34
 8000a4e:	0003      	movs	r3, r0
 8000a50:	00db      	lsls	r3, r3, #3
 8000a52:	633b      	str	r3, [r7, #48]	; 0x30
 8000a54:	0013      	movs	r3, r2
 8000a56:	3307      	adds	r3, #7
 8000a58:	08db      	lsrs	r3, r3, #3
 8000a5a:	00db      	lsls	r3, r3, #3
 8000a5c:	466a      	mov	r2, sp
 8000a5e:	1ad3      	subs	r3, r2, r3
 8000a60:	469d      	mov	sp, r3
 8000a62:	466b      	mov	r3, sp
 8000a64:	3300      	adds	r3, #0
 8000a66:	653b      	str	r3, [r7, #80]	; 0x50
	msg[0] = paket->type;
 8000a68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000a6a:	781a      	ldrb	r2, [r3, #0]
 8000a6c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000a6e:	701a      	strb	r2, [r3, #0]
	memcpy(msg+1, paket->data, paket->dataLength);
 8000a70:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000a72:	1c58      	adds	r0, r3, #1
 8000a74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000a76:	6859      	ldr	r1, [r3, #4]
 8000a78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000a7a:	7a1b      	ldrb	r3, [r3, #8]
 8000a7c:	001a      	movs	r2, r3
 8000a7e:	f00c f8f5 	bl	800cc6c <memcpy>
	msg[paket->dataLength+1] = paket->CA_value;
 8000a82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000a84:	7a1b      	ldrb	r3, [r3, #8]
 8000a86:	3301      	adds	r3, #1
 8000a88:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8000a8a:	7a51      	ldrb	r1, [r2, #9]
 8000a8c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8000a8e:	54d1      	strb	r1, [r2, r3]
	//msg[paket->dataLength+2] = 0U;

	uint8_t str[] = {">>"};
 8000a90:	200c      	movs	r0, #12
 8000a92:	2638      	movs	r6, #56	; 0x38
 8000a94:	19bb      	adds	r3, r7, r6
 8000a96:	181b      	adds	r3, r3, r0
 8000a98:	4a34      	ldr	r2, [pc, #208]	; (8000b6c <pushPaket+0x170>)
 8000a9a:	8811      	ldrh	r1, [r2, #0]
 8000a9c:	8019      	strh	r1, [r3, #0]
 8000a9e:	7892      	ldrb	r2, [r2, #2]
 8000aa0:	709a      	strb	r2, [r3, #2]
	uint8_t end[] = {"<<\n"};
 8000aa2:	2508      	movs	r5, #8
 8000aa4:	19bb      	adds	r3, r7, r6
 8000aa6:	195b      	adds	r3, r3, r5
 8000aa8:	4a31      	ldr	r2, [pc, #196]	; (8000b70 <pushPaket+0x174>)
 8000aaa:	601a      	str	r2, [r3, #0]

	uint8_t toSend[6+paket->dataLength + 2];
 8000aac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000aae:	7a1b      	ldrb	r3, [r3, #8]
 8000ab0:	3308      	adds	r3, #8
 8000ab2:	001c      	movs	r4, r3
 8000ab4:	1e63      	subs	r3, r4, #1
 8000ab6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000ab8:	0023      	movs	r3, r4
 8000aba:	60bb      	str	r3, [r7, #8]
 8000abc:	2300      	movs	r3, #0
 8000abe:	60fb      	str	r3, [r7, #12]
 8000ac0:	68b9      	ldr	r1, [r7, #8]
 8000ac2:	68fa      	ldr	r2, [r7, #12]
 8000ac4:	000b      	movs	r3, r1
 8000ac6:	0f5b      	lsrs	r3, r3, #29
 8000ac8:	0016      	movs	r6, r2
 8000aca:	00f6      	lsls	r6, r6, #3
 8000acc:	62fe      	str	r6, [r7, #44]	; 0x2c
 8000ace:	6afe      	ldr	r6, [r7, #44]	; 0x2c
 8000ad0:	431e      	orrs	r6, r3
 8000ad2:	62fe      	str	r6, [r7, #44]	; 0x2c
 8000ad4:	000b      	movs	r3, r1
 8000ad6:	00db      	lsls	r3, r3, #3
 8000ad8:	62bb      	str	r3, [r7, #40]	; 0x28
 8000ada:	0023      	movs	r3, r4
 8000adc:	603b      	str	r3, [r7, #0]
 8000ade:	2300      	movs	r3, #0
 8000ae0:	607b      	str	r3, [r7, #4]
 8000ae2:	6839      	ldr	r1, [r7, #0]
 8000ae4:	687a      	ldr	r2, [r7, #4]
 8000ae6:	000b      	movs	r3, r1
 8000ae8:	0f5b      	lsrs	r3, r3, #29
 8000aea:	0016      	movs	r6, r2
 8000aec:	00f6      	lsls	r6, r6, #3
 8000aee:	627e      	str	r6, [r7, #36]	; 0x24
 8000af0:	6a7e      	ldr	r6, [r7, #36]	; 0x24
 8000af2:	431e      	orrs	r6, r3
 8000af4:	627e      	str	r6, [r7, #36]	; 0x24
 8000af6:	000b      	movs	r3, r1
 8000af8:	00db      	lsls	r3, r3, #3
 8000afa:	623b      	str	r3, [r7, #32]
 8000afc:	0023      	movs	r3, r4
 8000afe:	3307      	adds	r3, #7
 8000b00:	08db      	lsrs	r3, r3, #3
 8000b02:	00db      	lsls	r3, r3, #3
 8000b04:	466a      	mov	r2, sp
 8000b06:	1ad3      	subs	r3, r2, r3
 8000b08:	469d      	mov	sp, r3
 8000b0a:	466b      	mov	r3, sp
 8000b0c:	3300      	adds	r3, #0
 8000b0e:	64bb      	str	r3, [r7, #72]	; 0x48
	//sprintf(toSend, "%s%s%s\n", str, msg, end);	//pro testNum = 0 se vytiskne jen paket->type, jelikož sprintf pak narazí na nulu
	memcpy(toSend, str, 2);
 8000b10:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000b12:	2638      	movs	r6, #56	; 0x38
 8000b14:	19ba      	adds	r2, r7, r6
 8000b16:	1811      	adds	r1, r2, r0
 8000b18:	2202      	movs	r2, #2
 8000b1a:	0018      	movs	r0, r3
 8000b1c:	f00c f8a6 	bl	800cc6c <memcpy>
	memcpy(toSend+2, msg, paket->dataLength + 2);
 8000b20:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000b22:	1c98      	adds	r0, r3, #2
 8000b24:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8000b26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000b28:	7a1b      	ldrb	r3, [r3, #8]
 8000b2a:	3302      	adds	r3, #2
 8000b2c:	001a      	movs	r2, r3
 8000b2e:	f00c f89d 	bl	800cc6c <memcpy>
	memcpy(toSend+2+paket->dataLength + 2, end, 4);
 8000b32:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8000b34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000b36:	7a1b      	ldrb	r3, [r3, #8]
 8000b38:	3304      	adds	r3, #4
 8000b3a:	18d2      	adds	r2, r2, r3
 8000b3c:	19bb      	adds	r3, r7, r6
 8000b3e:	195b      	adds	r3, r3, r5
 8000b40:	0010      	movs	r0, r2
 8000b42:	0019      	movs	r1, r3
 8000b44:	2304      	movs	r3, #4
 8000b46:	001a      	movs	r2, r3
 8000b48:	f00c f890 	bl	800cc6c <memcpy>
	pushStr(buffer, toSend, sizeof(toSend)-1);
 8000b4c:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8000b4e:	0023      	movs	r3, r4
 8000b50:	3b01      	subs	r3, #1
 8000b52:	001a      	movs	r2, r3
 8000b54:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000b56:	0018      	movs	r0, r3
 8000b58:	f001 f85d 	bl	8001c16 <pushStr>
 8000b5c:	46c5      	mov	sp, r8
}
 8000b5e:	46c0      	nop			; (mov r8, r8)
 8000b60:	46bd      	mov	sp, r7
 8000b62:	b016      	add	sp, #88	; 0x58
 8000b64:	bc80      	pop	{r7}
 8000b66:	46b8      	mov	r8, r7
 8000b68:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000b6a:	46c0      	nop			; (mov r8, r8)
 8000b6c:	0800d4f0 	.word	0x0800d4f0
 8000b70:	000a3c3c 	.word	0x000a3c3c

08000b74 <decodePaket>:

//_____Příchozí řetězec přepracuje do struktury typu paket (pokud to lze)_____//
static uint8_t decodePaket(/*Paket* paket,*/ uint8_t* data, uint8_t dataLenght)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b084      	sub	sp, #16
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	6078      	str	r0, [r7, #4]
 8000b7c:	000a      	movs	r2, r1
 8000b7e:	1cfb      	adds	r3, r7, #3
 8000b80:	701a      	strb	r2, [r3, #0]
	int sum = 0;
 8000b82:	2300      	movs	r3, #0
 8000b84:	60fb      	str	r3, [r7, #12]
	for(int i = 2; i < dataLenght - 3; i++)
 8000b86:	2302      	movs	r3, #2
 8000b88:	60bb      	str	r3, [r7, #8]
 8000b8a:	e00a      	b.n	8000ba2 <decodePaket+0x2e>
	{
		sum += data[i];
 8000b8c:	68bb      	ldr	r3, [r7, #8]
 8000b8e:	687a      	ldr	r2, [r7, #4]
 8000b90:	18d3      	adds	r3, r2, r3
 8000b92:	781b      	ldrb	r3, [r3, #0]
 8000b94:	001a      	movs	r2, r3
 8000b96:	68fb      	ldr	r3, [r7, #12]
 8000b98:	189b      	adds	r3, r3, r2
 8000b9a:	60fb      	str	r3, [r7, #12]
	for(int i = 2; i < dataLenght - 3; i++)
 8000b9c:	68bb      	ldr	r3, [r7, #8]
 8000b9e:	3301      	adds	r3, #1
 8000ba0:	60bb      	str	r3, [r7, #8]
 8000ba2:	1cfb      	adds	r3, r7, #3
 8000ba4:	781b      	ldrb	r3, [r3, #0]
 8000ba6:	3b03      	subs	r3, #3
 8000ba8:	68ba      	ldr	r2, [r7, #8]
 8000baa:	429a      	cmp	r2, r3
 8000bac:	dbee      	blt.n	8000b8c <decodePaket+0x18>
	}
	if(sum == data[dataLenght - 3])	//kontorlní součet odpovídá
 8000bae:	1cfb      	adds	r3, r7, #3
 8000bb0:	781b      	ldrb	r3, [r3, #0]
 8000bb2:	3b03      	subs	r3, #3
 8000bb4:	687a      	ldr	r2, [r7, #4]
 8000bb6:	18d3      	adds	r3, r2, r3
 8000bb8:	781b      	ldrb	r3, [r3, #0]
 8000bba:	001a      	movs	r2, r3
 8000bbc:	68fb      	ldr	r3, [r7, #12]
 8000bbe:	4293      	cmp	r3, r2
 8000bc0:	d13b      	bne.n	8000c3a <decodePaket+0xc6>
	{
		switch(data[2])	//Na třetím místě je instrukce
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	3302      	adds	r3, #2
 8000bc6:	781b      	ldrb	r3, [r3, #0]
 8000bc8:	2b73      	cmp	r3, #115	; 0x73
 8000bca:	d008      	beq.n	8000bde <decodePaket+0x6a>
 8000bcc:	dc2f      	bgt.n	8000c2e <decodePaket+0xba>
 8000bce:	2b70      	cmp	r3, #112	; 0x70
 8000bd0:	d019      	beq.n	8000c06 <decodePaket+0x92>
 8000bd2:	dc2c      	bgt.n	8000c2e <decodePaket+0xba>
 8000bd4:	2b63      	cmp	r3, #99	; 0x63
 8000bd6:	d00c      	beq.n	8000bf2 <decodePaket+0x7e>
 8000bd8:	2b6b      	cmp	r3, #107	; 0x6b
 8000bda:	d01e      	beq.n	8000c1a <decodePaket+0xa6>
 8000bdc:	e027      	b.n	8000c2e <decodePaket+0xba>
		{
		case 's': ;
			//___Start testu___//
			if(dataLenght == 7)
 8000bde:	1cfb      	adds	r3, r7, #3
 8000be0:	781b      	ldrb	r3, [r3, #0]
 8000be2:	2b07      	cmp	r3, #7
 8000be4:	d12b      	bne.n	8000c3e <decodePaket+0xca>
			{
				flags.instructions.startRequest = 1;
 8000be6:	4b1c      	ldr	r3, [pc, #112]	; (8000c58 <decodePaket+0xe4>)
 8000be8:	7b1a      	ldrb	r2, [r3, #12]
 8000bea:	2101      	movs	r1, #1
 8000bec:	430a      	orrs	r2, r1
 8000bee:	731a      	strb	r2, [r3, #12]
				sprintf(txt, "Start\n");
				pushStr(USB_Tx_Buffer, txt, strlen(txt));
#endif
				//Na pozici data je ukazatel na testovaný zdroj
			}
			break;
 8000bf0:	e025      	b.n	8000c3e <decodePaket+0xca>

		case'c': ;
			//___Ukončení___//
		if(dataLenght == 7)
 8000bf2:	1cfb      	adds	r3, r7, #3
 8000bf4:	781b      	ldrb	r3, [r3, #0]
 8000bf6:	2b07      	cmp	r3, #7
 8000bf8:	d123      	bne.n	8000c42 <decodePaket+0xce>
		{
			flags.instructions.stopRequest = 1;
 8000bfa:	4b17      	ldr	r3, [pc, #92]	; (8000c58 <decodePaket+0xe4>)
 8000bfc:	7b1a      	ldrb	r2, [r3, #12]
 8000bfe:	2102      	movs	r1, #2
 8000c00:	430a      	orrs	r2, r1
 8000c02:	731a      	strb	r2, [r3, #12]
			sprintf(txt, "Ukonceni\n");
			pushStr(USB_Tx_Buffer, txt, strlen(txt));
#endif
			//Na pozici data je ukazatel na testovaný zdroj
		}
			break;
 8000c04:	e01d      	b.n	8000c42 <decodePaket+0xce>

		case'p': ;
			//___Pauza___//
		if(dataLenght == 7)
 8000c06:	1cfb      	adds	r3, r7, #3
 8000c08:	781b      	ldrb	r3, [r3, #0]
 8000c0a:	2b07      	cmp	r3, #7
 8000c0c:	d11b      	bne.n	8000c46 <decodePaket+0xd2>
		{
			flags.instructions.pauseRequest = 1;
 8000c0e:	4b12      	ldr	r3, [pc, #72]	; (8000c58 <decodePaket+0xe4>)
 8000c10:	7b1a      	ldrb	r2, [r3, #12]
 8000c12:	2104      	movs	r1, #4
 8000c14:	430a      	orrs	r2, r1
 8000c16:	731a      	strb	r2, [r3, #12]
			sprintf(txt, "Pauza\n");
			pushStr(USB_Tx_Buffer, txt, strlen(txt));
#endif
			//Na pozici data je ukazatel na testovaný zdroj
		}
			break;
 8000c18:	e015      	b.n	8000c46 <decodePaket+0xd2>

		case'k': ;
			//___Kalibrace___//
		if(dataLenght == 7)
 8000c1a:	1cfb      	adds	r3, r7, #3
 8000c1c:	781b      	ldrb	r3, [r3, #0]
 8000c1e:	2b07      	cmp	r3, #7
 8000c20:	d113      	bne.n	8000c4a <decodePaket+0xd6>
		{
			flags.instructions.calibRequest = 1;
 8000c22:	4b0d      	ldr	r3, [pc, #52]	; (8000c58 <decodePaket+0xe4>)
 8000c24:	7b1a      	ldrb	r2, [r3, #12]
 8000c26:	2108      	movs	r1, #8
 8000c28:	430a      	orrs	r2, r1
 8000c2a:	731a      	strb	r2, [r3, #12]
			sprintf(txt, "Kalibrace\n");
			pushStr(USB_Tx_Buffer, txt, strlen(txt));
#endif
			//Na pozici data je ukazatel na testovaný zdroj
		}
			break;
 8000c2c:	e00d      	b.n	8000c4a <decodePaket+0xd6>

		default: ;
			//___Neplatný příkaz___//
			flags.instructions.unknownInst = 1;
 8000c2e:	4b0a      	ldr	r3, [pc, #40]	; (8000c58 <decodePaket+0xe4>)
 8000c30:	7b1a      	ldrb	r2, [r3, #12]
 8000c32:	2110      	movs	r1, #16
 8000c34:	430a      	orrs	r2, r1
 8000c36:	731a      	strb	r2, [r3, #12]
#ifdef __DEBUG_INST__
			sprintf(txt, "Neplatna instrukce\n");
			pushStr(USB_Tx_Buffer, txt, strlen(txt));
#endif
			break;
 8000c38:	e008      	b.n	8000c4c <decodePaket+0xd8>
		}
	}
 8000c3a:	46c0      	nop			; (mov r8, r8)
 8000c3c:	e006      	b.n	8000c4c <decodePaket+0xd8>
			break;
 8000c3e:	46c0      	nop			; (mov r8, r8)
 8000c40:	e004      	b.n	8000c4c <decodePaket+0xd8>
			break;
 8000c42:	46c0      	nop			; (mov r8, r8)
 8000c44:	e002      	b.n	8000c4c <decodePaket+0xd8>
			break;
 8000c46:	46c0      	nop			; (mov r8, r8)
 8000c48:	e000      	b.n	8000c4c <decodePaket+0xd8>
			break;
 8000c4a:	46c0      	nop			; (mov r8, r8)
	return 1;
 8000c4c:	2301      	movs	r3, #1
}
 8000c4e:	0018      	movs	r0, r3
 8000c50:	46bd      	mov	sp, r7
 8000c52:	b004      	add	sp, #16
 8000c54:	bd80      	pop	{r7, pc}
 8000c56:	46c0      	nop			; (mov r8, r8)
 8000c58:	20000630 	.word	0x20000630

08000c5c <setColour>:
#include "lcd.h"

//_____Rozvítí podsvícení dané argumentem_____//
//-> argument: Barva podsvícení
void setColour(BACKLIGHT colour)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b082      	sub	sp, #8
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	0002      	movs	r2, r0
 8000c64:	1dfb      	adds	r3, r7, #7
 8000c66:	701a      	strb	r2, [r3, #0]
	switch(colour)
 8000c68:	1dfb      	adds	r3, r7, #7
 8000c6a:	781b      	ldrb	r3, [r3, #0]
 8000c6c:	2b02      	cmp	r3, #2
 8000c6e:	d033      	beq.n	8000cd8 <setColour+0x7c>
 8000c70:	dc49      	bgt.n	8000d06 <setColour+0xaa>
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	d002      	beq.n	8000c7c <setColour+0x20>
 8000c76:	2b01      	cmp	r3, #1
 8000c78:	d017      	beq.n	8000caa <setColour+0x4e>
 8000c7a:	e044      	b.n	8000d06 <setColour+0xaa>
	{
	case BACKLIGHT_WHITE:
		HAL_GPIO_WritePin(BACKLIGHT_WHITE_GPIO_Port, BACKLIGHT_WHITE_Pin, GPIO_PIN_SET);
 8000c7c:	2380      	movs	r3, #128	; 0x80
 8000c7e:	009b      	lsls	r3, r3, #2
 8000c80:	482e      	ldr	r0, [pc, #184]	; (8000d3c <setColour+0xe0>)
 8000c82:	2201      	movs	r2, #1
 8000c84:	0019      	movs	r1, r3
 8000c86:	f002 fe78 	bl	800397a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(BACKLIGHT_RED_GPIO_Port, BACKLIGHT_RED_Pin, GPIO_PIN_RESET);
 8000c8a:	2380      	movs	r3, #128	; 0x80
 8000c8c:	0219      	lsls	r1, r3, #8
 8000c8e:	2390      	movs	r3, #144	; 0x90
 8000c90:	05db      	lsls	r3, r3, #23
 8000c92:	2200      	movs	r2, #0
 8000c94:	0018      	movs	r0, r3
 8000c96:	f002 fe70 	bl	800397a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(BACKLIGHT_GREEN_GPIO_Port, BACKLIGHT_GREEN_Pin, GPIO_PIN_RESET);
 8000c9a:	2380      	movs	r3, #128	; 0x80
 8000c9c:	005b      	lsls	r3, r3, #1
 8000c9e:	4827      	ldr	r0, [pc, #156]	; (8000d3c <setColour+0xe0>)
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	0019      	movs	r1, r3
 8000ca4:	f002 fe69 	bl	800397a <HAL_GPIO_WritePin>
		break;
 8000ca8:	e044      	b.n	8000d34 <setColour+0xd8>

	case BACKLIGHT_GREEN:
		HAL_GPIO_WritePin(BACKLIGHT_WHITE_GPIO_Port, BACKLIGHT_WHITE_Pin, GPIO_PIN_RESET);
 8000caa:	2380      	movs	r3, #128	; 0x80
 8000cac:	009b      	lsls	r3, r3, #2
 8000cae:	4823      	ldr	r0, [pc, #140]	; (8000d3c <setColour+0xe0>)
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	0019      	movs	r1, r3
 8000cb4:	f002 fe61 	bl	800397a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(BACKLIGHT_RED_GPIO_Port, BACKLIGHT_RED_Pin, GPIO_PIN_RESET);
 8000cb8:	2380      	movs	r3, #128	; 0x80
 8000cba:	0219      	lsls	r1, r3, #8
 8000cbc:	2390      	movs	r3, #144	; 0x90
 8000cbe:	05db      	lsls	r3, r3, #23
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	0018      	movs	r0, r3
 8000cc4:	f002 fe59 	bl	800397a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(BACKLIGHT_GREEN_GPIO_Port, BACKLIGHT_GREEN_Pin, GPIO_PIN_SET);
 8000cc8:	2380      	movs	r3, #128	; 0x80
 8000cca:	005b      	lsls	r3, r3, #1
 8000ccc:	481b      	ldr	r0, [pc, #108]	; (8000d3c <setColour+0xe0>)
 8000cce:	2201      	movs	r2, #1
 8000cd0:	0019      	movs	r1, r3
 8000cd2:	f002 fe52 	bl	800397a <HAL_GPIO_WritePin>
		break;
 8000cd6:	e02d      	b.n	8000d34 <setColour+0xd8>

	case BACKLIGHT_RED:
		HAL_GPIO_WritePin(BACKLIGHT_WHITE_GPIO_Port, BACKLIGHT_WHITE_Pin, GPIO_PIN_RESET);
 8000cd8:	2380      	movs	r3, #128	; 0x80
 8000cda:	009b      	lsls	r3, r3, #2
 8000cdc:	4817      	ldr	r0, [pc, #92]	; (8000d3c <setColour+0xe0>)
 8000cde:	2200      	movs	r2, #0
 8000ce0:	0019      	movs	r1, r3
 8000ce2:	f002 fe4a 	bl	800397a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(BACKLIGHT_RED_GPIO_Port, BACKLIGHT_RED_Pin, GPIO_PIN_SET);
 8000ce6:	2380      	movs	r3, #128	; 0x80
 8000ce8:	0219      	lsls	r1, r3, #8
 8000cea:	2390      	movs	r3, #144	; 0x90
 8000cec:	05db      	lsls	r3, r3, #23
 8000cee:	2201      	movs	r2, #1
 8000cf0:	0018      	movs	r0, r3
 8000cf2:	f002 fe42 	bl	800397a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(BACKLIGHT_GREEN_GPIO_Port, BACKLIGHT_GREEN_Pin, GPIO_PIN_RESET);
 8000cf6:	2380      	movs	r3, #128	; 0x80
 8000cf8:	005b      	lsls	r3, r3, #1
 8000cfa:	4810      	ldr	r0, [pc, #64]	; (8000d3c <setColour+0xe0>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	0019      	movs	r1, r3
 8000d00:	f002 fe3b 	bl	800397a <HAL_GPIO_WritePin>
		break;
 8000d04:	e016      	b.n	8000d34 <setColour+0xd8>

	default:
		HAL_GPIO_WritePin(BACKLIGHT_WHITE_GPIO_Port, BACKLIGHT_WHITE_Pin, GPIO_PIN_RESET);
 8000d06:	2380      	movs	r3, #128	; 0x80
 8000d08:	009b      	lsls	r3, r3, #2
 8000d0a:	480c      	ldr	r0, [pc, #48]	; (8000d3c <setColour+0xe0>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	0019      	movs	r1, r3
 8000d10:	f002 fe33 	bl	800397a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(BACKLIGHT_RED_GPIO_Port, BACKLIGHT_RED_Pin, GPIO_PIN_RESET);
 8000d14:	2380      	movs	r3, #128	; 0x80
 8000d16:	0219      	lsls	r1, r3, #8
 8000d18:	2390      	movs	r3, #144	; 0x90
 8000d1a:	05db      	lsls	r3, r3, #23
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	0018      	movs	r0, r3
 8000d20:	f002 fe2b 	bl	800397a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(BACKLIGHT_GREEN_GPIO_Port, BACKLIGHT_GREEN_Pin, GPIO_PIN_RESET);
 8000d24:	2380      	movs	r3, #128	; 0x80
 8000d26:	005b      	lsls	r3, r3, #1
 8000d28:	4804      	ldr	r0, [pc, #16]	; (8000d3c <setColour+0xe0>)
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	0019      	movs	r1, r3
 8000d2e:	f002 fe24 	bl	800397a <HAL_GPIO_WritePin>
		break;
 8000d32:	46c0      	nop			; (mov r8, r8)
	}
}
 8000d34:	46c0      	nop			; (mov r8, r8)
 8000d36:	46bd      	mov	sp, r7
 8000d38:	b002      	add	sp, #8
 8000d3a:	bd80      	pop	{r7, pc}
 8000d3c:	48000400 	.word	0x48000400

08000d40 <HAL_GPIO_EXTI_Callback>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

//_____Buttons interrupt callback_____//
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b082      	sub	sp, #8
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	0002      	movs	r2, r0
 8000d48:	1dbb      	adds	r3, r7, #6
 8000d4a:	801a      	strh	r2, [r3, #0]
	if(GPIO_Pin == BUTTON_0_Pin)
 8000d4c:	1dbb      	adds	r3, r7, #6
 8000d4e:	881a      	ldrh	r2, [r3, #0]
 8000d50:	2380      	movs	r3, #128	; 0x80
 8000d52:	009b      	lsls	r3, r3, #2
 8000d54:	429a      	cmp	r2, r3
 8000d56:	d104      	bne.n	8000d62 <HAL_GPIO_EXTI_Callback+0x22>
	{
		flags.buttons.butt0_int = 1;
 8000d58:	4b09      	ldr	r3, [pc, #36]	; (8000d80 <HAL_GPIO_EXTI_Callback+0x40>)
 8000d5a:	791a      	ldrb	r2, [r3, #4]
 8000d5c:	2101      	movs	r1, #1
 8000d5e:	430a      	orrs	r2, r1
 8000d60:	711a      	strb	r2, [r3, #4]
	}
	if(GPIO_Pin == BUTTON_1_Pin)
 8000d62:	1dbb      	adds	r3, r7, #6
 8000d64:	881a      	ldrh	r2, [r3, #0]
 8000d66:	2380      	movs	r3, #128	; 0x80
 8000d68:	005b      	lsls	r3, r3, #1
 8000d6a:	429a      	cmp	r2, r3
 8000d6c:	d104      	bne.n	8000d78 <HAL_GPIO_EXTI_Callback+0x38>
	{
		flags.buttons.butt1_int = 1;
 8000d6e:	4b04      	ldr	r3, [pc, #16]	; (8000d80 <HAL_GPIO_EXTI_Callback+0x40>)
 8000d70:	791a      	ldrb	r2, [r3, #4]
 8000d72:	2104      	movs	r1, #4
 8000d74:	430a      	orrs	r2, r1
 8000d76:	711a      	strb	r2, [r3, #4]
	}
}
 8000d78:	46c0      	nop			; (mov r8, r8)
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	b002      	add	sp, #8
 8000d7e:	bd80      	pop	{r7, pc}
 8000d80:	20000630 	.word	0x20000630

08000d84 <HAL_TIM_PeriodElapsedCallback>:

//_____Timer interrupt callback_____//
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b082      	sub	sp, #8
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	6078      	str	r0, [r7, #4]
	if(htim == &htim14)	//Timer 14 -> každých 10 ms
 8000d8c:	687a      	ldr	r2, [r7, #4]
 8000d8e:	4b06      	ldr	r3, [pc, #24]	; (8000da8 <HAL_TIM_PeriodElapsedCallback+0x24>)
 8000d90:	429a      	cmp	r2, r3
 8000d92:	d104      	bne.n	8000d9e <HAL_TIM_PeriodElapsedCallback+0x1a>
	{
		flags.time.ten_ms = 1;
 8000d94:	4b05      	ldr	r3, [pc, #20]	; (8000dac <HAL_TIM_PeriodElapsedCallback+0x28>)
 8000d96:	781a      	ldrb	r2, [r3, #0]
 8000d98:	2101      	movs	r1, #1
 8000d9a:	430a      	orrs	r2, r1
 8000d9c:	701a      	strb	r2, [r3, #0]
	}
}
 8000d9e:	46c0      	nop			; (mov r8, r8)
 8000da0:	46bd      	mov	sp, r7
 8000da2:	b002      	add	sp, #8
 8000da4:	bd80      	pop	{r7, pc}
 8000da6:	46c0      	nop			; (mov r8, r8)
 8000da8:	200005e8 	.word	0x200005e8
 8000dac:	20000630 	.word	0x20000630

08000db0 <HAL_ADC_ConvCpltCallback>:

//_____ADC data ready callback_____//
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b082      	sub	sp, #8
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	6078      	str	r0, [r7, #4]
	HAL_ADC_Stop_IT(&hadc);
 8000db8:	1d3b      	adds	r3, r7, #4
 8000dba:	0018      	movs	r0, r3
 8000dbc:	f001 ff7e 	bl	8002cbc <HAL_ADC_Stop_IT>
	flags.meas.measDataReady = 1;
 8000dc0:	4b04      	ldr	r3, [pc, #16]	; (8000dd4 <HAL_ADC_ConvCpltCallback+0x24>)
 8000dc2:	7d1a      	ldrb	r2, [r3, #20]
 8000dc4:	2104      	movs	r1, #4
 8000dc6:	430a      	orrs	r2, r1
 8000dc8:	751a      	strb	r2, [r3, #20]
}
 8000dca:	46c0      	nop			; (mov r8, r8)
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	b002      	add	sp, #8
 8000dd0:	bd80      	pop	{r7, pc}
 8000dd2:	46c0      	nop			; (mov r8, r8)
 8000dd4:	20000630 	.word	0x20000630

08000dd8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ddc:	f001 fd34 	bl	8002848 <HAL_Init>

  /* USER CODE BEGIN Init */

  //__Buffery___//
  dispBuffer = createBuffer(100);
 8000de0:	2064      	movs	r0, #100	; 0x64
 8000de2:	f000 feac 	bl	8001b3e <createBuffer>
 8000de6:	0002      	movs	r2, r0
 8000de8:	4b36      	ldr	r3, [pc, #216]	; (8000ec4 <main+0xec>)
 8000dea:	601a      	str	r2, [r3, #0]
  regBuffer = createBuffer(100);
 8000dec:	2064      	movs	r0, #100	; 0x64
 8000dee:	f000 fea6 	bl	8001b3e <createBuffer>
 8000df2:	0002      	movs	r2, r0
 8000df4:	4b34      	ldr	r3, [pc, #208]	; (8000ec8 <main+0xf0>)
 8000df6:	601a      	str	r2, [r3, #0]
  USB_Rx_Buffer = createBuffer(500);
 8000df8:	23fa      	movs	r3, #250	; 0xfa
 8000dfa:	005b      	lsls	r3, r3, #1
 8000dfc:	0018      	movs	r0, r3
 8000dfe:	f000 fe9e 	bl	8001b3e <createBuffer>
 8000e02:	0002      	movs	r2, r0
 8000e04:	4b31      	ldr	r3, [pc, #196]	; (8000ecc <main+0xf4>)
 8000e06:	601a      	str	r2, [r3, #0]
  USB_Tx_Buffer = createBuffer(500);
 8000e08:	23fa      	movs	r3, #250	; 0xfa
 8000e0a:	005b      	lsls	r3, r3, #1
 8000e0c:	0018      	movs	r0, r3
 8000e0e:	f000 fe96 	bl	8001b3e <createBuffer>
 8000e12:	0002      	movs	r2, r0
 8000e14:	4b2e      	ldr	r3, [pc, #184]	; (8000ed0 <main+0xf8>)
 8000e16:	601a      	str	r2, [r3, #0]

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e18:	f000 f862 	bl	8000ee0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e1c:	f000 faac 	bl	8001378 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 8000e20:	f00b f980 	bl	800c124 <MX_USB_DEVICE_Init>
  MX_ADC_Init();
 8000e24:	f000 f8c8 	bl	8000fb8 <MX_ADC_Init>
  MX_SPI1_Init();
 8000e28:	f000 f9e4 	bl	80011f4 <MX_SPI1_Init>
  MX_USART3_UART_Init();
 8000e2c:	f000 fa74 	bl	8001318 <MX_USART3_UART_Init>
  MX_TIM14_Init();
 8000e30:	f000 fa26 	bl	8001280 <MX_TIM14_Init>
  /* USER CODE BEGIN 2 */
  //___Inicializace displeje___//
  //dispInit();
  //writeChar('a', 1, 5);

  LOAD_MIN_OFF;
 8000e34:	4b27      	ldr	r3, [pc, #156]	; (8000ed4 <main+0xfc>)
 8000e36:	2200      	movs	r2, #0
 8000e38:	2180      	movs	r1, #128	; 0x80
 8000e3a:	0018      	movs	r0, r3
 8000e3c:	f002 fd9d 	bl	800397a <HAL_GPIO_WritePin>
  LOAD_MAX_OFF;
 8000e40:	4b24      	ldr	r3, [pc, #144]	; (8000ed4 <main+0xfc>)
 8000e42:	2200      	movs	r2, #0
 8000e44:	2140      	movs	r1, #64	; 0x40
 8000e46:	0018      	movs	r0, r3
 8000e48:	f002 fd97 	bl	800397a <HAL_GPIO_WritePin>

  if(regInit() != REG_OK)	//inicializace shift registrů
 8000e4c:	f000 ffae 	bl	8001dac <regInit>
 8000e50:	1e03      	subs	r3, r0, #0
 8000e52:	d004      	beq.n	8000e5e <main+0x86>
  {
	  flags.conErr = 1;
 8000e54:	4b20      	ldr	r3, [pc, #128]	; (8000ed8 <main+0x100>)
 8000e56:	7e1a      	ldrb	r2, [r3, #24]
 8000e58:	2104      	movs	r1, #4
 8000e5a:	430a      	orrs	r2, r1
 8000e5c:	761a      	strb	r2, [r3, #24]
	  //Odešli zprávu do PC
  }

  // Start timer
  HAL_TIM_Base_Start_IT(&htim14);
 8000e5e:	4b1f      	ldr	r3, [pc, #124]	; (8000edc <main+0x104>)
 8000e60:	0018      	movs	r0, r3
 8000e62:	f005 fff9 	bl	8006e58 <HAL_TIM_Base_Start_IT>

  flags.ui.longBeep = 1;
 8000e66:	4b1c      	ldr	r3, [pc, #112]	; (8000ed8 <main+0x100>)
 8000e68:	7c1a      	ldrb	r2, [r3, #16]
 8000e6a:	2102      	movs	r1, #2
 8000e6c:	430a      	orrs	r2, r1
 8000e6e:	741a      	strb	r2, [r3, #16]
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  if(flags.time.ten_ms)	// 10 ms
 8000e70:	4b19      	ldr	r3, [pc, #100]	; (8000ed8 <main+0x100>)
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	07db      	lsls	r3, r3, #31
 8000e76:	0fdb      	lsrs	r3, r3, #31
 8000e78:	b2db      	uxtb	r3, r3
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d0f8      	beq.n	8000e70 <main+0x98>
	  {
		  clkHandler();
 8000e7e:	f000 fb67 	bl	8001550 <clkHandler>
		  buttonDebounce();
 8000e82:	f000 fbe3 	bl	800164c <buttonDebounce>
		  comHandler();
 8000e86:	f7ff fac7 	bl	8000418 <comHandler>
		  if(flags.instructions.calibRequest)
 8000e8a:	4b13      	ldr	r3, [pc, #76]	; (8000ed8 <main+0x100>)
 8000e8c:	68db      	ldr	r3, [r3, #12]
 8000e8e:	071b      	lsls	r3, r3, #28
 8000e90:	0fdb      	lsrs	r3, r3, #31
 8000e92:	b2db      	uxtb	r3, r3
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d00e      	beq.n	8000eb6 <main+0xde>
		  {
			  flags.meas.measRequest = 1;
 8000e98:	4b0f      	ldr	r3, [pc, #60]	; (8000ed8 <main+0x100>)
 8000e9a:	7d1a      	ldrb	r2, [r3, #20]
 8000e9c:	2101      	movs	r1, #1
 8000e9e:	430a      	orrs	r2, r1
 8000ea0:	751a      	strb	r2, [r3, #20]
			  flags.meas.calibMeas = 1;
 8000ea2:	4b0d      	ldr	r3, [pc, #52]	; (8000ed8 <main+0x100>)
 8000ea4:	7d1a      	ldrb	r2, [r3, #20]
 8000ea6:	2140      	movs	r1, #64	; 0x40
 8000ea8:	430a      	orrs	r2, r1
 8000eaa:	751a      	strb	r2, [r3, #20]
			  flags.instructions.calibRequest = 0;
 8000eac:	4b0a      	ldr	r3, [pc, #40]	; (8000ed8 <main+0x100>)
 8000eae:	7b1a      	ldrb	r2, [r3, #12]
 8000eb0:	2108      	movs	r1, #8
 8000eb2:	438a      	bics	r2, r1
 8000eb4:	731a      	strb	r2, [r3, #12]
		  }
		  UI_Handler();
 8000eb6:	f000 fc47 	bl	8001748 <UI_Handler>
		  testHandler();
 8000eba:	f001 fa31 	bl	8002320 <testHandler>
		  measHandler();
 8000ebe:	f000 fd83 	bl	80019c8 <measHandler>
	  if(flags.time.ten_ms)	// 10 ms
 8000ec2:	e7d5      	b.n	8000e70 <main+0x98>
 8000ec4:	200004a4 	.word	0x200004a4
 8000ec8:	20000694 	.word	0x20000694
 8000ecc:	20001134 	.word	0x20001134
 8000ed0:	20000490 	.word	0x20000490
 8000ed4:	48000800 	.word	0x48000800
 8000ed8:	20000630 	.word	0x20000630
 8000edc:	200005e8 	.word	0x200005e8

08000ee0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ee0:	b590      	push	{r4, r7, lr}
 8000ee2:	b099      	sub	sp, #100	; 0x64
 8000ee4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ee6:	242c      	movs	r4, #44	; 0x2c
 8000ee8:	193b      	adds	r3, r7, r4
 8000eea:	0018      	movs	r0, r3
 8000eec:	2334      	movs	r3, #52	; 0x34
 8000eee:	001a      	movs	r2, r3
 8000ef0:	2100      	movs	r1, #0
 8000ef2:	f00b fec4 	bl	800cc7e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ef6:	231c      	movs	r3, #28
 8000ef8:	18fb      	adds	r3, r7, r3
 8000efa:	0018      	movs	r0, r3
 8000efc:	2310      	movs	r3, #16
 8000efe:	001a      	movs	r2, r3
 8000f00:	2100      	movs	r1, #0
 8000f02:	f00b febc 	bl	800cc7e <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000f06:	003b      	movs	r3, r7
 8000f08:	0018      	movs	r0, r3
 8000f0a:	231c      	movs	r3, #28
 8000f0c:	001a      	movs	r2, r3
 8000f0e:	2100      	movs	r1, #0
 8000f10:	f00b feb5 	bl	800cc7e <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI14
 8000f14:	0021      	movs	r1, r4
 8000f16:	187b      	adds	r3, r7, r1
 8000f18:	2232      	movs	r2, #50	; 0x32
 8000f1a:	601a      	str	r2, [r3, #0]
                              |RCC_OSCILLATORTYPE_HSI48;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f1c:	187b      	adds	r3, r7, r1
 8000f1e:	2201      	movs	r2, #1
 8000f20:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000f22:	187b      	adds	r3, r7, r1
 8000f24:	2201      	movs	r2, #1
 8000f26:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 8000f28:	187b      	adds	r3, r7, r1
 8000f2a:	2201      	movs	r2, #1
 8000f2c:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000f2e:	187b      	adds	r3, r7, r1
 8000f30:	2210      	movs	r2, #16
 8000f32:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
 8000f34:	187b      	adds	r3, r7, r1
 8000f36:	2210      	movs	r2, #16
 8000f38:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f3a:	187b      	adds	r3, r7, r1
 8000f3c:	2202      	movs	r2, #2
 8000f3e:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000f40:	187b      	adds	r3, r7, r1
 8000f42:	2280      	movs	r2, #128	; 0x80
 8000f44:	0212      	lsls	r2, r2, #8
 8000f46:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000f48:	187b      	adds	r3, r7, r1
 8000f4a:	2280      	movs	r2, #128	; 0x80
 8000f4c:	0352      	lsls	r2, r2, #13
 8000f4e:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8000f50:	187b      	adds	r3, r7, r1
 8000f52:	2200      	movs	r2, #0
 8000f54:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f56:	187b      	adds	r3, r7, r1
 8000f58:	0018      	movs	r0, r3
 8000f5a:	f004 fbd5 	bl	8005708 <HAL_RCC_OscConfig>
 8000f5e:	1e03      	subs	r3, r0, #0
 8000f60:	d001      	beq.n	8000f66 <SystemClock_Config+0x86>
  {
    Error_Handler();
 8000f62:	f000 fde7 	bl	8001b34 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f66:	211c      	movs	r1, #28
 8000f68:	187b      	adds	r3, r7, r1
 8000f6a:	2207      	movs	r2, #7
 8000f6c:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f6e:	187b      	adds	r3, r7, r1
 8000f70:	2202      	movs	r2, #2
 8000f72:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f74:	187b      	adds	r3, r7, r1
 8000f76:	2200      	movs	r2, #0
 8000f78:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000f7a:	187b      	adds	r3, r7, r1
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000f80:	187b      	adds	r3, r7, r1
 8000f82:	2101      	movs	r1, #1
 8000f84:	0018      	movs	r0, r3
 8000f86:	f004 ff45 	bl	8005e14 <HAL_RCC_ClockConfig>
 8000f8a:	1e03      	subs	r3, r0, #0
 8000f8c:	d001      	beq.n	8000f92 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8000f8e:	f000 fdd1 	bl	8001b34 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000f92:	003b      	movs	r3, r7
 8000f94:	2280      	movs	r2, #128	; 0x80
 8000f96:	0292      	lsls	r2, r2, #10
 8000f98:	601a      	str	r2, [r3, #0]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8000f9a:	003b      	movs	r3, r7
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	619a      	str	r2, [r3, #24]

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000fa0:	003b      	movs	r3, r7
 8000fa2:	0018      	movs	r0, r3
 8000fa4:	f005 f8b2 	bl	800610c <HAL_RCCEx_PeriphCLKConfig>
 8000fa8:	1e03      	subs	r3, r0, #0
 8000faa:	d001      	beq.n	8000fb0 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8000fac:	f000 fdc2 	bl	8001b34 <Error_Handler>
  }
}
 8000fb0:	46c0      	nop			; (mov r8, r8)
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	b019      	add	sp, #100	; 0x64
 8000fb6:	bd90      	pop	{r4, r7, pc}

08000fb8 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b084      	sub	sp, #16
 8000fbc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000fbe:	1d3b      	adds	r3, r7, #4
 8000fc0:	0018      	movs	r0, r3
 8000fc2:	230c      	movs	r3, #12
 8000fc4:	001a      	movs	r2, r3
 8000fc6:	2100      	movs	r1, #0
 8000fc8:	f00b fe59 	bl	800cc7e <memset>
  /* USER CODE BEGIN ADC_Init 1 */

  /* USER CODE END ADC_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8000fcc:	4b87      	ldr	r3, [pc, #540]	; (80011ec <MX_ADC_Init+0x234>)
 8000fce:	4a88      	ldr	r2, [pc, #544]	; (80011f0 <MX_ADC_Init+0x238>)
 8000fd0:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000fd2:	4b86      	ldr	r3, [pc, #536]	; (80011ec <MX_ADC_Init+0x234>)
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8000fd8:	4b84      	ldr	r3, [pc, #528]	; (80011ec <MX_ADC_Init+0x234>)
 8000fda:	2200      	movs	r2, #0
 8000fdc:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000fde:	4b83      	ldr	r3, [pc, #524]	; (80011ec <MX_ADC_Init+0x234>)
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8000fe4:	4b81      	ldr	r3, [pc, #516]	; (80011ec <MX_ADC_Init+0x234>)
 8000fe6:	2201      	movs	r2, #1
 8000fe8:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000fea:	4b80      	ldr	r3, [pc, #512]	; (80011ec <MX_ADC_Init+0x234>)
 8000fec:	2204      	movs	r2, #4
 8000fee:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 8000ff0:	4b7e      	ldr	r3, [pc, #504]	; (80011ec <MX_ADC_Init+0x234>)
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8000ff6:	4b7d      	ldr	r3, [pc, #500]	; (80011ec <MX_ADC_Init+0x234>)
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = DISABLE;
 8000ffc:	4b7b      	ldr	r3, [pc, #492]	; (80011ec <MX_ADC_Init+0x234>)
 8000ffe:	2200      	movs	r2, #0
 8001000:	769a      	strb	r2, [r3, #26]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8001002:	4b7a      	ldr	r3, [pc, #488]	; (80011ec <MX_ADC_Init+0x234>)
 8001004:	2200      	movs	r2, #0
 8001006:	76da      	strb	r2, [r3, #27]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001008:	4b78      	ldr	r3, [pc, #480]	; (80011ec <MX_ADC_Init+0x234>)
 800100a:	22c2      	movs	r2, #194	; 0xc2
 800100c:	32ff      	adds	r2, #255	; 0xff
 800100e:	61da      	str	r2, [r3, #28]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001010:	4b76      	ldr	r3, [pc, #472]	; (80011ec <MX_ADC_Init+0x234>)
 8001012:	2200      	movs	r2, #0
 8001014:	621a      	str	r2, [r3, #32]
  hadc.Init.DMAContinuousRequests = DISABLE;
 8001016:	4b75      	ldr	r3, [pc, #468]	; (80011ec <MX_ADC_Init+0x234>)
 8001018:	2224      	movs	r2, #36	; 0x24
 800101a:	2100      	movs	r1, #0
 800101c:	5499      	strb	r1, [r3, r2]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800101e:	4b73      	ldr	r3, [pc, #460]	; (80011ec <MX_ADC_Init+0x234>)
 8001020:	2201      	movs	r2, #1
 8001022:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8001024:	4b71      	ldr	r3, [pc, #452]	; (80011ec <MX_ADC_Init+0x234>)
 8001026:	0018      	movs	r0, r3
 8001028:	f001 fc96 	bl	8002958 <HAL_ADC_Init>
 800102c:	1e03      	subs	r3, r0, #0
 800102e:	d001      	beq.n	8001034 <MX_ADC_Init+0x7c>
  {
    Error_Handler();
 8001030:	f000 fd80 	bl	8001b34 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001034:	1d3b      	adds	r3, r7, #4
 8001036:	2200      	movs	r2, #0
 8001038:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 800103a:	1d3b      	adds	r3, r7, #4
 800103c:	2280      	movs	r2, #128	; 0x80
 800103e:	0152      	lsls	r2, r2, #5
 8001040:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_55CYCLES_5;
 8001042:	1d3b      	adds	r3, r7, #4
 8001044:	2205      	movs	r2, #5
 8001046:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001048:	1d3a      	adds	r2, r7, #4
 800104a:	4b68      	ldr	r3, [pc, #416]	; (80011ec <MX_ADC_Init+0x234>)
 800104c:	0011      	movs	r1, r2
 800104e:	0018      	movs	r0, r3
 8001050:	f001 ff52 	bl	8002ef8 <HAL_ADC_ConfigChannel>
 8001054:	1e03      	subs	r3, r0, #0
 8001056:	d001      	beq.n	800105c <MX_ADC_Init+0xa4>
  {
    Error_Handler();
 8001058:	f000 fd6c 	bl	8001b34 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800105c:	1d3b      	adds	r3, r7, #4
 800105e:	2201      	movs	r2, #1
 8001060:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001062:	1d3a      	adds	r2, r7, #4
 8001064:	4b61      	ldr	r3, [pc, #388]	; (80011ec <MX_ADC_Init+0x234>)
 8001066:	0011      	movs	r1, r2
 8001068:	0018      	movs	r0, r3
 800106a:	f001 ff45 	bl	8002ef8 <HAL_ADC_ConfigChannel>
 800106e:	1e03      	subs	r3, r0, #0
 8001070:	d001      	beq.n	8001076 <MX_ADC_Init+0xbe>
  {
    Error_Handler();
 8001072:	f000 fd5f 	bl	8001b34 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8001076:	1d3b      	adds	r3, r7, #4
 8001078:	2202      	movs	r2, #2
 800107a:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800107c:	1d3a      	adds	r2, r7, #4
 800107e:	4b5b      	ldr	r3, [pc, #364]	; (80011ec <MX_ADC_Init+0x234>)
 8001080:	0011      	movs	r1, r2
 8001082:	0018      	movs	r0, r3
 8001084:	f001 ff38 	bl	8002ef8 <HAL_ADC_ConfigChannel>
 8001088:	1e03      	subs	r3, r0, #0
 800108a:	d001      	beq.n	8001090 <MX_ADC_Init+0xd8>
  {
    Error_Handler();
 800108c:	f000 fd52 	bl	8001b34 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8001090:	1d3b      	adds	r3, r7, #4
 8001092:	2203      	movs	r2, #3
 8001094:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001096:	1d3a      	adds	r2, r7, #4
 8001098:	4b54      	ldr	r3, [pc, #336]	; (80011ec <MX_ADC_Init+0x234>)
 800109a:	0011      	movs	r1, r2
 800109c:	0018      	movs	r0, r3
 800109e:	f001 ff2b 	bl	8002ef8 <HAL_ADC_ConfigChannel>
 80010a2:	1e03      	subs	r3, r0, #0
 80010a4:	d001      	beq.n	80010aa <MX_ADC_Init+0xf2>
  {
    Error_Handler();
 80010a6:	f000 fd45 	bl	8001b34 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80010aa:	1d3b      	adds	r3, r7, #4
 80010ac:	2204      	movs	r2, #4
 80010ae:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80010b0:	1d3a      	adds	r2, r7, #4
 80010b2:	4b4e      	ldr	r3, [pc, #312]	; (80011ec <MX_ADC_Init+0x234>)
 80010b4:	0011      	movs	r1, r2
 80010b6:	0018      	movs	r0, r3
 80010b8:	f001 ff1e 	bl	8002ef8 <HAL_ADC_ConfigChannel>
 80010bc:	1e03      	subs	r3, r0, #0
 80010be:	d001      	beq.n	80010c4 <MX_ADC_Init+0x10c>
  {
    Error_Handler();
 80010c0:	f000 fd38 	bl	8001b34 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80010c4:	1d3b      	adds	r3, r7, #4
 80010c6:	2205      	movs	r2, #5
 80010c8:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80010ca:	1d3a      	adds	r2, r7, #4
 80010cc:	4b47      	ldr	r3, [pc, #284]	; (80011ec <MX_ADC_Init+0x234>)
 80010ce:	0011      	movs	r1, r2
 80010d0:	0018      	movs	r0, r3
 80010d2:	f001 ff11 	bl	8002ef8 <HAL_ADC_ConfigChannel>
 80010d6:	1e03      	subs	r3, r0, #0
 80010d8:	d001      	beq.n	80010de <MX_ADC_Init+0x126>
  {
    Error_Handler();
 80010da:	f000 fd2b 	bl	8001b34 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 80010de:	1d3b      	adds	r3, r7, #4
 80010e0:	2206      	movs	r2, #6
 80010e2:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80010e4:	1d3a      	adds	r2, r7, #4
 80010e6:	4b41      	ldr	r3, [pc, #260]	; (80011ec <MX_ADC_Init+0x234>)
 80010e8:	0011      	movs	r1, r2
 80010ea:	0018      	movs	r0, r3
 80010ec:	f001 ff04 	bl	8002ef8 <HAL_ADC_ConfigChannel>
 80010f0:	1e03      	subs	r3, r0, #0
 80010f2:	d001      	beq.n	80010f8 <MX_ADC_Init+0x140>
  {
    Error_Handler();
 80010f4:	f000 fd1e 	bl	8001b34 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 80010f8:	1d3b      	adds	r3, r7, #4
 80010fa:	2207      	movs	r2, #7
 80010fc:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80010fe:	1d3a      	adds	r2, r7, #4
 8001100:	4b3a      	ldr	r3, [pc, #232]	; (80011ec <MX_ADC_Init+0x234>)
 8001102:	0011      	movs	r1, r2
 8001104:	0018      	movs	r0, r3
 8001106:	f001 fef7 	bl	8002ef8 <HAL_ADC_ConfigChannel>
 800110a:	1e03      	subs	r3, r0, #0
 800110c:	d001      	beq.n	8001112 <MX_ADC_Init+0x15a>
  {
    Error_Handler();
 800110e:	f000 fd11 	bl	8001b34 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8001112:	1d3b      	adds	r3, r7, #4
 8001114:	2208      	movs	r2, #8
 8001116:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001118:	1d3a      	adds	r2, r7, #4
 800111a:	4b34      	ldr	r3, [pc, #208]	; (80011ec <MX_ADC_Init+0x234>)
 800111c:	0011      	movs	r1, r2
 800111e:	0018      	movs	r0, r3
 8001120:	f001 feea 	bl	8002ef8 <HAL_ADC_ConfigChannel>
 8001124:	1e03      	subs	r3, r0, #0
 8001126:	d001      	beq.n	800112c <MX_ADC_Init+0x174>
  {
    Error_Handler();
 8001128:	f000 fd04 	bl	8001b34 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 800112c:	1d3b      	adds	r3, r7, #4
 800112e:	2209      	movs	r2, #9
 8001130:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001132:	1d3a      	adds	r2, r7, #4
 8001134:	4b2d      	ldr	r3, [pc, #180]	; (80011ec <MX_ADC_Init+0x234>)
 8001136:	0011      	movs	r1, r2
 8001138:	0018      	movs	r0, r3
 800113a:	f001 fedd 	bl	8002ef8 <HAL_ADC_ConfigChannel>
 800113e:	1e03      	subs	r3, r0, #0
 8001140:	d001      	beq.n	8001146 <MX_ADC_Init+0x18e>
  {
    Error_Handler();
 8001142:	f000 fcf7 	bl	8001b34 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8001146:	1d3b      	adds	r3, r7, #4
 8001148:	220a      	movs	r2, #10
 800114a:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800114c:	1d3a      	adds	r2, r7, #4
 800114e:	4b27      	ldr	r3, [pc, #156]	; (80011ec <MX_ADC_Init+0x234>)
 8001150:	0011      	movs	r1, r2
 8001152:	0018      	movs	r0, r3
 8001154:	f001 fed0 	bl	8002ef8 <HAL_ADC_ConfigChannel>
 8001158:	1e03      	subs	r3, r0, #0
 800115a:	d001      	beq.n	8001160 <MX_ADC_Init+0x1a8>
  {
    Error_Handler();
 800115c:	f000 fcea 	bl	8001b34 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8001160:	1d3b      	adds	r3, r7, #4
 8001162:	220b      	movs	r2, #11
 8001164:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001166:	1d3a      	adds	r2, r7, #4
 8001168:	4b20      	ldr	r3, [pc, #128]	; (80011ec <MX_ADC_Init+0x234>)
 800116a:	0011      	movs	r1, r2
 800116c:	0018      	movs	r0, r3
 800116e:	f001 fec3 	bl	8002ef8 <HAL_ADC_ConfigChannel>
 8001172:	1e03      	subs	r3, r0, #0
 8001174:	d001      	beq.n	800117a <MX_ADC_Init+0x1c2>
  {
    Error_Handler();
 8001176:	f000 fcdd 	bl	8001b34 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 800117a:	1d3b      	adds	r3, r7, #4
 800117c:	220c      	movs	r2, #12
 800117e:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001180:	1d3a      	adds	r2, r7, #4
 8001182:	4b1a      	ldr	r3, [pc, #104]	; (80011ec <MX_ADC_Init+0x234>)
 8001184:	0011      	movs	r1, r2
 8001186:	0018      	movs	r0, r3
 8001188:	f001 feb6 	bl	8002ef8 <HAL_ADC_ConfigChannel>
 800118c:	1e03      	subs	r3, r0, #0
 800118e:	d001      	beq.n	8001194 <MX_ADC_Init+0x1dc>
  {
    Error_Handler();
 8001190:	f000 fcd0 	bl	8001b34 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8001194:	1d3b      	adds	r3, r7, #4
 8001196:	220d      	movs	r2, #13
 8001198:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800119a:	1d3a      	adds	r2, r7, #4
 800119c:	4b13      	ldr	r3, [pc, #76]	; (80011ec <MX_ADC_Init+0x234>)
 800119e:	0011      	movs	r1, r2
 80011a0:	0018      	movs	r0, r3
 80011a2:	f001 fea9 	bl	8002ef8 <HAL_ADC_ConfigChannel>
 80011a6:	1e03      	subs	r3, r0, #0
 80011a8:	d001      	beq.n	80011ae <MX_ADC_Init+0x1f6>
  {
    Error_Handler();
 80011aa:	f000 fcc3 	bl	8001b34 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 80011ae:	1d3b      	adds	r3, r7, #4
 80011b0:	220e      	movs	r2, #14
 80011b2:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80011b4:	1d3a      	adds	r2, r7, #4
 80011b6:	4b0d      	ldr	r3, [pc, #52]	; (80011ec <MX_ADC_Init+0x234>)
 80011b8:	0011      	movs	r1, r2
 80011ba:	0018      	movs	r0, r3
 80011bc:	f001 fe9c 	bl	8002ef8 <HAL_ADC_ConfigChannel>
 80011c0:	1e03      	subs	r3, r0, #0
 80011c2:	d001      	beq.n	80011c8 <MX_ADC_Init+0x210>
  {
    Error_Handler();
 80011c4:	f000 fcb6 	bl	8001b34 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 80011c8:	1d3b      	adds	r3, r7, #4
 80011ca:	220f      	movs	r2, #15
 80011cc:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80011ce:	1d3a      	adds	r2, r7, #4
 80011d0:	4b06      	ldr	r3, [pc, #24]	; (80011ec <MX_ADC_Init+0x234>)
 80011d2:	0011      	movs	r1, r2
 80011d4:	0018      	movs	r0, r3
 80011d6:	f001 fe8f 	bl	8002ef8 <HAL_ADC_ConfigChannel>
 80011da:	1e03      	subs	r3, r0, #0
 80011dc:	d001      	beq.n	80011e2 <MX_ADC_Init+0x22a>
  {
    Error_Handler();
 80011de:	f000 fca9 	bl	8001b34 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 80011e2:	46c0      	nop			; (mov r8, r8)
 80011e4:	46bd      	mov	sp, r7
 80011e6:	b004      	add	sp, #16
 80011e8:	bd80      	pop	{r7, pc}
 80011ea:	46c0      	nop			; (mov r8, r8)
 80011ec:	2000064c 	.word	0x2000064c
 80011f0:	40012400 	.word	0x40012400

080011f4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80011f8:	4b1e      	ldr	r3, [pc, #120]	; (8001274 <MX_SPI1_Init+0x80>)
 80011fa:	4a1f      	ldr	r2, [pc, #124]	; (8001278 <MX_SPI1_Init+0x84>)
 80011fc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80011fe:	4b1d      	ldr	r3, [pc, #116]	; (8001274 <MX_SPI1_Init+0x80>)
 8001200:	2282      	movs	r2, #130	; 0x82
 8001202:	0052      	lsls	r2, r2, #1
 8001204:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001206:	4b1b      	ldr	r3, [pc, #108]	; (8001274 <MX_SPI1_Init+0x80>)
 8001208:	2200      	movs	r2, #0
 800120a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800120c:	4b19      	ldr	r3, [pc, #100]	; (8001274 <MX_SPI1_Init+0x80>)
 800120e:	22e0      	movs	r2, #224	; 0xe0
 8001210:	00d2      	lsls	r2, r2, #3
 8001212:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001214:	4b17      	ldr	r3, [pc, #92]	; (8001274 <MX_SPI1_Init+0x80>)
 8001216:	2200      	movs	r2, #0
 8001218:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800121a:	4b16      	ldr	r3, [pc, #88]	; (8001274 <MX_SPI1_Init+0x80>)
 800121c:	2200      	movs	r2, #0
 800121e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001220:	4b14      	ldr	r3, [pc, #80]	; (8001274 <MX_SPI1_Init+0x80>)
 8001222:	2280      	movs	r2, #128	; 0x80
 8001224:	0092      	lsls	r2, r2, #2
 8001226:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8001228:	4b12      	ldr	r3, [pc, #72]	; (8001274 <MX_SPI1_Init+0x80>)
 800122a:	2238      	movs	r2, #56	; 0x38
 800122c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800122e:	4b11      	ldr	r3, [pc, #68]	; (8001274 <MX_SPI1_Init+0x80>)
 8001230:	2200      	movs	r2, #0
 8001232:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001234:	4b0f      	ldr	r3, [pc, #60]	; (8001274 <MX_SPI1_Init+0x80>)
 8001236:	2200      	movs	r2, #0
 8001238:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800123a:	4b0e      	ldr	r3, [pc, #56]	; (8001274 <MX_SPI1_Init+0x80>)
 800123c:	2200      	movs	r2, #0
 800123e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001240:	4b0c      	ldr	r3, [pc, #48]	; (8001274 <MX_SPI1_Init+0x80>)
 8001242:	2207      	movs	r2, #7
 8001244:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001246:	4b0b      	ldr	r3, [pc, #44]	; (8001274 <MX_SPI1_Init+0x80>)
 8001248:	2200      	movs	r2, #0
 800124a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800124c:	4b09      	ldr	r3, [pc, #36]	; (8001274 <MX_SPI1_Init+0x80>)
 800124e:	2208      	movs	r2, #8
 8001250:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001252:	4b08      	ldr	r3, [pc, #32]	; (8001274 <MX_SPI1_Init+0x80>)
 8001254:	0018      	movs	r0, r3
 8001256:	f005 f857 	bl	8006308 <HAL_SPI_Init>
 800125a:	1e03      	subs	r3, r0, #0
 800125c:	d001      	beq.n	8001262 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800125e:	f000 fc69 	bl	8001b34 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */
  DISP_CS_OFF;
 8001262:	4b06      	ldr	r3, [pc, #24]	; (800127c <MX_SPI1_Init+0x88>)
 8001264:	2201      	movs	r2, #1
 8001266:	2140      	movs	r1, #64	; 0x40
 8001268:	0018      	movs	r0, r3
 800126a:	f002 fb86 	bl	800397a <HAL_GPIO_WritePin>
  /* USER CODE END SPI1_Init 2 */

}
 800126e:	46c0      	nop			; (mov r8, r8)
 8001270:	46bd      	mov	sp, r7
 8001272:	bd80      	pop	{r7, pc}
 8001274:	20000584 	.word	0x20000584
 8001278:	40013000 	.word	0x40013000
 800127c:	48000400 	.word	0x48000400

08001280 <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	b088      	sub	sp, #32
 8001284:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM14_Init 0 */

  /* USER CODE END TIM14_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001286:	1d3b      	adds	r3, r7, #4
 8001288:	0018      	movs	r0, r3
 800128a:	231c      	movs	r3, #28
 800128c:	001a      	movs	r2, r3
 800128e:	2100      	movs	r1, #0
 8001290:	f00b fcf5 	bl	800cc7e <memset>

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8001294:	4b1d      	ldr	r3, [pc, #116]	; (800130c <MX_TIM14_Init+0x8c>)
 8001296:	4a1e      	ldr	r2, [pc, #120]	; (8001310 <MX_TIM14_Init+0x90>)
 8001298:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 48-1;
 800129a:	4b1c      	ldr	r3, [pc, #112]	; (800130c <MX_TIM14_Init+0x8c>)
 800129c:	222f      	movs	r2, #47	; 0x2f
 800129e:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012a0:	4b1a      	ldr	r3, [pc, #104]	; (800130c <MX_TIM14_Init+0x8c>)
 80012a2:	2200      	movs	r2, #0
 80012a4:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 10000-1;
 80012a6:	4b19      	ldr	r3, [pc, #100]	; (800130c <MX_TIM14_Init+0x8c>)
 80012a8:	4a1a      	ldr	r2, [pc, #104]	; (8001314 <MX_TIM14_Init+0x94>)
 80012aa:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012ac:	4b17      	ldr	r3, [pc, #92]	; (800130c <MX_TIM14_Init+0x8c>)
 80012ae:	2200      	movs	r2, #0
 80012b0:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012b2:	4b16      	ldr	r3, [pc, #88]	; (800130c <MX_TIM14_Init+0x8c>)
 80012b4:	2200      	movs	r2, #0
 80012b6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 80012b8:	4b14      	ldr	r3, [pc, #80]	; (800130c <MX_TIM14_Init+0x8c>)
 80012ba:	0018      	movs	r0, r3
 80012bc:	f005 fd7c 	bl	8006db8 <HAL_TIM_Base_Init>
 80012c0:	1e03      	subs	r3, r0, #0
 80012c2:	d001      	beq.n	80012c8 <MX_TIM14_Init+0x48>
  {
    Error_Handler();
 80012c4:	f000 fc36 	bl	8001b34 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim14) != HAL_OK)
 80012c8:	4b10      	ldr	r3, [pc, #64]	; (800130c <MX_TIM14_Init+0x8c>)
 80012ca:	0018      	movs	r0, r3
 80012cc:	f005 fe16 	bl	8006efc <HAL_TIM_OC_Init>
 80012d0:	1e03      	subs	r3, r0, #0
 80012d2:	d001      	beq.n	80012d8 <MX_TIM14_Init+0x58>
  {
    Error_Handler();
 80012d4:	f000 fc2e 	bl	8001b34 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 80012d8:	1d3b      	adds	r3, r7, #4
 80012da:	2200      	movs	r2, #0
 80012dc:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 80012de:	1d3b      	adds	r3, r7, #4
 80012e0:	2200      	movs	r2, #0
 80012e2:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80012e4:	1d3b      	adds	r3, r7, #4
 80012e6:	2200      	movs	r2, #0
 80012e8:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80012ea:	1d3b      	adds	r3, r7, #4
 80012ec:	2200      	movs	r2, #0
 80012ee:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_OC_ConfigChannel(&htim14, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80012f0:	1d39      	adds	r1, r7, #4
 80012f2:	4b06      	ldr	r3, [pc, #24]	; (800130c <MX_TIM14_Init+0x8c>)
 80012f4:	2200      	movs	r2, #0
 80012f6:	0018      	movs	r0, r3
 80012f8:	f005 ff6e 	bl	80071d8 <HAL_TIM_OC_ConfigChannel>
 80012fc:	1e03      	subs	r3, r0, #0
 80012fe:	d001      	beq.n	8001304 <MX_TIM14_Init+0x84>
  {
    Error_Handler();
 8001300:	f000 fc18 	bl	8001b34 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 8001304:	46c0      	nop			; (mov r8, r8)
 8001306:	46bd      	mov	sp, r7
 8001308:	b008      	add	sp, #32
 800130a:	bd80      	pop	{r7, pc}
 800130c:	200005e8 	.word	0x200005e8
 8001310:	40002000 	.word	0x40002000
 8001314:	0000270f 	.word	0x0000270f

08001318 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800131c:	4b14      	ldr	r3, [pc, #80]	; (8001370 <MX_USART3_UART_Init+0x58>)
 800131e:	4a15      	ldr	r2, [pc, #84]	; (8001374 <MX_USART3_UART_Init+0x5c>)
 8001320:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 38400;
 8001322:	4b13      	ldr	r3, [pc, #76]	; (8001370 <MX_USART3_UART_Init+0x58>)
 8001324:	2296      	movs	r2, #150	; 0x96
 8001326:	0212      	lsls	r2, r2, #8
 8001328:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800132a:	4b11      	ldr	r3, [pc, #68]	; (8001370 <MX_USART3_UART_Init+0x58>)
 800132c:	2200      	movs	r2, #0
 800132e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001330:	4b0f      	ldr	r3, [pc, #60]	; (8001370 <MX_USART3_UART_Init+0x58>)
 8001332:	2200      	movs	r2, #0
 8001334:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001336:	4b0e      	ldr	r3, [pc, #56]	; (8001370 <MX_USART3_UART_Init+0x58>)
 8001338:	2200      	movs	r2, #0
 800133a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800133c:	4b0c      	ldr	r3, [pc, #48]	; (8001370 <MX_USART3_UART_Init+0x58>)
 800133e:	220c      	movs	r2, #12
 8001340:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001342:	4b0b      	ldr	r3, [pc, #44]	; (8001370 <MX_USART3_UART_Init+0x58>)
 8001344:	2200      	movs	r2, #0
 8001346:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001348:	4b09      	ldr	r3, [pc, #36]	; (8001370 <MX_USART3_UART_Init+0x58>)
 800134a:	2200      	movs	r2, #0
 800134c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800134e:	4b08      	ldr	r3, [pc, #32]	; (8001370 <MX_USART3_UART_Init+0x58>)
 8001350:	2200      	movs	r2, #0
 8001352:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001354:	4b06      	ldr	r3, [pc, #24]	; (8001370 <MX_USART3_UART_Init+0x58>)
 8001356:	2200      	movs	r2, #0
 8001358:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800135a:	4b05      	ldr	r3, [pc, #20]	; (8001370 <MX_USART3_UART_Init+0x58>)
 800135c:	0018      	movs	r0, r3
 800135e:	f006 fa3f 	bl	80077e0 <HAL_UART_Init>
 8001362:	1e03      	subs	r3, r0, #0
 8001364:	d001      	beq.n	800136a <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8001366:	f000 fbe5 	bl	8001b34 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800136a:	46c0      	nop			; (mov r8, r8)
 800136c:	46bd      	mov	sp, r7
 800136e:	bd80      	pop	{r7, pc}
 8001370:	20000500 	.word	0x20000500
 8001374:	40004800 	.word	0x40004800

08001378 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001378:	b590      	push	{r4, r7, lr}
 800137a:	b08b      	sub	sp, #44	; 0x2c
 800137c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800137e:	2414      	movs	r4, #20
 8001380:	193b      	adds	r3, r7, r4
 8001382:	0018      	movs	r0, r3
 8001384:	2314      	movs	r3, #20
 8001386:	001a      	movs	r2, r3
 8001388:	2100      	movs	r1, #0
 800138a:	f00b fc78 	bl	800cc7e <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800138e:	4b6b      	ldr	r3, [pc, #428]	; (800153c <MX_GPIO_Init+0x1c4>)
 8001390:	695a      	ldr	r2, [r3, #20]
 8001392:	4b6a      	ldr	r3, [pc, #424]	; (800153c <MX_GPIO_Init+0x1c4>)
 8001394:	2180      	movs	r1, #128	; 0x80
 8001396:	03c9      	lsls	r1, r1, #15
 8001398:	430a      	orrs	r2, r1
 800139a:	615a      	str	r2, [r3, #20]
 800139c:	4b67      	ldr	r3, [pc, #412]	; (800153c <MX_GPIO_Init+0x1c4>)
 800139e:	695a      	ldr	r2, [r3, #20]
 80013a0:	2380      	movs	r3, #128	; 0x80
 80013a2:	03db      	lsls	r3, r3, #15
 80013a4:	4013      	ands	r3, r2
 80013a6:	613b      	str	r3, [r7, #16]
 80013a8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80013aa:	4b64      	ldr	r3, [pc, #400]	; (800153c <MX_GPIO_Init+0x1c4>)
 80013ac:	695a      	ldr	r2, [r3, #20]
 80013ae:	4b63      	ldr	r3, [pc, #396]	; (800153c <MX_GPIO_Init+0x1c4>)
 80013b0:	2180      	movs	r1, #128	; 0x80
 80013b2:	0309      	lsls	r1, r1, #12
 80013b4:	430a      	orrs	r2, r1
 80013b6:	615a      	str	r2, [r3, #20]
 80013b8:	4b60      	ldr	r3, [pc, #384]	; (800153c <MX_GPIO_Init+0x1c4>)
 80013ba:	695a      	ldr	r2, [r3, #20]
 80013bc:	2380      	movs	r3, #128	; 0x80
 80013be:	031b      	lsls	r3, r3, #12
 80013c0:	4013      	ands	r3, r2
 80013c2:	60fb      	str	r3, [r7, #12]
 80013c4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80013c6:	4b5d      	ldr	r3, [pc, #372]	; (800153c <MX_GPIO_Init+0x1c4>)
 80013c8:	695a      	ldr	r2, [r3, #20]
 80013ca:	4b5c      	ldr	r3, [pc, #368]	; (800153c <MX_GPIO_Init+0x1c4>)
 80013cc:	2180      	movs	r1, #128	; 0x80
 80013ce:	0289      	lsls	r1, r1, #10
 80013d0:	430a      	orrs	r2, r1
 80013d2:	615a      	str	r2, [r3, #20]
 80013d4:	4b59      	ldr	r3, [pc, #356]	; (800153c <MX_GPIO_Init+0x1c4>)
 80013d6:	695a      	ldr	r2, [r3, #20]
 80013d8:	2380      	movs	r3, #128	; 0x80
 80013da:	029b      	lsls	r3, r3, #10
 80013dc:	4013      	ands	r3, r2
 80013de:	60bb      	str	r3, [r7, #8]
 80013e0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80013e2:	4b56      	ldr	r3, [pc, #344]	; (800153c <MX_GPIO_Init+0x1c4>)
 80013e4:	695a      	ldr	r2, [r3, #20]
 80013e6:	4b55      	ldr	r3, [pc, #340]	; (800153c <MX_GPIO_Init+0x1c4>)
 80013e8:	2180      	movs	r1, #128	; 0x80
 80013ea:	02c9      	lsls	r1, r1, #11
 80013ec:	430a      	orrs	r2, r1
 80013ee:	615a      	str	r2, [r3, #20]
 80013f0:	4b52      	ldr	r3, [pc, #328]	; (800153c <MX_GPIO_Init+0x1c4>)
 80013f2:	695a      	ldr	r2, [r3, #20]
 80013f4:	2380      	movs	r3, #128	; 0x80
 80013f6:	02db      	lsls	r3, r3, #11
 80013f8:	4013      	ands	r3, r2
 80013fa:	607b      	str	r3, [r7, #4]
 80013fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80013fe:	4b4f      	ldr	r3, [pc, #316]	; (800153c <MX_GPIO_Init+0x1c4>)
 8001400:	695a      	ldr	r2, [r3, #20]
 8001402:	4b4e      	ldr	r3, [pc, #312]	; (800153c <MX_GPIO_Init+0x1c4>)
 8001404:	2180      	movs	r1, #128	; 0x80
 8001406:	0349      	lsls	r1, r1, #13
 8001408:	430a      	orrs	r2, r1
 800140a:	615a      	str	r2, [r3, #20]
 800140c:	4b4b      	ldr	r3, [pc, #300]	; (800153c <MX_GPIO_Init+0x1c4>)
 800140e:	695a      	ldr	r2, [r3, #20]
 8001410:	2380      	movs	r3, #128	; 0x80
 8001412:	035b      	lsls	r3, r3, #13
 8001414:	4013      	ands	r3, r2
 8001416:	603b      	str	r3, [r7, #0]
 8001418:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, _5V_BAT_OFF_Pin|DEBUG_Pin|SR_CLR_Pin|SR_RCLK_Pin
 800141a:	4949      	ldr	r1, [pc, #292]	; (8001540 <MX_GPIO_Init+0x1c8>)
 800141c:	4b49      	ldr	r3, [pc, #292]	; (8001544 <MX_GPIO_Init+0x1cc>)
 800141e:	2200      	movs	r2, #0
 8001420:	0018      	movs	r0, r3
 8001422:	f002 faaa 	bl	800397a <HAL_GPIO_WritePin>
                          |SR_OE_Pin|DISP_CS_Pin|DISP_RST_Pin|BACKLIGHT_GREEN_Pin
                          |BACKLIGHT_WHITE_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LOAD_MAX_Pin|LOAD_MIN_Pin|EM_HEATER_CTRL_Pin|HEATER_CTRL_Pin
 8001426:	239e      	movs	r3, #158	; 0x9e
 8001428:	015b      	lsls	r3, r3, #5
 800142a:	4847      	ldr	r0, [pc, #284]	; (8001548 <MX_GPIO_Init+0x1d0>)
 800142c:	2200      	movs	r2, #0
 800142e:	0019      	movs	r1, r3
 8001430:	f002 faa3 	bl	800397a <HAL_GPIO_WritePin>
                          |BUZZER_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BACKLIGHT_RED_GPIO_Port, BACKLIGHT_RED_Pin, GPIO_PIN_RESET);
 8001434:	2380      	movs	r3, #128	; 0x80
 8001436:	0219      	lsls	r1, r3, #8
 8001438:	2390      	movs	r3, #144	; 0x90
 800143a:	05db      	lsls	r3, r3, #23
 800143c:	2200      	movs	r2, #0
 800143e:	0018      	movs	r0, r3
 8001440:	f002 fa9b 	bl	800397a <HAL_GPIO_WritePin>

  /*Configure GPIO pins : _5V_BAT_OFF_Pin DEBUG_Pin SR_CLR_Pin SR_RCLK_Pin
                           SR_OE_Pin DISP_CS_Pin DISP_RST_Pin BACKLIGHT_GREEN_Pin
                           BACKLIGHT_WHITE_Pin */
  GPIO_InitStruct.Pin = _5V_BAT_OFF_Pin|DEBUG_Pin|SR_CLR_Pin|SR_RCLK_Pin
 8001444:	193b      	adds	r3, r7, r4
 8001446:	4a3e      	ldr	r2, [pc, #248]	; (8001540 <MX_GPIO_Init+0x1c8>)
 8001448:	601a      	str	r2, [r3, #0]
                          |SR_OE_Pin|DISP_CS_Pin|DISP_RST_Pin|BACKLIGHT_GREEN_Pin
                          |BACKLIGHT_WHITE_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800144a:	193b      	adds	r3, r7, r4
 800144c:	2201      	movs	r2, #1
 800144e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001450:	193b      	adds	r3, r7, r4
 8001452:	2200      	movs	r2, #0
 8001454:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001456:	193b      	adds	r3, r7, r4
 8001458:	2200      	movs	r2, #0
 800145a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800145c:	193b      	adds	r3, r7, r4
 800145e:	4a39      	ldr	r2, [pc, #228]	; (8001544 <MX_GPIO_Init+0x1cc>)
 8001460:	0019      	movs	r1, r3
 8001462:	0010      	movs	r0, r2
 8001464:	f002 f8f4 	bl	8003650 <HAL_GPIO_Init>

  /*Configure GPIO pins : LOAD_MAX_Pin LOAD_MIN_Pin EM_HEATER_CTRL_Pin HEATER_CTRL_Pin
                           BUZZER_Pin */
  GPIO_InitStruct.Pin = LOAD_MAX_Pin|LOAD_MIN_Pin|EM_HEATER_CTRL_Pin|HEATER_CTRL_Pin
 8001468:	0021      	movs	r1, r4
 800146a:	187b      	adds	r3, r7, r1
 800146c:	229e      	movs	r2, #158	; 0x9e
 800146e:	0152      	lsls	r2, r2, #5
 8001470:	601a      	str	r2, [r3, #0]
                          |BUZZER_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001472:	000c      	movs	r4, r1
 8001474:	193b      	adds	r3, r7, r4
 8001476:	2201      	movs	r2, #1
 8001478:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800147a:	193b      	adds	r3, r7, r4
 800147c:	2200      	movs	r2, #0
 800147e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001480:	193b      	adds	r3, r7, r4
 8001482:	2200      	movs	r2, #0
 8001484:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001486:	193b      	adds	r3, r7, r4
 8001488:	4a2f      	ldr	r2, [pc, #188]	; (8001548 <MX_GPIO_Init+0x1d0>)
 800148a:	0019      	movs	r1, r3
 800148c:	0010      	movs	r0, r2
 800148e:	f002 f8df 	bl	8003650 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON_1_Pin BUTTON_0_Pin */
  GPIO_InitStruct.Pin = BUTTON_1_Pin|BUTTON_0_Pin;
 8001492:	193b      	adds	r3, r7, r4
 8001494:	22c0      	movs	r2, #192	; 0xc0
 8001496:	0092      	lsls	r2, r2, #2
 8001498:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800149a:	193b      	adds	r3, r7, r4
 800149c:	2288      	movs	r2, #136	; 0x88
 800149e:	0352      	lsls	r2, r2, #13
 80014a0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80014a2:	193b      	adds	r3, r7, r4
 80014a4:	2202      	movs	r2, #2
 80014a6:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014a8:	193a      	adds	r2, r7, r4
 80014aa:	2390      	movs	r3, #144	; 0x90
 80014ac:	05db      	lsls	r3, r3, #23
 80014ae:	0011      	movs	r1, r2
 80014b0:	0018      	movs	r0, r3
 80014b2:	f002 f8cd 	bl	8003650 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80014b6:	193b      	adds	r3, r7, r4
 80014b8:	2280      	movs	r2, #128	; 0x80
 80014ba:	00d2      	lsls	r2, r2, #3
 80014bc:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014be:	193b      	adds	r3, r7, r4
 80014c0:	2200      	movs	r2, #0
 80014c2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014c4:	193b      	adds	r3, r7, r4
 80014c6:	2200      	movs	r2, #0
 80014c8:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80014ca:	193a      	adds	r2, r7, r4
 80014cc:	2390      	movs	r3, #144	; 0x90
 80014ce:	05db      	lsls	r3, r3, #23
 80014d0:	0011      	movs	r1, r2
 80014d2:	0018      	movs	r0, r3
 80014d4:	f002 f8bc 	bl	8003650 <HAL_GPIO_Init>

  /*Configure GPIO pin : BACKLIGHT_RED_Pin */
  GPIO_InitStruct.Pin = BACKLIGHT_RED_Pin;
 80014d8:	0021      	movs	r1, r4
 80014da:	187b      	adds	r3, r7, r1
 80014dc:	2280      	movs	r2, #128	; 0x80
 80014de:	0212      	lsls	r2, r2, #8
 80014e0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014e2:	000c      	movs	r4, r1
 80014e4:	193b      	adds	r3, r7, r4
 80014e6:	2201      	movs	r2, #1
 80014e8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ea:	193b      	adds	r3, r7, r4
 80014ec:	2200      	movs	r2, #0
 80014ee:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014f0:	193b      	adds	r3, r7, r4
 80014f2:	2200      	movs	r2, #0
 80014f4:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(BACKLIGHT_RED_GPIO_Port, &GPIO_InitStruct);
 80014f6:	193a      	adds	r2, r7, r4
 80014f8:	2390      	movs	r3, #144	; 0x90
 80014fa:	05db      	lsls	r3, r3, #23
 80014fc:	0011      	movs	r1, r2
 80014fe:	0018      	movs	r0, r3
 8001500:	f002 f8a6 	bl	8003650 <HAL_GPIO_Init>

  /*Configure GPIO pin : CONNECTION_ERR_Pin */
  GPIO_InitStruct.Pin = CONNECTION_ERR_Pin;
 8001504:	193b      	adds	r3, r7, r4
 8001506:	2204      	movs	r2, #4
 8001508:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800150a:	193b      	adds	r3, r7, r4
 800150c:	2200      	movs	r2, #0
 800150e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001510:	193b      	adds	r3, r7, r4
 8001512:	2200      	movs	r2, #0
 8001514:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(CONNECTION_ERR_GPIO_Port, &GPIO_InitStruct);
 8001516:	193b      	adds	r3, r7, r4
 8001518:	4a0c      	ldr	r2, [pc, #48]	; (800154c <MX_GPIO_Init+0x1d4>)
 800151a:	0019      	movs	r1, r3
 800151c:	0010      	movs	r0, r2
 800151e:	f002 f897 	bl	8003650 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 8001522:	2200      	movs	r2, #0
 8001524:	2100      	movs	r1, #0
 8001526:	2007      	movs	r0, #7
 8001528:	f001 ffe2 	bl	80034f0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 800152c:	2007      	movs	r0, #7
 800152e:	f001 fff4 	bl	800351a <HAL_NVIC_EnableIRQ>

}
 8001532:	46c0      	nop			; (mov r8, r8)
 8001534:	46bd      	mov	sp, r7
 8001536:	b00b      	add	sp, #44	; 0x2c
 8001538:	bd90      	pop	{r4, r7, pc}
 800153a:	46c0      	nop			; (mov r8, r8)
 800153c:	40021000 	.word	0x40021000
 8001540:	0000f3c4 	.word	0x0000f3c4
 8001544:	48000400 	.word	0x48000400
 8001548:	48000800 	.word	0x48000800
 800154c:	48000c00 	.word	0x48000c00

08001550 <clkHandler>:

/* USER CODE BEGIN 4 */

void clkHandler(void)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	af00      	add	r7, sp, #0
	flags.time.ten_ms = 0;
 8001554:	4b3b      	ldr	r3, [pc, #236]	; (8001644 <clkHandler+0xf4>)
 8001556:	781a      	ldrb	r2, [r3, #0]
 8001558:	2101      	movs	r1, #1
 800155a:	438a      	bics	r2, r1
 800155c:	701a      	strb	r2, [r3, #0]
	flags.time.sec	= 0;
 800155e:	4b39      	ldr	r3, [pc, #228]	; (8001644 <clkHandler+0xf4>)
 8001560:	781a      	ldrb	r2, [r3, #0]
 8001562:	2102      	movs	r1, #2
 8001564:	438a      	bics	r2, r1
 8001566:	701a      	strb	r2, [r3, #0]
	flags.time.min	= 0;
 8001568:	4b36      	ldr	r3, [pc, #216]	; (8001644 <clkHandler+0xf4>)
 800156a:	781a      	ldrb	r2, [r3, #0]
 800156c:	2104      	movs	r1, #4
 800156e:	438a      	bics	r2, r1
 8001570:	701a      	strb	r2, [r3, #0]
	flags.time.hour	= 0;
 8001572:	4b34      	ldr	r3, [pc, #208]	; (8001644 <clkHandler+0xf4>)
 8001574:	781a      	ldrb	r2, [r3, #0]
 8001576:	2108      	movs	r1, #8
 8001578:	438a      	bics	r2, r1
 800157a:	701a      	strb	r2, [r3, #0]
	sysTime[SYSTIME_TEN_MS]++;
 800157c:	4b32      	ldr	r3, [pc, #200]	; (8001648 <clkHandler+0xf8>)
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	1c5a      	adds	r2, r3, #1
 8001582:	4b31      	ldr	r3, [pc, #196]	; (8001648 <clkHandler+0xf8>)
 8001584:	601a      	str	r2, [r3, #0]
#ifdef __DEBUG_FAST__
	if((sysTime[SYSTIME_TEN_MS] % 10) == 0)	//0,1 s
#else
	if((sysTime[SYSTIME_TEN_MS] % 100) == 0)	//1 s
 8001586:	4b30      	ldr	r3, [pc, #192]	; (8001648 <clkHandler+0xf8>)
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	2164      	movs	r1, #100	; 0x64
 800158c:	0018      	movs	r0, r3
 800158e:	f7fe fe53 	bl	8000238 <__aeabi_uidivmod>
 8001592:	1e0b      	subs	r3, r1, #0
 8001594:	d109      	bne.n	80015aa <clkHandler+0x5a>
#endif
	{
		sysTime[SYSTIME_SEC]++;
 8001596:	4b2c      	ldr	r3, [pc, #176]	; (8001648 <clkHandler+0xf8>)
 8001598:	685b      	ldr	r3, [r3, #4]
 800159a:	1c5a      	adds	r2, r3, #1
 800159c:	4b2a      	ldr	r3, [pc, #168]	; (8001648 <clkHandler+0xf8>)
 800159e:	605a      	str	r2, [r3, #4]
		flags.time.sec = 1;
 80015a0:	4b28      	ldr	r3, [pc, #160]	; (8001644 <clkHandler+0xf4>)
 80015a2:	781a      	ldrb	r2, [r3, #0]
 80015a4:	2102      	movs	r1, #2
 80015a6:	430a      	orrs	r2, r1
 80015a8:	701a      	strb	r2, [r3, #0]
	}

	if(flags.time.sec)
 80015aa:	4b26      	ldr	r3, [pc, #152]	; (8001644 <clkHandler+0xf4>)
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	079b      	lsls	r3, r3, #30
 80015b0:	0fdb      	lsrs	r3, r3, #31
 80015b2:	b2db      	uxtb	r3, r3
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d042      	beq.n	800163e <clkHandler+0xee>
	{
		if((sysTime[SYSTIME_SEC] % 60) == 0 && sysTime[SYSTIME_TEN_MS] != 0)	//1 min
 80015b8:	4b23      	ldr	r3, [pc, #140]	; (8001648 <clkHandler+0xf8>)
 80015ba:	685b      	ldr	r3, [r3, #4]
 80015bc:	213c      	movs	r1, #60	; 0x3c
 80015be:	0018      	movs	r0, r3
 80015c0:	f7fe fe3a 	bl	8000238 <__aeabi_uidivmod>
 80015c4:	1e0b      	subs	r3, r1, #0
 80015c6:	d110      	bne.n	80015ea <clkHandler+0x9a>
 80015c8:	4b1f      	ldr	r3, [pc, #124]	; (8001648 <clkHandler+0xf8>)
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d00c      	beq.n	80015ea <clkHandler+0x9a>
		{
			sysTime[SYSTIME_SEC] = 0;
 80015d0:	4b1d      	ldr	r3, [pc, #116]	; (8001648 <clkHandler+0xf8>)
 80015d2:	2200      	movs	r2, #0
 80015d4:	605a      	str	r2, [r3, #4]
			sysTime[SYSTIME_MIN]++;
 80015d6:	4b1c      	ldr	r3, [pc, #112]	; (8001648 <clkHandler+0xf8>)
 80015d8:	689b      	ldr	r3, [r3, #8]
 80015da:	1c5a      	adds	r2, r3, #1
 80015dc:	4b1a      	ldr	r3, [pc, #104]	; (8001648 <clkHandler+0xf8>)
 80015de:	609a      	str	r2, [r3, #8]
			flags.time.min = 1;
 80015e0:	4b18      	ldr	r3, [pc, #96]	; (8001644 <clkHandler+0xf4>)
 80015e2:	781a      	ldrb	r2, [r3, #0]
 80015e4:	2104      	movs	r1, #4
 80015e6:	430a      	orrs	r2, r1
 80015e8:	701a      	strb	r2, [r3, #0]
		}

		if(flags.time.min)
 80015ea:	4b16      	ldr	r3, [pc, #88]	; (8001644 <clkHandler+0xf4>)
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	075b      	lsls	r3, r3, #29
 80015f0:	0fdb      	lsrs	r3, r3, #31
 80015f2:	b2db      	uxtb	r3, r3
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d022      	beq.n	800163e <clkHandler+0xee>
		{
			if((sysTime[SYSTIME_MIN] % 60) == 0 && sysTime[SYSTIME_TEN_MS] != 0)	//1 min
 80015f8:	4b13      	ldr	r3, [pc, #76]	; (8001648 <clkHandler+0xf8>)
 80015fa:	689b      	ldr	r3, [r3, #8]
 80015fc:	213c      	movs	r1, #60	; 0x3c
 80015fe:	0018      	movs	r0, r3
 8001600:	f7fe fe1a 	bl	8000238 <__aeabi_uidivmod>
 8001604:	1e0b      	subs	r3, r1, #0
 8001606:	d11a      	bne.n	800163e <clkHandler+0xee>
 8001608:	4b0f      	ldr	r3, [pc, #60]	; (8001648 <clkHandler+0xf8>)
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	2b00      	cmp	r3, #0
 800160e:	d016      	beq.n	800163e <clkHandler+0xee>
			{

				sysTime[SYSTIME_SEC] = 0;
 8001610:	4b0d      	ldr	r3, [pc, #52]	; (8001648 <clkHandler+0xf8>)
 8001612:	2200      	movs	r2, #0
 8001614:	605a      	str	r2, [r3, #4]
				sysTime[SYSTIME_MIN] = 0;
 8001616:	4b0c      	ldr	r3, [pc, #48]	; (8001648 <clkHandler+0xf8>)
 8001618:	2200      	movs	r2, #0
 800161a:	609a      	str	r2, [r3, #8]
				sysTime[SYSTIME_HOUR]++;
 800161c:	4b0a      	ldr	r3, [pc, #40]	; (8001648 <clkHandler+0xf8>)
 800161e:	68db      	ldr	r3, [r3, #12]
 8001620:	1c5a      	adds	r2, r3, #1
 8001622:	4b09      	ldr	r3, [pc, #36]	; (8001648 <clkHandler+0xf8>)
 8001624:	60da      	str	r2, [r3, #12]
				flags.time.hour = 1;
 8001626:	4b07      	ldr	r3, [pc, #28]	; (8001644 <clkHandler+0xf4>)
 8001628:	781a      	ldrb	r2, [r3, #0]
 800162a:	2108      	movs	r1, #8
 800162c:	430a      	orrs	r2, r1
 800162e:	701a      	strb	r2, [r3, #0]
				if(sysTime[SYSTIME_HOUR] >= 23)
 8001630:	4b05      	ldr	r3, [pc, #20]	; (8001648 <clkHandler+0xf8>)
 8001632:	68db      	ldr	r3, [r3, #12]
 8001634:	2b16      	cmp	r3, #22
 8001636:	d902      	bls.n	800163e <clkHandler+0xee>
					sysTime[SYSTIME_HOUR] = 0;
 8001638:	4b03      	ldr	r3, [pc, #12]	; (8001648 <clkHandler+0xf8>)
 800163a:	2200      	movs	r2, #0
 800163c:	60da      	str	r2, [r3, #12]
		char timeStamp[30];
		sprintf(timeStamp, "%d : %d : %d\n", sysTime[SYSTIME_HOUR], sysTime[SYSTIME_MIN], sysTime[SYSTIME_SEC]);
		pushStr(USB_Tx_Buffer, timeStamp, strlen(timeStamp));	//odešli čas
	}
#endif
}
 800163e:	46c0      	nop			; (mov r8, r8)
 8001640:	46bd      	mov	sp, r7
 8001642:	bd80      	pop	{r7, pc}
 8001644:	20000630 	.word	0x20000630
 8001648:	2000023c 	.word	0x2000023c

0800164c <buttonDebounce>:

void buttonDebounce(void)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	af00      	add	r7, sp, #0
	flags.buttons.butt0_ver = 0;
 8001650:	4b3a      	ldr	r3, [pc, #232]	; (800173c <buttonDebounce+0xf0>)
 8001652:	791a      	ldrb	r2, [r3, #4]
 8001654:	2102      	movs	r1, #2
 8001656:	438a      	bics	r2, r1
 8001658:	711a      	strb	r2, [r3, #4]
	flags.buttons.butt1_ver = 0;
 800165a:	4b38      	ldr	r3, [pc, #224]	; (800173c <buttonDebounce+0xf0>)
 800165c:	791a      	ldrb	r2, [r3, #4]
 800165e:	2108      	movs	r1, #8
 8001660:	438a      	bics	r2, r1
 8001662:	711a      	strb	r2, [r3, #4]

	if(flags.buttons.butt0_int)
 8001664:	4b35      	ldr	r3, [pc, #212]	; (800173c <buttonDebounce+0xf0>)
 8001666:	685b      	ldr	r3, [r3, #4]
 8001668:	07db      	lsls	r3, r3, #31
 800166a:	0fdb      	lsrs	r3, r3, #31
 800166c:	b2db      	uxtb	r3, r3
 800166e:	2b00      	cmp	r3, #0
 8001670:	d02c      	beq.n	80016cc <buttonDebounce+0x80>
	{
		if(HAL_GPIO_ReadPin(BUTTON_0_GPIO_Port,BUTTON_0_Pin) == GPIO_PIN_SET)
 8001672:	2380      	movs	r3, #128	; 0x80
 8001674:	009a      	lsls	r2, r3, #2
 8001676:	2390      	movs	r3, #144	; 0x90
 8001678:	05db      	lsls	r3, r3, #23
 800167a:	0011      	movs	r1, r2
 800167c:	0018      	movs	r0, r3
 800167e:	f002 f95f 	bl	8003940 <HAL_GPIO_ReadPin>
 8001682:	0003      	movs	r3, r0
 8001684:	2b01      	cmp	r3, #1
 8001686:	d107      	bne.n	8001698 <buttonDebounce+0x4c>
		{
			button0_Debounce++;
 8001688:	4b2d      	ldr	r3, [pc, #180]	; (8001740 <buttonDebounce+0xf4>)
 800168a:	781b      	ldrb	r3, [r3, #0]
 800168c:	b2db      	uxtb	r3, r3
 800168e:	3301      	adds	r3, #1
 8001690:	b2da      	uxtb	r2, r3
 8001692:	4b2b      	ldr	r3, [pc, #172]	; (8001740 <buttonDebounce+0xf4>)
 8001694:	701a      	strb	r2, [r3, #0]
 8001696:	e007      	b.n	80016a8 <buttonDebounce+0x5c>
		}
		else
		{
			button0_Debounce = 0;
 8001698:	4b29      	ldr	r3, [pc, #164]	; (8001740 <buttonDebounce+0xf4>)
 800169a:	2200      	movs	r2, #0
 800169c:	701a      	strb	r2, [r3, #0]
			flags.buttons.butt0_int = 0;
 800169e:	4b27      	ldr	r3, [pc, #156]	; (800173c <buttonDebounce+0xf0>)
 80016a0:	791a      	ldrb	r2, [r3, #4]
 80016a2:	2101      	movs	r1, #1
 80016a4:	438a      	bics	r2, r1
 80016a6:	711a      	strb	r2, [r3, #4]
		}
		if(button0_Debounce >= 5)
 80016a8:	4b25      	ldr	r3, [pc, #148]	; (8001740 <buttonDebounce+0xf4>)
 80016aa:	781b      	ldrb	r3, [r3, #0]
 80016ac:	b2db      	uxtb	r3, r3
 80016ae:	2b04      	cmp	r3, #4
 80016b0:	d90c      	bls.n	80016cc <buttonDebounce+0x80>
		{
			flags.buttons.butt0_ver = 1;
 80016b2:	4b22      	ldr	r3, [pc, #136]	; (800173c <buttonDebounce+0xf0>)
 80016b4:	791a      	ldrb	r2, [r3, #4]
 80016b6:	2102      	movs	r1, #2
 80016b8:	430a      	orrs	r2, r1
 80016ba:	711a      	strb	r2, [r3, #4]
			flags.buttons.butt0_int = 0;
 80016bc:	4b1f      	ldr	r3, [pc, #124]	; (800173c <buttonDebounce+0xf0>)
 80016be:	791a      	ldrb	r2, [r3, #4]
 80016c0:	2101      	movs	r1, #1
 80016c2:	438a      	bics	r2, r1
 80016c4:	711a      	strb	r2, [r3, #4]
			button0_Debounce = 0;
 80016c6:	4b1e      	ldr	r3, [pc, #120]	; (8001740 <buttonDebounce+0xf4>)
 80016c8:	2200      	movs	r2, #0
 80016ca:	701a      	strb	r2, [r3, #0]
			//writeChar('a', 1, 5);
#endif
		}
	}

	if(flags.buttons.butt1_int)
 80016cc:	4b1b      	ldr	r3, [pc, #108]	; (800173c <buttonDebounce+0xf0>)
 80016ce:	685b      	ldr	r3, [r3, #4]
 80016d0:	075b      	lsls	r3, r3, #29
 80016d2:	0fdb      	lsrs	r3, r3, #31
 80016d4:	b2db      	uxtb	r3, r3
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d02c      	beq.n	8001734 <buttonDebounce+0xe8>
	{
		if(HAL_GPIO_ReadPin(BUTTON_1_GPIO_Port,BUTTON_1_Pin) == GPIO_PIN_SET)
 80016da:	2380      	movs	r3, #128	; 0x80
 80016dc:	005a      	lsls	r2, r3, #1
 80016de:	2390      	movs	r3, #144	; 0x90
 80016e0:	05db      	lsls	r3, r3, #23
 80016e2:	0011      	movs	r1, r2
 80016e4:	0018      	movs	r0, r3
 80016e6:	f002 f92b 	bl	8003940 <HAL_GPIO_ReadPin>
 80016ea:	0003      	movs	r3, r0
 80016ec:	2b01      	cmp	r3, #1
 80016ee:	d107      	bne.n	8001700 <buttonDebounce+0xb4>
		{
			button1_Debounce++;
 80016f0:	4b14      	ldr	r3, [pc, #80]	; (8001744 <buttonDebounce+0xf8>)
 80016f2:	781b      	ldrb	r3, [r3, #0]
 80016f4:	b2db      	uxtb	r3, r3
 80016f6:	3301      	adds	r3, #1
 80016f8:	b2da      	uxtb	r2, r3
 80016fa:	4b12      	ldr	r3, [pc, #72]	; (8001744 <buttonDebounce+0xf8>)
 80016fc:	701a      	strb	r2, [r3, #0]
 80016fe:	e007      	b.n	8001710 <buttonDebounce+0xc4>
		}
		else
		{
			button1_Debounce = 0;
 8001700:	4b10      	ldr	r3, [pc, #64]	; (8001744 <buttonDebounce+0xf8>)
 8001702:	2200      	movs	r2, #0
 8001704:	701a      	strb	r2, [r3, #0]
			flags.buttons.butt1_int = 0;
 8001706:	4b0d      	ldr	r3, [pc, #52]	; (800173c <buttonDebounce+0xf0>)
 8001708:	791a      	ldrb	r2, [r3, #4]
 800170a:	2104      	movs	r1, #4
 800170c:	438a      	bics	r2, r1
 800170e:	711a      	strb	r2, [r3, #4]
		}
		if(button1_Debounce >= 5)
 8001710:	4b0c      	ldr	r3, [pc, #48]	; (8001744 <buttonDebounce+0xf8>)
 8001712:	781b      	ldrb	r3, [r3, #0]
 8001714:	b2db      	uxtb	r3, r3
 8001716:	2b04      	cmp	r3, #4
 8001718:	d90c      	bls.n	8001734 <buttonDebounce+0xe8>
		{
			flags.buttons.butt1_ver = 1;
 800171a:	4b08      	ldr	r3, [pc, #32]	; (800173c <buttonDebounce+0xf0>)
 800171c:	791a      	ldrb	r2, [r3, #4]
 800171e:	2108      	movs	r1, #8
 8001720:	430a      	orrs	r2, r1
 8001722:	711a      	strb	r2, [r3, #4]
			flags.buttons.butt1_int = 0;
 8001724:	4b05      	ldr	r3, [pc, #20]	; (800173c <buttonDebounce+0xf0>)
 8001726:	791a      	ldrb	r2, [r3, #4]
 8001728:	2104      	movs	r1, #4
 800172a:	438a      	bics	r2, r1
 800172c:	711a      	strb	r2, [r3, #4]
			button1_Debounce = 0;
 800172e:	4b05      	ldr	r3, [pc, #20]	; (8001744 <buttonDebounce+0xf8>)
 8001730:	2200      	movs	r2, #0
 8001732:	701a      	strb	r2, [r3, #0]
#ifdef __DEBUG_BUTT__
			HAL_GPIO_TogglePin(BACKLIGHT_RED_GPIO_Port, BACKLIGHT_RED_Pin);
#endif
		}
	}
}
 8001734:	46c0      	nop			; (mov r8, r8)
 8001736:	46bd      	mov	sp, r7
 8001738:	bd80      	pop	{r7, pc}
 800173a:	46c0      	nop			; (mov r8, r8)
 800173c:	20000630 	.word	0x20000630
 8001740:	2000024c 	.word	0x2000024c
 8001744:	2000024d 	.word	0x2000024d

08001748 <UI_Handler>:

//_____Obsluha piezo + podsvícení displeje_____//
void UI_Handler(void)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	af00      	add	r7, sp, #0
		DONE,
	}UI_State;

	static uint32_t startTime;

	if(flags.ui.error && (UI_State != ERROR))
 800174c:	4b97      	ldr	r3, [pc, #604]	; (80019ac <UI_Handler+0x264>)
 800174e:	691b      	ldr	r3, [r3, #16]
 8001750:	075b      	lsls	r3, r3, #29
 8001752:	0fdb      	lsrs	r3, r3, #31
 8001754:	b2db      	uxtb	r3, r3
 8001756:	2b00      	cmp	r3, #0
 8001758:	d00b      	beq.n	8001772 <UI_Handler+0x2a>
 800175a:	4b95      	ldr	r3, [pc, #596]	; (80019b0 <UI_Handler+0x268>)
 800175c:	781b      	ldrb	r3, [r3, #0]
 800175e:	2b03      	cmp	r3, #3
 8001760:	d007      	beq.n	8001772 <UI_Handler+0x2a>
	{
		UI_State = ERROR;
 8001762:	4b93      	ldr	r3, [pc, #588]	; (80019b0 <UI_Handler+0x268>)
 8001764:	2203      	movs	r2, #3
 8001766:	701a      	strb	r2, [r3, #0]
		startTime = sysTime[SYSTIME_TEN_MS];
 8001768:	4b92      	ldr	r3, [pc, #584]	; (80019b4 <UI_Handler+0x26c>)
 800176a:	681a      	ldr	r2, [r3, #0]
 800176c:	4b92      	ldr	r3, [pc, #584]	; (80019b8 <UI_Handler+0x270>)
 800176e:	601a      	str	r2, [r3, #0]
 8001770:	e05e      	b.n	8001830 <UI_Handler+0xe8>
	}
	else if(flags.ui.notice && (UI_State == OFF))
 8001772:	4b8e      	ldr	r3, [pc, #568]	; (80019ac <UI_Handler+0x264>)
 8001774:	691b      	ldr	r3, [r3, #16]
 8001776:	071b      	lsls	r3, r3, #28
 8001778:	0fdb      	lsrs	r3, r3, #31
 800177a:	b2db      	uxtb	r3, r3
 800177c:	2b00      	cmp	r3, #0
 800177e:	d010      	beq.n	80017a2 <UI_Handler+0x5a>
 8001780:	4b8b      	ldr	r3, [pc, #556]	; (80019b0 <UI_Handler+0x268>)
 8001782:	781b      	ldrb	r3, [r3, #0]
 8001784:	2b00      	cmp	r3, #0
 8001786:	d10c      	bne.n	80017a2 <UI_Handler+0x5a>
	{
		UI_State = NOTICE;
 8001788:	4b89      	ldr	r3, [pc, #548]	; (80019b0 <UI_Handler+0x268>)
 800178a:	2204      	movs	r2, #4
 800178c:	701a      	strb	r2, [r3, #0]
		startTime = sysTime[SYSTIME_TEN_MS];
 800178e:	4b89      	ldr	r3, [pc, #548]	; (80019b4 <UI_Handler+0x26c>)
 8001790:	681a      	ldr	r2, [r3, #0]
 8001792:	4b89      	ldr	r3, [pc, #548]	; (80019b8 <UI_Handler+0x270>)
 8001794:	601a      	str	r2, [r3, #0]
		flags.ui.notice = 0;
 8001796:	4b85      	ldr	r3, [pc, #532]	; (80019ac <UI_Handler+0x264>)
 8001798:	7c1a      	ldrb	r2, [r3, #16]
 800179a:	2108      	movs	r1, #8
 800179c:	438a      	bics	r2, r1
 800179e:	741a      	strb	r2, [r3, #16]
 80017a0:	e046      	b.n	8001830 <UI_Handler+0xe8>
	}
	else if(flags.ui.done && (UI_State == OFF))
 80017a2:	4b82      	ldr	r3, [pc, #520]	; (80019ac <UI_Handler+0x264>)
 80017a4:	691b      	ldr	r3, [r3, #16]
 80017a6:	06db      	lsls	r3, r3, #27
 80017a8:	0fdb      	lsrs	r3, r3, #31
 80017aa:	b2db      	uxtb	r3, r3
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d010      	beq.n	80017d2 <UI_Handler+0x8a>
 80017b0:	4b7f      	ldr	r3, [pc, #508]	; (80019b0 <UI_Handler+0x268>)
 80017b2:	781b      	ldrb	r3, [r3, #0]
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d10c      	bne.n	80017d2 <UI_Handler+0x8a>
	{
		UI_State = DONE;
 80017b8:	4b7d      	ldr	r3, [pc, #500]	; (80019b0 <UI_Handler+0x268>)
 80017ba:	2205      	movs	r2, #5
 80017bc:	701a      	strb	r2, [r3, #0]
		startTime = sysTime[SYSTIME_TEN_MS];
 80017be:	4b7d      	ldr	r3, [pc, #500]	; (80019b4 <UI_Handler+0x26c>)
 80017c0:	681a      	ldr	r2, [r3, #0]
 80017c2:	4b7d      	ldr	r3, [pc, #500]	; (80019b8 <UI_Handler+0x270>)
 80017c4:	601a      	str	r2, [r3, #0]
		flags.ui.done = 0;
 80017c6:	4b79      	ldr	r3, [pc, #484]	; (80019ac <UI_Handler+0x264>)
 80017c8:	7c1a      	ldrb	r2, [r3, #16]
 80017ca:	2110      	movs	r1, #16
 80017cc:	438a      	bics	r2, r1
 80017ce:	741a      	strb	r2, [r3, #16]
 80017d0:	e02e      	b.n	8001830 <UI_Handler+0xe8>
	}
	else if(flags.ui.longBeep && (UI_State == OFF))
 80017d2:	4b76      	ldr	r3, [pc, #472]	; (80019ac <UI_Handler+0x264>)
 80017d4:	691b      	ldr	r3, [r3, #16]
 80017d6:	079b      	lsls	r3, r3, #30
 80017d8:	0fdb      	lsrs	r3, r3, #31
 80017da:	b2db      	uxtb	r3, r3
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d010      	beq.n	8001802 <UI_Handler+0xba>
 80017e0:	4b73      	ldr	r3, [pc, #460]	; (80019b0 <UI_Handler+0x268>)
 80017e2:	781b      	ldrb	r3, [r3, #0]
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d10c      	bne.n	8001802 <UI_Handler+0xba>
	{
		UI_State = LONG_BEEP;
 80017e8:	4b71      	ldr	r3, [pc, #452]	; (80019b0 <UI_Handler+0x268>)
 80017ea:	2202      	movs	r2, #2
 80017ec:	701a      	strb	r2, [r3, #0]
		startTime = sysTime[SYSTIME_TEN_MS];
 80017ee:	4b71      	ldr	r3, [pc, #452]	; (80019b4 <UI_Handler+0x26c>)
 80017f0:	681a      	ldr	r2, [r3, #0]
 80017f2:	4b71      	ldr	r3, [pc, #452]	; (80019b8 <UI_Handler+0x270>)
 80017f4:	601a      	str	r2, [r3, #0]
		flags.ui.longBeep = 0;
 80017f6:	4b6d      	ldr	r3, [pc, #436]	; (80019ac <UI_Handler+0x264>)
 80017f8:	7c1a      	ldrb	r2, [r3, #16]
 80017fa:	2102      	movs	r1, #2
 80017fc:	438a      	bics	r2, r1
 80017fe:	741a      	strb	r2, [r3, #16]
 8001800:	e016      	b.n	8001830 <UI_Handler+0xe8>
	}
	else if(flags.ui.shortBeep && (UI_State == OFF))
 8001802:	4b6a      	ldr	r3, [pc, #424]	; (80019ac <UI_Handler+0x264>)
 8001804:	691b      	ldr	r3, [r3, #16]
 8001806:	07db      	lsls	r3, r3, #31
 8001808:	0fdb      	lsrs	r3, r3, #31
 800180a:	b2db      	uxtb	r3, r3
 800180c:	2b00      	cmp	r3, #0
 800180e:	d00f      	beq.n	8001830 <UI_Handler+0xe8>
 8001810:	4b67      	ldr	r3, [pc, #412]	; (80019b0 <UI_Handler+0x268>)
 8001812:	781b      	ldrb	r3, [r3, #0]
 8001814:	2b00      	cmp	r3, #0
 8001816:	d10b      	bne.n	8001830 <UI_Handler+0xe8>
	{
		UI_State = SHORT_BEEP;
 8001818:	4b65      	ldr	r3, [pc, #404]	; (80019b0 <UI_Handler+0x268>)
 800181a:	2201      	movs	r2, #1
 800181c:	701a      	strb	r2, [r3, #0]
		startTime = sysTime[SYSTIME_TEN_MS];
 800181e:	4b65      	ldr	r3, [pc, #404]	; (80019b4 <UI_Handler+0x26c>)
 8001820:	681a      	ldr	r2, [r3, #0]
 8001822:	4b65      	ldr	r3, [pc, #404]	; (80019b8 <UI_Handler+0x270>)
 8001824:	601a      	str	r2, [r3, #0]
		flags.ui.shortBeep = 0;
 8001826:	4b61      	ldr	r3, [pc, #388]	; (80019ac <UI_Handler+0x264>)
 8001828:	7c1a      	ldrb	r2, [r3, #16]
 800182a:	2101      	movs	r1, #1
 800182c:	438a      	bics	r2, r1
 800182e:	741a      	strb	r2, [r3, #16]
	}

	switch(UI_State)
 8001830:	4b5f      	ldr	r3, [pc, #380]	; (80019b0 <UI_Handler+0x268>)
 8001832:	781b      	ldrb	r3, [r3, #0]
 8001834:	2b05      	cmp	r3, #5
 8001836:	d900      	bls.n	800183a <UI_Handler+0xf2>
 8001838:	e0a0      	b.n	800197c <UI_Handler+0x234>
 800183a:	009a      	lsls	r2, r3, #2
 800183c:	4b5f      	ldr	r3, [pc, #380]	; (80019bc <UI_Handler+0x274>)
 800183e:	18d3      	adds	r3, r2, r3
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	469f      	mov	pc, r3
	{
	case SHORT_BEEP:
#ifndef __SILENT__
			BUZZER_ON;
 8001844:	2380      	movs	r3, #128	; 0x80
 8001846:	015b      	lsls	r3, r3, #5
 8001848:	485d      	ldr	r0, [pc, #372]	; (80019c0 <UI_Handler+0x278>)
 800184a:	2201      	movs	r2, #1
 800184c:	0019      	movs	r1, r3
 800184e:	f002 f894 	bl	800397a <HAL_GPIO_WritePin>
#endif
		if((sysTime[SYSTIME_TEN_MS] - startTime) >= 50)
 8001852:	4b58      	ldr	r3, [pc, #352]	; (80019b4 <UI_Handler+0x26c>)
 8001854:	681a      	ldr	r2, [r3, #0]
 8001856:	4b58      	ldr	r3, [pc, #352]	; (80019b8 <UI_Handler+0x270>)
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	1ad3      	subs	r3, r2, r3
 800185c:	2b31      	cmp	r3, #49	; 0x31
 800185e:	d800      	bhi.n	8001862 <UI_Handler+0x11a>
 8001860:	e097      	b.n	8001992 <UI_Handler+0x24a>
		{
			UI_State = OFF;
 8001862:	4b53      	ldr	r3, [pc, #332]	; (80019b0 <UI_Handler+0x268>)
 8001864:	2200      	movs	r2, #0
 8001866:	701a      	strb	r2, [r3, #0]
			BUZZER_OFF;
 8001868:	2380      	movs	r3, #128	; 0x80
 800186a:	015b      	lsls	r3, r3, #5
 800186c:	4854      	ldr	r0, [pc, #336]	; (80019c0 <UI_Handler+0x278>)
 800186e:	2200      	movs	r2, #0
 8001870:	0019      	movs	r1, r3
 8001872:	f002 f882 	bl	800397a <HAL_GPIO_WritePin>
		}
		break;
 8001876:	e08c      	b.n	8001992 <UI_Handler+0x24a>

	case LONG_BEEP:
#ifndef __SILENT__
			BUZZER_ON;
 8001878:	2380      	movs	r3, #128	; 0x80
 800187a:	015b      	lsls	r3, r3, #5
 800187c:	4850      	ldr	r0, [pc, #320]	; (80019c0 <UI_Handler+0x278>)
 800187e:	2201      	movs	r2, #1
 8001880:	0019      	movs	r1, r3
 8001882:	f002 f87a 	bl	800397a <HAL_GPIO_WritePin>
#endif
		if((sysTime[SYSTIME_TEN_MS] - startTime) >= 100)
 8001886:	4b4b      	ldr	r3, [pc, #300]	; (80019b4 <UI_Handler+0x26c>)
 8001888:	681a      	ldr	r2, [r3, #0]
 800188a:	4b4b      	ldr	r3, [pc, #300]	; (80019b8 <UI_Handler+0x270>)
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	1ad3      	subs	r3, r2, r3
 8001890:	2b63      	cmp	r3, #99	; 0x63
 8001892:	d800      	bhi.n	8001896 <UI_Handler+0x14e>
 8001894:	e07f      	b.n	8001996 <UI_Handler+0x24e>
		{
			UI_State = OFF;
 8001896:	4b46      	ldr	r3, [pc, #280]	; (80019b0 <UI_Handler+0x268>)
 8001898:	2200      	movs	r2, #0
 800189a:	701a      	strb	r2, [r3, #0]
			BUZZER_OFF;
 800189c:	2380      	movs	r3, #128	; 0x80
 800189e:	015b      	lsls	r3, r3, #5
 80018a0:	4847      	ldr	r0, [pc, #284]	; (80019c0 <UI_Handler+0x278>)
 80018a2:	2200      	movs	r2, #0
 80018a4:	0019      	movs	r1, r3
 80018a6:	f002 f868 	bl	800397a <HAL_GPIO_WritePin>
		}
		break;
 80018aa:	e074      	b.n	8001996 <UI_Handler+0x24e>

	case ERROR:
		if(!flags.ui.error)
 80018ac:	4b3f      	ldr	r3, [pc, #252]	; (80019ac <UI_Handler+0x264>)
 80018ae:	691b      	ldr	r3, [r3, #16]
 80018b0:	075b      	lsls	r3, r3, #29
 80018b2:	0fdb      	lsrs	r3, r3, #31
 80018b4:	b2db      	uxtb	r3, r3
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d102      	bne.n	80018c0 <UI_Handler+0x178>
			UI_State = OFF;
 80018ba:	4b3d      	ldr	r3, [pc, #244]	; (80019b0 <UI_Handler+0x268>)
 80018bc:	2200      	movs	r2, #0
 80018be:	701a      	strb	r2, [r3, #0]
		if(!((sysTime[SYSTIME_TEN_MS] - startTime) % 50))
 80018c0:	4b3c      	ldr	r3, [pc, #240]	; (80019b4 <UI_Handler+0x26c>)
 80018c2:	681a      	ldr	r2, [r3, #0]
 80018c4:	4b3c      	ldr	r3, [pc, #240]	; (80019b8 <UI_Handler+0x270>)
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	1ad3      	subs	r3, r2, r3
 80018ca:	2132      	movs	r1, #50	; 0x32
 80018cc:	0018      	movs	r0, r3
 80018ce:	f7fe fcb3 	bl	8000238 <__aeabi_uidivmod>
 80018d2:	1e0b      	subs	r3, r1, #0
 80018d4:	d161      	bne.n	800199a <UI_Handler+0x252>
		{
#ifndef __SILENT__
			BUZZER_Toggle;
 80018d6:	2380      	movs	r3, #128	; 0x80
 80018d8:	015b      	lsls	r3, r3, #5
 80018da:	4a39      	ldr	r2, [pc, #228]	; (80019c0 <UI_Handler+0x278>)
 80018dc:	0019      	movs	r1, r3
 80018de:	0010      	movs	r0, r2
 80018e0:	f002 f868 	bl	80039b4 <HAL_GPIO_TogglePin>
#endif
			BACKLIGHT_RED_Toggle;
 80018e4:	2380      	movs	r3, #128	; 0x80
 80018e6:	021a      	lsls	r2, r3, #8
 80018e8:	2390      	movs	r3, #144	; 0x90
 80018ea:	05db      	lsls	r3, r3, #23
 80018ec:	0011      	movs	r1, r2
 80018ee:	0018      	movs	r0, r3
 80018f0:	f002 f860 	bl	80039b4 <HAL_GPIO_TogglePin>
		}
		break;
 80018f4:	e051      	b.n	800199a <UI_Handler+0x252>

	case NOTICE:
		if(!((sysTime[SYSTIME_TEN_MS] - startTime) % 35))
 80018f6:	4b2f      	ldr	r3, [pc, #188]	; (80019b4 <UI_Handler+0x26c>)
 80018f8:	681a      	ldr	r2, [r3, #0]
 80018fa:	4b2f      	ldr	r3, [pc, #188]	; (80019b8 <UI_Handler+0x270>)
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	1ad3      	subs	r3, r2, r3
 8001900:	2123      	movs	r1, #35	; 0x23
 8001902:	0018      	movs	r0, r3
 8001904:	f7fe fc98 	bl	8000238 <__aeabi_uidivmod>
 8001908:	1e0b      	subs	r3, r1, #0
 800190a:	d106      	bne.n	800191a <UI_Handler+0x1d2>
		{
#ifndef __SILENT__
			BUZZER_Toggle;
 800190c:	2380      	movs	r3, #128	; 0x80
 800190e:	015b      	lsls	r3, r3, #5
 8001910:	4a2b      	ldr	r2, [pc, #172]	; (80019c0 <UI_Handler+0x278>)
 8001912:	0019      	movs	r1, r3
 8001914:	0010      	movs	r0, r2
 8001916:	f002 f84d 	bl	80039b4 <HAL_GPIO_TogglePin>
#endif
		}
		if((sysTime[SYSTIME_TEN_MS] - startTime) >= 209)
 800191a:	4b26      	ldr	r3, [pc, #152]	; (80019b4 <UI_Handler+0x26c>)
 800191c:	681a      	ldr	r2, [r3, #0]
 800191e:	4b26      	ldr	r3, [pc, #152]	; (80019b8 <UI_Handler+0x270>)
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	1ad3      	subs	r3, r2, r3
 8001924:	2bd0      	cmp	r3, #208	; 0xd0
 8001926:	d93a      	bls.n	800199e <UI_Handler+0x256>
			UI_State = OFF;
 8001928:	4b21      	ldr	r3, [pc, #132]	; (80019b0 <UI_Handler+0x268>)
 800192a:	2200      	movs	r2, #0
 800192c:	701a      	strb	r2, [r3, #0]
		break;
 800192e:	e036      	b.n	800199e <UI_Handler+0x256>

	case DONE:
		if(!((sysTime[SYSTIME_TEN_MS] - startTime) % 50))
 8001930:	4b20      	ldr	r3, [pc, #128]	; (80019b4 <UI_Handler+0x26c>)
 8001932:	681a      	ldr	r2, [r3, #0]
 8001934:	4b20      	ldr	r3, [pc, #128]	; (80019b8 <UI_Handler+0x270>)
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	1ad3      	subs	r3, r2, r3
 800193a:	2132      	movs	r1, #50	; 0x32
 800193c:	0018      	movs	r0, r3
 800193e:	f7fe fc7b 	bl	8000238 <__aeabi_uidivmod>
 8001942:	1e0b      	subs	r3, r1, #0
 8001944:	d10d      	bne.n	8001962 <UI_Handler+0x21a>
		{
#ifndef __SILENT__
			BUZZER_Toggle;
 8001946:	2380      	movs	r3, #128	; 0x80
 8001948:	015b      	lsls	r3, r3, #5
 800194a:	4a1d      	ldr	r2, [pc, #116]	; (80019c0 <UI_Handler+0x278>)
 800194c:	0019      	movs	r1, r3
 800194e:	0010      	movs	r0, r2
 8001950:	f002 f830 	bl	80039b4 <HAL_GPIO_TogglePin>
#endif
			BACKLIGHT_GREEN_Toggle;
 8001954:	2380      	movs	r3, #128	; 0x80
 8001956:	005b      	lsls	r3, r3, #1
 8001958:	4a1a      	ldr	r2, [pc, #104]	; (80019c4 <UI_Handler+0x27c>)
 800195a:	0019      	movs	r1, r3
 800195c:	0010      	movs	r0, r2
 800195e:	f002 f829 	bl	80039b4 <HAL_GPIO_TogglePin>
		}
		if((sysTime[SYSTIME_TEN_MS] - startTime) >= 299)
 8001962:	4b14      	ldr	r3, [pc, #80]	; (80019b4 <UI_Handler+0x26c>)
 8001964:	681a      	ldr	r2, [r3, #0]
 8001966:	4b14      	ldr	r3, [pc, #80]	; (80019b8 <UI_Handler+0x270>)
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	1ad2      	subs	r2, r2, r3
 800196c:	2395      	movs	r3, #149	; 0x95
 800196e:	005b      	lsls	r3, r3, #1
 8001970:	429a      	cmp	r2, r3
 8001972:	d916      	bls.n	80019a2 <UI_Handler+0x25a>
			UI_State = OFF;
 8001974:	4b0e      	ldr	r3, [pc, #56]	; (80019b0 <UI_Handler+0x268>)
 8001976:	2200      	movs	r2, #0
 8001978:	701a      	strb	r2, [r3, #0]
		break;
 800197a:	e012      	b.n	80019a2 <UI_Handler+0x25a>

	default:	//Ošetřuje i UI_State == OFF
		BUZZER_OFF;
 800197c:	2380      	movs	r3, #128	; 0x80
 800197e:	015b      	lsls	r3, r3, #5
 8001980:	480f      	ldr	r0, [pc, #60]	; (80019c0 <UI_Handler+0x278>)
 8001982:	2200      	movs	r2, #0
 8001984:	0019      	movs	r1, r3
 8001986:	f001 fff8 	bl	800397a <HAL_GPIO_WritePin>
#ifndef __DEBUG_BUTT__
		setColour(BACKLIGHT_OFF);
 800198a:	2003      	movs	r0, #3
 800198c:	f7ff f966 	bl	8000c5c <setColour>
#endif
		break;
 8001990:	e008      	b.n	80019a4 <UI_Handler+0x25c>
		break;
 8001992:	46c0      	nop			; (mov r8, r8)
 8001994:	e006      	b.n	80019a4 <UI_Handler+0x25c>
		break;
 8001996:	46c0      	nop			; (mov r8, r8)
 8001998:	e004      	b.n	80019a4 <UI_Handler+0x25c>
		break;
 800199a:	46c0      	nop			; (mov r8, r8)
 800199c:	e002      	b.n	80019a4 <UI_Handler+0x25c>
		break;
 800199e:	46c0      	nop			; (mov r8, r8)
 80019a0:	e000      	b.n	80019a4 <UI_Handler+0x25c>
		break;
 80019a2:	46c0      	nop			; (mov r8, r8)

	}
}
 80019a4:	46c0      	nop			; (mov r8, r8)
 80019a6:	46bd      	mov	sp, r7
 80019a8:	bd80      	pop	{r7, pc}
 80019aa:	46c0      	nop			; (mov r8, r8)
 80019ac:	20000630 	.word	0x20000630
 80019b0:	2000024e 	.word	0x2000024e
 80019b4:	2000023c 	.word	0x2000023c
 80019b8:	20000250 	.word	0x20000250
 80019bc:	0800d5e0 	.word	0x0800d5e0
 80019c0:	48000800 	.word	0x48000800
 80019c4:	48000400 	.word	0x48000400

080019c8 <measHandler>:

//_____Osluha AD převodníků_____//
void measHandler(void)
{
 80019c8:	b5b0      	push	{r4, r5, r7, lr}
 80019ca:	af00      	add	r7, sp, #0
	static ADC_State_Type ADC_State;

	flags.meas.measComplete = 0;
 80019cc:	4b53      	ldr	r3, [pc, #332]	; (8001b1c <measHandler+0x154>)
 80019ce:	7d1a      	ldrb	r2, [r3, #20]
 80019d0:	2102      	movs	r1, #2
 80019d2:	438a      	bics	r2, r1
 80019d4:	751a      	strb	r2, [r3, #20]
	flags.meas.measConflict = 0;
 80019d6:	4b51      	ldr	r3, [pc, #324]	; (8001b1c <measHandler+0x154>)
 80019d8:	7d1a      	ldrb	r2, [r3, #20]
 80019da:	2110      	movs	r1, #16
 80019dc:	438a      	bics	r2, r1
 80019de:	751a      	strb	r2, [r3, #20]

	if(flags.meas.measRequest)
 80019e0:	4b4e      	ldr	r3, [pc, #312]	; (8001b1c <measHandler+0x154>)
 80019e2:	695b      	ldr	r3, [r3, #20]
 80019e4:	07db      	lsls	r3, r3, #31
 80019e6:	0fdb      	lsrs	r3, r3, #31
 80019e8:	b2db      	uxtb	r3, r3
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d049      	beq.n	8001a82 <measHandler+0xba>
	{
		if(!flags.meas.measRunning)
 80019ee:	4b4b      	ldr	r3, [pc, #300]	; (8001b1c <measHandler+0x154>)
 80019f0:	695b      	ldr	r3, [r3, #20]
 80019f2:	071b      	lsls	r3, r3, #28
 80019f4:	0fdb      	lsrs	r3, r3, #31
 80019f6:	b2db      	uxtb	r3, r3
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d138      	bne.n	8001a6e <measHandler+0xa6>
		{
			flags.meas.measRunning = 1;
 80019fc:	4b47      	ldr	r3, [pc, #284]	; (8001b1c <measHandler+0x154>)
 80019fe:	7d1a      	ldrb	r2, [r3, #20]
 8001a00:	2108      	movs	r1, #8
 8001a02:	430a      	orrs	r2, r1
 8001a04:	751a      	strb	r2, [r3, #20]
			if(currentPhase() == BATTERY_TEST || currentPhase() == BATTERY_TEST_DONE)	//probíhá battery test
 8001a06:	f000 fc81 	bl	800230c <currentPhase>
 8001a0a:	0003      	movs	r3, r0
 8001a0c:	2b05      	cmp	r3, #5
 8001a0e:	d004      	beq.n	8001a1a <measHandler+0x52>
 8001a10:	f000 fc7c 	bl	800230c <currentPhase>
 8001a14:	0003      	movs	r3, r0
 8001a16:	2b06      	cmp	r3, #6
 8001a18:	d114      	bne.n	8001a44 <measHandler+0x7c>
			{
				flags.meas.onlyBattery = 1;
 8001a1a:	4b40      	ldr	r3, [pc, #256]	; (8001b1c <measHandler+0x154>)
 8001a1c:	7d1a      	ldrb	r2, [r3, #20]
 8001a1e:	2120      	movs	r1, #32
 8001a20:	430a      	orrs	r2, r1
 8001a22:	751a      	strb	r2, [r3, #20]
				ADC_State = U_BAT;
 8001a24:	4b3e      	ldr	r3, [pc, #248]	; (8001b20 <measHandler+0x158>)
 8001a26:	220d      	movs	r2, #13
 8001a28:	701a      	strb	r2, [r3, #0]
				ADC1->CHSELR = ADC_ChannelConf[ADC_State-1];
 8001a2a:	4b3d      	ldr	r3, [pc, #244]	; (8001b20 <measHandler+0x158>)
 8001a2c:	781b      	ldrb	r3, [r3, #0]
 8001a2e:	1e59      	subs	r1, r3, #1
 8001a30:	4b3c      	ldr	r3, [pc, #240]	; (8001b24 <measHandler+0x15c>)
 8001a32:	4a3d      	ldr	r2, [pc, #244]	; (8001b28 <measHandler+0x160>)
 8001a34:	0089      	lsls	r1, r1, #2
 8001a36:	588a      	ldr	r2, [r1, r2]
 8001a38:	629a      	str	r2, [r3, #40]	; 0x28
				HAL_ADC_Start_IT(&hadc);
 8001a3a:	4b3c      	ldr	r3, [pc, #240]	; (8001b2c <measHandler+0x164>)
 8001a3c:	0018      	movs	r0, r3
 8001a3e:	f001 f8cb 	bl	8002bd8 <HAL_ADC_Start_IT>
 8001a42:	e019      	b.n	8001a78 <measHandler+0xb0>
			}
			else
			{
				flags.meas.onlyBattery = 0;
 8001a44:	4b35      	ldr	r3, [pc, #212]	; (8001b1c <measHandler+0x154>)
 8001a46:	7d1a      	ldrb	r2, [r3, #20]
 8001a48:	2120      	movs	r1, #32
 8001a4a:	438a      	bics	r2, r1
 8001a4c:	751a      	strb	r2, [r3, #20]
				ADC_State = U15V;
 8001a4e:	4b34      	ldr	r3, [pc, #208]	; (8001b20 <measHandler+0x158>)
 8001a50:	2201      	movs	r2, #1
 8001a52:	701a      	strb	r2, [r3, #0]
				ADC1->CHSELR = ADC_ChannelConf[ADC_State-1];
 8001a54:	4b32      	ldr	r3, [pc, #200]	; (8001b20 <measHandler+0x158>)
 8001a56:	781b      	ldrb	r3, [r3, #0]
 8001a58:	1e59      	subs	r1, r3, #1
 8001a5a:	4b32      	ldr	r3, [pc, #200]	; (8001b24 <measHandler+0x15c>)
 8001a5c:	4a32      	ldr	r2, [pc, #200]	; (8001b28 <measHandler+0x160>)
 8001a5e:	0089      	lsls	r1, r1, #2
 8001a60:	588a      	ldr	r2, [r1, r2]
 8001a62:	629a      	str	r2, [r3, #40]	; 0x28
				HAL_ADC_Start_IT(&hadc);
 8001a64:	4b31      	ldr	r3, [pc, #196]	; (8001b2c <measHandler+0x164>)
 8001a66:	0018      	movs	r0, r3
 8001a68:	f001 f8b6 	bl	8002bd8 <HAL_ADC_Start_IT>
 8001a6c:	e004      	b.n	8001a78 <measHandler+0xb0>
			}
		}
		else
		{
			flags.meas.measConflict = 1;
 8001a6e:	4b2b      	ldr	r3, [pc, #172]	; (8001b1c <measHandler+0x154>)
 8001a70:	7d1a      	ldrb	r2, [r3, #20]
 8001a72:	2110      	movs	r1, #16
 8001a74:	430a      	orrs	r2, r1
 8001a76:	751a      	strb	r2, [r3, #20]
		}
		flags.meas.measRequest = 0;
 8001a78:	4b28      	ldr	r3, [pc, #160]	; (8001b1c <measHandler+0x154>)
 8001a7a:	7d1a      	ldrb	r2, [r3, #20]
 8001a7c:	2101      	movs	r1, #1
 8001a7e:	438a      	bics	r2, r1
 8001a80:	751a      	strb	r2, [r3, #20]
	}

	if(ADC_State != ADC_WAITING)
 8001a82:	4b27      	ldr	r3, [pc, #156]	; (8001b20 <measHandler+0x158>)
 8001a84:	781b      	ldrb	r3, [r3, #0]
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d045      	beq.n	8001b16 <measHandler+0x14e>
	{
		if(flags.meas.measDataReady)
 8001a8a:	4b24      	ldr	r3, [pc, #144]	; (8001b1c <measHandler+0x154>)
 8001a8c:	695b      	ldr	r3, [r3, #20]
 8001a8e:	075b      	lsls	r3, r3, #29
 8001a90:	0fdb      	lsrs	r3, r3, #31
 8001a92:	b2db      	uxtb	r3, r3
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d03e      	beq.n	8001b16 <measHandler+0x14e>
		{
			flags.meas.measDataReady = 0;
 8001a98:	4b20      	ldr	r3, [pc, #128]	; (8001b1c <measHandler+0x154>)
 8001a9a:	7d1a      	ldrb	r2, [r3, #20]
 8001a9c:	2104      	movs	r1, #4
 8001a9e:	438a      	bics	r2, r1
 8001aa0:	751a      	strb	r2, [r3, #20]

			if(ADC_State == U_BAT)	//U_BAT je vždy měřeno jako poslední
 8001aa2:	4b1f      	ldr	r3, [pc, #124]	; (8001b20 <measHandler+0x158>)
 8001aa4:	781b      	ldrb	r3, [r3, #0]
 8001aa6:	2b0d      	cmp	r3, #13
 8001aa8:	d118      	bne.n	8001adc <measHandler+0x114>
			{
				ADC_Results[ADC_State-1] = HAL_ADC_GetValue(&hadc);
 8001aaa:	4b1d      	ldr	r3, [pc, #116]	; (8001b20 <measHandler+0x158>)
 8001aac:	781b      	ldrb	r3, [r3, #0]
 8001aae:	1e5c      	subs	r4, r3, #1
 8001ab0:	4b1e      	ldr	r3, [pc, #120]	; (8001b2c <measHandler+0x164>)
 8001ab2:	0018      	movs	r0, r3
 8001ab4:	f001 f94c 	bl	8002d50 <HAL_ADC_GetValue>
 8001ab8:	0001      	movs	r1, r0
 8001aba:	4b1d      	ldr	r3, [pc, #116]	; (8001b30 <measHandler+0x168>)
 8001abc:	00a2      	lsls	r2, r4, #2
 8001abe:	50d1      	str	r1, [r2, r3]
				flags.meas.measComplete = 1;
 8001ac0:	4b16      	ldr	r3, [pc, #88]	; (8001b1c <measHandler+0x154>)
 8001ac2:	7d1a      	ldrb	r2, [r3, #20]
 8001ac4:	2102      	movs	r1, #2
 8001ac6:	430a      	orrs	r2, r1
 8001ac8:	751a      	strb	r2, [r3, #20]
				flags.meas.measRunning = 0;
 8001aca:	4b14      	ldr	r3, [pc, #80]	; (8001b1c <measHandler+0x154>)
 8001acc:	7d1a      	ldrb	r2, [r3, #20]
 8001ace:	2108      	movs	r1, #8
 8001ad0:	438a      	bics	r2, r1
 8001ad2:	751a      	strb	r2, [r3, #20]
				ADC_State = ADC_WAITING;
 8001ad4:	4b12      	ldr	r3, [pc, #72]	; (8001b20 <measHandler+0x158>)
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	701a      	strb	r2, [r3, #0]

				HAL_ADC_Start_IT(&hadc);
			}
		}
	}
}
 8001ada:	e01c      	b.n	8001b16 <measHandler+0x14e>
				ADC_Results[ADC_State-1] = HAL_ADC_GetValue(&hadc);
 8001adc:	4b10      	ldr	r3, [pc, #64]	; (8001b20 <measHandler+0x158>)
 8001ade:	781b      	ldrb	r3, [r3, #0]
 8001ae0:	1e5c      	subs	r4, r3, #1
 8001ae2:	4b12      	ldr	r3, [pc, #72]	; (8001b2c <measHandler+0x164>)
 8001ae4:	0018      	movs	r0, r3
 8001ae6:	f001 f933 	bl	8002d50 <HAL_ADC_GetValue>
 8001aea:	0001      	movs	r1, r0
 8001aec:	4b10      	ldr	r3, [pc, #64]	; (8001b30 <measHandler+0x168>)
 8001aee:	00a2      	lsls	r2, r4, #2
 8001af0:	50d1      	str	r1, [r2, r3]
				ADC_State += 2;
 8001af2:	4b0b      	ldr	r3, [pc, #44]	; (8001b20 <measHandler+0x158>)
 8001af4:	781b      	ldrb	r3, [r3, #0]
 8001af6:	3302      	adds	r3, #2
 8001af8:	b2da      	uxtb	r2, r3
 8001afa:	4b09      	ldr	r3, [pc, #36]	; (8001b20 <measHandler+0x158>)
 8001afc:	701a      	strb	r2, [r3, #0]
				ADC1->CHSELR = ADC_ChannelConf[ADC_State-1];
 8001afe:	4b08      	ldr	r3, [pc, #32]	; (8001b20 <measHandler+0x158>)
 8001b00:	781b      	ldrb	r3, [r3, #0]
 8001b02:	1e59      	subs	r1, r3, #1
 8001b04:	4b07      	ldr	r3, [pc, #28]	; (8001b24 <measHandler+0x15c>)
 8001b06:	4a08      	ldr	r2, [pc, #32]	; (8001b28 <measHandler+0x160>)
 8001b08:	0089      	lsls	r1, r1, #2
 8001b0a:	588a      	ldr	r2, [r1, r2]
 8001b0c:	629a      	str	r2, [r3, #40]	; 0x28
				HAL_ADC_Start_IT(&hadc);
 8001b0e:	4b07      	ldr	r3, [pc, #28]	; (8001b2c <measHandler+0x164>)
 8001b10:	0018      	movs	r0, r3
 8001b12:	f001 f861 	bl	8002bd8 <HAL_ADC_Start_IT>
}
 8001b16:	46c0      	nop			; (mov r8, r8)
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	bdb0      	pop	{r4, r5, r7, pc}
 8001b1c:	20000630 	.word	0x20000630
 8001b20:	20000254 	.word	0x20000254
 8001b24:	40012400 	.word	0x40012400
 8001b28:	0800d5a0 	.word	0x0800d5a0
 8001b2c:	2000064c 	.word	0x2000064c
 8001b30:	200001fc 	.word	0x200001fc

08001b34 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001b38:	b672      	cpsid	i
}
 8001b3a:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001b3c:	e7fe      	b.n	8001b3c <Error_Handler+0x8>

08001b3e <createBuffer>:

//_____Vytvoří buffer v dynamické paměti_____//
//Návratová hodnota - ukazatel na vytvořený buffer (NULL = chyba)
//Argument - velikost bufferu
RING_BUFFER* createBuffer(int size)
{
 8001b3e:	b580      	push	{r7, lr}
 8001b40:	b084      	sub	sp, #16
 8001b42:	af00      	add	r7, sp, #0
 8001b44:	6078      	str	r0, [r7, #4]
	RING_BUFFER* buffer = (RING_BUFFER*) malloc(sizeof(RING_BUFFER));
 8001b46:	2018      	movs	r0, #24
 8001b48:	f00b f87c 	bl	800cc44 <malloc>
 8001b4c:	0003      	movs	r3, r0
 8001b4e:	60fb      	str	r3, [r7, #12]
	if(buffer == NULL)			//Nepodařilo se alokovat paměť
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d101      	bne.n	8001b5a <createBuffer+0x1c>
	{
		return NULL;
 8001b56:	2300      	movs	r3, #0
 8001b58:	e022      	b.n	8001ba0 <createBuffer+0x62>
	}
	buffer->buffer = (char*) malloc(size * sizeof(char));
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	0018      	movs	r0, r3
 8001b5e:	f00b f871 	bl	800cc44 <malloc>
 8001b62:	0003      	movs	r3, r0
 8001b64:	001a      	movs	r2, r3
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	601a      	str	r2, [r3, #0]
	if(buffer->buffer == NULL)	//Nepodařilo se alokovat paměť
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d105      	bne.n	8001b7e <createBuffer+0x40>
	{
		free(buffer);
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	0018      	movs	r0, r3
 8001b76:	f00b f86f 	bl	800cc58 <free>
		return NULL;
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	e010      	b.n	8001ba0 <createBuffer+0x62>
	}

	buffer->bufferSize = size;
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	687a      	ldr	r2, [r7, #4]
 8001b82:	605a      	str	r2, [r3, #4]
	buffer->filled = 0;
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	2200      	movs	r2, #0
 8001b88:	609a      	str	r2, [r3, #8]
	buffer->first = 0;
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	60da      	str	r2, [r3, #12]
	buffer->last = size-1;
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	1e5a      	subs	r2, r3, #1
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	611a      	str	r2, [r3, #16]
	buffer->status = BUFFER_EMPTY;
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	2201      	movs	r2, #1
 8001b9c:	751a      	strb	r2, [r3, #20]

	return buffer;
 8001b9e:	68fb      	ldr	r3, [r7, #12]
}
 8001ba0:	0018      	movs	r0, r3
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	b004      	add	sp, #16
 8001ba6:	bd80      	pop	{r7, pc}

08001ba8 <push>:
	return buffer->status;
}

//_____Uloží znak do bufferu_____//
BUFFER_STATE push(RING_BUFFER* buffer, char character)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	b082      	sub	sp, #8
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]
 8001bb0:	000a      	movs	r2, r1
 8001bb2:	1cfb      	adds	r3, r7, #3
 8001bb4:	701a      	strb	r2, [r3, #0]
	if(buffer->status == BUFFER_FULL)
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	7d1b      	ldrb	r3, [r3, #20]
 8001bba:	2b02      	cmp	r3, #2
 8001bbc:	d101      	bne.n	8001bc2 <push+0x1a>
		return BUFFER_FULL;
 8001bbe:	2302      	movs	r3, #2
 8001bc0:	e025      	b.n	8001c0e <push+0x66>

	buffer->last = (buffer->last + 1) % (buffer->bufferSize);
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	691b      	ldr	r3, [r3, #16]
 8001bc6:	1c5a      	adds	r2, r3, #1
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	685b      	ldr	r3, [r3, #4]
 8001bcc:	0019      	movs	r1, r3
 8001bce:	0010      	movs	r0, r2
 8001bd0:	f7fe fc1c 	bl	800040c <__aeabi_idivmod>
 8001bd4:	000b      	movs	r3, r1
 8001bd6:	001a      	movs	r2, r3
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	611a      	str	r2, [r3, #16]
	buffer->filled++;
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	689b      	ldr	r3, [r3, #8]
 8001be0:	1c5a      	adds	r2, r3, #1
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	609a      	str	r2, [r3, #8]
	buffer->buffer[buffer->last] = character;
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681a      	ldr	r2, [r3, #0]
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	691b      	ldr	r3, [r3, #16]
 8001bee:	18d3      	adds	r3, r2, r3
 8001bf0:	1cfa      	adds	r2, r7, #3
 8001bf2:	7812      	ldrb	r2, [r2, #0]
 8001bf4:	701a      	strb	r2, [r3, #0]
	buffer->status = (buffer->filled >= buffer->bufferSize)? BUFFER_FULL : BUFFER_OK;
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	689a      	ldr	r2, [r3, #8]
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	685b      	ldr	r3, [r3, #4]
 8001bfe:	429a      	cmp	r2, r3
 8001c00:	db01      	blt.n	8001c06 <push+0x5e>
 8001c02:	2202      	movs	r2, #2
 8001c04:	e000      	b.n	8001c08 <push+0x60>
 8001c06:	2200      	movs	r2, #0
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	751a      	strb	r2, [r3, #20]

	return BUFFER_OK;
 8001c0c:	2300      	movs	r3, #0
}
 8001c0e:	0018      	movs	r0, r3
 8001c10:	46bd      	mov	sp, r7
 8001c12:	b002      	add	sp, #8
 8001c14:	bd80      	pop	{r7, pc}

08001c16 <pushStr>:

//_____Uloží řetězec do bufferu_____//
BUFFER_STATE pushStr(RING_BUFFER* buffer, char* str, int len)
{
 8001c16:	b580      	push	{r7, lr}
 8001c18:	b086      	sub	sp, #24
 8001c1a:	af00      	add	r7, sp, #0
 8001c1c:	60f8      	str	r0, [r7, #12]
 8001c1e:	60b9      	str	r1, [r7, #8]
 8001c20:	607a      	str	r2, [r7, #4]
	if(buffer->bufferSize < (buffer->filled + len))
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	685a      	ldr	r2, [r3, #4]
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	6899      	ldr	r1, [r3, #8]
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	18cb      	adds	r3, r1, r3
 8001c2e:	429a      	cmp	r2, r3
 8001c30:	da01      	bge.n	8001c36 <pushStr+0x20>
		return BUFFER_FULL;
 8001c32:	2302      	movs	r3, #2
 8001c34:	e013      	b.n	8001c5e <pushStr+0x48>

	for(int i = 0; i < len; i++)
 8001c36:	2300      	movs	r3, #0
 8001c38:	617b      	str	r3, [r7, #20]
 8001c3a:	e00b      	b.n	8001c54 <pushStr+0x3e>
	{
		push(buffer, str[i]);
 8001c3c:	697b      	ldr	r3, [r7, #20]
 8001c3e:	68ba      	ldr	r2, [r7, #8]
 8001c40:	18d3      	adds	r3, r2, r3
 8001c42:	781a      	ldrb	r2, [r3, #0]
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	0011      	movs	r1, r2
 8001c48:	0018      	movs	r0, r3
 8001c4a:	f7ff ffad 	bl	8001ba8 <push>
	for(int i = 0; i < len; i++)
 8001c4e:	697b      	ldr	r3, [r7, #20]
 8001c50:	3301      	adds	r3, #1
 8001c52:	617b      	str	r3, [r7, #20]
 8001c54:	697a      	ldr	r2, [r7, #20]
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	429a      	cmp	r2, r3
 8001c5a:	dbef      	blt.n	8001c3c <pushStr+0x26>
	}

	return BUFFER_OK;
 8001c5c:	2300      	movs	r3, #0
}
 8001c5e:	0018      	movs	r0, r3
 8001c60:	46bd      	mov	sp, r7
 8001c62:	b006      	add	sp, #24
 8001c64:	bd80      	pop	{r7, pc}

08001c66 <pop>:

//_____Přečte a odstraní poslední znak z bufferu_____//
//Znak bude uložen na adresu v argumentu
BUFFER_STATE pop(RING_BUFFER* buffer, char* character)
{
 8001c66:	b580      	push	{r7, lr}
 8001c68:	b082      	sub	sp, #8
 8001c6a:	af00      	add	r7, sp, #0
 8001c6c:	6078      	str	r0, [r7, #4]
 8001c6e:	6039      	str	r1, [r7, #0]
	if(buffer->status == BUFFER_EMPTY)
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	7d1b      	ldrb	r3, [r3, #20]
 8001c74:	2b01      	cmp	r3, #1
 8001c76:	d101      	bne.n	8001c7c <pop+0x16>
		return BUFFER_EMPTY;
 8001c78:	2301      	movs	r3, #1
 8001c7a:	e023      	b.n	8001cc4 <pop+0x5e>

	*character = buffer->buffer[buffer->first];
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681a      	ldr	r2, [r3, #0]
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	68db      	ldr	r3, [r3, #12]
 8001c84:	18d3      	adds	r3, r2, r3
 8001c86:	781a      	ldrb	r2, [r3, #0]
 8001c88:	683b      	ldr	r3, [r7, #0]
 8001c8a:	701a      	strb	r2, [r3, #0]
	buffer->first = (buffer->first + 1) % (buffer->bufferSize);
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	68db      	ldr	r3, [r3, #12]
 8001c90:	1c5a      	adds	r2, r3, #1
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	685b      	ldr	r3, [r3, #4]
 8001c96:	0019      	movs	r1, r3
 8001c98:	0010      	movs	r0, r2
 8001c9a:	f7fe fbb7 	bl	800040c <__aeabi_idivmod>
 8001c9e:	000b      	movs	r3, r1
 8001ca0:	001a      	movs	r2, r3
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	60da      	str	r2, [r3, #12]
	buffer->filled--;
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	689b      	ldr	r3, [r3, #8]
 8001caa:	1e5a      	subs	r2, r3, #1
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	609a      	str	r2, [r3, #8]
	buffer->status = (buffer->filled <= 0)? BUFFER_EMPTY : BUFFER_OK;
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	689b      	ldr	r3, [r3, #8]
 8001cb4:	1e5a      	subs	r2, r3, #1
 8001cb6:	4313      	orrs	r3, r2
 8001cb8:	0fdb      	lsrs	r3, r3, #31
 8001cba:	b2db      	uxtb	r3, r3
 8001cbc:	001a      	movs	r2, r3
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	751a      	strb	r2, [r3, #20]

	return BUFFER_OK;
 8001cc2:	2300      	movs	r3, #0
}
 8001cc4:	0018      	movs	r0, r3
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	b002      	add	sp, #8
 8001cca:	bd80      	pop	{r7, pc}

08001ccc <at>:

//_____Přečte a zachová hodnotu na dané pozici od prvního uloženého znaku_____//
BUFFER_STATE at(RING_BUFFER* buffer, int index, char* character)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	b086      	sub	sp, #24
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	60f8      	str	r0, [r7, #12]
 8001cd4:	60b9      	str	r1, [r7, #8]
 8001cd6:	607a      	str	r2, [r7, #4]
	if(buffer->status == BUFFER_EMPTY)
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	7d1b      	ldrb	r3, [r3, #20]
 8001cdc:	2b01      	cmp	r3, #1
 8001cde:	d101      	bne.n	8001ce4 <at+0x18>
		return BUFFER_EMPTY;
 8001ce0:	2301      	movs	r3, #1
 8001ce2:	e01a      	b.n	8001d1a <at+0x4e>

	 if((index + 1) > buffer->filled)
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	689b      	ldr	r3, [r3, #8]
 8001ce8:	68ba      	ldr	r2, [r7, #8]
 8001cea:	429a      	cmp	r2, r3
 8001cec:	db01      	blt.n	8001cf2 <at+0x26>
		 return BUFFER_ERR;
 8001cee:	2303      	movs	r3, #3
 8001cf0:	e013      	b.n	8001d1a <at+0x4e>

	 int tmp = (buffer->first + index) % (buffer->bufferSize);
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	68da      	ldr	r2, [r3, #12]
 8001cf6:	68bb      	ldr	r3, [r7, #8]
 8001cf8:	18d2      	adds	r2, r2, r3
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	685b      	ldr	r3, [r3, #4]
 8001cfe:	0019      	movs	r1, r3
 8001d00:	0010      	movs	r0, r2
 8001d02:	f7fe fb83 	bl	800040c <__aeabi_idivmod>
 8001d06:	000b      	movs	r3, r1
 8001d08:	617b      	str	r3, [r7, #20]
	 *character = buffer->buffer[tmp];
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	681a      	ldr	r2, [r3, #0]
 8001d0e:	697b      	ldr	r3, [r7, #20]
 8001d10:	18d3      	adds	r3, r2, r3
 8001d12:	781a      	ldrb	r2, [r3, #0]
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	701a      	strb	r2, [r3, #0]

	 return BUFFER_OK;
 8001d18:	2300      	movs	r3, #0
}
 8001d1a:	0018      	movs	r0, r3
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	b006      	add	sp, #24
 8001d20:	bd80      	pop	{r7, pc}
	...

08001d24 <getCount>:



//_____Zjistí počet registrů_____//
static uint8_t getCount(void)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	b084      	sub	sp, #16
 8001d28:	af02      	add	r7, sp, #8
	uint8_t question;
	uint8_t answer;
	regCount = 0;
 8001d2a:	4b1d      	ldr	r3, [pc, #116]	; (8001da0 <getCount+0x7c>)
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	701a      	strb	r2, [r3, #0]

	do
	{
		question = 42;
 8001d30:	1dfb      	adds	r3, r7, #7
 8001d32:	222a      	movs	r2, #42	; 0x2a
 8001d34:	701a      	strb	r2, [r3, #0]
		answer = 0;
 8001d36:	1dbb      	adds	r3, r7, #6
 8001d38:	2200      	movs	r2, #0
 8001d3a:	701a      	strb	r2, [r3, #0]
		if(HAL_SPI_TransmitReceive(&hspi1, &question, &answer, 1, 100) != HAL_OK)
 8001d3c:	1dba      	adds	r2, r7, #6
 8001d3e:	1df9      	adds	r1, r7, #7
 8001d40:	4818      	ldr	r0, [pc, #96]	; (8001da4 <getCount+0x80>)
 8001d42:	2364      	movs	r3, #100	; 0x64
 8001d44:	9300      	str	r3, [sp, #0]
 8001d46:	2301      	movs	r3, #1
 8001d48:	f004 fcee 	bl	8006728 <HAL_SPI_TransmitReceive>
 8001d4c:	1e03      	subs	r3, r0, #0
 8001d4e:	d001      	beq.n	8001d54 <getCount+0x30>
			return 0;
 8001d50:	2300      	movs	r3, #0
 8001d52:	e021      	b.n	8001d98 <getCount+0x74>
		regCount++;
 8001d54:	4b12      	ldr	r3, [pc, #72]	; (8001da0 <getCount+0x7c>)
 8001d56:	781b      	ldrb	r3, [r3, #0]
 8001d58:	3301      	adds	r3, #1
 8001d5a:	b2da      	uxtb	r2, r3
 8001d5c:	4b10      	ldr	r3, [pc, #64]	; (8001da0 <getCount+0x7c>)
 8001d5e:	701a      	strb	r2, [r3, #0]

		HAL_Delay(1);
 8001d60:	2001      	movs	r0, #1
 8001d62:	f000 fdd5 	bl	8002910 <HAL_Delay>

		if(regCount >= 100)	//Ošetření nepřipojených relé desek
 8001d66:	4b0e      	ldr	r3, [pc, #56]	; (8001da0 <getCount+0x7c>)
 8001d68:	781b      	ldrb	r3, [r3, #0]
 8001d6a:	2b63      	cmp	r3, #99	; 0x63
 8001d6c:	d906      	bls.n	8001d7c <getCount+0x58>
		{
			flags.conErr = 1;
 8001d6e:	4b0e      	ldr	r3, [pc, #56]	; (8001da8 <getCount+0x84>)
 8001d70:	7e1a      	ldrb	r2, [r3, #24]
 8001d72:	2104      	movs	r1, #4
 8001d74:	430a      	orrs	r2, r1
 8001d76:	761a      	strb	r2, [r3, #24]
			return 0;
 8001d78:	2300      	movs	r3, #0
 8001d7a:	e00d      	b.n	8001d98 <getCount+0x74>
		}
	}
	while(answer != question);
 8001d7c:	1dbb      	adds	r3, r7, #6
 8001d7e:	781a      	ldrb	r2, [r3, #0]
 8001d80:	1dfb      	adds	r3, r7, #7
 8001d82:	781b      	ldrb	r3, [r3, #0]
 8001d84:	429a      	cmp	r2, r3
 8001d86:	d1d3      	bne.n	8001d30 <getCount+0xc>

	regCount--;
 8001d88:	4b05      	ldr	r3, [pc, #20]	; (8001da0 <getCount+0x7c>)
 8001d8a:	781b      	ldrb	r3, [r3, #0]
 8001d8c:	3b01      	subs	r3, #1
 8001d8e:	b2da      	uxtb	r2, r3
 8001d90:	4b03      	ldr	r3, [pc, #12]	; (8001da0 <getCount+0x7c>)
 8001d92:	701a      	strb	r2, [r3, #0]

	return regCount;
 8001d94:	4b02      	ldr	r3, [pc, #8]	; (8001da0 <getCount+0x7c>)
 8001d96:	781b      	ldrb	r3, [r3, #0]
}
 8001d98:	0018      	movs	r0, r3
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	b002      	add	sp, #8
 8001d9e:	bd80      	pop	{r7, pc}
 8001da0:	20000691 	.word	0x20000691
 8001da4:	20000584 	.word	0x20000584
 8001da8:	20000630 	.word	0x20000630

08001dac <regInit>:

//_____Inicializuje registry_____//
REG_STATE regInit(void)
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	b082      	sub	sp, #8
 8001db0:	af00      	add	r7, sp, #0
	REG_CLR_ACTIVE;
 8001db2:	2380      	movs	r3, #128	; 0x80
 8001db4:	019b      	lsls	r3, r3, #6
 8001db6:	482f      	ldr	r0, [pc, #188]	; (8001e74 <regInit+0xc8>)
 8001db8:	2200      	movs	r2, #0
 8001dba:	0019      	movs	r1, r3
 8001dbc:	f001 fddd 	bl	800397a <HAL_GPIO_WritePin>
	HAL_Delay(5);
 8001dc0:	2005      	movs	r0, #5
 8001dc2:	f000 fda5 	bl	8002910 <HAL_Delay>
	REG_CLR_INACTIVE;
 8001dc6:	2380      	movs	r3, #128	; 0x80
 8001dc8:	019b      	lsls	r3, r3, #6
 8001dca:	482a      	ldr	r0, [pc, #168]	; (8001e74 <regInit+0xc8>)
 8001dcc:	2201      	movs	r2, #1
 8001dce:	0019      	movs	r1, r3
 8001dd0:	f001 fdd3 	bl	800397a <HAL_GPIO_WritePin>

	REG_DISABLE;
 8001dd4:	2380      	movs	r3, #128	; 0x80
 8001dd6:	021b      	lsls	r3, r3, #8
 8001dd8:	4826      	ldr	r0, [pc, #152]	; (8001e74 <regInit+0xc8>)
 8001dda:	2201      	movs	r2, #1
 8001ddc:	0019      	movs	r1, r3
 8001dde:	f001 fdcc 	bl	800397a <HAL_GPIO_WritePin>

	if(getCount() == 0)
 8001de2:	f7ff ff9f 	bl	8001d24 <getCount>
 8001de6:	1e03      	subs	r3, r0, #0
 8001de8:	d101      	bne.n	8001dee <regInit+0x42>
	{
		return REG_CON_ERR;	//Connection error
 8001dea:	2301      	movs	r3, #1
 8001dec:	e03e      	b.n	8001e6c <regInit+0xc0>
	}

	regValues = (uint8_t*) malloc(regCount * sizeof(uint8_t));
 8001dee:	4b22      	ldr	r3, [pc, #136]	; (8001e78 <regInit+0xcc>)
 8001df0:	781b      	ldrb	r3, [r3, #0]
 8001df2:	0018      	movs	r0, r3
 8001df4:	f00a ff26 	bl	800cc44 <malloc>
 8001df8:	0003      	movs	r3, r0
 8001dfa:	001a      	movs	r2, r3
 8001dfc:	4b1f      	ldr	r3, [pc, #124]	; (8001e7c <regInit+0xd0>)
 8001dfe:	601a      	str	r2, [r3, #0]
	if(regValues == NULL)
 8001e00:	4b1e      	ldr	r3, [pc, #120]	; (8001e7c <regInit+0xd0>)
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d104      	bne.n	8001e12 <regInit+0x66>
	{
		regState = REG_ERR;
 8001e08:	4b1d      	ldr	r3, [pc, #116]	; (8001e80 <regInit+0xd4>)
 8001e0a:	2202      	movs	r2, #2
 8001e0c:	701a      	strb	r2, [r3, #0]
		return REG_ERR;
 8001e0e:	2302      	movs	r3, #2
 8001e10:	e02c      	b.n	8001e6c <regInit+0xc0>
	}

	for(int i = 0; i < regCount; i++)
 8001e12:	2300      	movs	r3, #0
 8001e14:	607b      	str	r3, [r7, #4]
 8001e16:	e008      	b.n	8001e2a <regInit+0x7e>
	{
		regValues[i] = 0;
 8001e18:	4b18      	ldr	r3, [pc, #96]	; (8001e7c <regInit+0xd0>)
 8001e1a:	681a      	ldr	r2, [r3, #0]
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	18d3      	adds	r3, r2, r3
 8001e20:	2200      	movs	r2, #0
 8001e22:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < regCount; i++)
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	3301      	adds	r3, #1
 8001e28:	607b      	str	r3, [r7, #4]
 8001e2a:	4b13      	ldr	r3, [pc, #76]	; (8001e78 <regInit+0xcc>)
 8001e2c:	781b      	ldrb	r3, [r3, #0]
 8001e2e:	001a      	movs	r2, r3
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	4293      	cmp	r3, r2
 8001e34:	dbf0      	blt.n	8001e18 <regInit+0x6c>
	}

	sendData();
 8001e36:	f000 f827 	bl	8001e88 <sendData>

	REG_ENABLE;
 8001e3a:	2380      	movs	r3, #128	; 0x80
 8001e3c:	021b      	lsls	r3, r3, #8
 8001e3e:	480d      	ldr	r0, [pc, #52]	; (8001e74 <regInit+0xc8>)
 8001e40:	2200      	movs	r2, #0
 8001e42:	0019      	movs	r1, r3
 8001e44:	f001 fd99 	bl	800397a <HAL_GPIO_WritePin>

	regState = (HAL_SPI_Transmit(&hspi1, &regValues[0], regCount, 100) == HAL_OK)? REG_OK : REG_ERR;
 8001e48:	4b0c      	ldr	r3, [pc, #48]	; (8001e7c <regInit+0xd0>)
 8001e4a:	6819      	ldr	r1, [r3, #0]
 8001e4c:	4b0a      	ldr	r3, [pc, #40]	; (8001e78 <regInit+0xcc>)
 8001e4e:	781b      	ldrb	r3, [r3, #0]
 8001e50:	b29a      	uxth	r2, r3
 8001e52:	480c      	ldr	r0, [pc, #48]	; (8001e84 <regInit+0xd8>)
 8001e54:	2364      	movs	r3, #100	; 0x64
 8001e56:	f004 fb0f 	bl	8006478 <HAL_SPI_Transmit>
 8001e5a:	1e03      	subs	r3, r0, #0
 8001e5c:	d101      	bne.n	8001e62 <regInit+0xb6>
 8001e5e:	2200      	movs	r2, #0
 8001e60:	e000      	b.n	8001e64 <regInit+0xb8>
 8001e62:	2202      	movs	r2, #2
 8001e64:	4b06      	ldr	r3, [pc, #24]	; (8001e80 <regInit+0xd4>)
 8001e66:	701a      	strb	r2, [r3, #0]
	return regState;
 8001e68:	4b05      	ldr	r3, [pc, #20]	; (8001e80 <regInit+0xd4>)
 8001e6a:	781b      	ldrb	r3, [r3, #0]
}
 8001e6c:	0018      	movs	r0, r3
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	b002      	add	sp, #8
 8001e72:	bd80      	pop	{r7, pc}
 8001e74:	48000400 	.word	0x48000400
 8001e78:	20000691 	.word	0x20000691
 8001e7c:	2000068c 	.word	0x2000068c
 8001e80:	20000690 	.word	0x20000690
 8001e84:	20000584 	.word	0x20000584

08001e88 <sendData>:

//_____Pošle data z regValues do registrů_____//
REG_STATE sendData(void)
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	af00      	add	r7, sp, #0
	if(HAL_SPI_Transmit(&hspi1, &regValues[0], regCount, 100) == HAL_OK)
 8001e8c:	4b13      	ldr	r3, [pc, #76]	; (8001edc <sendData+0x54>)
 8001e8e:	6819      	ldr	r1, [r3, #0]
 8001e90:	4b13      	ldr	r3, [pc, #76]	; (8001ee0 <sendData+0x58>)
 8001e92:	781b      	ldrb	r3, [r3, #0]
 8001e94:	b29a      	uxth	r2, r3
 8001e96:	4813      	ldr	r0, [pc, #76]	; (8001ee4 <sendData+0x5c>)
 8001e98:	2364      	movs	r3, #100	; 0x64
 8001e9a:	f004 faed 	bl	8006478 <HAL_SPI_Transmit>
 8001e9e:	1e03      	subs	r3, r0, #0
 8001ea0:	d114      	bne.n	8001ecc <sendData+0x44>
	{
		//vytvoř pulz na RCLK¨
		REG_RCLK_HIGH;
 8001ea2:	2380      	movs	r3, #128	; 0x80
 8001ea4:	01db      	lsls	r3, r3, #7
 8001ea6:	4810      	ldr	r0, [pc, #64]	; (8001ee8 <sendData+0x60>)
 8001ea8:	2201      	movs	r2, #1
 8001eaa:	0019      	movs	r1, r3
 8001eac:	f001 fd65 	bl	800397a <HAL_GPIO_WritePin>
		HAL_Delay(1);
 8001eb0:	2001      	movs	r0, #1
 8001eb2:	f000 fd2d 	bl	8002910 <HAL_Delay>
		REG_RCLK_LOW;
 8001eb6:	2380      	movs	r3, #128	; 0x80
 8001eb8:	01db      	lsls	r3, r3, #7
 8001eba:	480b      	ldr	r0, [pc, #44]	; (8001ee8 <sendData+0x60>)
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	0019      	movs	r1, r3
 8001ec0:	f001 fd5b 	bl	800397a <HAL_GPIO_WritePin>

		regState = REG_OK;
 8001ec4:	4b09      	ldr	r3, [pc, #36]	; (8001eec <sendData+0x64>)
 8001ec6:	2200      	movs	r2, #0
 8001ec8:	701a      	strb	r2, [r3, #0]
 8001eca:	e002      	b.n	8001ed2 <sendData+0x4a>
	}
	else
	{
		regState = REG_ERR;
 8001ecc:	4b07      	ldr	r3, [pc, #28]	; (8001eec <sendData+0x64>)
 8001ece:	2202      	movs	r2, #2
 8001ed0:	701a      	strb	r2, [r3, #0]
	}

	return regState;
 8001ed2:	4b06      	ldr	r3, [pc, #24]	; (8001eec <sendData+0x64>)
 8001ed4:	781b      	ldrb	r3, [r3, #0]
}
 8001ed6:	0018      	movs	r0, r3
 8001ed8:	46bd      	mov	sp, r7
 8001eda:	bd80      	pop	{r7, pc}
 8001edc:	2000068c 	.word	0x2000068c
 8001ee0:	20000691 	.word	0x20000691
 8001ee4:	20000584 	.word	0x20000584
 8001ee8:	48000400 	.word	0x48000400
 8001eec:	20000690 	.word	0x20000690

08001ef0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b082      	sub	sp, #8
 8001ef4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ef6:	4b0f      	ldr	r3, [pc, #60]	; (8001f34 <HAL_MspInit+0x44>)
 8001ef8:	699a      	ldr	r2, [r3, #24]
 8001efa:	4b0e      	ldr	r3, [pc, #56]	; (8001f34 <HAL_MspInit+0x44>)
 8001efc:	2101      	movs	r1, #1
 8001efe:	430a      	orrs	r2, r1
 8001f00:	619a      	str	r2, [r3, #24]
 8001f02:	4b0c      	ldr	r3, [pc, #48]	; (8001f34 <HAL_MspInit+0x44>)
 8001f04:	699b      	ldr	r3, [r3, #24]
 8001f06:	2201      	movs	r2, #1
 8001f08:	4013      	ands	r3, r2
 8001f0a:	607b      	str	r3, [r7, #4]
 8001f0c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f0e:	4b09      	ldr	r3, [pc, #36]	; (8001f34 <HAL_MspInit+0x44>)
 8001f10:	69da      	ldr	r2, [r3, #28]
 8001f12:	4b08      	ldr	r3, [pc, #32]	; (8001f34 <HAL_MspInit+0x44>)
 8001f14:	2180      	movs	r1, #128	; 0x80
 8001f16:	0549      	lsls	r1, r1, #21
 8001f18:	430a      	orrs	r2, r1
 8001f1a:	61da      	str	r2, [r3, #28]
 8001f1c:	4b05      	ldr	r3, [pc, #20]	; (8001f34 <HAL_MspInit+0x44>)
 8001f1e:	69da      	ldr	r2, [r3, #28]
 8001f20:	2380      	movs	r3, #128	; 0x80
 8001f22:	055b      	lsls	r3, r3, #21
 8001f24:	4013      	ands	r3, r2
 8001f26:	603b      	str	r3, [r7, #0]
 8001f28:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001f2a:	46c0      	nop			; (mov r8, r8)
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	b002      	add	sp, #8
 8001f30:	bd80      	pop	{r7, pc}
 8001f32:	46c0      	nop			; (mov r8, r8)
 8001f34:	40021000 	.word	0x40021000

08001f38 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001f38:	b590      	push	{r4, r7, lr}
 8001f3a:	b08d      	sub	sp, #52	; 0x34
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f40:	241c      	movs	r4, #28
 8001f42:	193b      	adds	r3, r7, r4
 8001f44:	0018      	movs	r0, r3
 8001f46:	2314      	movs	r3, #20
 8001f48:	001a      	movs	r2, r3
 8001f4a:	2100      	movs	r1, #0
 8001f4c:	f00a fe97 	bl	800cc7e <memset>
  if(hadc->Instance==ADC1)
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	4a3a      	ldr	r2, [pc, #232]	; (8002040 <HAL_ADC_MspInit+0x108>)
 8001f56:	4293      	cmp	r3, r2
 8001f58:	d16d      	bne.n	8002036 <HAL_ADC_MspInit+0xfe>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001f5a:	4b3a      	ldr	r3, [pc, #232]	; (8002044 <HAL_ADC_MspInit+0x10c>)
 8001f5c:	699a      	ldr	r2, [r3, #24]
 8001f5e:	4b39      	ldr	r3, [pc, #228]	; (8002044 <HAL_ADC_MspInit+0x10c>)
 8001f60:	2180      	movs	r1, #128	; 0x80
 8001f62:	0089      	lsls	r1, r1, #2
 8001f64:	430a      	orrs	r2, r1
 8001f66:	619a      	str	r2, [r3, #24]
 8001f68:	4b36      	ldr	r3, [pc, #216]	; (8002044 <HAL_ADC_MspInit+0x10c>)
 8001f6a:	699a      	ldr	r2, [r3, #24]
 8001f6c:	2380      	movs	r3, #128	; 0x80
 8001f6e:	009b      	lsls	r3, r3, #2
 8001f70:	4013      	ands	r3, r2
 8001f72:	61bb      	str	r3, [r7, #24]
 8001f74:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f76:	4b33      	ldr	r3, [pc, #204]	; (8002044 <HAL_ADC_MspInit+0x10c>)
 8001f78:	695a      	ldr	r2, [r3, #20]
 8001f7a:	4b32      	ldr	r3, [pc, #200]	; (8002044 <HAL_ADC_MspInit+0x10c>)
 8001f7c:	2180      	movs	r1, #128	; 0x80
 8001f7e:	0309      	lsls	r1, r1, #12
 8001f80:	430a      	orrs	r2, r1
 8001f82:	615a      	str	r2, [r3, #20]
 8001f84:	4b2f      	ldr	r3, [pc, #188]	; (8002044 <HAL_ADC_MspInit+0x10c>)
 8001f86:	695a      	ldr	r2, [r3, #20]
 8001f88:	2380      	movs	r3, #128	; 0x80
 8001f8a:	031b      	lsls	r3, r3, #12
 8001f8c:	4013      	ands	r3, r2
 8001f8e:	617b      	str	r3, [r7, #20]
 8001f90:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f92:	4b2c      	ldr	r3, [pc, #176]	; (8002044 <HAL_ADC_MspInit+0x10c>)
 8001f94:	695a      	ldr	r2, [r3, #20]
 8001f96:	4b2b      	ldr	r3, [pc, #172]	; (8002044 <HAL_ADC_MspInit+0x10c>)
 8001f98:	2180      	movs	r1, #128	; 0x80
 8001f9a:	0289      	lsls	r1, r1, #10
 8001f9c:	430a      	orrs	r2, r1
 8001f9e:	615a      	str	r2, [r3, #20]
 8001fa0:	4b28      	ldr	r3, [pc, #160]	; (8002044 <HAL_ADC_MspInit+0x10c>)
 8001fa2:	695a      	ldr	r2, [r3, #20]
 8001fa4:	2380      	movs	r3, #128	; 0x80
 8001fa6:	029b      	lsls	r3, r3, #10
 8001fa8:	4013      	ands	r3, r2
 8001faa:	613b      	str	r3, [r7, #16]
 8001fac:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001fae:	4b25      	ldr	r3, [pc, #148]	; (8002044 <HAL_ADC_MspInit+0x10c>)
 8001fb0:	695a      	ldr	r2, [r3, #20]
 8001fb2:	4b24      	ldr	r3, [pc, #144]	; (8002044 <HAL_ADC_MspInit+0x10c>)
 8001fb4:	2180      	movs	r1, #128	; 0x80
 8001fb6:	02c9      	lsls	r1, r1, #11
 8001fb8:	430a      	orrs	r2, r1
 8001fba:	615a      	str	r2, [r3, #20]
 8001fbc:	4b21      	ldr	r3, [pc, #132]	; (8002044 <HAL_ADC_MspInit+0x10c>)
 8001fbe:	695a      	ldr	r2, [r3, #20]
 8001fc0:	2380      	movs	r3, #128	; 0x80
 8001fc2:	02db      	lsls	r3, r3, #11
 8001fc4:	4013      	ands	r3, r2
 8001fc6:	60fb      	str	r3, [r7, #12]
 8001fc8:	68fb      	ldr	r3, [r7, #12]
    PC4     ------> ADC_IN14
    PC5     ------> ADC_IN15
    PB0     ------> ADC_IN8
    PB1     ------> ADC_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8001fca:	193b      	adds	r3, r7, r4
 8001fcc:	223f      	movs	r2, #63	; 0x3f
 8001fce:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_4|GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001fd0:	193b      	adds	r3, r7, r4
 8001fd2:	2203      	movs	r2, #3
 8001fd4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fd6:	193b      	adds	r3, r7, r4
 8001fd8:	2200      	movs	r2, #0
 8001fda:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001fdc:	193b      	adds	r3, r7, r4
 8001fde:	4a1a      	ldr	r2, [pc, #104]	; (8002048 <HAL_ADC_MspInit+0x110>)
 8001fe0:	0019      	movs	r1, r3
 8001fe2:	0010      	movs	r0, r2
 8001fe4:	f001 fb34 	bl	8003650 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8001fe8:	193b      	adds	r3, r7, r4
 8001fea:	22ff      	movs	r2, #255	; 0xff
 8001fec:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001fee:	193b      	adds	r3, r7, r4
 8001ff0:	2203      	movs	r2, #3
 8001ff2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ff4:	193b      	adds	r3, r7, r4
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ffa:	193a      	adds	r2, r7, r4
 8001ffc:	2390      	movs	r3, #144	; 0x90
 8001ffe:	05db      	lsls	r3, r3, #23
 8002000:	0011      	movs	r1, r2
 8002002:	0018      	movs	r0, r3
 8002004:	f001 fb24 	bl	8003650 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002008:	193b      	adds	r3, r7, r4
 800200a:	2203      	movs	r2, #3
 800200c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800200e:	193b      	adds	r3, r7, r4
 8002010:	2203      	movs	r2, #3
 8002012:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002014:	193b      	adds	r3, r7, r4
 8002016:	2200      	movs	r2, #0
 8002018:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800201a:	193b      	adds	r3, r7, r4
 800201c:	4a0b      	ldr	r2, [pc, #44]	; (800204c <HAL_ADC_MspInit+0x114>)
 800201e:	0019      	movs	r1, r3
 8002020:	0010      	movs	r0, r2
 8002022:	f001 fb15 	bl	8003650 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_COMP_IRQn, 0, 0);
 8002026:	2200      	movs	r2, #0
 8002028:	2100      	movs	r1, #0
 800202a:	200c      	movs	r0, #12
 800202c:	f001 fa60 	bl	80034f0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_COMP_IRQn);
 8002030:	200c      	movs	r0, #12
 8002032:	f001 fa72 	bl	800351a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002036:	46c0      	nop			; (mov r8, r8)
 8002038:	46bd      	mov	sp, r7
 800203a:	b00d      	add	sp, #52	; 0x34
 800203c:	bd90      	pop	{r4, r7, pc}
 800203e:	46c0      	nop			; (mov r8, r8)
 8002040:	40012400 	.word	0x40012400
 8002044:	40021000 	.word	0x40021000
 8002048:	48000800 	.word	0x48000800
 800204c:	48000400 	.word	0x48000400

08002050 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002050:	b590      	push	{r4, r7, lr}
 8002052:	b08b      	sub	sp, #44	; 0x2c
 8002054:	af00      	add	r7, sp, #0
 8002056:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002058:	2414      	movs	r4, #20
 800205a:	193b      	adds	r3, r7, r4
 800205c:	0018      	movs	r0, r3
 800205e:	2314      	movs	r3, #20
 8002060:	001a      	movs	r2, r3
 8002062:	2100      	movs	r1, #0
 8002064:	f00a fe0b 	bl	800cc7e <memset>
  if(hspi->Instance==SPI1)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	4a1c      	ldr	r2, [pc, #112]	; (80020e0 <HAL_SPI_MspInit+0x90>)
 800206e:	4293      	cmp	r3, r2
 8002070:	d131      	bne.n	80020d6 <HAL_SPI_MspInit+0x86>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002072:	4b1c      	ldr	r3, [pc, #112]	; (80020e4 <HAL_SPI_MspInit+0x94>)
 8002074:	699a      	ldr	r2, [r3, #24]
 8002076:	4b1b      	ldr	r3, [pc, #108]	; (80020e4 <HAL_SPI_MspInit+0x94>)
 8002078:	2180      	movs	r1, #128	; 0x80
 800207a:	0149      	lsls	r1, r1, #5
 800207c:	430a      	orrs	r2, r1
 800207e:	619a      	str	r2, [r3, #24]
 8002080:	4b18      	ldr	r3, [pc, #96]	; (80020e4 <HAL_SPI_MspInit+0x94>)
 8002082:	699a      	ldr	r2, [r3, #24]
 8002084:	2380      	movs	r3, #128	; 0x80
 8002086:	015b      	lsls	r3, r3, #5
 8002088:	4013      	ands	r3, r2
 800208a:	613b      	str	r3, [r7, #16]
 800208c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800208e:	4b15      	ldr	r3, [pc, #84]	; (80020e4 <HAL_SPI_MspInit+0x94>)
 8002090:	695a      	ldr	r2, [r3, #20]
 8002092:	4b14      	ldr	r3, [pc, #80]	; (80020e4 <HAL_SPI_MspInit+0x94>)
 8002094:	2180      	movs	r1, #128	; 0x80
 8002096:	02c9      	lsls	r1, r1, #11
 8002098:	430a      	orrs	r2, r1
 800209a:	615a      	str	r2, [r3, #20]
 800209c:	4b11      	ldr	r3, [pc, #68]	; (80020e4 <HAL_SPI_MspInit+0x94>)
 800209e:	695a      	ldr	r2, [r3, #20]
 80020a0:	2380      	movs	r3, #128	; 0x80
 80020a2:	02db      	lsls	r3, r3, #11
 80020a4:	4013      	ands	r3, r2
 80020a6:	60fb      	str	r3, [r7, #12]
 80020a8:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 80020aa:	0021      	movs	r1, r4
 80020ac:	187b      	adds	r3, r7, r1
 80020ae:	2238      	movs	r2, #56	; 0x38
 80020b0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020b2:	187b      	adds	r3, r7, r1
 80020b4:	2202      	movs	r2, #2
 80020b6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020b8:	187b      	adds	r3, r7, r1
 80020ba:	2200      	movs	r2, #0
 80020bc:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80020be:	187b      	adds	r3, r7, r1
 80020c0:	2203      	movs	r2, #3
 80020c2:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 80020c4:	187b      	adds	r3, r7, r1
 80020c6:	2200      	movs	r2, #0
 80020c8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020ca:	187b      	adds	r3, r7, r1
 80020cc:	4a06      	ldr	r2, [pc, #24]	; (80020e8 <HAL_SPI_MspInit+0x98>)
 80020ce:	0019      	movs	r1, r3
 80020d0:	0010      	movs	r0, r2
 80020d2:	f001 fabd 	bl	8003650 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80020d6:	46c0      	nop			; (mov r8, r8)
 80020d8:	46bd      	mov	sp, r7
 80020da:	b00b      	add	sp, #44	; 0x2c
 80020dc:	bd90      	pop	{r4, r7, pc}
 80020de:	46c0      	nop			; (mov r8, r8)
 80020e0:	40013000 	.word	0x40013000
 80020e4:	40021000 	.word	0x40021000
 80020e8:	48000400 	.word	0x48000400

080020ec <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	b084      	sub	sp, #16
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM14)
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	4a0e      	ldr	r2, [pc, #56]	; (8002134 <HAL_TIM_Base_MspInit+0x48>)
 80020fa:	4293      	cmp	r3, r2
 80020fc:	d115      	bne.n	800212a <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM14_MspInit 0 */

  /* USER CODE END TIM14_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM14_CLK_ENABLE();
 80020fe:	4b0e      	ldr	r3, [pc, #56]	; (8002138 <HAL_TIM_Base_MspInit+0x4c>)
 8002100:	69da      	ldr	r2, [r3, #28]
 8002102:	4b0d      	ldr	r3, [pc, #52]	; (8002138 <HAL_TIM_Base_MspInit+0x4c>)
 8002104:	2180      	movs	r1, #128	; 0x80
 8002106:	0049      	lsls	r1, r1, #1
 8002108:	430a      	orrs	r2, r1
 800210a:	61da      	str	r2, [r3, #28]
 800210c:	4b0a      	ldr	r3, [pc, #40]	; (8002138 <HAL_TIM_Base_MspInit+0x4c>)
 800210e:	69da      	ldr	r2, [r3, #28]
 8002110:	2380      	movs	r3, #128	; 0x80
 8002112:	005b      	lsls	r3, r3, #1
 8002114:	4013      	ands	r3, r2
 8002116:	60fb      	str	r3, [r7, #12]
 8002118:	68fb      	ldr	r3, [r7, #12]
    /* TIM14 interrupt Init */
    HAL_NVIC_SetPriority(TIM14_IRQn, 0, 0);
 800211a:	2200      	movs	r2, #0
 800211c:	2100      	movs	r1, #0
 800211e:	2013      	movs	r0, #19
 8002120:	f001 f9e6 	bl	80034f0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM14_IRQn);
 8002124:	2013      	movs	r0, #19
 8002126:	f001 f9f8 	bl	800351a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }

}
 800212a:	46c0      	nop			; (mov r8, r8)
 800212c:	46bd      	mov	sp, r7
 800212e:	b004      	add	sp, #16
 8002130:	bd80      	pop	{r7, pc}
 8002132:	46c0      	nop			; (mov r8, r8)
 8002134:	40002000 	.word	0x40002000
 8002138:	40021000 	.word	0x40021000

0800213c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800213c:	b590      	push	{r4, r7, lr}
 800213e:	b08b      	sub	sp, #44	; 0x2c
 8002140:	af00      	add	r7, sp, #0
 8002142:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002144:	2414      	movs	r4, #20
 8002146:	193b      	adds	r3, r7, r4
 8002148:	0018      	movs	r0, r3
 800214a:	2314      	movs	r3, #20
 800214c:	001a      	movs	r2, r3
 800214e:	2100      	movs	r1, #0
 8002150:	f00a fd95 	bl	800cc7e <memset>
  if(huart->Instance==USART3)
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	4a20      	ldr	r2, [pc, #128]	; (80021dc <HAL_UART_MspInit+0xa0>)
 800215a:	4293      	cmp	r3, r2
 800215c:	d13a      	bne.n	80021d4 <HAL_UART_MspInit+0x98>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800215e:	4b20      	ldr	r3, [pc, #128]	; (80021e0 <HAL_UART_MspInit+0xa4>)
 8002160:	69da      	ldr	r2, [r3, #28]
 8002162:	4b1f      	ldr	r3, [pc, #124]	; (80021e0 <HAL_UART_MspInit+0xa4>)
 8002164:	2180      	movs	r1, #128	; 0x80
 8002166:	02c9      	lsls	r1, r1, #11
 8002168:	430a      	orrs	r2, r1
 800216a:	61da      	str	r2, [r3, #28]
 800216c:	4b1c      	ldr	r3, [pc, #112]	; (80021e0 <HAL_UART_MspInit+0xa4>)
 800216e:	69da      	ldr	r2, [r3, #28]
 8002170:	2380      	movs	r3, #128	; 0x80
 8002172:	02db      	lsls	r3, r3, #11
 8002174:	4013      	ands	r3, r2
 8002176:	613b      	str	r3, [r7, #16]
 8002178:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800217a:	4b19      	ldr	r3, [pc, #100]	; (80021e0 <HAL_UART_MspInit+0xa4>)
 800217c:	695a      	ldr	r2, [r3, #20]
 800217e:	4b18      	ldr	r3, [pc, #96]	; (80021e0 <HAL_UART_MspInit+0xa4>)
 8002180:	2180      	movs	r1, #128	; 0x80
 8002182:	0309      	lsls	r1, r1, #12
 8002184:	430a      	orrs	r2, r1
 8002186:	615a      	str	r2, [r3, #20]
 8002188:	4b15      	ldr	r3, [pc, #84]	; (80021e0 <HAL_UART_MspInit+0xa4>)
 800218a:	695a      	ldr	r2, [r3, #20]
 800218c:	2380      	movs	r3, #128	; 0x80
 800218e:	031b      	lsls	r3, r3, #12
 8002190:	4013      	ands	r3, r2
 8002192:	60fb      	str	r3, [r7, #12]
 8002194:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PC10     ------> USART3_TX
    PC11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002196:	193b      	adds	r3, r7, r4
 8002198:	22c0      	movs	r2, #192	; 0xc0
 800219a:	0112      	lsls	r2, r2, #4
 800219c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800219e:	0021      	movs	r1, r4
 80021a0:	187b      	adds	r3, r7, r1
 80021a2:	2202      	movs	r2, #2
 80021a4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021a6:	187b      	adds	r3, r7, r1
 80021a8:	2200      	movs	r2, #0
 80021aa:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80021ac:	187b      	adds	r3, r7, r1
 80021ae:	2203      	movs	r2, #3
 80021b0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART3;
 80021b2:	187b      	adds	r3, r7, r1
 80021b4:	2201      	movs	r2, #1
 80021b6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80021b8:	187b      	adds	r3, r7, r1
 80021ba:	4a0a      	ldr	r2, [pc, #40]	; (80021e4 <HAL_UART_MspInit+0xa8>)
 80021bc:	0019      	movs	r1, r3
 80021be:	0010      	movs	r0, r2
 80021c0:	f001 fa46 	bl	8003650 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_4_IRQn, 0, 0);
 80021c4:	2200      	movs	r2, #0
 80021c6:	2100      	movs	r1, #0
 80021c8:	201d      	movs	r0, #29
 80021ca:	f001 f991 	bl	80034f0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_4_IRQn);
 80021ce:	201d      	movs	r0, #29
 80021d0:	f001 f9a3 	bl	800351a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80021d4:	46c0      	nop			; (mov r8, r8)
 80021d6:	46bd      	mov	sp, r7
 80021d8:	b00b      	add	sp, #44	; 0x2c
 80021da:	bd90      	pop	{r4, r7, pc}
 80021dc:	40004800 	.word	0x40004800
 80021e0:	40021000 	.word	0x40021000
 80021e4:	48000800 	.word	0x48000800

080021e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80021ec:	e7fe      	b.n	80021ec <NMI_Handler+0x4>

080021ee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80021ee:	b580      	push	{r7, lr}
 80021f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80021f2:	e7fe      	b.n	80021f2 <HardFault_Handler+0x4>

080021f4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80021f4:	b580      	push	{r7, lr}
 80021f6:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80021f8:	46c0      	nop			; (mov r8, r8)
 80021fa:	46bd      	mov	sp, r7
 80021fc:	bd80      	pop	{r7, pc}

080021fe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80021fe:	b580      	push	{r7, lr}
 8002200:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002202:	46c0      	nop			; (mov r8, r8)
 8002204:	46bd      	mov	sp, r7
 8002206:	bd80      	pop	{r7, pc}

08002208 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002208:	b580      	push	{r7, lr}
 800220a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800220c:	f000 fb64 	bl	80028d8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002210:	46c0      	nop			; (mov r8, r8)
 8002212:	46bd      	mov	sp, r7
 8002214:	bd80      	pop	{r7, pc}

08002216 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 8002216:	b580      	push	{r7, lr}
 8002218:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 800221a:	2380      	movs	r3, #128	; 0x80
 800221c:	005b      	lsls	r3, r3, #1
 800221e:	0018      	movs	r0, r3
 8002220:	f001 fbe4 	bl	80039ec <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 8002224:	2380      	movs	r3, #128	; 0x80
 8002226:	009b      	lsls	r3, r3, #2
 8002228:	0018      	movs	r0, r3
 800222a:	f001 fbdf 	bl	80039ec <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 800222e:	46c0      	nop			; (mov r8, r8)
 8002230:	46bd      	mov	sp, r7
 8002232:	bd80      	pop	{r7, pc}

08002234 <ADC1_COMP_IRQHandler>:

/**
  * @brief This function handles ADC and COMP interrupts (COMP interrupts through EXTI lines 21 and 22).
  */
void ADC1_COMP_IRQHandler(void)
{
 8002234:	b580      	push	{r7, lr}
 8002236:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_COMP_IRQn 0 */

  /* USER CODE END ADC1_COMP_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc);
 8002238:	4b03      	ldr	r3, [pc, #12]	; (8002248 <ADC1_COMP_IRQHandler+0x14>)
 800223a:	0018      	movs	r0, r3
 800223c:	f000 fd94 	bl	8002d68 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_COMP_IRQn 1 */

  /* USER CODE END ADC1_COMP_IRQn 1 */
}
 8002240:	46c0      	nop			; (mov r8, r8)
 8002242:	46bd      	mov	sp, r7
 8002244:	bd80      	pop	{r7, pc}
 8002246:	46c0      	nop			; (mov r8, r8)
 8002248:	2000064c 	.word	0x2000064c

0800224c <TIM14_IRQHandler>:

/**
  * @brief This function handles TIM14 global interrupt.
  */
void TIM14_IRQHandler(void)
{
 800224c:	b580      	push	{r7, lr}
 800224e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM14_IRQn 0 */

  /* USER CODE END TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8002250:	4b03      	ldr	r3, [pc, #12]	; (8002260 <TIM14_IRQHandler+0x14>)
 8002252:	0018      	movs	r0, r3
 8002254:	f004 feaa 	bl	8006fac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM14_IRQn 1 */

  /* USER CODE END TIM14_IRQn 1 */
}
 8002258:	46c0      	nop			; (mov r8, r8)
 800225a:	46bd      	mov	sp, r7
 800225c:	bd80      	pop	{r7, pc}
 800225e:	46c0      	nop			; (mov r8, r8)
 8002260:	200005e8 	.word	0x200005e8

08002264 <USART3_4_IRQHandler>:

/**
  * @brief This function handles USART3 and USART4 global interrupts.
  */
void USART3_4_IRQHandler(void)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_4_IRQn 0 */

  /* USER CODE END USART3_4_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8002268:	4b03      	ldr	r3, [pc, #12]	; (8002278 <USART3_4_IRQHandler+0x14>)
 800226a:	0018      	movs	r0, r3
 800226c:	f005 fb0c 	bl	8007888 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_4_IRQn 1 */

  /* USER CODE END USART3_4_IRQn 1 */
}
 8002270:	46c0      	nop			; (mov r8, r8)
 8002272:	46bd      	mov	sp, r7
 8002274:	bd80      	pop	{r7, pc}
 8002276:	46c0      	nop			; (mov r8, r8)
 8002278:	20000500 	.word	0x20000500

0800227c <USB_IRQHandler>:

/**
  * @brief This function handles USB global interrupt / USB wake-up interrupt through EXTI line 18.
  */
void USB_IRQHandler(void)
{
 800227c:	b580      	push	{r7, lr}
 800227e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_IRQn 0 */

  /* USER CODE END USB_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8002280:	4b03      	ldr	r3, [pc, #12]	; (8002290 <USB_IRQHandler+0x14>)
 8002282:	0018      	movs	r0, r3
 8002284:	f001 fd04 	bl	8003c90 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_IRQn 1 */

  /* USER CODE END USB_IRQn 1 */
}
 8002288:	46c0      	nop			; (mov r8, r8)
 800228a:	46bd      	mov	sp, r7
 800228c:	bd80      	pop	{r7, pc}
 800228e:	46c0      	nop			; (mov r8, r8)
 8002290:	20001338 	.word	0x20001338

08002294 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002294:	b580      	push	{r7, lr}
 8002296:	b086      	sub	sp, #24
 8002298:	af00      	add	r7, sp, #0
 800229a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800229c:	4a14      	ldr	r2, [pc, #80]	; (80022f0 <_sbrk+0x5c>)
 800229e:	4b15      	ldr	r3, [pc, #84]	; (80022f4 <_sbrk+0x60>)
 80022a0:	1ad3      	subs	r3, r2, r3
 80022a2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80022a4:	697b      	ldr	r3, [r7, #20]
 80022a6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80022a8:	4b13      	ldr	r3, [pc, #76]	; (80022f8 <_sbrk+0x64>)
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d102      	bne.n	80022b6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80022b0:	4b11      	ldr	r3, [pc, #68]	; (80022f8 <_sbrk+0x64>)
 80022b2:	4a12      	ldr	r2, [pc, #72]	; (80022fc <_sbrk+0x68>)
 80022b4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80022b6:	4b10      	ldr	r3, [pc, #64]	; (80022f8 <_sbrk+0x64>)
 80022b8:	681a      	ldr	r2, [r3, #0]
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	18d3      	adds	r3, r2, r3
 80022be:	693a      	ldr	r2, [r7, #16]
 80022c0:	429a      	cmp	r2, r3
 80022c2:	d207      	bcs.n	80022d4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80022c4:	f00a fc94 	bl	800cbf0 <__errno>
 80022c8:	0003      	movs	r3, r0
 80022ca:	220c      	movs	r2, #12
 80022cc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80022ce:	2301      	movs	r3, #1
 80022d0:	425b      	negs	r3, r3
 80022d2:	e009      	b.n	80022e8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80022d4:	4b08      	ldr	r3, [pc, #32]	; (80022f8 <_sbrk+0x64>)
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80022da:	4b07      	ldr	r3, [pc, #28]	; (80022f8 <_sbrk+0x64>)
 80022dc:	681a      	ldr	r2, [r3, #0]
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	18d2      	adds	r2, r2, r3
 80022e2:	4b05      	ldr	r3, [pc, #20]	; (80022f8 <_sbrk+0x64>)
 80022e4:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 80022e6:	68fb      	ldr	r3, [r7, #12]
}
 80022e8:	0018      	movs	r0, r3
 80022ea:	46bd      	mov	sp, r7
 80022ec:	b006      	add	sp, #24
 80022ee:	bd80      	pop	{r7, pc}
 80022f0:	20004000 	.word	0x20004000
 80022f4:	00000400 	.word	0x00000400
 80022f8:	20000258 	.word	0x20000258
 80022fc:	20001640 	.word	0x20001640

08002300 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002300:	b580      	push	{r7, lr}
 8002302:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8002304:	46c0      	nop			; (mov r8, r8)
 8002306:	46bd      	mov	sp, r7
 8002308:	bd80      	pop	{r7, pc}
	...

0800230c <currentPhase>:
static void startTest();
static void stopTest();

//_____Dotaz na aktuální fázi testu_____//
TEST_PHASE currentPhase()
{
 800230c:	b580      	push	{r7, lr}
 800230e:	af00      	add	r7, sp, #0
	return testPhase;
 8002310:	4b02      	ldr	r3, [pc, #8]	; (800231c <currentPhase+0x10>)
 8002312:	781b      	ldrb	r3, [r3, #0]
}
 8002314:	0018      	movs	r0, r3
 8002316:	46bd      	mov	sp, r7
 8002318:	bd80      	pop	{r7, pc}
 800231a:	46c0      	nop			; (mov r8, r8)
 800231c:	2000025c 	.word	0x2000025c

08002320 <testHandler>:

//_____Funkce pro řízení testu_____//
void testHandler()
{
 8002320:	b5b0      	push	{r4, r5, r7, lr}
 8002322:	b092      	sub	sp, #72	; 0x48
 8002324:	af02      	add	r7, sp, #8
	flags.testProgress = 0;
 8002326:	4bdb      	ldr	r3, [pc, #876]	; (8002694 <testHandler+0x374>)
 8002328:	7e1a      	ldrb	r2, [r3, #24]
 800232a:	2102      	movs	r1, #2
 800232c:	438a      	bics	r2, r1
 800232e:	761a      	strb	r2, [r3, #24]

	if(flags.instructions.startRequest)
 8002330:	4bd8      	ldr	r3, [pc, #864]	; (8002694 <testHandler+0x374>)
 8002332:	7b1b      	ldrb	r3, [r3, #12]
 8002334:	2201      	movs	r2, #1
 8002336:	4013      	ands	r3, r2
 8002338:	b2db      	uxtb	r3, r3
 800233a:	2b00      	cmp	r3, #0
 800233c:	d034      	beq.n	80023a8 <testHandler+0x88>
	{
		if(testPhase == WAITING)
 800233e:	4bd6      	ldr	r3, [pc, #856]	; (8002698 <testHandler+0x378>)
 8002340:	781b      	ldrb	r3, [r3, #0]
 8002342:	2b00      	cmp	r3, #0
 8002344:	d126      	bne.n	8002394 <testHandler+0x74>
		{
			if(flags.conErr)
 8002346:	4bd3      	ldr	r3, [pc, #844]	; (8002694 <testHandler+0x374>)
 8002348:	7e1b      	ldrb	r3, [r3, #24]
 800234a:	2204      	movs	r2, #4
 800234c:	4013      	ands	r3, r2
 800234e:	b2db      	uxtb	r3, r3
 8002350:	2b00      	cmp	r3, #0
 8002352:	d01c      	beq.n	800238e <testHandler+0x6e>
			{
				char txt[] = {"Relay PCB connection error\n"};
 8002354:	211c      	movs	r1, #28
 8002356:	187b      	adds	r3, r7, r1
 8002358:	4ad0      	ldr	r2, [pc, #832]	; (800269c <testHandler+0x37c>)
 800235a:	ca31      	ldmia	r2!, {r0, r4, r5}
 800235c:	c331      	stmia	r3!, {r0, r4, r5}
 800235e:	ca31      	ldmia	r2!, {r0, r4, r5}
 8002360:	c331      	stmia	r3!, {r0, r4, r5}
 8002362:	6812      	ldr	r2, [r2, #0]
 8002364:	601a      	str	r2, [r3, #0]
				pushStr(USB_Tx_Buffer, txt, strlen(txt));
 8002366:	4bce      	ldr	r3, [pc, #824]	; (80026a0 <testHandler+0x380>)
 8002368:	681c      	ldr	r4, [r3, #0]
 800236a:	000d      	movs	r5, r1
 800236c:	187b      	adds	r3, r7, r1
 800236e:	0018      	movs	r0, r3
 8002370:	f7fd feca 	bl	8000108 <strlen>
 8002374:	0003      	movs	r3, r0
 8002376:	001a      	movs	r2, r3
 8002378:	197b      	adds	r3, r7, r5
 800237a:	0019      	movs	r1, r3
 800237c:	0020      	movs	r0, r4
 800237e:	f7ff fc4a 	bl	8001c16 <pushStr>
				flags.instructions.startRequest = 0;
 8002382:	4bc4      	ldr	r3, [pc, #784]	; (8002694 <testHandler+0x374>)
 8002384:	7b1a      	ldrb	r2, [r3, #12]
 8002386:	2101      	movs	r1, #1
 8002388:	438a      	bics	r2, r1
 800238a:	731a      	strb	r2, [r3, #12]
 800238c:	e00c      	b.n	80023a8 <testHandler+0x88>
			}
			else
			{
				startTest();
 800238e:	f000 f999 	bl	80026c4 <startTest>
 8002392:	e009      	b.n	80023a8 <testHandler+0x88>
			}
		}
		else
		{
			flags.startConflict = 1;
 8002394:	4bbf      	ldr	r3, [pc, #764]	; (8002694 <testHandler+0x374>)
 8002396:	7e1a      	ldrb	r2, [r3, #24]
 8002398:	2101      	movs	r1, #1
 800239a:	430a      	orrs	r2, r1
 800239c:	761a      	strb	r2, [r3, #24]
			flags.instructions.startRequest = 0;
 800239e:	4bbd      	ldr	r3, [pc, #756]	; (8002694 <testHandler+0x374>)
 80023a0:	7b1a      	ldrb	r2, [r3, #12]
 80023a2:	2101      	movs	r1, #1
 80023a4:	438a      	bics	r2, r1
 80023a6:	731a      	strb	r2, [r3, #12]
		}
	}
	if(flags.instructions.stopRequest)
 80023a8:	4bba      	ldr	r3, [pc, #744]	; (8002694 <testHandler+0x374>)
 80023aa:	7b1b      	ldrb	r3, [r3, #12]
 80023ac:	2202      	movs	r2, #2
 80023ae:	4013      	ands	r3, r2
 80023b0:	b2db      	uxtb	r3, r3
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d001      	beq.n	80023ba <testHandler+0x9a>
	{
		stopTest();
 80023b6:	f000 f9e7 	bl	8002788 <stopTest>
	}

	switch(testPhase)
 80023ba:	4bb7      	ldr	r3, [pc, #732]	; (8002698 <testHandler+0x378>)
 80023bc:	781b      	ldrb	r3, [r3, #0]
 80023be:	2b06      	cmp	r3, #6
 80023c0:	d900      	bls.n	80023c4 <testHandler+0xa4>
 80023c2:	e17a      	b.n	80026ba <testHandler+0x39a>
 80023c4:	009a      	lsls	r2, r3, #2
 80023c6:	4bb7      	ldr	r3, [pc, #732]	; (80026a4 <testHandler+0x384>)
 80023c8:	18d3      	adds	r3, r2, r3
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	469f      	mov	pc, r3
	{
	case WAITING:
		flags.testProgress = 0;
 80023ce:	4bb1      	ldr	r3, [pc, #708]	; (8002694 <testHandler+0x374>)
 80023d0:	7e1a      	ldrb	r2, [r3, #24]
 80023d2:	2102      	movs	r1, #2
 80023d4:	438a      	bics	r2, r1
 80023d6:	761a      	strb	r2, [r3, #24]
		//flags.meas.measRequest = 0;
		break;
 80023d8:	e16f      	b.n	80026ba <testHandler+0x39a>
	case START:

		//___Pokud je dokončeno měření napětí naprázdno...____//
		if(flags.meas.measComplete)
 80023da:	4bae      	ldr	r3, [pc, #696]	; (8002694 <testHandler+0x374>)
 80023dc:	7d1b      	ldrb	r3, [r3, #20]
 80023de:	2202      	movs	r2, #2
 80023e0:	4013      	ands	r3, r2
 80023e2:	b2db      	uxtb	r3, r3
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d006      	beq.n	80023f6 <testHandler+0xd6>
		{
			testPhase++;
 80023e8:	4bab      	ldr	r3, [pc, #684]	; (8002698 <testHandler+0x378>)
 80023ea:	781b      	ldrb	r3, [r3, #0]
 80023ec:	3301      	adds	r3, #1
 80023ee:	b2da      	uxtb	r2, r3
 80023f0:	4ba9      	ldr	r3, [pc, #676]	; (8002698 <testHandler+0x378>)
 80023f2:	701a      	strb	r2, [r3, #0]
		}
		else if(sysTime[SYSTIME_SEC] == 1)	//Pauza pro ustálení po sepnutí relé
		{
			flags.meas.measRequest = 1;
		}
		break;
 80023f4:	e146      	b.n	8002684 <testHandler+0x364>
		else if(sysTime[SYSTIME_SEC] == 1)	//Pauza pro ustálení po sepnutí relé
 80023f6:	4bac      	ldr	r3, [pc, #688]	; (80026a8 <testHandler+0x388>)
 80023f8:	685b      	ldr	r3, [r3, #4]
 80023fa:	2b01      	cmp	r3, #1
 80023fc:	d000      	beq.n	8002400 <testHandler+0xe0>
 80023fe:	e141      	b.n	8002684 <testHandler+0x364>
			flags.meas.measRequest = 1;
 8002400:	4ba4      	ldr	r3, [pc, #656]	; (8002694 <testHandler+0x374>)
 8002402:	7d1a      	ldrb	r2, [r3, #20]
 8002404:	2101      	movs	r1, #1
 8002406:	430a      	orrs	r2, r1
 8002408:	751a      	strb	r2, [r3, #20]
		break;
 800240a:	e13b      	b.n	8002684 <testHandler+0x364>
	case START_DONE:
		//___Připojení zátěže___//
		LOAD_MIN_ON;
 800240c:	4ba7      	ldr	r3, [pc, #668]	; (80026ac <testHandler+0x38c>)
 800240e:	2201      	movs	r2, #1
 8002410:	2180      	movs	r1, #128	; 0x80
 8002412:	0018      	movs	r0, r3
 8002414:	f001 fab1 	bl	800397a <HAL_GPIO_WritePin>
		LOAD_MAX_ON;
 8002418:	4ba4      	ldr	r3, [pc, #656]	; (80026ac <testHandler+0x38c>)
 800241a:	2201      	movs	r2, #1
 800241c:	2140      	movs	r1, #64	; 0x40
 800241e:	0018      	movs	r0, r3
 8002420:	f001 faab 	bl	800397a <HAL_GPIO_WritePin>

		testPhase++;
 8002424:	4b9c      	ldr	r3, [pc, #624]	; (8002698 <testHandler+0x378>)
 8002426:	781b      	ldrb	r3, [r3, #0]
 8002428:	3301      	adds	r3, #1
 800242a:	b2da      	uxtb	r2, r3
 800242c:	4b9a      	ldr	r3, [pc, #616]	; (8002698 <testHandler+0x378>)
 800242e:	701a      	strb	r2, [r3, #0]
		flags.testProgress = 1;
 8002430:	4b98      	ldr	r3, [pc, #608]	; (8002694 <testHandler+0x374>)
 8002432:	7e1a      	ldrb	r2, [r3, #24]
 8002434:	2102      	movs	r1, #2
 8002436:	430a      	orrs	r2, r1
 8002438:	761a      	strb	r2, [r3, #24]
		//flags.ui.shortBeep = 1;

		PROGRESS_ON(*sourceInTesting, PROGRESS_LED1);	//blikání druhé progress led
 800243a:	4b9d      	ldr	r3, [pc, #628]	; (80026b0 <testHandler+0x390>)
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	781a      	ldrb	r2, [r3, #0]
 8002440:	4b9b      	ldr	r3, [pc, #620]	; (80026b0 <testHandler+0x390>)
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	2120      	movs	r1, #32
 8002446:	430a      	orrs	r2, r1
 8002448:	b2d2      	uxtb	r2, r2
 800244a:	701a      	strb	r2, [r3, #0]
		sendData();
 800244c:	f7ff fd1c 	bl	8001e88 <sendData>

		//___Nulování času___//
		for(int i = 1; i < 4; i++)
 8002450:	2301      	movs	r3, #1
 8002452:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002454:	e007      	b.n	8002466 <testHandler+0x146>
		{
			sysTime[i] = 0;
 8002456:	4b94      	ldr	r3, [pc, #592]	; (80026a8 <testHandler+0x388>)
 8002458:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800245a:	0092      	lsls	r2, r2, #2
 800245c:	2100      	movs	r1, #0
 800245e:	50d1      	str	r1, [r2, r3]
		for(int i = 1; i < 4; i++)
 8002460:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002462:	3301      	adds	r3, #1
 8002464:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002466:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002468:	2b03      	cmp	r3, #3
 800246a:	ddf4      	ble.n	8002456 <testHandler+0x136>
		}
		break;
 800246c:	e125      	b.n	80026ba <testHandler+0x39a>
	case MAIN_TEST:
		if(flags.time.sec)	//___Změna času___//
 800246e:	4b89      	ldr	r3, [pc, #548]	; (8002694 <testHandler+0x374>)
 8002470:	781b      	ldrb	r3, [r3, #0]
 8002472:	2202      	movs	r2, #2
 8002474:	4013      	ands	r3, r2
 8002476:	b2db      	uxtb	r3, r3
 8002478:	2b00      	cmp	r3, #0
 800247a:	d026      	beq.n	80024ca <testHandler+0x1aa>
		{
			char time[9] = {0};
 800247c:	2510      	movs	r5, #16
 800247e:	197b      	adds	r3, r7, r5
 8002480:	2200      	movs	r2, #0
 8002482:	601a      	str	r2, [r3, #0]
 8002484:	3304      	adds	r3, #4
 8002486:	2205      	movs	r2, #5
 8002488:	2100      	movs	r1, #0
 800248a:	0018      	movs	r0, r3
 800248c:	f00a fbf7 	bl	800cc7e <memset>
			sprintf(time, "%d:%d:%d", 60-sysTime[SYSTIME_SEC], 60-sysTime[SYSTIME_MIN], 3-sysTime[SYSTIME_HOUR]);
 8002490:	4b85      	ldr	r3, [pc, #532]	; (80026a8 <testHandler+0x388>)
 8002492:	685b      	ldr	r3, [r3, #4]
 8002494:	223c      	movs	r2, #60	; 0x3c
 8002496:	1ad2      	subs	r2, r2, r3
 8002498:	4b83      	ldr	r3, [pc, #524]	; (80026a8 <testHandler+0x388>)
 800249a:	689b      	ldr	r3, [r3, #8]
 800249c:	213c      	movs	r1, #60	; 0x3c
 800249e:	1acc      	subs	r4, r1, r3
 80024a0:	4b81      	ldr	r3, [pc, #516]	; (80026a8 <testHandler+0x388>)
 80024a2:	68db      	ldr	r3, [r3, #12]
 80024a4:	2103      	movs	r1, #3
 80024a6:	1acb      	subs	r3, r1, r3
 80024a8:	4982      	ldr	r1, [pc, #520]	; (80026b4 <testHandler+0x394>)
 80024aa:	1978      	adds	r0, r7, r5
 80024ac:	9300      	str	r3, [sp, #0]
 80024ae:	0023      	movs	r3, r4
 80024b0:	f00a fca8 	bl	800ce04 <siprintf>
			//writeRow(time, strlen(time), 0, LEFT);

			PROGRESS_RUNNING(*sourceInTesting, PROGRESS_LED2);	//blikání druhé progress led
 80024b4:	4b7e      	ldr	r3, [pc, #504]	; (80026b0 <testHandler+0x390>)
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	781a      	ldrb	r2, [r3, #0]
 80024ba:	4b7d      	ldr	r3, [pc, #500]	; (80026b0 <testHandler+0x390>)
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	2110      	movs	r1, #16
 80024c0:	404a      	eors	r2, r1
 80024c2:	b2d2      	uxtb	r2, r2
 80024c4:	701a      	strb	r2, [r3, #0]
			sendData();
 80024c6:	f7ff fcdf 	bl	8001e88 <sendData>
		}
#ifdef __DEBUG_TEST__
		if(sysTime[SYSTIME_MIN] != 0 && flags.time.min)	//___Měření napětí každou minutu___//
 80024ca:	4b77      	ldr	r3, [pc, #476]	; (80026a8 <testHandler+0x388>)
 80024cc:	689b      	ldr	r3, [r3, #8]
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d00b      	beq.n	80024ea <testHandler+0x1ca>
 80024d2:	4b70      	ldr	r3, [pc, #448]	; (8002694 <testHandler+0x374>)
 80024d4:	781b      	ldrb	r3, [r3, #0]
 80024d6:	2204      	movs	r2, #4
 80024d8:	4013      	ands	r3, r2
 80024da:	b2db      	uxtb	r3, r3
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d004      	beq.n	80024ea <testHandler+0x1ca>
#else
		if(!(sysTime[SYSTIME_MIN] % 10) && sysTime[SYSTIME_MIN] != 0 && flags.time.min)	//___Měření napětí každých deset minut___//
#endif
		{
			flags.meas.measRequest = 1;
 80024e0:	4b6c      	ldr	r3, [pc, #432]	; (8002694 <testHandler+0x374>)
 80024e2:	7d1a      	ldrb	r2, [r3, #20]
 80024e4:	2101      	movs	r1, #1
 80024e6:	430a      	orrs	r2, r1
 80024e8:	751a      	strb	r2, [r3, #20]
		}
#ifdef __DEBUG_TEST__
		if(sysTime[SYSTIME_MIN] >= 10)	//___Po deseti minutách je měření u konce___//
 80024ea:	4b6f      	ldr	r3, [pc, #444]	; (80026a8 <testHandler+0x388>)
 80024ec:	689b      	ldr	r3, [r3, #8]
 80024ee:	2b09      	cmp	r3, #9
 80024f0:	dc00      	bgt.n	80024f4 <testHandler+0x1d4>
 80024f2:	e0c9      	b.n	8002688 <testHandler+0x368>
#else
		if(sysTime[SYSTIME_HOUR] >= 3)	//___Po třech hodinách je měření u konce___//
#endif
		{
			testPhase++;
 80024f4:	4b68      	ldr	r3, [pc, #416]	; (8002698 <testHandler+0x378>)
 80024f6:	781b      	ldrb	r3, [r3, #0]
 80024f8:	3301      	adds	r3, #1
 80024fa:	b2da      	uxtb	r2, r3
 80024fc:	4b66      	ldr	r3, [pc, #408]	; (8002698 <testHandler+0x378>)
 80024fe:	701a      	strb	r2, [r3, #0]
		}
		break;
 8002500:	e0c2      	b.n	8002688 <testHandler+0x368>
	case MAIN_TEST_DONE:
		if(!flags.meas.measRunning)
 8002502:	4b64      	ldr	r3, [pc, #400]	; (8002694 <testHandler+0x374>)
 8002504:	7d1b      	ldrb	r3, [r3, #20]
 8002506:	2208      	movs	r2, #8
 8002508:	4013      	ands	r3, r2
 800250a:	b2db      	uxtb	r3, r3
 800250c:	2b00      	cmp	r3, #0
 800250e:	d000      	beq.n	8002512 <testHandler+0x1f2>
 8002510:	e0bc      	b.n	800268c <testHandler+0x36c>
		{
			flags.ui.notice = 1;
 8002512:	4b60      	ldr	r3, [pc, #384]	; (8002694 <testHandler+0x374>)
 8002514:	7c1a      	ldrb	r2, [r3, #16]
 8002516:	2108      	movs	r1, #8
 8002518:	430a      	orrs	r2, r1
 800251a:	741a      	strb	r2, [r3, #16]
			flags.testProgress = 1;
 800251c:	4b5d      	ldr	r3, [pc, #372]	; (8002694 <testHandler+0x374>)
 800251e:	7e1a      	ldrb	r2, [r3, #24]
 8002520:	2102      	movs	r1, #2
 8002522:	430a      	orrs	r2, r1
 8002524:	761a      	strb	r2, [r3, #24]

			testPhase++;
 8002526:	4b5c      	ldr	r3, [pc, #368]	; (8002698 <testHandler+0x378>)
 8002528:	781b      	ldrb	r3, [r3, #0]
 800252a:	3301      	adds	r3, #1
 800252c:	b2da      	uxtb	r2, r3
 800252e:	4b5a      	ldr	r3, [pc, #360]	; (8002698 <testHandler+0x378>)
 8002530:	701a      	strb	r2, [r3, #0]

			LOAD_MIN_OFF;
 8002532:	4b5e      	ldr	r3, [pc, #376]	; (80026ac <testHandler+0x38c>)
 8002534:	2200      	movs	r2, #0
 8002536:	2180      	movs	r1, #128	; 0x80
 8002538:	0018      	movs	r0, r3
 800253a:	f001 fa1e 	bl	800397a <HAL_GPIO_WritePin>
			LOAD_MAX_OFF;
 800253e:	4b5b      	ldr	r3, [pc, #364]	; (80026ac <testHandler+0x38c>)
 8002540:	2200      	movs	r2, #0
 8002542:	2140      	movs	r1, #64	; 0x40
 8002544:	0018      	movs	r0, r3
 8002546:	f001 fa18 	bl	800397a <HAL_GPIO_WritePin>

			PROGRESS_ON(*sourceInTesting, PROGRESS_LED2);
 800254a:	4b59      	ldr	r3, [pc, #356]	; (80026b0 <testHandler+0x390>)
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	781a      	ldrb	r2, [r3, #0]
 8002550:	4b57      	ldr	r3, [pc, #348]	; (80026b0 <testHandler+0x390>)
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	2110      	movs	r1, #16
 8002556:	430a      	orrs	r2, r1
 8002558:	b2d2      	uxtb	r2, r2
 800255a:	701a      	strb	r2, [r3, #0]
			PWR_OFF(*sourceInTesting);
 800255c:	4b54      	ldr	r3, [pc, #336]	; (80026b0 <testHandler+0x390>)
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	781a      	ldrb	r2, [r3, #0]
 8002562:	4b53      	ldr	r3, [pc, #332]	; (80026b0 <testHandler+0x390>)
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	2101      	movs	r1, #1
 8002568:	430a      	orrs	r2, r1
 800256a:	b2d2      	uxtb	r2, r2
 800256c:	701a      	strb	r2, [r3, #0]
			sendData();
 800256e:	f7ff fc8b 	bl	8001e88 <sendData>

			//___Nulování času___//
			for(int i = 1; i < 4; i++)
 8002572:	2301      	movs	r3, #1
 8002574:	63bb      	str	r3, [r7, #56]	; 0x38
 8002576:	e007      	b.n	8002588 <testHandler+0x268>
			{
				sysTime[i] = 0;
 8002578:	4b4b      	ldr	r3, [pc, #300]	; (80026a8 <testHandler+0x388>)
 800257a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800257c:	0092      	lsls	r2, r2, #2
 800257e:	2100      	movs	r1, #0
 8002580:	50d1      	str	r1, [r2, r3]
			for(int i = 1; i < 4; i++)
 8002582:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002584:	3301      	adds	r3, #1
 8002586:	63bb      	str	r3, [r7, #56]	; 0x38
 8002588:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800258a:	2b03      	cmp	r3, #3
 800258c:	ddf4      	ble.n	8002578 <testHandler+0x258>
			}
		}
		break;
 800258e:	e07d      	b.n	800268c <testHandler+0x36c>
	case BATTERY_TEST:
		if(flags.time.sec)	//___Změna času___//
 8002590:	4b40      	ldr	r3, [pc, #256]	; (8002694 <testHandler+0x374>)
 8002592:	781b      	ldrb	r3, [r3, #0]
 8002594:	2202      	movs	r2, #2
 8002596:	4013      	ands	r3, r2
 8002598:	b2db      	uxtb	r3, r3
 800259a:	2b00      	cmp	r3, #0
 800259c:	d025      	beq.n	80025ea <testHandler+0x2ca>
		{
			char time[9] = {0};
 800259e:	1d3b      	adds	r3, r7, #4
 80025a0:	2200      	movs	r2, #0
 80025a2:	601a      	str	r2, [r3, #0]
 80025a4:	3304      	adds	r3, #4
 80025a6:	2205      	movs	r2, #5
 80025a8:	2100      	movs	r1, #0
 80025aa:	0018      	movs	r0, r3
 80025ac:	f00a fb67 	bl	800cc7e <memset>
			sprintf(time, "%d:%d:%d", 60-sysTime[SYSTIME_SEC], 60-sysTime[SYSTIME_MIN], 3-sysTime[SYSTIME_HOUR]);
 80025b0:	4b3d      	ldr	r3, [pc, #244]	; (80026a8 <testHandler+0x388>)
 80025b2:	685b      	ldr	r3, [r3, #4]
 80025b4:	223c      	movs	r2, #60	; 0x3c
 80025b6:	1ad2      	subs	r2, r2, r3
 80025b8:	4b3b      	ldr	r3, [pc, #236]	; (80026a8 <testHandler+0x388>)
 80025ba:	689b      	ldr	r3, [r3, #8]
 80025bc:	213c      	movs	r1, #60	; 0x3c
 80025be:	1acc      	subs	r4, r1, r3
 80025c0:	4b39      	ldr	r3, [pc, #228]	; (80026a8 <testHandler+0x388>)
 80025c2:	68db      	ldr	r3, [r3, #12]
 80025c4:	2103      	movs	r1, #3
 80025c6:	1acb      	subs	r3, r1, r3
 80025c8:	493a      	ldr	r1, [pc, #232]	; (80026b4 <testHandler+0x394>)
 80025ca:	1d38      	adds	r0, r7, #4
 80025cc:	9300      	str	r3, [sp, #0]
 80025ce:	0023      	movs	r3, r4
 80025d0:	f00a fc18 	bl	800ce04 <siprintf>
			//writeRow(time, strlen(time), 0, LEFT);

			PROGRESS_RUNNING(*sourceInTesting, PROGRESS_LED3);	//blikání třetí progress led
 80025d4:	4b36      	ldr	r3, [pc, #216]	; (80026b0 <testHandler+0x390>)
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	781a      	ldrb	r2, [r3, #0]
 80025da:	4b35      	ldr	r3, [pc, #212]	; (80026b0 <testHandler+0x390>)
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	2108      	movs	r1, #8
 80025e0:	404a      	eors	r2, r1
 80025e2:	b2d2      	uxtb	r2, r2
 80025e4:	701a      	strb	r2, [r3, #0]
			sendData();
 80025e6:	f7ff fc4f 	bl	8001e88 <sendData>
		}
#ifdef __DEBUG_TEST__
		if(sysTime[SYSTIME_MIN] != 0 && flags.time.min)	//___Měření napětí každou minutu___//
 80025ea:	4b2f      	ldr	r3, [pc, #188]	; (80026a8 <testHandler+0x388>)
 80025ec:	689b      	ldr	r3, [r3, #8]
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d00b      	beq.n	800260a <testHandler+0x2ea>
 80025f2:	4b28      	ldr	r3, [pc, #160]	; (8002694 <testHandler+0x374>)
 80025f4:	781b      	ldrb	r3, [r3, #0]
 80025f6:	2204      	movs	r2, #4
 80025f8:	4013      	ands	r3, r2
 80025fa:	b2db      	uxtb	r3, r3
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d004      	beq.n	800260a <testHandler+0x2ea>
#else
		if(!(sysTime[SYSTIME_MIN] % 5) && sysTime[SYSTIME_MIN] != 0 && flags.time.min)	//___Měření napětí každých pět minut___//
#endif
		{
			flags.meas.measRequest = 1;
 8002600:	4b24      	ldr	r3, [pc, #144]	; (8002694 <testHandler+0x374>)
 8002602:	7d1a      	ldrb	r2, [r3, #20]
 8002604:	2101      	movs	r1, #1
 8002606:	430a      	orrs	r2, r1
 8002608:	751a      	strb	r2, [r3, #20]
		}
#ifdef __DEBUG_TEST__
		if(sysTime[SYSTIME_MIN] >= 3)	//___Po třech minutách je měření u konce___//
 800260a:	4b27      	ldr	r3, [pc, #156]	; (80026a8 <testHandler+0x388>)
 800260c:	689b      	ldr	r3, [r3, #8]
 800260e:	2b02      	cmp	r3, #2
 8002610:	dd3e      	ble.n	8002690 <testHandler+0x370>
#else
		if(sysTime[SYSTIME_MIN] >= 15)	//___Po patnácti minutách je měření u konce___//
#endif
		{
			testPhase++;
 8002612:	4b21      	ldr	r3, [pc, #132]	; (8002698 <testHandler+0x378>)
 8002614:	781b      	ldrb	r3, [r3, #0]
 8002616:	3301      	adds	r3, #1
 8002618:	b2da      	uxtb	r2, r3
 800261a:	4b1f      	ldr	r3, [pc, #124]	; (8002698 <testHandler+0x378>)
 800261c:	701a      	strb	r2, [r3, #0]
		}
		break;
 800261e:	e037      	b.n	8002690 <testHandler+0x370>
	case BATTERY_TEST_DONE:
		if(!flags.meas.measRunning)
 8002620:	4b1c      	ldr	r3, [pc, #112]	; (8002694 <testHandler+0x374>)
 8002622:	7d1b      	ldrb	r3, [r3, #20]
 8002624:	2208      	movs	r2, #8
 8002626:	4013      	ands	r3, r2
 8002628:	b2db      	uxtb	r3, r3
 800262a:	2b00      	cmp	r3, #0
 800262c:	d144      	bne.n	80026b8 <testHandler+0x398>
		{
			flags.ui.done = 1;
 800262e:	4b19      	ldr	r3, [pc, #100]	; (8002694 <testHandler+0x374>)
 8002630:	7c1a      	ldrb	r2, [r3, #16]
 8002632:	2110      	movs	r1, #16
 8002634:	430a      	orrs	r2, r1
 8002636:	741a      	strb	r2, [r3, #16]
			flags.testProgress = 1;
 8002638:	4b16      	ldr	r3, [pc, #88]	; (8002694 <testHandler+0x374>)
 800263a:	7e1a      	ldrb	r2, [r3, #24]
 800263c:	2102      	movs	r1, #2
 800263e:	430a      	orrs	r2, r1
 8002640:	761a      	strb	r2, [r3, #24]

			//Zobrazit text na displej

			PROGRESS_ON(*sourceInTesting, PROGRESS_LED3);
 8002642:	4b1b      	ldr	r3, [pc, #108]	; (80026b0 <testHandler+0x390>)
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	781a      	ldrb	r2, [r3, #0]
 8002648:	4b19      	ldr	r3, [pc, #100]	; (80026b0 <testHandler+0x390>)
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	2108      	movs	r1, #8
 800264e:	430a      	orrs	r2, r1
 8002650:	b2d2      	uxtb	r2, r2
 8002652:	701a      	strb	r2, [r3, #0]
			RELAY_OFF(*sourceInTesting);
 8002654:	4b16      	ldr	r3, [pc, #88]	; (80026b0 <testHandler+0x390>)
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	781a      	ldrb	r2, [r3, #0]
 800265a:	4b15      	ldr	r3, [pc, #84]	; (80026b0 <testHandler+0x390>)
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	2102      	movs	r1, #2
 8002660:	438a      	bics	r2, r1
 8002662:	b2d2      	uxtb	r2, r2
 8002664:	701a      	strb	r2, [r3, #0]
			PWR_ON(*sourceInTesting);
 8002666:	4b12      	ldr	r3, [pc, #72]	; (80026b0 <testHandler+0x390>)
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	781a      	ldrb	r2, [r3, #0]
 800266c:	4b10      	ldr	r3, [pc, #64]	; (80026b0 <testHandler+0x390>)
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	2101      	movs	r1, #1
 8002672:	438a      	bics	r2, r1
 8002674:	b2d2      	uxtb	r2, r2
 8002676:	701a      	strb	r2, [r3, #0]
			sendData();
 8002678:	f7ff fc06 	bl	8001e88 <sendData>

			testPhase = WAITING;
 800267c:	4b06      	ldr	r3, [pc, #24]	; (8002698 <testHandler+0x378>)
 800267e:	2200      	movs	r2, #0
 8002680:	701a      	strb	r2, [r3, #0]
		}
		break;
 8002682:	e019      	b.n	80026b8 <testHandler+0x398>
		break;
 8002684:	46c0      	nop			; (mov r8, r8)
 8002686:	e018      	b.n	80026ba <testHandler+0x39a>
		break;
 8002688:	46c0      	nop			; (mov r8, r8)
 800268a:	e016      	b.n	80026ba <testHandler+0x39a>
		break;
 800268c:	46c0      	nop			; (mov r8, r8)
 800268e:	e014      	b.n	80026ba <testHandler+0x39a>
		break;
 8002690:	46c0      	nop			; (mov r8, r8)
 8002692:	e012      	b.n	80026ba <testHandler+0x39a>
 8002694:	20000630 	.word	0x20000630
 8002698:	2000025c 	.word	0x2000025c
 800269c:	0800d500 	.word	0x0800d500
 80026a0:	20000490 	.word	0x20000490
 80026a4:	0800d610 	.word	0x0800d610
 80026a8:	2000023c 	.word	0x2000023c
 80026ac:	48000800 	.word	0x48000800
 80026b0:	20000698 	.word	0x20000698
 80026b4:	0800d4f4 	.word	0x0800d4f4
		break;
 80026b8:	46c0      	nop			; (mov r8, r8)

	}
}
 80026ba:	46c0      	nop			; (mov r8, r8)
 80026bc:	46bd      	mov	sp, r7
 80026be:	b010      	add	sp, #64	; 0x40
 80026c0:	bdb0      	pop	{r4, r5, r7, pc}
 80026c2:	46c0      	nop			; (mov r8, r8)

080026c4 <startTest>:

//_____Funkce pro zahájení testu_____//
static void startTest(/*ukazatel na zdroj*/)
{
 80026c4:	b580      	push	{r7, lr}
 80026c6:	b082      	sub	sp, #8
 80026c8:	af00      	add	r7, sp, #0
	flags.ui.shortBeep = 1;
 80026ca:	4b28      	ldr	r3, [pc, #160]	; (800276c <startTest+0xa8>)
 80026cc:	7c1a      	ldrb	r2, [r3, #16]
 80026ce:	2101      	movs	r1, #1
 80026d0:	430a      	orrs	r2, r1
 80026d2:	741a      	strb	r2, [r3, #16]
	testPhase = START;
 80026d4:	4b26      	ldr	r3, [pc, #152]	; (8002770 <startTest+0xac>)
 80026d6:	2201      	movs	r2, #1
 80026d8:	701a      	strb	r2, [r3, #0]
	testNum = 0;
 80026da:	4b26      	ldr	r3, [pc, #152]	; (8002774 <startTest+0xb0>)
 80026dc:	2200      	movs	r2, #0
 80026de:	601a      	str	r2, [r3, #0]
	flags.testProgress = 1;
 80026e0:	4b22      	ldr	r3, [pc, #136]	; (800276c <startTest+0xa8>)
 80026e2:	7e1a      	ldrb	r2, [r3, #24]
 80026e4:	2102      	movs	r1, #2
 80026e6:	430a      	orrs	r2, r1
 80026e8:	761a      	strb	r2, [r3, #24]

	sourceInTesting = &regValues[0/*ukazatel na zdroj*/];
 80026ea:	4b23      	ldr	r3, [pc, #140]	; (8002778 <startTest+0xb4>)
 80026ec:	681a      	ldr	r2, [r3, #0]
 80026ee:	4b23      	ldr	r3, [pc, #140]	; (800277c <startTest+0xb8>)
 80026f0:	601a      	str	r2, [r3, #0]

	for(int i = 0; i < regCount; i++)
 80026f2:	2300      	movs	r3, #0
 80026f4:	607b      	str	r3, [r7, #4]
 80026f6:	e008      	b.n	800270a <startTest+0x46>
	{
		regValues[i] = 0;
 80026f8:	4b1f      	ldr	r3, [pc, #124]	; (8002778 <startTest+0xb4>)
 80026fa:	681a      	ldr	r2, [r3, #0]
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	18d3      	adds	r3, r2, r3
 8002700:	2200      	movs	r2, #0
 8002702:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < regCount; i++)
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	3301      	adds	r3, #1
 8002708:	607b      	str	r3, [r7, #4]
 800270a:	4b1d      	ldr	r3, [pc, #116]	; (8002780 <startTest+0xbc>)
 800270c:	781b      	ldrb	r3, [r3, #0]
 800270e:	001a      	movs	r2, r3
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	4293      	cmp	r3, r2
 8002714:	dbf0      	blt.n	80026f8 <startTest+0x34>
	}
	PROGRESS_ON(*sourceInTesting, PROGRESS_LED1);	//rozsvítit první ledku progress
 8002716:	4b19      	ldr	r3, [pc, #100]	; (800277c <startTest+0xb8>)
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	781a      	ldrb	r2, [r3, #0]
 800271c:	4b17      	ldr	r3, [pc, #92]	; (800277c <startTest+0xb8>)
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	2120      	movs	r1, #32
 8002722:	430a      	orrs	r2, r1
 8002724:	b2d2      	uxtb	r2, r2
 8002726:	701a      	strb	r2, [r3, #0]
	RELAY_ON(*sourceInTesting);	//připojit relé
 8002728:	4b14      	ldr	r3, [pc, #80]	; (800277c <startTest+0xb8>)
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	781a      	ldrb	r2, [r3, #0]
 800272e:	4b13      	ldr	r3, [pc, #76]	; (800277c <startTest+0xb8>)
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	2102      	movs	r1, #2
 8002734:	430a      	orrs	r2, r1
 8002736:	b2d2      	uxtb	r2, r2
 8002738:	701a      	strb	r2, [r3, #0]

	sendData();	//poslat konfiguraci shift registrům
 800273a:	f7ff fba5 	bl	8001e88 <sendData>
	//Zobrazit text na displej

	//___Nulování času___//
	for(int i = 1; i < 4; i++)
 800273e:	2301      	movs	r3, #1
 8002740:	603b      	str	r3, [r7, #0]
 8002742:	e007      	b.n	8002754 <startTest+0x90>
	{
		sysTime[i] = 0;
 8002744:	4b0f      	ldr	r3, [pc, #60]	; (8002784 <startTest+0xc0>)
 8002746:	683a      	ldr	r2, [r7, #0]
 8002748:	0092      	lsls	r2, r2, #2
 800274a:	2100      	movs	r1, #0
 800274c:	50d1      	str	r1, [r2, r3]
	for(int i = 1; i < 4; i++)
 800274e:	683b      	ldr	r3, [r7, #0]
 8002750:	3301      	adds	r3, #1
 8002752:	603b      	str	r3, [r7, #0]
 8002754:	683b      	ldr	r3, [r7, #0]
 8002756:	2b03      	cmp	r3, #3
 8002758:	ddf4      	ble.n	8002744 <startTest+0x80>
	}

	flags.instructions.startRequest = 0;
 800275a:	4b04      	ldr	r3, [pc, #16]	; (800276c <startTest+0xa8>)
 800275c:	7b1a      	ldrb	r2, [r3, #12]
 800275e:	2101      	movs	r1, #1
 8002760:	438a      	bics	r2, r1
 8002762:	731a      	strb	r2, [r3, #12]
}
 8002764:	46c0      	nop			; (mov r8, r8)
 8002766:	46bd      	mov	sp, r7
 8002768:	b002      	add	sp, #8
 800276a:	bd80      	pop	{r7, pc}
 800276c:	20000630 	.word	0x20000630
 8002770:	2000025c 	.word	0x2000025c
 8002774:	20000260 	.word	0x20000260
 8002778:	2000068c 	.word	0x2000068c
 800277c:	20000698 	.word	0x20000698
 8002780:	20000691 	.word	0x20000691
 8002784:	2000023c 	.word	0x2000023c

08002788 <stopTest>:

//_____Funkce pro ukončení testu_____//
static void stopTest()
{
 8002788:	b580      	push	{r7, lr}
 800278a:	af00      	add	r7, sp, #0
	flags.ui.longBeep = 1;
 800278c:	4b15      	ldr	r3, [pc, #84]	; (80027e4 <stopTest+0x5c>)
 800278e:	7c1a      	ldrb	r2, [r3, #16]
 8002790:	2102      	movs	r1, #2
 8002792:	430a      	orrs	r2, r1
 8002794:	741a      	strb	r2, [r3, #16]
	testPhase = WAITING;
 8002796:	4b14      	ldr	r3, [pc, #80]	; (80027e8 <stopTest+0x60>)
 8002798:	2200      	movs	r2, #0
 800279a:	701a      	strb	r2, [r3, #0]

	//Zobrazit text na displej
	LOAD_MIN_OFF;
 800279c:	4b13      	ldr	r3, [pc, #76]	; (80027ec <stopTest+0x64>)
 800279e:	2200      	movs	r2, #0
 80027a0:	2180      	movs	r1, #128	; 0x80
 80027a2:	0018      	movs	r0, r3
 80027a4:	f001 f8e9 	bl	800397a <HAL_GPIO_WritePin>
	LOAD_MAX_OFF;
 80027a8:	4b10      	ldr	r3, [pc, #64]	; (80027ec <stopTest+0x64>)
 80027aa:	2200      	movs	r2, #0
 80027ac:	2140      	movs	r1, #64	; 0x40
 80027ae:	0018      	movs	r0, r3
 80027b0:	f001 f8e3 	bl	800397a <HAL_GPIO_WritePin>

	*sourceInTesting = 0;
 80027b4:	4b0e      	ldr	r3, [pc, #56]	; (80027f0 <stopTest+0x68>)
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	2200      	movs	r2, #0
 80027ba:	701a      	strb	r2, [r3, #0]
	ERROR_ON(*sourceInTesting);
 80027bc:	4b0c      	ldr	r3, [pc, #48]	; (80027f0 <stopTest+0x68>)
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	781a      	ldrb	r2, [r3, #0]
 80027c2:	4b0b      	ldr	r3, [pc, #44]	; (80027f0 <stopTest+0x68>)
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	2104      	movs	r1, #4
 80027c8:	430a      	orrs	r2, r1
 80027ca:	b2d2      	uxtb	r2, r2
 80027cc:	701a      	strb	r2, [r3, #0]
	sendData();
 80027ce:	f7ff fb5b 	bl	8001e88 <sendData>

	flags.instructions.stopRequest = 0;
 80027d2:	4b04      	ldr	r3, [pc, #16]	; (80027e4 <stopTest+0x5c>)
 80027d4:	7b1a      	ldrb	r2, [r3, #12]
 80027d6:	2102      	movs	r1, #2
 80027d8:	438a      	bics	r2, r1
 80027da:	731a      	strb	r2, [r3, #12]
}
 80027dc:	46c0      	nop			; (mov r8, r8)
 80027de:	46bd      	mov	sp, r7
 80027e0:	bd80      	pop	{r7, pc}
 80027e2:	46c0      	nop			; (mov r8, r8)
 80027e4:	20000630 	.word	0x20000630
 80027e8:	2000025c 	.word	0x2000025c
 80027ec:	48000800 	.word	0x48000800
 80027f0:	20000698 	.word	0x20000698

080027f4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80027f4:	480d      	ldr	r0, [pc, #52]	; (800282c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80027f6:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80027f8:	480d      	ldr	r0, [pc, #52]	; (8002830 <LoopForever+0x6>)
  ldr r1, =_edata
 80027fa:	490e      	ldr	r1, [pc, #56]	; (8002834 <LoopForever+0xa>)
  ldr r2, =_sidata
 80027fc:	4a0e      	ldr	r2, [pc, #56]	; (8002838 <LoopForever+0xe>)
  movs r3, #0
 80027fe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002800:	e002      	b.n	8002808 <LoopCopyDataInit>

08002802 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002802:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002804:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002806:	3304      	adds	r3, #4

08002808 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002808:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800280a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800280c:	d3f9      	bcc.n	8002802 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800280e:	4a0b      	ldr	r2, [pc, #44]	; (800283c <LoopForever+0x12>)
  ldr r4, =_ebss
 8002810:	4c0b      	ldr	r4, [pc, #44]	; (8002840 <LoopForever+0x16>)
  movs r3, #0
 8002812:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002814:	e001      	b.n	800281a <LoopFillZerobss>

08002816 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002816:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002818:	3204      	adds	r2, #4

0800281a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800281a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800281c:	d3fb      	bcc.n	8002816 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800281e:	f7ff fd6f 	bl	8002300 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8002822:	f00a f9eb 	bl	800cbfc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002826:	f7fe fad7 	bl	8000dd8 <main>

0800282a <LoopForever>:

LoopForever:
    b LoopForever
 800282a:	e7fe      	b.n	800282a <LoopForever>
  ldr   r0, =_estack
 800282c:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8002830:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002834:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8002838:	0800d758 	.word	0x0800d758
  ldr r2, =_sbss
 800283c:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8002840:	2000163c 	.word	0x2000163c

08002844 <CEC_CAN_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002844:	e7fe      	b.n	8002844 <CEC_CAN_IRQHandler>
	...

08002848 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002848:	b580      	push	{r7, lr}
 800284a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800284c:	4b07      	ldr	r3, [pc, #28]	; (800286c <HAL_Init+0x24>)
 800284e:	681a      	ldr	r2, [r3, #0]
 8002850:	4b06      	ldr	r3, [pc, #24]	; (800286c <HAL_Init+0x24>)
 8002852:	2110      	movs	r1, #16
 8002854:	430a      	orrs	r2, r1
 8002856:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8002858:	2003      	movs	r0, #3
 800285a:	f000 f809 	bl	8002870 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800285e:	f7ff fb47 	bl	8001ef0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002862:	2300      	movs	r3, #0
}
 8002864:	0018      	movs	r0, r3
 8002866:	46bd      	mov	sp, r7
 8002868:	bd80      	pop	{r7, pc}
 800286a:	46c0      	nop			; (mov r8, r8)
 800286c:	40022000 	.word	0x40022000

08002870 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002870:	b590      	push	{r4, r7, lr}
 8002872:	b083      	sub	sp, #12
 8002874:	af00      	add	r7, sp, #0
 8002876:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002878:	4b14      	ldr	r3, [pc, #80]	; (80028cc <HAL_InitTick+0x5c>)
 800287a:	681c      	ldr	r4, [r3, #0]
 800287c:	4b14      	ldr	r3, [pc, #80]	; (80028d0 <HAL_InitTick+0x60>)
 800287e:	781b      	ldrb	r3, [r3, #0]
 8002880:	0019      	movs	r1, r3
 8002882:	23fa      	movs	r3, #250	; 0xfa
 8002884:	0098      	lsls	r0, r3, #2
 8002886:	f7fd fc51 	bl	800012c <__udivsi3>
 800288a:	0003      	movs	r3, r0
 800288c:	0019      	movs	r1, r3
 800288e:	0020      	movs	r0, r4
 8002890:	f7fd fc4c 	bl	800012c <__udivsi3>
 8002894:	0003      	movs	r3, r0
 8002896:	0018      	movs	r0, r3
 8002898:	f000 fe4f 	bl	800353a <HAL_SYSTICK_Config>
 800289c:	1e03      	subs	r3, r0, #0
 800289e:	d001      	beq.n	80028a4 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 80028a0:	2301      	movs	r3, #1
 80028a2:	e00f      	b.n	80028c4 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	2b03      	cmp	r3, #3
 80028a8:	d80b      	bhi.n	80028c2 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80028aa:	6879      	ldr	r1, [r7, #4]
 80028ac:	2301      	movs	r3, #1
 80028ae:	425b      	negs	r3, r3
 80028b0:	2200      	movs	r2, #0
 80028b2:	0018      	movs	r0, r3
 80028b4:	f000 fe1c 	bl	80034f0 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80028b8:	4b06      	ldr	r3, [pc, #24]	; (80028d4 <HAL_InitTick+0x64>)
 80028ba:	687a      	ldr	r2, [r7, #4]
 80028bc:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 80028be:	2300      	movs	r3, #0
 80028c0:	e000      	b.n	80028c4 <HAL_InitTick+0x54>
    return HAL_ERROR;
 80028c2:	2301      	movs	r3, #1
}
 80028c4:	0018      	movs	r0, r3
 80028c6:	46bd      	mov	sp, r7
 80028c8:	b003      	add	sp, #12
 80028ca:	bd90      	pop	{r4, r7, pc}
 80028cc:	20000000 	.word	0x20000000
 80028d0:	20000008 	.word	0x20000008
 80028d4:	20000004 	.word	0x20000004

080028d8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80028d8:	b580      	push	{r7, lr}
 80028da:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80028dc:	4b05      	ldr	r3, [pc, #20]	; (80028f4 <HAL_IncTick+0x1c>)
 80028de:	781b      	ldrb	r3, [r3, #0]
 80028e0:	001a      	movs	r2, r3
 80028e2:	4b05      	ldr	r3, [pc, #20]	; (80028f8 <HAL_IncTick+0x20>)
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	18d2      	adds	r2, r2, r3
 80028e8:	4b03      	ldr	r3, [pc, #12]	; (80028f8 <HAL_IncTick+0x20>)
 80028ea:	601a      	str	r2, [r3, #0]
}
 80028ec:	46c0      	nop			; (mov r8, r8)
 80028ee:	46bd      	mov	sp, r7
 80028f0:	bd80      	pop	{r7, pc}
 80028f2:	46c0      	nop			; (mov r8, r8)
 80028f4:	20000008 	.word	0x20000008
 80028f8:	2000069c 	.word	0x2000069c

080028fc <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80028fc:	b580      	push	{r7, lr}
 80028fe:	af00      	add	r7, sp, #0
  return uwTick;
 8002900:	4b02      	ldr	r3, [pc, #8]	; (800290c <HAL_GetTick+0x10>)
 8002902:	681b      	ldr	r3, [r3, #0]
}
 8002904:	0018      	movs	r0, r3
 8002906:	46bd      	mov	sp, r7
 8002908:	bd80      	pop	{r7, pc}
 800290a:	46c0      	nop			; (mov r8, r8)
 800290c:	2000069c 	.word	0x2000069c

08002910 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002910:	b580      	push	{r7, lr}
 8002912:	b084      	sub	sp, #16
 8002914:	af00      	add	r7, sp, #0
 8002916:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002918:	f7ff fff0 	bl	80028fc <HAL_GetTick>
 800291c:	0003      	movs	r3, r0
 800291e:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	3301      	adds	r3, #1
 8002928:	d005      	beq.n	8002936 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800292a:	4b0a      	ldr	r3, [pc, #40]	; (8002954 <HAL_Delay+0x44>)
 800292c:	781b      	ldrb	r3, [r3, #0]
 800292e:	001a      	movs	r2, r3
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	189b      	adds	r3, r3, r2
 8002934:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8002936:	46c0      	nop			; (mov r8, r8)
 8002938:	f7ff ffe0 	bl	80028fc <HAL_GetTick>
 800293c:	0002      	movs	r2, r0
 800293e:	68bb      	ldr	r3, [r7, #8]
 8002940:	1ad3      	subs	r3, r2, r3
 8002942:	68fa      	ldr	r2, [r7, #12]
 8002944:	429a      	cmp	r2, r3
 8002946:	d8f7      	bhi.n	8002938 <HAL_Delay+0x28>
  {
  }
}
 8002948:	46c0      	nop			; (mov r8, r8)
 800294a:	46c0      	nop			; (mov r8, r8)
 800294c:	46bd      	mov	sp, r7
 800294e:	b004      	add	sp, #16
 8002950:	bd80      	pop	{r7, pc}
 8002952:	46c0      	nop			; (mov r8, r8)
 8002954:	20000008 	.word	0x20000008

08002958 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002958:	b580      	push	{r7, lr}
 800295a:	b084      	sub	sp, #16
 800295c:	af00      	add	r7, sp, #0
 800295e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002960:	230f      	movs	r3, #15
 8002962:	18fb      	adds	r3, r7, r3
 8002964:	2200      	movs	r2, #0
 8002966:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0U;
 8002968:	2300      	movs	r3, #0
 800296a:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if(hadc == NULL)
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	2b00      	cmp	r3, #0
 8002970:	d101      	bne.n	8002976 <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 8002972:	2301      	movs	r3, #1
 8002974:	e125      	b.n	8002bc2 <HAL_ADC_Init+0x26a>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800297a:	2b00      	cmp	r3, #0
 800297c:	d10a      	bne.n	8002994 <HAL_ADC_Init+0x3c>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	2200      	movs	r2, #0
 8002982:	63da      	str	r2, [r3, #60]	; 0x3c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	2234      	movs	r2, #52	; 0x34
 8002988:	2100      	movs	r1, #0
 800298a:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	0018      	movs	r0, r3
 8002990:	f7ff fad2 	bl	8001f38 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */ 
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002998:	2210      	movs	r2, #16
 800299a:	4013      	ands	r3, r2
 800299c:	d000      	beq.n	80029a0 <HAL_ADC_Init+0x48>
 800299e:	e103      	b.n	8002ba8 <HAL_ADC_Init+0x250>
 80029a0:	230f      	movs	r3, #15
 80029a2:	18fb      	adds	r3, r7, r3
 80029a4:	781b      	ldrb	r3, [r3, #0]
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d000      	beq.n	80029ac <HAL_ADC_Init+0x54>
 80029aa:	e0fd      	b.n	8002ba8 <HAL_ADC_Init+0x250>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	689b      	ldr	r3, [r3, #8]
 80029b2:	2204      	movs	r2, #4
 80029b4:	4013      	ands	r3, r2
      (tmp_hal_status == HAL_OK)                                &&
 80029b6:	d000      	beq.n	80029ba <HAL_ADC_Init+0x62>
 80029b8:	e0f6      	b.n	8002ba8 <HAL_ADC_Init+0x250>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029be:	4a83      	ldr	r2, [pc, #524]	; (8002bcc <HAL_ADC_Init+0x274>)
 80029c0:	4013      	ands	r3, r2
 80029c2:	2202      	movs	r2, #2
 80029c4:	431a      	orrs	r2, r3
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	639a      	str	r2, [r3, #56]	; 0x38
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - ADC clock mode                                                      */
    /*  - ADC clock prescaler                                                 */
    /*  - ADC resolution                                                      */
    if (ADC_IS_ENABLE(hadc) == RESET)
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	689b      	ldr	r3, [r3, #8]
 80029d0:	2203      	movs	r2, #3
 80029d2:	4013      	ands	r3, r2
 80029d4:	2b01      	cmp	r3, #1
 80029d6:	d112      	bne.n	80029fe <HAL_ADC_Init+0xa6>
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	2201      	movs	r2, #1
 80029e0:	4013      	ands	r3, r2
 80029e2:	2b01      	cmp	r3, #1
 80029e4:	d009      	beq.n	80029fa <HAL_ADC_Init+0xa2>
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	68da      	ldr	r2, [r3, #12]
 80029ec:	2380      	movs	r3, #128	; 0x80
 80029ee:	021b      	lsls	r3, r3, #8
 80029f0:	401a      	ands	r2, r3
 80029f2:	2380      	movs	r3, #128	; 0x80
 80029f4:	021b      	lsls	r3, r3, #8
 80029f6:	429a      	cmp	r2, r3
 80029f8:	d101      	bne.n	80029fe <HAL_ADC_Init+0xa6>
 80029fa:	2301      	movs	r3, #1
 80029fc:	e000      	b.n	8002a00 <HAL_ADC_Init+0xa8>
 80029fe:	2300      	movs	r3, #0
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d116      	bne.n	8002a32 <HAL_ADC_Init+0xda>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
     
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	68db      	ldr	r3, [r3, #12]
 8002a0a:	2218      	movs	r2, #24
 8002a0c:	4393      	bics	r3, r2
 8002a0e:	0019      	movs	r1, r3
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	689a      	ldr	r2, [r3, #8]
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	430a      	orrs	r2, r1
 8002a1a:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler                                                 */
      MODIFY_REG(hadc->Instance->CFGR2    ,
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	691b      	ldr	r3, [r3, #16]
 8002a22:	009b      	lsls	r3, r3, #2
 8002a24:	0899      	lsrs	r1, r3, #2
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	685a      	ldr	r2, [r3, #4]
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	430a      	orrs	r2, r1
 8002a30:	611a      	str	r2, [r3, #16]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	68da      	ldr	r2, [r3, #12]
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	4964      	ldr	r1, [pc, #400]	; (8002bd0 <HAL_ADC_Init+0x278>)
 8002a3e:	400a      	ands	r2, r1
 8002a40:	60da      	str	r2, [r3, #12]
                                ADC_CFGR1_EXTEN   |
                                ADC_CFGR1_ALIGN   |
                                ADC_CFGR1_SCANDIR |
                                ADC_CFGR1_DMACFG   );

    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	7e1b      	ldrb	r3, [r3, #24]
 8002a46:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	7e5b      	ldrb	r3, [r3, #25]
 8002a4c:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002a4e:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	7e9b      	ldrb	r3, [r3, #26]
 8002a54:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8002a56:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a5c:	2b01      	cmp	r3, #1
 8002a5e:	d002      	beq.n	8002a66 <HAL_ADC_Init+0x10e>
 8002a60:	2380      	movs	r3, #128	; 0x80
 8002a62:	015b      	lsls	r3, r3, #5
 8002a64:	e000      	b.n	8002a68 <HAL_ADC_Init+0x110>
 8002a66:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8002a68:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                             |
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8002a6e:	431a      	orrs	r2, r3
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	691b      	ldr	r3, [r3, #16]
 8002a74:	2b02      	cmp	r3, #2
 8002a76:	d101      	bne.n	8002a7c <HAL_ADC_Init+0x124>
 8002a78:	2304      	movs	r3, #4
 8002a7a:	e000      	b.n	8002a7e <HAL_ADC_Init+0x126>
 8002a7c:	2300      	movs	r3, #0
                 hadc->Init.DataAlign                                             |
 8002a7e:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	2124      	movs	r1, #36	; 0x24
 8002a84:	5c5b      	ldrb	r3, [r3, r1]
 8002a86:	005b      	lsls	r3, r3, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8002a88:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002a8a:	68ba      	ldr	r2, [r7, #8]
 8002a8c:	4313      	orrs	r3, r2
 8002a8e:	60bb      	str	r3, [r7, #8]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	7edb      	ldrb	r3, [r3, #27]
 8002a94:	2b01      	cmp	r3, #1
 8002a96:	d115      	bne.n	8002ac4 <HAL_ADC_Init+0x16c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	7e9b      	ldrb	r3, [r3, #26]
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d105      	bne.n	8002aac <HAL_ADC_Init+0x154>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8002aa0:	68bb      	ldr	r3, [r7, #8]
 8002aa2:	2280      	movs	r2, #128	; 0x80
 8002aa4:	0252      	lsls	r2, r2, #9
 8002aa6:	4313      	orrs	r3, r2
 8002aa8:	60bb      	str	r3, [r7, #8]
 8002aaa:	e00b      	b.n	8002ac4 <HAL_ADC_Init+0x16c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ab0:	2220      	movs	r2, #32
 8002ab2:	431a      	orrs	r2, r3
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	639a      	str	r2, [r3, #56]	; 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002abc:	2201      	movs	r2, #1
 8002abe:	431a      	orrs	r2, r3
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	63da      	str	r2, [r3, #60]	; 0x3c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	69da      	ldr	r2, [r3, #28]
 8002ac8:	23c2      	movs	r3, #194	; 0xc2
 8002aca:	33ff      	adds	r3, #255	; 0xff
 8002acc:	429a      	cmp	r2, r3
 8002ace:	d007      	beq.n	8002ae0 <HAL_ADC_Init+0x188>
    {
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	69da      	ldr	r2, [r3, #28]
                    hadc->Init.ExternalTrigConvEdge );
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	6a1b      	ldr	r3, [r3, #32]
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8002ad8:	4313      	orrs	r3, r2
 8002ada:	68ba      	ldr	r2, [r7, #8]
 8002adc:	4313      	orrs	r3, r2
 8002ade:	60bb      	str	r3, [r7, #8]
    }
    
    /* Update ADC configuration register with previous settings */
    hadc->Instance->CFGR1 |= tmpCFGR1;
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	68d9      	ldr	r1, [r3, #12]
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	68ba      	ldr	r2, [r7, #8]
 8002aec:	430a      	orrs	r2, r1
 8002aee:	60da      	str	r2, [r3, #12]
    /* Management of parameters "SamplingTimeCommon" and "SamplingTime"       */
    /* (obsolete): sampling time set in this function if parameter            */
    /*  "SamplingTimeCommon" has been set to a valid sampling time.           */
    /* Otherwise, sampling time is set into ADC channel initialization        */
    /* structure with parameter "SamplingTime" (obsolete).                    */
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002af4:	2380      	movs	r3, #128	; 0x80
 8002af6:	055b      	lsls	r3, r3, #21
 8002af8:	429a      	cmp	r2, r3
 8002afa:	d01b      	beq.n	8002b34 <HAL_ADC_Init+0x1dc>
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b00:	2b01      	cmp	r3, #1
 8002b02:	d017      	beq.n	8002b34 <HAL_ADC_Init+0x1dc>
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b08:	2b02      	cmp	r3, #2
 8002b0a:	d013      	beq.n	8002b34 <HAL_ADC_Init+0x1dc>
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b10:	2b03      	cmp	r3, #3
 8002b12:	d00f      	beq.n	8002b34 <HAL_ADC_Init+0x1dc>
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b18:	2b04      	cmp	r3, #4
 8002b1a:	d00b      	beq.n	8002b34 <HAL_ADC_Init+0x1dc>
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b20:	2b05      	cmp	r3, #5
 8002b22:	d007      	beq.n	8002b34 <HAL_ADC_Init+0x1dc>
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b28:	2b06      	cmp	r3, #6
 8002b2a:	d003      	beq.n	8002b34 <HAL_ADC_Init+0x1dc>
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b30:	2b07      	cmp	r3, #7
 8002b32:	d112      	bne.n	8002b5a <HAL_ADC_Init+0x202>
    {
      /* Channel sampling time configuration */
      /* Clear the old sample time */
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	695a      	ldr	r2, [r3, #20]
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	2107      	movs	r1, #7
 8002b40:	438a      	bics	r2, r1
 8002b42:	615a      	str	r2, [r3, #20]
      
      /* Set the new sample time */
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	6959      	ldr	r1, [r3, #20]
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b4e:	2207      	movs	r2, #7
 8002b50:	401a      	ands	r2, r3
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	430a      	orrs	r2, r1
 8002b58:	615a      	str	r2, [r3, #20]
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	68db      	ldr	r3, [r3, #12]
 8002b60:	4a1c      	ldr	r2, [pc, #112]	; (8002bd4 <HAL_ADC_Init+0x27c>)
 8002b62:	4013      	ands	r3, r2
 8002b64:	68ba      	ldr	r2, [r7, #8]
 8002b66:	429a      	cmp	r2, r3
 8002b68:	d10b      	bne.n	8002b82 <HAL_ADC_Init+0x22a>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	2200      	movs	r2, #0
 8002b6e:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b74:	2203      	movs	r2, #3
 8002b76:	4393      	bics	r3, r2
 8002b78:	2201      	movs	r2, #1
 8002b7a:	431a      	orrs	r2, r3
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	639a      	str	r2, [r3, #56]	; 0x38
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8002b80:	e01c      	b.n	8002bbc <HAL_ADC_Init+0x264>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b86:	2212      	movs	r2, #18
 8002b88:	4393      	bics	r3, r2
 8002b8a:	2210      	movs	r2, #16
 8002b8c:	431a      	orrs	r2, r3
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b96:	2201      	movs	r2, #1
 8002b98:	431a      	orrs	r2, r3
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	63da      	str	r2, [r3, #60]	; 0x3c
      
      tmp_hal_status = HAL_ERROR;
 8002b9e:	230f      	movs	r3, #15
 8002ba0:	18fb      	adds	r3, r7, r3
 8002ba2:	2201      	movs	r2, #1
 8002ba4:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8002ba6:	e009      	b.n	8002bbc <HAL_ADC_Init+0x264>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bac:	2210      	movs	r2, #16
 8002bae:	431a      	orrs	r2, r3
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	639a      	str	r2, [r3, #56]	; 0x38
        
    tmp_hal_status = HAL_ERROR;
 8002bb4:	230f      	movs	r3, #15
 8002bb6:	18fb      	adds	r3, r7, r3
 8002bb8:	2201      	movs	r2, #1
 8002bba:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002bbc:	230f      	movs	r3, #15
 8002bbe:	18fb      	adds	r3, r7, r3
 8002bc0:	781b      	ldrb	r3, [r3, #0]
}
 8002bc2:	0018      	movs	r0, r3
 8002bc4:	46bd      	mov	sp, r7
 8002bc6:	b004      	add	sp, #16
 8002bc8:	bd80      	pop	{r7, pc}
 8002bca:	46c0      	nop			; (mov r8, r8)
 8002bcc:	fffffefd 	.word	0xfffffefd
 8002bd0:	fffe0219 	.word	0xfffe0219
 8002bd4:	833fffe7 	.word	0x833fffe7

08002bd8 <HAL_ADC_Start_IT>:
  *         Each of these interruptions has its dedicated callback function.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 8002bd8:	b590      	push	{r4, r7, lr}
 8002bda:	b085      	sub	sp, #20
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002be0:	230f      	movs	r3, #15
 8002be2:	18fb      	adds	r3, r7, r3
 8002be4:	2200      	movs	r2, #0
 8002be6:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
    
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	689b      	ldr	r3, [r3, #8]
 8002bee:	2204      	movs	r2, #4
 8002bf0:	4013      	ands	r3, r2
 8002bf2:	d156      	bne.n	8002ca2 <HAL_ADC_Start_IT+0xca>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	2234      	movs	r2, #52	; 0x34
 8002bf8:	5c9b      	ldrb	r3, [r3, r2]
 8002bfa:	2b01      	cmp	r3, #1
 8002bfc:	d101      	bne.n	8002c02 <HAL_ADC_Start_IT+0x2a>
 8002bfe:	2302      	movs	r3, #2
 8002c00:	e056      	b.n	8002cb0 <HAL_ADC_Start_IT+0xd8>
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	2234      	movs	r2, #52	; 0x34
 8002c06:	2101      	movs	r1, #1
 8002c08:	5499      	strb	r1, [r3, r2]
     
    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware.                                   */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	7e5b      	ldrb	r3, [r3, #25]
 8002c0e:	2b01      	cmp	r3, #1
 8002c10:	d007      	beq.n	8002c22 <HAL_ADC_Start_IT+0x4a>
    {
      tmp_hal_status = ADC_Enable(hadc);
 8002c12:	230f      	movs	r3, #15
 8002c14:	18fc      	adds	r4, r7, r3
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	0018      	movs	r0, r3
 8002c1a:	f000 fa7b 	bl	8003114 <ADC_Enable>
 8002c1e:	0003      	movs	r3, r0
 8002c20:	7023      	strb	r3, [r4, #0]
    }
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002c22:	230f      	movs	r3, #15
 8002c24:	18fb      	adds	r3, r7, r3
 8002c26:	781b      	ldrb	r3, [r3, #0]
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d13e      	bne.n	8002caa <HAL_ADC_Start_IT+0xd2>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c30:	4a21      	ldr	r2, [pc, #132]	; (8002cb8 <HAL_ADC_Start_IT+0xe0>)
 8002c32:	4013      	ands	r3, r2
 8002c34:	2280      	movs	r2, #128	; 0x80
 8002c36:	0052      	lsls	r2, r2, #1
 8002c38:	431a      	orrs	r2, r3
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	2200      	movs	r2, #0
 8002c42:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	2234      	movs	r2, #52	; 0x34
 8002c48:	2100      	movs	r1, #0
 8002c4a:	5499      	strb	r1, [r3, r2]
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	221c      	movs	r2, #28
 8002c52:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC end of conversion interrupt */
      /* Enable ADC overrun interrupt */  
      switch(hadc->Init.EOCSelection)
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	695b      	ldr	r3, [r3, #20]
 8002c58:	2b08      	cmp	r3, #8
 8002c5a:	d110      	bne.n	8002c7e <HAL_ADC_Start_IT+0xa6>
      {
        case ADC_EOC_SEQ_CONV: 
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	685a      	ldr	r2, [r3, #4]
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	2104      	movs	r1, #4
 8002c68:	438a      	bics	r2, r1
 8002c6a:	605a      	str	r2, [r3, #4]
          __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOS | ADC_IT_OVR));
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	685a      	ldr	r2, [r3, #4]
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	2118      	movs	r1, #24
 8002c78:	430a      	orrs	r2, r1
 8002c7a:	605a      	str	r2, [r3, #4]
          break;
 8002c7c:	e008      	b.n	8002c90 <HAL_ADC_Start_IT+0xb8>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	685a      	ldr	r2, [r3, #4]
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	211c      	movs	r1, #28
 8002c8a:	430a      	orrs	r2, r1
 8002c8c:	605a      	str	r2, [r3, #4]
          break;
 8002c8e:	46c0      	nop			; (mov r8, r8)
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	689a      	ldr	r2, [r3, #8]
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	2104      	movs	r1, #4
 8002c9c:	430a      	orrs	r2, r1
 8002c9e:	609a      	str	r2, [r3, #8]
 8002ca0:	e003      	b.n	8002caa <HAL_ADC_Start_IT+0xd2>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002ca2:	230f      	movs	r3, #15
 8002ca4:	18fb      	adds	r3, r7, r3
 8002ca6:	2202      	movs	r2, #2
 8002ca8:	701a      	strb	r2, [r3, #0]
  }    
    
  /* Return function status */
  return tmp_hal_status;
 8002caa:	230f      	movs	r3, #15
 8002cac:	18fb      	adds	r3, r7, r3
 8002cae:	781b      	ldrb	r3, [r3, #0]
}
 8002cb0:	0018      	movs	r0, r3
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	b005      	add	sp, #20
 8002cb6:	bd90      	pop	{r4, r7, pc}
 8002cb8:	fffff0fe 	.word	0xfffff0fe

08002cbc <HAL_ADC_Stop_IT>:
  *         end-of-conversion, disable ADC peripheral.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_IT(ADC_HandleTypeDef* hadc)
{
 8002cbc:	b5b0      	push	{r4, r5, r7, lr}
 8002cbe:	b084      	sub	sp, #16
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002cc4:	230f      	movs	r3, #15
 8002cc6:	18fb      	adds	r3, r7, r3
 8002cc8:	2200      	movs	r2, #0
 8002cca:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	2234      	movs	r2, #52	; 0x34
 8002cd0:	5c9b      	ldrb	r3, [r3, r2]
 8002cd2:	2b01      	cmp	r3, #1
 8002cd4:	d101      	bne.n	8002cda <HAL_ADC_Stop_IT+0x1e>
 8002cd6:	2302      	movs	r3, #2
 8002cd8:	e033      	b.n	8002d42 <HAL_ADC_Stop_IT+0x86>
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	2234      	movs	r2, #52	; 0x34
 8002cde:	2101      	movs	r1, #1
 8002ce0:	5499      	strb	r1, [r3, r2]
  
  /* 1. Stop potential conversion on going, on regular group */
  tmp_hal_status = ADC_ConversionStop(hadc);
 8002ce2:	250f      	movs	r5, #15
 8002ce4:	197c      	adds	r4, r7, r5
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	0018      	movs	r0, r3
 8002cea:	f000 fb08 	bl	80032fe <ADC_ConversionStop>
 8002cee:	0003      	movs	r3, r0
 8002cf0:	7023      	strb	r3, [r4, #0]
   
  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8002cf2:	0028      	movs	r0, r5
 8002cf4:	183b      	adds	r3, r7, r0
 8002cf6:	781b      	ldrb	r3, [r3, #0]
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d11b      	bne.n	8002d34 <HAL_ADC_Stop_IT+0x78>
  {
    /* Disable ADC end of conversion interrupt for regular group */
    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	685a      	ldr	r2, [r3, #4]
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	211c      	movs	r1, #28
 8002d08:	438a      	bics	r2, r1
 8002d0a:	605a      	str	r2, [r3, #4]
    
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8002d0c:	0005      	movs	r5, r0
 8002d0e:	183c      	adds	r4, r7, r0
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	0018      	movs	r0, r3
 8002d14:	f000 fa82 	bl	800321c <ADC_Disable>
 8002d18:	0003      	movs	r3, r0
 8002d1a:	7023      	strb	r3, [r4, #0]
    
    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8002d1c:	197b      	adds	r3, r7, r5
 8002d1e:	781b      	ldrb	r3, [r3, #0]
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d107      	bne.n	8002d34 <HAL_ADC_Stop_IT+0x78>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d28:	4a08      	ldr	r2, [pc, #32]	; (8002d4c <HAL_ADC_Stop_IT+0x90>)
 8002d2a:	4013      	ands	r3, r2
 8002d2c:	2201      	movs	r2, #1
 8002d2e:	431a      	orrs	r2, r3
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	2234      	movs	r2, #52	; 0x34
 8002d38:	2100      	movs	r1, #0
 8002d3a:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8002d3c:	230f      	movs	r3, #15
 8002d3e:	18fb      	adds	r3, r7, r3
 8002d40:	781b      	ldrb	r3, [r3, #0]
}
 8002d42:	0018      	movs	r0, r3
 8002d44:	46bd      	mov	sp, r7
 8002d46:	b004      	add	sp, #16
 8002d48:	bdb0      	pop	{r4, r5, r7, pc}
 8002d4a:	46c0      	nop			; (mov r8, r8)
 8002d4c:	fffffefe 	.word	0xfffffefe

08002d50 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8002d50:	b580      	push	{r7, lr}
 8002d52:	b082      	sub	sp, #8
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8002d5e:	0018      	movs	r0, r3
 8002d60:	46bd      	mov	sp, r7
 8002d62:	b002      	add	sp, #8
 8002d64:	bd80      	pop	{r7, pc}
	...

08002d68 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request.  
  * @param  hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8002d68:	b580      	push	{r7, lr}
 8002d6a:	b082      	sub	sp, #8
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	6078      	str	r0, [r7, #4]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	2204      	movs	r2, #4
 8002d78:	4013      	ands	r3, r2
 8002d7a:	2b04      	cmp	r3, #4
 8002d7c:	d106      	bne.n	8002d8c <HAL_ADC_IRQHandler+0x24>
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	685b      	ldr	r3, [r3, #4]
 8002d84:	2204      	movs	r2, #4
 8002d86:	4013      	ands	r3, r2
 8002d88:	2b04      	cmp	r3, #4
 8002d8a:	d00d      	beq.n	8002da8 <HAL_ADC_IRQHandler+0x40>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	2208      	movs	r2, #8
 8002d94:	4013      	ands	r3, r2
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 8002d96:	2b08      	cmp	r3, #8
 8002d98:	d14f      	bne.n	8002e3a <HAL_ADC_IRQHandler+0xd2>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	685b      	ldr	r3, [r3, #4]
 8002da0:	2208      	movs	r2, #8
 8002da2:	4013      	ands	r3, r2
 8002da4:	2b08      	cmp	r3, #8
 8002da6:	d148      	bne.n	8002e3a <HAL_ADC_IRQHandler+0xd2>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002dac:	2210      	movs	r2, #16
 8002dae:	4013      	ands	r3, r2
 8002db0:	d106      	bne.n	8002dc0 <HAL_ADC_IRQHandler+0x58>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002db6:	2280      	movs	r2, #128	; 0x80
 8002db8:	0092      	lsls	r2, r2, #2
 8002dba:	431a      	orrs	r2, r3
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	639a      	str	r2, [r3, #56]	; 0x38
    }
    
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	68da      	ldr	r2, [r3, #12]
 8002dc6:	23c0      	movs	r3, #192	; 0xc0
 8002dc8:	011b      	lsls	r3, r3, #4
 8002dca:	4013      	ands	r3, r2
 8002dcc:	d12d      	bne.n	8002e2a <HAL_ADC_IRQHandler+0xc2>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	7e9b      	ldrb	r3, [r3, #26]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d129      	bne.n	8002e2a <HAL_ADC_IRQHandler+0xc2>
    {
      /* If End of Sequence is reached, disable interrupts */
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	2208      	movs	r2, #8
 8002dde:	4013      	ands	r3, r2
 8002de0:	2b08      	cmp	r3, #8
 8002de2:	d122      	bne.n	8002e2a <HAL_ADC_IRQHandler+0xc2>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	689b      	ldr	r3, [r3, #8]
 8002dea:	2204      	movs	r2, #4
 8002dec:	4013      	ands	r3, r2
 8002dee:	d110      	bne.n	8002e12 <HAL_ADC_IRQHandler+0xaa>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	685a      	ldr	r2, [r3, #4]
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	210c      	movs	r1, #12
 8002dfc:	438a      	bics	r2, r1
 8002dfe:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e04:	4a33      	ldr	r2, [pc, #204]	; (8002ed4 <HAL_ADC_IRQHandler+0x16c>)
 8002e06:	4013      	ands	r3, r2
 8002e08:	2201      	movs	r2, #1
 8002e0a:	431a      	orrs	r2, r3
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	639a      	str	r2, [r3, #56]	; 0x38
 8002e10:	e00b      	b.n	8002e2a <HAL_ADC_IRQHandler+0xc2>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e16:	2220      	movs	r2, #32
 8002e18:	431a      	orrs	r2, r3
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	639a      	str	r2, [r3, #56]	; 0x38
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e22:	2201      	movs	r2, #1
 8002e24:	431a      	orrs	r2, r3
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	63da      	str	r2, [r3, #60]	; 0x3c
    /*       from EOC or EOS, possibility to use:                             */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	0018      	movs	r0, r3
 8002e2e:	f7fd ffbf 	bl	8000db0 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS) );
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	220c      	movs	r2, #12
 8002e38:	601a      	str	r2, [r3, #0]
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD))
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	2280      	movs	r2, #128	; 0x80
 8002e42:	4013      	ands	r3, r2
 8002e44:	2b80      	cmp	r3, #128	; 0x80
 8002e46:	d115      	bne.n	8002e74 <HAL_ADC_IRQHandler+0x10c>
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	685b      	ldr	r3, [r3, #4]
 8002e4e:	2280      	movs	r2, #128	; 0x80
 8002e50:	4013      	ands	r3, r2
 8002e52:	2b80      	cmp	r3, #128	; 0x80
 8002e54:	d10e      	bne.n	8002e74 <HAL_ADC_IRQHandler+0x10c>
  {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e5a:	2280      	movs	r2, #128	; 0x80
 8002e5c:	0252      	lsls	r2, r2, #9
 8002e5e:	431a      	orrs	r2, r3
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	639a      	str	r2, [r3, #56]	; 0x38

#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	0018      	movs	r0, r3
 8002e68:	f000 f836 	bl	8002ed8 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear ADC Analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	2280      	movs	r2, #128	; 0x80
 8002e72:	601a      	str	r2, [r3, #0]
   
  }
  
  
  /* ========== Check Overrun flag ========== */
  if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR))
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	2210      	movs	r2, #16
 8002e7c:	4013      	ands	r3, r2
 8002e7e:	2b10      	cmp	r3, #16
 8002e80:	d123      	bne.n	8002eca <HAL_ADC_IRQHandler+0x162>
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	685b      	ldr	r3, [r3, #4]
 8002e88:	2210      	movs	r2, #16
 8002e8a:	4013      	ands	r3, r2
 8002e8c:	2b10      	cmp	r3, #16
 8002e8e:	d11c      	bne.n	8002eca <HAL_ADC_IRQHandler+0x162>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if ((hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)            ||
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e94:	2b01      	cmp	r3, #1
 8002e96:	d006      	beq.n	8002ea6 <HAL_ADC_IRQHandler+0x13e>
        HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN)  )
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	68db      	ldr	r3, [r3, #12]
 8002e9e:	2201      	movs	r2, #1
 8002ea0:	4013      	ands	r3, r2
    if ((hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)            ||
 8002ea2:	2b01      	cmp	r3, #1
 8002ea4:	d10d      	bne.n	8002ec2 <HAL_ADC_IRQHandler+0x15a>
    {
      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002eaa:	2202      	movs	r2, #2
 8002eac:	431a      	orrs	r2, r3
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Clear ADC overrun flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	2210      	movs	r2, #16
 8002eb8:	601a      	str	r2, [r3, #0]
      
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	0018      	movs	r0, r3
 8002ebe:	f000 f813 	bl	8002ee8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	2210      	movs	r2, #16
 8002ec8:	601a      	str	r2, [r3, #0]
  }

}
 8002eca:	46c0      	nop			; (mov r8, r8)
 8002ecc:	46bd      	mov	sp, r7
 8002ece:	b002      	add	sp, #8
 8002ed0:	bd80      	pop	{r7, pc}
 8002ed2:	46c0      	nop			; (mov r8, r8)
 8002ed4:	fffffefe 	.word	0xfffffefe

08002ed8 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8002ed8:	b580      	push	{r7, lr}
 8002eda:	b082      	sub	sp, #8
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindowCallback must be implemented in the user file.
  */
}
 8002ee0:	46c0      	nop			; (mov r8, r8)
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	b002      	add	sp, #8
 8002ee6:	bd80      	pop	{r7, pc}

08002ee8 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002ee8:	b580      	push	{r7, lr}
 8002eea:	b082      	sub	sp, #8
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002ef0:	46c0      	nop			; (mov r8, r8)
 8002ef2:	46bd      	mov	sp, r7
 8002ef4:	b002      	add	sp, #8
 8002ef6:	bd80      	pop	{r7, pc}

08002ef8 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002ef8:	b580      	push	{r7, lr}
 8002efa:	b084      	sub	sp, #16
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	6078      	str	r0, [r7, #4]
 8002f00:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002f02:	230f      	movs	r3, #15
 8002f04:	18fb      	adds	r3, r7, r3
 8002f06:	2200      	movs	r2, #0
 8002f08:	701a      	strb	r2, [r3, #0]
  __IO uint32_t wait_loop_index = 0U;
 8002f0a:	2300      	movs	r3, #0
 8002f0c:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f12:	2380      	movs	r3, #128	; 0x80
 8002f14:	055b      	lsls	r3, r3, #21
 8002f16:	429a      	cmp	r2, r3
 8002f18:	d011      	beq.n	8002f3e <HAL_ADC_ConfigChannel+0x46>
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f1e:	2b01      	cmp	r3, #1
 8002f20:	d00d      	beq.n	8002f3e <HAL_ADC_ConfigChannel+0x46>
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f26:	2b02      	cmp	r3, #2
 8002f28:	d009      	beq.n	8002f3e <HAL_ADC_ConfigChannel+0x46>
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f2e:	2b03      	cmp	r3, #3
 8002f30:	d005      	beq.n	8002f3e <HAL_ADC_ConfigChannel+0x46>
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f36:	2b04      	cmp	r3, #4
 8002f38:	d001      	beq.n	8002f3e <HAL_ADC_ConfigChannel+0x46>
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  {
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	2234      	movs	r2, #52	; 0x34
 8002f42:	5c9b      	ldrb	r3, [r3, r2]
 8002f44:	2b01      	cmp	r3, #1
 8002f46:	d101      	bne.n	8002f4c <HAL_ADC_ConfigChannel+0x54>
 8002f48:	2302      	movs	r3, #2
 8002f4a:	e0d0      	b.n	80030ee <HAL_ADC_ConfigChannel+0x1f6>
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	2234      	movs	r2, #52	; 0x34
 8002f50:	2101      	movs	r1, #1
 8002f52:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	689b      	ldr	r3, [r3, #8]
 8002f5a:	2204      	movs	r2, #4
 8002f5c:	4013      	ands	r3, r2
 8002f5e:	d000      	beq.n	8002f62 <HAL_ADC_ConfigChannel+0x6a>
 8002f60:	e0b4      	b.n	80030cc <HAL_ADC_ConfigChannel+0x1d4>
  {
    /* Configure channel: depending on rank setting, add it or remove it from */
    /* ADC conversion sequencer.                                              */
    if (sConfig->Rank != ADC_RANK_NONE)
 8002f62:	683b      	ldr	r3, [r7, #0]
 8002f64:	685b      	ldr	r3, [r3, #4]
 8002f66:	4a64      	ldr	r2, [pc, #400]	; (80030f8 <HAL_ADC_ConfigChannel+0x200>)
 8002f68:	4293      	cmp	r3, r2
 8002f6a:	d100      	bne.n	8002f6e <HAL_ADC_ConfigChannel+0x76>
 8002f6c:	e082      	b.n	8003074 <HAL_ADC_ConfigChannel+0x17c>
    {
      /* Regular sequence configuration */
      /* Set the channel selection register from the selected channel */
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8002f74:	683b      	ldr	r3, [r7, #0]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	2201      	movs	r2, #1
 8002f7a:	409a      	lsls	r2, r3
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	430a      	orrs	r2, r1
 8002f82:	629a      	str	r2, [r3, #40]	; 0x28
      /* Channel sampling time configuration */
      /* Management of parameters "SamplingTimeCommon" and "SamplingTime"     */
      /* (obsolete): sampling time set in this function with                  */
      /* parameter "SamplingTime" (obsolete) only if not already set into     */
      /* ADC initialization structure with parameter "SamplingTimeCommon".    */
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f88:	2380      	movs	r3, #128	; 0x80
 8002f8a:	055b      	lsls	r3, r3, #21
 8002f8c:	429a      	cmp	r2, r3
 8002f8e:	d037      	beq.n	8003000 <HAL_ADC_ConfigChannel+0x108>
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f94:	2b01      	cmp	r3, #1
 8002f96:	d033      	beq.n	8003000 <HAL_ADC_ConfigChannel+0x108>
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f9c:	2b02      	cmp	r3, #2
 8002f9e:	d02f      	beq.n	8003000 <HAL_ADC_ConfigChannel+0x108>
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fa4:	2b03      	cmp	r3, #3
 8002fa6:	d02b      	beq.n	8003000 <HAL_ADC_ConfigChannel+0x108>
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fac:	2b04      	cmp	r3, #4
 8002fae:	d027      	beq.n	8003000 <HAL_ADC_ConfigChannel+0x108>
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fb4:	2b05      	cmp	r3, #5
 8002fb6:	d023      	beq.n	8003000 <HAL_ADC_ConfigChannel+0x108>
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fbc:	2b06      	cmp	r3, #6
 8002fbe:	d01f      	beq.n	8003000 <HAL_ADC_ConfigChannel+0x108>
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fc4:	2b07      	cmp	r3, #7
 8002fc6:	d01b      	beq.n	8003000 <HAL_ADC_ConfigChannel+0x108>
      {
        /* Modify sampling time if needed (not needed in case of reoccurrence */
        /* for several channels programmed consecutively into the sequencer)  */
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 8002fc8:	683b      	ldr	r3, [r7, #0]
 8002fca:	689a      	ldr	r2, [r3, #8]
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	695b      	ldr	r3, [r3, #20]
 8002fd2:	2107      	movs	r1, #7
 8002fd4:	400b      	ands	r3, r1
 8002fd6:	429a      	cmp	r2, r3
 8002fd8:	d012      	beq.n	8003000 <HAL_ADC_ConfigChannel+0x108>
        {
          /* Channel sampling time configuration */
          /* Clear the old sample time */
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	695a      	ldr	r2, [r3, #20]
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	2107      	movs	r1, #7
 8002fe6:	438a      	bics	r2, r1
 8002fe8:	615a      	str	r2, [r3, #20]
          
          /* Set the new sample time */
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	6959      	ldr	r1, [r3, #20]
 8002ff0:	683b      	ldr	r3, [r7, #0]
 8002ff2:	689b      	ldr	r3, [r3, #8]
 8002ff4:	2207      	movs	r2, #7
 8002ff6:	401a      	ands	r2, r3
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	430a      	orrs	r2, r1
 8002ffe:	615a      	str	r2, [r3, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003000:	683b      	ldr	r3, [r7, #0]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	2b10      	cmp	r3, #16
 8003006:	d007      	beq.n	8003018 <HAL_ADC_ConfigChannel+0x120>
 8003008:	683b      	ldr	r3, [r7, #0]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	2b11      	cmp	r3, #17
 800300e:	d003      	beq.n	8003018 <HAL_ADC_ConfigChannel+0x120>
 8003010:	683b      	ldr	r3, [r7, #0]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	2b12      	cmp	r3, #18
 8003016:	d163      	bne.n	80030e0 <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path. */
        /* If Channel_17 is selected, enable VREFINT measurement path. */
        /* If Channel_18 is selected, enable VBAT measurement path. */
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8003018:	4b38      	ldr	r3, [pc, #224]	; (80030fc <HAL_ADC_ConfigChannel+0x204>)
 800301a:	6819      	ldr	r1, [r3, #0]
 800301c:	683b      	ldr	r3, [r7, #0]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	2b10      	cmp	r3, #16
 8003022:	d009      	beq.n	8003038 <HAL_ADC_ConfigChannel+0x140>
 8003024:	683b      	ldr	r3, [r7, #0]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	2b11      	cmp	r3, #17
 800302a:	d102      	bne.n	8003032 <HAL_ADC_ConfigChannel+0x13a>
 800302c:	2380      	movs	r3, #128	; 0x80
 800302e:	03db      	lsls	r3, r3, #15
 8003030:	e004      	b.n	800303c <HAL_ADC_ConfigChannel+0x144>
 8003032:	2380      	movs	r3, #128	; 0x80
 8003034:	045b      	lsls	r3, r3, #17
 8003036:	e001      	b.n	800303c <HAL_ADC_ConfigChannel+0x144>
 8003038:	2380      	movs	r3, #128	; 0x80
 800303a:	041b      	lsls	r3, r3, #16
 800303c:	4a2f      	ldr	r2, [pc, #188]	; (80030fc <HAL_ADC_ConfigChannel+0x204>)
 800303e:	430b      	orrs	r3, r1
 8003040:	6013      	str	r3, [r2, #0]
        
        /* If Temp. sensor is selected, wait for stabilization delay */
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003042:	683b      	ldr	r3, [r7, #0]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	2b10      	cmp	r3, #16
 8003048:	d14a      	bne.n	80030e0 <HAL_ADC_ConfigChannel+0x1e8>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800304a:	4b2d      	ldr	r3, [pc, #180]	; (8003100 <HAL_ADC_ConfigChannel+0x208>)
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	492d      	ldr	r1, [pc, #180]	; (8003104 <HAL_ADC_ConfigChannel+0x20c>)
 8003050:	0018      	movs	r0, r3
 8003052:	f7fd f86b 	bl	800012c <__udivsi3>
 8003056:	0003      	movs	r3, r0
 8003058:	001a      	movs	r2, r3
 800305a:	0013      	movs	r3, r2
 800305c:	009b      	lsls	r3, r3, #2
 800305e:	189b      	adds	r3, r3, r2
 8003060:	005b      	lsls	r3, r3, #1
 8003062:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003064:	e002      	b.n	800306c <HAL_ADC_ConfigChannel+0x174>
          {
            wait_loop_index--;
 8003066:	68bb      	ldr	r3, [r7, #8]
 8003068:	3b01      	subs	r3, #1
 800306a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800306c:	68bb      	ldr	r3, [r7, #8]
 800306e:	2b00      	cmp	r3, #0
 8003070:	d1f9      	bne.n	8003066 <HAL_ADC_ConfigChannel+0x16e>
 8003072:	e035      	b.n	80030e0 <HAL_ADC_ConfigChannel+0x1e8>
    }
    else
    {
      /* Regular sequence configuration */
      /* Reset the channel selection register from the selected channel */
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800307a:	683b      	ldr	r3, [r7, #0]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	2101      	movs	r1, #1
 8003080:	4099      	lsls	r1, r3
 8003082:	000b      	movs	r3, r1
 8003084:	43d9      	mvns	r1, r3
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	400a      	ands	r2, r1
 800308c:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
      /* internal measurement paths disable: If internal channel selected,    */
      /* disable dedicated internal buffers and path.                         */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800308e:	683b      	ldr	r3, [r7, #0]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	2b10      	cmp	r3, #16
 8003094:	d007      	beq.n	80030a6 <HAL_ADC_ConfigChannel+0x1ae>
 8003096:	683b      	ldr	r3, [r7, #0]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	2b11      	cmp	r3, #17
 800309c:	d003      	beq.n	80030a6 <HAL_ADC_ConfigChannel+0x1ae>
 800309e:	683b      	ldr	r3, [r7, #0]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	2b12      	cmp	r3, #18
 80030a4:	d11c      	bne.n	80030e0 <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, disable Temp. sensor measurement path. */
        /* If Channel_17 is selected, disable VREFINT measurement path. */
        /* If Channel_18 is selected, disable VBAT measurement path. */
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 80030a6:	4b15      	ldr	r3, [pc, #84]	; (80030fc <HAL_ADC_ConfigChannel+0x204>)
 80030a8:	6819      	ldr	r1, [r3, #0]
 80030aa:	683b      	ldr	r3, [r7, #0]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	2b10      	cmp	r3, #16
 80030b0:	d007      	beq.n	80030c2 <HAL_ADC_ConfigChannel+0x1ca>
 80030b2:	683b      	ldr	r3, [r7, #0]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	2b11      	cmp	r3, #17
 80030b8:	d101      	bne.n	80030be <HAL_ADC_ConfigChannel+0x1c6>
 80030ba:	4b13      	ldr	r3, [pc, #76]	; (8003108 <HAL_ADC_ConfigChannel+0x210>)
 80030bc:	e002      	b.n	80030c4 <HAL_ADC_ConfigChannel+0x1cc>
 80030be:	4b13      	ldr	r3, [pc, #76]	; (800310c <HAL_ADC_ConfigChannel+0x214>)
 80030c0:	e000      	b.n	80030c4 <HAL_ADC_ConfigChannel+0x1cc>
 80030c2:	4b13      	ldr	r3, [pc, #76]	; (8003110 <HAL_ADC_ConfigChannel+0x218>)
 80030c4:	4a0d      	ldr	r2, [pc, #52]	; (80030fc <HAL_ADC_ConfigChannel+0x204>)
 80030c6:	400b      	ands	r3, r1
 80030c8:	6013      	str	r3, [r2, #0]
 80030ca:	e009      	b.n	80030e0 <HAL_ADC_ConfigChannel+0x1e8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030d0:	2220      	movs	r2, #32
 80030d2:	431a      	orrs	r2, r3
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	639a      	str	r2, [r3, #56]	; 0x38
    
    tmp_hal_status = HAL_ERROR;
 80030d8:	230f      	movs	r3, #15
 80030da:	18fb      	adds	r3, r7, r3
 80030dc:	2201      	movs	r2, #1
 80030de:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	2234      	movs	r2, #52	; 0x34
 80030e4:	2100      	movs	r1, #0
 80030e6:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 80030e8:	230f      	movs	r3, #15
 80030ea:	18fb      	adds	r3, r7, r3
 80030ec:	781b      	ldrb	r3, [r3, #0]
}
 80030ee:	0018      	movs	r0, r3
 80030f0:	46bd      	mov	sp, r7
 80030f2:	b004      	add	sp, #16
 80030f4:	bd80      	pop	{r7, pc}
 80030f6:	46c0      	nop			; (mov r8, r8)
 80030f8:	00001001 	.word	0x00001001
 80030fc:	40012708 	.word	0x40012708
 8003100:	20000000 	.word	0x20000000
 8003104:	000f4240 	.word	0x000f4240
 8003108:	ffbfffff 	.word	0xffbfffff
 800310c:	feffffff 	.word	0xfeffffff
 8003110:	ff7fffff 	.word	0xff7fffff

08003114 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8003114:	b580      	push	{r7, lr}
 8003116:	b084      	sub	sp, #16
 8003118:	af00      	add	r7, sp, #0
 800311a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800311c:	2300      	movs	r3, #0
 800311e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8003120:	2300      	movs	r3, #0
 8003122:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	689b      	ldr	r3, [r3, #8]
 800312a:	2203      	movs	r2, #3
 800312c:	4013      	ands	r3, r2
 800312e:	2b01      	cmp	r3, #1
 8003130:	d112      	bne.n	8003158 <ADC_Enable+0x44>
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	2201      	movs	r2, #1
 800313a:	4013      	ands	r3, r2
 800313c:	2b01      	cmp	r3, #1
 800313e:	d009      	beq.n	8003154 <ADC_Enable+0x40>
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	68da      	ldr	r2, [r3, #12]
 8003146:	2380      	movs	r3, #128	; 0x80
 8003148:	021b      	lsls	r3, r3, #8
 800314a:	401a      	ands	r2, r3
 800314c:	2380      	movs	r3, #128	; 0x80
 800314e:	021b      	lsls	r3, r3, #8
 8003150:	429a      	cmp	r2, r3
 8003152:	d101      	bne.n	8003158 <ADC_Enable+0x44>
 8003154:	2301      	movs	r3, #1
 8003156:	e000      	b.n	800315a <ADC_Enable+0x46>
 8003158:	2300      	movs	r3, #0
 800315a:	2b00      	cmp	r3, #0
 800315c:	d152      	bne.n	8003204 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	689b      	ldr	r3, [r3, #8]
 8003164:	4a2a      	ldr	r2, [pc, #168]	; (8003210 <ADC_Enable+0xfc>)
 8003166:	4013      	ands	r3, r2
 8003168:	d00d      	beq.n	8003186 <ADC_Enable+0x72>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800316e:	2210      	movs	r2, #16
 8003170:	431a      	orrs	r2, r3
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	639a      	str	r2, [r3, #56]	; 0x38
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800317a:	2201      	movs	r2, #1
 800317c:	431a      	orrs	r2, r3
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	63da      	str	r2, [r3, #60]	; 0x3c
      
      return HAL_ERROR;
 8003182:	2301      	movs	r3, #1
 8003184:	e03f      	b.n	8003206 <ADC_Enable+0xf2>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	689a      	ldr	r2, [r3, #8]
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	2101      	movs	r1, #1
 8003192:	430a      	orrs	r2, r1
 8003194:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003196:	4b1f      	ldr	r3, [pc, #124]	; (8003214 <ADC_Enable+0x100>)
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	491f      	ldr	r1, [pc, #124]	; (8003218 <ADC_Enable+0x104>)
 800319c:	0018      	movs	r0, r3
 800319e:	f7fc ffc5 	bl	800012c <__udivsi3>
 80031a2:	0003      	movs	r3, r0
 80031a4:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80031a6:	e002      	b.n	80031ae <ADC_Enable+0x9a>
    {
      wait_loop_index--;
 80031a8:	68bb      	ldr	r3, [r7, #8]
 80031aa:	3b01      	subs	r3, #1
 80031ac:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80031ae:	68bb      	ldr	r3, [r7, #8]
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d1f9      	bne.n	80031a8 <ADC_Enable+0x94>
    }

    /* Get tick count */
    tickstart = HAL_GetTick();
 80031b4:	f7ff fba2 	bl	80028fc <HAL_GetTick>
 80031b8:	0003      	movs	r3, r0
 80031ba:	60fb      	str	r3, [r7, #12]
    
    /* Wait for ADC effectively enabled */
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80031bc:	e01b      	b.n	80031f6 <ADC_Enable+0xe2>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80031be:	f7ff fb9d 	bl	80028fc <HAL_GetTick>
 80031c2:	0002      	movs	r2, r0
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	1ad3      	subs	r3, r2, r3
 80031c8:	2b02      	cmp	r3, #2
 80031ca:	d914      	bls.n	80031f6 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	2201      	movs	r2, #1
 80031d4:	4013      	ands	r3, r2
 80031d6:	2b01      	cmp	r3, #1
 80031d8:	d00d      	beq.n	80031f6 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031de:	2210      	movs	r2, #16
 80031e0:	431a      	orrs	r2, r3
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	639a      	str	r2, [r3, #56]	; 0x38

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031ea:	2201      	movs	r2, #1
 80031ec:	431a      	orrs	r2, r3
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	63da      	str	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80031f2:	2301      	movs	r3, #1
 80031f4:	e007      	b.n	8003206 <ADC_Enable+0xf2>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	2201      	movs	r2, #1
 80031fe:	4013      	ands	r3, r2
 8003200:	2b01      	cmp	r3, #1
 8003202:	d1dc      	bne.n	80031be <ADC_Enable+0xaa>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8003204:	2300      	movs	r3, #0
}
 8003206:	0018      	movs	r0, r3
 8003208:	46bd      	mov	sp, r7
 800320a:	b004      	add	sp, #16
 800320c:	bd80      	pop	{r7, pc}
 800320e:	46c0      	nop			; (mov r8, r8)
 8003210:	80000017 	.word	0x80000017
 8003214:	20000000 	.word	0x20000000
 8003218:	000f4240 	.word	0x000f4240

0800321c <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 800321c:	b580      	push	{r7, lr}
 800321e:	b084      	sub	sp, #16
 8003220:	af00      	add	r7, sp, #0
 8003222:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003224:	2300      	movs	r3, #0
 8003226:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	689b      	ldr	r3, [r3, #8]
 800322e:	2203      	movs	r2, #3
 8003230:	4013      	ands	r3, r2
 8003232:	2b01      	cmp	r3, #1
 8003234:	d112      	bne.n	800325c <ADC_Disable+0x40>
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	2201      	movs	r2, #1
 800323e:	4013      	ands	r3, r2
 8003240:	2b01      	cmp	r3, #1
 8003242:	d009      	beq.n	8003258 <ADC_Disable+0x3c>
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	68da      	ldr	r2, [r3, #12]
 800324a:	2380      	movs	r3, #128	; 0x80
 800324c:	021b      	lsls	r3, r3, #8
 800324e:	401a      	ands	r2, r3
 8003250:	2380      	movs	r3, #128	; 0x80
 8003252:	021b      	lsls	r3, r3, #8
 8003254:	429a      	cmp	r2, r3
 8003256:	d101      	bne.n	800325c <ADC_Disable+0x40>
 8003258:	2301      	movs	r3, #1
 800325a:	e000      	b.n	800325e <ADC_Disable+0x42>
 800325c:	2300      	movs	r3, #0
 800325e:	2b00      	cmp	r3, #0
 8003260:	d048      	beq.n	80032f4 <ADC_Disable+0xd8>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	689b      	ldr	r3, [r3, #8]
 8003268:	2205      	movs	r2, #5
 800326a:	4013      	ands	r3, r2
 800326c:	2b01      	cmp	r3, #1
 800326e:	d110      	bne.n	8003292 <ADC_Disable+0x76>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	689a      	ldr	r2, [r3, #8]
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	2102      	movs	r1, #2
 800327c:	430a      	orrs	r2, r1
 800327e:	609a      	str	r2, [r3, #8]
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	2203      	movs	r2, #3
 8003286:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003288:	f7ff fb38 	bl	80028fc <HAL_GetTick>
 800328c:	0003      	movs	r3, r0
 800328e:	60fb      	str	r3, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8003290:	e029      	b.n	80032e6 <ADC_Disable+0xca>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003296:	2210      	movs	r2, #16
 8003298:	431a      	orrs	r2, r3
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	639a      	str	r2, [r3, #56]	; 0x38
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032a2:	2201      	movs	r2, #1
 80032a4:	431a      	orrs	r2, r3
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	63da      	str	r2, [r3, #60]	; 0x3c
      return HAL_ERROR;
 80032aa:	2301      	movs	r3, #1
 80032ac:	e023      	b.n	80032f6 <ADC_Disable+0xda>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80032ae:	f7ff fb25 	bl	80028fc <HAL_GetTick>
 80032b2:	0002      	movs	r2, r0
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	1ad3      	subs	r3, r2, r3
 80032b8:	2b02      	cmp	r3, #2
 80032ba:	d914      	bls.n	80032e6 <ADC_Disable+0xca>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	689b      	ldr	r3, [r3, #8]
 80032c2:	2201      	movs	r2, #1
 80032c4:	4013      	ands	r3, r2
 80032c6:	2b01      	cmp	r3, #1
 80032c8:	d10d      	bne.n	80032e6 <ADC_Disable+0xca>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032ce:	2210      	movs	r2, #16
 80032d0:	431a      	orrs	r2, r3
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	639a      	str	r2, [r3, #56]	; 0x38

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032da:	2201      	movs	r2, #1
 80032dc:	431a      	orrs	r2, r3
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	63da      	str	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80032e2:	2301      	movs	r3, #1
 80032e4:	e007      	b.n	80032f6 <ADC_Disable+0xda>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	689b      	ldr	r3, [r3, #8]
 80032ec:	2201      	movs	r2, #1
 80032ee:	4013      	ands	r3, r2
 80032f0:	2b01      	cmp	r3, #1
 80032f2:	d0dc      	beq.n	80032ae <ADC_Disable+0x92>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80032f4:	2300      	movs	r3, #0
}
 80032f6:	0018      	movs	r0, r3
 80032f8:	46bd      	mov	sp, r7
 80032fa:	b004      	add	sp, #16
 80032fc:	bd80      	pop	{r7, pc}

080032fe <ADC_ConversionStop>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef* hadc)
{
 80032fe:	b580      	push	{r7, lr}
 8003300:	b084      	sub	sp, #16
 8003302:	af00      	add	r7, sp, #0
 8003304:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003306:	2300      	movs	r3, #0
 8003308:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
    
  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc))
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	689b      	ldr	r3, [r3, #8]
 8003310:	2204      	movs	r2, #4
 8003312:	4013      	ands	r3, r2
 8003314:	d03a      	beq.n	800338c <ADC_ConversionStop+0x8e>
  {
    
    /* Stop potential conversion on going on regular group */
    /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	689b      	ldr	r3, [r3, #8]
 800331c:	2204      	movs	r2, #4
 800331e:	4013      	ands	r3, r2
 8003320:	2b04      	cmp	r3, #4
 8003322:	d10d      	bne.n	8003340 <ADC_ConversionStop+0x42>
        HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)                  )
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	689b      	ldr	r3, [r3, #8]
 800332a:	2202      	movs	r2, #2
 800332c:	4013      	ands	r3, r2
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 800332e:	d107      	bne.n	8003340 <ADC_ConversionStop+0x42>
    {
      /* Stop conversions on regular group */
      hadc->Instance->CR |= ADC_CR_ADSTP;
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	689a      	ldr	r2, [r3, #8]
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	2110      	movs	r1, #16
 800333c:	430a      	orrs	r2, r1
 800333e:	609a      	str	r2, [r3, #8]
    }
    
    /* Wait for conversion effectively stopped */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003340:	f7ff fadc 	bl	80028fc <HAL_GetTick>
 8003344:	0003      	movs	r3, r0
 8003346:	60fb      	str	r3, [r7, #12]
      
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 8003348:	e01a      	b.n	8003380 <ADC_ConversionStop+0x82>
    {
      if((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 800334a:	f7ff fad7 	bl	80028fc <HAL_GetTick>
 800334e:	0002      	movs	r2, r0
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	1ad3      	subs	r3, r2, r3
 8003354:	2b02      	cmp	r3, #2
 8003356:	d913      	bls.n	8003380 <ADC_ConversionStop+0x82>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	689b      	ldr	r3, [r3, #8]
 800335e:	2204      	movs	r2, #4
 8003360:	4013      	ands	r3, r2
 8003362:	d00d      	beq.n	8003380 <ADC_ConversionStop+0x82>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003368:	2210      	movs	r2, #16
 800336a:	431a      	orrs	r2, r3
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	639a      	str	r2, [r3, #56]	; 0x38

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003374:	2201      	movs	r2, #1
 8003376:	431a      	orrs	r2, r3
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	63da      	str	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800337c:	2301      	movs	r3, #1
 800337e:	e006      	b.n	800338e <ADC_ConversionStop+0x90>
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	689b      	ldr	r3, [r3, #8]
 8003386:	2204      	movs	r2, #4
 8003388:	4013      	ands	r3, r2
 800338a:	d1de      	bne.n	800334a <ADC_ConversionStop+0x4c>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 800338c:	2300      	movs	r3, #0
}
 800338e:	0018      	movs	r0, r3
 8003390:	46bd      	mov	sp, r7
 8003392:	b004      	add	sp, #16
 8003394:	bd80      	pop	{r7, pc}
	...

08003398 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003398:	b580      	push	{r7, lr}
 800339a:	b082      	sub	sp, #8
 800339c:	af00      	add	r7, sp, #0
 800339e:	0002      	movs	r2, r0
 80033a0:	1dfb      	adds	r3, r7, #7
 80033a2:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80033a4:	1dfb      	adds	r3, r7, #7
 80033a6:	781b      	ldrb	r3, [r3, #0]
 80033a8:	2b7f      	cmp	r3, #127	; 0x7f
 80033aa:	d809      	bhi.n	80033c0 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80033ac:	1dfb      	adds	r3, r7, #7
 80033ae:	781b      	ldrb	r3, [r3, #0]
 80033b0:	001a      	movs	r2, r3
 80033b2:	231f      	movs	r3, #31
 80033b4:	401a      	ands	r2, r3
 80033b6:	4b04      	ldr	r3, [pc, #16]	; (80033c8 <__NVIC_EnableIRQ+0x30>)
 80033b8:	2101      	movs	r1, #1
 80033ba:	4091      	lsls	r1, r2
 80033bc:	000a      	movs	r2, r1
 80033be:	601a      	str	r2, [r3, #0]
  }
}
 80033c0:	46c0      	nop			; (mov r8, r8)
 80033c2:	46bd      	mov	sp, r7
 80033c4:	b002      	add	sp, #8
 80033c6:	bd80      	pop	{r7, pc}
 80033c8:	e000e100 	.word	0xe000e100

080033cc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80033cc:	b590      	push	{r4, r7, lr}
 80033ce:	b083      	sub	sp, #12
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	0002      	movs	r2, r0
 80033d4:	6039      	str	r1, [r7, #0]
 80033d6:	1dfb      	adds	r3, r7, #7
 80033d8:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80033da:	1dfb      	adds	r3, r7, #7
 80033dc:	781b      	ldrb	r3, [r3, #0]
 80033de:	2b7f      	cmp	r3, #127	; 0x7f
 80033e0:	d828      	bhi.n	8003434 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80033e2:	4a2f      	ldr	r2, [pc, #188]	; (80034a0 <__NVIC_SetPriority+0xd4>)
 80033e4:	1dfb      	adds	r3, r7, #7
 80033e6:	781b      	ldrb	r3, [r3, #0]
 80033e8:	b25b      	sxtb	r3, r3
 80033ea:	089b      	lsrs	r3, r3, #2
 80033ec:	33c0      	adds	r3, #192	; 0xc0
 80033ee:	009b      	lsls	r3, r3, #2
 80033f0:	589b      	ldr	r3, [r3, r2]
 80033f2:	1dfa      	adds	r2, r7, #7
 80033f4:	7812      	ldrb	r2, [r2, #0]
 80033f6:	0011      	movs	r1, r2
 80033f8:	2203      	movs	r2, #3
 80033fa:	400a      	ands	r2, r1
 80033fc:	00d2      	lsls	r2, r2, #3
 80033fe:	21ff      	movs	r1, #255	; 0xff
 8003400:	4091      	lsls	r1, r2
 8003402:	000a      	movs	r2, r1
 8003404:	43d2      	mvns	r2, r2
 8003406:	401a      	ands	r2, r3
 8003408:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800340a:	683b      	ldr	r3, [r7, #0]
 800340c:	019b      	lsls	r3, r3, #6
 800340e:	22ff      	movs	r2, #255	; 0xff
 8003410:	401a      	ands	r2, r3
 8003412:	1dfb      	adds	r3, r7, #7
 8003414:	781b      	ldrb	r3, [r3, #0]
 8003416:	0018      	movs	r0, r3
 8003418:	2303      	movs	r3, #3
 800341a:	4003      	ands	r3, r0
 800341c:	00db      	lsls	r3, r3, #3
 800341e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003420:	481f      	ldr	r0, [pc, #124]	; (80034a0 <__NVIC_SetPriority+0xd4>)
 8003422:	1dfb      	adds	r3, r7, #7
 8003424:	781b      	ldrb	r3, [r3, #0]
 8003426:	b25b      	sxtb	r3, r3
 8003428:	089b      	lsrs	r3, r3, #2
 800342a:	430a      	orrs	r2, r1
 800342c:	33c0      	adds	r3, #192	; 0xc0
 800342e:	009b      	lsls	r3, r3, #2
 8003430:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8003432:	e031      	b.n	8003498 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003434:	4a1b      	ldr	r2, [pc, #108]	; (80034a4 <__NVIC_SetPriority+0xd8>)
 8003436:	1dfb      	adds	r3, r7, #7
 8003438:	781b      	ldrb	r3, [r3, #0]
 800343a:	0019      	movs	r1, r3
 800343c:	230f      	movs	r3, #15
 800343e:	400b      	ands	r3, r1
 8003440:	3b08      	subs	r3, #8
 8003442:	089b      	lsrs	r3, r3, #2
 8003444:	3306      	adds	r3, #6
 8003446:	009b      	lsls	r3, r3, #2
 8003448:	18d3      	adds	r3, r2, r3
 800344a:	3304      	adds	r3, #4
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	1dfa      	adds	r2, r7, #7
 8003450:	7812      	ldrb	r2, [r2, #0]
 8003452:	0011      	movs	r1, r2
 8003454:	2203      	movs	r2, #3
 8003456:	400a      	ands	r2, r1
 8003458:	00d2      	lsls	r2, r2, #3
 800345a:	21ff      	movs	r1, #255	; 0xff
 800345c:	4091      	lsls	r1, r2
 800345e:	000a      	movs	r2, r1
 8003460:	43d2      	mvns	r2, r2
 8003462:	401a      	ands	r2, r3
 8003464:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003466:	683b      	ldr	r3, [r7, #0]
 8003468:	019b      	lsls	r3, r3, #6
 800346a:	22ff      	movs	r2, #255	; 0xff
 800346c:	401a      	ands	r2, r3
 800346e:	1dfb      	adds	r3, r7, #7
 8003470:	781b      	ldrb	r3, [r3, #0]
 8003472:	0018      	movs	r0, r3
 8003474:	2303      	movs	r3, #3
 8003476:	4003      	ands	r3, r0
 8003478:	00db      	lsls	r3, r3, #3
 800347a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800347c:	4809      	ldr	r0, [pc, #36]	; (80034a4 <__NVIC_SetPriority+0xd8>)
 800347e:	1dfb      	adds	r3, r7, #7
 8003480:	781b      	ldrb	r3, [r3, #0]
 8003482:	001c      	movs	r4, r3
 8003484:	230f      	movs	r3, #15
 8003486:	4023      	ands	r3, r4
 8003488:	3b08      	subs	r3, #8
 800348a:	089b      	lsrs	r3, r3, #2
 800348c:	430a      	orrs	r2, r1
 800348e:	3306      	adds	r3, #6
 8003490:	009b      	lsls	r3, r3, #2
 8003492:	18c3      	adds	r3, r0, r3
 8003494:	3304      	adds	r3, #4
 8003496:	601a      	str	r2, [r3, #0]
}
 8003498:	46c0      	nop			; (mov r8, r8)
 800349a:	46bd      	mov	sp, r7
 800349c:	b003      	add	sp, #12
 800349e:	bd90      	pop	{r4, r7, pc}
 80034a0:	e000e100 	.word	0xe000e100
 80034a4:	e000ed00 	.word	0xe000ed00

080034a8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80034a8:	b580      	push	{r7, lr}
 80034aa:	b082      	sub	sp, #8
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	1e5a      	subs	r2, r3, #1
 80034b4:	2380      	movs	r3, #128	; 0x80
 80034b6:	045b      	lsls	r3, r3, #17
 80034b8:	429a      	cmp	r2, r3
 80034ba:	d301      	bcc.n	80034c0 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80034bc:	2301      	movs	r3, #1
 80034be:	e010      	b.n	80034e2 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80034c0:	4b0a      	ldr	r3, [pc, #40]	; (80034ec <SysTick_Config+0x44>)
 80034c2:	687a      	ldr	r2, [r7, #4]
 80034c4:	3a01      	subs	r2, #1
 80034c6:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80034c8:	2301      	movs	r3, #1
 80034ca:	425b      	negs	r3, r3
 80034cc:	2103      	movs	r1, #3
 80034ce:	0018      	movs	r0, r3
 80034d0:	f7ff ff7c 	bl	80033cc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80034d4:	4b05      	ldr	r3, [pc, #20]	; (80034ec <SysTick_Config+0x44>)
 80034d6:	2200      	movs	r2, #0
 80034d8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80034da:	4b04      	ldr	r3, [pc, #16]	; (80034ec <SysTick_Config+0x44>)
 80034dc:	2207      	movs	r2, #7
 80034de:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80034e0:	2300      	movs	r3, #0
}
 80034e2:	0018      	movs	r0, r3
 80034e4:	46bd      	mov	sp, r7
 80034e6:	b002      	add	sp, #8
 80034e8:	bd80      	pop	{r7, pc}
 80034ea:	46c0      	nop			; (mov r8, r8)
 80034ec:	e000e010 	.word	0xe000e010

080034f0 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80034f0:	b580      	push	{r7, lr}
 80034f2:	b084      	sub	sp, #16
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	60b9      	str	r1, [r7, #8]
 80034f8:	607a      	str	r2, [r7, #4]
 80034fa:	210f      	movs	r1, #15
 80034fc:	187b      	adds	r3, r7, r1
 80034fe:	1c02      	adds	r2, r0, #0
 8003500:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8003502:	68ba      	ldr	r2, [r7, #8]
 8003504:	187b      	adds	r3, r7, r1
 8003506:	781b      	ldrb	r3, [r3, #0]
 8003508:	b25b      	sxtb	r3, r3
 800350a:	0011      	movs	r1, r2
 800350c:	0018      	movs	r0, r3
 800350e:	f7ff ff5d 	bl	80033cc <__NVIC_SetPriority>
}
 8003512:	46c0      	nop			; (mov r8, r8)
 8003514:	46bd      	mov	sp, r7
 8003516:	b004      	add	sp, #16
 8003518:	bd80      	pop	{r7, pc}

0800351a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800351a:	b580      	push	{r7, lr}
 800351c:	b082      	sub	sp, #8
 800351e:	af00      	add	r7, sp, #0
 8003520:	0002      	movs	r2, r0
 8003522:	1dfb      	adds	r3, r7, #7
 8003524:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003526:	1dfb      	adds	r3, r7, #7
 8003528:	781b      	ldrb	r3, [r3, #0]
 800352a:	b25b      	sxtb	r3, r3
 800352c:	0018      	movs	r0, r3
 800352e:	f7ff ff33 	bl	8003398 <__NVIC_EnableIRQ>
}
 8003532:	46c0      	nop			; (mov r8, r8)
 8003534:	46bd      	mov	sp, r7
 8003536:	b002      	add	sp, #8
 8003538:	bd80      	pop	{r7, pc}

0800353a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800353a:	b580      	push	{r7, lr}
 800353c:	b082      	sub	sp, #8
 800353e:	af00      	add	r7, sp, #0
 8003540:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	0018      	movs	r0, r3
 8003546:	f7ff ffaf 	bl	80034a8 <SysTick_Config>
 800354a:	0003      	movs	r3, r0
}
 800354c:	0018      	movs	r0, r3
 800354e:	46bd      	mov	sp, r7
 8003550:	b002      	add	sp, #8
 8003552:	bd80      	pop	{r7, pc}

08003554 <HAL_DMA_Abort>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003554:	b580      	push	{r7, lr}
 8003556:	b082      	sub	sp, #8
 8003558:	af00      	add	r7, sp, #0
 800355a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	2221      	movs	r2, #33	; 0x21
 8003560:	5c9b      	ldrb	r3, [r3, r2]
 8003562:	b2db      	uxtb	r3, r3
 8003564:	2b02      	cmp	r3, #2
 8003566:	d008      	beq.n	800357a <HAL_DMA_Abort+0x26>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	2204      	movs	r2, #4
 800356c:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	2220      	movs	r2, #32
 8003572:	2100      	movs	r1, #0
 8003574:	5499      	strb	r1, [r3, r2]
    
    return HAL_ERROR;
 8003576:	2301      	movs	r3, #1
 8003578:	e020      	b.n	80035bc <HAL_DMA_Abort+0x68>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	681a      	ldr	r2, [r3, #0]
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	210e      	movs	r1, #14
 8003586:	438a      	bics	r2, r1
 8003588:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	681a      	ldr	r2, [r3, #0]
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	2101      	movs	r1, #1
 8003596:	438a      	bics	r2, r1
 8003598:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035a2:	2101      	movs	r1, #1
 80035a4:	4091      	lsls	r1, r2
 80035a6:	000a      	movs	r2, r1
 80035a8:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	2221      	movs	r2, #33	; 0x21
 80035ae:	2101      	movs	r1, #1
 80035b0:	5499      	strb	r1, [r3, r2]
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	2220      	movs	r2, #32
 80035b6:	2100      	movs	r1, #0
 80035b8:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 80035ba:	2300      	movs	r3, #0
}
 80035bc:	0018      	movs	r0, r3
 80035be:	46bd      	mov	sp, r7
 80035c0:	b002      	add	sp, #8
 80035c2:	bd80      	pop	{r7, pc}

080035c4 <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80035c4:	b580      	push	{r7, lr}
 80035c6:	b084      	sub	sp, #16
 80035c8:	af00      	add	r7, sp, #0
 80035ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80035cc:	210f      	movs	r1, #15
 80035ce:	187b      	adds	r3, r7, r1
 80035d0:	2200      	movs	r2, #0
 80035d2:	701a      	strb	r2, [r3, #0]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	2221      	movs	r2, #33	; 0x21
 80035d8:	5c9b      	ldrb	r3, [r3, r2]
 80035da:	b2db      	uxtb	r3, r3
 80035dc:	2b02      	cmp	r3, #2
 80035de:	d006      	beq.n	80035ee <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	2204      	movs	r2, #4
 80035e4:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80035e6:	187b      	adds	r3, r7, r1
 80035e8:	2201      	movs	r2, #1
 80035ea:	701a      	strb	r2, [r3, #0]
 80035ec:	e028      	b.n	8003640 <HAL_DMA_Abort_IT+0x7c>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	681a      	ldr	r2, [r3, #0]
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	210e      	movs	r1, #14
 80035fa:	438a      	bics	r2, r1
 80035fc:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	681a      	ldr	r2, [r3, #0]
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	2101      	movs	r1, #1
 800360a:	438a      	bics	r2, r1
 800360c:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003616:	2101      	movs	r1, #1
 8003618:	4091      	lsls	r1, r2
 800361a:	000a      	movs	r2, r1
 800361c:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	2221      	movs	r2, #33	; 0x21
 8003622:	2101      	movs	r1, #1
 8003624:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	2220      	movs	r2, #32
 800362a:	2100      	movs	r1, #0
 800362c:	5499      	strb	r1, [r3, r2]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003632:	2b00      	cmp	r3, #0
 8003634:	d004      	beq.n	8003640 <HAL_DMA_Abort_IT+0x7c>
    {
      hdma->XferAbortCallback(hdma);
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800363a:	687a      	ldr	r2, [r7, #4]
 800363c:	0010      	movs	r0, r2
 800363e:	4798      	blx	r3
    } 
  }
  return status;
 8003640:	230f      	movs	r3, #15
 8003642:	18fb      	adds	r3, r7, r3
 8003644:	781b      	ldrb	r3, [r3, #0]
}
 8003646:	0018      	movs	r0, r3
 8003648:	46bd      	mov	sp, r7
 800364a:	b004      	add	sp, #16
 800364c:	bd80      	pop	{r7, pc}
	...

08003650 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003650:	b580      	push	{r7, lr}
 8003652:	b086      	sub	sp, #24
 8003654:	af00      	add	r7, sp, #0
 8003656:	6078      	str	r0, [r7, #4]
 8003658:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800365a:	2300      	movs	r3, #0
 800365c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800365e:	e155      	b.n	800390c <HAL_GPIO_Init+0x2bc>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003660:	683b      	ldr	r3, [r7, #0]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	2101      	movs	r1, #1
 8003666:	697a      	ldr	r2, [r7, #20]
 8003668:	4091      	lsls	r1, r2
 800366a:	000a      	movs	r2, r1
 800366c:	4013      	ands	r3, r2
 800366e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	2b00      	cmp	r3, #0
 8003674:	d100      	bne.n	8003678 <HAL_GPIO_Init+0x28>
 8003676:	e146      	b.n	8003906 <HAL_GPIO_Init+0x2b6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003678:	683b      	ldr	r3, [r7, #0]
 800367a:	685b      	ldr	r3, [r3, #4]
 800367c:	2203      	movs	r2, #3
 800367e:	4013      	ands	r3, r2
 8003680:	2b01      	cmp	r3, #1
 8003682:	d005      	beq.n	8003690 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003684:	683b      	ldr	r3, [r7, #0]
 8003686:	685b      	ldr	r3, [r3, #4]
 8003688:	2203      	movs	r2, #3
 800368a:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800368c:	2b02      	cmp	r3, #2
 800368e:	d130      	bne.n	80036f2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	689b      	ldr	r3, [r3, #8]
 8003694:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8003696:	697b      	ldr	r3, [r7, #20]
 8003698:	005b      	lsls	r3, r3, #1
 800369a:	2203      	movs	r2, #3
 800369c:	409a      	lsls	r2, r3
 800369e:	0013      	movs	r3, r2
 80036a0:	43da      	mvns	r2, r3
 80036a2:	693b      	ldr	r3, [r7, #16]
 80036a4:	4013      	ands	r3, r2
 80036a6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80036a8:	683b      	ldr	r3, [r7, #0]
 80036aa:	68da      	ldr	r2, [r3, #12]
 80036ac:	697b      	ldr	r3, [r7, #20]
 80036ae:	005b      	lsls	r3, r3, #1
 80036b0:	409a      	lsls	r2, r3
 80036b2:	0013      	movs	r3, r2
 80036b4:	693a      	ldr	r2, [r7, #16]
 80036b6:	4313      	orrs	r3, r2
 80036b8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	693a      	ldr	r2, [r7, #16]
 80036be:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	685b      	ldr	r3, [r3, #4]
 80036c4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80036c6:	2201      	movs	r2, #1
 80036c8:	697b      	ldr	r3, [r7, #20]
 80036ca:	409a      	lsls	r2, r3
 80036cc:	0013      	movs	r3, r2
 80036ce:	43da      	mvns	r2, r3
 80036d0:	693b      	ldr	r3, [r7, #16]
 80036d2:	4013      	ands	r3, r2
 80036d4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80036d6:	683b      	ldr	r3, [r7, #0]
 80036d8:	685b      	ldr	r3, [r3, #4]
 80036da:	091b      	lsrs	r3, r3, #4
 80036dc:	2201      	movs	r2, #1
 80036de:	401a      	ands	r2, r3
 80036e0:	697b      	ldr	r3, [r7, #20]
 80036e2:	409a      	lsls	r2, r3
 80036e4:	0013      	movs	r3, r2
 80036e6:	693a      	ldr	r2, [r7, #16]
 80036e8:	4313      	orrs	r3, r2
 80036ea:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	693a      	ldr	r2, [r7, #16]
 80036f0:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80036f2:	683b      	ldr	r3, [r7, #0]
 80036f4:	685b      	ldr	r3, [r3, #4]
 80036f6:	2203      	movs	r2, #3
 80036f8:	4013      	ands	r3, r2
 80036fa:	2b03      	cmp	r3, #3
 80036fc:	d017      	beq.n	800372e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	68db      	ldr	r3, [r3, #12]
 8003702:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8003704:	697b      	ldr	r3, [r7, #20]
 8003706:	005b      	lsls	r3, r3, #1
 8003708:	2203      	movs	r2, #3
 800370a:	409a      	lsls	r2, r3
 800370c:	0013      	movs	r3, r2
 800370e:	43da      	mvns	r2, r3
 8003710:	693b      	ldr	r3, [r7, #16]
 8003712:	4013      	ands	r3, r2
 8003714:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003716:	683b      	ldr	r3, [r7, #0]
 8003718:	689a      	ldr	r2, [r3, #8]
 800371a:	697b      	ldr	r3, [r7, #20]
 800371c:	005b      	lsls	r3, r3, #1
 800371e:	409a      	lsls	r2, r3
 8003720:	0013      	movs	r3, r2
 8003722:	693a      	ldr	r2, [r7, #16]
 8003724:	4313      	orrs	r3, r2
 8003726:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	693a      	ldr	r2, [r7, #16]
 800372c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800372e:	683b      	ldr	r3, [r7, #0]
 8003730:	685b      	ldr	r3, [r3, #4]
 8003732:	2203      	movs	r2, #3
 8003734:	4013      	ands	r3, r2
 8003736:	2b02      	cmp	r3, #2
 8003738:	d123      	bne.n	8003782 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800373a:	697b      	ldr	r3, [r7, #20]
 800373c:	08da      	lsrs	r2, r3, #3
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	3208      	adds	r2, #8
 8003742:	0092      	lsls	r2, r2, #2
 8003744:	58d3      	ldr	r3, [r2, r3]
 8003746:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003748:	697b      	ldr	r3, [r7, #20]
 800374a:	2207      	movs	r2, #7
 800374c:	4013      	ands	r3, r2
 800374e:	009b      	lsls	r3, r3, #2
 8003750:	220f      	movs	r2, #15
 8003752:	409a      	lsls	r2, r3
 8003754:	0013      	movs	r3, r2
 8003756:	43da      	mvns	r2, r3
 8003758:	693b      	ldr	r3, [r7, #16]
 800375a:	4013      	ands	r3, r2
 800375c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800375e:	683b      	ldr	r3, [r7, #0]
 8003760:	691a      	ldr	r2, [r3, #16]
 8003762:	697b      	ldr	r3, [r7, #20]
 8003764:	2107      	movs	r1, #7
 8003766:	400b      	ands	r3, r1
 8003768:	009b      	lsls	r3, r3, #2
 800376a:	409a      	lsls	r2, r3
 800376c:	0013      	movs	r3, r2
 800376e:	693a      	ldr	r2, [r7, #16]
 8003770:	4313      	orrs	r3, r2
 8003772:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003774:	697b      	ldr	r3, [r7, #20]
 8003776:	08da      	lsrs	r2, r3, #3
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	3208      	adds	r2, #8
 800377c:	0092      	lsls	r2, r2, #2
 800377e:	6939      	ldr	r1, [r7, #16]
 8003780:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8003788:	697b      	ldr	r3, [r7, #20]
 800378a:	005b      	lsls	r3, r3, #1
 800378c:	2203      	movs	r2, #3
 800378e:	409a      	lsls	r2, r3
 8003790:	0013      	movs	r3, r2
 8003792:	43da      	mvns	r2, r3
 8003794:	693b      	ldr	r3, [r7, #16]
 8003796:	4013      	ands	r3, r2
 8003798:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800379a:	683b      	ldr	r3, [r7, #0]
 800379c:	685b      	ldr	r3, [r3, #4]
 800379e:	2203      	movs	r2, #3
 80037a0:	401a      	ands	r2, r3
 80037a2:	697b      	ldr	r3, [r7, #20]
 80037a4:	005b      	lsls	r3, r3, #1
 80037a6:	409a      	lsls	r2, r3
 80037a8:	0013      	movs	r3, r2
 80037aa:	693a      	ldr	r2, [r7, #16]
 80037ac:	4313      	orrs	r3, r2
 80037ae:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	693a      	ldr	r2, [r7, #16]
 80037b4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80037b6:	683b      	ldr	r3, [r7, #0]
 80037b8:	685a      	ldr	r2, [r3, #4]
 80037ba:	23c0      	movs	r3, #192	; 0xc0
 80037bc:	029b      	lsls	r3, r3, #10
 80037be:	4013      	ands	r3, r2
 80037c0:	d100      	bne.n	80037c4 <HAL_GPIO_Init+0x174>
 80037c2:	e0a0      	b.n	8003906 <HAL_GPIO_Init+0x2b6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80037c4:	4b57      	ldr	r3, [pc, #348]	; (8003924 <HAL_GPIO_Init+0x2d4>)
 80037c6:	699a      	ldr	r2, [r3, #24]
 80037c8:	4b56      	ldr	r3, [pc, #344]	; (8003924 <HAL_GPIO_Init+0x2d4>)
 80037ca:	2101      	movs	r1, #1
 80037cc:	430a      	orrs	r2, r1
 80037ce:	619a      	str	r2, [r3, #24]
 80037d0:	4b54      	ldr	r3, [pc, #336]	; (8003924 <HAL_GPIO_Init+0x2d4>)
 80037d2:	699b      	ldr	r3, [r3, #24]
 80037d4:	2201      	movs	r2, #1
 80037d6:	4013      	ands	r3, r2
 80037d8:	60bb      	str	r3, [r7, #8]
 80037da:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80037dc:	4a52      	ldr	r2, [pc, #328]	; (8003928 <HAL_GPIO_Init+0x2d8>)
 80037de:	697b      	ldr	r3, [r7, #20]
 80037e0:	089b      	lsrs	r3, r3, #2
 80037e2:	3302      	adds	r3, #2
 80037e4:	009b      	lsls	r3, r3, #2
 80037e6:	589b      	ldr	r3, [r3, r2]
 80037e8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80037ea:	697b      	ldr	r3, [r7, #20]
 80037ec:	2203      	movs	r2, #3
 80037ee:	4013      	ands	r3, r2
 80037f0:	009b      	lsls	r3, r3, #2
 80037f2:	220f      	movs	r2, #15
 80037f4:	409a      	lsls	r2, r3
 80037f6:	0013      	movs	r3, r2
 80037f8:	43da      	mvns	r2, r3
 80037fa:	693b      	ldr	r3, [r7, #16]
 80037fc:	4013      	ands	r3, r2
 80037fe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003800:	687a      	ldr	r2, [r7, #4]
 8003802:	2390      	movs	r3, #144	; 0x90
 8003804:	05db      	lsls	r3, r3, #23
 8003806:	429a      	cmp	r2, r3
 8003808:	d019      	beq.n	800383e <HAL_GPIO_Init+0x1ee>
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	4a47      	ldr	r2, [pc, #284]	; (800392c <HAL_GPIO_Init+0x2dc>)
 800380e:	4293      	cmp	r3, r2
 8003810:	d013      	beq.n	800383a <HAL_GPIO_Init+0x1ea>
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	4a46      	ldr	r2, [pc, #280]	; (8003930 <HAL_GPIO_Init+0x2e0>)
 8003816:	4293      	cmp	r3, r2
 8003818:	d00d      	beq.n	8003836 <HAL_GPIO_Init+0x1e6>
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	4a45      	ldr	r2, [pc, #276]	; (8003934 <HAL_GPIO_Init+0x2e4>)
 800381e:	4293      	cmp	r3, r2
 8003820:	d007      	beq.n	8003832 <HAL_GPIO_Init+0x1e2>
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	4a44      	ldr	r2, [pc, #272]	; (8003938 <HAL_GPIO_Init+0x2e8>)
 8003826:	4293      	cmp	r3, r2
 8003828:	d101      	bne.n	800382e <HAL_GPIO_Init+0x1de>
 800382a:	2304      	movs	r3, #4
 800382c:	e008      	b.n	8003840 <HAL_GPIO_Init+0x1f0>
 800382e:	2305      	movs	r3, #5
 8003830:	e006      	b.n	8003840 <HAL_GPIO_Init+0x1f0>
 8003832:	2303      	movs	r3, #3
 8003834:	e004      	b.n	8003840 <HAL_GPIO_Init+0x1f0>
 8003836:	2302      	movs	r3, #2
 8003838:	e002      	b.n	8003840 <HAL_GPIO_Init+0x1f0>
 800383a:	2301      	movs	r3, #1
 800383c:	e000      	b.n	8003840 <HAL_GPIO_Init+0x1f0>
 800383e:	2300      	movs	r3, #0
 8003840:	697a      	ldr	r2, [r7, #20]
 8003842:	2103      	movs	r1, #3
 8003844:	400a      	ands	r2, r1
 8003846:	0092      	lsls	r2, r2, #2
 8003848:	4093      	lsls	r3, r2
 800384a:	693a      	ldr	r2, [r7, #16]
 800384c:	4313      	orrs	r3, r2
 800384e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003850:	4935      	ldr	r1, [pc, #212]	; (8003928 <HAL_GPIO_Init+0x2d8>)
 8003852:	697b      	ldr	r3, [r7, #20]
 8003854:	089b      	lsrs	r3, r3, #2
 8003856:	3302      	adds	r3, #2
 8003858:	009b      	lsls	r3, r3, #2
 800385a:	693a      	ldr	r2, [r7, #16]
 800385c:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800385e:	4b37      	ldr	r3, [pc, #220]	; (800393c <HAL_GPIO_Init+0x2ec>)
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	43da      	mvns	r2, r3
 8003868:	693b      	ldr	r3, [r7, #16]
 800386a:	4013      	ands	r3, r2
 800386c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800386e:	683b      	ldr	r3, [r7, #0]
 8003870:	685a      	ldr	r2, [r3, #4]
 8003872:	2380      	movs	r3, #128	; 0x80
 8003874:	025b      	lsls	r3, r3, #9
 8003876:	4013      	ands	r3, r2
 8003878:	d003      	beq.n	8003882 <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 800387a:	693a      	ldr	r2, [r7, #16]
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	4313      	orrs	r3, r2
 8003880:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8003882:	4b2e      	ldr	r3, [pc, #184]	; (800393c <HAL_GPIO_Init+0x2ec>)
 8003884:	693a      	ldr	r2, [r7, #16]
 8003886:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8003888:	4b2c      	ldr	r3, [pc, #176]	; (800393c <HAL_GPIO_Init+0x2ec>)
 800388a:	685b      	ldr	r3, [r3, #4]
 800388c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	43da      	mvns	r2, r3
 8003892:	693b      	ldr	r3, [r7, #16]
 8003894:	4013      	ands	r3, r2
 8003896:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003898:	683b      	ldr	r3, [r7, #0]
 800389a:	685a      	ldr	r2, [r3, #4]
 800389c:	2380      	movs	r3, #128	; 0x80
 800389e:	029b      	lsls	r3, r3, #10
 80038a0:	4013      	ands	r3, r2
 80038a2:	d003      	beq.n	80038ac <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 80038a4:	693a      	ldr	r2, [r7, #16]
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	4313      	orrs	r3, r2
 80038aa:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80038ac:	4b23      	ldr	r3, [pc, #140]	; (800393c <HAL_GPIO_Init+0x2ec>)
 80038ae:	693a      	ldr	r2, [r7, #16]
 80038b0:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80038b2:	4b22      	ldr	r3, [pc, #136]	; (800393c <HAL_GPIO_Init+0x2ec>)
 80038b4:	689b      	ldr	r3, [r3, #8]
 80038b6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	43da      	mvns	r2, r3
 80038bc:	693b      	ldr	r3, [r7, #16]
 80038be:	4013      	ands	r3, r2
 80038c0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80038c2:	683b      	ldr	r3, [r7, #0]
 80038c4:	685a      	ldr	r2, [r3, #4]
 80038c6:	2380      	movs	r3, #128	; 0x80
 80038c8:	035b      	lsls	r3, r3, #13
 80038ca:	4013      	ands	r3, r2
 80038cc:	d003      	beq.n	80038d6 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80038ce:	693a      	ldr	r2, [r7, #16]
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	4313      	orrs	r3, r2
 80038d4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80038d6:	4b19      	ldr	r3, [pc, #100]	; (800393c <HAL_GPIO_Init+0x2ec>)
 80038d8:	693a      	ldr	r2, [r7, #16]
 80038da:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80038dc:	4b17      	ldr	r3, [pc, #92]	; (800393c <HAL_GPIO_Init+0x2ec>)
 80038de:	68db      	ldr	r3, [r3, #12]
 80038e0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	43da      	mvns	r2, r3
 80038e6:	693b      	ldr	r3, [r7, #16]
 80038e8:	4013      	ands	r3, r2
 80038ea:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80038ec:	683b      	ldr	r3, [r7, #0]
 80038ee:	685a      	ldr	r2, [r3, #4]
 80038f0:	2380      	movs	r3, #128	; 0x80
 80038f2:	039b      	lsls	r3, r3, #14
 80038f4:	4013      	ands	r3, r2
 80038f6:	d003      	beq.n	8003900 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80038f8:	693a      	ldr	r2, [r7, #16]
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	4313      	orrs	r3, r2
 80038fe:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8003900:	4b0e      	ldr	r3, [pc, #56]	; (800393c <HAL_GPIO_Init+0x2ec>)
 8003902:	693a      	ldr	r2, [r7, #16]
 8003904:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 8003906:	697b      	ldr	r3, [r7, #20]
 8003908:	3301      	adds	r3, #1
 800390a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800390c:	683b      	ldr	r3, [r7, #0]
 800390e:	681a      	ldr	r2, [r3, #0]
 8003910:	697b      	ldr	r3, [r7, #20]
 8003912:	40da      	lsrs	r2, r3
 8003914:	1e13      	subs	r3, r2, #0
 8003916:	d000      	beq.n	800391a <HAL_GPIO_Init+0x2ca>
 8003918:	e6a2      	b.n	8003660 <HAL_GPIO_Init+0x10>
  } 
}
 800391a:	46c0      	nop			; (mov r8, r8)
 800391c:	46c0      	nop			; (mov r8, r8)
 800391e:	46bd      	mov	sp, r7
 8003920:	b006      	add	sp, #24
 8003922:	bd80      	pop	{r7, pc}
 8003924:	40021000 	.word	0x40021000
 8003928:	40010000 	.word	0x40010000
 800392c:	48000400 	.word	0x48000400
 8003930:	48000800 	.word	0x48000800
 8003934:	48000c00 	.word	0x48000c00
 8003938:	48001000 	.word	0x48001000
 800393c:	40010400 	.word	0x40010400

08003940 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003940:	b580      	push	{r7, lr}
 8003942:	b084      	sub	sp, #16
 8003944:	af00      	add	r7, sp, #0
 8003946:	6078      	str	r0, [r7, #4]
 8003948:	000a      	movs	r2, r1
 800394a:	1cbb      	adds	r3, r7, #2
 800394c:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	691b      	ldr	r3, [r3, #16]
 8003952:	1cba      	adds	r2, r7, #2
 8003954:	8812      	ldrh	r2, [r2, #0]
 8003956:	4013      	ands	r3, r2
 8003958:	d004      	beq.n	8003964 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 800395a:	230f      	movs	r3, #15
 800395c:	18fb      	adds	r3, r7, r3
 800395e:	2201      	movs	r2, #1
 8003960:	701a      	strb	r2, [r3, #0]
 8003962:	e003      	b.n	800396c <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003964:	230f      	movs	r3, #15
 8003966:	18fb      	adds	r3, r7, r3
 8003968:	2200      	movs	r2, #0
 800396a:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 800396c:	230f      	movs	r3, #15
 800396e:	18fb      	adds	r3, r7, r3
 8003970:	781b      	ldrb	r3, [r3, #0]
  }
 8003972:	0018      	movs	r0, r3
 8003974:	46bd      	mov	sp, r7
 8003976:	b004      	add	sp, #16
 8003978:	bd80      	pop	{r7, pc}

0800397a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800397a:	b580      	push	{r7, lr}
 800397c:	b082      	sub	sp, #8
 800397e:	af00      	add	r7, sp, #0
 8003980:	6078      	str	r0, [r7, #4]
 8003982:	0008      	movs	r0, r1
 8003984:	0011      	movs	r1, r2
 8003986:	1cbb      	adds	r3, r7, #2
 8003988:	1c02      	adds	r2, r0, #0
 800398a:	801a      	strh	r2, [r3, #0]
 800398c:	1c7b      	adds	r3, r7, #1
 800398e:	1c0a      	adds	r2, r1, #0
 8003990:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003992:	1c7b      	adds	r3, r7, #1
 8003994:	781b      	ldrb	r3, [r3, #0]
 8003996:	2b00      	cmp	r3, #0
 8003998:	d004      	beq.n	80039a4 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800399a:	1cbb      	adds	r3, r7, #2
 800399c:	881a      	ldrh	r2, [r3, #0]
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80039a2:	e003      	b.n	80039ac <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80039a4:	1cbb      	adds	r3, r7, #2
 80039a6:	881a      	ldrh	r2, [r3, #0]
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	629a      	str	r2, [r3, #40]	; 0x28
}
 80039ac:	46c0      	nop			; (mov r8, r8)
 80039ae:	46bd      	mov	sp, r7
 80039b0:	b002      	add	sp, #8
 80039b2:	bd80      	pop	{r7, pc}

080039b4 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F0 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80039b4:	b580      	push	{r7, lr}
 80039b6:	b084      	sub	sp, #16
 80039b8:	af00      	add	r7, sp, #0
 80039ba:	6078      	str	r0, [r7, #4]
 80039bc:	000a      	movs	r2, r1
 80039be:	1cbb      	adds	r3, r7, #2
 80039c0:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	695b      	ldr	r3, [r3, #20]
 80039c6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80039c8:	1cbb      	adds	r3, r7, #2
 80039ca:	881b      	ldrh	r3, [r3, #0]
 80039cc:	68fa      	ldr	r2, [r7, #12]
 80039ce:	4013      	ands	r3, r2
 80039d0:	041a      	lsls	r2, r3, #16
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	43db      	mvns	r3, r3
 80039d6:	1cb9      	adds	r1, r7, #2
 80039d8:	8809      	ldrh	r1, [r1, #0]
 80039da:	400b      	ands	r3, r1
 80039dc:	431a      	orrs	r2, r3
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	619a      	str	r2, [r3, #24]
}
 80039e2:	46c0      	nop			; (mov r8, r8)
 80039e4:	46bd      	mov	sp, r7
 80039e6:	b004      	add	sp, #16
 80039e8:	bd80      	pop	{r7, pc}
	...

080039ec <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80039ec:	b580      	push	{r7, lr}
 80039ee:	b082      	sub	sp, #8
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	0002      	movs	r2, r0
 80039f4:	1dbb      	adds	r3, r7, #6
 80039f6:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80039f8:	4b09      	ldr	r3, [pc, #36]	; (8003a20 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 80039fa:	695b      	ldr	r3, [r3, #20]
 80039fc:	1dba      	adds	r2, r7, #6
 80039fe:	8812      	ldrh	r2, [r2, #0]
 8003a00:	4013      	ands	r3, r2
 8003a02:	d008      	beq.n	8003a16 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003a04:	4b06      	ldr	r3, [pc, #24]	; (8003a20 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8003a06:	1dba      	adds	r2, r7, #6
 8003a08:	8812      	ldrh	r2, [r2, #0]
 8003a0a:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003a0c:	1dbb      	adds	r3, r7, #6
 8003a0e:	881b      	ldrh	r3, [r3, #0]
 8003a10:	0018      	movs	r0, r3
 8003a12:	f7fd f995 	bl	8000d40 <HAL_GPIO_EXTI_Callback>
  }
}
 8003a16:	46c0      	nop			; (mov r8, r8)
 8003a18:	46bd      	mov	sp, r7
 8003a1a:	b002      	add	sp, #8
 8003a1c:	bd80      	pop	{r7, pc}
 8003a1e:	46c0      	nop			; (mov r8, r8)
 8003a20:	40010400 	.word	0x40010400

08003a24 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003a24:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003a26:	b08b      	sub	sp, #44	; 0x2c
 8003a28:	af06      	add	r7, sp, #24
 8003a2a:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d101      	bne.n	8003a36 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003a32:	2301      	movs	r3, #1
 8003a34:	e0ff      	b.n	8003c36 <HAL_PCD_Init+0x212>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	4a81      	ldr	r2, [pc, #516]	; (8003c40 <HAL_PCD_Init+0x21c>)
 8003a3a:	5c9b      	ldrb	r3, [r3, r2]
 8003a3c:	b2db      	uxtb	r3, r3
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d108      	bne.n	8003a54 <HAL_PCD_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003a42:	687a      	ldr	r2, [r7, #4]
 8003a44:	23aa      	movs	r3, #170	; 0xaa
 8003a46:	009b      	lsls	r3, r3, #2
 8003a48:	2100      	movs	r1, #0
 8003a4a:	54d1      	strb	r1, [r2, r3]

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	0018      	movs	r0, r3
 8003a50:	f008 fd70 	bl	800c534 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	4a7a      	ldr	r2, [pc, #488]	; (8003c40 <HAL_PCD_Init+0x21c>)
 8003a58:	2103      	movs	r1, #3
 8003a5a:	5499      	strb	r1, [r3, r2]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	0018      	movs	r0, r3
 8003a62:	f004 fe0f 	bl	8008684 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003a66:	230f      	movs	r3, #15
 8003a68:	18fb      	adds	r3, r7, r3
 8003a6a:	2200      	movs	r2, #0
 8003a6c:	701a      	strb	r2, [r3, #0]
 8003a6e:	e058      	b.n	8003b22 <HAL_PCD_Init+0xfe>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003a70:	200f      	movs	r0, #15
 8003a72:	183b      	adds	r3, r7, r0
 8003a74:	781b      	ldrb	r3, [r3, #0]
 8003a76:	6879      	ldr	r1, [r7, #4]
 8003a78:	1c5a      	adds	r2, r3, #1
 8003a7a:	0013      	movs	r3, r2
 8003a7c:	009b      	lsls	r3, r3, #2
 8003a7e:	189b      	adds	r3, r3, r2
 8003a80:	00db      	lsls	r3, r3, #3
 8003a82:	18cb      	adds	r3, r1, r3
 8003a84:	3301      	adds	r3, #1
 8003a86:	2201      	movs	r2, #1
 8003a88:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003a8a:	183b      	adds	r3, r7, r0
 8003a8c:	781b      	ldrb	r3, [r3, #0]
 8003a8e:	6879      	ldr	r1, [r7, #4]
 8003a90:	1c5a      	adds	r2, r3, #1
 8003a92:	0013      	movs	r3, r2
 8003a94:	009b      	lsls	r3, r3, #2
 8003a96:	189b      	adds	r3, r3, r2
 8003a98:	00db      	lsls	r3, r3, #3
 8003a9a:	183a      	adds	r2, r7, r0
 8003a9c:	7812      	ldrb	r2, [r2, #0]
 8003a9e:	545a      	strb	r2, [r3, r1]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003aa0:	0004      	movs	r4, r0
 8003aa2:	183b      	adds	r3, r7, r0
 8003aa4:	781a      	ldrb	r2, [r3, #0]
 8003aa6:	193b      	adds	r3, r7, r4
 8003aa8:	781b      	ldrb	r3, [r3, #0]
 8003aaa:	b298      	uxth	r0, r3
 8003aac:	6879      	ldr	r1, [r7, #4]
 8003aae:	0013      	movs	r3, r2
 8003ab0:	009b      	lsls	r3, r3, #2
 8003ab2:	189b      	adds	r3, r3, r2
 8003ab4:	00db      	lsls	r3, r3, #3
 8003ab6:	18cb      	adds	r3, r1, r3
 8003ab8:	3336      	adds	r3, #54	; 0x36
 8003aba:	1c02      	adds	r2, r0, #0
 8003abc:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003abe:	193b      	adds	r3, r7, r4
 8003ac0:	781b      	ldrb	r3, [r3, #0]
 8003ac2:	6879      	ldr	r1, [r7, #4]
 8003ac4:	1c5a      	adds	r2, r3, #1
 8003ac6:	0013      	movs	r3, r2
 8003ac8:	009b      	lsls	r3, r3, #2
 8003aca:	189b      	adds	r3, r3, r2
 8003acc:	00db      	lsls	r3, r3, #3
 8003ace:	18cb      	adds	r3, r1, r3
 8003ad0:	3303      	adds	r3, #3
 8003ad2:	2200      	movs	r2, #0
 8003ad4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003ad6:	193b      	adds	r3, r7, r4
 8003ad8:	781a      	ldrb	r2, [r3, #0]
 8003ada:	6879      	ldr	r1, [r7, #4]
 8003adc:	0013      	movs	r3, r2
 8003ade:	009b      	lsls	r3, r3, #2
 8003ae0:	189b      	adds	r3, r3, r2
 8003ae2:	00db      	lsls	r3, r3, #3
 8003ae4:	18cb      	adds	r3, r1, r3
 8003ae6:	3338      	adds	r3, #56	; 0x38
 8003ae8:	2200      	movs	r2, #0
 8003aea:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003aec:	193b      	adds	r3, r7, r4
 8003aee:	781a      	ldrb	r2, [r3, #0]
 8003af0:	6879      	ldr	r1, [r7, #4]
 8003af2:	0013      	movs	r3, r2
 8003af4:	009b      	lsls	r3, r3, #2
 8003af6:	189b      	adds	r3, r3, r2
 8003af8:	00db      	lsls	r3, r3, #3
 8003afa:	18cb      	adds	r3, r1, r3
 8003afc:	333c      	adds	r3, #60	; 0x3c
 8003afe:	2200      	movs	r2, #0
 8003b00:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003b02:	193b      	adds	r3, r7, r4
 8003b04:	781a      	ldrb	r2, [r3, #0]
 8003b06:	6879      	ldr	r1, [r7, #4]
 8003b08:	0013      	movs	r3, r2
 8003b0a:	009b      	lsls	r3, r3, #2
 8003b0c:	189b      	adds	r3, r3, r2
 8003b0e:	00db      	lsls	r3, r3, #3
 8003b10:	18cb      	adds	r3, r1, r3
 8003b12:	3340      	adds	r3, #64	; 0x40
 8003b14:	2200      	movs	r2, #0
 8003b16:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003b18:	193b      	adds	r3, r7, r4
 8003b1a:	781a      	ldrb	r2, [r3, #0]
 8003b1c:	193b      	adds	r3, r7, r4
 8003b1e:	3201      	adds	r2, #1
 8003b20:	701a      	strb	r2, [r3, #0]
 8003b22:	210f      	movs	r1, #15
 8003b24:	187b      	adds	r3, r7, r1
 8003b26:	781a      	ldrb	r2, [r3, #0]
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	685b      	ldr	r3, [r3, #4]
 8003b2c:	429a      	cmp	r2, r3
 8003b2e:	d39f      	bcc.n	8003a70 <HAL_PCD_Init+0x4c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003b30:	187b      	adds	r3, r7, r1
 8003b32:	2200      	movs	r2, #0
 8003b34:	701a      	strb	r2, [r3, #0]
 8003b36:	e056      	b.n	8003be6 <HAL_PCD_Init+0x1c2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003b38:	240f      	movs	r4, #15
 8003b3a:	193b      	adds	r3, r7, r4
 8003b3c:	781a      	ldrb	r2, [r3, #0]
 8003b3e:	6878      	ldr	r0, [r7, #4]
 8003b40:	236a      	movs	r3, #106	; 0x6a
 8003b42:	33ff      	adds	r3, #255	; 0xff
 8003b44:	0019      	movs	r1, r3
 8003b46:	0013      	movs	r3, r2
 8003b48:	009b      	lsls	r3, r3, #2
 8003b4a:	189b      	adds	r3, r3, r2
 8003b4c:	00db      	lsls	r3, r3, #3
 8003b4e:	18c3      	adds	r3, r0, r3
 8003b50:	185b      	adds	r3, r3, r1
 8003b52:	2200      	movs	r2, #0
 8003b54:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003b56:	193b      	adds	r3, r7, r4
 8003b58:	781a      	ldrb	r2, [r3, #0]
 8003b5a:	6878      	ldr	r0, [r7, #4]
 8003b5c:	23b4      	movs	r3, #180	; 0xb4
 8003b5e:	0059      	lsls	r1, r3, #1
 8003b60:	0013      	movs	r3, r2
 8003b62:	009b      	lsls	r3, r3, #2
 8003b64:	189b      	adds	r3, r3, r2
 8003b66:	00db      	lsls	r3, r3, #3
 8003b68:	18c3      	adds	r3, r0, r3
 8003b6a:	185b      	adds	r3, r3, r1
 8003b6c:	193a      	adds	r2, r7, r4
 8003b6e:	7812      	ldrb	r2, [r2, #0]
 8003b70:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003b72:	193b      	adds	r3, r7, r4
 8003b74:	781a      	ldrb	r2, [r3, #0]
 8003b76:	6878      	ldr	r0, [r7, #4]
 8003b78:	236c      	movs	r3, #108	; 0x6c
 8003b7a:	33ff      	adds	r3, #255	; 0xff
 8003b7c:	0019      	movs	r1, r3
 8003b7e:	0013      	movs	r3, r2
 8003b80:	009b      	lsls	r3, r3, #2
 8003b82:	189b      	adds	r3, r3, r2
 8003b84:	00db      	lsls	r3, r3, #3
 8003b86:	18c3      	adds	r3, r0, r3
 8003b88:	185b      	adds	r3, r3, r1
 8003b8a:	2200      	movs	r2, #0
 8003b8c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003b8e:	193b      	adds	r3, r7, r4
 8003b90:	781a      	ldrb	r2, [r3, #0]
 8003b92:	6878      	ldr	r0, [r7, #4]
 8003b94:	23bc      	movs	r3, #188	; 0xbc
 8003b96:	0059      	lsls	r1, r3, #1
 8003b98:	0013      	movs	r3, r2
 8003b9a:	009b      	lsls	r3, r3, #2
 8003b9c:	189b      	adds	r3, r3, r2
 8003b9e:	00db      	lsls	r3, r3, #3
 8003ba0:	18c3      	adds	r3, r0, r3
 8003ba2:	185b      	adds	r3, r3, r1
 8003ba4:	2200      	movs	r2, #0
 8003ba6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003ba8:	193b      	adds	r3, r7, r4
 8003baa:	781a      	ldrb	r2, [r3, #0]
 8003bac:	6878      	ldr	r0, [r7, #4]
 8003bae:	23be      	movs	r3, #190	; 0xbe
 8003bb0:	0059      	lsls	r1, r3, #1
 8003bb2:	0013      	movs	r3, r2
 8003bb4:	009b      	lsls	r3, r3, #2
 8003bb6:	189b      	adds	r3, r3, r2
 8003bb8:	00db      	lsls	r3, r3, #3
 8003bba:	18c3      	adds	r3, r0, r3
 8003bbc:	185b      	adds	r3, r3, r1
 8003bbe:	2200      	movs	r2, #0
 8003bc0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003bc2:	193b      	adds	r3, r7, r4
 8003bc4:	781a      	ldrb	r2, [r3, #0]
 8003bc6:	6878      	ldr	r0, [r7, #4]
 8003bc8:	23c0      	movs	r3, #192	; 0xc0
 8003bca:	0059      	lsls	r1, r3, #1
 8003bcc:	0013      	movs	r3, r2
 8003bce:	009b      	lsls	r3, r3, #2
 8003bd0:	189b      	adds	r3, r3, r2
 8003bd2:	00db      	lsls	r3, r3, #3
 8003bd4:	18c3      	adds	r3, r0, r3
 8003bd6:	185b      	adds	r3, r3, r1
 8003bd8:	2200      	movs	r2, #0
 8003bda:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003bdc:	193b      	adds	r3, r7, r4
 8003bde:	781a      	ldrb	r2, [r3, #0]
 8003be0:	193b      	adds	r3, r7, r4
 8003be2:	3201      	adds	r2, #1
 8003be4:	701a      	strb	r2, [r3, #0]
 8003be6:	230f      	movs	r3, #15
 8003be8:	18fb      	adds	r3, r7, r3
 8003bea:	781a      	ldrb	r2, [r3, #0]
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	685b      	ldr	r3, [r3, #4]
 8003bf0:	429a      	cmp	r2, r3
 8003bf2:	d3a1      	bcc.n	8003b38 <HAL_PCD_Init+0x114>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	6818      	ldr	r0, [r3, #0]
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	466a      	mov	r2, sp
 8003bfc:	0011      	movs	r1, r2
 8003bfe:	001a      	movs	r2, r3
 8003c00:	3210      	adds	r2, #16
 8003c02:	ca70      	ldmia	r2!, {r4, r5, r6}
 8003c04:	c170      	stmia	r1!, {r4, r5, r6}
 8003c06:	ca30      	ldmia	r2!, {r4, r5}
 8003c08:	c130      	stmia	r1!, {r4, r5}
 8003c0a:	6859      	ldr	r1, [r3, #4]
 8003c0c:	689a      	ldr	r2, [r3, #8]
 8003c0e:	68db      	ldr	r3, [r3, #12]
 8003c10:	f004 fd52 	bl	80086b8 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	2224      	movs	r2, #36	; 0x24
 8003c18:	2100      	movs	r1, #0
 8003c1a:	5499      	strb	r1, [r3, r2]
  hpcd->State = HAL_PCD_STATE_READY;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	4a08      	ldr	r2, [pc, #32]	; (8003c40 <HAL_PCD_Init+0x21c>)
 8003c20:	2101      	movs	r1, #1
 8003c22:	5499      	strb	r1, [r3, r2]

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	69db      	ldr	r3, [r3, #28]
 8003c28:	2b01      	cmp	r3, #1
 8003c2a:	d103      	bne.n	8003c34 <HAL_PCD_Init+0x210>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	0018      	movs	r0, r3
 8003c30:	f001 fd34 	bl	800569c <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8003c34:	2300      	movs	r3, #0
}
 8003c36:	0018      	movs	r0, r3
 8003c38:	46bd      	mov	sp, r7
 8003c3a:	b005      	add	sp, #20
 8003c3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003c3e:	46c0      	nop			; (mov r8, r8)
 8003c40:	000002a9 	.word	0x000002a9

08003c44 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003c44:	b580      	push	{r7, lr}
 8003c46:	b082      	sub	sp, #8
 8003c48:	af00      	add	r7, sp, #0
 8003c4a:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8003c4c:	687a      	ldr	r2, [r7, #4]
 8003c4e:	23aa      	movs	r3, #170	; 0xaa
 8003c50:	009b      	lsls	r3, r3, #2
 8003c52:	5cd3      	ldrb	r3, [r2, r3]
 8003c54:	2b01      	cmp	r3, #1
 8003c56:	d101      	bne.n	8003c5c <HAL_PCD_Start+0x18>
 8003c58:	2302      	movs	r3, #2
 8003c5a:	e014      	b.n	8003c86 <HAL_PCD_Start+0x42>
 8003c5c:	687a      	ldr	r2, [r7, #4]
 8003c5e:	23aa      	movs	r3, #170	; 0xaa
 8003c60:	009b      	lsls	r3, r3, #2
 8003c62:	2101      	movs	r1, #1
 8003c64:	54d1      	strb	r1, [r2, r3]
  __HAL_PCD_ENABLE(hpcd);
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	0018      	movs	r0, r3
 8003c6c:	f004 fcf4 	bl	8008658 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	0018      	movs	r0, r3
 8003c76:	f006 fc4f 	bl	800a518 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8003c7a:	687a      	ldr	r2, [r7, #4]
 8003c7c:	23aa      	movs	r3, #170	; 0xaa
 8003c7e:	009b      	lsls	r3, r3, #2
 8003c80:	2100      	movs	r1, #0
 8003c82:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8003c84:	2300      	movs	r3, #0
}
 8003c86:	0018      	movs	r0, r3
 8003c88:	46bd      	mov	sp, r7
 8003c8a:	b002      	add	sp, #8
 8003c8c:	bd80      	pop	{r7, pc}
	...

08003c90 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003c90:	b580      	push	{r7, lr}
 8003c92:	b082      	sub	sp, #8
 8003c94:	af00      	add	r7, sp, #0
 8003c96:	6078      	str	r0, [r7, #4]
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	0018      	movs	r0, r3
 8003c9e:	f006 fc51 	bl	800a544 <USB_ReadInterrupts>
 8003ca2:	0002      	movs	r2, r0
 8003ca4:	2380      	movs	r3, #128	; 0x80
 8003ca6:	021b      	lsls	r3, r3, #8
 8003ca8:	401a      	ands	r2, r3
 8003caa:	2380      	movs	r3, #128	; 0x80
 8003cac:	021b      	lsls	r3, r3, #8
 8003cae:	429a      	cmp	r2, r3
 8003cb0:	d103      	bne.n	8003cba <HAL_PCD_IRQHandler+0x2a>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	0018      	movs	r0, r3
 8003cb6:	f000 fbbb 	bl	8004430 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	0018      	movs	r0, r3
 8003cc0:	f006 fc40 	bl	800a544 <USB_ReadInterrupts>
 8003cc4:	0002      	movs	r2, r0
 8003cc6:	2380      	movs	r3, #128	; 0x80
 8003cc8:	00db      	lsls	r3, r3, #3
 8003cca:	401a      	ands	r2, r3
 8003ccc:	2380      	movs	r3, #128	; 0x80
 8003cce:	00db      	lsls	r3, r3, #3
 8003cd0:	429a      	cmp	r2, r3
 8003cd2:	d114      	bne.n	8003cfe <HAL_PCD_IRQHandler+0x6e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	2244      	movs	r2, #68	; 0x44
 8003cda:	5a9b      	ldrh	r3, [r3, r2]
 8003cdc:	b29a      	uxth	r2, r3
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	49a2      	ldr	r1, [pc, #648]	; (8003f6c <HAL_PCD_IRQHandler+0x2dc>)
 8003ce4:	400a      	ands	r2, r1
 8003ce6:	b291      	uxth	r1, r2
 8003ce8:	2244      	movs	r2, #68	; 0x44
 8003cea:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	0018      	movs	r0, r3
 8003cf0:	f008 fcab 	bl	800c64a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	2100      	movs	r1, #0
 8003cf8:	0018      	movs	r0, r3
 8003cfa:	f000 f945 	bl	8003f88 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	0018      	movs	r0, r3
 8003d04:	f006 fc1e 	bl	800a544 <USB_ReadInterrupts>
 8003d08:	0002      	movs	r2, r0
 8003d0a:	2380      	movs	r3, #128	; 0x80
 8003d0c:	01db      	lsls	r3, r3, #7
 8003d0e:	401a      	ands	r2, r3
 8003d10:	2380      	movs	r3, #128	; 0x80
 8003d12:	01db      	lsls	r3, r3, #7
 8003d14:	429a      	cmp	r2, r3
 8003d16:	d10b      	bne.n	8003d30 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	2244      	movs	r2, #68	; 0x44
 8003d1e:	5a9b      	ldrh	r3, [r3, r2]
 8003d20:	b29a      	uxth	r2, r3
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	4992      	ldr	r1, [pc, #584]	; (8003f70 <HAL_PCD_IRQHandler+0x2e0>)
 8003d28:	400a      	ands	r2, r1
 8003d2a:	b291      	uxth	r1, r2
 8003d2c:	2244      	movs	r2, #68	; 0x44
 8003d2e:	5299      	strh	r1, [r3, r2]
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	0018      	movs	r0, r3
 8003d36:	f006 fc05 	bl	800a544 <USB_ReadInterrupts>
 8003d3a:	0002      	movs	r2, r0
 8003d3c:	2380      	movs	r3, #128	; 0x80
 8003d3e:	019b      	lsls	r3, r3, #6
 8003d40:	401a      	ands	r2, r3
 8003d42:	2380      	movs	r3, #128	; 0x80
 8003d44:	019b      	lsls	r3, r3, #6
 8003d46:	429a      	cmp	r2, r3
 8003d48:	d10b      	bne.n	8003d62 <HAL_PCD_IRQHandler+0xd2>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	2244      	movs	r2, #68	; 0x44
 8003d50:	5a9b      	ldrh	r3, [r3, r2]
 8003d52:	b29a      	uxth	r2, r3
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	4986      	ldr	r1, [pc, #536]	; (8003f74 <HAL_PCD_IRQHandler+0x2e4>)
 8003d5a:	400a      	ands	r2, r1
 8003d5c:	b291      	uxth	r1, r2
 8003d5e:	2244      	movs	r2, #68	; 0x44
 8003d60:	5299      	strh	r1, [r3, r2]
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	0018      	movs	r0, r3
 8003d68:	f006 fbec 	bl	800a544 <USB_ReadInterrupts>
 8003d6c:	0002      	movs	r2, r0
 8003d6e:	2380      	movs	r3, #128	; 0x80
 8003d70:	015b      	lsls	r3, r3, #5
 8003d72:	401a      	ands	r2, r3
 8003d74:	2380      	movs	r3, #128	; 0x80
 8003d76:	015b      	lsls	r3, r3, #5
 8003d78:	429a      	cmp	r2, r3
 8003d7a:	d137      	bne.n	8003dec <HAL_PCD_IRQHandler+0x15c>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	2240      	movs	r2, #64	; 0x40
 8003d82:	5a9b      	ldrh	r3, [r3, r2]
 8003d84:	b29a      	uxth	r2, r3
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	2104      	movs	r1, #4
 8003d8c:	438a      	bics	r2, r1
 8003d8e:	b291      	uxth	r1, r2
 8003d90:	2240      	movs	r2, #64	; 0x40
 8003d92:	5299      	strh	r1, [r3, r2]
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	2240      	movs	r2, #64	; 0x40
 8003d9a:	5a9b      	ldrh	r3, [r3, r2]
 8003d9c:	b29a      	uxth	r2, r3
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	2108      	movs	r1, #8
 8003da4:	438a      	bics	r2, r1
 8003da6:	b291      	uxth	r1, r2
 8003da8:	2240      	movs	r2, #64	; 0x40
 8003daa:	5299      	strh	r1, [r3, r2]

    if (hpcd->LPM_State == LPM_L1)
 8003dac:	687a      	ldr	r2, [r7, #4]
 8003dae:	23b8      	movs	r3, #184	; 0xb8
 8003db0:	009b      	lsls	r3, r3, #2
 8003db2:	5cd3      	ldrb	r3, [r2, r3]
 8003db4:	2b01      	cmp	r3, #1
 8003db6:	d109      	bne.n	8003dcc <HAL_PCD_IRQHandler+0x13c>
    {
      hpcd->LPM_State = LPM_L0;
 8003db8:	687a      	ldr	r2, [r7, #4]
 8003dba:	23b8      	movs	r3, #184	; 0xb8
 8003dbc:	009b      	lsls	r3, r3, #2
 8003dbe:	2100      	movs	r1, #0
 8003dc0:	54d1      	strb	r1, [r2, r3]
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	2100      	movs	r1, #0
 8003dc6:	0018      	movs	r0, r3
 8003dc8:	f001 fc92 	bl	80056f0 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	0018      	movs	r0, r3
 8003dd0:	f008 fc7c 	bl	800c6cc <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	2244      	movs	r2, #68	; 0x44
 8003dda:	5a9b      	ldrh	r3, [r3, r2]
 8003ddc:	b29a      	uxth	r2, r3
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	4965      	ldr	r1, [pc, #404]	; (8003f78 <HAL_PCD_IRQHandler+0x2e8>)
 8003de4:	400a      	ands	r2, r1
 8003de6:	b291      	uxth	r1, r2
 8003de8:	2244      	movs	r2, #68	; 0x44
 8003dea:	5299      	strh	r1, [r3, r2]
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	0018      	movs	r0, r3
 8003df2:	f006 fba7 	bl	800a544 <USB_ReadInterrupts>
 8003df6:	0002      	movs	r2, r0
 8003df8:	2380      	movs	r3, #128	; 0x80
 8003dfa:	011b      	lsls	r3, r3, #4
 8003dfc:	401a      	ands	r2, r3
 8003dfe:	2380      	movs	r3, #128	; 0x80
 8003e00:	011b      	lsls	r3, r3, #4
 8003e02:	429a      	cmp	r2, r3
 8003e04:	d127      	bne.n	8003e56 <HAL_PCD_IRQHandler+0x1c6>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	2240      	movs	r2, #64	; 0x40
 8003e0c:	5a9b      	ldrh	r3, [r3, r2]
 8003e0e:	b29a      	uxth	r2, r3
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	2108      	movs	r1, #8
 8003e16:	430a      	orrs	r2, r1
 8003e18:	b291      	uxth	r1, r2
 8003e1a:	2240      	movs	r2, #64	; 0x40
 8003e1c:	5299      	strh	r1, [r3, r2]

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	2244      	movs	r2, #68	; 0x44
 8003e24:	5a9b      	ldrh	r3, [r3, r2]
 8003e26:	b29a      	uxth	r2, r3
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	4953      	ldr	r1, [pc, #332]	; (8003f7c <HAL_PCD_IRQHandler+0x2ec>)
 8003e2e:	400a      	ands	r2, r1
 8003e30:	b291      	uxth	r1, r2
 8003e32:	2244      	movs	r2, #68	; 0x44
 8003e34:	5299      	strh	r1, [r3, r2]

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	2240      	movs	r2, #64	; 0x40
 8003e3c:	5a9b      	ldrh	r3, [r3, r2]
 8003e3e:	b29a      	uxth	r2, r3
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	2104      	movs	r1, #4
 8003e46:	430a      	orrs	r2, r1
 8003e48:	b291      	uxth	r1, r2
 8003e4a:	2240      	movs	r2, #64	; 0x40
 8003e4c:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	0018      	movs	r0, r3
 8003e52:	f008 fc1f 	bl	800c694 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  /* Handle LPM Interrupt */
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_L1REQ))
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	0018      	movs	r0, r3
 8003e5c:	f006 fb72 	bl	800a544 <USB_ReadInterrupts>
 8003e60:	0003      	movs	r3, r0
 8003e62:	2280      	movs	r2, #128	; 0x80
 8003e64:	4013      	ands	r3, r2
 8003e66:	2b80      	cmp	r3, #128	; 0x80
 8003e68:	d145      	bne.n	8003ef6 <HAL_PCD_IRQHandler+0x266>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	2244      	movs	r2, #68	; 0x44
 8003e70:	5a9b      	ldrh	r3, [r3, r2]
 8003e72:	b29a      	uxth	r2, r3
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	2180      	movs	r1, #128	; 0x80
 8003e7a:	438a      	bics	r2, r1
 8003e7c:	b291      	uxth	r1, r2
 8003e7e:	2244      	movs	r2, #68	; 0x44
 8003e80:	5299      	strh	r1, [r3, r2]
    if (hpcd->LPM_State == LPM_L0)
 8003e82:	687a      	ldr	r2, [r7, #4]
 8003e84:	23b8      	movs	r3, #184	; 0xb8
 8003e86:	009b      	lsls	r3, r3, #2
 8003e88:	5cd3      	ldrb	r3, [r2, r3]
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d12f      	bne.n	8003eee <HAL_PCD_IRQHandler+0x25e>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	2240      	movs	r2, #64	; 0x40
 8003e94:	5a9b      	ldrh	r3, [r3, r2]
 8003e96:	b29a      	uxth	r2, r3
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	2104      	movs	r1, #4
 8003e9e:	430a      	orrs	r2, r1
 8003ea0:	b291      	uxth	r1, r2
 8003ea2:	2240      	movs	r2, #64	; 0x40
 8003ea4:	5299      	strh	r1, [r3, r2]
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	2240      	movs	r2, #64	; 0x40
 8003eac:	5a9b      	ldrh	r3, [r3, r2]
 8003eae:	b29a      	uxth	r2, r3
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	2108      	movs	r1, #8
 8003eb6:	430a      	orrs	r2, r1
 8003eb8:	b291      	uxth	r1, r2
 8003eba:	2240      	movs	r2, #64	; 0x40
 8003ebc:	5299      	strh	r1, [r3, r2]

      hpcd->LPM_State = LPM_L1;
 8003ebe:	687a      	ldr	r2, [r7, #4]
 8003ec0:	23b8      	movs	r3, #184	; 0xb8
 8003ec2:	009b      	lsls	r3, r3, #2
 8003ec4:	2101      	movs	r1, #1
 8003ec6:	54d1      	strb	r1, [r2, r3]
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	2254      	movs	r2, #84	; 0x54
 8003ece:	5a9b      	ldrh	r3, [r3, r2]
 8003ed0:	b29b      	uxth	r3, r3
 8003ed2:	089b      	lsrs	r3, r3, #2
 8003ed4:	223c      	movs	r2, #60	; 0x3c
 8003ed6:	4013      	ands	r3, r2
 8003ed8:	0019      	movs	r1, r3
 8003eda:	687a      	ldr	r2, [r7, #4]
 8003edc:	23b9      	movs	r3, #185	; 0xb9
 8003ede:	009b      	lsls	r3, r3, #2
 8003ee0:	50d1      	str	r1, [r2, r3]
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	2101      	movs	r1, #1
 8003ee6:	0018      	movs	r0, r3
 8003ee8:	f001 fc02 	bl	80056f0 <HAL_PCDEx_LPM_Callback>
 8003eec:	e003      	b.n	8003ef6 <HAL_PCD_IRQHandler+0x266>
    else
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SuspendCallback(hpcd);
#else
      HAL_PCD_SuspendCallback(hpcd);
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	0018      	movs	r0, r3
 8003ef2:	f008 fbcf 	bl	800c694 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	0018      	movs	r0, r3
 8003efc:	f006 fb22 	bl	800a544 <USB_ReadInterrupts>
 8003f00:	0002      	movs	r2, r0
 8003f02:	2380      	movs	r3, #128	; 0x80
 8003f04:	009b      	lsls	r3, r3, #2
 8003f06:	401a      	ands	r2, r3
 8003f08:	2380      	movs	r3, #128	; 0x80
 8003f0a:	009b      	lsls	r3, r3, #2
 8003f0c:	429a      	cmp	r2, r3
 8003f0e:	d10f      	bne.n	8003f30 <HAL_PCD_IRQHandler+0x2a0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	2244      	movs	r2, #68	; 0x44
 8003f16:	5a9b      	ldrh	r3, [r3, r2]
 8003f18:	b29a      	uxth	r2, r3
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	4918      	ldr	r1, [pc, #96]	; (8003f80 <HAL_PCD_IRQHandler+0x2f0>)
 8003f20:	400a      	ands	r2, r1
 8003f22:	b291      	uxth	r1, r2
 8003f24:	2244      	movs	r2, #68	; 0x44
 8003f26:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	0018      	movs	r0, r3
 8003f2c:	f008 fb7e 	bl	800c62c <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	0018      	movs	r0, r3
 8003f36:	f006 fb05 	bl	800a544 <USB_ReadInterrupts>
 8003f3a:	0002      	movs	r2, r0
 8003f3c:	2380      	movs	r3, #128	; 0x80
 8003f3e:	005b      	lsls	r3, r3, #1
 8003f40:	401a      	ands	r2, r3
 8003f42:	2380      	movs	r3, #128	; 0x80
 8003f44:	005b      	lsls	r3, r3, #1
 8003f46:	429a      	cmp	r2, r3
 8003f48:	d10b      	bne.n	8003f62 <HAL_PCD_IRQHandler+0x2d2>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	2244      	movs	r2, #68	; 0x44
 8003f50:	5a9b      	ldrh	r3, [r3, r2]
 8003f52:	b29a      	uxth	r2, r3
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	490a      	ldr	r1, [pc, #40]	; (8003f84 <HAL_PCD_IRQHandler+0x2f4>)
 8003f5a:	400a      	ands	r2, r1
 8003f5c:	b291      	uxth	r1, r2
 8003f5e:	2244      	movs	r2, #68	; 0x44
 8003f60:	5299      	strh	r1, [r3, r2]
  }
}
 8003f62:	46c0      	nop			; (mov r8, r8)
 8003f64:	46bd      	mov	sp, r7
 8003f66:	b002      	add	sp, #8
 8003f68:	bd80      	pop	{r7, pc}
 8003f6a:	46c0      	nop			; (mov r8, r8)
 8003f6c:	fffffbff 	.word	0xfffffbff
 8003f70:	ffffbfff 	.word	0xffffbfff
 8003f74:	ffffdfff 	.word	0xffffdfff
 8003f78:	ffffefff 	.word	0xffffefff
 8003f7c:	fffff7ff 	.word	0xfffff7ff
 8003f80:	fffffdff 	.word	0xfffffdff
 8003f84:	fffffeff 	.word	0xfffffeff

08003f88 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003f88:	b580      	push	{r7, lr}
 8003f8a:	b082      	sub	sp, #8
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	6078      	str	r0, [r7, #4]
 8003f90:	000a      	movs	r2, r1
 8003f92:	1cfb      	adds	r3, r7, #3
 8003f94:	701a      	strb	r2, [r3, #0]
  __HAL_LOCK(hpcd);
 8003f96:	687a      	ldr	r2, [r7, #4]
 8003f98:	23aa      	movs	r3, #170	; 0xaa
 8003f9a:	009b      	lsls	r3, r3, #2
 8003f9c:	5cd3      	ldrb	r3, [r2, r3]
 8003f9e:	2b01      	cmp	r3, #1
 8003fa0:	d101      	bne.n	8003fa6 <HAL_PCD_SetAddress+0x1e>
 8003fa2:	2302      	movs	r3, #2
 8003fa4:	e017      	b.n	8003fd6 <HAL_PCD_SetAddress+0x4e>
 8003fa6:	687a      	ldr	r2, [r7, #4]
 8003fa8:	23aa      	movs	r3, #170	; 0xaa
 8003faa:	009b      	lsls	r3, r3, #2
 8003fac:	2101      	movs	r1, #1
 8003fae:	54d1      	strb	r1, [r2, r3]
  hpcd->USB_Address = address;
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	1cfa      	adds	r2, r7, #3
 8003fb4:	2124      	movs	r1, #36	; 0x24
 8003fb6:	7812      	ldrb	r2, [r2, #0]
 8003fb8:	545a      	strb	r2, [r3, r1]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681a      	ldr	r2, [r3, #0]
 8003fbe:	1cfb      	adds	r3, r7, #3
 8003fc0:	781b      	ldrb	r3, [r3, #0]
 8003fc2:	0019      	movs	r1, r3
 8003fc4:	0010      	movs	r0, r2
 8003fc6:	f006 fa93 	bl	800a4f0 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003fca:	687a      	ldr	r2, [r7, #4]
 8003fcc:	23aa      	movs	r3, #170	; 0xaa
 8003fce:	009b      	lsls	r3, r3, #2
 8003fd0:	2100      	movs	r1, #0
 8003fd2:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8003fd4:	2300      	movs	r3, #0
}
 8003fd6:	0018      	movs	r0, r3
 8003fd8:	46bd      	mov	sp, r7
 8003fda:	b002      	add	sp, #8
 8003fdc:	bd80      	pop	{r7, pc}

08003fde <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003fde:	b590      	push	{r4, r7, lr}
 8003fe0:	b085      	sub	sp, #20
 8003fe2:	af00      	add	r7, sp, #0
 8003fe4:	6078      	str	r0, [r7, #4]
 8003fe6:	000c      	movs	r4, r1
 8003fe8:	0010      	movs	r0, r2
 8003fea:	0019      	movs	r1, r3
 8003fec:	1cfb      	adds	r3, r7, #3
 8003fee:	1c22      	adds	r2, r4, #0
 8003ff0:	701a      	strb	r2, [r3, #0]
 8003ff2:	003b      	movs	r3, r7
 8003ff4:	1c02      	adds	r2, r0, #0
 8003ff6:	801a      	strh	r2, [r3, #0]
 8003ff8:	1cbb      	adds	r3, r7, #2
 8003ffa:	1c0a      	adds	r2, r1, #0
 8003ffc:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003ffe:	230b      	movs	r3, #11
 8004000:	18fb      	adds	r3, r7, r3
 8004002:	2200      	movs	r2, #0
 8004004:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004006:	1cfb      	adds	r3, r7, #3
 8004008:	781b      	ldrb	r3, [r3, #0]
 800400a:	b25b      	sxtb	r3, r3
 800400c:	2b00      	cmp	r3, #0
 800400e:	da0f      	bge.n	8004030 <HAL_PCD_EP_Open+0x52>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004010:	1cfb      	adds	r3, r7, #3
 8004012:	781b      	ldrb	r3, [r3, #0]
 8004014:	2207      	movs	r2, #7
 8004016:	4013      	ands	r3, r2
 8004018:	1c5a      	adds	r2, r3, #1
 800401a:	0013      	movs	r3, r2
 800401c:	009b      	lsls	r3, r3, #2
 800401e:	189b      	adds	r3, r3, r2
 8004020:	00db      	lsls	r3, r3, #3
 8004022:	687a      	ldr	r2, [r7, #4]
 8004024:	18d3      	adds	r3, r2, r3
 8004026:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	2201      	movs	r2, #1
 800402c:	705a      	strb	r2, [r3, #1]
 800402e:	e00f      	b.n	8004050 <HAL_PCD_EP_Open+0x72>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004030:	1cfb      	adds	r3, r7, #3
 8004032:	781b      	ldrb	r3, [r3, #0]
 8004034:	2207      	movs	r2, #7
 8004036:	401a      	ands	r2, r3
 8004038:	0013      	movs	r3, r2
 800403a:	009b      	lsls	r3, r3, #2
 800403c:	189b      	adds	r3, r3, r2
 800403e:	00db      	lsls	r3, r3, #3
 8004040:	3369      	adds	r3, #105	; 0x69
 8004042:	33ff      	adds	r3, #255	; 0xff
 8004044:	687a      	ldr	r2, [r7, #4]
 8004046:	18d3      	adds	r3, r2, r3
 8004048:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	2200      	movs	r2, #0
 800404e:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8004050:	1cfb      	adds	r3, r7, #3
 8004052:	781b      	ldrb	r3, [r3, #0]
 8004054:	2207      	movs	r2, #7
 8004056:	4013      	ands	r3, r2
 8004058:	b2da      	uxtb	r2, r3
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800405e:	003b      	movs	r3, r7
 8004060:	881a      	ldrh	r2, [r3, #0]
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	1cba      	adds	r2, r7, #2
 800406a:	7812      	ldrb	r2, [r2, #0]
 800406c:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	785b      	ldrb	r3, [r3, #1]
 8004072:	2b00      	cmp	r3, #0
 8004074:	d004      	beq.n	8004080 <HAL_PCD_EP_Open+0xa2>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	781b      	ldrb	r3, [r3, #0]
 800407a:	b29a      	uxth	r2, r3
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8004080:	1cbb      	adds	r3, r7, #2
 8004082:	781b      	ldrb	r3, [r3, #0]
 8004084:	2b02      	cmp	r3, #2
 8004086:	d102      	bne.n	800408e <HAL_PCD_EP_Open+0xb0>
  {
    ep->data_pid_start = 0U;
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	2200      	movs	r2, #0
 800408c:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800408e:	687a      	ldr	r2, [r7, #4]
 8004090:	23aa      	movs	r3, #170	; 0xaa
 8004092:	009b      	lsls	r3, r3, #2
 8004094:	5cd3      	ldrb	r3, [r2, r3]
 8004096:	2b01      	cmp	r3, #1
 8004098:	d101      	bne.n	800409e <HAL_PCD_EP_Open+0xc0>
 800409a:	2302      	movs	r3, #2
 800409c:	e013      	b.n	80040c6 <HAL_PCD_EP_Open+0xe8>
 800409e:	687a      	ldr	r2, [r7, #4]
 80040a0:	23aa      	movs	r3, #170	; 0xaa
 80040a2:	009b      	lsls	r3, r3, #2
 80040a4:	2101      	movs	r1, #1
 80040a6:	54d1      	strb	r1, [r2, r3]
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	68fa      	ldr	r2, [r7, #12]
 80040ae:	0011      	movs	r1, r2
 80040b0:	0018      	movs	r0, r3
 80040b2:	f004 fb2d 	bl	8008710 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80040b6:	687a      	ldr	r2, [r7, #4]
 80040b8:	23aa      	movs	r3, #170	; 0xaa
 80040ba:	009b      	lsls	r3, r3, #2
 80040bc:	2100      	movs	r1, #0
 80040be:	54d1      	strb	r1, [r2, r3]

  return ret;
 80040c0:	230b      	movs	r3, #11
 80040c2:	18fb      	adds	r3, r7, r3
 80040c4:	781b      	ldrb	r3, [r3, #0]
}
 80040c6:	0018      	movs	r0, r3
 80040c8:	46bd      	mov	sp, r7
 80040ca:	b005      	add	sp, #20
 80040cc:	bd90      	pop	{r4, r7, pc}

080040ce <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80040ce:	b580      	push	{r7, lr}
 80040d0:	b084      	sub	sp, #16
 80040d2:	af00      	add	r7, sp, #0
 80040d4:	6078      	str	r0, [r7, #4]
 80040d6:	000a      	movs	r2, r1
 80040d8:	1cfb      	adds	r3, r7, #3
 80040da:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80040dc:	1cfb      	adds	r3, r7, #3
 80040de:	781b      	ldrb	r3, [r3, #0]
 80040e0:	b25b      	sxtb	r3, r3
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	da0f      	bge.n	8004106 <HAL_PCD_EP_Close+0x38>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80040e6:	1cfb      	adds	r3, r7, #3
 80040e8:	781b      	ldrb	r3, [r3, #0]
 80040ea:	2207      	movs	r2, #7
 80040ec:	4013      	ands	r3, r2
 80040ee:	1c5a      	adds	r2, r3, #1
 80040f0:	0013      	movs	r3, r2
 80040f2:	009b      	lsls	r3, r3, #2
 80040f4:	189b      	adds	r3, r3, r2
 80040f6:	00db      	lsls	r3, r3, #3
 80040f8:	687a      	ldr	r2, [r7, #4]
 80040fa:	18d3      	adds	r3, r2, r3
 80040fc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	2201      	movs	r2, #1
 8004102:	705a      	strb	r2, [r3, #1]
 8004104:	e00f      	b.n	8004126 <HAL_PCD_EP_Close+0x58>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004106:	1cfb      	adds	r3, r7, #3
 8004108:	781b      	ldrb	r3, [r3, #0]
 800410a:	2207      	movs	r2, #7
 800410c:	401a      	ands	r2, r3
 800410e:	0013      	movs	r3, r2
 8004110:	009b      	lsls	r3, r3, #2
 8004112:	189b      	adds	r3, r3, r2
 8004114:	00db      	lsls	r3, r3, #3
 8004116:	3369      	adds	r3, #105	; 0x69
 8004118:	33ff      	adds	r3, #255	; 0xff
 800411a:	687a      	ldr	r2, [r7, #4]
 800411c:	18d3      	adds	r3, r2, r3
 800411e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	2200      	movs	r2, #0
 8004124:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8004126:	1cfb      	adds	r3, r7, #3
 8004128:	781b      	ldrb	r3, [r3, #0]
 800412a:	2207      	movs	r2, #7
 800412c:	4013      	ands	r3, r2
 800412e:	b2da      	uxtb	r2, r3
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004134:	687a      	ldr	r2, [r7, #4]
 8004136:	23aa      	movs	r3, #170	; 0xaa
 8004138:	009b      	lsls	r3, r3, #2
 800413a:	5cd3      	ldrb	r3, [r2, r3]
 800413c:	2b01      	cmp	r3, #1
 800413e:	d101      	bne.n	8004144 <HAL_PCD_EP_Close+0x76>
 8004140:	2302      	movs	r3, #2
 8004142:	e011      	b.n	8004168 <HAL_PCD_EP_Close+0x9a>
 8004144:	687a      	ldr	r2, [r7, #4]
 8004146:	23aa      	movs	r3, #170	; 0xaa
 8004148:	009b      	lsls	r3, r3, #2
 800414a:	2101      	movs	r1, #1
 800414c:	54d1      	strb	r1, [r2, r3]
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	68fa      	ldr	r2, [r7, #12]
 8004154:	0011      	movs	r1, r2
 8004156:	0018      	movs	r0, r3
 8004158:	f004 fe4e 	bl	8008df8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800415c:	687a      	ldr	r2, [r7, #4]
 800415e:	23aa      	movs	r3, #170	; 0xaa
 8004160:	009b      	lsls	r3, r3, #2
 8004162:	2100      	movs	r1, #0
 8004164:	54d1      	strb	r1, [r2, r3]
  return HAL_OK;
 8004166:	2300      	movs	r3, #0
}
 8004168:	0018      	movs	r0, r3
 800416a:	46bd      	mov	sp, r7
 800416c:	b004      	add	sp, #16
 800416e:	bd80      	pop	{r7, pc}

08004170 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004170:	b580      	push	{r7, lr}
 8004172:	b086      	sub	sp, #24
 8004174:	af00      	add	r7, sp, #0
 8004176:	60f8      	str	r0, [r7, #12]
 8004178:	607a      	str	r2, [r7, #4]
 800417a:	603b      	str	r3, [r7, #0]
 800417c:	200b      	movs	r0, #11
 800417e:	183b      	adds	r3, r7, r0
 8004180:	1c0a      	adds	r2, r1, #0
 8004182:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004184:	0001      	movs	r1, r0
 8004186:	187b      	adds	r3, r7, r1
 8004188:	781b      	ldrb	r3, [r3, #0]
 800418a:	2207      	movs	r2, #7
 800418c:	401a      	ands	r2, r3
 800418e:	0013      	movs	r3, r2
 8004190:	009b      	lsls	r3, r3, #2
 8004192:	189b      	adds	r3, r3, r2
 8004194:	00db      	lsls	r3, r3, #3
 8004196:	3369      	adds	r3, #105	; 0x69
 8004198:	33ff      	adds	r3, #255	; 0xff
 800419a:	68fa      	ldr	r2, [r7, #12]
 800419c:	18d3      	adds	r3, r2, r3
 800419e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80041a0:	697b      	ldr	r3, [r7, #20]
 80041a2:	687a      	ldr	r2, [r7, #4]
 80041a4:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80041a6:	697b      	ldr	r3, [r7, #20]
 80041a8:	683a      	ldr	r2, [r7, #0]
 80041aa:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80041ac:	697b      	ldr	r3, [r7, #20]
 80041ae:	2200      	movs	r2, #0
 80041b0:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 80041b2:	697b      	ldr	r3, [r7, #20]
 80041b4:	2200      	movs	r2, #0
 80041b6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80041b8:	187b      	adds	r3, r7, r1
 80041ba:	781b      	ldrb	r3, [r3, #0]
 80041bc:	2207      	movs	r2, #7
 80041be:	4013      	ands	r3, r2
 80041c0:	b2da      	uxtb	r2, r3
 80041c2:	697b      	ldr	r3, [r7, #20]
 80041c4:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80041c6:	187b      	adds	r3, r7, r1
 80041c8:	781b      	ldrb	r3, [r3, #0]
 80041ca:	2207      	movs	r2, #7
 80041cc:	4013      	ands	r3, r2
 80041ce:	d107      	bne.n	80041e0 <HAL_PCD_EP_Receive+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	697a      	ldr	r2, [r7, #20]
 80041d6:	0011      	movs	r1, r2
 80041d8:	0018      	movs	r0, r3
 80041da:	f004 ffcd 	bl	8009178 <USB_EPStartXfer>
 80041de:	e006      	b.n	80041ee <HAL_PCD_EP_Receive+0x7e>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	697a      	ldr	r2, [r7, #20]
 80041e6:	0011      	movs	r1, r2
 80041e8:	0018      	movs	r0, r3
 80041ea:	f004 ffc5 	bl	8009178 <USB_EPStartXfer>
  }

  return HAL_OK;
 80041ee:	2300      	movs	r3, #0
}
 80041f0:	0018      	movs	r0, r3
 80041f2:	46bd      	mov	sp, r7
 80041f4:	b006      	add	sp, #24
 80041f6:	bd80      	pop	{r7, pc}

080041f8 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80041f8:	b580      	push	{r7, lr}
 80041fa:	b082      	sub	sp, #8
 80041fc:	af00      	add	r7, sp, #0
 80041fe:	6078      	str	r0, [r7, #4]
 8004200:	000a      	movs	r2, r1
 8004202:	1cfb      	adds	r3, r7, #3
 8004204:	701a      	strb	r2, [r3, #0]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8004206:	1cfb      	adds	r3, r7, #3
 8004208:	781b      	ldrb	r3, [r3, #0]
 800420a:	2207      	movs	r2, #7
 800420c:	401a      	ands	r2, r3
 800420e:	6878      	ldr	r0, [r7, #4]
 8004210:	23c2      	movs	r3, #194	; 0xc2
 8004212:	0059      	lsls	r1, r3, #1
 8004214:	0013      	movs	r3, r2
 8004216:	009b      	lsls	r3, r3, #2
 8004218:	189b      	adds	r3, r3, r2
 800421a:	00db      	lsls	r3, r3, #3
 800421c:	18c3      	adds	r3, r0, r3
 800421e:	185b      	adds	r3, r3, r1
 8004220:	681b      	ldr	r3, [r3, #0]
}
 8004222:	0018      	movs	r0, r3
 8004224:	46bd      	mov	sp, r7
 8004226:	b002      	add	sp, #8
 8004228:	bd80      	pop	{r7, pc}

0800422a <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800422a:	b580      	push	{r7, lr}
 800422c:	b086      	sub	sp, #24
 800422e:	af00      	add	r7, sp, #0
 8004230:	60f8      	str	r0, [r7, #12]
 8004232:	607a      	str	r2, [r7, #4]
 8004234:	603b      	str	r3, [r7, #0]
 8004236:	200b      	movs	r0, #11
 8004238:	183b      	adds	r3, r7, r0
 800423a:	1c0a      	adds	r2, r1, #0
 800423c:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800423e:	183b      	adds	r3, r7, r0
 8004240:	781b      	ldrb	r3, [r3, #0]
 8004242:	2207      	movs	r2, #7
 8004244:	4013      	ands	r3, r2
 8004246:	1c5a      	adds	r2, r3, #1
 8004248:	0013      	movs	r3, r2
 800424a:	009b      	lsls	r3, r3, #2
 800424c:	189b      	adds	r3, r3, r2
 800424e:	00db      	lsls	r3, r3, #3
 8004250:	68fa      	ldr	r2, [r7, #12]
 8004252:	18d3      	adds	r3, r2, r3
 8004254:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004256:	697b      	ldr	r3, [r7, #20]
 8004258:	687a      	ldr	r2, [r7, #4]
 800425a:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800425c:	697b      	ldr	r3, [r7, #20]
 800425e:	683a      	ldr	r2, [r7, #0]
 8004260:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8004262:	697b      	ldr	r3, [r7, #20]
 8004264:	2224      	movs	r2, #36	; 0x24
 8004266:	2101      	movs	r1, #1
 8004268:	5499      	strb	r1, [r3, r2]
  ep->xfer_len_db = len;
 800426a:	697b      	ldr	r3, [r7, #20]
 800426c:	683a      	ldr	r2, [r7, #0]
 800426e:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8004270:	697b      	ldr	r3, [r7, #20]
 8004272:	2200      	movs	r2, #0
 8004274:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8004276:	697b      	ldr	r3, [r7, #20]
 8004278:	2201      	movs	r2, #1
 800427a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800427c:	183b      	adds	r3, r7, r0
 800427e:	781b      	ldrb	r3, [r3, #0]
 8004280:	2207      	movs	r2, #7
 8004282:	4013      	ands	r3, r2
 8004284:	b2da      	uxtb	r2, r3
 8004286:	697b      	ldr	r3, [r7, #20]
 8004288:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800428a:	183b      	adds	r3, r7, r0
 800428c:	781b      	ldrb	r3, [r3, #0]
 800428e:	2207      	movs	r2, #7
 8004290:	4013      	ands	r3, r2
 8004292:	d107      	bne.n	80042a4 <HAL_PCD_EP_Transmit+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	697a      	ldr	r2, [r7, #20]
 800429a:	0011      	movs	r1, r2
 800429c:	0018      	movs	r0, r3
 800429e:	f004 ff6b 	bl	8009178 <USB_EPStartXfer>
 80042a2:	e006      	b.n	80042b2 <HAL_PCD_EP_Transmit+0x88>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	697a      	ldr	r2, [r7, #20]
 80042aa:	0011      	movs	r1, r2
 80042ac:	0018      	movs	r0, r3
 80042ae:	f004 ff63 	bl	8009178 <USB_EPStartXfer>
  }

  return HAL_OK;
 80042b2:	2300      	movs	r3, #0
}
 80042b4:	0018      	movs	r0, r3
 80042b6:	46bd      	mov	sp, r7
 80042b8:	b006      	add	sp, #24
 80042ba:	bd80      	pop	{r7, pc}

080042bc <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80042bc:	b580      	push	{r7, lr}
 80042be:	b084      	sub	sp, #16
 80042c0:	af00      	add	r7, sp, #0
 80042c2:	6078      	str	r0, [r7, #4]
 80042c4:	000a      	movs	r2, r1
 80042c6:	1cfb      	adds	r3, r7, #3
 80042c8:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80042ca:	1cfb      	adds	r3, r7, #3
 80042cc:	781b      	ldrb	r3, [r3, #0]
 80042ce:	2207      	movs	r2, #7
 80042d0:	401a      	ands	r2, r3
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	685b      	ldr	r3, [r3, #4]
 80042d6:	429a      	cmp	r2, r3
 80042d8:	d901      	bls.n	80042de <HAL_PCD_EP_SetStall+0x22>
  {
    return HAL_ERROR;
 80042da:	2301      	movs	r3, #1
 80042dc:	e046      	b.n	800436c <HAL_PCD_EP_SetStall+0xb0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80042de:	1cfb      	adds	r3, r7, #3
 80042e0:	781b      	ldrb	r3, [r3, #0]
 80042e2:	b25b      	sxtb	r3, r3
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	da0f      	bge.n	8004308 <HAL_PCD_EP_SetStall+0x4c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80042e8:	1cfb      	adds	r3, r7, #3
 80042ea:	781b      	ldrb	r3, [r3, #0]
 80042ec:	2207      	movs	r2, #7
 80042ee:	4013      	ands	r3, r2
 80042f0:	1c5a      	adds	r2, r3, #1
 80042f2:	0013      	movs	r3, r2
 80042f4:	009b      	lsls	r3, r3, #2
 80042f6:	189b      	adds	r3, r3, r2
 80042f8:	00db      	lsls	r3, r3, #3
 80042fa:	687a      	ldr	r2, [r7, #4]
 80042fc:	18d3      	adds	r3, r2, r3
 80042fe:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	2201      	movs	r2, #1
 8004304:	705a      	strb	r2, [r3, #1]
 8004306:	e00d      	b.n	8004324 <HAL_PCD_EP_SetStall+0x68>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004308:	1cfb      	adds	r3, r7, #3
 800430a:	781a      	ldrb	r2, [r3, #0]
 800430c:	0013      	movs	r3, r2
 800430e:	009b      	lsls	r3, r3, #2
 8004310:	189b      	adds	r3, r3, r2
 8004312:	00db      	lsls	r3, r3, #3
 8004314:	3369      	adds	r3, #105	; 0x69
 8004316:	33ff      	adds	r3, #255	; 0xff
 8004318:	687a      	ldr	r2, [r7, #4]
 800431a:	18d3      	adds	r3, r2, r3
 800431c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	2200      	movs	r2, #0
 8004322:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	2201      	movs	r2, #1
 8004328:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800432a:	1cfb      	adds	r3, r7, #3
 800432c:	781b      	ldrb	r3, [r3, #0]
 800432e:	2207      	movs	r2, #7
 8004330:	4013      	ands	r3, r2
 8004332:	b2da      	uxtb	r2, r3
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004338:	687a      	ldr	r2, [r7, #4]
 800433a:	23aa      	movs	r3, #170	; 0xaa
 800433c:	009b      	lsls	r3, r3, #2
 800433e:	5cd3      	ldrb	r3, [r2, r3]
 8004340:	2b01      	cmp	r3, #1
 8004342:	d101      	bne.n	8004348 <HAL_PCD_EP_SetStall+0x8c>
 8004344:	2302      	movs	r3, #2
 8004346:	e011      	b.n	800436c <HAL_PCD_EP_SetStall+0xb0>
 8004348:	687a      	ldr	r2, [r7, #4]
 800434a:	23aa      	movs	r3, #170	; 0xaa
 800434c:	009b      	lsls	r3, r3, #2
 800434e:	2101      	movs	r1, #1
 8004350:	54d1      	strb	r1, [r2, r3]

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	68fa      	ldr	r2, [r7, #12]
 8004358:	0011      	movs	r1, r2
 800435a:	0018      	movs	r0, r3
 800435c:	f005 ffc6 	bl	800a2ec <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 8004360:	687a      	ldr	r2, [r7, #4]
 8004362:	23aa      	movs	r3, #170	; 0xaa
 8004364:	009b      	lsls	r3, r3, #2
 8004366:	2100      	movs	r1, #0
 8004368:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 800436a:	2300      	movs	r3, #0
}
 800436c:	0018      	movs	r0, r3
 800436e:	46bd      	mov	sp, r7
 8004370:	b004      	add	sp, #16
 8004372:	bd80      	pop	{r7, pc}

08004374 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004374:	b580      	push	{r7, lr}
 8004376:	b084      	sub	sp, #16
 8004378:	af00      	add	r7, sp, #0
 800437a:	6078      	str	r0, [r7, #4]
 800437c:	000a      	movs	r2, r1
 800437e:	1cfb      	adds	r3, r7, #3
 8004380:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8004382:	1cfb      	adds	r3, r7, #3
 8004384:	781b      	ldrb	r3, [r3, #0]
 8004386:	220f      	movs	r2, #15
 8004388:	401a      	ands	r2, r3
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	685b      	ldr	r3, [r3, #4]
 800438e:	429a      	cmp	r2, r3
 8004390:	d901      	bls.n	8004396 <HAL_PCD_EP_ClrStall+0x22>
  {
    return HAL_ERROR;
 8004392:	2301      	movs	r3, #1
 8004394:	e048      	b.n	8004428 <HAL_PCD_EP_ClrStall+0xb4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004396:	1cfb      	adds	r3, r7, #3
 8004398:	781b      	ldrb	r3, [r3, #0]
 800439a:	b25b      	sxtb	r3, r3
 800439c:	2b00      	cmp	r3, #0
 800439e:	da0f      	bge.n	80043c0 <HAL_PCD_EP_ClrStall+0x4c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80043a0:	1cfb      	adds	r3, r7, #3
 80043a2:	781b      	ldrb	r3, [r3, #0]
 80043a4:	2207      	movs	r2, #7
 80043a6:	4013      	ands	r3, r2
 80043a8:	1c5a      	adds	r2, r3, #1
 80043aa:	0013      	movs	r3, r2
 80043ac:	009b      	lsls	r3, r3, #2
 80043ae:	189b      	adds	r3, r3, r2
 80043b0:	00db      	lsls	r3, r3, #3
 80043b2:	687a      	ldr	r2, [r7, #4]
 80043b4:	18d3      	adds	r3, r2, r3
 80043b6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	2201      	movs	r2, #1
 80043bc:	705a      	strb	r2, [r3, #1]
 80043be:	e00f      	b.n	80043e0 <HAL_PCD_EP_ClrStall+0x6c>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80043c0:	1cfb      	adds	r3, r7, #3
 80043c2:	781b      	ldrb	r3, [r3, #0]
 80043c4:	2207      	movs	r2, #7
 80043c6:	401a      	ands	r2, r3
 80043c8:	0013      	movs	r3, r2
 80043ca:	009b      	lsls	r3, r3, #2
 80043cc:	189b      	adds	r3, r3, r2
 80043ce:	00db      	lsls	r3, r3, #3
 80043d0:	3369      	adds	r3, #105	; 0x69
 80043d2:	33ff      	adds	r3, #255	; 0xff
 80043d4:	687a      	ldr	r2, [r7, #4]
 80043d6:	18d3      	adds	r3, r2, r3
 80043d8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	2200      	movs	r2, #0
 80043de:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	2200      	movs	r2, #0
 80043e4:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80043e6:	1cfb      	adds	r3, r7, #3
 80043e8:	781b      	ldrb	r3, [r3, #0]
 80043ea:	2207      	movs	r2, #7
 80043ec:	4013      	ands	r3, r2
 80043ee:	b2da      	uxtb	r2, r3
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80043f4:	687a      	ldr	r2, [r7, #4]
 80043f6:	23aa      	movs	r3, #170	; 0xaa
 80043f8:	009b      	lsls	r3, r3, #2
 80043fa:	5cd3      	ldrb	r3, [r2, r3]
 80043fc:	2b01      	cmp	r3, #1
 80043fe:	d101      	bne.n	8004404 <HAL_PCD_EP_ClrStall+0x90>
 8004400:	2302      	movs	r3, #2
 8004402:	e011      	b.n	8004428 <HAL_PCD_EP_ClrStall+0xb4>
 8004404:	687a      	ldr	r2, [r7, #4]
 8004406:	23aa      	movs	r3, #170	; 0xaa
 8004408:	009b      	lsls	r3, r3, #2
 800440a:	2101      	movs	r1, #1
 800440c:	54d1      	strb	r1, [r2, r3]
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	68fa      	ldr	r2, [r7, #12]
 8004414:	0011      	movs	r1, r2
 8004416:	0018      	movs	r0, r3
 8004418:	f005 ffb8 	bl	800a38c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800441c:	687a      	ldr	r2, [r7, #4]
 800441e:	23aa      	movs	r3, #170	; 0xaa
 8004420:	009b      	lsls	r3, r3, #2
 8004422:	2100      	movs	r1, #0
 8004424:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8004426:	2300      	movs	r3, #0
}
 8004428:	0018      	movs	r0, r3
 800442a:	46bd      	mov	sp, r7
 800442c:	b004      	add	sp, #16
 800442e:	bd80      	pop	{r7, pc}

08004430 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8004430:	b5b0      	push	{r4, r5, r7, lr}
 8004432:	b096      	sub	sp, #88	; 0x58
 8004434:	af00      	add	r7, sp, #0
 8004436:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8004438:	f000 fbd8 	bl	8004bec <PCD_EP_ISR_Handler+0x7bc>
  {
    wIstr = hpcd->Instance->ISTR;
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681a      	ldr	r2, [r3, #0]
 8004440:	2056      	movs	r0, #86	; 0x56
 8004442:	183b      	adds	r3, r7, r0
 8004444:	2144      	movs	r1, #68	; 0x44
 8004446:	5a52      	ldrh	r2, [r2, r1]
 8004448:	801a      	strh	r2, [r3, #0]

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 800444a:	183b      	adds	r3, r7, r0
 800444c:	881b      	ldrh	r3, [r3, #0]
 800444e:	b2da      	uxtb	r2, r3
 8004450:	2455      	movs	r4, #85	; 0x55
 8004452:	193b      	adds	r3, r7, r4
 8004454:	210f      	movs	r1, #15
 8004456:	400a      	ands	r2, r1
 8004458:	701a      	strb	r2, [r3, #0]

    if (epindex == 0U)
 800445a:	193b      	adds	r3, r7, r4
 800445c:	781b      	ldrb	r3, [r3, #0]
 800445e:	2b00      	cmp	r3, #0
 8004460:	d000      	beq.n	8004464 <PCD_EP_ISR_Handler+0x34>
 8004462:	e179      	b.n	8004758 <PCD_EP_ISR_Handler+0x328>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8004464:	183b      	adds	r3, r7, r0
 8004466:	881b      	ldrh	r3, [r3, #0]
 8004468:	2210      	movs	r2, #16
 800446a:	4013      	ands	r3, r2
 800446c:	d154      	bne.n	8004518 <PCD_EP_ISR_Handler+0xe8>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	881b      	ldrh	r3, [r3, #0]
 8004474:	b29a      	uxth	r2, r3
 8004476:	200e      	movs	r0, #14
 8004478:	183b      	adds	r3, r7, r0
 800447a:	49af      	ldr	r1, [pc, #700]	; (8004738 <PCD_EP_ISR_Handler+0x308>)
 800447c:	400a      	ands	r2, r1
 800447e:	801a      	strh	r2, [r3, #0]
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	183a      	adds	r2, r7, r0
 8004486:	8812      	ldrh	r2, [r2, #0]
 8004488:	49ac      	ldr	r1, [pc, #688]	; (800473c <PCD_EP_ISR_Handler+0x30c>)
 800448a:	430a      	orrs	r2, r1
 800448c:	b292      	uxth	r2, r2
 800448e:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->IN_ep[0];
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	3328      	adds	r3, #40	; 0x28
 8004494:	64fb      	str	r3, [r7, #76]	; 0x4c

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	2250      	movs	r2, #80	; 0x50
 800449c:	5a9b      	ldrh	r3, [r3, r2]
 800449e:	b29b      	uxth	r3, r3
 80044a0:	001a      	movs	r2, r3
 80044a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80044a4:	781b      	ldrb	r3, [r3, #0]
 80044a6:	00db      	lsls	r3, r3, #3
 80044a8:	18d2      	adds	r2, r2, r3
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	18d3      	adds	r3, r2, r3
 80044b0:	4aa3      	ldr	r2, [pc, #652]	; (8004740 <PCD_EP_ISR_Handler+0x310>)
 80044b2:	4694      	mov	ip, r2
 80044b4:	4463      	add	r3, ip
 80044b6:	881b      	ldrh	r3, [r3, #0]
 80044b8:	059b      	lsls	r3, r3, #22
 80044ba:	0d9a      	lsrs	r2, r3, #22
 80044bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80044be:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80044c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80044c2:	695a      	ldr	r2, [r3, #20]
 80044c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80044c6:	69db      	ldr	r3, [r3, #28]
 80044c8:	18d2      	adds	r2, r2, r3
 80044ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80044cc:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	2100      	movs	r1, #0
 80044d2:	0018      	movs	r0, r3
 80044d4:	f008 f88c 	bl	800c5f0 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	2224      	movs	r2, #36	; 0x24
 80044dc:	5c9b      	ldrb	r3, [r3, r2]
 80044de:	b2db      	uxtb	r3, r3
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d101      	bne.n	80044e8 <PCD_EP_ISR_Handler+0xb8>
 80044e4:	f000 fb82 	bl	8004bec <PCD_EP_ISR_Handler+0x7bc>
 80044e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80044ea:	699b      	ldr	r3, [r3, #24]
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d001      	beq.n	80044f4 <PCD_EP_ISR_Handler+0xc4>
 80044f0:	f000 fb7c 	bl	8004bec <PCD_EP_ISR_Handler+0x7bc>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	2224      	movs	r2, #36	; 0x24
 80044f8:	5c9b      	ldrb	r3, [r3, r2]
 80044fa:	b2db      	uxtb	r3, r3
 80044fc:	2280      	movs	r2, #128	; 0x80
 80044fe:	4252      	negs	r2, r2
 8004500:	4313      	orrs	r3, r2
 8004502:	b2da      	uxtb	r2, r3
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	b291      	uxth	r1, r2
 800450a:	224c      	movs	r2, #76	; 0x4c
 800450c:	5299      	strh	r1, [r3, r2]
          hpcd->USB_Address = 0U;
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	2224      	movs	r2, #36	; 0x24
 8004512:	2100      	movs	r1, #0
 8004514:	5499      	strb	r1, [r3, r2]
 8004516:	e369      	b.n	8004bec <PCD_EP_ISR_Handler+0x7bc>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	3369      	adds	r3, #105	; 0x69
 800451c:	33ff      	adds	r3, #255	; 0xff
 800451e:	64fb      	str	r3, [r7, #76]	; 0x4c
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681a      	ldr	r2, [r3, #0]
 8004524:	2152      	movs	r1, #82	; 0x52
 8004526:	187b      	adds	r3, r7, r1
 8004528:	8812      	ldrh	r2, [r2, #0]
 800452a:	801a      	strh	r2, [r3, #0]

        if ((wEPVal & USB_EP_SETUP) != 0U)
 800452c:	187b      	adds	r3, r7, r1
 800452e:	881a      	ldrh	r2, [r3, #0]
 8004530:	2380      	movs	r3, #128	; 0x80
 8004532:	011b      	lsls	r3, r3, #4
 8004534:	4013      	ands	r3, r2
 8004536:	d037      	beq.n	80045a8 <PCD_EP_ISR_Handler+0x178>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	2250      	movs	r2, #80	; 0x50
 800453e:	5a9b      	ldrh	r3, [r3, r2]
 8004540:	b29b      	uxth	r3, r3
 8004542:	001a      	movs	r2, r3
 8004544:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004546:	781b      	ldrb	r3, [r3, #0]
 8004548:	00db      	lsls	r3, r3, #3
 800454a:	18d2      	adds	r2, r2, r3
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	18d3      	adds	r3, r2, r3
 8004552:	4a7c      	ldr	r2, [pc, #496]	; (8004744 <PCD_EP_ISR_Handler+0x314>)
 8004554:	4694      	mov	ip, r2
 8004556:	4463      	add	r3, ip
 8004558:	881b      	ldrh	r3, [r3, #0]
 800455a:	059b      	lsls	r3, r3, #22
 800455c:	0d9a      	lsrs	r2, r3, #22
 800455e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004560:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	6818      	ldr	r0, [r3, #0]
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	22ac      	movs	r2, #172	; 0xac
 800456a:	0092      	lsls	r2, r2, #2
 800456c:	1899      	adds	r1, r3, r2
 800456e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004570:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8004572:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004574:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8004576:	b29b      	uxth	r3, r3
 8004578:	f006 f836 	bl	800a5e8 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	881b      	ldrh	r3, [r3, #0]
 8004582:	b29a      	uxth	r2, r3
 8004584:	2010      	movs	r0, #16
 8004586:	183b      	adds	r3, r7, r0
 8004588:	496f      	ldr	r1, [pc, #444]	; (8004748 <PCD_EP_ISR_Handler+0x318>)
 800458a:	400a      	ands	r2, r1
 800458c:	801a      	strh	r2, [r3, #0]
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	183a      	adds	r2, r7, r0
 8004594:	8812      	ldrh	r2, [r2, #0]
 8004596:	2180      	movs	r1, #128	; 0x80
 8004598:	430a      	orrs	r2, r1
 800459a:	b292      	uxth	r2, r2
 800459c:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	0018      	movs	r0, r3
 80045a2:	f007 ffef 	bl	800c584 <HAL_PCD_SetupStageCallback>
 80045a6:	e321      	b.n	8004bec <PCD_EP_ISR_Handler+0x7bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80045a8:	2352      	movs	r3, #82	; 0x52
 80045aa:	18fb      	adds	r3, r7, r3
 80045ac:	2200      	movs	r2, #0
 80045ae:	5e9b      	ldrsh	r3, [r3, r2]
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	db00      	blt.n	80045b6 <PCD_EP_ISR_Handler+0x186>
 80045b4:	e31a      	b.n	8004bec <PCD_EP_ISR_Handler+0x7bc>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	881b      	ldrh	r3, [r3, #0]
 80045bc:	b29a      	uxth	r2, r3
 80045be:	201e      	movs	r0, #30
 80045c0:	183b      	adds	r3, r7, r0
 80045c2:	4961      	ldr	r1, [pc, #388]	; (8004748 <PCD_EP_ISR_Handler+0x318>)
 80045c4:	400a      	ands	r2, r1
 80045c6:	801a      	strh	r2, [r3, #0]
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	183a      	adds	r2, r7, r0
 80045ce:	8812      	ldrh	r2, [r2, #0]
 80045d0:	2180      	movs	r1, #128	; 0x80
 80045d2:	430a      	orrs	r2, r1
 80045d4:	b292      	uxth	r2, r2
 80045d6:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	2250      	movs	r2, #80	; 0x50
 80045de:	5a9b      	ldrh	r3, [r3, r2]
 80045e0:	b29b      	uxth	r3, r3
 80045e2:	001a      	movs	r2, r3
 80045e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80045e6:	781b      	ldrb	r3, [r3, #0]
 80045e8:	00db      	lsls	r3, r3, #3
 80045ea:	18d2      	adds	r2, r2, r3
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	18d3      	adds	r3, r2, r3
 80045f2:	4a54      	ldr	r2, [pc, #336]	; (8004744 <PCD_EP_ISR_Handler+0x314>)
 80045f4:	4694      	mov	ip, r2
 80045f6:	4463      	add	r3, ip
 80045f8:	881b      	ldrh	r3, [r3, #0]
 80045fa:	059b      	lsls	r3, r3, #22
 80045fc:	0d9a      	lsrs	r2, r3, #22
 80045fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004600:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8004602:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004604:	69db      	ldr	r3, [r3, #28]
 8004606:	2b00      	cmp	r3, #0
 8004608:	d01a      	beq.n	8004640 <PCD_EP_ISR_Handler+0x210>
 800460a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800460c:	695b      	ldr	r3, [r3, #20]
 800460e:	2b00      	cmp	r3, #0
 8004610:	d016      	beq.n	8004640 <PCD_EP_ISR_Handler+0x210>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	6818      	ldr	r0, [r3, #0]
 8004616:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004618:	6959      	ldr	r1, [r3, #20]
 800461a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800461c:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 800461e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004620:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8004622:	b29b      	uxth	r3, r3
 8004624:	f005 ffe0 	bl	800a5e8 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8004628:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800462a:	695a      	ldr	r2, [r3, #20]
 800462c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800462e:	69db      	ldr	r3, [r3, #28]
 8004630:	18d2      	adds	r2, r2, r3
 8004632:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004634:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	2100      	movs	r1, #0
 800463a:	0018      	movs	r0, r3
 800463c:	f007 ffb7 	bl	800c5ae <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	881b      	ldrh	r3, [r3, #0]
 8004646:	b29b      	uxth	r3, r3
 8004648:	001a      	movs	r2, r3
 800464a:	2380      	movs	r3, #128	; 0x80
 800464c:	011b      	lsls	r3, r3, #4
 800464e:	4013      	ands	r3, r2
 8004650:	d000      	beq.n	8004654 <PCD_EP_ISR_Handler+0x224>
 8004652:	e2cb      	b.n	8004bec <PCD_EP_ISR_Handler+0x7bc>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	61bb      	str	r3, [r7, #24]
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	2250      	movs	r2, #80	; 0x50
 8004660:	5a9b      	ldrh	r3, [r3, r2]
 8004662:	b29b      	uxth	r3, r3
 8004664:	001a      	movs	r2, r3
 8004666:	69bb      	ldr	r3, [r7, #24]
 8004668:	189b      	adds	r3, r3, r2
 800466a:	61bb      	str	r3, [r7, #24]
 800466c:	69bb      	ldr	r3, [r7, #24]
 800466e:	4a35      	ldr	r2, [pc, #212]	; (8004744 <PCD_EP_ISR_Handler+0x314>)
 8004670:	4694      	mov	ip, r2
 8004672:	4463      	add	r3, ip
 8004674:	617b      	str	r3, [r7, #20]
 8004676:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004678:	691b      	ldr	r3, [r3, #16]
 800467a:	2b00      	cmp	r3, #0
 800467c:	d110      	bne.n	80046a0 <PCD_EP_ISR_Handler+0x270>
 800467e:	697b      	ldr	r3, [r7, #20]
 8004680:	881b      	ldrh	r3, [r3, #0]
 8004682:	b29b      	uxth	r3, r3
 8004684:	4a31      	ldr	r2, [pc, #196]	; (800474c <PCD_EP_ISR_Handler+0x31c>)
 8004686:	4013      	ands	r3, r2
 8004688:	b29a      	uxth	r2, r3
 800468a:	697b      	ldr	r3, [r7, #20]
 800468c:	801a      	strh	r2, [r3, #0]
 800468e:	697b      	ldr	r3, [r7, #20]
 8004690:	881b      	ldrh	r3, [r3, #0]
 8004692:	b29b      	uxth	r3, r3
 8004694:	4a29      	ldr	r2, [pc, #164]	; (800473c <PCD_EP_ISR_Handler+0x30c>)
 8004696:	4313      	orrs	r3, r2
 8004698:	b29a      	uxth	r2, r3
 800469a:	697b      	ldr	r3, [r7, #20]
 800469c:	801a      	strh	r2, [r3, #0]
 800469e:	e02b      	b.n	80046f8 <PCD_EP_ISR_Handler+0x2c8>
 80046a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80046a2:	691b      	ldr	r3, [r3, #16]
 80046a4:	2b3e      	cmp	r3, #62	; 0x3e
 80046a6:	d812      	bhi.n	80046ce <PCD_EP_ISR_Handler+0x29e>
 80046a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80046aa:	691b      	ldr	r3, [r3, #16]
 80046ac:	085b      	lsrs	r3, r3, #1
 80046ae:	647b      	str	r3, [r7, #68]	; 0x44
 80046b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80046b2:	691b      	ldr	r3, [r3, #16]
 80046b4:	2201      	movs	r2, #1
 80046b6:	4013      	ands	r3, r2
 80046b8:	d002      	beq.n	80046c0 <PCD_EP_ISR_Handler+0x290>
 80046ba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80046bc:	3301      	adds	r3, #1
 80046be:	647b      	str	r3, [r7, #68]	; 0x44
 80046c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80046c2:	b29b      	uxth	r3, r3
 80046c4:	029b      	lsls	r3, r3, #10
 80046c6:	b29a      	uxth	r2, r3
 80046c8:	697b      	ldr	r3, [r7, #20]
 80046ca:	801a      	strh	r2, [r3, #0]
 80046cc:	e014      	b.n	80046f8 <PCD_EP_ISR_Handler+0x2c8>
 80046ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80046d0:	691b      	ldr	r3, [r3, #16]
 80046d2:	095b      	lsrs	r3, r3, #5
 80046d4:	647b      	str	r3, [r7, #68]	; 0x44
 80046d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80046d8:	691b      	ldr	r3, [r3, #16]
 80046da:	221f      	movs	r2, #31
 80046dc:	4013      	ands	r3, r2
 80046de:	d102      	bne.n	80046e6 <PCD_EP_ISR_Handler+0x2b6>
 80046e0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80046e2:	3b01      	subs	r3, #1
 80046e4:	647b      	str	r3, [r7, #68]	; 0x44
 80046e6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80046e8:	b29b      	uxth	r3, r3
 80046ea:	029b      	lsls	r3, r3, #10
 80046ec:	b29b      	uxth	r3, r3
 80046ee:	4a13      	ldr	r2, [pc, #76]	; (800473c <PCD_EP_ISR_Handler+0x30c>)
 80046f0:	4313      	orrs	r3, r2
 80046f2:	b29a      	uxth	r2, r3
 80046f4:	697b      	ldr	r3, [r7, #20]
 80046f6:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	881b      	ldrh	r3, [r3, #0]
 80046fe:	b29a      	uxth	r2, r3
 8004700:	2012      	movs	r0, #18
 8004702:	183b      	adds	r3, r7, r0
 8004704:	4912      	ldr	r1, [pc, #72]	; (8004750 <PCD_EP_ISR_Handler+0x320>)
 8004706:	400a      	ands	r2, r1
 8004708:	801a      	strh	r2, [r3, #0]
 800470a:	183b      	adds	r3, r7, r0
 800470c:	183a      	adds	r2, r7, r0
 800470e:	8812      	ldrh	r2, [r2, #0]
 8004710:	2180      	movs	r1, #128	; 0x80
 8004712:	0149      	lsls	r1, r1, #5
 8004714:	404a      	eors	r2, r1
 8004716:	801a      	strh	r2, [r3, #0]
 8004718:	183b      	adds	r3, r7, r0
 800471a:	183a      	adds	r2, r7, r0
 800471c:	8812      	ldrh	r2, [r2, #0]
 800471e:	2180      	movs	r1, #128	; 0x80
 8004720:	0189      	lsls	r1, r1, #6
 8004722:	404a      	eors	r2, r1
 8004724:	801a      	strh	r2, [r3, #0]
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	183a      	adds	r2, r7, r0
 800472c:	8812      	ldrh	r2, [r2, #0]
 800472e:	4909      	ldr	r1, [pc, #36]	; (8004754 <PCD_EP_ISR_Handler+0x324>)
 8004730:	430a      	orrs	r2, r1
 8004732:	b292      	uxth	r2, r2
 8004734:	801a      	strh	r2, [r3, #0]
 8004736:	e259      	b.n	8004bec <PCD_EP_ISR_Handler+0x7bc>
 8004738:	ffff8f0f 	.word	0xffff8f0f
 800473c:	ffff8000 	.word	0xffff8000
 8004740:	00000402 	.word	0x00000402
 8004744:	00000406 	.word	0x00000406
 8004748:	00000f8f 	.word	0x00000f8f
 800474c:	ffff83ff 	.word	0xffff83ff
 8004750:	ffffbf8f 	.word	0xffffbf8f
 8004754:	ffff8080 	.word	0xffff8080
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	001a      	movs	r2, r3
 800475e:	2055      	movs	r0, #85	; 0x55
 8004760:	183b      	adds	r3, r7, r0
 8004762:	781b      	ldrb	r3, [r3, #0]
 8004764:	009b      	lsls	r3, r3, #2
 8004766:	18d2      	adds	r2, r2, r3
 8004768:	2152      	movs	r1, #82	; 0x52
 800476a:	187b      	adds	r3, r7, r1
 800476c:	8812      	ldrh	r2, [r2, #0]
 800476e:	801a      	strh	r2, [r3, #0]

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8004770:	187b      	adds	r3, r7, r1
 8004772:	2200      	movs	r2, #0
 8004774:	5e9b      	ldrsh	r3, [r3, r2]
 8004776:	2b00      	cmp	r3, #0
 8004778:	db00      	blt.n	800477c <PCD_EP_ISR_Handler+0x34c>
 800477a:	e0fa      	b.n	8004972 <PCD_EP_ISR_Handler+0x542>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	001a      	movs	r2, r3
 8004782:	183b      	adds	r3, r7, r0
 8004784:	781b      	ldrb	r3, [r3, #0]
 8004786:	009b      	lsls	r3, r3, #2
 8004788:	18d3      	adds	r3, r2, r3
 800478a:	881b      	ldrh	r3, [r3, #0]
 800478c:	b29a      	uxth	r2, r3
 800478e:	2450      	movs	r4, #80	; 0x50
 8004790:	193b      	adds	r3, r7, r4
 8004792:	49cf      	ldr	r1, [pc, #828]	; (8004ad0 <PCD_EP_ISR_Handler+0x6a0>)
 8004794:	400a      	ands	r2, r1
 8004796:	801a      	strh	r2, [r3, #0]
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	001a      	movs	r2, r3
 800479e:	183b      	adds	r3, r7, r0
 80047a0:	781b      	ldrb	r3, [r3, #0]
 80047a2:	009b      	lsls	r3, r3, #2
 80047a4:	18d3      	adds	r3, r2, r3
 80047a6:	193a      	adds	r2, r7, r4
 80047a8:	8812      	ldrh	r2, [r2, #0]
 80047aa:	2180      	movs	r1, #128	; 0x80
 80047ac:	430a      	orrs	r2, r1
 80047ae:	b292      	uxth	r2, r2
 80047b0:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 80047b2:	183b      	adds	r3, r7, r0
 80047b4:	781a      	ldrb	r2, [r3, #0]
 80047b6:	0013      	movs	r3, r2
 80047b8:	009b      	lsls	r3, r3, #2
 80047ba:	189b      	adds	r3, r3, r2
 80047bc:	00db      	lsls	r3, r3, #3
 80047be:	3369      	adds	r3, #105	; 0x69
 80047c0:	33ff      	adds	r3, #255	; 0xff
 80047c2:	687a      	ldr	r2, [r7, #4]
 80047c4:	18d3      	adds	r3, r2, r3
 80047c6:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 80047c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80047ca:	7b1b      	ldrb	r3, [r3, #12]
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d125      	bne.n	800481c <PCD_EP_ISR_Handler+0x3ec>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	2250      	movs	r2, #80	; 0x50
 80047d6:	5a9b      	ldrh	r3, [r3, r2]
 80047d8:	b29b      	uxth	r3, r3
 80047da:	001a      	movs	r2, r3
 80047dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80047de:	781b      	ldrb	r3, [r3, #0]
 80047e0:	00db      	lsls	r3, r3, #3
 80047e2:	18d2      	adds	r2, r2, r3
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	18d3      	adds	r3, r2, r3
 80047ea:	4aba      	ldr	r2, [pc, #744]	; (8004ad4 <PCD_EP_ISR_Handler+0x6a4>)
 80047ec:	4694      	mov	ip, r2
 80047ee:	4463      	add	r3, ip
 80047f0:	881a      	ldrh	r2, [r3, #0]
 80047f2:	2448      	movs	r4, #72	; 0x48
 80047f4:	193b      	adds	r3, r7, r4
 80047f6:	0592      	lsls	r2, r2, #22
 80047f8:	0d92      	lsrs	r2, r2, #22
 80047fa:	801a      	strh	r2, [r3, #0]

          if (count != 0U)
 80047fc:	193b      	adds	r3, r7, r4
 80047fe:	881b      	ldrh	r3, [r3, #0]
 8004800:	2b00      	cmp	r3, #0
 8004802:	d100      	bne.n	8004806 <PCD_EP_ISR_Handler+0x3d6>
 8004804:	e08d      	b.n	8004922 <PCD_EP_ISR_Handler+0x4f2>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	6818      	ldr	r0, [r3, #0]
 800480a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800480c:	6959      	ldr	r1, [r3, #20]
 800480e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004810:	88da      	ldrh	r2, [r3, #6]
 8004812:	193b      	adds	r3, r7, r4
 8004814:	881b      	ldrh	r3, [r3, #0]
 8004816:	f005 fee7 	bl	800a5e8 <USB_ReadPMA>
 800481a:	e082      	b.n	8004922 <PCD_EP_ISR_Handler+0x4f2>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 800481c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800481e:	78db      	ldrb	r3, [r3, #3]
 8004820:	2b02      	cmp	r3, #2
 8004822:	d10c      	bne.n	800483e <PCD_EP_ISR_Handler+0x40e>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8004824:	2348      	movs	r3, #72	; 0x48
 8004826:	18fc      	adds	r4, r7, r3
 8004828:	2352      	movs	r3, #82	; 0x52
 800482a:	18fb      	adds	r3, r7, r3
 800482c:	881a      	ldrh	r2, [r3, #0]
 800482e:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	0018      	movs	r0, r3
 8004834:	f000 f9ee 	bl	8004c14 <HAL_PCD_EP_DB_Receive>
 8004838:	0003      	movs	r3, r0
 800483a:	8023      	strh	r3, [r4, #0]
 800483c:	e071      	b.n	8004922 <PCD_EP_ISR_Handler+0x4f2>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	001a      	movs	r2, r3
 8004844:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004846:	781b      	ldrb	r3, [r3, #0]
 8004848:	009b      	lsls	r3, r3, #2
 800484a:	18d3      	adds	r3, r2, r3
 800484c:	881b      	ldrh	r3, [r3, #0]
 800484e:	b29a      	uxth	r2, r3
 8004850:	204a      	movs	r0, #74	; 0x4a
 8004852:	183b      	adds	r3, r7, r0
 8004854:	49a0      	ldr	r1, [pc, #640]	; (8004ad8 <PCD_EP_ISR_Handler+0x6a8>)
 8004856:	400a      	ands	r2, r1
 8004858:	801a      	strh	r2, [r3, #0]
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	001a      	movs	r2, r3
 8004860:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004862:	781b      	ldrb	r3, [r3, #0]
 8004864:	009b      	lsls	r3, r3, #2
 8004866:	18d3      	adds	r3, r2, r3
 8004868:	183a      	adds	r2, r7, r0
 800486a:	8812      	ldrh	r2, [r2, #0]
 800486c:	499b      	ldr	r1, [pc, #620]	; (8004adc <PCD_EP_ISR_Handler+0x6ac>)
 800486e:	430a      	orrs	r2, r1
 8004870:	b292      	uxth	r2, r2
 8004872:	801a      	strh	r2, [r3, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	001a      	movs	r2, r3
 800487a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800487c:	781b      	ldrb	r3, [r3, #0]
 800487e:	009b      	lsls	r3, r3, #2
 8004880:	18d3      	adds	r3, r2, r3
 8004882:	881b      	ldrh	r3, [r3, #0]
 8004884:	b29b      	uxth	r3, r3
 8004886:	001a      	movs	r2, r3
 8004888:	2380      	movs	r3, #128	; 0x80
 800488a:	01db      	lsls	r3, r3, #7
 800488c:	4013      	ands	r3, r2
 800488e:	d024      	beq.n	80048da <PCD_EP_ISR_Handler+0x4aa>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	2250      	movs	r2, #80	; 0x50
 8004896:	5a9b      	ldrh	r3, [r3, r2]
 8004898:	b29b      	uxth	r3, r3
 800489a:	001a      	movs	r2, r3
 800489c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800489e:	781b      	ldrb	r3, [r3, #0]
 80048a0:	00db      	lsls	r3, r3, #3
 80048a2:	18d2      	adds	r2, r2, r3
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	18d3      	adds	r3, r2, r3
 80048aa:	4a8d      	ldr	r2, [pc, #564]	; (8004ae0 <PCD_EP_ISR_Handler+0x6b0>)
 80048ac:	4694      	mov	ip, r2
 80048ae:	4463      	add	r3, ip
 80048b0:	881a      	ldrh	r2, [r3, #0]
 80048b2:	2448      	movs	r4, #72	; 0x48
 80048b4:	193b      	adds	r3, r7, r4
 80048b6:	0592      	lsls	r2, r2, #22
 80048b8:	0d92      	lsrs	r2, r2, #22
 80048ba:	801a      	strh	r2, [r3, #0]

              if (count != 0U)
 80048bc:	193b      	adds	r3, r7, r4
 80048be:	881b      	ldrh	r3, [r3, #0]
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d02e      	beq.n	8004922 <PCD_EP_ISR_Handler+0x4f2>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	6818      	ldr	r0, [r3, #0]
 80048c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80048ca:	6959      	ldr	r1, [r3, #20]
 80048cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80048ce:	891a      	ldrh	r2, [r3, #8]
 80048d0:	193b      	adds	r3, r7, r4
 80048d2:	881b      	ldrh	r3, [r3, #0]
 80048d4:	f005 fe88 	bl	800a5e8 <USB_ReadPMA>
 80048d8:	e023      	b.n	8004922 <PCD_EP_ISR_Handler+0x4f2>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	2250      	movs	r2, #80	; 0x50
 80048e0:	5a9b      	ldrh	r3, [r3, r2]
 80048e2:	b29b      	uxth	r3, r3
 80048e4:	001a      	movs	r2, r3
 80048e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80048e8:	781b      	ldrb	r3, [r3, #0]
 80048ea:	00db      	lsls	r3, r3, #3
 80048ec:	18d2      	adds	r2, r2, r3
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	18d3      	adds	r3, r2, r3
 80048f4:	4a77      	ldr	r2, [pc, #476]	; (8004ad4 <PCD_EP_ISR_Handler+0x6a4>)
 80048f6:	4694      	mov	ip, r2
 80048f8:	4463      	add	r3, ip
 80048fa:	881a      	ldrh	r2, [r3, #0]
 80048fc:	2448      	movs	r4, #72	; 0x48
 80048fe:	193b      	adds	r3, r7, r4
 8004900:	0592      	lsls	r2, r2, #22
 8004902:	0d92      	lsrs	r2, r2, #22
 8004904:	801a      	strh	r2, [r3, #0]

              if (count != 0U)
 8004906:	193b      	adds	r3, r7, r4
 8004908:	881b      	ldrh	r3, [r3, #0]
 800490a:	2b00      	cmp	r3, #0
 800490c:	d009      	beq.n	8004922 <PCD_EP_ISR_Handler+0x4f2>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	6818      	ldr	r0, [r3, #0]
 8004912:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004914:	6959      	ldr	r1, [r3, #20]
 8004916:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004918:	895a      	ldrh	r2, [r3, #10]
 800491a:	193b      	adds	r3, r7, r4
 800491c:	881b      	ldrh	r3, [r3, #0]
 800491e:	f005 fe63 	bl	800a5e8 <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8004922:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004924:	69da      	ldr	r2, [r3, #28]
 8004926:	2148      	movs	r1, #72	; 0x48
 8004928:	187b      	adds	r3, r7, r1
 800492a:	881b      	ldrh	r3, [r3, #0]
 800492c:	18d2      	adds	r2, r2, r3
 800492e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004930:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8004932:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004934:	695a      	ldr	r2, [r3, #20]
 8004936:	187b      	adds	r3, r7, r1
 8004938:	881b      	ldrh	r3, [r3, #0]
 800493a:	18d2      	adds	r2, r2, r3
 800493c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800493e:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8004940:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004942:	699b      	ldr	r3, [r3, #24]
 8004944:	2b00      	cmp	r3, #0
 8004946:	d005      	beq.n	8004954 <PCD_EP_ISR_Handler+0x524>
 8004948:	187b      	adds	r3, r7, r1
 800494a:	881a      	ldrh	r2, [r3, #0]
 800494c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800494e:	691b      	ldr	r3, [r3, #16]
 8004950:	429a      	cmp	r2, r3
 8004952:	d207      	bcs.n	8004964 <PCD_EP_ISR_Handler+0x534>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8004954:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004956:	781a      	ldrb	r2, [r3, #0]
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	0011      	movs	r1, r2
 800495c:	0018      	movs	r0, r3
 800495e:	f007 fe26 	bl	800c5ae <HAL_PCD_DataOutStageCallback>
 8004962:	e006      	b.n	8004972 <PCD_EP_ISR_Handler+0x542>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800496a:	0011      	movs	r1, r2
 800496c:	0018      	movs	r0, r3
 800496e:	f004 fc03 	bl	8009178 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8004972:	2452      	movs	r4, #82	; 0x52
 8004974:	193b      	adds	r3, r7, r4
 8004976:	881b      	ldrh	r3, [r3, #0]
 8004978:	2280      	movs	r2, #128	; 0x80
 800497a:	4013      	ands	r3, r2
 800497c:	d100      	bne.n	8004980 <PCD_EP_ISR_Handler+0x550>
 800497e:	e135      	b.n	8004bec <PCD_EP_ISR_Handler+0x7bc>
      {
        ep = &hpcd->IN_ep[epindex];
 8004980:	2055      	movs	r0, #85	; 0x55
 8004982:	183b      	adds	r3, r7, r0
 8004984:	781b      	ldrb	r3, [r3, #0]
 8004986:	1c5a      	adds	r2, r3, #1
 8004988:	0013      	movs	r3, r2
 800498a:	009b      	lsls	r3, r3, #2
 800498c:	189b      	adds	r3, r3, r2
 800498e:	00db      	lsls	r3, r3, #3
 8004990:	687a      	ldr	r2, [r7, #4]
 8004992:	18d3      	adds	r3, r2, r3
 8004994:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	001a      	movs	r2, r3
 800499c:	183b      	adds	r3, r7, r0
 800499e:	781b      	ldrb	r3, [r3, #0]
 80049a0:	009b      	lsls	r3, r3, #2
 80049a2:	18d3      	adds	r3, r2, r3
 80049a4:	881b      	ldrh	r3, [r3, #0]
 80049a6:	b29a      	uxth	r2, r3
 80049a8:	2542      	movs	r5, #66	; 0x42
 80049aa:	197b      	adds	r3, r7, r5
 80049ac:	494d      	ldr	r1, [pc, #308]	; (8004ae4 <PCD_EP_ISR_Handler+0x6b4>)
 80049ae:	400a      	ands	r2, r1
 80049b0:	801a      	strh	r2, [r3, #0]
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	001a      	movs	r2, r3
 80049b8:	183b      	adds	r3, r7, r0
 80049ba:	781b      	ldrb	r3, [r3, #0]
 80049bc:	009b      	lsls	r3, r3, #2
 80049be:	18d3      	adds	r3, r2, r3
 80049c0:	197a      	adds	r2, r7, r5
 80049c2:	8812      	ldrh	r2, [r2, #0]
 80049c4:	4948      	ldr	r1, [pc, #288]	; (8004ae8 <PCD_EP_ISR_Handler+0x6b8>)
 80049c6:	430a      	orrs	r2, r1
 80049c8:	b292      	uxth	r2, r2
 80049ca:	801a      	strh	r2, [r3, #0]

        if (ep->type != EP_TYPE_BULK)
 80049cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80049ce:	78db      	ldrb	r3, [r3, #3]
 80049d0:	2b02      	cmp	r3, #2
 80049d2:	d100      	bne.n	80049d6 <PCD_EP_ISR_Handler+0x5a6>
 80049d4:	e0ad      	b.n	8004b32 <PCD_EP_ISR_Handler+0x702>
        {
          ep->xfer_len = 0U;
 80049d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80049d8:	2200      	movs	r2, #0
 80049da:	619a      	str	r2, [r3, #24]

          if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80049dc:	193b      	adds	r3, r7, r4
 80049de:	881b      	ldrh	r3, [r3, #0]
 80049e0:	2240      	movs	r2, #64	; 0x40
 80049e2:	4013      	ands	r3, r2
 80049e4:	d046      	beq.n	8004a74 <PCD_EP_ISR_Handler+0x644>
          {
            PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80049e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80049e8:	785b      	ldrb	r3, [r3, #1]
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d125      	bne.n	8004a3a <PCD_EP_ISR_Handler+0x60a>
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	627b      	str	r3, [r7, #36]	; 0x24
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	2250      	movs	r2, #80	; 0x50
 80049fa:	5a9b      	ldrh	r3, [r3, r2]
 80049fc:	b29b      	uxth	r3, r3
 80049fe:	001a      	movs	r2, r3
 8004a00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a02:	189b      	adds	r3, r3, r2
 8004a04:	627b      	str	r3, [r7, #36]	; 0x24
 8004a06:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004a08:	781b      	ldrb	r3, [r3, #0]
 8004a0a:	00da      	lsls	r2, r3, #3
 8004a0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a0e:	18d3      	adds	r3, r2, r3
 8004a10:	4a33      	ldr	r2, [pc, #204]	; (8004ae0 <PCD_EP_ISR_Handler+0x6b0>)
 8004a12:	4694      	mov	ip, r2
 8004a14:	4463      	add	r3, ip
 8004a16:	623b      	str	r3, [r7, #32]
 8004a18:	6a3b      	ldr	r3, [r7, #32]
 8004a1a:	881b      	ldrh	r3, [r3, #0]
 8004a1c:	b29b      	uxth	r3, r3
 8004a1e:	4a33      	ldr	r2, [pc, #204]	; (8004aec <PCD_EP_ISR_Handler+0x6bc>)
 8004a20:	4013      	ands	r3, r2
 8004a22:	b29a      	uxth	r2, r3
 8004a24:	6a3b      	ldr	r3, [r7, #32]
 8004a26:	801a      	strh	r2, [r3, #0]
 8004a28:	6a3b      	ldr	r3, [r7, #32]
 8004a2a:	881b      	ldrh	r3, [r3, #0]
 8004a2c:	b29b      	uxth	r3, r3
 8004a2e:	4a2e      	ldr	r2, [pc, #184]	; (8004ae8 <PCD_EP_ISR_Handler+0x6b8>)
 8004a30:	4313      	orrs	r3, r2
 8004a32:	b29a      	uxth	r2, r3
 8004a34:	6a3b      	ldr	r3, [r7, #32]
 8004a36:	801a      	strh	r2, [r3, #0]
 8004a38:	e073      	b.n	8004b22 <PCD_EP_ISR_Handler+0x6f2>
 8004a3a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004a3c:	785b      	ldrb	r3, [r3, #1]
 8004a3e:	2b01      	cmp	r3, #1
 8004a40:	d16f      	bne.n	8004b22 <PCD_EP_ISR_Handler+0x6f2>
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	2250      	movs	r2, #80	; 0x50
 8004a4e:	5a9b      	ldrh	r3, [r3, r2]
 8004a50:	b29b      	uxth	r3, r3
 8004a52:	001a      	movs	r2, r3
 8004a54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a56:	189b      	adds	r3, r3, r2
 8004a58:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004a5a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004a5c:	781b      	ldrb	r3, [r3, #0]
 8004a5e:	00da      	lsls	r2, r3, #3
 8004a60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a62:	18d3      	adds	r3, r2, r3
 8004a64:	4a1e      	ldr	r2, [pc, #120]	; (8004ae0 <PCD_EP_ISR_Handler+0x6b0>)
 8004a66:	4694      	mov	ip, r2
 8004a68:	4463      	add	r3, ip
 8004a6a:	62bb      	str	r3, [r7, #40]	; 0x28
 8004a6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a6e:	2200      	movs	r2, #0
 8004a70:	801a      	strh	r2, [r3, #0]
 8004a72:	e056      	b.n	8004b22 <PCD_EP_ISR_Handler+0x6f2>
          }
          else
          {
            PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004a7a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004a7c:	785b      	ldrb	r3, [r3, #1]
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d136      	bne.n	8004af0 <PCD_EP_ISR_Handler+0x6c0>
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	637b      	str	r3, [r7, #52]	; 0x34
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	2250      	movs	r2, #80	; 0x50
 8004a8e:	5a9b      	ldrh	r3, [r3, r2]
 8004a90:	b29b      	uxth	r3, r3
 8004a92:	001a      	movs	r2, r3
 8004a94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a96:	189b      	adds	r3, r3, r2
 8004a98:	637b      	str	r3, [r7, #52]	; 0x34
 8004a9a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004a9c:	781b      	ldrb	r3, [r3, #0]
 8004a9e:	00da      	lsls	r2, r3, #3
 8004aa0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004aa2:	18d3      	adds	r3, r2, r3
 8004aa4:	4a0b      	ldr	r2, [pc, #44]	; (8004ad4 <PCD_EP_ISR_Handler+0x6a4>)
 8004aa6:	4694      	mov	ip, r2
 8004aa8:	4463      	add	r3, ip
 8004aaa:	633b      	str	r3, [r7, #48]	; 0x30
 8004aac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004aae:	881b      	ldrh	r3, [r3, #0]
 8004ab0:	b29b      	uxth	r3, r3
 8004ab2:	4a0e      	ldr	r2, [pc, #56]	; (8004aec <PCD_EP_ISR_Handler+0x6bc>)
 8004ab4:	4013      	ands	r3, r2
 8004ab6:	b29a      	uxth	r2, r3
 8004ab8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004aba:	801a      	strh	r2, [r3, #0]
 8004abc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004abe:	881b      	ldrh	r3, [r3, #0]
 8004ac0:	b29b      	uxth	r3, r3
 8004ac2:	4a09      	ldr	r2, [pc, #36]	; (8004ae8 <PCD_EP_ISR_Handler+0x6b8>)
 8004ac4:	4313      	orrs	r3, r2
 8004ac6:	b29a      	uxth	r2, r3
 8004ac8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004aca:	801a      	strh	r2, [r3, #0]
 8004acc:	e029      	b.n	8004b22 <PCD_EP_ISR_Handler+0x6f2>
 8004ace:	46c0      	nop			; (mov r8, r8)
 8004ad0:	00000f8f 	.word	0x00000f8f
 8004ad4:	00000406 	.word	0x00000406
 8004ad8:	ffff8f8f 	.word	0xffff8f8f
 8004adc:	ffff80c0 	.word	0xffff80c0
 8004ae0:	00000402 	.word	0x00000402
 8004ae4:	ffff8f0f 	.word	0xffff8f0f
 8004ae8:	ffff8000 	.word	0xffff8000
 8004aec:	ffff83ff 	.word	0xffff83ff
 8004af0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004af2:	785b      	ldrb	r3, [r3, #1]
 8004af4:	2b01      	cmp	r3, #1
 8004af6:	d114      	bne.n	8004b22 <PCD_EP_ISR_Handler+0x6f2>
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	2250      	movs	r2, #80	; 0x50
 8004afe:	5a9b      	ldrh	r3, [r3, r2]
 8004b00:	b29b      	uxth	r3, r3
 8004b02:	001a      	movs	r2, r3
 8004b04:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004b06:	189b      	adds	r3, r3, r2
 8004b08:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004b0a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004b0c:	781b      	ldrb	r3, [r3, #0]
 8004b0e:	00da      	lsls	r2, r3, #3
 8004b10:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004b12:	18d3      	adds	r3, r2, r3
 8004b14:	4a3d      	ldr	r2, [pc, #244]	; (8004c0c <PCD_EP_ISR_Handler+0x7dc>)
 8004b16:	4694      	mov	ip, r2
 8004b18:	4463      	add	r3, ip
 8004b1a:	63bb      	str	r3, [r7, #56]	; 0x38
 8004b1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b1e:	2200      	movs	r2, #0
 8004b20:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004b22:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004b24:	781a      	ldrb	r2, [r3, #0]
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	0011      	movs	r1, r2
 8004b2a:	0018      	movs	r0, r3
 8004b2c:	f007 fd60 	bl	800c5f0 <HAL_PCD_DataInStageCallback>
 8004b30:	e05c      	b.n	8004bec <PCD_EP_ISR_Handler+0x7bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        /* Manage Bulk Single Buffer Transaction */
        if ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U))
 8004b32:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004b34:	78db      	ldrb	r3, [r3, #3]
 8004b36:	2b02      	cmp	r3, #2
 8004b38:	d150      	bne.n	8004bdc <PCD_EP_ISR_Handler+0x7ac>
 8004b3a:	2352      	movs	r3, #82	; 0x52
 8004b3c:	18fb      	adds	r3, r7, r3
 8004b3e:	881a      	ldrh	r2, [r3, #0]
 8004b40:	2380      	movs	r3, #128	; 0x80
 8004b42:	005b      	lsls	r3, r3, #1
 8004b44:	4013      	ands	r3, r2
 8004b46:	d149      	bne.n	8004bdc <PCD_EP_ISR_Handler+0x7ac>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	2250      	movs	r2, #80	; 0x50
 8004b4e:	5a9b      	ldrh	r3, [r3, r2]
 8004b50:	b29b      	uxth	r3, r3
 8004b52:	001a      	movs	r2, r3
 8004b54:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004b56:	781b      	ldrb	r3, [r3, #0]
 8004b58:	00db      	lsls	r3, r3, #3
 8004b5a:	18d2      	adds	r2, r2, r3
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	18d3      	adds	r3, r2, r3
 8004b62:	4a2b      	ldr	r2, [pc, #172]	; (8004c10 <PCD_EP_ISR_Handler+0x7e0>)
 8004b64:	4694      	mov	ip, r2
 8004b66:	4463      	add	r3, ip
 8004b68:	881a      	ldrh	r2, [r3, #0]
 8004b6a:	2140      	movs	r1, #64	; 0x40
 8004b6c:	187b      	adds	r3, r7, r1
 8004b6e:	0592      	lsls	r2, r2, #22
 8004b70:	0d92      	lsrs	r2, r2, #22
 8004b72:	801a      	strh	r2, [r3, #0]

          if (ep->xfer_len > TxByteNbre)
 8004b74:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004b76:	699a      	ldr	r2, [r3, #24]
 8004b78:	187b      	adds	r3, r7, r1
 8004b7a:	881b      	ldrh	r3, [r3, #0]
 8004b7c:	429a      	cmp	r2, r3
 8004b7e:	d907      	bls.n	8004b90 <PCD_EP_ISR_Handler+0x760>
          {
            ep->xfer_len -= TxByteNbre;
 8004b80:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004b82:	699a      	ldr	r2, [r3, #24]
 8004b84:	187b      	adds	r3, r7, r1
 8004b86:	881b      	ldrh	r3, [r3, #0]
 8004b88:	1ad2      	subs	r2, r2, r3
 8004b8a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004b8c:	619a      	str	r2, [r3, #24]
 8004b8e:	e002      	b.n	8004b96 <PCD_EP_ISR_Handler+0x766>
          }
          else
          {
            ep->xfer_len = 0U;
 8004b90:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004b92:	2200      	movs	r2, #0
 8004b94:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 8004b96:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004b98:	699b      	ldr	r3, [r3, #24]
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d107      	bne.n	8004bae <PCD_EP_ISR_Handler+0x77e>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004b9e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004ba0:	781a      	ldrb	r2, [r3, #0]
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	0011      	movs	r1, r2
 8004ba6:	0018      	movs	r0, r3
 8004ba8:	f007 fd22 	bl	800c5f0 <HAL_PCD_DataInStageCallback>
 8004bac:	e01e      	b.n	8004bec <PCD_EP_ISR_Handler+0x7bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 8004bae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004bb0:	695a      	ldr	r2, [r3, #20]
 8004bb2:	2140      	movs	r1, #64	; 0x40
 8004bb4:	187b      	adds	r3, r7, r1
 8004bb6:	881b      	ldrh	r3, [r3, #0]
 8004bb8:	18d2      	adds	r2, r2, r3
 8004bba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004bbc:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 8004bbe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004bc0:	69da      	ldr	r2, [r3, #28]
 8004bc2:	187b      	adds	r3, r7, r1
 8004bc4:	881b      	ldrh	r3, [r3, #0]
 8004bc6:	18d2      	adds	r2, r2, r3
 8004bc8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004bca:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004bd2:	0011      	movs	r1, r2
 8004bd4:	0018      	movs	r0, r3
 8004bd6:	f004 facf 	bl	8009178 <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 8004bda:	e007      	b.n	8004bec <PCD_EP_ISR_Handler+0x7bc>
          }
        }
        /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8004bdc:	2352      	movs	r3, #82	; 0x52
 8004bde:	18fb      	adds	r3, r7, r3
 8004be0:	881a      	ldrh	r2, [r3, #0]
 8004be2:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	0018      	movs	r0, r3
 8004be8:	f000 f930 	bl	8004e4c <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	2244      	movs	r2, #68	; 0x44
 8004bf2:	5a9b      	ldrh	r3, [r3, r2]
 8004bf4:	b29b      	uxth	r3, r3
 8004bf6:	b21b      	sxth	r3, r3
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	da01      	bge.n	8004c00 <PCD_EP_ISR_Handler+0x7d0>
 8004bfc:	f7ff fc1e 	bl	800443c <PCD_EP_ISR_Handler+0xc>
        }
      }
    }
  }

  return HAL_OK;
 8004c00:	2300      	movs	r3, #0
}
 8004c02:	0018      	movs	r0, r3
 8004c04:	46bd      	mov	sp, r7
 8004c06:	b016      	add	sp, #88	; 0x58
 8004c08:	bdb0      	pop	{r4, r5, r7, pc}
 8004c0a:	46c0      	nop			; (mov r8, r8)
 8004c0c:	00000406 	.word	0x00000406
 8004c10:	00000402 	.word	0x00000402

08004c14 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8004c14:	b590      	push	{r4, r7, lr}
 8004c16:	b089      	sub	sp, #36	; 0x24
 8004c18:	af00      	add	r7, sp, #0
 8004c1a:	60f8      	str	r0, [r7, #12]
 8004c1c:	60b9      	str	r1, [r7, #8]
 8004c1e:	1dbb      	adds	r3, r7, #6
 8004c20:	801a      	strh	r2, [r3, #0]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8004c22:	1dbb      	adds	r3, r7, #6
 8004c24:	881a      	ldrh	r2, [r3, #0]
 8004c26:	2380      	movs	r3, #128	; 0x80
 8004c28:	01db      	lsls	r3, r3, #7
 8004c2a:	4013      	ands	r3, r2
 8004c2c:	d100      	bne.n	8004c30 <HAL_PCD_EP_DB_Receive+0x1c>
 8004c2e:	e07d      	b.n	8004d2c <HAL_PCD_EP_DB_Receive+0x118>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	2250      	movs	r2, #80	; 0x50
 8004c36:	5a9b      	ldrh	r3, [r3, r2]
 8004c38:	b29b      	uxth	r3, r3
 8004c3a:	001a      	movs	r2, r3
 8004c3c:	68bb      	ldr	r3, [r7, #8]
 8004c3e:	781b      	ldrb	r3, [r3, #0]
 8004c40:	00db      	lsls	r3, r3, #3
 8004c42:	18d2      	adds	r2, r2, r3
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	18d3      	adds	r3, r2, r3
 8004c4a:	4a7a      	ldr	r2, [pc, #488]	; (8004e34 <HAL_PCD_EP_DB_Receive+0x220>)
 8004c4c:	4694      	mov	ip, r2
 8004c4e:	4463      	add	r3, ip
 8004c50:	881a      	ldrh	r2, [r3, #0]
 8004c52:	211a      	movs	r1, #26
 8004c54:	187b      	adds	r3, r7, r1
 8004c56:	0592      	lsls	r2, r2, #22
 8004c58:	0d92      	lsrs	r2, r2, #22
 8004c5a:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= count)
 8004c5c:	68bb      	ldr	r3, [r7, #8]
 8004c5e:	699a      	ldr	r2, [r3, #24]
 8004c60:	187b      	adds	r3, r7, r1
 8004c62:	881b      	ldrh	r3, [r3, #0]
 8004c64:	429a      	cmp	r2, r3
 8004c66:	d307      	bcc.n	8004c78 <HAL_PCD_EP_DB_Receive+0x64>
    {
      ep->xfer_len -= count;
 8004c68:	68bb      	ldr	r3, [r7, #8]
 8004c6a:	699a      	ldr	r2, [r3, #24]
 8004c6c:	187b      	adds	r3, r7, r1
 8004c6e:	881b      	ldrh	r3, [r3, #0]
 8004c70:	1ad2      	subs	r2, r2, r3
 8004c72:	68bb      	ldr	r3, [r7, #8]
 8004c74:	619a      	str	r2, [r3, #24]
 8004c76:	e002      	b.n	8004c7e <HAL_PCD_EP_DB_Receive+0x6a>
    }
    else
    {
      ep->xfer_len = 0U;
 8004c78:	68bb      	ldr	r3, [r7, #8]
 8004c7a:	2200      	movs	r2, #0
 8004c7c:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8004c7e:	68bb      	ldr	r3, [r7, #8]
 8004c80:	699b      	ldr	r3, [r3, #24]
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d121      	bne.n	8004cca <HAL_PCD_EP_DB_Receive+0xb6>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	001a      	movs	r2, r3
 8004c8c:	68bb      	ldr	r3, [r7, #8]
 8004c8e:	781b      	ldrb	r3, [r3, #0]
 8004c90:	009b      	lsls	r3, r3, #2
 8004c92:	18d3      	adds	r3, r2, r3
 8004c94:	881b      	ldrh	r3, [r3, #0]
 8004c96:	b29a      	uxth	r2, r3
 8004c98:	2018      	movs	r0, #24
 8004c9a:	183b      	adds	r3, r7, r0
 8004c9c:	4966      	ldr	r1, [pc, #408]	; (8004e38 <HAL_PCD_EP_DB_Receive+0x224>)
 8004c9e:	400a      	ands	r2, r1
 8004ca0:	801a      	strh	r2, [r3, #0]
 8004ca2:	183b      	adds	r3, r7, r0
 8004ca4:	183a      	adds	r2, r7, r0
 8004ca6:	8812      	ldrh	r2, [r2, #0]
 8004ca8:	2180      	movs	r1, #128	; 0x80
 8004caa:	0189      	lsls	r1, r1, #6
 8004cac:	404a      	eors	r2, r1
 8004cae:	801a      	strh	r2, [r3, #0]
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	001a      	movs	r2, r3
 8004cb6:	68bb      	ldr	r3, [r7, #8]
 8004cb8:	781b      	ldrb	r3, [r3, #0]
 8004cba:	009b      	lsls	r3, r3, #2
 8004cbc:	18d3      	adds	r3, r2, r3
 8004cbe:	183a      	adds	r2, r7, r0
 8004cc0:	8812      	ldrh	r2, [r2, #0]
 8004cc2:	495e      	ldr	r1, [pc, #376]	; (8004e3c <HAL_PCD_EP_DB_Receive+0x228>)
 8004cc4:	430a      	orrs	r2, r1
 8004cc6:	b292      	uxth	r2, r2
 8004cc8:	801a      	strh	r2, [r3, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8004cca:	1dbb      	adds	r3, r7, #6
 8004ccc:	881b      	ldrh	r3, [r3, #0]
 8004cce:	2240      	movs	r2, #64	; 0x40
 8004cd0:	4013      	ands	r3, r2
 8004cd2:	d01a      	beq.n	8004d0a <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	001a      	movs	r2, r3
 8004cda:	68bb      	ldr	r3, [r7, #8]
 8004cdc:	781b      	ldrb	r3, [r3, #0]
 8004cde:	009b      	lsls	r3, r3, #2
 8004ce0:	18d3      	adds	r3, r2, r3
 8004ce2:	881b      	ldrh	r3, [r3, #0]
 8004ce4:	b29a      	uxth	r2, r3
 8004ce6:	2016      	movs	r0, #22
 8004ce8:	183b      	adds	r3, r7, r0
 8004cea:	4955      	ldr	r1, [pc, #340]	; (8004e40 <HAL_PCD_EP_DB_Receive+0x22c>)
 8004cec:	400a      	ands	r2, r1
 8004cee:	801a      	strh	r2, [r3, #0]
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	001a      	movs	r2, r3
 8004cf6:	68bb      	ldr	r3, [r7, #8]
 8004cf8:	781b      	ldrb	r3, [r3, #0]
 8004cfa:	009b      	lsls	r3, r3, #2
 8004cfc:	18d3      	adds	r3, r2, r3
 8004cfe:	183a      	adds	r2, r7, r0
 8004d00:	8812      	ldrh	r2, [r2, #0]
 8004d02:	4950      	ldr	r1, [pc, #320]	; (8004e44 <HAL_PCD_EP_DB_Receive+0x230>)
 8004d04:	430a      	orrs	r2, r1
 8004d06:	b292      	uxth	r2, r2
 8004d08:	801a      	strh	r2, [r3, #0]
    }

    if (count != 0U)
 8004d0a:	241a      	movs	r4, #26
 8004d0c:	193b      	adds	r3, r7, r4
 8004d0e:	881b      	ldrh	r3, [r3, #0]
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d100      	bne.n	8004d16 <HAL_PCD_EP_DB_Receive+0x102>
 8004d14:	e086      	b.n	8004e24 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	6818      	ldr	r0, [r3, #0]
 8004d1a:	68bb      	ldr	r3, [r7, #8]
 8004d1c:	6959      	ldr	r1, [r3, #20]
 8004d1e:	68bb      	ldr	r3, [r7, #8]
 8004d20:	891a      	ldrh	r2, [r3, #8]
 8004d22:	193b      	adds	r3, r7, r4
 8004d24:	881b      	ldrh	r3, [r3, #0]
 8004d26:	f005 fc5f 	bl	800a5e8 <USB_ReadPMA>
 8004d2a:	e07b      	b.n	8004e24 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	2250      	movs	r2, #80	; 0x50
 8004d32:	5a9b      	ldrh	r3, [r3, r2]
 8004d34:	b29b      	uxth	r3, r3
 8004d36:	001a      	movs	r2, r3
 8004d38:	68bb      	ldr	r3, [r7, #8]
 8004d3a:	781b      	ldrb	r3, [r3, #0]
 8004d3c:	00db      	lsls	r3, r3, #3
 8004d3e:	18d2      	adds	r2, r2, r3
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	18d3      	adds	r3, r2, r3
 8004d46:	4a40      	ldr	r2, [pc, #256]	; (8004e48 <HAL_PCD_EP_DB_Receive+0x234>)
 8004d48:	4694      	mov	ip, r2
 8004d4a:	4463      	add	r3, ip
 8004d4c:	881a      	ldrh	r2, [r3, #0]
 8004d4e:	211a      	movs	r1, #26
 8004d50:	187b      	adds	r3, r7, r1
 8004d52:	0592      	lsls	r2, r2, #22
 8004d54:	0d92      	lsrs	r2, r2, #22
 8004d56:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= count)
 8004d58:	68bb      	ldr	r3, [r7, #8]
 8004d5a:	699a      	ldr	r2, [r3, #24]
 8004d5c:	187b      	adds	r3, r7, r1
 8004d5e:	881b      	ldrh	r3, [r3, #0]
 8004d60:	429a      	cmp	r2, r3
 8004d62:	d307      	bcc.n	8004d74 <HAL_PCD_EP_DB_Receive+0x160>
    {
      ep->xfer_len -= count;
 8004d64:	68bb      	ldr	r3, [r7, #8]
 8004d66:	699a      	ldr	r2, [r3, #24]
 8004d68:	187b      	adds	r3, r7, r1
 8004d6a:	881b      	ldrh	r3, [r3, #0]
 8004d6c:	1ad2      	subs	r2, r2, r3
 8004d6e:	68bb      	ldr	r3, [r7, #8]
 8004d70:	619a      	str	r2, [r3, #24]
 8004d72:	e002      	b.n	8004d7a <HAL_PCD_EP_DB_Receive+0x166>
    }
    else
    {
      ep->xfer_len = 0U;
 8004d74:	68bb      	ldr	r3, [r7, #8]
 8004d76:	2200      	movs	r2, #0
 8004d78:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8004d7a:	68bb      	ldr	r3, [r7, #8]
 8004d7c:	699b      	ldr	r3, [r3, #24]
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d121      	bne.n	8004dc6 <HAL_PCD_EP_DB_Receive+0x1b2>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	001a      	movs	r2, r3
 8004d88:	68bb      	ldr	r3, [r7, #8]
 8004d8a:	781b      	ldrb	r3, [r3, #0]
 8004d8c:	009b      	lsls	r3, r3, #2
 8004d8e:	18d3      	adds	r3, r2, r3
 8004d90:	881b      	ldrh	r3, [r3, #0]
 8004d92:	b29a      	uxth	r2, r3
 8004d94:	201e      	movs	r0, #30
 8004d96:	183b      	adds	r3, r7, r0
 8004d98:	4927      	ldr	r1, [pc, #156]	; (8004e38 <HAL_PCD_EP_DB_Receive+0x224>)
 8004d9a:	400a      	ands	r2, r1
 8004d9c:	801a      	strh	r2, [r3, #0]
 8004d9e:	183b      	adds	r3, r7, r0
 8004da0:	183a      	adds	r2, r7, r0
 8004da2:	8812      	ldrh	r2, [r2, #0]
 8004da4:	2180      	movs	r1, #128	; 0x80
 8004da6:	0189      	lsls	r1, r1, #6
 8004da8:	404a      	eors	r2, r1
 8004daa:	801a      	strh	r2, [r3, #0]
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	001a      	movs	r2, r3
 8004db2:	68bb      	ldr	r3, [r7, #8]
 8004db4:	781b      	ldrb	r3, [r3, #0]
 8004db6:	009b      	lsls	r3, r3, #2
 8004db8:	18d3      	adds	r3, r2, r3
 8004dba:	183a      	adds	r2, r7, r0
 8004dbc:	8812      	ldrh	r2, [r2, #0]
 8004dbe:	491f      	ldr	r1, [pc, #124]	; (8004e3c <HAL_PCD_EP_DB_Receive+0x228>)
 8004dc0:	430a      	orrs	r2, r1
 8004dc2:	b292      	uxth	r2, r2
 8004dc4:	801a      	strh	r2, [r3, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8004dc6:	1dbb      	adds	r3, r7, #6
 8004dc8:	881b      	ldrh	r3, [r3, #0]
 8004dca:	2240      	movs	r2, #64	; 0x40
 8004dcc:	4013      	ands	r3, r2
 8004dce:	d11a      	bne.n	8004e06 <HAL_PCD_EP_DB_Receive+0x1f2>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	001a      	movs	r2, r3
 8004dd6:	68bb      	ldr	r3, [r7, #8]
 8004dd8:	781b      	ldrb	r3, [r3, #0]
 8004dda:	009b      	lsls	r3, r3, #2
 8004ddc:	18d3      	adds	r3, r2, r3
 8004dde:	881b      	ldrh	r3, [r3, #0]
 8004de0:	b29a      	uxth	r2, r3
 8004de2:	201c      	movs	r0, #28
 8004de4:	183b      	adds	r3, r7, r0
 8004de6:	4916      	ldr	r1, [pc, #88]	; (8004e40 <HAL_PCD_EP_DB_Receive+0x22c>)
 8004de8:	400a      	ands	r2, r1
 8004dea:	801a      	strh	r2, [r3, #0]
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	001a      	movs	r2, r3
 8004df2:	68bb      	ldr	r3, [r7, #8]
 8004df4:	781b      	ldrb	r3, [r3, #0]
 8004df6:	009b      	lsls	r3, r3, #2
 8004df8:	18d3      	adds	r3, r2, r3
 8004dfa:	183a      	adds	r2, r7, r0
 8004dfc:	8812      	ldrh	r2, [r2, #0]
 8004dfe:	4911      	ldr	r1, [pc, #68]	; (8004e44 <HAL_PCD_EP_DB_Receive+0x230>)
 8004e00:	430a      	orrs	r2, r1
 8004e02:	b292      	uxth	r2, r2
 8004e04:	801a      	strh	r2, [r3, #0]
    }

    if (count != 0U)
 8004e06:	241a      	movs	r4, #26
 8004e08:	193b      	adds	r3, r7, r4
 8004e0a:	881b      	ldrh	r3, [r3, #0]
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d009      	beq.n	8004e24 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	6818      	ldr	r0, [r3, #0]
 8004e14:	68bb      	ldr	r3, [r7, #8]
 8004e16:	6959      	ldr	r1, [r3, #20]
 8004e18:	68bb      	ldr	r3, [r7, #8]
 8004e1a:	895a      	ldrh	r2, [r3, #10]
 8004e1c:	193b      	adds	r3, r7, r4
 8004e1e:	881b      	ldrh	r3, [r3, #0]
 8004e20:	f005 fbe2 	bl	800a5e8 <USB_ReadPMA>
    }
  }

  return count;
 8004e24:	231a      	movs	r3, #26
 8004e26:	18fb      	adds	r3, r7, r3
 8004e28:	881b      	ldrh	r3, [r3, #0]
}
 8004e2a:	0018      	movs	r0, r3
 8004e2c:	46bd      	mov	sp, r7
 8004e2e:	b009      	add	sp, #36	; 0x24
 8004e30:	bd90      	pop	{r4, r7, pc}
 8004e32:	46c0      	nop			; (mov r8, r8)
 8004e34:	00000402 	.word	0x00000402
 8004e38:	ffffbf8f 	.word	0xffffbf8f
 8004e3c:	ffff8080 	.word	0xffff8080
 8004e40:	ffff8f8f 	.word	0xffff8f8f
 8004e44:	ffff80c0 	.word	0xffff80c0
 8004e48:	00000406 	.word	0x00000406

08004e4c <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8004e4c:	b580      	push	{r7, lr}
 8004e4e:	b0a2      	sub	sp, #136	; 0x88
 8004e50:	af00      	add	r7, sp, #0
 8004e52:	60f8      	str	r0, [r7, #12]
 8004e54:	60b9      	str	r1, [r7, #8]
 8004e56:	1dbb      	adds	r3, r7, #6
 8004e58:	801a      	strh	r2, [r3, #0]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8004e5a:	1dbb      	adds	r3, r7, #6
 8004e5c:	881b      	ldrh	r3, [r3, #0]
 8004e5e:	2240      	movs	r2, #64	; 0x40
 8004e60:	4013      	ands	r3, r2
 8004e62:	d100      	bne.n	8004e66 <HAL_PCD_EP_DB_Transmit+0x1a>
 8004e64:	e1c8      	b.n	80051f8 <HAL_PCD_EP_DB_Transmit+0x3ac>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	2250      	movs	r2, #80	; 0x50
 8004e6c:	5a9b      	ldrh	r3, [r3, r2]
 8004e6e:	b29b      	uxth	r3, r3
 8004e70:	001a      	movs	r2, r3
 8004e72:	68bb      	ldr	r3, [r7, #8]
 8004e74:	781b      	ldrb	r3, [r3, #0]
 8004e76:	00db      	lsls	r3, r3, #3
 8004e78:	18d2      	adds	r2, r2, r3
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	18d3      	adds	r3, r2, r3
 8004e80:	4ad7      	ldr	r2, [pc, #860]	; (80051e0 <HAL_PCD_EP_DB_Transmit+0x394>)
 8004e82:	4694      	mov	ip, r2
 8004e84:	4463      	add	r3, ip
 8004e86:	881a      	ldrh	r2, [r3, #0]
 8004e88:	214e      	movs	r1, #78	; 0x4e
 8004e8a:	187b      	adds	r3, r7, r1
 8004e8c:	0592      	lsls	r2, r2, #22
 8004e8e:	0d92      	lsrs	r2, r2, #22
 8004e90:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len > TxByteNbre)
 8004e92:	68bb      	ldr	r3, [r7, #8]
 8004e94:	699a      	ldr	r2, [r3, #24]
 8004e96:	187b      	adds	r3, r7, r1
 8004e98:	881b      	ldrh	r3, [r3, #0]
 8004e9a:	429a      	cmp	r2, r3
 8004e9c:	d907      	bls.n	8004eae <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxByteNbre;
 8004e9e:	68bb      	ldr	r3, [r7, #8]
 8004ea0:	699a      	ldr	r2, [r3, #24]
 8004ea2:	187b      	adds	r3, r7, r1
 8004ea4:	881b      	ldrh	r3, [r3, #0]
 8004ea6:	1ad2      	subs	r2, r2, r3
 8004ea8:	68bb      	ldr	r3, [r7, #8]
 8004eaa:	619a      	str	r2, [r3, #24]
 8004eac:	e002      	b.n	8004eb4 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8004eae:	68bb      	ldr	r3, [r7, #8]
 8004eb0:	2200      	movs	r2, #0
 8004eb2:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8004eb4:	68bb      	ldr	r3, [r7, #8]
 8004eb6:	699b      	ldr	r3, [r3, #24]
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d000      	beq.n	8004ebe <HAL_PCD_EP_DB_Transmit+0x72>
 8004ebc:	e0b5      	b.n	800502a <HAL_PCD_EP_DB_Transmit+0x1de>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004ebe:	68bb      	ldr	r3, [r7, #8]
 8004ec0:	785b      	ldrb	r3, [r3, #1]
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d125      	bne.n	8004f12 <HAL_PCD_EP_DB_Transmit+0xc6>
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	62bb      	str	r3, [r7, #40]	; 0x28
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	2250      	movs	r2, #80	; 0x50
 8004ed2:	5a9b      	ldrh	r3, [r3, r2]
 8004ed4:	b29b      	uxth	r3, r3
 8004ed6:	001a      	movs	r2, r3
 8004ed8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004eda:	189b      	adds	r3, r3, r2
 8004edc:	62bb      	str	r3, [r7, #40]	; 0x28
 8004ede:	68bb      	ldr	r3, [r7, #8]
 8004ee0:	781b      	ldrb	r3, [r3, #0]
 8004ee2:	00da      	lsls	r2, r3, #3
 8004ee4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ee6:	18d3      	adds	r3, r2, r3
 8004ee8:	4abd      	ldr	r2, [pc, #756]	; (80051e0 <HAL_PCD_EP_DB_Transmit+0x394>)
 8004eea:	4694      	mov	ip, r2
 8004eec:	4463      	add	r3, ip
 8004eee:	627b      	str	r3, [r7, #36]	; 0x24
 8004ef0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ef2:	881b      	ldrh	r3, [r3, #0]
 8004ef4:	b29b      	uxth	r3, r3
 8004ef6:	4abb      	ldr	r2, [pc, #748]	; (80051e4 <HAL_PCD_EP_DB_Transmit+0x398>)
 8004ef8:	4013      	ands	r3, r2
 8004efa:	b29a      	uxth	r2, r3
 8004efc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004efe:	801a      	strh	r2, [r3, #0]
 8004f00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f02:	881b      	ldrh	r3, [r3, #0]
 8004f04:	b29b      	uxth	r3, r3
 8004f06:	4ab8      	ldr	r2, [pc, #736]	; (80051e8 <HAL_PCD_EP_DB_Transmit+0x39c>)
 8004f08:	4313      	orrs	r3, r2
 8004f0a:	b29a      	uxth	r2, r3
 8004f0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f0e:	801a      	strh	r2, [r3, #0]
 8004f10:	e01b      	b.n	8004f4a <HAL_PCD_EP_DB_Transmit+0xfe>
 8004f12:	68bb      	ldr	r3, [r7, #8]
 8004f14:	785b      	ldrb	r3, [r3, #1]
 8004f16:	2b01      	cmp	r3, #1
 8004f18:	d117      	bne.n	8004f4a <HAL_PCD_EP_DB_Transmit+0xfe>
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	633b      	str	r3, [r7, #48]	; 0x30
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	2250      	movs	r2, #80	; 0x50
 8004f26:	5a9b      	ldrh	r3, [r3, r2]
 8004f28:	b29b      	uxth	r3, r3
 8004f2a:	001a      	movs	r2, r3
 8004f2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f2e:	189b      	adds	r3, r3, r2
 8004f30:	633b      	str	r3, [r7, #48]	; 0x30
 8004f32:	68bb      	ldr	r3, [r7, #8]
 8004f34:	781b      	ldrb	r3, [r3, #0]
 8004f36:	00da      	lsls	r2, r3, #3
 8004f38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f3a:	18d3      	adds	r3, r2, r3
 8004f3c:	4aa8      	ldr	r2, [pc, #672]	; (80051e0 <HAL_PCD_EP_DB_Transmit+0x394>)
 8004f3e:	4694      	mov	ip, r2
 8004f40:	4463      	add	r3, ip
 8004f42:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004f44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f46:	2200      	movs	r2, #0
 8004f48:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	623b      	str	r3, [r7, #32]
 8004f50:	68bb      	ldr	r3, [r7, #8]
 8004f52:	785b      	ldrb	r3, [r3, #1]
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d125      	bne.n	8004fa4 <HAL_PCD_EP_DB_Transmit+0x158>
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	61bb      	str	r3, [r7, #24]
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	2250      	movs	r2, #80	; 0x50
 8004f64:	5a9b      	ldrh	r3, [r3, r2]
 8004f66:	b29b      	uxth	r3, r3
 8004f68:	001a      	movs	r2, r3
 8004f6a:	69bb      	ldr	r3, [r7, #24]
 8004f6c:	189b      	adds	r3, r3, r2
 8004f6e:	61bb      	str	r3, [r7, #24]
 8004f70:	68bb      	ldr	r3, [r7, #8]
 8004f72:	781b      	ldrb	r3, [r3, #0]
 8004f74:	00da      	lsls	r2, r3, #3
 8004f76:	69bb      	ldr	r3, [r7, #24]
 8004f78:	18d3      	adds	r3, r2, r3
 8004f7a:	4a9c      	ldr	r2, [pc, #624]	; (80051ec <HAL_PCD_EP_DB_Transmit+0x3a0>)
 8004f7c:	4694      	mov	ip, r2
 8004f7e:	4463      	add	r3, ip
 8004f80:	617b      	str	r3, [r7, #20]
 8004f82:	697b      	ldr	r3, [r7, #20]
 8004f84:	881b      	ldrh	r3, [r3, #0]
 8004f86:	b29b      	uxth	r3, r3
 8004f88:	4a96      	ldr	r2, [pc, #600]	; (80051e4 <HAL_PCD_EP_DB_Transmit+0x398>)
 8004f8a:	4013      	ands	r3, r2
 8004f8c:	b29a      	uxth	r2, r3
 8004f8e:	697b      	ldr	r3, [r7, #20]
 8004f90:	801a      	strh	r2, [r3, #0]
 8004f92:	697b      	ldr	r3, [r7, #20]
 8004f94:	881b      	ldrh	r3, [r3, #0]
 8004f96:	b29b      	uxth	r3, r3
 8004f98:	4a93      	ldr	r2, [pc, #588]	; (80051e8 <HAL_PCD_EP_DB_Transmit+0x39c>)
 8004f9a:	4313      	orrs	r3, r2
 8004f9c:	b29a      	uxth	r2, r3
 8004f9e:	697b      	ldr	r3, [r7, #20]
 8004fa0:	801a      	strh	r2, [r3, #0]
 8004fa2:	e018      	b.n	8004fd6 <HAL_PCD_EP_DB_Transmit+0x18a>
 8004fa4:	68bb      	ldr	r3, [r7, #8]
 8004fa6:	785b      	ldrb	r3, [r3, #1]
 8004fa8:	2b01      	cmp	r3, #1
 8004faa:	d114      	bne.n	8004fd6 <HAL_PCD_EP_DB_Transmit+0x18a>
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	2250      	movs	r2, #80	; 0x50
 8004fb2:	5a9b      	ldrh	r3, [r3, r2]
 8004fb4:	b29b      	uxth	r3, r3
 8004fb6:	001a      	movs	r2, r3
 8004fb8:	6a3b      	ldr	r3, [r7, #32]
 8004fba:	189b      	adds	r3, r3, r2
 8004fbc:	623b      	str	r3, [r7, #32]
 8004fbe:	68bb      	ldr	r3, [r7, #8]
 8004fc0:	781b      	ldrb	r3, [r3, #0]
 8004fc2:	00da      	lsls	r2, r3, #3
 8004fc4:	6a3b      	ldr	r3, [r7, #32]
 8004fc6:	18d3      	adds	r3, r2, r3
 8004fc8:	4a88      	ldr	r2, [pc, #544]	; (80051ec <HAL_PCD_EP_DB_Transmit+0x3a0>)
 8004fca:	4694      	mov	ip, r2
 8004fcc:	4463      	add	r3, ip
 8004fce:	61fb      	str	r3, [r7, #28]
 8004fd0:	69fb      	ldr	r3, [r7, #28]
 8004fd2:	2200      	movs	r2, #0
 8004fd4:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004fd6:	68bb      	ldr	r3, [r7, #8]
 8004fd8:	781a      	ldrb	r2, [r3, #0]
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	0011      	movs	r1, r2
 8004fde:	0018      	movs	r0, r3
 8004fe0:	f007 fb06 	bl	800c5f0 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8004fe4:	1dbb      	adds	r3, r7, #6
 8004fe6:	881a      	ldrh	r2, [r3, #0]
 8004fe8:	2380      	movs	r3, #128	; 0x80
 8004fea:	01db      	lsls	r3, r3, #7
 8004fec:	4013      	ands	r3, r2
 8004fee:	d100      	bne.n	8004ff2 <HAL_PCD_EP_DB_Transmit+0x1a6>
 8004ff0:	e2d4      	b.n	800559c <HAL_PCD_EP_DB_Transmit+0x750>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	001a      	movs	r2, r3
 8004ff8:	68bb      	ldr	r3, [r7, #8]
 8004ffa:	781b      	ldrb	r3, [r3, #0]
 8004ffc:	009b      	lsls	r3, r3, #2
 8004ffe:	18d3      	adds	r3, r2, r3
 8005000:	881b      	ldrh	r3, [r3, #0]
 8005002:	b29a      	uxth	r2, r3
 8005004:	2012      	movs	r0, #18
 8005006:	183b      	adds	r3, r7, r0
 8005008:	4979      	ldr	r1, [pc, #484]	; (80051f0 <HAL_PCD_EP_DB_Transmit+0x3a4>)
 800500a:	400a      	ands	r2, r1
 800500c:	801a      	strh	r2, [r3, #0]
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	001a      	movs	r2, r3
 8005014:	68bb      	ldr	r3, [r7, #8]
 8005016:	781b      	ldrb	r3, [r3, #0]
 8005018:	009b      	lsls	r3, r3, #2
 800501a:	18d3      	adds	r3, r2, r3
 800501c:	183a      	adds	r2, r7, r0
 800501e:	8812      	ldrh	r2, [r2, #0]
 8005020:	4974      	ldr	r1, [pc, #464]	; (80051f4 <HAL_PCD_EP_DB_Transmit+0x3a8>)
 8005022:	430a      	orrs	r2, r1
 8005024:	b292      	uxth	r2, r2
 8005026:	801a      	strh	r2, [r3, #0]
 8005028:	e2b8      	b.n	800559c <HAL_PCD_EP_DB_Transmit+0x750>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800502a:	1dbb      	adds	r3, r7, #6
 800502c:	881a      	ldrh	r2, [r3, #0]
 800502e:	2380      	movs	r3, #128	; 0x80
 8005030:	01db      	lsls	r3, r3, #7
 8005032:	4013      	ands	r3, r2
 8005034:	d01a      	beq.n	800506c <HAL_PCD_EP_DB_Transmit+0x220>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	001a      	movs	r2, r3
 800503c:	68bb      	ldr	r3, [r7, #8]
 800503e:	781b      	ldrb	r3, [r3, #0]
 8005040:	009b      	lsls	r3, r3, #2
 8005042:	18d3      	adds	r3, r2, r3
 8005044:	881b      	ldrh	r3, [r3, #0]
 8005046:	b29a      	uxth	r2, r3
 8005048:	2044      	movs	r0, #68	; 0x44
 800504a:	183b      	adds	r3, r7, r0
 800504c:	4968      	ldr	r1, [pc, #416]	; (80051f0 <HAL_PCD_EP_DB_Transmit+0x3a4>)
 800504e:	400a      	ands	r2, r1
 8005050:	801a      	strh	r2, [r3, #0]
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	001a      	movs	r2, r3
 8005058:	68bb      	ldr	r3, [r7, #8]
 800505a:	781b      	ldrb	r3, [r3, #0]
 800505c:	009b      	lsls	r3, r3, #2
 800505e:	18d3      	adds	r3, r2, r3
 8005060:	183a      	adds	r2, r7, r0
 8005062:	8812      	ldrh	r2, [r2, #0]
 8005064:	4963      	ldr	r1, [pc, #396]	; (80051f4 <HAL_PCD_EP_DB_Transmit+0x3a8>)
 8005066:	430a      	orrs	r2, r1
 8005068:	b292      	uxth	r2, r2
 800506a:	801a      	strh	r2, [r3, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800506c:	68bb      	ldr	r3, [r7, #8]
 800506e:	2224      	movs	r2, #36	; 0x24
 8005070:	5c9b      	ldrb	r3, [r3, r2]
 8005072:	2b01      	cmp	r3, #1
 8005074:	d000      	beq.n	8005078 <HAL_PCD_EP_DB_Transmit+0x22c>
 8005076:	e291      	b.n	800559c <HAL_PCD_EP_DB_Transmit+0x750>
      {
        ep->xfer_buff += TxByteNbre;
 8005078:	68bb      	ldr	r3, [r7, #8]
 800507a:	695a      	ldr	r2, [r3, #20]
 800507c:	214e      	movs	r1, #78	; 0x4e
 800507e:	187b      	adds	r3, r7, r1
 8005080:	881b      	ldrh	r3, [r3, #0]
 8005082:	18d2      	adds	r2, r2, r3
 8005084:	68bb      	ldr	r3, [r7, #8]
 8005086:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8005088:	68bb      	ldr	r3, [r7, #8]
 800508a:	69da      	ldr	r2, [r3, #28]
 800508c:	187b      	adds	r3, r7, r1
 800508e:	881b      	ldrh	r3, [r3, #0]
 8005090:	18d2      	adds	r2, r2, r3
 8005092:	68bb      	ldr	r3, [r7, #8]
 8005094:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8005096:	68bb      	ldr	r3, [r7, #8]
 8005098:	6a1a      	ldr	r2, [r3, #32]
 800509a:	68bb      	ldr	r3, [r7, #8]
 800509c:	691b      	ldr	r3, [r3, #16]
 800509e:	429a      	cmp	r2, r3
 80050a0:	d309      	bcc.n	80050b6 <HAL_PCD_EP_DB_Transmit+0x26a>
        {
          len = ep->maxpacket;
 80050a2:	68bb      	ldr	r3, [r7, #8]
 80050a4:	691b      	ldr	r3, [r3, #16]
 80050a6:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 80050a8:	68bb      	ldr	r3, [r7, #8]
 80050aa:	6a1a      	ldr	r2, [r3, #32]
 80050ac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80050ae:	1ad2      	subs	r2, r2, r3
 80050b0:	68bb      	ldr	r3, [r7, #8]
 80050b2:	621a      	str	r2, [r3, #32]
 80050b4:	e016      	b.n	80050e4 <HAL_PCD_EP_DB_Transmit+0x298>
        }
        else if (ep->xfer_len_db == 0U)
 80050b6:	68bb      	ldr	r3, [r7, #8]
 80050b8:	6a1b      	ldr	r3, [r3, #32]
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d108      	bne.n	80050d0 <HAL_PCD_EP_DB_Transmit+0x284>
        {
          len = TxByteNbre;
 80050be:	234e      	movs	r3, #78	; 0x4e
 80050c0:	18fb      	adds	r3, r7, r3
 80050c2:	881b      	ldrh	r3, [r3, #0]
 80050c4:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 80050c6:	68bb      	ldr	r3, [r7, #8]
 80050c8:	2224      	movs	r2, #36	; 0x24
 80050ca:	2100      	movs	r1, #0
 80050cc:	5499      	strb	r1, [r3, r2]
 80050ce:	e009      	b.n	80050e4 <HAL_PCD_EP_DB_Transmit+0x298>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 80050d0:	68bb      	ldr	r3, [r7, #8]
 80050d2:	2224      	movs	r2, #36	; 0x24
 80050d4:	2100      	movs	r1, #0
 80050d6:	5499      	strb	r1, [r3, r2]
          len = ep->xfer_len_db;
 80050d8:	68bb      	ldr	r3, [r7, #8]
 80050da:	6a1b      	ldr	r3, [r3, #32]
 80050dc:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 80050de:	68bb      	ldr	r3, [r7, #8]
 80050e0:	2200      	movs	r2, #0
 80050e2:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80050e4:	68bb      	ldr	r3, [r7, #8]
 80050e6:	785b      	ldrb	r3, [r3, #1]
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d150      	bne.n	800518e <HAL_PCD_EP_DB_Transmit+0x342>
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	63bb      	str	r3, [r7, #56]	; 0x38
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	2250      	movs	r2, #80	; 0x50
 80050f8:	5a9b      	ldrh	r3, [r3, r2]
 80050fa:	b29b      	uxth	r3, r3
 80050fc:	001a      	movs	r2, r3
 80050fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005100:	189b      	adds	r3, r3, r2
 8005102:	63bb      	str	r3, [r7, #56]	; 0x38
 8005104:	68bb      	ldr	r3, [r7, #8]
 8005106:	781b      	ldrb	r3, [r3, #0]
 8005108:	00da      	lsls	r2, r3, #3
 800510a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800510c:	18d3      	adds	r3, r2, r3
 800510e:	4a34      	ldr	r2, [pc, #208]	; (80051e0 <HAL_PCD_EP_DB_Transmit+0x394>)
 8005110:	4694      	mov	ip, r2
 8005112:	4463      	add	r3, ip
 8005114:	637b      	str	r3, [r7, #52]	; 0x34
 8005116:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005118:	2b00      	cmp	r3, #0
 800511a:	d110      	bne.n	800513e <HAL_PCD_EP_DB_Transmit+0x2f2>
 800511c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800511e:	881b      	ldrh	r3, [r3, #0]
 8005120:	b29b      	uxth	r3, r3
 8005122:	4a30      	ldr	r2, [pc, #192]	; (80051e4 <HAL_PCD_EP_DB_Transmit+0x398>)
 8005124:	4013      	ands	r3, r2
 8005126:	b29a      	uxth	r2, r3
 8005128:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800512a:	801a      	strh	r2, [r3, #0]
 800512c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800512e:	881b      	ldrh	r3, [r3, #0]
 8005130:	b29b      	uxth	r3, r3
 8005132:	4a2d      	ldr	r2, [pc, #180]	; (80051e8 <HAL_PCD_EP_DB_Transmit+0x39c>)
 8005134:	4313      	orrs	r3, r2
 8005136:	b29a      	uxth	r2, r3
 8005138:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800513a:	801a      	strh	r2, [r3, #0]
 800513c:	e044      	b.n	80051c8 <HAL_PCD_EP_DB_Transmit+0x37c>
 800513e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005140:	2b3e      	cmp	r3, #62	; 0x3e
 8005142:	d810      	bhi.n	8005166 <HAL_PCD_EP_DB_Transmit+0x31a>
 8005144:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005146:	085b      	lsrs	r3, r3, #1
 8005148:	64bb      	str	r3, [r7, #72]	; 0x48
 800514a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800514c:	2201      	movs	r2, #1
 800514e:	4013      	ands	r3, r2
 8005150:	d002      	beq.n	8005158 <HAL_PCD_EP_DB_Transmit+0x30c>
 8005152:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005154:	3301      	adds	r3, #1
 8005156:	64bb      	str	r3, [r7, #72]	; 0x48
 8005158:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800515a:	b29b      	uxth	r3, r3
 800515c:	029b      	lsls	r3, r3, #10
 800515e:	b29a      	uxth	r2, r3
 8005160:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005162:	801a      	strh	r2, [r3, #0]
 8005164:	e030      	b.n	80051c8 <HAL_PCD_EP_DB_Transmit+0x37c>
 8005166:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005168:	095b      	lsrs	r3, r3, #5
 800516a:	64bb      	str	r3, [r7, #72]	; 0x48
 800516c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800516e:	221f      	movs	r2, #31
 8005170:	4013      	ands	r3, r2
 8005172:	d102      	bne.n	800517a <HAL_PCD_EP_DB_Transmit+0x32e>
 8005174:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005176:	3b01      	subs	r3, #1
 8005178:	64bb      	str	r3, [r7, #72]	; 0x48
 800517a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800517c:	b29b      	uxth	r3, r3
 800517e:	029b      	lsls	r3, r3, #10
 8005180:	b29b      	uxth	r3, r3
 8005182:	4a19      	ldr	r2, [pc, #100]	; (80051e8 <HAL_PCD_EP_DB_Transmit+0x39c>)
 8005184:	4313      	orrs	r3, r2
 8005186:	b29a      	uxth	r2, r3
 8005188:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800518a:	801a      	strh	r2, [r3, #0]
 800518c:	e01c      	b.n	80051c8 <HAL_PCD_EP_DB_Transmit+0x37c>
 800518e:	68bb      	ldr	r3, [r7, #8]
 8005190:	785b      	ldrb	r3, [r3, #1]
 8005192:	2b01      	cmp	r3, #1
 8005194:	d118      	bne.n	80051c8 <HAL_PCD_EP_DB_Transmit+0x37c>
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	643b      	str	r3, [r7, #64]	; 0x40
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	2250      	movs	r2, #80	; 0x50
 80051a2:	5a9b      	ldrh	r3, [r3, r2]
 80051a4:	b29b      	uxth	r3, r3
 80051a6:	001a      	movs	r2, r3
 80051a8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80051aa:	189b      	adds	r3, r3, r2
 80051ac:	643b      	str	r3, [r7, #64]	; 0x40
 80051ae:	68bb      	ldr	r3, [r7, #8]
 80051b0:	781b      	ldrb	r3, [r3, #0]
 80051b2:	00da      	lsls	r2, r3, #3
 80051b4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80051b6:	18d3      	adds	r3, r2, r3
 80051b8:	4a09      	ldr	r2, [pc, #36]	; (80051e0 <HAL_PCD_EP_DB_Transmit+0x394>)
 80051ba:	4694      	mov	ip, r2
 80051bc:	4463      	add	r3, ip
 80051be:	63fb      	str	r3, [r7, #60]	; 0x3c
 80051c0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80051c2:	b29a      	uxth	r2, r3
 80051c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80051c6:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	6818      	ldr	r0, [r3, #0]
 80051cc:	68bb      	ldr	r3, [r7, #8]
 80051ce:	6959      	ldr	r1, [r3, #20]
 80051d0:	68bb      	ldr	r3, [r7, #8]
 80051d2:	891a      	ldrh	r2, [r3, #8]
 80051d4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80051d6:	b29b      	uxth	r3, r3
 80051d8:	f005 f9c2 	bl	800a560 <USB_WritePMA>
 80051dc:	e1de      	b.n	800559c <HAL_PCD_EP_DB_Transmit+0x750>
 80051de:	46c0      	nop			; (mov r8, r8)
 80051e0:	00000402 	.word	0x00000402
 80051e4:	ffff83ff 	.word	0xffff83ff
 80051e8:	ffff8000 	.word	0xffff8000
 80051ec:	00000406 	.word	0x00000406
 80051f0:	ffff8f8f 	.word	0xffff8f8f
 80051f4:	ffffc080 	.word	0xffffc080
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	2250      	movs	r2, #80	; 0x50
 80051fe:	5a9b      	ldrh	r3, [r3, r2]
 8005200:	b29b      	uxth	r3, r3
 8005202:	001a      	movs	r2, r3
 8005204:	68bb      	ldr	r3, [r7, #8]
 8005206:	781b      	ldrb	r3, [r3, #0]
 8005208:	00db      	lsls	r3, r3, #3
 800520a:	18d2      	adds	r2, r2, r3
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	18d3      	adds	r3, r2, r3
 8005212:	4aca      	ldr	r2, [pc, #808]	; (800553c <HAL_PCD_EP_DB_Transmit+0x6f0>)
 8005214:	4694      	mov	ip, r2
 8005216:	4463      	add	r3, ip
 8005218:	881a      	ldrh	r2, [r3, #0]
 800521a:	214e      	movs	r1, #78	; 0x4e
 800521c:	187b      	adds	r3, r7, r1
 800521e:	0592      	lsls	r2, r2, #22
 8005220:	0d92      	lsrs	r2, r2, #22
 8005222:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= TxByteNbre)
 8005224:	68bb      	ldr	r3, [r7, #8]
 8005226:	699a      	ldr	r2, [r3, #24]
 8005228:	187b      	adds	r3, r7, r1
 800522a:	881b      	ldrh	r3, [r3, #0]
 800522c:	429a      	cmp	r2, r3
 800522e:	d307      	bcc.n	8005240 <HAL_PCD_EP_DB_Transmit+0x3f4>
    {
      ep->xfer_len -= TxByteNbre;
 8005230:	68bb      	ldr	r3, [r7, #8]
 8005232:	699a      	ldr	r2, [r3, #24]
 8005234:	187b      	adds	r3, r7, r1
 8005236:	881b      	ldrh	r3, [r3, #0]
 8005238:	1ad2      	subs	r2, r2, r3
 800523a:	68bb      	ldr	r3, [r7, #8]
 800523c:	619a      	str	r2, [r3, #24]
 800523e:	e002      	b.n	8005246 <HAL_PCD_EP_DB_Transmit+0x3fa>
    }
    else
    {
      ep->xfer_len = 0U;
 8005240:	68bb      	ldr	r3, [r7, #8]
 8005242:	2200      	movs	r2, #0
 8005244:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8005246:	68bb      	ldr	r3, [r7, #8]
 8005248:	699b      	ldr	r3, [r3, #24]
 800524a:	2b00      	cmp	r3, #0
 800524c:	d000      	beq.n	8005250 <HAL_PCD_EP_DB_Transmit+0x404>
 800524e:	e0c0      	b.n	80053d2 <HAL_PCD_EP_DB_Transmit+0x586>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005250:	68bb      	ldr	r3, [r7, #8]
 8005252:	785b      	ldrb	r3, [r3, #1]
 8005254:	2b00      	cmp	r3, #0
 8005256:	d125      	bne.n	80052a4 <HAL_PCD_EP_DB_Transmit+0x458>
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	2250      	movs	r2, #80	; 0x50
 8005264:	5a9b      	ldrh	r3, [r3, r2]
 8005266:	b29b      	uxth	r3, r3
 8005268:	001a      	movs	r2, r3
 800526a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800526c:	189b      	adds	r3, r3, r2
 800526e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005270:	68bb      	ldr	r3, [r7, #8]
 8005272:	781b      	ldrb	r3, [r3, #0]
 8005274:	00da      	lsls	r2, r3, #3
 8005276:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005278:	18d3      	adds	r3, r2, r3
 800527a:	4ab1      	ldr	r2, [pc, #708]	; (8005540 <HAL_PCD_EP_DB_Transmit+0x6f4>)
 800527c:	4694      	mov	ip, r2
 800527e:	4463      	add	r3, ip
 8005280:	66bb      	str	r3, [r7, #104]	; 0x68
 8005282:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005284:	881b      	ldrh	r3, [r3, #0]
 8005286:	b29b      	uxth	r3, r3
 8005288:	4aae      	ldr	r2, [pc, #696]	; (8005544 <HAL_PCD_EP_DB_Transmit+0x6f8>)
 800528a:	4013      	ands	r3, r2
 800528c:	b29a      	uxth	r2, r3
 800528e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005290:	801a      	strh	r2, [r3, #0]
 8005292:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005294:	881b      	ldrh	r3, [r3, #0]
 8005296:	b29b      	uxth	r3, r3
 8005298:	4aab      	ldr	r2, [pc, #684]	; (8005548 <HAL_PCD_EP_DB_Transmit+0x6fc>)
 800529a:	4313      	orrs	r3, r2
 800529c:	b29a      	uxth	r2, r3
 800529e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80052a0:	801a      	strh	r2, [r3, #0]
 80052a2:	e01b      	b.n	80052dc <HAL_PCD_EP_DB_Transmit+0x490>
 80052a4:	68bb      	ldr	r3, [r7, #8]
 80052a6:	785b      	ldrb	r3, [r3, #1]
 80052a8:	2b01      	cmp	r3, #1
 80052aa:	d117      	bne.n	80052dc <HAL_PCD_EP_DB_Transmit+0x490>
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	677b      	str	r3, [r7, #116]	; 0x74
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	2250      	movs	r2, #80	; 0x50
 80052b8:	5a9b      	ldrh	r3, [r3, r2]
 80052ba:	b29b      	uxth	r3, r3
 80052bc:	001a      	movs	r2, r3
 80052be:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80052c0:	189b      	adds	r3, r3, r2
 80052c2:	677b      	str	r3, [r7, #116]	; 0x74
 80052c4:	68bb      	ldr	r3, [r7, #8]
 80052c6:	781b      	ldrb	r3, [r3, #0]
 80052c8:	00da      	lsls	r2, r3, #3
 80052ca:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80052cc:	18d3      	adds	r3, r2, r3
 80052ce:	4a9c      	ldr	r2, [pc, #624]	; (8005540 <HAL_PCD_EP_DB_Transmit+0x6f4>)
 80052d0:	4694      	mov	ip, r2
 80052d2:	4463      	add	r3, ip
 80052d4:	673b      	str	r3, [r7, #112]	; 0x70
 80052d6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80052d8:	2200      	movs	r2, #0
 80052da:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	67bb      	str	r3, [r7, #120]	; 0x78
 80052e2:	68bb      	ldr	r3, [r7, #8]
 80052e4:	785b      	ldrb	r3, [r3, #1]
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d130      	bne.n	800534c <HAL_PCD_EP_DB_Transmit+0x500>
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	2180      	movs	r1, #128	; 0x80
 80052f0:	187a      	adds	r2, r7, r1
 80052f2:	6013      	str	r3, [r2, #0]
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	2250      	movs	r2, #80	; 0x50
 80052fa:	5a9b      	ldrh	r3, [r3, r2]
 80052fc:	b29b      	uxth	r3, r3
 80052fe:	001a      	movs	r2, r3
 8005300:	187b      	adds	r3, r7, r1
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	189b      	adds	r3, r3, r2
 8005306:	187a      	adds	r2, r7, r1
 8005308:	6013      	str	r3, [r2, #0]
 800530a:	68bb      	ldr	r3, [r7, #8]
 800530c:	781b      	ldrb	r3, [r3, #0]
 800530e:	00da      	lsls	r2, r3, #3
 8005310:	187b      	adds	r3, r7, r1
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	18d3      	adds	r3, r2, r3
 8005316:	4a89      	ldr	r2, [pc, #548]	; (800553c <HAL_PCD_EP_DB_Transmit+0x6f0>)
 8005318:	4694      	mov	ip, r2
 800531a:	4463      	add	r3, ip
 800531c:	2184      	movs	r1, #132	; 0x84
 800531e:	187a      	adds	r2, r7, r1
 8005320:	6013      	str	r3, [r2, #0]
 8005322:	187b      	adds	r3, r7, r1
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	881b      	ldrh	r3, [r3, #0]
 8005328:	b29b      	uxth	r3, r3
 800532a:	4a86      	ldr	r2, [pc, #536]	; (8005544 <HAL_PCD_EP_DB_Transmit+0x6f8>)
 800532c:	4013      	ands	r3, r2
 800532e:	b29a      	uxth	r2, r3
 8005330:	187b      	adds	r3, r7, r1
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	801a      	strh	r2, [r3, #0]
 8005336:	187b      	adds	r3, r7, r1
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	881b      	ldrh	r3, [r3, #0]
 800533c:	b29b      	uxth	r3, r3
 800533e:	4a82      	ldr	r2, [pc, #520]	; (8005548 <HAL_PCD_EP_DB_Transmit+0x6fc>)
 8005340:	4313      	orrs	r3, r2
 8005342:	b29a      	uxth	r2, r3
 8005344:	187b      	adds	r3, r7, r1
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	801a      	strh	r2, [r3, #0]
 800534a:	e018      	b.n	800537e <HAL_PCD_EP_DB_Transmit+0x532>
 800534c:	68bb      	ldr	r3, [r7, #8]
 800534e:	785b      	ldrb	r3, [r3, #1]
 8005350:	2b01      	cmp	r3, #1
 8005352:	d114      	bne.n	800537e <HAL_PCD_EP_DB_Transmit+0x532>
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	2250      	movs	r2, #80	; 0x50
 800535a:	5a9b      	ldrh	r3, [r3, r2]
 800535c:	b29b      	uxth	r3, r3
 800535e:	001a      	movs	r2, r3
 8005360:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005362:	189b      	adds	r3, r3, r2
 8005364:	67bb      	str	r3, [r7, #120]	; 0x78
 8005366:	68bb      	ldr	r3, [r7, #8]
 8005368:	781b      	ldrb	r3, [r3, #0]
 800536a:	00da      	lsls	r2, r3, #3
 800536c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800536e:	18d3      	adds	r3, r2, r3
 8005370:	4a72      	ldr	r2, [pc, #456]	; (800553c <HAL_PCD_EP_DB_Transmit+0x6f0>)
 8005372:	4694      	mov	ip, r2
 8005374:	4463      	add	r3, ip
 8005376:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005378:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800537a:	2200      	movs	r2, #0
 800537c:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800537e:	68bb      	ldr	r3, [r7, #8]
 8005380:	781a      	ldrb	r2, [r3, #0]
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	0011      	movs	r1, r2
 8005386:	0018      	movs	r0, r3
 8005388:	f007 f932 	bl	800c5f0 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800538c:	1dbb      	adds	r3, r7, #6
 800538e:	881a      	ldrh	r2, [r3, #0]
 8005390:	2380      	movs	r3, #128	; 0x80
 8005392:	01db      	lsls	r3, r3, #7
 8005394:	4013      	ands	r3, r2
 8005396:	d000      	beq.n	800539a <HAL_PCD_EP_DB_Transmit+0x54e>
 8005398:	e100      	b.n	800559c <HAL_PCD_EP_DB_Transmit+0x750>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	001a      	movs	r2, r3
 80053a0:	68bb      	ldr	r3, [r7, #8]
 80053a2:	781b      	ldrb	r3, [r3, #0]
 80053a4:	009b      	lsls	r3, r3, #2
 80053a6:	18d3      	adds	r3, r2, r3
 80053a8:	881b      	ldrh	r3, [r3, #0]
 80053aa:	b29a      	uxth	r2, r3
 80053ac:	2046      	movs	r0, #70	; 0x46
 80053ae:	183b      	adds	r3, r7, r0
 80053b0:	4966      	ldr	r1, [pc, #408]	; (800554c <HAL_PCD_EP_DB_Transmit+0x700>)
 80053b2:	400a      	ands	r2, r1
 80053b4:	801a      	strh	r2, [r3, #0]
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	001a      	movs	r2, r3
 80053bc:	68bb      	ldr	r3, [r7, #8]
 80053be:	781b      	ldrb	r3, [r3, #0]
 80053c0:	009b      	lsls	r3, r3, #2
 80053c2:	18d3      	adds	r3, r2, r3
 80053c4:	183a      	adds	r2, r7, r0
 80053c6:	8812      	ldrh	r2, [r2, #0]
 80053c8:	4961      	ldr	r1, [pc, #388]	; (8005550 <HAL_PCD_EP_DB_Transmit+0x704>)
 80053ca:	430a      	orrs	r2, r1
 80053cc:	b292      	uxth	r2, r2
 80053ce:	801a      	strh	r2, [r3, #0]
 80053d0:	e0e4      	b.n	800559c <HAL_PCD_EP_DB_Transmit+0x750>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80053d2:	1dbb      	adds	r3, r7, #6
 80053d4:	881a      	ldrh	r2, [r3, #0]
 80053d6:	2380      	movs	r3, #128	; 0x80
 80053d8:	01db      	lsls	r3, r3, #7
 80053da:	4013      	ands	r3, r2
 80053dc:	d11a      	bne.n	8005414 <HAL_PCD_EP_DB_Transmit+0x5c8>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	001a      	movs	r2, r3
 80053e4:	68bb      	ldr	r3, [r7, #8]
 80053e6:	781b      	ldrb	r3, [r3, #0]
 80053e8:	009b      	lsls	r3, r3, #2
 80053ea:	18d3      	adds	r3, r2, r3
 80053ec:	881b      	ldrh	r3, [r3, #0]
 80053ee:	b29a      	uxth	r2, r3
 80053f0:	204c      	movs	r0, #76	; 0x4c
 80053f2:	183b      	adds	r3, r7, r0
 80053f4:	4955      	ldr	r1, [pc, #340]	; (800554c <HAL_PCD_EP_DB_Transmit+0x700>)
 80053f6:	400a      	ands	r2, r1
 80053f8:	801a      	strh	r2, [r3, #0]
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	001a      	movs	r2, r3
 8005400:	68bb      	ldr	r3, [r7, #8]
 8005402:	781b      	ldrb	r3, [r3, #0]
 8005404:	009b      	lsls	r3, r3, #2
 8005406:	18d3      	adds	r3, r2, r3
 8005408:	183a      	adds	r2, r7, r0
 800540a:	8812      	ldrh	r2, [r2, #0]
 800540c:	4950      	ldr	r1, [pc, #320]	; (8005550 <HAL_PCD_EP_DB_Transmit+0x704>)
 800540e:	430a      	orrs	r2, r1
 8005410:	b292      	uxth	r2, r2
 8005412:	801a      	strh	r2, [r3, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8005414:	68bb      	ldr	r3, [r7, #8]
 8005416:	2224      	movs	r2, #36	; 0x24
 8005418:	5c9b      	ldrb	r3, [r3, r2]
 800541a:	2b01      	cmp	r3, #1
 800541c:	d000      	beq.n	8005420 <HAL_PCD_EP_DB_Transmit+0x5d4>
 800541e:	e0bd      	b.n	800559c <HAL_PCD_EP_DB_Transmit+0x750>
      {
        ep->xfer_buff += TxByteNbre;
 8005420:	68bb      	ldr	r3, [r7, #8]
 8005422:	695a      	ldr	r2, [r3, #20]
 8005424:	214e      	movs	r1, #78	; 0x4e
 8005426:	187b      	adds	r3, r7, r1
 8005428:	881b      	ldrh	r3, [r3, #0]
 800542a:	18d2      	adds	r2, r2, r3
 800542c:	68bb      	ldr	r3, [r7, #8]
 800542e:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8005430:	68bb      	ldr	r3, [r7, #8]
 8005432:	69da      	ldr	r2, [r3, #28]
 8005434:	187b      	adds	r3, r7, r1
 8005436:	881b      	ldrh	r3, [r3, #0]
 8005438:	18d2      	adds	r2, r2, r3
 800543a:	68bb      	ldr	r3, [r7, #8]
 800543c:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800543e:	68bb      	ldr	r3, [r7, #8]
 8005440:	6a1a      	ldr	r2, [r3, #32]
 8005442:	68bb      	ldr	r3, [r7, #8]
 8005444:	691b      	ldr	r3, [r3, #16]
 8005446:	429a      	cmp	r2, r3
 8005448:	d309      	bcc.n	800545e <HAL_PCD_EP_DB_Transmit+0x612>
        {
          len = ep->maxpacket;
 800544a:	68bb      	ldr	r3, [r7, #8]
 800544c:	691b      	ldr	r3, [r3, #16]
 800544e:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8005450:	68bb      	ldr	r3, [r7, #8]
 8005452:	6a1a      	ldr	r2, [r3, #32]
 8005454:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005456:	1ad2      	subs	r2, r2, r3
 8005458:	68bb      	ldr	r3, [r7, #8]
 800545a:	621a      	str	r2, [r3, #32]
 800545c:	e016      	b.n	800548c <HAL_PCD_EP_DB_Transmit+0x640>
        }
        else if (ep->xfer_len_db == 0U)
 800545e:	68bb      	ldr	r3, [r7, #8]
 8005460:	6a1b      	ldr	r3, [r3, #32]
 8005462:	2b00      	cmp	r3, #0
 8005464:	d108      	bne.n	8005478 <HAL_PCD_EP_DB_Transmit+0x62c>
        {
          len = TxByteNbre;
 8005466:	234e      	movs	r3, #78	; 0x4e
 8005468:	18fb      	adds	r3, r7, r3
 800546a:	881b      	ldrh	r3, [r3, #0]
 800546c:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 800546e:	68bb      	ldr	r3, [r7, #8]
 8005470:	2224      	movs	r2, #36	; 0x24
 8005472:	2100      	movs	r1, #0
 8005474:	5499      	strb	r1, [r3, r2]
 8005476:	e009      	b.n	800548c <HAL_PCD_EP_DB_Transmit+0x640>
        }
        else
        {
          len = ep->xfer_len_db;
 8005478:	68bb      	ldr	r3, [r7, #8]
 800547a:	6a1b      	ldr	r3, [r3, #32]
 800547c:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 800547e:	68bb      	ldr	r3, [r7, #8]
 8005480:	2200      	movs	r2, #0
 8005482:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8005484:	68bb      	ldr	r3, [r7, #8]
 8005486:	2224      	movs	r2, #36	; 0x24
 8005488:	2100      	movs	r1, #0
 800548a:	5499      	strb	r1, [r3, r2]
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	667b      	str	r3, [r7, #100]	; 0x64
 8005492:	68bb      	ldr	r3, [r7, #8]
 8005494:	785b      	ldrb	r3, [r3, #1]
 8005496:	2b00      	cmp	r3, #0
 8005498:	d15c      	bne.n	8005554 <HAL_PCD_EP_DB_Transmit+0x708>
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	65fb      	str	r3, [r7, #92]	; 0x5c
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	2250      	movs	r2, #80	; 0x50
 80054a6:	5a9b      	ldrh	r3, [r3, r2]
 80054a8:	b29b      	uxth	r3, r3
 80054aa:	001a      	movs	r2, r3
 80054ac:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80054ae:	189b      	adds	r3, r3, r2
 80054b0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80054b2:	68bb      	ldr	r3, [r7, #8]
 80054b4:	781b      	ldrb	r3, [r3, #0]
 80054b6:	00da      	lsls	r2, r3, #3
 80054b8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80054ba:	18d3      	adds	r3, r2, r3
 80054bc:	4a1f      	ldr	r2, [pc, #124]	; (800553c <HAL_PCD_EP_DB_Transmit+0x6f0>)
 80054be:	4694      	mov	ip, r2
 80054c0:	4463      	add	r3, ip
 80054c2:	65bb      	str	r3, [r7, #88]	; 0x58
 80054c4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d110      	bne.n	80054ec <HAL_PCD_EP_DB_Transmit+0x6a0>
 80054ca:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80054cc:	881b      	ldrh	r3, [r3, #0]
 80054ce:	b29b      	uxth	r3, r3
 80054d0:	4a1c      	ldr	r2, [pc, #112]	; (8005544 <HAL_PCD_EP_DB_Transmit+0x6f8>)
 80054d2:	4013      	ands	r3, r2
 80054d4:	b29a      	uxth	r2, r3
 80054d6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80054d8:	801a      	strh	r2, [r3, #0]
 80054da:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80054dc:	881b      	ldrh	r3, [r3, #0]
 80054de:	b29b      	uxth	r3, r3
 80054e0:	4a19      	ldr	r2, [pc, #100]	; (8005548 <HAL_PCD_EP_DB_Transmit+0x6fc>)
 80054e2:	4313      	orrs	r3, r2
 80054e4:	b29a      	uxth	r2, r3
 80054e6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80054e8:	801a      	strh	r2, [r3, #0]
 80054ea:	e04d      	b.n	8005588 <HAL_PCD_EP_DB_Transmit+0x73c>
 80054ec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80054ee:	2b3e      	cmp	r3, #62	; 0x3e
 80054f0:	d810      	bhi.n	8005514 <HAL_PCD_EP_DB_Transmit+0x6c8>
 80054f2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80054f4:	085b      	lsrs	r3, r3, #1
 80054f6:	657b      	str	r3, [r7, #84]	; 0x54
 80054f8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80054fa:	2201      	movs	r2, #1
 80054fc:	4013      	ands	r3, r2
 80054fe:	d002      	beq.n	8005506 <HAL_PCD_EP_DB_Transmit+0x6ba>
 8005500:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005502:	3301      	adds	r3, #1
 8005504:	657b      	str	r3, [r7, #84]	; 0x54
 8005506:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005508:	b29b      	uxth	r3, r3
 800550a:	029b      	lsls	r3, r3, #10
 800550c:	b29a      	uxth	r2, r3
 800550e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005510:	801a      	strh	r2, [r3, #0]
 8005512:	e039      	b.n	8005588 <HAL_PCD_EP_DB_Transmit+0x73c>
 8005514:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005516:	095b      	lsrs	r3, r3, #5
 8005518:	657b      	str	r3, [r7, #84]	; 0x54
 800551a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800551c:	221f      	movs	r2, #31
 800551e:	4013      	ands	r3, r2
 8005520:	d102      	bne.n	8005528 <HAL_PCD_EP_DB_Transmit+0x6dc>
 8005522:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005524:	3b01      	subs	r3, #1
 8005526:	657b      	str	r3, [r7, #84]	; 0x54
 8005528:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800552a:	b29b      	uxth	r3, r3
 800552c:	029b      	lsls	r3, r3, #10
 800552e:	b29b      	uxth	r3, r3
 8005530:	4a05      	ldr	r2, [pc, #20]	; (8005548 <HAL_PCD_EP_DB_Transmit+0x6fc>)
 8005532:	4313      	orrs	r3, r2
 8005534:	b29a      	uxth	r2, r3
 8005536:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005538:	801a      	strh	r2, [r3, #0]
 800553a:	e025      	b.n	8005588 <HAL_PCD_EP_DB_Transmit+0x73c>
 800553c:	00000406 	.word	0x00000406
 8005540:	00000402 	.word	0x00000402
 8005544:	ffff83ff 	.word	0xffff83ff
 8005548:	ffff8000 	.word	0xffff8000
 800554c:	ffff8f8f 	.word	0xffff8f8f
 8005550:	ffffc080 	.word	0xffffc080
 8005554:	68bb      	ldr	r3, [r7, #8]
 8005556:	785b      	ldrb	r3, [r3, #1]
 8005558:	2b01      	cmp	r3, #1
 800555a:	d115      	bne.n	8005588 <HAL_PCD_EP_DB_Transmit+0x73c>
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	2250      	movs	r2, #80	; 0x50
 8005562:	5a9b      	ldrh	r3, [r3, r2]
 8005564:	b29b      	uxth	r3, r3
 8005566:	001a      	movs	r2, r3
 8005568:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800556a:	189b      	adds	r3, r3, r2
 800556c:	667b      	str	r3, [r7, #100]	; 0x64
 800556e:	68bb      	ldr	r3, [r7, #8]
 8005570:	781b      	ldrb	r3, [r3, #0]
 8005572:	00da      	lsls	r2, r3, #3
 8005574:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005576:	18d3      	adds	r3, r2, r3
 8005578:	4a1e      	ldr	r2, [pc, #120]	; (80055f4 <HAL_PCD_EP_DB_Transmit+0x7a8>)
 800557a:	4694      	mov	ip, r2
 800557c:	4463      	add	r3, ip
 800557e:	663b      	str	r3, [r7, #96]	; 0x60
 8005580:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005582:	b29a      	uxth	r2, r3
 8005584:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005586:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	6818      	ldr	r0, [r3, #0]
 800558c:	68bb      	ldr	r3, [r7, #8]
 800558e:	6959      	ldr	r1, [r3, #20]
 8005590:	68bb      	ldr	r3, [r7, #8]
 8005592:	895a      	ldrh	r2, [r3, #10]
 8005594:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005596:	b29b      	uxth	r3, r3
 8005598:	f004 ffe2 	bl	800a560 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	001a      	movs	r2, r3
 80055a2:	68bb      	ldr	r3, [r7, #8]
 80055a4:	781b      	ldrb	r3, [r3, #0]
 80055a6:	009b      	lsls	r3, r3, #2
 80055a8:	18d3      	adds	r3, r2, r3
 80055aa:	881b      	ldrh	r3, [r3, #0]
 80055ac:	b29a      	uxth	r2, r3
 80055ae:	2010      	movs	r0, #16
 80055b0:	183b      	adds	r3, r7, r0
 80055b2:	4911      	ldr	r1, [pc, #68]	; (80055f8 <HAL_PCD_EP_DB_Transmit+0x7ac>)
 80055b4:	400a      	ands	r2, r1
 80055b6:	801a      	strh	r2, [r3, #0]
 80055b8:	183b      	adds	r3, r7, r0
 80055ba:	183a      	adds	r2, r7, r0
 80055bc:	8812      	ldrh	r2, [r2, #0]
 80055be:	2110      	movs	r1, #16
 80055c0:	404a      	eors	r2, r1
 80055c2:	801a      	strh	r2, [r3, #0]
 80055c4:	183b      	adds	r3, r7, r0
 80055c6:	183a      	adds	r2, r7, r0
 80055c8:	8812      	ldrh	r2, [r2, #0]
 80055ca:	2120      	movs	r1, #32
 80055cc:	404a      	eors	r2, r1
 80055ce:	801a      	strh	r2, [r3, #0]
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	001a      	movs	r2, r3
 80055d6:	68bb      	ldr	r3, [r7, #8]
 80055d8:	781b      	ldrb	r3, [r3, #0]
 80055da:	009b      	lsls	r3, r3, #2
 80055dc:	18d3      	adds	r3, r2, r3
 80055de:	183a      	adds	r2, r7, r0
 80055e0:	8812      	ldrh	r2, [r2, #0]
 80055e2:	4906      	ldr	r1, [pc, #24]	; (80055fc <HAL_PCD_EP_DB_Transmit+0x7b0>)
 80055e4:	430a      	orrs	r2, r1
 80055e6:	b292      	uxth	r2, r2
 80055e8:	801a      	strh	r2, [r3, #0]

  return HAL_OK;
 80055ea:	2300      	movs	r3, #0
}
 80055ec:	0018      	movs	r0, r3
 80055ee:	46bd      	mov	sp, r7
 80055f0:	b022      	add	sp, #136	; 0x88
 80055f2:	bd80      	pop	{r7, pc}
 80055f4:	00000406 	.word	0x00000406
 80055f8:	ffff8fbf 	.word	0xffff8fbf
 80055fc:	ffff8080 	.word	0xffff8080

08005600 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8005600:	b590      	push	{r4, r7, lr}
 8005602:	b087      	sub	sp, #28
 8005604:	af00      	add	r7, sp, #0
 8005606:	60f8      	str	r0, [r7, #12]
 8005608:	0008      	movs	r0, r1
 800560a:	0011      	movs	r1, r2
 800560c:	607b      	str	r3, [r7, #4]
 800560e:	240a      	movs	r4, #10
 8005610:	193b      	adds	r3, r7, r4
 8005612:	1c02      	adds	r2, r0, #0
 8005614:	801a      	strh	r2, [r3, #0]
 8005616:	2308      	movs	r3, #8
 8005618:	18fb      	adds	r3, r7, r3
 800561a:	1c0a      	adds	r2, r1, #0
 800561c:	801a      	strh	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 800561e:	0021      	movs	r1, r4
 8005620:	187b      	adds	r3, r7, r1
 8005622:	881b      	ldrh	r3, [r3, #0]
 8005624:	2280      	movs	r2, #128	; 0x80
 8005626:	4013      	ands	r3, r2
 8005628:	b29b      	uxth	r3, r3
 800562a:	2b00      	cmp	r3, #0
 800562c:	d00c      	beq.n	8005648 <HAL_PCDEx_PMAConfig+0x48>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800562e:	187b      	adds	r3, r7, r1
 8005630:	881b      	ldrh	r3, [r3, #0]
 8005632:	2207      	movs	r2, #7
 8005634:	4013      	ands	r3, r2
 8005636:	1c5a      	adds	r2, r3, #1
 8005638:	0013      	movs	r3, r2
 800563a:	009b      	lsls	r3, r3, #2
 800563c:	189b      	adds	r3, r3, r2
 800563e:	00db      	lsls	r3, r3, #3
 8005640:	68fa      	ldr	r2, [r7, #12]
 8005642:	18d3      	adds	r3, r2, r3
 8005644:	617b      	str	r3, [r7, #20]
 8005646:	e00b      	b.n	8005660 <HAL_PCDEx_PMAConfig+0x60>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8005648:	230a      	movs	r3, #10
 800564a:	18fb      	adds	r3, r7, r3
 800564c:	881a      	ldrh	r2, [r3, #0]
 800564e:	0013      	movs	r3, r2
 8005650:	009b      	lsls	r3, r3, #2
 8005652:	189b      	adds	r3, r3, r2
 8005654:	00db      	lsls	r3, r3, #3
 8005656:	3369      	adds	r3, #105	; 0x69
 8005658:	33ff      	adds	r3, #255	; 0xff
 800565a:	68fa      	ldr	r2, [r7, #12]
 800565c:	18d3      	adds	r3, r2, r3
 800565e:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8005660:	2308      	movs	r3, #8
 8005662:	18fb      	adds	r3, r7, r3
 8005664:	881b      	ldrh	r3, [r3, #0]
 8005666:	2b00      	cmp	r3, #0
 8005668:	d107      	bne.n	800567a <HAL_PCDEx_PMAConfig+0x7a>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 800566a:	697b      	ldr	r3, [r7, #20]
 800566c:	2200      	movs	r2, #0
 800566e:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	b29a      	uxth	r2, r3
 8005674:	697b      	ldr	r3, [r7, #20]
 8005676:	80da      	strh	r2, [r3, #6]
 8005678:	e00b      	b.n	8005692 <HAL_PCDEx_PMAConfig+0x92>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 800567a:	697b      	ldr	r3, [r7, #20]
 800567c:	2201      	movs	r2, #1
 800567e:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	b29a      	uxth	r2, r3
 8005684:	697b      	ldr	r3, [r7, #20]
 8005686:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	0c1b      	lsrs	r3, r3, #16
 800568c:	b29a      	uxth	r2, r3
 800568e:	697b      	ldr	r3, [r7, #20]
 8005690:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8005692:	2300      	movs	r3, #0
}
 8005694:	0018      	movs	r0, r3
 8005696:	46bd      	mov	sp, r7
 8005698:	b007      	add	sp, #28
 800569a:	bd90      	pop	{r4, r7, pc}

0800569c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800569c:	b580      	push	{r7, lr}
 800569e:	b084      	sub	sp, #16
 80056a0:	af00      	add	r7, sp, #0
 80056a2:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 80056aa:	687a      	ldr	r2, [r7, #4]
 80056ac:	23ba      	movs	r3, #186	; 0xba
 80056ae:	009b      	lsls	r3, r3, #2
 80056b0:	2101      	movs	r1, #1
 80056b2:	50d1      	str	r1, [r2, r3]
  hpcd->LPM_State = LPM_L0;
 80056b4:	687a      	ldr	r2, [r7, #4]
 80056b6:	23b8      	movs	r3, #184	; 0xb8
 80056b8:	009b      	lsls	r3, r3, #2
 80056ba:	2100      	movs	r1, #0
 80056bc:	54d1      	strb	r1, [r2, r3]

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	2254      	movs	r2, #84	; 0x54
 80056c2:	5a9b      	ldrh	r3, [r3, r2]
 80056c4:	b29b      	uxth	r3, r3
 80056c6:	2201      	movs	r2, #1
 80056c8:	4313      	orrs	r3, r2
 80056ca:	b299      	uxth	r1, r3
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	2254      	movs	r2, #84	; 0x54
 80056d0:	5299      	strh	r1, [r3, r2]
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	2254      	movs	r2, #84	; 0x54
 80056d6:	5a9b      	ldrh	r3, [r3, r2]
 80056d8:	b29b      	uxth	r3, r3
 80056da:	2202      	movs	r2, #2
 80056dc:	4313      	orrs	r3, r2
 80056de:	b299      	uxth	r1, r3
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	2254      	movs	r2, #84	; 0x54
 80056e4:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 80056e6:	2300      	movs	r3, #0
}
 80056e8:	0018      	movs	r0, r3
 80056ea:	46bd      	mov	sp, r7
 80056ec:	b004      	add	sp, #16
 80056ee:	bd80      	pop	{r7, pc}

080056f0 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80056f0:	b580      	push	{r7, lr}
 80056f2:	b082      	sub	sp, #8
 80056f4:	af00      	add	r7, sp, #0
 80056f6:	6078      	str	r0, [r7, #4]
 80056f8:	000a      	movs	r2, r1
 80056fa:	1cfb      	adds	r3, r7, #3
 80056fc:	701a      	strb	r2, [r3, #0]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80056fe:	46c0      	nop			; (mov r8, r8)
 8005700:	46bd      	mov	sp, r7
 8005702:	b002      	add	sp, #8
 8005704:	bd80      	pop	{r7, pc}
	...

08005708 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005708:	b580      	push	{r7, lr}
 800570a:	b088      	sub	sp, #32
 800570c:	af00      	add	r7, sp, #0
 800570e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	2b00      	cmp	r3, #0
 8005714:	d102      	bne.n	800571c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8005716:	2301      	movs	r3, #1
 8005718:	f000 fb76 	bl	8005e08 <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	2201      	movs	r2, #1
 8005722:	4013      	ands	r3, r2
 8005724:	d100      	bne.n	8005728 <HAL_RCC_OscConfig+0x20>
 8005726:	e08e      	b.n	8005846 <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8005728:	4bc5      	ldr	r3, [pc, #788]	; (8005a40 <HAL_RCC_OscConfig+0x338>)
 800572a:	685b      	ldr	r3, [r3, #4]
 800572c:	220c      	movs	r2, #12
 800572e:	4013      	ands	r3, r2
 8005730:	2b04      	cmp	r3, #4
 8005732:	d00e      	beq.n	8005752 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8005734:	4bc2      	ldr	r3, [pc, #776]	; (8005a40 <HAL_RCC_OscConfig+0x338>)
 8005736:	685b      	ldr	r3, [r3, #4]
 8005738:	220c      	movs	r2, #12
 800573a:	4013      	ands	r3, r2
 800573c:	2b08      	cmp	r3, #8
 800573e:	d117      	bne.n	8005770 <HAL_RCC_OscConfig+0x68>
 8005740:	4bbf      	ldr	r3, [pc, #764]	; (8005a40 <HAL_RCC_OscConfig+0x338>)
 8005742:	685a      	ldr	r2, [r3, #4]
 8005744:	23c0      	movs	r3, #192	; 0xc0
 8005746:	025b      	lsls	r3, r3, #9
 8005748:	401a      	ands	r2, r3
 800574a:	2380      	movs	r3, #128	; 0x80
 800574c:	025b      	lsls	r3, r3, #9
 800574e:	429a      	cmp	r2, r3
 8005750:	d10e      	bne.n	8005770 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005752:	4bbb      	ldr	r3, [pc, #748]	; (8005a40 <HAL_RCC_OscConfig+0x338>)
 8005754:	681a      	ldr	r2, [r3, #0]
 8005756:	2380      	movs	r3, #128	; 0x80
 8005758:	029b      	lsls	r3, r3, #10
 800575a:	4013      	ands	r3, r2
 800575c:	d100      	bne.n	8005760 <HAL_RCC_OscConfig+0x58>
 800575e:	e071      	b.n	8005844 <HAL_RCC_OscConfig+0x13c>
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	685b      	ldr	r3, [r3, #4]
 8005764:	2b00      	cmp	r3, #0
 8005766:	d000      	beq.n	800576a <HAL_RCC_OscConfig+0x62>
 8005768:	e06c      	b.n	8005844 <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 800576a:	2301      	movs	r3, #1
 800576c:	f000 fb4c 	bl	8005e08 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	685b      	ldr	r3, [r3, #4]
 8005774:	2b01      	cmp	r3, #1
 8005776:	d107      	bne.n	8005788 <HAL_RCC_OscConfig+0x80>
 8005778:	4bb1      	ldr	r3, [pc, #708]	; (8005a40 <HAL_RCC_OscConfig+0x338>)
 800577a:	681a      	ldr	r2, [r3, #0]
 800577c:	4bb0      	ldr	r3, [pc, #704]	; (8005a40 <HAL_RCC_OscConfig+0x338>)
 800577e:	2180      	movs	r1, #128	; 0x80
 8005780:	0249      	lsls	r1, r1, #9
 8005782:	430a      	orrs	r2, r1
 8005784:	601a      	str	r2, [r3, #0]
 8005786:	e02f      	b.n	80057e8 <HAL_RCC_OscConfig+0xe0>
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	685b      	ldr	r3, [r3, #4]
 800578c:	2b00      	cmp	r3, #0
 800578e:	d10c      	bne.n	80057aa <HAL_RCC_OscConfig+0xa2>
 8005790:	4bab      	ldr	r3, [pc, #684]	; (8005a40 <HAL_RCC_OscConfig+0x338>)
 8005792:	681a      	ldr	r2, [r3, #0]
 8005794:	4baa      	ldr	r3, [pc, #680]	; (8005a40 <HAL_RCC_OscConfig+0x338>)
 8005796:	49ab      	ldr	r1, [pc, #684]	; (8005a44 <HAL_RCC_OscConfig+0x33c>)
 8005798:	400a      	ands	r2, r1
 800579a:	601a      	str	r2, [r3, #0]
 800579c:	4ba8      	ldr	r3, [pc, #672]	; (8005a40 <HAL_RCC_OscConfig+0x338>)
 800579e:	681a      	ldr	r2, [r3, #0]
 80057a0:	4ba7      	ldr	r3, [pc, #668]	; (8005a40 <HAL_RCC_OscConfig+0x338>)
 80057a2:	49a9      	ldr	r1, [pc, #676]	; (8005a48 <HAL_RCC_OscConfig+0x340>)
 80057a4:	400a      	ands	r2, r1
 80057a6:	601a      	str	r2, [r3, #0]
 80057a8:	e01e      	b.n	80057e8 <HAL_RCC_OscConfig+0xe0>
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	685b      	ldr	r3, [r3, #4]
 80057ae:	2b05      	cmp	r3, #5
 80057b0:	d10e      	bne.n	80057d0 <HAL_RCC_OscConfig+0xc8>
 80057b2:	4ba3      	ldr	r3, [pc, #652]	; (8005a40 <HAL_RCC_OscConfig+0x338>)
 80057b4:	681a      	ldr	r2, [r3, #0]
 80057b6:	4ba2      	ldr	r3, [pc, #648]	; (8005a40 <HAL_RCC_OscConfig+0x338>)
 80057b8:	2180      	movs	r1, #128	; 0x80
 80057ba:	02c9      	lsls	r1, r1, #11
 80057bc:	430a      	orrs	r2, r1
 80057be:	601a      	str	r2, [r3, #0]
 80057c0:	4b9f      	ldr	r3, [pc, #636]	; (8005a40 <HAL_RCC_OscConfig+0x338>)
 80057c2:	681a      	ldr	r2, [r3, #0]
 80057c4:	4b9e      	ldr	r3, [pc, #632]	; (8005a40 <HAL_RCC_OscConfig+0x338>)
 80057c6:	2180      	movs	r1, #128	; 0x80
 80057c8:	0249      	lsls	r1, r1, #9
 80057ca:	430a      	orrs	r2, r1
 80057cc:	601a      	str	r2, [r3, #0]
 80057ce:	e00b      	b.n	80057e8 <HAL_RCC_OscConfig+0xe0>
 80057d0:	4b9b      	ldr	r3, [pc, #620]	; (8005a40 <HAL_RCC_OscConfig+0x338>)
 80057d2:	681a      	ldr	r2, [r3, #0]
 80057d4:	4b9a      	ldr	r3, [pc, #616]	; (8005a40 <HAL_RCC_OscConfig+0x338>)
 80057d6:	499b      	ldr	r1, [pc, #620]	; (8005a44 <HAL_RCC_OscConfig+0x33c>)
 80057d8:	400a      	ands	r2, r1
 80057da:	601a      	str	r2, [r3, #0]
 80057dc:	4b98      	ldr	r3, [pc, #608]	; (8005a40 <HAL_RCC_OscConfig+0x338>)
 80057de:	681a      	ldr	r2, [r3, #0]
 80057e0:	4b97      	ldr	r3, [pc, #604]	; (8005a40 <HAL_RCC_OscConfig+0x338>)
 80057e2:	4999      	ldr	r1, [pc, #612]	; (8005a48 <HAL_RCC_OscConfig+0x340>)
 80057e4:	400a      	ands	r2, r1
 80057e6:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	685b      	ldr	r3, [r3, #4]
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d014      	beq.n	800581a <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80057f0:	f7fd f884 	bl	80028fc <HAL_GetTick>
 80057f4:	0003      	movs	r3, r0
 80057f6:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80057f8:	e008      	b.n	800580c <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80057fa:	f7fd f87f 	bl	80028fc <HAL_GetTick>
 80057fe:	0002      	movs	r2, r0
 8005800:	69bb      	ldr	r3, [r7, #24]
 8005802:	1ad3      	subs	r3, r2, r3
 8005804:	2b64      	cmp	r3, #100	; 0x64
 8005806:	d901      	bls.n	800580c <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 8005808:	2303      	movs	r3, #3
 800580a:	e2fd      	b.n	8005e08 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800580c:	4b8c      	ldr	r3, [pc, #560]	; (8005a40 <HAL_RCC_OscConfig+0x338>)
 800580e:	681a      	ldr	r2, [r3, #0]
 8005810:	2380      	movs	r3, #128	; 0x80
 8005812:	029b      	lsls	r3, r3, #10
 8005814:	4013      	ands	r3, r2
 8005816:	d0f0      	beq.n	80057fa <HAL_RCC_OscConfig+0xf2>
 8005818:	e015      	b.n	8005846 <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800581a:	f7fd f86f 	bl	80028fc <HAL_GetTick>
 800581e:	0003      	movs	r3, r0
 8005820:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005822:	e008      	b.n	8005836 <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005824:	f7fd f86a 	bl	80028fc <HAL_GetTick>
 8005828:	0002      	movs	r2, r0
 800582a:	69bb      	ldr	r3, [r7, #24]
 800582c:	1ad3      	subs	r3, r2, r3
 800582e:	2b64      	cmp	r3, #100	; 0x64
 8005830:	d901      	bls.n	8005836 <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 8005832:	2303      	movs	r3, #3
 8005834:	e2e8      	b.n	8005e08 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005836:	4b82      	ldr	r3, [pc, #520]	; (8005a40 <HAL_RCC_OscConfig+0x338>)
 8005838:	681a      	ldr	r2, [r3, #0]
 800583a:	2380      	movs	r3, #128	; 0x80
 800583c:	029b      	lsls	r3, r3, #10
 800583e:	4013      	ands	r3, r2
 8005840:	d1f0      	bne.n	8005824 <HAL_RCC_OscConfig+0x11c>
 8005842:	e000      	b.n	8005846 <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005844:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	2202      	movs	r2, #2
 800584c:	4013      	ands	r3, r2
 800584e:	d100      	bne.n	8005852 <HAL_RCC_OscConfig+0x14a>
 8005850:	e06c      	b.n	800592c <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8005852:	4b7b      	ldr	r3, [pc, #492]	; (8005a40 <HAL_RCC_OscConfig+0x338>)
 8005854:	685b      	ldr	r3, [r3, #4]
 8005856:	220c      	movs	r2, #12
 8005858:	4013      	ands	r3, r2
 800585a:	d00e      	beq.n	800587a <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800585c:	4b78      	ldr	r3, [pc, #480]	; (8005a40 <HAL_RCC_OscConfig+0x338>)
 800585e:	685b      	ldr	r3, [r3, #4]
 8005860:	220c      	movs	r2, #12
 8005862:	4013      	ands	r3, r2
 8005864:	2b08      	cmp	r3, #8
 8005866:	d11f      	bne.n	80058a8 <HAL_RCC_OscConfig+0x1a0>
 8005868:	4b75      	ldr	r3, [pc, #468]	; (8005a40 <HAL_RCC_OscConfig+0x338>)
 800586a:	685a      	ldr	r2, [r3, #4]
 800586c:	23c0      	movs	r3, #192	; 0xc0
 800586e:	025b      	lsls	r3, r3, #9
 8005870:	401a      	ands	r2, r3
 8005872:	2380      	movs	r3, #128	; 0x80
 8005874:	021b      	lsls	r3, r3, #8
 8005876:	429a      	cmp	r2, r3
 8005878:	d116      	bne.n	80058a8 <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800587a:	4b71      	ldr	r3, [pc, #452]	; (8005a40 <HAL_RCC_OscConfig+0x338>)
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	2202      	movs	r2, #2
 8005880:	4013      	ands	r3, r2
 8005882:	d005      	beq.n	8005890 <HAL_RCC_OscConfig+0x188>
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	68db      	ldr	r3, [r3, #12]
 8005888:	2b01      	cmp	r3, #1
 800588a:	d001      	beq.n	8005890 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 800588c:	2301      	movs	r3, #1
 800588e:	e2bb      	b.n	8005e08 <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005890:	4b6b      	ldr	r3, [pc, #428]	; (8005a40 <HAL_RCC_OscConfig+0x338>)
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	22f8      	movs	r2, #248	; 0xf8
 8005896:	4393      	bics	r3, r2
 8005898:	0019      	movs	r1, r3
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	691b      	ldr	r3, [r3, #16]
 800589e:	00da      	lsls	r2, r3, #3
 80058a0:	4b67      	ldr	r3, [pc, #412]	; (8005a40 <HAL_RCC_OscConfig+0x338>)
 80058a2:	430a      	orrs	r2, r1
 80058a4:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80058a6:	e041      	b.n	800592c <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	68db      	ldr	r3, [r3, #12]
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d024      	beq.n	80058fa <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80058b0:	4b63      	ldr	r3, [pc, #396]	; (8005a40 <HAL_RCC_OscConfig+0x338>)
 80058b2:	681a      	ldr	r2, [r3, #0]
 80058b4:	4b62      	ldr	r3, [pc, #392]	; (8005a40 <HAL_RCC_OscConfig+0x338>)
 80058b6:	2101      	movs	r1, #1
 80058b8:	430a      	orrs	r2, r1
 80058ba:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80058bc:	f7fd f81e 	bl	80028fc <HAL_GetTick>
 80058c0:	0003      	movs	r3, r0
 80058c2:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80058c4:	e008      	b.n	80058d8 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80058c6:	f7fd f819 	bl	80028fc <HAL_GetTick>
 80058ca:	0002      	movs	r2, r0
 80058cc:	69bb      	ldr	r3, [r7, #24]
 80058ce:	1ad3      	subs	r3, r2, r3
 80058d0:	2b02      	cmp	r3, #2
 80058d2:	d901      	bls.n	80058d8 <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80058d4:	2303      	movs	r3, #3
 80058d6:	e297      	b.n	8005e08 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80058d8:	4b59      	ldr	r3, [pc, #356]	; (8005a40 <HAL_RCC_OscConfig+0x338>)
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	2202      	movs	r2, #2
 80058de:	4013      	ands	r3, r2
 80058e0:	d0f1      	beq.n	80058c6 <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80058e2:	4b57      	ldr	r3, [pc, #348]	; (8005a40 <HAL_RCC_OscConfig+0x338>)
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	22f8      	movs	r2, #248	; 0xf8
 80058e8:	4393      	bics	r3, r2
 80058ea:	0019      	movs	r1, r3
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	691b      	ldr	r3, [r3, #16]
 80058f0:	00da      	lsls	r2, r3, #3
 80058f2:	4b53      	ldr	r3, [pc, #332]	; (8005a40 <HAL_RCC_OscConfig+0x338>)
 80058f4:	430a      	orrs	r2, r1
 80058f6:	601a      	str	r2, [r3, #0]
 80058f8:	e018      	b.n	800592c <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80058fa:	4b51      	ldr	r3, [pc, #324]	; (8005a40 <HAL_RCC_OscConfig+0x338>)
 80058fc:	681a      	ldr	r2, [r3, #0]
 80058fe:	4b50      	ldr	r3, [pc, #320]	; (8005a40 <HAL_RCC_OscConfig+0x338>)
 8005900:	2101      	movs	r1, #1
 8005902:	438a      	bics	r2, r1
 8005904:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005906:	f7fc fff9 	bl	80028fc <HAL_GetTick>
 800590a:	0003      	movs	r3, r0
 800590c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800590e:	e008      	b.n	8005922 <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005910:	f7fc fff4 	bl	80028fc <HAL_GetTick>
 8005914:	0002      	movs	r2, r0
 8005916:	69bb      	ldr	r3, [r7, #24]
 8005918:	1ad3      	subs	r3, r2, r3
 800591a:	2b02      	cmp	r3, #2
 800591c:	d901      	bls.n	8005922 <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 800591e:	2303      	movs	r3, #3
 8005920:	e272      	b.n	8005e08 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005922:	4b47      	ldr	r3, [pc, #284]	; (8005a40 <HAL_RCC_OscConfig+0x338>)
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	2202      	movs	r2, #2
 8005928:	4013      	ands	r3, r2
 800592a:	d1f1      	bne.n	8005910 <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	2208      	movs	r2, #8
 8005932:	4013      	ands	r3, r2
 8005934:	d036      	beq.n	80059a4 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	69db      	ldr	r3, [r3, #28]
 800593a:	2b00      	cmp	r3, #0
 800593c:	d019      	beq.n	8005972 <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800593e:	4b40      	ldr	r3, [pc, #256]	; (8005a40 <HAL_RCC_OscConfig+0x338>)
 8005940:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005942:	4b3f      	ldr	r3, [pc, #252]	; (8005a40 <HAL_RCC_OscConfig+0x338>)
 8005944:	2101      	movs	r1, #1
 8005946:	430a      	orrs	r2, r1
 8005948:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800594a:	f7fc ffd7 	bl	80028fc <HAL_GetTick>
 800594e:	0003      	movs	r3, r0
 8005950:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005952:	e008      	b.n	8005966 <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005954:	f7fc ffd2 	bl	80028fc <HAL_GetTick>
 8005958:	0002      	movs	r2, r0
 800595a:	69bb      	ldr	r3, [r7, #24]
 800595c:	1ad3      	subs	r3, r2, r3
 800595e:	2b02      	cmp	r3, #2
 8005960:	d901      	bls.n	8005966 <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 8005962:	2303      	movs	r3, #3
 8005964:	e250      	b.n	8005e08 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005966:	4b36      	ldr	r3, [pc, #216]	; (8005a40 <HAL_RCC_OscConfig+0x338>)
 8005968:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800596a:	2202      	movs	r2, #2
 800596c:	4013      	ands	r3, r2
 800596e:	d0f1      	beq.n	8005954 <HAL_RCC_OscConfig+0x24c>
 8005970:	e018      	b.n	80059a4 <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005972:	4b33      	ldr	r3, [pc, #204]	; (8005a40 <HAL_RCC_OscConfig+0x338>)
 8005974:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005976:	4b32      	ldr	r3, [pc, #200]	; (8005a40 <HAL_RCC_OscConfig+0x338>)
 8005978:	2101      	movs	r1, #1
 800597a:	438a      	bics	r2, r1
 800597c:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800597e:	f7fc ffbd 	bl	80028fc <HAL_GetTick>
 8005982:	0003      	movs	r3, r0
 8005984:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005986:	e008      	b.n	800599a <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005988:	f7fc ffb8 	bl	80028fc <HAL_GetTick>
 800598c:	0002      	movs	r2, r0
 800598e:	69bb      	ldr	r3, [r7, #24]
 8005990:	1ad3      	subs	r3, r2, r3
 8005992:	2b02      	cmp	r3, #2
 8005994:	d901      	bls.n	800599a <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 8005996:	2303      	movs	r3, #3
 8005998:	e236      	b.n	8005e08 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800599a:	4b29      	ldr	r3, [pc, #164]	; (8005a40 <HAL_RCC_OscConfig+0x338>)
 800599c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800599e:	2202      	movs	r2, #2
 80059a0:	4013      	ands	r3, r2
 80059a2:	d1f1      	bne.n	8005988 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	2204      	movs	r2, #4
 80059aa:	4013      	ands	r3, r2
 80059ac:	d100      	bne.n	80059b0 <HAL_RCC_OscConfig+0x2a8>
 80059ae:	e0b5      	b.n	8005b1c <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 80059b0:	201f      	movs	r0, #31
 80059b2:	183b      	adds	r3, r7, r0
 80059b4:	2200      	movs	r2, #0
 80059b6:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80059b8:	4b21      	ldr	r3, [pc, #132]	; (8005a40 <HAL_RCC_OscConfig+0x338>)
 80059ba:	69da      	ldr	r2, [r3, #28]
 80059bc:	2380      	movs	r3, #128	; 0x80
 80059be:	055b      	lsls	r3, r3, #21
 80059c0:	4013      	ands	r3, r2
 80059c2:	d110      	bne.n	80059e6 <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80059c4:	4b1e      	ldr	r3, [pc, #120]	; (8005a40 <HAL_RCC_OscConfig+0x338>)
 80059c6:	69da      	ldr	r2, [r3, #28]
 80059c8:	4b1d      	ldr	r3, [pc, #116]	; (8005a40 <HAL_RCC_OscConfig+0x338>)
 80059ca:	2180      	movs	r1, #128	; 0x80
 80059cc:	0549      	lsls	r1, r1, #21
 80059ce:	430a      	orrs	r2, r1
 80059d0:	61da      	str	r2, [r3, #28]
 80059d2:	4b1b      	ldr	r3, [pc, #108]	; (8005a40 <HAL_RCC_OscConfig+0x338>)
 80059d4:	69da      	ldr	r2, [r3, #28]
 80059d6:	2380      	movs	r3, #128	; 0x80
 80059d8:	055b      	lsls	r3, r3, #21
 80059da:	4013      	ands	r3, r2
 80059dc:	60fb      	str	r3, [r7, #12]
 80059de:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80059e0:	183b      	adds	r3, r7, r0
 80059e2:	2201      	movs	r2, #1
 80059e4:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80059e6:	4b19      	ldr	r3, [pc, #100]	; (8005a4c <HAL_RCC_OscConfig+0x344>)
 80059e8:	681a      	ldr	r2, [r3, #0]
 80059ea:	2380      	movs	r3, #128	; 0x80
 80059ec:	005b      	lsls	r3, r3, #1
 80059ee:	4013      	ands	r3, r2
 80059f0:	d11a      	bne.n	8005a28 <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80059f2:	4b16      	ldr	r3, [pc, #88]	; (8005a4c <HAL_RCC_OscConfig+0x344>)
 80059f4:	681a      	ldr	r2, [r3, #0]
 80059f6:	4b15      	ldr	r3, [pc, #84]	; (8005a4c <HAL_RCC_OscConfig+0x344>)
 80059f8:	2180      	movs	r1, #128	; 0x80
 80059fa:	0049      	lsls	r1, r1, #1
 80059fc:	430a      	orrs	r2, r1
 80059fe:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005a00:	f7fc ff7c 	bl	80028fc <HAL_GetTick>
 8005a04:	0003      	movs	r3, r0
 8005a06:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005a08:	e008      	b.n	8005a1c <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005a0a:	f7fc ff77 	bl	80028fc <HAL_GetTick>
 8005a0e:	0002      	movs	r2, r0
 8005a10:	69bb      	ldr	r3, [r7, #24]
 8005a12:	1ad3      	subs	r3, r2, r3
 8005a14:	2b64      	cmp	r3, #100	; 0x64
 8005a16:	d901      	bls.n	8005a1c <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 8005a18:	2303      	movs	r3, #3
 8005a1a:	e1f5      	b.n	8005e08 <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005a1c:	4b0b      	ldr	r3, [pc, #44]	; (8005a4c <HAL_RCC_OscConfig+0x344>)
 8005a1e:	681a      	ldr	r2, [r3, #0]
 8005a20:	2380      	movs	r3, #128	; 0x80
 8005a22:	005b      	lsls	r3, r3, #1
 8005a24:	4013      	ands	r3, r2
 8005a26:	d0f0      	beq.n	8005a0a <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	689b      	ldr	r3, [r3, #8]
 8005a2c:	2b01      	cmp	r3, #1
 8005a2e:	d10f      	bne.n	8005a50 <HAL_RCC_OscConfig+0x348>
 8005a30:	4b03      	ldr	r3, [pc, #12]	; (8005a40 <HAL_RCC_OscConfig+0x338>)
 8005a32:	6a1a      	ldr	r2, [r3, #32]
 8005a34:	4b02      	ldr	r3, [pc, #8]	; (8005a40 <HAL_RCC_OscConfig+0x338>)
 8005a36:	2101      	movs	r1, #1
 8005a38:	430a      	orrs	r2, r1
 8005a3a:	621a      	str	r2, [r3, #32]
 8005a3c:	e036      	b.n	8005aac <HAL_RCC_OscConfig+0x3a4>
 8005a3e:	46c0      	nop			; (mov r8, r8)
 8005a40:	40021000 	.word	0x40021000
 8005a44:	fffeffff 	.word	0xfffeffff
 8005a48:	fffbffff 	.word	0xfffbffff
 8005a4c:	40007000 	.word	0x40007000
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	689b      	ldr	r3, [r3, #8]
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d10c      	bne.n	8005a72 <HAL_RCC_OscConfig+0x36a>
 8005a58:	4bca      	ldr	r3, [pc, #808]	; (8005d84 <HAL_RCC_OscConfig+0x67c>)
 8005a5a:	6a1a      	ldr	r2, [r3, #32]
 8005a5c:	4bc9      	ldr	r3, [pc, #804]	; (8005d84 <HAL_RCC_OscConfig+0x67c>)
 8005a5e:	2101      	movs	r1, #1
 8005a60:	438a      	bics	r2, r1
 8005a62:	621a      	str	r2, [r3, #32]
 8005a64:	4bc7      	ldr	r3, [pc, #796]	; (8005d84 <HAL_RCC_OscConfig+0x67c>)
 8005a66:	6a1a      	ldr	r2, [r3, #32]
 8005a68:	4bc6      	ldr	r3, [pc, #792]	; (8005d84 <HAL_RCC_OscConfig+0x67c>)
 8005a6a:	2104      	movs	r1, #4
 8005a6c:	438a      	bics	r2, r1
 8005a6e:	621a      	str	r2, [r3, #32]
 8005a70:	e01c      	b.n	8005aac <HAL_RCC_OscConfig+0x3a4>
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	689b      	ldr	r3, [r3, #8]
 8005a76:	2b05      	cmp	r3, #5
 8005a78:	d10c      	bne.n	8005a94 <HAL_RCC_OscConfig+0x38c>
 8005a7a:	4bc2      	ldr	r3, [pc, #776]	; (8005d84 <HAL_RCC_OscConfig+0x67c>)
 8005a7c:	6a1a      	ldr	r2, [r3, #32]
 8005a7e:	4bc1      	ldr	r3, [pc, #772]	; (8005d84 <HAL_RCC_OscConfig+0x67c>)
 8005a80:	2104      	movs	r1, #4
 8005a82:	430a      	orrs	r2, r1
 8005a84:	621a      	str	r2, [r3, #32]
 8005a86:	4bbf      	ldr	r3, [pc, #764]	; (8005d84 <HAL_RCC_OscConfig+0x67c>)
 8005a88:	6a1a      	ldr	r2, [r3, #32]
 8005a8a:	4bbe      	ldr	r3, [pc, #760]	; (8005d84 <HAL_RCC_OscConfig+0x67c>)
 8005a8c:	2101      	movs	r1, #1
 8005a8e:	430a      	orrs	r2, r1
 8005a90:	621a      	str	r2, [r3, #32]
 8005a92:	e00b      	b.n	8005aac <HAL_RCC_OscConfig+0x3a4>
 8005a94:	4bbb      	ldr	r3, [pc, #748]	; (8005d84 <HAL_RCC_OscConfig+0x67c>)
 8005a96:	6a1a      	ldr	r2, [r3, #32]
 8005a98:	4bba      	ldr	r3, [pc, #744]	; (8005d84 <HAL_RCC_OscConfig+0x67c>)
 8005a9a:	2101      	movs	r1, #1
 8005a9c:	438a      	bics	r2, r1
 8005a9e:	621a      	str	r2, [r3, #32]
 8005aa0:	4bb8      	ldr	r3, [pc, #736]	; (8005d84 <HAL_RCC_OscConfig+0x67c>)
 8005aa2:	6a1a      	ldr	r2, [r3, #32]
 8005aa4:	4bb7      	ldr	r3, [pc, #732]	; (8005d84 <HAL_RCC_OscConfig+0x67c>)
 8005aa6:	2104      	movs	r1, #4
 8005aa8:	438a      	bics	r2, r1
 8005aaa:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	689b      	ldr	r3, [r3, #8]
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d014      	beq.n	8005ade <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005ab4:	f7fc ff22 	bl	80028fc <HAL_GetTick>
 8005ab8:	0003      	movs	r3, r0
 8005aba:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005abc:	e009      	b.n	8005ad2 <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005abe:	f7fc ff1d 	bl	80028fc <HAL_GetTick>
 8005ac2:	0002      	movs	r2, r0
 8005ac4:	69bb      	ldr	r3, [r7, #24]
 8005ac6:	1ad3      	subs	r3, r2, r3
 8005ac8:	4aaf      	ldr	r2, [pc, #700]	; (8005d88 <HAL_RCC_OscConfig+0x680>)
 8005aca:	4293      	cmp	r3, r2
 8005acc:	d901      	bls.n	8005ad2 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8005ace:	2303      	movs	r3, #3
 8005ad0:	e19a      	b.n	8005e08 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005ad2:	4bac      	ldr	r3, [pc, #688]	; (8005d84 <HAL_RCC_OscConfig+0x67c>)
 8005ad4:	6a1b      	ldr	r3, [r3, #32]
 8005ad6:	2202      	movs	r2, #2
 8005ad8:	4013      	ands	r3, r2
 8005ada:	d0f0      	beq.n	8005abe <HAL_RCC_OscConfig+0x3b6>
 8005adc:	e013      	b.n	8005b06 <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005ade:	f7fc ff0d 	bl	80028fc <HAL_GetTick>
 8005ae2:	0003      	movs	r3, r0
 8005ae4:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005ae6:	e009      	b.n	8005afc <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005ae8:	f7fc ff08 	bl	80028fc <HAL_GetTick>
 8005aec:	0002      	movs	r2, r0
 8005aee:	69bb      	ldr	r3, [r7, #24]
 8005af0:	1ad3      	subs	r3, r2, r3
 8005af2:	4aa5      	ldr	r2, [pc, #660]	; (8005d88 <HAL_RCC_OscConfig+0x680>)
 8005af4:	4293      	cmp	r3, r2
 8005af6:	d901      	bls.n	8005afc <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8005af8:	2303      	movs	r3, #3
 8005afa:	e185      	b.n	8005e08 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005afc:	4ba1      	ldr	r3, [pc, #644]	; (8005d84 <HAL_RCC_OscConfig+0x67c>)
 8005afe:	6a1b      	ldr	r3, [r3, #32]
 8005b00:	2202      	movs	r2, #2
 8005b02:	4013      	ands	r3, r2
 8005b04:	d1f0      	bne.n	8005ae8 <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8005b06:	231f      	movs	r3, #31
 8005b08:	18fb      	adds	r3, r7, r3
 8005b0a:	781b      	ldrb	r3, [r3, #0]
 8005b0c:	2b01      	cmp	r3, #1
 8005b0e:	d105      	bne.n	8005b1c <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005b10:	4b9c      	ldr	r3, [pc, #624]	; (8005d84 <HAL_RCC_OscConfig+0x67c>)
 8005b12:	69da      	ldr	r2, [r3, #28]
 8005b14:	4b9b      	ldr	r3, [pc, #620]	; (8005d84 <HAL_RCC_OscConfig+0x67c>)
 8005b16:	499d      	ldr	r1, [pc, #628]	; (8005d8c <HAL_RCC_OscConfig+0x684>)
 8005b18:	400a      	ands	r2, r1
 8005b1a:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	2210      	movs	r2, #16
 8005b22:	4013      	ands	r3, r2
 8005b24:	d063      	beq.n	8005bee <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	695b      	ldr	r3, [r3, #20]
 8005b2a:	2b01      	cmp	r3, #1
 8005b2c:	d12a      	bne.n	8005b84 <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8005b2e:	4b95      	ldr	r3, [pc, #596]	; (8005d84 <HAL_RCC_OscConfig+0x67c>)
 8005b30:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005b32:	4b94      	ldr	r3, [pc, #592]	; (8005d84 <HAL_RCC_OscConfig+0x67c>)
 8005b34:	2104      	movs	r1, #4
 8005b36:	430a      	orrs	r2, r1
 8005b38:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8005b3a:	4b92      	ldr	r3, [pc, #584]	; (8005d84 <HAL_RCC_OscConfig+0x67c>)
 8005b3c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005b3e:	4b91      	ldr	r3, [pc, #580]	; (8005d84 <HAL_RCC_OscConfig+0x67c>)
 8005b40:	2101      	movs	r1, #1
 8005b42:	430a      	orrs	r2, r1
 8005b44:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005b46:	f7fc fed9 	bl	80028fc <HAL_GetTick>
 8005b4a:	0003      	movs	r3, r0
 8005b4c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8005b4e:	e008      	b.n	8005b62 <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8005b50:	f7fc fed4 	bl	80028fc <HAL_GetTick>
 8005b54:	0002      	movs	r2, r0
 8005b56:	69bb      	ldr	r3, [r7, #24]
 8005b58:	1ad3      	subs	r3, r2, r3
 8005b5a:	2b02      	cmp	r3, #2
 8005b5c:	d901      	bls.n	8005b62 <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 8005b5e:	2303      	movs	r3, #3
 8005b60:	e152      	b.n	8005e08 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8005b62:	4b88      	ldr	r3, [pc, #544]	; (8005d84 <HAL_RCC_OscConfig+0x67c>)
 8005b64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b66:	2202      	movs	r2, #2
 8005b68:	4013      	ands	r3, r2
 8005b6a:	d0f1      	beq.n	8005b50 <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8005b6c:	4b85      	ldr	r3, [pc, #532]	; (8005d84 <HAL_RCC_OscConfig+0x67c>)
 8005b6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b70:	22f8      	movs	r2, #248	; 0xf8
 8005b72:	4393      	bics	r3, r2
 8005b74:	0019      	movs	r1, r3
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	699b      	ldr	r3, [r3, #24]
 8005b7a:	00da      	lsls	r2, r3, #3
 8005b7c:	4b81      	ldr	r3, [pc, #516]	; (8005d84 <HAL_RCC_OscConfig+0x67c>)
 8005b7e:	430a      	orrs	r2, r1
 8005b80:	635a      	str	r2, [r3, #52]	; 0x34
 8005b82:	e034      	b.n	8005bee <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	695b      	ldr	r3, [r3, #20]
 8005b88:	3305      	adds	r3, #5
 8005b8a:	d111      	bne.n	8005bb0 <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8005b8c:	4b7d      	ldr	r3, [pc, #500]	; (8005d84 <HAL_RCC_OscConfig+0x67c>)
 8005b8e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005b90:	4b7c      	ldr	r3, [pc, #496]	; (8005d84 <HAL_RCC_OscConfig+0x67c>)
 8005b92:	2104      	movs	r1, #4
 8005b94:	438a      	bics	r2, r1
 8005b96:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8005b98:	4b7a      	ldr	r3, [pc, #488]	; (8005d84 <HAL_RCC_OscConfig+0x67c>)
 8005b9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b9c:	22f8      	movs	r2, #248	; 0xf8
 8005b9e:	4393      	bics	r3, r2
 8005ba0:	0019      	movs	r1, r3
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	699b      	ldr	r3, [r3, #24]
 8005ba6:	00da      	lsls	r2, r3, #3
 8005ba8:	4b76      	ldr	r3, [pc, #472]	; (8005d84 <HAL_RCC_OscConfig+0x67c>)
 8005baa:	430a      	orrs	r2, r1
 8005bac:	635a      	str	r2, [r3, #52]	; 0x34
 8005bae:	e01e      	b.n	8005bee <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8005bb0:	4b74      	ldr	r3, [pc, #464]	; (8005d84 <HAL_RCC_OscConfig+0x67c>)
 8005bb2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005bb4:	4b73      	ldr	r3, [pc, #460]	; (8005d84 <HAL_RCC_OscConfig+0x67c>)
 8005bb6:	2104      	movs	r1, #4
 8005bb8:	430a      	orrs	r2, r1
 8005bba:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8005bbc:	4b71      	ldr	r3, [pc, #452]	; (8005d84 <HAL_RCC_OscConfig+0x67c>)
 8005bbe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005bc0:	4b70      	ldr	r3, [pc, #448]	; (8005d84 <HAL_RCC_OscConfig+0x67c>)
 8005bc2:	2101      	movs	r1, #1
 8005bc4:	438a      	bics	r2, r1
 8005bc6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005bc8:	f7fc fe98 	bl	80028fc <HAL_GetTick>
 8005bcc:	0003      	movs	r3, r0
 8005bce:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8005bd0:	e008      	b.n	8005be4 <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8005bd2:	f7fc fe93 	bl	80028fc <HAL_GetTick>
 8005bd6:	0002      	movs	r2, r0
 8005bd8:	69bb      	ldr	r3, [r7, #24]
 8005bda:	1ad3      	subs	r3, r2, r3
 8005bdc:	2b02      	cmp	r3, #2
 8005bde:	d901      	bls.n	8005be4 <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 8005be0:	2303      	movs	r3, #3
 8005be2:	e111      	b.n	8005e08 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8005be4:	4b67      	ldr	r3, [pc, #412]	; (8005d84 <HAL_RCC_OscConfig+0x67c>)
 8005be6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005be8:	2202      	movs	r2, #2
 8005bea:	4013      	ands	r3, r2
 8005bec:	d1f1      	bne.n	8005bd2 <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	2220      	movs	r2, #32
 8005bf4:	4013      	ands	r3, r2
 8005bf6:	d05c      	beq.n	8005cb2 <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8005bf8:	4b62      	ldr	r3, [pc, #392]	; (8005d84 <HAL_RCC_OscConfig+0x67c>)
 8005bfa:	685b      	ldr	r3, [r3, #4]
 8005bfc:	220c      	movs	r2, #12
 8005bfe:	4013      	ands	r3, r2
 8005c00:	2b0c      	cmp	r3, #12
 8005c02:	d00e      	beq.n	8005c22 <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8005c04:	4b5f      	ldr	r3, [pc, #380]	; (8005d84 <HAL_RCC_OscConfig+0x67c>)
 8005c06:	685b      	ldr	r3, [r3, #4]
 8005c08:	220c      	movs	r2, #12
 8005c0a:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8005c0c:	2b08      	cmp	r3, #8
 8005c0e:	d114      	bne.n	8005c3a <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8005c10:	4b5c      	ldr	r3, [pc, #368]	; (8005d84 <HAL_RCC_OscConfig+0x67c>)
 8005c12:	685a      	ldr	r2, [r3, #4]
 8005c14:	23c0      	movs	r3, #192	; 0xc0
 8005c16:	025b      	lsls	r3, r3, #9
 8005c18:	401a      	ands	r2, r3
 8005c1a:	23c0      	movs	r3, #192	; 0xc0
 8005c1c:	025b      	lsls	r3, r3, #9
 8005c1e:	429a      	cmp	r2, r3
 8005c20:	d10b      	bne.n	8005c3a <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8005c22:	4b58      	ldr	r3, [pc, #352]	; (8005d84 <HAL_RCC_OscConfig+0x67c>)
 8005c24:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005c26:	2380      	movs	r3, #128	; 0x80
 8005c28:	025b      	lsls	r3, r3, #9
 8005c2a:	4013      	ands	r3, r2
 8005c2c:	d040      	beq.n	8005cb0 <HAL_RCC_OscConfig+0x5a8>
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	6a1b      	ldr	r3, [r3, #32]
 8005c32:	2b01      	cmp	r3, #1
 8005c34:	d03c      	beq.n	8005cb0 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8005c36:	2301      	movs	r3, #1
 8005c38:	e0e6      	b.n	8005e08 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	6a1b      	ldr	r3, [r3, #32]
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d01b      	beq.n	8005c7a <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8005c42:	4b50      	ldr	r3, [pc, #320]	; (8005d84 <HAL_RCC_OscConfig+0x67c>)
 8005c44:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005c46:	4b4f      	ldr	r3, [pc, #316]	; (8005d84 <HAL_RCC_OscConfig+0x67c>)
 8005c48:	2180      	movs	r1, #128	; 0x80
 8005c4a:	0249      	lsls	r1, r1, #9
 8005c4c:	430a      	orrs	r2, r1
 8005c4e:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005c50:	f7fc fe54 	bl	80028fc <HAL_GetTick>
 8005c54:	0003      	movs	r3, r0
 8005c56:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8005c58:	e008      	b.n	8005c6c <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005c5a:	f7fc fe4f 	bl	80028fc <HAL_GetTick>
 8005c5e:	0002      	movs	r2, r0
 8005c60:	69bb      	ldr	r3, [r7, #24]
 8005c62:	1ad3      	subs	r3, r2, r3
 8005c64:	2b02      	cmp	r3, #2
 8005c66:	d901      	bls.n	8005c6c <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 8005c68:	2303      	movs	r3, #3
 8005c6a:	e0cd      	b.n	8005e08 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8005c6c:	4b45      	ldr	r3, [pc, #276]	; (8005d84 <HAL_RCC_OscConfig+0x67c>)
 8005c6e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005c70:	2380      	movs	r3, #128	; 0x80
 8005c72:	025b      	lsls	r3, r3, #9
 8005c74:	4013      	ands	r3, r2
 8005c76:	d0f0      	beq.n	8005c5a <HAL_RCC_OscConfig+0x552>
 8005c78:	e01b      	b.n	8005cb2 <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8005c7a:	4b42      	ldr	r3, [pc, #264]	; (8005d84 <HAL_RCC_OscConfig+0x67c>)
 8005c7c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005c7e:	4b41      	ldr	r3, [pc, #260]	; (8005d84 <HAL_RCC_OscConfig+0x67c>)
 8005c80:	4943      	ldr	r1, [pc, #268]	; (8005d90 <HAL_RCC_OscConfig+0x688>)
 8005c82:	400a      	ands	r2, r1
 8005c84:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005c86:	f7fc fe39 	bl	80028fc <HAL_GetTick>
 8005c8a:	0003      	movs	r3, r0
 8005c8c:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8005c8e:	e008      	b.n	8005ca2 <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005c90:	f7fc fe34 	bl	80028fc <HAL_GetTick>
 8005c94:	0002      	movs	r2, r0
 8005c96:	69bb      	ldr	r3, [r7, #24]
 8005c98:	1ad3      	subs	r3, r2, r3
 8005c9a:	2b02      	cmp	r3, #2
 8005c9c:	d901      	bls.n	8005ca2 <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 8005c9e:	2303      	movs	r3, #3
 8005ca0:	e0b2      	b.n	8005e08 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8005ca2:	4b38      	ldr	r3, [pc, #224]	; (8005d84 <HAL_RCC_OscConfig+0x67c>)
 8005ca4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005ca6:	2380      	movs	r3, #128	; 0x80
 8005ca8:	025b      	lsls	r3, r3, #9
 8005caa:	4013      	ands	r3, r2
 8005cac:	d1f0      	bne.n	8005c90 <HAL_RCC_OscConfig+0x588>
 8005cae:	e000      	b.n	8005cb2 <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8005cb0:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d100      	bne.n	8005cbc <HAL_RCC_OscConfig+0x5b4>
 8005cba:	e0a4      	b.n	8005e06 <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005cbc:	4b31      	ldr	r3, [pc, #196]	; (8005d84 <HAL_RCC_OscConfig+0x67c>)
 8005cbe:	685b      	ldr	r3, [r3, #4]
 8005cc0:	220c      	movs	r2, #12
 8005cc2:	4013      	ands	r3, r2
 8005cc4:	2b08      	cmp	r3, #8
 8005cc6:	d100      	bne.n	8005cca <HAL_RCC_OscConfig+0x5c2>
 8005cc8:	e078      	b.n	8005dbc <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cce:	2b02      	cmp	r3, #2
 8005cd0:	d14c      	bne.n	8005d6c <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005cd2:	4b2c      	ldr	r3, [pc, #176]	; (8005d84 <HAL_RCC_OscConfig+0x67c>)
 8005cd4:	681a      	ldr	r2, [r3, #0]
 8005cd6:	4b2b      	ldr	r3, [pc, #172]	; (8005d84 <HAL_RCC_OscConfig+0x67c>)
 8005cd8:	492e      	ldr	r1, [pc, #184]	; (8005d94 <HAL_RCC_OscConfig+0x68c>)
 8005cda:	400a      	ands	r2, r1
 8005cdc:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005cde:	f7fc fe0d 	bl	80028fc <HAL_GetTick>
 8005ce2:	0003      	movs	r3, r0
 8005ce4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005ce6:	e008      	b.n	8005cfa <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005ce8:	f7fc fe08 	bl	80028fc <HAL_GetTick>
 8005cec:	0002      	movs	r2, r0
 8005cee:	69bb      	ldr	r3, [r7, #24]
 8005cf0:	1ad3      	subs	r3, r2, r3
 8005cf2:	2b02      	cmp	r3, #2
 8005cf4:	d901      	bls.n	8005cfa <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 8005cf6:	2303      	movs	r3, #3
 8005cf8:	e086      	b.n	8005e08 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005cfa:	4b22      	ldr	r3, [pc, #136]	; (8005d84 <HAL_RCC_OscConfig+0x67c>)
 8005cfc:	681a      	ldr	r2, [r3, #0]
 8005cfe:	2380      	movs	r3, #128	; 0x80
 8005d00:	049b      	lsls	r3, r3, #18
 8005d02:	4013      	ands	r3, r2
 8005d04:	d1f0      	bne.n	8005ce8 <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005d06:	4b1f      	ldr	r3, [pc, #124]	; (8005d84 <HAL_RCC_OscConfig+0x67c>)
 8005d08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d0a:	220f      	movs	r2, #15
 8005d0c:	4393      	bics	r3, r2
 8005d0e:	0019      	movs	r1, r3
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005d14:	4b1b      	ldr	r3, [pc, #108]	; (8005d84 <HAL_RCC_OscConfig+0x67c>)
 8005d16:	430a      	orrs	r2, r1
 8005d18:	62da      	str	r2, [r3, #44]	; 0x2c
 8005d1a:	4b1a      	ldr	r3, [pc, #104]	; (8005d84 <HAL_RCC_OscConfig+0x67c>)
 8005d1c:	685b      	ldr	r3, [r3, #4]
 8005d1e:	4a1e      	ldr	r2, [pc, #120]	; (8005d98 <HAL_RCC_OscConfig+0x690>)
 8005d20:	4013      	ands	r3, r2
 8005d22:	0019      	movs	r1, r3
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d2c:	431a      	orrs	r2, r3
 8005d2e:	4b15      	ldr	r3, [pc, #84]	; (8005d84 <HAL_RCC_OscConfig+0x67c>)
 8005d30:	430a      	orrs	r2, r1
 8005d32:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005d34:	4b13      	ldr	r3, [pc, #76]	; (8005d84 <HAL_RCC_OscConfig+0x67c>)
 8005d36:	681a      	ldr	r2, [r3, #0]
 8005d38:	4b12      	ldr	r3, [pc, #72]	; (8005d84 <HAL_RCC_OscConfig+0x67c>)
 8005d3a:	2180      	movs	r1, #128	; 0x80
 8005d3c:	0449      	lsls	r1, r1, #17
 8005d3e:	430a      	orrs	r2, r1
 8005d40:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005d42:	f7fc fddb 	bl	80028fc <HAL_GetTick>
 8005d46:	0003      	movs	r3, r0
 8005d48:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005d4a:	e008      	b.n	8005d5e <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005d4c:	f7fc fdd6 	bl	80028fc <HAL_GetTick>
 8005d50:	0002      	movs	r2, r0
 8005d52:	69bb      	ldr	r3, [r7, #24]
 8005d54:	1ad3      	subs	r3, r2, r3
 8005d56:	2b02      	cmp	r3, #2
 8005d58:	d901      	bls.n	8005d5e <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 8005d5a:	2303      	movs	r3, #3
 8005d5c:	e054      	b.n	8005e08 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005d5e:	4b09      	ldr	r3, [pc, #36]	; (8005d84 <HAL_RCC_OscConfig+0x67c>)
 8005d60:	681a      	ldr	r2, [r3, #0]
 8005d62:	2380      	movs	r3, #128	; 0x80
 8005d64:	049b      	lsls	r3, r3, #18
 8005d66:	4013      	ands	r3, r2
 8005d68:	d0f0      	beq.n	8005d4c <HAL_RCC_OscConfig+0x644>
 8005d6a:	e04c      	b.n	8005e06 <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005d6c:	4b05      	ldr	r3, [pc, #20]	; (8005d84 <HAL_RCC_OscConfig+0x67c>)
 8005d6e:	681a      	ldr	r2, [r3, #0]
 8005d70:	4b04      	ldr	r3, [pc, #16]	; (8005d84 <HAL_RCC_OscConfig+0x67c>)
 8005d72:	4908      	ldr	r1, [pc, #32]	; (8005d94 <HAL_RCC_OscConfig+0x68c>)
 8005d74:	400a      	ands	r2, r1
 8005d76:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005d78:	f7fc fdc0 	bl	80028fc <HAL_GetTick>
 8005d7c:	0003      	movs	r3, r0
 8005d7e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005d80:	e015      	b.n	8005dae <HAL_RCC_OscConfig+0x6a6>
 8005d82:	46c0      	nop			; (mov r8, r8)
 8005d84:	40021000 	.word	0x40021000
 8005d88:	00001388 	.word	0x00001388
 8005d8c:	efffffff 	.word	0xefffffff
 8005d90:	fffeffff 	.word	0xfffeffff
 8005d94:	feffffff 	.word	0xfeffffff
 8005d98:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005d9c:	f7fc fdae 	bl	80028fc <HAL_GetTick>
 8005da0:	0002      	movs	r2, r0
 8005da2:	69bb      	ldr	r3, [r7, #24]
 8005da4:	1ad3      	subs	r3, r2, r3
 8005da6:	2b02      	cmp	r3, #2
 8005da8:	d901      	bls.n	8005dae <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 8005daa:	2303      	movs	r3, #3
 8005dac:	e02c      	b.n	8005e08 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005dae:	4b18      	ldr	r3, [pc, #96]	; (8005e10 <HAL_RCC_OscConfig+0x708>)
 8005db0:	681a      	ldr	r2, [r3, #0]
 8005db2:	2380      	movs	r3, #128	; 0x80
 8005db4:	049b      	lsls	r3, r3, #18
 8005db6:	4013      	ands	r3, r2
 8005db8:	d1f0      	bne.n	8005d9c <HAL_RCC_OscConfig+0x694>
 8005dba:	e024      	b.n	8005e06 <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dc0:	2b01      	cmp	r3, #1
 8005dc2:	d101      	bne.n	8005dc8 <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 8005dc4:	2301      	movs	r3, #1
 8005dc6:	e01f      	b.n	8005e08 <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8005dc8:	4b11      	ldr	r3, [pc, #68]	; (8005e10 <HAL_RCC_OscConfig+0x708>)
 8005dca:	685b      	ldr	r3, [r3, #4]
 8005dcc:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8005dce:	4b10      	ldr	r3, [pc, #64]	; (8005e10 <HAL_RCC_OscConfig+0x708>)
 8005dd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005dd2:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005dd4:	697a      	ldr	r2, [r7, #20]
 8005dd6:	23c0      	movs	r3, #192	; 0xc0
 8005dd8:	025b      	lsls	r3, r3, #9
 8005dda:	401a      	ands	r2, r3
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005de0:	429a      	cmp	r2, r3
 8005de2:	d10e      	bne.n	8005e02 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8005de4:	693b      	ldr	r3, [r7, #16]
 8005de6:	220f      	movs	r2, #15
 8005de8:	401a      	ands	r2, r3
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005dee:	429a      	cmp	r2, r3
 8005df0:	d107      	bne.n	8005e02 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8005df2:	697a      	ldr	r2, [r7, #20]
 8005df4:	23f0      	movs	r3, #240	; 0xf0
 8005df6:	039b      	lsls	r3, r3, #14
 8005df8:	401a      	ands	r2, r3
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8005dfe:	429a      	cmp	r2, r3
 8005e00:	d001      	beq.n	8005e06 <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 8005e02:	2301      	movs	r3, #1
 8005e04:	e000      	b.n	8005e08 <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 8005e06:	2300      	movs	r3, #0
}
 8005e08:	0018      	movs	r0, r3
 8005e0a:	46bd      	mov	sp, r7
 8005e0c:	b008      	add	sp, #32
 8005e0e:	bd80      	pop	{r7, pc}
 8005e10:	40021000 	.word	0x40021000

08005e14 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005e14:	b580      	push	{r7, lr}
 8005e16:	b084      	sub	sp, #16
 8005e18:	af00      	add	r7, sp, #0
 8005e1a:	6078      	str	r0, [r7, #4]
 8005e1c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d101      	bne.n	8005e28 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005e24:	2301      	movs	r3, #1
 8005e26:	e0bf      	b.n	8005fa8 <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005e28:	4b61      	ldr	r3, [pc, #388]	; (8005fb0 <HAL_RCC_ClockConfig+0x19c>)
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	2201      	movs	r2, #1
 8005e2e:	4013      	ands	r3, r2
 8005e30:	683a      	ldr	r2, [r7, #0]
 8005e32:	429a      	cmp	r2, r3
 8005e34:	d911      	bls.n	8005e5a <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005e36:	4b5e      	ldr	r3, [pc, #376]	; (8005fb0 <HAL_RCC_ClockConfig+0x19c>)
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	2201      	movs	r2, #1
 8005e3c:	4393      	bics	r3, r2
 8005e3e:	0019      	movs	r1, r3
 8005e40:	4b5b      	ldr	r3, [pc, #364]	; (8005fb0 <HAL_RCC_ClockConfig+0x19c>)
 8005e42:	683a      	ldr	r2, [r7, #0]
 8005e44:	430a      	orrs	r2, r1
 8005e46:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005e48:	4b59      	ldr	r3, [pc, #356]	; (8005fb0 <HAL_RCC_ClockConfig+0x19c>)
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	2201      	movs	r2, #1
 8005e4e:	4013      	ands	r3, r2
 8005e50:	683a      	ldr	r2, [r7, #0]
 8005e52:	429a      	cmp	r2, r3
 8005e54:	d001      	beq.n	8005e5a <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8005e56:	2301      	movs	r3, #1
 8005e58:	e0a6      	b.n	8005fa8 <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	2202      	movs	r2, #2
 8005e60:	4013      	ands	r3, r2
 8005e62:	d015      	beq.n	8005e90 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	2204      	movs	r2, #4
 8005e6a:	4013      	ands	r3, r2
 8005e6c:	d006      	beq.n	8005e7c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8005e6e:	4b51      	ldr	r3, [pc, #324]	; (8005fb4 <HAL_RCC_ClockConfig+0x1a0>)
 8005e70:	685a      	ldr	r2, [r3, #4]
 8005e72:	4b50      	ldr	r3, [pc, #320]	; (8005fb4 <HAL_RCC_ClockConfig+0x1a0>)
 8005e74:	21e0      	movs	r1, #224	; 0xe0
 8005e76:	00c9      	lsls	r1, r1, #3
 8005e78:	430a      	orrs	r2, r1
 8005e7a:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005e7c:	4b4d      	ldr	r3, [pc, #308]	; (8005fb4 <HAL_RCC_ClockConfig+0x1a0>)
 8005e7e:	685b      	ldr	r3, [r3, #4]
 8005e80:	22f0      	movs	r2, #240	; 0xf0
 8005e82:	4393      	bics	r3, r2
 8005e84:	0019      	movs	r1, r3
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	689a      	ldr	r2, [r3, #8]
 8005e8a:	4b4a      	ldr	r3, [pc, #296]	; (8005fb4 <HAL_RCC_ClockConfig+0x1a0>)
 8005e8c:	430a      	orrs	r2, r1
 8005e8e:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	2201      	movs	r2, #1
 8005e96:	4013      	ands	r3, r2
 8005e98:	d04c      	beq.n	8005f34 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	685b      	ldr	r3, [r3, #4]
 8005e9e:	2b01      	cmp	r3, #1
 8005ea0:	d107      	bne.n	8005eb2 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005ea2:	4b44      	ldr	r3, [pc, #272]	; (8005fb4 <HAL_RCC_ClockConfig+0x1a0>)
 8005ea4:	681a      	ldr	r2, [r3, #0]
 8005ea6:	2380      	movs	r3, #128	; 0x80
 8005ea8:	029b      	lsls	r3, r3, #10
 8005eaa:	4013      	ands	r3, r2
 8005eac:	d120      	bne.n	8005ef0 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8005eae:	2301      	movs	r3, #1
 8005eb0:	e07a      	b.n	8005fa8 <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	685b      	ldr	r3, [r3, #4]
 8005eb6:	2b02      	cmp	r3, #2
 8005eb8:	d107      	bne.n	8005eca <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005eba:	4b3e      	ldr	r3, [pc, #248]	; (8005fb4 <HAL_RCC_ClockConfig+0x1a0>)
 8005ebc:	681a      	ldr	r2, [r3, #0]
 8005ebe:	2380      	movs	r3, #128	; 0x80
 8005ec0:	049b      	lsls	r3, r3, #18
 8005ec2:	4013      	ands	r3, r2
 8005ec4:	d114      	bne.n	8005ef0 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8005ec6:	2301      	movs	r3, #1
 8005ec8:	e06e      	b.n	8005fa8 <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	685b      	ldr	r3, [r3, #4]
 8005ece:	2b03      	cmp	r3, #3
 8005ed0:	d107      	bne.n	8005ee2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8005ed2:	4b38      	ldr	r3, [pc, #224]	; (8005fb4 <HAL_RCC_ClockConfig+0x1a0>)
 8005ed4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005ed6:	2380      	movs	r3, #128	; 0x80
 8005ed8:	025b      	lsls	r3, r3, #9
 8005eda:	4013      	ands	r3, r2
 8005edc:	d108      	bne.n	8005ef0 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8005ede:	2301      	movs	r3, #1
 8005ee0:	e062      	b.n	8005fa8 <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005ee2:	4b34      	ldr	r3, [pc, #208]	; (8005fb4 <HAL_RCC_ClockConfig+0x1a0>)
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	2202      	movs	r2, #2
 8005ee8:	4013      	ands	r3, r2
 8005eea:	d101      	bne.n	8005ef0 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8005eec:	2301      	movs	r3, #1
 8005eee:	e05b      	b.n	8005fa8 <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005ef0:	4b30      	ldr	r3, [pc, #192]	; (8005fb4 <HAL_RCC_ClockConfig+0x1a0>)
 8005ef2:	685b      	ldr	r3, [r3, #4]
 8005ef4:	2203      	movs	r2, #3
 8005ef6:	4393      	bics	r3, r2
 8005ef8:	0019      	movs	r1, r3
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	685a      	ldr	r2, [r3, #4]
 8005efe:	4b2d      	ldr	r3, [pc, #180]	; (8005fb4 <HAL_RCC_ClockConfig+0x1a0>)
 8005f00:	430a      	orrs	r2, r1
 8005f02:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005f04:	f7fc fcfa 	bl	80028fc <HAL_GetTick>
 8005f08:	0003      	movs	r3, r0
 8005f0a:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005f0c:	e009      	b.n	8005f22 <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005f0e:	f7fc fcf5 	bl	80028fc <HAL_GetTick>
 8005f12:	0002      	movs	r2, r0
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	1ad3      	subs	r3, r2, r3
 8005f18:	4a27      	ldr	r2, [pc, #156]	; (8005fb8 <HAL_RCC_ClockConfig+0x1a4>)
 8005f1a:	4293      	cmp	r3, r2
 8005f1c:	d901      	bls.n	8005f22 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005f1e:	2303      	movs	r3, #3
 8005f20:	e042      	b.n	8005fa8 <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005f22:	4b24      	ldr	r3, [pc, #144]	; (8005fb4 <HAL_RCC_ClockConfig+0x1a0>)
 8005f24:	685b      	ldr	r3, [r3, #4]
 8005f26:	220c      	movs	r2, #12
 8005f28:	401a      	ands	r2, r3
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	685b      	ldr	r3, [r3, #4]
 8005f2e:	009b      	lsls	r3, r3, #2
 8005f30:	429a      	cmp	r2, r3
 8005f32:	d1ec      	bne.n	8005f0e <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005f34:	4b1e      	ldr	r3, [pc, #120]	; (8005fb0 <HAL_RCC_ClockConfig+0x19c>)
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	2201      	movs	r2, #1
 8005f3a:	4013      	ands	r3, r2
 8005f3c:	683a      	ldr	r2, [r7, #0]
 8005f3e:	429a      	cmp	r2, r3
 8005f40:	d211      	bcs.n	8005f66 <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005f42:	4b1b      	ldr	r3, [pc, #108]	; (8005fb0 <HAL_RCC_ClockConfig+0x19c>)
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	2201      	movs	r2, #1
 8005f48:	4393      	bics	r3, r2
 8005f4a:	0019      	movs	r1, r3
 8005f4c:	4b18      	ldr	r3, [pc, #96]	; (8005fb0 <HAL_RCC_ClockConfig+0x19c>)
 8005f4e:	683a      	ldr	r2, [r7, #0]
 8005f50:	430a      	orrs	r2, r1
 8005f52:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005f54:	4b16      	ldr	r3, [pc, #88]	; (8005fb0 <HAL_RCC_ClockConfig+0x19c>)
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	2201      	movs	r2, #1
 8005f5a:	4013      	ands	r3, r2
 8005f5c:	683a      	ldr	r2, [r7, #0]
 8005f5e:	429a      	cmp	r2, r3
 8005f60:	d001      	beq.n	8005f66 <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 8005f62:	2301      	movs	r3, #1
 8005f64:	e020      	b.n	8005fa8 <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	2204      	movs	r2, #4
 8005f6c:	4013      	ands	r3, r2
 8005f6e:	d009      	beq.n	8005f84 <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8005f70:	4b10      	ldr	r3, [pc, #64]	; (8005fb4 <HAL_RCC_ClockConfig+0x1a0>)
 8005f72:	685b      	ldr	r3, [r3, #4]
 8005f74:	4a11      	ldr	r2, [pc, #68]	; (8005fbc <HAL_RCC_ClockConfig+0x1a8>)
 8005f76:	4013      	ands	r3, r2
 8005f78:	0019      	movs	r1, r3
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	68da      	ldr	r2, [r3, #12]
 8005f7e:	4b0d      	ldr	r3, [pc, #52]	; (8005fb4 <HAL_RCC_ClockConfig+0x1a0>)
 8005f80:	430a      	orrs	r2, r1
 8005f82:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8005f84:	f000 f820 	bl	8005fc8 <HAL_RCC_GetSysClockFreq>
 8005f88:	0001      	movs	r1, r0
 8005f8a:	4b0a      	ldr	r3, [pc, #40]	; (8005fb4 <HAL_RCC_ClockConfig+0x1a0>)
 8005f8c:	685b      	ldr	r3, [r3, #4]
 8005f8e:	091b      	lsrs	r3, r3, #4
 8005f90:	220f      	movs	r2, #15
 8005f92:	4013      	ands	r3, r2
 8005f94:	4a0a      	ldr	r2, [pc, #40]	; (8005fc0 <HAL_RCC_ClockConfig+0x1ac>)
 8005f96:	5cd3      	ldrb	r3, [r2, r3]
 8005f98:	000a      	movs	r2, r1
 8005f9a:	40da      	lsrs	r2, r3
 8005f9c:	4b09      	ldr	r3, [pc, #36]	; (8005fc4 <HAL_RCC_ClockConfig+0x1b0>)
 8005f9e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8005fa0:	2003      	movs	r0, #3
 8005fa2:	f7fc fc65 	bl	8002870 <HAL_InitTick>
  
  return HAL_OK;
 8005fa6:	2300      	movs	r3, #0
}
 8005fa8:	0018      	movs	r0, r3
 8005faa:	46bd      	mov	sp, r7
 8005fac:	b004      	add	sp, #16
 8005fae:	bd80      	pop	{r7, pc}
 8005fb0:	40022000 	.word	0x40022000
 8005fb4:	40021000 	.word	0x40021000
 8005fb8:	00001388 	.word	0x00001388
 8005fbc:	fffff8ff 	.word	0xfffff8ff
 8005fc0:	0800d5f8 	.word	0x0800d5f8
 8005fc4:	20000000 	.word	0x20000000

08005fc8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005fc8:	b590      	push	{r4, r7, lr}
 8005fca:	b08f      	sub	sp, #60	; 0x3c
 8005fcc:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8005fce:	2314      	movs	r3, #20
 8005fd0:	18fb      	adds	r3, r7, r3
 8005fd2:	4a38      	ldr	r2, [pc, #224]	; (80060b4 <HAL_RCC_GetSysClockFreq+0xec>)
 8005fd4:	ca13      	ldmia	r2!, {r0, r1, r4}
 8005fd6:	c313      	stmia	r3!, {r0, r1, r4}
 8005fd8:	6812      	ldr	r2, [r2, #0]
 8005fda:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8005fdc:	1d3b      	adds	r3, r7, #4
 8005fde:	4a36      	ldr	r2, [pc, #216]	; (80060b8 <HAL_RCC_GetSysClockFreq+0xf0>)
 8005fe0:	ca13      	ldmia	r2!, {r0, r1, r4}
 8005fe2:	c313      	stmia	r3!, {r0, r1, r4}
 8005fe4:	6812      	ldr	r2, [r2, #0]
 8005fe6:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8005fe8:	2300      	movs	r3, #0
 8005fea:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005fec:	2300      	movs	r3, #0
 8005fee:	62bb      	str	r3, [r7, #40]	; 0x28
 8005ff0:	2300      	movs	r3, #0
 8005ff2:	637b      	str	r3, [r7, #52]	; 0x34
 8005ff4:	2300      	movs	r3, #0
 8005ff6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8005ff8:	2300      	movs	r3, #0
 8005ffa:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8005ffc:	4b2f      	ldr	r3, [pc, #188]	; (80060bc <HAL_RCC_GetSysClockFreq+0xf4>)
 8005ffe:	685b      	ldr	r3, [r3, #4]
 8006000:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8006002:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006004:	220c      	movs	r2, #12
 8006006:	4013      	ands	r3, r2
 8006008:	2b0c      	cmp	r3, #12
 800600a:	d047      	beq.n	800609c <HAL_RCC_GetSysClockFreq+0xd4>
 800600c:	d849      	bhi.n	80060a2 <HAL_RCC_GetSysClockFreq+0xda>
 800600e:	2b04      	cmp	r3, #4
 8006010:	d002      	beq.n	8006018 <HAL_RCC_GetSysClockFreq+0x50>
 8006012:	2b08      	cmp	r3, #8
 8006014:	d003      	beq.n	800601e <HAL_RCC_GetSysClockFreq+0x56>
 8006016:	e044      	b.n	80060a2 <HAL_RCC_GetSysClockFreq+0xda>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8006018:	4b29      	ldr	r3, [pc, #164]	; (80060c0 <HAL_RCC_GetSysClockFreq+0xf8>)
 800601a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800601c:	e044      	b.n	80060a8 <HAL_RCC_GetSysClockFreq+0xe0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 800601e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006020:	0c9b      	lsrs	r3, r3, #18
 8006022:	220f      	movs	r2, #15
 8006024:	4013      	ands	r3, r2
 8006026:	2214      	movs	r2, #20
 8006028:	18ba      	adds	r2, r7, r2
 800602a:	5cd3      	ldrb	r3, [r2, r3]
 800602c:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 800602e:	4b23      	ldr	r3, [pc, #140]	; (80060bc <HAL_RCC_GetSysClockFreq+0xf4>)
 8006030:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006032:	220f      	movs	r2, #15
 8006034:	4013      	ands	r3, r2
 8006036:	1d3a      	adds	r2, r7, #4
 8006038:	5cd3      	ldrb	r3, [r2, r3]
 800603a:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800603c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800603e:	23c0      	movs	r3, #192	; 0xc0
 8006040:	025b      	lsls	r3, r3, #9
 8006042:	401a      	ands	r2, r3
 8006044:	2380      	movs	r3, #128	; 0x80
 8006046:	025b      	lsls	r3, r3, #9
 8006048:	429a      	cmp	r2, r3
 800604a:	d109      	bne.n	8006060 <HAL_RCC_GetSysClockFreq+0x98>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800604c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800604e:	481c      	ldr	r0, [pc, #112]	; (80060c0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8006050:	f7fa f86c 	bl	800012c <__udivsi3>
 8006054:	0003      	movs	r3, r0
 8006056:	001a      	movs	r2, r3
 8006058:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800605a:	4353      	muls	r3, r2
 800605c:	637b      	str	r3, [r7, #52]	; 0x34
 800605e:	e01a      	b.n	8006096 <HAL_RCC_GetSysClockFreq+0xce>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8006060:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006062:	23c0      	movs	r3, #192	; 0xc0
 8006064:	025b      	lsls	r3, r3, #9
 8006066:	401a      	ands	r2, r3
 8006068:	23c0      	movs	r3, #192	; 0xc0
 800606a:	025b      	lsls	r3, r3, #9
 800606c:	429a      	cmp	r2, r3
 800606e:	d109      	bne.n	8006084 <HAL_RCC_GetSysClockFreq+0xbc>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8006070:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006072:	4814      	ldr	r0, [pc, #80]	; (80060c4 <HAL_RCC_GetSysClockFreq+0xfc>)
 8006074:	f7fa f85a 	bl	800012c <__udivsi3>
 8006078:	0003      	movs	r3, r0
 800607a:	001a      	movs	r2, r3
 800607c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800607e:	4353      	muls	r3, r2
 8006080:	637b      	str	r3, [r7, #52]	; 0x34
 8006082:	e008      	b.n	8006096 <HAL_RCC_GetSysClockFreq+0xce>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8006084:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006086:	4810      	ldr	r0, [pc, #64]	; (80060c8 <HAL_RCC_GetSysClockFreq+0x100>)
 8006088:	f7fa f850 	bl	800012c <__udivsi3>
 800608c:	0003      	movs	r3, r0
 800608e:	001a      	movs	r2, r3
 8006090:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006092:	4353      	muls	r3, r2
 8006094:	637b      	str	r3, [r7, #52]	; 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 8006096:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006098:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800609a:	e005      	b.n	80060a8 <HAL_RCC_GetSysClockFreq+0xe0>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 800609c:	4b09      	ldr	r3, [pc, #36]	; (80060c4 <HAL_RCC_GetSysClockFreq+0xfc>)
 800609e:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80060a0:	e002      	b.n	80060a8 <HAL_RCC_GetSysClockFreq+0xe0>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80060a2:	4b09      	ldr	r3, [pc, #36]	; (80060c8 <HAL_RCC_GetSysClockFreq+0x100>)
 80060a4:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80060a6:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 80060a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 80060aa:	0018      	movs	r0, r3
 80060ac:	46bd      	mov	sp, r7
 80060ae:	b00f      	add	sp, #60	; 0x3c
 80060b0:	bd90      	pop	{r4, r7, pc}
 80060b2:	46c0      	nop			; (mov r8, r8)
 80060b4:	0800d51c 	.word	0x0800d51c
 80060b8:	0800d52c 	.word	0x0800d52c
 80060bc:	40021000 	.word	0x40021000
 80060c0:	00f42400 	.word	0x00f42400
 80060c4:	02dc6c00 	.word	0x02dc6c00
 80060c8:	007a1200 	.word	0x007a1200

080060cc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80060cc:	b580      	push	{r7, lr}
 80060ce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80060d0:	4b02      	ldr	r3, [pc, #8]	; (80060dc <HAL_RCC_GetHCLKFreq+0x10>)
 80060d2:	681b      	ldr	r3, [r3, #0]
}
 80060d4:	0018      	movs	r0, r3
 80060d6:	46bd      	mov	sp, r7
 80060d8:	bd80      	pop	{r7, pc}
 80060da:	46c0      	nop			; (mov r8, r8)
 80060dc:	20000000 	.word	0x20000000

080060e0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80060e0:	b580      	push	{r7, lr}
 80060e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 80060e4:	f7ff fff2 	bl	80060cc <HAL_RCC_GetHCLKFreq>
 80060e8:	0001      	movs	r1, r0
 80060ea:	4b06      	ldr	r3, [pc, #24]	; (8006104 <HAL_RCC_GetPCLK1Freq+0x24>)
 80060ec:	685b      	ldr	r3, [r3, #4]
 80060ee:	0a1b      	lsrs	r3, r3, #8
 80060f0:	2207      	movs	r2, #7
 80060f2:	4013      	ands	r3, r2
 80060f4:	4a04      	ldr	r2, [pc, #16]	; (8006108 <HAL_RCC_GetPCLK1Freq+0x28>)
 80060f6:	5cd3      	ldrb	r3, [r2, r3]
 80060f8:	40d9      	lsrs	r1, r3
 80060fa:	000b      	movs	r3, r1
}    
 80060fc:	0018      	movs	r0, r3
 80060fe:	46bd      	mov	sp, r7
 8006100:	bd80      	pop	{r7, pc}
 8006102:	46c0      	nop			; (mov r8, r8)
 8006104:	40021000 	.word	0x40021000
 8006108:	0800d608 	.word	0x0800d608

0800610c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800610c:	b580      	push	{r7, lr}
 800610e:	b086      	sub	sp, #24
 8006110:	af00      	add	r7, sp, #0
 8006112:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006114:	2300      	movs	r3, #0
 8006116:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8006118:	2300      	movs	r3, #0
 800611a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681a      	ldr	r2, [r3, #0]
 8006120:	2380      	movs	r3, #128	; 0x80
 8006122:	025b      	lsls	r3, r3, #9
 8006124:	4013      	ands	r3, r2
 8006126:	d100      	bne.n	800612a <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8006128:	e08e      	b.n	8006248 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 800612a:	2017      	movs	r0, #23
 800612c:	183b      	adds	r3, r7, r0
 800612e:	2200      	movs	r2, #0
 8006130:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006132:	4b6e      	ldr	r3, [pc, #440]	; (80062ec <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006134:	69da      	ldr	r2, [r3, #28]
 8006136:	2380      	movs	r3, #128	; 0x80
 8006138:	055b      	lsls	r3, r3, #21
 800613a:	4013      	ands	r3, r2
 800613c:	d110      	bne.n	8006160 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 800613e:	4b6b      	ldr	r3, [pc, #428]	; (80062ec <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006140:	69da      	ldr	r2, [r3, #28]
 8006142:	4b6a      	ldr	r3, [pc, #424]	; (80062ec <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006144:	2180      	movs	r1, #128	; 0x80
 8006146:	0549      	lsls	r1, r1, #21
 8006148:	430a      	orrs	r2, r1
 800614a:	61da      	str	r2, [r3, #28]
 800614c:	4b67      	ldr	r3, [pc, #412]	; (80062ec <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800614e:	69da      	ldr	r2, [r3, #28]
 8006150:	2380      	movs	r3, #128	; 0x80
 8006152:	055b      	lsls	r3, r3, #21
 8006154:	4013      	ands	r3, r2
 8006156:	60bb      	str	r3, [r7, #8]
 8006158:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800615a:	183b      	adds	r3, r7, r0
 800615c:	2201      	movs	r2, #1
 800615e:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006160:	4b63      	ldr	r3, [pc, #396]	; (80062f0 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8006162:	681a      	ldr	r2, [r3, #0]
 8006164:	2380      	movs	r3, #128	; 0x80
 8006166:	005b      	lsls	r3, r3, #1
 8006168:	4013      	ands	r3, r2
 800616a:	d11a      	bne.n	80061a2 <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800616c:	4b60      	ldr	r3, [pc, #384]	; (80062f0 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800616e:	681a      	ldr	r2, [r3, #0]
 8006170:	4b5f      	ldr	r3, [pc, #380]	; (80062f0 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8006172:	2180      	movs	r1, #128	; 0x80
 8006174:	0049      	lsls	r1, r1, #1
 8006176:	430a      	orrs	r2, r1
 8006178:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800617a:	f7fc fbbf 	bl	80028fc <HAL_GetTick>
 800617e:	0003      	movs	r3, r0
 8006180:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006182:	e008      	b.n	8006196 <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006184:	f7fc fbba 	bl	80028fc <HAL_GetTick>
 8006188:	0002      	movs	r2, r0
 800618a:	693b      	ldr	r3, [r7, #16]
 800618c:	1ad3      	subs	r3, r2, r3
 800618e:	2b64      	cmp	r3, #100	; 0x64
 8006190:	d901      	bls.n	8006196 <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 8006192:	2303      	movs	r3, #3
 8006194:	e0a6      	b.n	80062e4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006196:	4b56      	ldr	r3, [pc, #344]	; (80062f0 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8006198:	681a      	ldr	r2, [r3, #0]
 800619a:	2380      	movs	r3, #128	; 0x80
 800619c:	005b      	lsls	r3, r3, #1
 800619e:	4013      	ands	r3, r2
 80061a0:	d0f0      	beq.n	8006184 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80061a2:	4b52      	ldr	r3, [pc, #328]	; (80062ec <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80061a4:	6a1a      	ldr	r2, [r3, #32]
 80061a6:	23c0      	movs	r3, #192	; 0xc0
 80061a8:	009b      	lsls	r3, r3, #2
 80061aa:	4013      	ands	r3, r2
 80061ac:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d034      	beq.n	800621e <HAL_RCCEx_PeriphCLKConfig+0x112>
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	685a      	ldr	r2, [r3, #4]
 80061b8:	23c0      	movs	r3, #192	; 0xc0
 80061ba:	009b      	lsls	r3, r3, #2
 80061bc:	4013      	ands	r3, r2
 80061be:	68fa      	ldr	r2, [r7, #12]
 80061c0:	429a      	cmp	r2, r3
 80061c2:	d02c      	beq.n	800621e <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80061c4:	4b49      	ldr	r3, [pc, #292]	; (80062ec <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80061c6:	6a1b      	ldr	r3, [r3, #32]
 80061c8:	4a4a      	ldr	r2, [pc, #296]	; (80062f4 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 80061ca:	4013      	ands	r3, r2
 80061cc:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80061ce:	4b47      	ldr	r3, [pc, #284]	; (80062ec <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80061d0:	6a1a      	ldr	r2, [r3, #32]
 80061d2:	4b46      	ldr	r3, [pc, #280]	; (80062ec <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80061d4:	2180      	movs	r1, #128	; 0x80
 80061d6:	0249      	lsls	r1, r1, #9
 80061d8:	430a      	orrs	r2, r1
 80061da:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80061dc:	4b43      	ldr	r3, [pc, #268]	; (80062ec <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80061de:	6a1a      	ldr	r2, [r3, #32]
 80061e0:	4b42      	ldr	r3, [pc, #264]	; (80062ec <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80061e2:	4945      	ldr	r1, [pc, #276]	; (80062f8 <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 80061e4:	400a      	ands	r2, r1
 80061e6:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80061e8:	4b40      	ldr	r3, [pc, #256]	; (80062ec <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80061ea:	68fa      	ldr	r2, [r7, #12]
 80061ec:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	2201      	movs	r2, #1
 80061f2:	4013      	ands	r3, r2
 80061f4:	d013      	beq.n	800621e <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80061f6:	f7fc fb81 	bl	80028fc <HAL_GetTick>
 80061fa:	0003      	movs	r3, r0
 80061fc:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80061fe:	e009      	b.n	8006214 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006200:	f7fc fb7c 	bl	80028fc <HAL_GetTick>
 8006204:	0002      	movs	r2, r0
 8006206:	693b      	ldr	r3, [r7, #16]
 8006208:	1ad3      	subs	r3, r2, r3
 800620a:	4a3c      	ldr	r2, [pc, #240]	; (80062fc <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 800620c:	4293      	cmp	r3, r2
 800620e:	d901      	bls.n	8006214 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8006210:	2303      	movs	r3, #3
 8006212:	e067      	b.n	80062e4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006214:	4b35      	ldr	r3, [pc, #212]	; (80062ec <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006216:	6a1b      	ldr	r3, [r3, #32]
 8006218:	2202      	movs	r2, #2
 800621a:	4013      	ands	r3, r2
 800621c:	d0f0      	beq.n	8006200 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800621e:	4b33      	ldr	r3, [pc, #204]	; (80062ec <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006220:	6a1b      	ldr	r3, [r3, #32]
 8006222:	4a34      	ldr	r2, [pc, #208]	; (80062f4 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8006224:	4013      	ands	r3, r2
 8006226:	0019      	movs	r1, r3
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	685a      	ldr	r2, [r3, #4]
 800622c:	4b2f      	ldr	r3, [pc, #188]	; (80062ec <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800622e:	430a      	orrs	r2, r1
 8006230:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8006232:	2317      	movs	r3, #23
 8006234:	18fb      	adds	r3, r7, r3
 8006236:	781b      	ldrb	r3, [r3, #0]
 8006238:	2b01      	cmp	r3, #1
 800623a:	d105      	bne.n	8006248 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800623c:	4b2b      	ldr	r3, [pc, #172]	; (80062ec <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800623e:	69da      	ldr	r2, [r3, #28]
 8006240:	4b2a      	ldr	r3, [pc, #168]	; (80062ec <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006242:	492f      	ldr	r1, [pc, #188]	; (8006300 <HAL_RCCEx_PeriphCLKConfig+0x1f4>)
 8006244:	400a      	ands	r2, r1
 8006246:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	2201      	movs	r2, #1
 800624e:	4013      	ands	r3, r2
 8006250:	d009      	beq.n	8006266 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006252:	4b26      	ldr	r3, [pc, #152]	; (80062ec <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006254:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006256:	2203      	movs	r2, #3
 8006258:	4393      	bics	r3, r2
 800625a:	0019      	movs	r1, r3
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	689a      	ldr	r2, [r3, #8]
 8006260:	4b22      	ldr	r3, [pc, #136]	; (80062ec <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006262:	430a      	orrs	r2, r1
 8006264:	631a      	str	r2, [r3, #48]	; 0x30
  }
  
#if defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	2202      	movs	r2, #2
 800626c:	4013      	ands	r3, r2
 800626e:	d009      	beq.n	8006284 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006270:	4b1e      	ldr	r3, [pc, #120]	; (80062ec <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006272:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006274:	4a23      	ldr	r2, [pc, #140]	; (8006304 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8006276:	4013      	ands	r3, r2
 8006278:	0019      	movs	r1, r3
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	68da      	ldr	r2, [r3, #12]
 800627e:	4b1b      	ldr	r3, [pc, #108]	; (80062ec <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006280:	430a      	orrs	r2, r1
 8006282:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	2220      	movs	r2, #32
 800628a:	4013      	ands	r3, r2
 800628c:	d009      	beq.n	80062a2 <HAL_RCCEx_PeriphCLKConfig+0x196>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800628e:	4b17      	ldr	r3, [pc, #92]	; (80062ec <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006290:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006292:	2210      	movs	r2, #16
 8006294:	4393      	bics	r3, r2
 8006296:	0019      	movs	r1, r3
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	691a      	ldr	r2, [r3, #16]
 800629c:	4b13      	ldr	r3, [pc, #76]	; (80062ec <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800629e:	430a      	orrs	r2, r1
 80062a0:	631a      	str	r2, [r3, #48]	; 0x30
  }

#if defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F070x6)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	681a      	ldr	r2, [r3, #0]
 80062a6:	2380      	movs	r3, #128	; 0x80
 80062a8:	029b      	lsls	r3, r3, #10
 80062aa:	4013      	ands	r3, r2
 80062ac:	d009      	beq.n	80062c2 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80062ae:	4b0f      	ldr	r3, [pc, #60]	; (80062ec <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80062b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062b2:	2280      	movs	r2, #128	; 0x80
 80062b4:	4393      	bics	r3, r2
 80062b6:	0019      	movs	r1, r3
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	699a      	ldr	r2, [r3, #24]
 80062bc:	4b0b      	ldr	r3, [pc, #44]	; (80062ec <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80062be:	430a      	orrs	r2, r1
 80062c0:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	681a      	ldr	r2, [r3, #0]
 80062c6:	2380      	movs	r3, #128	; 0x80
 80062c8:	00db      	lsls	r3, r3, #3
 80062ca:	4013      	ands	r3, r2
 80062cc:	d009      	beq.n	80062e2 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80062ce:	4b07      	ldr	r3, [pc, #28]	; (80062ec <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80062d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062d2:	2240      	movs	r2, #64	; 0x40
 80062d4:	4393      	bics	r3, r2
 80062d6:	0019      	movs	r1, r3
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	695a      	ldr	r2, [r3, #20]
 80062dc:	4b03      	ldr	r3, [pc, #12]	; (80062ec <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80062de:	430a      	orrs	r2, r1
 80062e0:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 80062e2:	2300      	movs	r3, #0
}
 80062e4:	0018      	movs	r0, r3
 80062e6:	46bd      	mov	sp, r7
 80062e8:	b006      	add	sp, #24
 80062ea:	bd80      	pop	{r7, pc}
 80062ec:	40021000 	.word	0x40021000
 80062f0:	40007000 	.word	0x40007000
 80062f4:	fffffcff 	.word	0xfffffcff
 80062f8:	fffeffff 	.word	0xfffeffff
 80062fc:	00001388 	.word	0x00001388
 8006300:	efffffff 	.word	0xefffffff
 8006304:	fffcffff 	.word	0xfffcffff

08006308 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006308:	b580      	push	{r7, lr}
 800630a:	b084      	sub	sp, #16
 800630c:	af00      	add	r7, sp, #0
 800630e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	2b00      	cmp	r3, #0
 8006314:	d101      	bne.n	800631a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006316:	2301      	movs	r3, #1
 8006318:	e0a8      	b.n	800646c <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800631e:	2b00      	cmp	r3, #0
 8006320:	d109      	bne.n	8006336 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	685a      	ldr	r2, [r3, #4]
 8006326:	2382      	movs	r3, #130	; 0x82
 8006328:	005b      	lsls	r3, r3, #1
 800632a:	429a      	cmp	r2, r3
 800632c:	d009      	beq.n	8006342 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	2200      	movs	r2, #0
 8006332:	61da      	str	r2, [r3, #28]
 8006334:	e005      	b.n	8006342 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	2200      	movs	r2, #0
 800633a:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	2200      	movs	r2, #0
 8006340:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	2200      	movs	r2, #0
 8006346:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	225d      	movs	r2, #93	; 0x5d
 800634c:	5c9b      	ldrb	r3, [r3, r2]
 800634e:	b2db      	uxtb	r3, r3
 8006350:	2b00      	cmp	r3, #0
 8006352:	d107      	bne.n	8006364 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	225c      	movs	r2, #92	; 0x5c
 8006358:	2100      	movs	r1, #0
 800635a:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	0018      	movs	r0, r3
 8006360:	f7fb fe76 	bl	8002050 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	225d      	movs	r2, #93	; 0x5d
 8006368:	2102      	movs	r1, #2
 800636a:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	681a      	ldr	r2, [r3, #0]
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	2140      	movs	r1, #64	; 0x40
 8006378:	438a      	bics	r2, r1
 800637a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	68da      	ldr	r2, [r3, #12]
 8006380:	23e0      	movs	r3, #224	; 0xe0
 8006382:	00db      	lsls	r3, r3, #3
 8006384:	429a      	cmp	r2, r3
 8006386:	d902      	bls.n	800638e <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8006388:	2300      	movs	r3, #0
 800638a:	60fb      	str	r3, [r7, #12]
 800638c:	e002      	b.n	8006394 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800638e:	2380      	movs	r3, #128	; 0x80
 8006390:	015b      	lsls	r3, r3, #5
 8006392:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	68da      	ldr	r2, [r3, #12]
 8006398:	23f0      	movs	r3, #240	; 0xf0
 800639a:	011b      	lsls	r3, r3, #4
 800639c:	429a      	cmp	r2, r3
 800639e:	d008      	beq.n	80063b2 <HAL_SPI_Init+0xaa>
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	68da      	ldr	r2, [r3, #12]
 80063a4:	23e0      	movs	r3, #224	; 0xe0
 80063a6:	00db      	lsls	r3, r3, #3
 80063a8:	429a      	cmp	r2, r3
 80063aa:	d002      	beq.n	80063b2 <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	2200      	movs	r2, #0
 80063b0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	685a      	ldr	r2, [r3, #4]
 80063b6:	2382      	movs	r3, #130	; 0x82
 80063b8:	005b      	lsls	r3, r3, #1
 80063ba:	401a      	ands	r2, r3
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	6899      	ldr	r1, [r3, #8]
 80063c0:	2384      	movs	r3, #132	; 0x84
 80063c2:	021b      	lsls	r3, r3, #8
 80063c4:	400b      	ands	r3, r1
 80063c6:	431a      	orrs	r2, r3
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	691b      	ldr	r3, [r3, #16]
 80063cc:	2102      	movs	r1, #2
 80063ce:	400b      	ands	r3, r1
 80063d0:	431a      	orrs	r2, r3
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	695b      	ldr	r3, [r3, #20]
 80063d6:	2101      	movs	r1, #1
 80063d8:	400b      	ands	r3, r1
 80063da:	431a      	orrs	r2, r3
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	6999      	ldr	r1, [r3, #24]
 80063e0:	2380      	movs	r3, #128	; 0x80
 80063e2:	009b      	lsls	r3, r3, #2
 80063e4:	400b      	ands	r3, r1
 80063e6:	431a      	orrs	r2, r3
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	69db      	ldr	r3, [r3, #28]
 80063ec:	2138      	movs	r1, #56	; 0x38
 80063ee:	400b      	ands	r3, r1
 80063f0:	431a      	orrs	r2, r3
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	6a1b      	ldr	r3, [r3, #32]
 80063f6:	2180      	movs	r1, #128	; 0x80
 80063f8:	400b      	ands	r3, r1
 80063fa:	431a      	orrs	r2, r3
 80063fc:	0011      	movs	r1, r2
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006402:	2380      	movs	r3, #128	; 0x80
 8006404:	019b      	lsls	r3, r3, #6
 8006406:	401a      	ands	r2, r3
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	430a      	orrs	r2, r1
 800640e:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	699b      	ldr	r3, [r3, #24]
 8006414:	0c1b      	lsrs	r3, r3, #16
 8006416:	2204      	movs	r2, #4
 8006418:	401a      	ands	r2, r3
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800641e:	2110      	movs	r1, #16
 8006420:	400b      	ands	r3, r1
 8006422:	431a      	orrs	r2, r3
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006428:	2108      	movs	r1, #8
 800642a:	400b      	ands	r3, r1
 800642c:	431a      	orrs	r2, r3
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	68d9      	ldr	r1, [r3, #12]
 8006432:	23f0      	movs	r3, #240	; 0xf0
 8006434:	011b      	lsls	r3, r3, #4
 8006436:	400b      	ands	r3, r1
 8006438:	431a      	orrs	r2, r3
 800643a:	0011      	movs	r1, r2
 800643c:	68fa      	ldr	r2, [r7, #12]
 800643e:	2380      	movs	r3, #128	; 0x80
 8006440:	015b      	lsls	r3, r3, #5
 8006442:	401a      	ands	r2, r3
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	430a      	orrs	r2, r1
 800644a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	69da      	ldr	r2, [r3, #28]
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	4907      	ldr	r1, [pc, #28]	; (8006474 <HAL_SPI_Init+0x16c>)
 8006458:	400a      	ands	r2, r1
 800645a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	2200      	movs	r2, #0
 8006460:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	225d      	movs	r2, #93	; 0x5d
 8006466:	2101      	movs	r1, #1
 8006468:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800646a:	2300      	movs	r3, #0
}
 800646c:	0018      	movs	r0, r3
 800646e:	46bd      	mov	sp, r7
 8006470:	b004      	add	sp, #16
 8006472:	bd80      	pop	{r7, pc}
 8006474:	fffff7ff 	.word	0xfffff7ff

08006478 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006478:	b580      	push	{r7, lr}
 800647a:	b088      	sub	sp, #32
 800647c:	af00      	add	r7, sp, #0
 800647e:	60f8      	str	r0, [r7, #12]
 8006480:	60b9      	str	r1, [r7, #8]
 8006482:	603b      	str	r3, [r7, #0]
 8006484:	1dbb      	adds	r3, r7, #6
 8006486:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006488:	231f      	movs	r3, #31
 800648a:	18fb      	adds	r3, r7, r3
 800648c:	2200      	movs	r2, #0
 800648e:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	225c      	movs	r2, #92	; 0x5c
 8006494:	5c9b      	ldrb	r3, [r3, r2]
 8006496:	2b01      	cmp	r3, #1
 8006498:	d101      	bne.n	800649e <HAL_SPI_Transmit+0x26>
 800649a:	2302      	movs	r3, #2
 800649c:	e140      	b.n	8006720 <HAL_SPI_Transmit+0x2a8>
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	225c      	movs	r2, #92	; 0x5c
 80064a2:	2101      	movs	r1, #1
 80064a4:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80064a6:	f7fc fa29 	bl	80028fc <HAL_GetTick>
 80064aa:	0003      	movs	r3, r0
 80064ac:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 80064ae:	2316      	movs	r3, #22
 80064b0:	18fb      	adds	r3, r7, r3
 80064b2:	1dba      	adds	r2, r7, #6
 80064b4:	8812      	ldrh	r2, [r2, #0]
 80064b6:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	225d      	movs	r2, #93	; 0x5d
 80064bc:	5c9b      	ldrb	r3, [r3, r2]
 80064be:	b2db      	uxtb	r3, r3
 80064c0:	2b01      	cmp	r3, #1
 80064c2:	d004      	beq.n	80064ce <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 80064c4:	231f      	movs	r3, #31
 80064c6:	18fb      	adds	r3, r7, r3
 80064c8:	2202      	movs	r2, #2
 80064ca:	701a      	strb	r2, [r3, #0]
    goto error;
 80064cc:	e11d      	b.n	800670a <HAL_SPI_Transmit+0x292>
  }

  if ((pData == NULL) || (Size == 0U))
 80064ce:	68bb      	ldr	r3, [r7, #8]
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d003      	beq.n	80064dc <HAL_SPI_Transmit+0x64>
 80064d4:	1dbb      	adds	r3, r7, #6
 80064d6:	881b      	ldrh	r3, [r3, #0]
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d104      	bne.n	80064e6 <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 80064dc:	231f      	movs	r3, #31
 80064de:	18fb      	adds	r3, r7, r3
 80064e0:	2201      	movs	r2, #1
 80064e2:	701a      	strb	r2, [r3, #0]
    goto error;
 80064e4:	e111      	b.n	800670a <HAL_SPI_Transmit+0x292>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	225d      	movs	r2, #93	; 0x5d
 80064ea:	2103      	movs	r1, #3
 80064ec:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	2200      	movs	r2, #0
 80064f2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	68ba      	ldr	r2, [r7, #8]
 80064f8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	1dba      	adds	r2, r7, #6
 80064fe:	8812      	ldrh	r2, [r2, #0]
 8006500:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	1dba      	adds	r2, r7, #6
 8006506:	8812      	ldrh	r2, [r2, #0]
 8006508:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	2200      	movs	r2, #0
 800650e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	2244      	movs	r2, #68	; 0x44
 8006514:	2100      	movs	r1, #0
 8006516:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	2246      	movs	r2, #70	; 0x46
 800651c:	2100      	movs	r1, #0
 800651e:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	2200      	movs	r2, #0
 8006524:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	2200      	movs	r2, #0
 800652a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	689a      	ldr	r2, [r3, #8]
 8006530:	2380      	movs	r3, #128	; 0x80
 8006532:	021b      	lsls	r3, r3, #8
 8006534:	429a      	cmp	r2, r3
 8006536:	d110      	bne.n	800655a <HAL_SPI_Transmit+0xe2>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	681a      	ldr	r2, [r3, #0]
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	2140      	movs	r1, #64	; 0x40
 8006544:	438a      	bics	r2, r1
 8006546:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	681a      	ldr	r2, [r3, #0]
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	2180      	movs	r1, #128	; 0x80
 8006554:	01c9      	lsls	r1, r1, #7
 8006556:	430a      	orrs	r2, r1
 8006558:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	2240      	movs	r2, #64	; 0x40
 8006562:	4013      	ands	r3, r2
 8006564:	2b40      	cmp	r3, #64	; 0x40
 8006566:	d007      	beq.n	8006578 <HAL_SPI_Transmit+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	681a      	ldr	r2, [r3, #0]
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	2140      	movs	r1, #64	; 0x40
 8006574:	430a      	orrs	r2, r1
 8006576:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	68da      	ldr	r2, [r3, #12]
 800657c:	23e0      	movs	r3, #224	; 0xe0
 800657e:	00db      	lsls	r3, r3, #3
 8006580:	429a      	cmp	r2, r3
 8006582:	d94e      	bls.n	8006622 <HAL_SPI_Transmit+0x1aa>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	685b      	ldr	r3, [r3, #4]
 8006588:	2b00      	cmp	r3, #0
 800658a:	d004      	beq.n	8006596 <HAL_SPI_Transmit+0x11e>
 800658c:	2316      	movs	r3, #22
 800658e:	18fb      	adds	r3, r7, r3
 8006590:	881b      	ldrh	r3, [r3, #0]
 8006592:	2b01      	cmp	r3, #1
 8006594:	d13f      	bne.n	8006616 <HAL_SPI_Transmit+0x19e>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800659a:	881a      	ldrh	r2, [r3, #0]
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065a6:	1c9a      	adds	r2, r3, #2
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80065b0:	b29b      	uxth	r3, r3
 80065b2:	3b01      	subs	r3, #1
 80065b4:	b29a      	uxth	r2, r3
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80065ba:	e02c      	b.n	8006616 <HAL_SPI_Transmit+0x19e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	689b      	ldr	r3, [r3, #8]
 80065c2:	2202      	movs	r2, #2
 80065c4:	4013      	ands	r3, r2
 80065c6:	2b02      	cmp	r3, #2
 80065c8:	d112      	bne.n	80065f0 <HAL_SPI_Transmit+0x178>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065ce:	881a      	ldrh	r2, [r3, #0]
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065da:	1c9a      	adds	r2, r3, #2
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80065e4:	b29b      	uxth	r3, r3
 80065e6:	3b01      	subs	r3, #1
 80065e8:	b29a      	uxth	r2, r3
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	87da      	strh	r2, [r3, #62]	; 0x3e
 80065ee:	e012      	b.n	8006616 <HAL_SPI_Transmit+0x19e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80065f0:	f7fc f984 	bl	80028fc <HAL_GetTick>
 80065f4:	0002      	movs	r2, r0
 80065f6:	69bb      	ldr	r3, [r7, #24]
 80065f8:	1ad3      	subs	r3, r2, r3
 80065fa:	683a      	ldr	r2, [r7, #0]
 80065fc:	429a      	cmp	r2, r3
 80065fe:	d802      	bhi.n	8006606 <HAL_SPI_Transmit+0x18e>
 8006600:	683b      	ldr	r3, [r7, #0]
 8006602:	3301      	adds	r3, #1
 8006604:	d102      	bne.n	800660c <HAL_SPI_Transmit+0x194>
 8006606:	683b      	ldr	r3, [r7, #0]
 8006608:	2b00      	cmp	r3, #0
 800660a:	d104      	bne.n	8006616 <HAL_SPI_Transmit+0x19e>
        {
          errorcode = HAL_TIMEOUT;
 800660c:	231f      	movs	r3, #31
 800660e:	18fb      	adds	r3, r7, r3
 8006610:	2203      	movs	r2, #3
 8006612:	701a      	strb	r2, [r3, #0]
          goto error;
 8006614:	e079      	b.n	800670a <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800661a:	b29b      	uxth	r3, r3
 800661c:	2b00      	cmp	r3, #0
 800661e:	d1cd      	bne.n	80065bc <HAL_SPI_Transmit+0x144>
 8006620:	e04f      	b.n	80066c2 <HAL_SPI_Transmit+0x24a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	685b      	ldr	r3, [r3, #4]
 8006626:	2b00      	cmp	r3, #0
 8006628:	d004      	beq.n	8006634 <HAL_SPI_Transmit+0x1bc>
 800662a:	2316      	movs	r3, #22
 800662c:	18fb      	adds	r3, r7, r3
 800662e:	881b      	ldrh	r3, [r3, #0]
 8006630:	2b01      	cmp	r3, #1
 8006632:	d141      	bne.n	80066b8 <HAL_SPI_Transmit+0x240>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	330c      	adds	r3, #12
 800663e:	7812      	ldrb	r2, [r2, #0]
 8006640:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006646:	1c5a      	adds	r2, r3, #1
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006650:	b29b      	uxth	r3, r3
 8006652:	3b01      	subs	r3, #1
 8006654:	b29a      	uxth	r2, r3
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while (hspi->TxXferCount > 0U)
 800665a:	e02d      	b.n	80066b8 <HAL_SPI_Transmit+0x240>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	689b      	ldr	r3, [r3, #8]
 8006662:	2202      	movs	r2, #2
 8006664:	4013      	ands	r3, r2
 8006666:	2b02      	cmp	r3, #2
 8006668:	d113      	bne.n	8006692 <HAL_SPI_Transmit+0x21a>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	330c      	adds	r3, #12
 8006674:	7812      	ldrb	r2, [r2, #0]
 8006676:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800667c:	1c5a      	adds	r2, r3, #1
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006686:	b29b      	uxth	r3, r3
 8006688:	3b01      	subs	r3, #1
 800668a:	b29a      	uxth	r2, r3
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006690:	e012      	b.n	80066b8 <HAL_SPI_Transmit+0x240>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006692:	f7fc f933 	bl	80028fc <HAL_GetTick>
 8006696:	0002      	movs	r2, r0
 8006698:	69bb      	ldr	r3, [r7, #24]
 800669a:	1ad3      	subs	r3, r2, r3
 800669c:	683a      	ldr	r2, [r7, #0]
 800669e:	429a      	cmp	r2, r3
 80066a0:	d802      	bhi.n	80066a8 <HAL_SPI_Transmit+0x230>
 80066a2:	683b      	ldr	r3, [r7, #0]
 80066a4:	3301      	adds	r3, #1
 80066a6:	d102      	bne.n	80066ae <HAL_SPI_Transmit+0x236>
 80066a8:	683b      	ldr	r3, [r7, #0]
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d104      	bne.n	80066b8 <HAL_SPI_Transmit+0x240>
        {
          errorcode = HAL_TIMEOUT;
 80066ae:	231f      	movs	r3, #31
 80066b0:	18fb      	adds	r3, r7, r3
 80066b2:	2203      	movs	r2, #3
 80066b4:	701a      	strb	r2, [r3, #0]
          goto error;
 80066b6:	e028      	b.n	800670a <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80066bc:	b29b      	uxth	r3, r3
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d1cc      	bne.n	800665c <HAL_SPI_Transmit+0x1e4>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80066c2:	69ba      	ldr	r2, [r7, #24]
 80066c4:	6839      	ldr	r1, [r7, #0]
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	0018      	movs	r0, r3
 80066ca:	f000 fb2f 	bl	8006d2c <SPI_EndRxTxTransaction>
 80066ce:	1e03      	subs	r3, r0, #0
 80066d0:	d002      	beq.n	80066d8 <HAL_SPI_Transmit+0x260>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	2220      	movs	r2, #32
 80066d6:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	689b      	ldr	r3, [r3, #8]
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d10a      	bne.n	80066f6 <HAL_SPI_Transmit+0x27e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80066e0:	2300      	movs	r3, #0
 80066e2:	613b      	str	r3, [r7, #16]
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	68db      	ldr	r3, [r3, #12]
 80066ea:	613b      	str	r3, [r7, #16]
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	689b      	ldr	r3, [r3, #8]
 80066f2:	613b      	str	r3, [r7, #16]
 80066f4:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d004      	beq.n	8006708 <HAL_SPI_Transmit+0x290>
  {
    errorcode = HAL_ERROR;
 80066fe:	231f      	movs	r3, #31
 8006700:	18fb      	adds	r3, r7, r3
 8006702:	2201      	movs	r2, #1
 8006704:	701a      	strb	r2, [r3, #0]
 8006706:	e000      	b.n	800670a <HAL_SPI_Transmit+0x292>
  }

error:
 8006708:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	225d      	movs	r2, #93	; 0x5d
 800670e:	2101      	movs	r1, #1
 8006710:	5499      	strb	r1, [r3, r2]
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	225c      	movs	r2, #92	; 0x5c
 8006716:	2100      	movs	r1, #0
 8006718:	5499      	strb	r1, [r3, r2]
  return errorcode;
 800671a:	231f      	movs	r3, #31
 800671c:	18fb      	adds	r3, r7, r3
 800671e:	781b      	ldrb	r3, [r3, #0]
}
 8006720:	0018      	movs	r0, r3
 8006722:	46bd      	mov	sp, r7
 8006724:	b008      	add	sp, #32
 8006726:	bd80      	pop	{r7, pc}

08006728 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8006728:	b580      	push	{r7, lr}
 800672a:	b08a      	sub	sp, #40	; 0x28
 800672c:	af00      	add	r7, sp, #0
 800672e:	60f8      	str	r0, [r7, #12]
 8006730:	60b9      	str	r1, [r7, #8]
 8006732:	607a      	str	r2, [r7, #4]
 8006734:	001a      	movs	r2, r3
 8006736:	1cbb      	adds	r3, r7, #2
 8006738:	801a      	strh	r2, [r3, #0]
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800673a:	2301      	movs	r3, #1
 800673c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800673e:	2323      	movs	r3, #35	; 0x23
 8006740:	18fb      	adds	r3, r7, r3
 8006742:	2200      	movs	r2, #0
 8006744:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	225c      	movs	r2, #92	; 0x5c
 800674a:	5c9b      	ldrb	r3, [r3, r2]
 800674c:	2b01      	cmp	r3, #1
 800674e:	d101      	bne.n	8006754 <HAL_SPI_TransmitReceive+0x2c>
 8006750:	2302      	movs	r3, #2
 8006752:	e1b5      	b.n	8006ac0 <HAL_SPI_TransmitReceive+0x398>
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	225c      	movs	r2, #92	; 0x5c
 8006758:	2101      	movs	r1, #1
 800675a:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800675c:	f7fc f8ce 	bl	80028fc <HAL_GetTick>
 8006760:	0003      	movs	r3, r0
 8006762:	61fb      	str	r3, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006764:	201b      	movs	r0, #27
 8006766:	183b      	adds	r3, r7, r0
 8006768:	68fa      	ldr	r2, [r7, #12]
 800676a:	215d      	movs	r1, #93	; 0x5d
 800676c:	5c52      	ldrb	r2, [r2, r1]
 800676e:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	685b      	ldr	r3, [r3, #4]
 8006774:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8006776:	2312      	movs	r3, #18
 8006778:	18fb      	adds	r3, r7, r3
 800677a:	1cba      	adds	r2, r7, #2
 800677c:	8812      	ldrh	r2, [r2, #0]
 800677e:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006780:	183b      	adds	r3, r7, r0
 8006782:	781b      	ldrb	r3, [r3, #0]
 8006784:	2b01      	cmp	r3, #1
 8006786:	d011      	beq.n	80067ac <HAL_SPI_TransmitReceive+0x84>
 8006788:	697a      	ldr	r2, [r7, #20]
 800678a:	2382      	movs	r3, #130	; 0x82
 800678c:	005b      	lsls	r3, r3, #1
 800678e:	429a      	cmp	r2, r3
 8006790:	d107      	bne.n	80067a2 <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	689b      	ldr	r3, [r3, #8]
 8006796:	2b00      	cmp	r3, #0
 8006798:	d103      	bne.n	80067a2 <HAL_SPI_TransmitReceive+0x7a>
 800679a:	183b      	adds	r3, r7, r0
 800679c:	781b      	ldrb	r3, [r3, #0]
 800679e:	2b04      	cmp	r3, #4
 80067a0:	d004      	beq.n	80067ac <HAL_SPI_TransmitReceive+0x84>
  {
    errorcode = HAL_BUSY;
 80067a2:	2323      	movs	r3, #35	; 0x23
 80067a4:	18fb      	adds	r3, r7, r3
 80067a6:	2202      	movs	r2, #2
 80067a8:	701a      	strb	r2, [r3, #0]
    goto error;
 80067aa:	e17e      	b.n	8006aaa <HAL_SPI_TransmitReceive+0x382>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80067ac:	68bb      	ldr	r3, [r7, #8]
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d006      	beq.n	80067c0 <HAL_SPI_TransmitReceive+0x98>
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d003      	beq.n	80067c0 <HAL_SPI_TransmitReceive+0x98>
 80067b8:	1cbb      	adds	r3, r7, #2
 80067ba:	881b      	ldrh	r3, [r3, #0]
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d104      	bne.n	80067ca <HAL_SPI_TransmitReceive+0xa2>
  {
    errorcode = HAL_ERROR;
 80067c0:	2323      	movs	r3, #35	; 0x23
 80067c2:	18fb      	adds	r3, r7, r3
 80067c4:	2201      	movs	r2, #1
 80067c6:	701a      	strb	r2, [r3, #0]
    goto error;
 80067c8:	e16f      	b.n	8006aaa <HAL_SPI_TransmitReceive+0x382>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	225d      	movs	r2, #93	; 0x5d
 80067ce:	5c9b      	ldrb	r3, [r3, r2]
 80067d0:	b2db      	uxtb	r3, r3
 80067d2:	2b04      	cmp	r3, #4
 80067d4:	d003      	beq.n	80067de <HAL_SPI_TransmitReceive+0xb6>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	225d      	movs	r2, #93	; 0x5d
 80067da:	2105      	movs	r1, #5
 80067dc:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	2200      	movs	r2, #0
 80067e2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	687a      	ldr	r2, [r7, #4]
 80067e8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	1cba      	adds	r2, r7, #2
 80067ee:	2146      	movs	r1, #70	; 0x46
 80067f0:	8812      	ldrh	r2, [r2, #0]
 80067f2:	525a      	strh	r2, [r3, r1]
  hspi->RxXferSize  = Size;
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	1cba      	adds	r2, r7, #2
 80067f8:	2144      	movs	r1, #68	; 0x44
 80067fa:	8812      	ldrh	r2, [r2, #0]
 80067fc:	525a      	strh	r2, [r3, r1]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	68ba      	ldr	r2, [r7, #8]
 8006802:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	1cba      	adds	r2, r7, #2
 8006808:	8812      	ldrh	r2, [r2, #0]
 800680a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	1cba      	adds	r2, r7, #2
 8006810:	8812      	ldrh	r2, [r2, #0]
 8006812:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	2200      	movs	r2, #0
 8006818:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	2200      	movs	r2, #0
 800681e:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	68da      	ldr	r2, [r3, #12]
 8006824:	23e0      	movs	r3, #224	; 0xe0
 8006826:	00db      	lsls	r3, r3, #3
 8006828:	429a      	cmp	r2, r3
 800682a:	d908      	bls.n	800683e <HAL_SPI_TransmitReceive+0x116>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	685a      	ldr	r2, [r3, #4]
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	49a4      	ldr	r1, [pc, #656]	; (8006ac8 <HAL_SPI_TransmitReceive+0x3a0>)
 8006838:	400a      	ands	r2, r1
 800683a:	605a      	str	r2, [r3, #4]
 800683c:	e008      	b.n	8006850 <HAL_SPI_TransmitReceive+0x128>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	685a      	ldr	r2, [r3, #4]
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	2180      	movs	r1, #128	; 0x80
 800684a:	0149      	lsls	r1, r1, #5
 800684c:	430a      	orrs	r2, r1
 800684e:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	2240      	movs	r2, #64	; 0x40
 8006858:	4013      	ands	r3, r2
 800685a:	2b40      	cmp	r3, #64	; 0x40
 800685c:	d007      	beq.n	800686e <HAL_SPI_TransmitReceive+0x146>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	681a      	ldr	r2, [r3, #0]
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	2140      	movs	r1, #64	; 0x40
 800686a:	430a      	orrs	r2, r1
 800686c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	68da      	ldr	r2, [r3, #12]
 8006872:	23e0      	movs	r3, #224	; 0xe0
 8006874:	00db      	lsls	r3, r3, #3
 8006876:	429a      	cmp	r2, r3
 8006878:	d800      	bhi.n	800687c <HAL_SPI_TransmitReceive+0x154>
 800687a:	e07f      	b.n	800697c <HAL_SPI_TransmitReceive+0x254>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	685b      	ldr	r3, [r3, #4]
 8006880:	2b00      	cmp	r3, #0
 8006882:	d005      	beq.n	8006890 <HAL_SPI_TransmitReceive+0x168>
 8006884:	2312      	movs	r3, #18
 8006886:	18fb      	adds	r3, r7, r3
 8006888:	881b      	ldrh	r3, [r3, #0]
 800688a:	2b01      	cmp	r3, #1
 800688c:	d000      	beq.n	8006890 <HAL_SPI_TransmitReceive+0x168>
 800688e:	e069      	b.n	8006964 <HAL_SPI_TransmitReceive+0x23c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006894:	881a      	ldrh	r2, [r3, #0]
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068a0:	1c9a      	adds	r2, r3, #2
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80068aa:	b29b      	uxth	r3, r3
 80068ac:	3b01      	subs	r3, #1
 80068ae:	b29a      	uxth	r2, r3
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80068b4:	e056      	b.n	8006964 <HAL_SPI_TransmitReceive+0x23c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	689b      	ldr	r3, [r3, #8]
 80068bc:	2202      	movs	r2, #2
 80068be:	4013      	ands	r3, r2
 80068c0:	2b02      	cmp	r3, #2
 80068c2:	d11b      	bne.n	80068fc <HAL_SPI_TransmitReceive+0x1d4>
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80068c8:	b29b      	uxth	r3, r3
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d016      	beq.n	80068fc <HAL_SPI_TransmitReceive+0x1d4>
 80068ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068d0:	2b01      	cmp	r3, #1
 80068d2:	d113      	bne.n	80068fc <HAL_SPI_TransmitReceive+0x1d4>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068d8:	881a      	ldrh	r2, [r3, #0]
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068e4:	1c9a      	adds	r2, r3, #2
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80068ee:	b29b      	uxth	r3, r3
 80068f0:	3b01      	subs	r3, #1
 80068f2:	b29a      	uxth	r2, r3
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80068f8:	2300      	movs	r3, #0
 80068fa:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	689b      	ldr	r3, [r3, #8]
 8006902:	2201      	movs	r2, #1
 8006904:	4013      	ands	r3, r2
 8006906:	2b01      	cmp	r3, #1
 8006908:	d11c      	bne.n	8006944 <HAL_SPI_TransmitReceive+0x21c>
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	2246      	movs	r2, #70	; 0x46
 800690e:	5a9b      	ldrh	r3, [r3, r2]
 8006910:	b29b      	uxth	r3, r3
 8006912:	2b00      	cmp	r3, #0
 8006914:	d016      	beq.n	8006944 <HAL_SPI_TransmitReceive+0x21c>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	68da      	ldr	r2, [r3, #12]
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006920:	b292      	uxth	r2, r2
 8006922:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006928:	1c9a      	adds	r2, r3, #2
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	2246      	movs	r2, #70	; 0x46
 8006932:	5a9b      	ldrh	r3, [r3, r2]
 8006934:	b29b      	uxth	r3, r3
 8006936:	3b01      	subs	r3, #1
 8006938:	b299      	uxth	r1, r3
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	2246      	movs	r2, #70	; 0x46
 800693e:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006940:	2301      	movs	r3, #1
 8006942:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006944:	f7fb ffda 	bl	80028fc <HAL_GetTick>
 8006948:	0002      	movs	r2, r0
 800694a:	69fb      	ldr	r3, [r7, #28]
 800694c:	1ad3      	subs	r3, r2, r3
 800694e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006950:	429a      	cmp	r2, r3
 8006952:	d807      	bhi.n	8006964 <HAL_SPI_TransmitReceive+0x23c>
 8006954:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006956:	3301      	adds	r3, #1
 8006958:	d004      	beq.n	8006964 <HAL_SPI_TransmitReceive+0x23c>
      {
        errorcode = HAL_TIMEOUT;
 800695a:	2323      	movs	r3, #35	; 0x23
 800695c:	18fb      	adds	r3, r7, r3
 800695e:	2203      	movs	r2, #3
 8006960:	701a      	strb	r2, [r3, #0]
        goto error;
 8006962:	e0a2      	b.n	8006aaa <HAL_SPI_TransmitReceive+0x382>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006968:	b29b      	uxth	r3, r3
 800696a:	2b00      	cmp	r3, #0
 800696c:	d1a3      	bne.n	80068b6 <HAL_SPI_TransmitReceive+0x18e>
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	2246      	movs	r2, #70	; 0x46
 8006972:	5a9b      	ldrh	r3, [r3, r2]
 8006974:	b29b      	uxth	r3, r3
 8006976:	2b00      	cmp	r3, #0
 8006978:	d19d      	bne.n	80068b6 <HAL_SPI_TransmitReceive+0x18e>
 800697a:	e085      	b.n	8006a88 <HAL_SPI_TransmitReceive+0x360>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	685b      	ldr	r3, [r3, #4]
 8006980:	2b00      	cmp	r3, #0
 8006982:	d005      	beq.n	8006990 <HAL_SPI_TransmitReceive+0x268>
 8006984:	2312      	movs	r3, #18
 8006986:	18fb      	adds	r3, r7, r3
 8006988:	881b      	ldrh	r3, [r3, #0]
 800698a:	2b01      	cmp	r3, #1
 800698c:	d000      	beq.n	8006990 <HAL_SPI_TransmitReceive+0x268>
 800698e:	e070      	b.n	8006a72 <HAL_SPI_TransmitReceive+0x34a>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	330c      	adds	r3, #12
 800699a:	7812      	ldrb	r2, [r2, #0]
 800699c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069a2:	1c5a      	adds	r2, r3, #1
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80069ac:	b29b      	uxth	r3, r3
 80069ae:	3b01      	subs	r3, #1
 80069b0:	b29a      	uxth	r2, r3
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80069b6:	e05c      	b.n	8006a72 <HAL_SPI_TransmitReceive+0x34a>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	689b      	ldr	r3, [r3, #8]
 80069be:	2202      	movs	r2, #2
 80069c0:	4013      	ands	r3, r2
 80069c2:	2b02      	cmp	r3, #2
 80069c4:	d11c      	bne.n	8006a00 <HAL_SPI_TransmitReceive+0x2d8>
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80069ca:	b29b      	uxth	r3, r3
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d017      	beq.n	8006a00 <HAL_SPI_TransmitReceive+0x2d8>
 80069d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069d2:	2b01      	cmp	r3, #1
 80069d4:	d114      	bne.n	8006a00 <HAL_SPI_TransmitReceive+0x2d8>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	330c      	adds	r3, #12
 80069e0:	7812      	ldrb	r2, [r2, #0]
 80069e2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069e8:	1c5a      	adds	r2, r3, #1
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80069f2:	b29b      	uxth	r3, r3
 80069f4:	3b01      	subs	r3, #1
 80069f6:	b29a      	uxth	r2, r3
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80069fc:	2300      	movs	r3, #0
 80069fe:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	689b      	ldr	r3, [r3, #8]
 8006a06:	2201      	movs	r2, #1
 8006a08:	4013      	ands	r3, r2
 8006a0a:	2b01      	cmp	r3, #1
 8006a0c:	d11e      	bne.n	8006a4c <HAL_SPI_TransmitReceive+0x324>
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	2246      	movs	r2, #70	; 0x46
 8006a12:	5a9b      	ldrh	r3, [r3, r2]
 8006a14:	b29b      	uxth	r3, r3
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d018      	beq.n	8006a4c <HAL_SPI_TransmitReceive+0x324>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	330c      	adds	r3, #12
 8006a20:	001a      	movs	r2, r3
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a26:	7812      	ldrb	r2, [r2, #0]
 8006a28:	b2d2      	uxtb	r2, r2
 8006a2a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a30:	1c5a      	adds	r2, r3, #1
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	2246      	movs	r2, #70	; 0x46
 8006a3a:	5a9b      	ldrh	r3, [r3, r2]
 8006a3c:	b29b      	uxth	r3, r3
 8006a3e:	3b01      	subs	r3, #1
 8006a40:	b299      	uxth	r1, r3
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	2246      	movs	r2, #70	; 0x46
 8006a46:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006a48:	2301      	movs	r3, #1
 8006a4a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006a4c:	f7fb ff56 	bl	80028fc <HAL_GetTick>
 8006a50:	0002      	movs	r2, r0
 8006a52:	69fb      	ldr	r3, [r7, #28]
 8006a54:	1ad3      	subs	r3, r2, r3
 8006a56:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006a58:	429a      	cmp	r2, r3
 8006a5a:	d802      	bhi.n	8006a62 <HAL_SPI_TransmitReceive+0x33a>
 8006a5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a5e:	3301      	adds	r3, #1
 8006a60:	d102      	bne.n	8006a68 <HAL_SPI_TransmitReceive+0x340>
 8006a62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d104      	bne.n	8006a72 <HAL_SPI_TransmitReceive+0x34a>
      {
        errorcode = HAL_TIMEOUT;
 8006a68:	2323      	movs	r3, #35	; 0x23
 8006a6a:	18fb      	adds	r3, r7, r3
 8006a6c:	2203      	movs	r2, #3
 8006a6e:	701a      	strb	r2, [r3, #0]
        goto error;
 8006a70:	e01b      	b.n	8006aaa <HAL_SPI_TransmitReceive+0x382>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006a76:	b29b      	uxth	r3, r3
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d19d      	bne.n	80069b8 <HAL_SPI_TransmitReceive+0x290>
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	2246      	movs	r2, #70	; 0x46
 8006a80:	5a9b      	ldrh	r3, [r3, r2]
 8006a82:	b29b      	uxth	r3, r3
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	d197      	bne.n	80069b8 <HAL_SPI_TransmitReceive+0x290>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006a88:	69fa      	ldr	r2, [r7, #28]
 8006a8a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	0018      	movs	r0, r3
 8006a90:	f000 f94c 	bl	8006d2c <SPI_EndRxTxTransaction>
 8006a94:	1e03      	subs	r3, r0, #0
 8006a96:	d007      	beq.n	8006aa8 <HAL_SPI_TransmitReceive+0x380>
  {
    errorcode = HAL_ERROR;
 8006a98:	2323      	movs	r3, #35	; 0x23
 8006a9a:	18fb      	adds	r3, r7, r3
 8006a9c:	2201      	movs	r2, #1
 8006a9e:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	2220      	movs	r2, #32
 8006aa4:	661a      	str	r2, [r3, #96]	; 0x60
 8006aa6:	e000      	b.n	8006aaa <HAL_SPI_TransmitReceive+0x382>
  }

error :
 8006aa8:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	225d      	movs	r2, #93	; 0x5d
 8006aae:	2101      	movs	r1, #1
 8006ab0:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	225c      	movs	r2, #92	; 0x5c
 8006ab6:	2100      	movs	r1, #0
 8006ab8:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8006aba:	2323      	movs	r3, #35	; 0x23
 8006abc:	18fb      	adds	r3, r7, r3
 8006abe:	781b      	ldrb	r3, [r3, #0]
}
 8006ac0:	0018      	movs	r0, r3
 8006ac2:	46bd      	mov	sp, r7
 8006ac4:	b00a      	add	sp, #40	; 0x28
 8006ac6:	bd80      	pop	{r7, pc}
 8006ac8:	ffffefff 	.word	0xffffefff

08006acc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006acc:	b580      	push	{r7, lr}
 8006ace:	b088      	sub	sp, #32
 8006ad0:	af00      	add	r7, sp, #0
 8006ad2:	60f8      	str	r0, [r7, #12]
 8006ad4:	60b9      	str	r1, [r7, #8]
 8006ad6:	603b      	str	r3, [r7, #0]
 8006ad8:	1dfb      	adds	r3, r7, #7
 8006ada:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006adc:	f7fb ff0e 	bl	80028fc <HAL_GetTick>
 8006ae0:	0002      	movs	r2, r0
 8006ae2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ae4:	1a9b      	subs	r3, r3, r2
 8006ae6:	683a      	ldr	r2, [r7, #0]
 8006ae8:	18d3      	adds	r3, r2, r3
 8006aea:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006aec:	f7fb ff06 	bl	80028fc <HAL_GetTick>
 8006af0:	0003      	movs	r3, r0
 8006af2:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006af4:	4b3a      	ldr	r3, [pc, #232]	; (8006be0 <SPI_WaitFlagStateUntilTimeout+0x114>)
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	015b      	lsls	r3, r3, #5
 8006afa:	0d1b      	lsrs	r3, r3, #20
 8006afc:	69fa      	ldr	r2, [r7, #28]
 8006afe:	4353      	muls	r3, r2
 8006b00:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006b02:	e058      	b.n	8006bb6 <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006b04:	683b      	ldr	r3, [r7, #0]
 8006b06:	3301      	adds	r3, #1
 8006b08:	d055      	beq.n	8006bb6 <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006b0a:	f7fb fef7 	bl	80028fc <HAL_GetTick>
 8006b0e:	0002      	movs	r2, r0
 8006b10:	69bb      	ldr	r3, [r7, #24]
 8006b12:	1ad3      	subs	r3, r2, r3
 8006b14:	69fa      	ldr	r2, [r7, #28]
 8006b16:	429a      	cmp	r2, r3
 8006b18:	d902      	bls.n	8006b20 <SPI_WaitFlagStateUntilTimeout+0x54>
 8006b1a:	69fb      	ldr	r3, [r7, #28]
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d142      	bne.n	8006ba6 <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	685a      	ldr	r2, [r3, #4]
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	21e0      	movs	r1, #224	; 0xe0
 8006b2c:	438a      	bics	r2, r1
 8006b2e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	685a      	ldr	r2, [r3, #4]
 8006b34:	2382      	movs	r3, #130	; 0x82
 8006b36:	005b      	lsls	r3, r3, #1
 8006b38:	429a      	cmp	r2, r3
 8006b3a:	d113      	bne.n	8006b64 <SPI_WaitFlagStateUntilTimeout+0x98>
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	689a      	ldr	r2, [r3, #8]
 8006b40:	2380      	movs	r3, #128	; 0x80
 8006b42:	021b      	lsls	r3, r3, #8
 8006b44:	429a      	cmp	r2, r3
 8006b46:	d005      	beq.n	8006b54 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	689a      	ldr	r2, [r3, #8]
 8006b4c:	2380      	movs	r3, #128	; 0x80
 8006b4e:	00db      	lsls	r3, r3, #3
 8006b50:	429a      	cmp	r2, r3
 8006b52:	d107      	bne.n	8006b64 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	681a      	ldr	r2, [r3, #0]
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	2140      	movs	r1, #64	; 0x40
 8006b60:	438a      	bics	r2, r1
 8006b62:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006b68:	2380      	movs	r3, #128	; 0x80
 8006b6a:	019b      	lsls	r3, r3, #6
 8006b6c:	429a      	cmp	r2, r3
 8006b6e:	d110      	bne.n	8006b92 <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	681a      	ldr	r2, [r3, #0]
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	491a      	ldr	r1, [pc, #104]	; (8006be4 <SPI_WaitFlagStateUntilTimeout+0x118>)
 8006b7c:	400a      	ands	r2, r1
 8006b7e:	601a      	str	r2, [r3, #0]
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	681a      	ldr	r2, [r3, #0]
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	2180      	movs	r1, #128	; 0x80
 8006b8c:	0189      	lsls	r1, r1, #6
 8006b8e:	430a      	orrs	r2, r1
 8006b90:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	225d      	movs	r2, #93	; 0x5d
 8006b96:	2101      	movs	r1, #1
 8006b98:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	225c      	movs	r2, #92	; 0x5c
 8006b9e:	2100      	movs	r1, #0
 8006ba0:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8006ba2:	2303      	movs	r3, #3
 8006ba4:	e017      	b.n	8006bd6 <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8006ba6:	697b      	ldr	r3, [r7, #20]
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d101      	bne.n	8006bb0 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 8006bac:	2300      	movs	r3, #0
 8006bae:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006bb0:	697b      	ldr	r3, [r7, #20]
 8006bb2:	3b01      	subs	r3, #1
 8006bb4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	689b      	ldr	r3, [r3, #8]
 8006bbc:	68ba      	ldr	r2, [r7, #8]
 8006bbe:	4013      	ands	r3, r2
 8006bc0:	68ba      	ldr	r2, [r7, #8]
 8006bc2:	1ad3      	subs	r3, r2, r3
 8006bc4:	425a      	negs	r2, r3
 8006bc6:	4153      	adcs	r3, r2
 8006bc8:	b2db      	uxtb	r3, r3
 8006bca:	001a      	movs	r2, r3
 8006bcc:	1dfb      	adds	r3, r7, #7
 8006bce:	781b      	ldrb	r3, [r3, #0]
 8006bd0:	429a      	cmp	r2, r3
 8006bd2:	d197      	bne.n	8006b04 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006bd4:	2300      	movs	r3, #0
}
 8006bd6:	0018      	movs	r0, r3
 8006bd8:	46bd      	mov	sp, r7
 8006bda:	b008      	add	sp, #32
 8006bdc:	bd80      	pop	{r7, pc}
 8006bde:	46c0      	nop			; (mov r8, r8)
 8006be0:	20000000 	.word	0x20000000
 8006be4:	ffffdfff 	.word	0xffffdfff

08006be8 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006be8:	b580      	push	{r7, lr}
 8006bea:	b08a      	sub	sp, #40	; 0x28
 8006bec:	af00      	add	r7, sp, #0
 8006bee:	60f8      	str	r0, [r7, #12]
 8006bf0:	60b9      	str	r1, [r7, #8]
 8006bf2:	607a      	str	r2, [r7, #4]
 8006bf4:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8006bf6:	2317      	movs	r3, #23
 8006bf8:	18fb      	adds	r3, r7, r3
 8006bfa:	2200      	movs	r2, #0
 8006bfc:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8006bfe:	f7fb fe7d 	bl	80028fc <HAL_GetTick>
 8006c02:	0002      	movs	r2, r0
 8006c04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c06:	1a9b      	subs	r3, r3, r2
 8006c08:	683a      	ldr	r2, [r7, #0]
 8006c0a:	18d3      	adds	r3, r2, r3
 8006c0c:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8006c0e:	f7fb fe75 	bl	80028fc <HAL_GetTick>
 8006c12:	0003      	movs	r3, r0
 8006c14:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	330c      	adds	r3, #12
 8006c1c:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8006c1e:	4b41      	ldr	r3, [pc, #260]	; (8006d24 <SPI_WaitFifoStateUntilTimeout+0x13c>)
 8006c20:	681a      	ldr	r2, [r3, #0]
 8006c22:	0013      	movs	r3, r2
 8006c24:	009b      	lsls	r3, r3, #2
 8006c26:	189b      	adds	r3, r3, r2
 8006c28:	00da      	lsls	r2, r3, #3
 8006c2a:	1ad3      	subs	r3, r2, r3
 8006c2c:	0d1b      	lsrs	r3, r3, #20
 8006c2e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006c30:	4353      	muls	r3, r2
 8006c32:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8006c34:	e068      	b.n	8006d08 <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8006c36:	68ba      	ldr	r2, [r7, #8]
 8006c38:	23c0      	movs	r3, #192	; 0xc0
 8006c3a:	00db      	lsls	r3, r3, #3
 8006c3c:	429a      	cmp	r2, r3
 8006c3e:	d10a      	bne.n	8006c56 <SPI_WaitFifoStateUntilTimeout+0x6e>
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d107      	bne.n	8006c56 <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8006c46:	69fb      	ldr	r3, [r7, #28]
 8006c48:	781b      	ldrb	r3, [r3, #0]
 8006c4a:	b2da      	uxtb	r2, r3
 8006c4c:	2117      	movs	r1, #23
 8006c4e:	187b      	adds	r3, r7, r1
 8006c50:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8006c52:	187b      	adds	r3, r7, r1
 8006c54:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8006c56:	683b      	ldr	r3, [r7, #0]
 8006c58:	3301      	adds	r3, #1
 8006c5a:	d055      	beq.n	8006d08 <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006c5c:	f7fb fe4e 	bl	80028fc <HAL_GetTick>
 8006c60:	0002      	movs	r2, r0
 8006c62:	6a3b      	ldr	r3, [r7, #32]
 8006c64:	1ad3      	subs	r3, r2, r3
 8006c66:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006c68:	429a      	cmp	r2, r3
 8006c6a:	d902      	bls.n	8006c72 <SPI_WaitFifoStateUntilTimeout+0x8a>
 8006c6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d142      	bne.n	8006cf8 <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	685a      	ldr	r2, [r3, #4]
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	21e0      	movs	r1, #224	; 0xe0
 8006c7e:	438a      	bics	r2, r1
 8006c80:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	685a      	ldr	r2, [r3, #4]
 8006c86:	2382      	movs	r3, #130	; 0x82
 8006c88:	005b      	lsls	r3, r3, #1
 8006c8a:	429a      	cmp	r2, r3
 8006c8c:	d113      	bne.n	8006cb6 <SPI_WaitFifoStateUntilTimeout+0xce>
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	689a      	ldr	r2, [r3, #8]
 8006c92:	2380      	movs	r3, #128	; 0x80
 8006c94:	021b      	lsls	r3, r3, #8
 8006c96:	429a      	cmp	r2, r3
 8006c98:	d005      	beq.n	8006ca6 <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	689a      	ldr	r2, [r3, #8]
 8006c9e:	2380      	movs	r3, #128	; 0x80
 8006ca0:	00db      	lsls	r3, r3, #3
 8006ca2:	429a      	cmp	r2, r3
 8006ca4:	d107      	bne.n	8006cb6 <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	681a      	ldr	r2, [r3, #0]
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	2140      	movs	r1, #64	; 0x40
 8006cb2:	438a      	bics	r2, r1
 8006cb4:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006cba:	2380      	movs	r3, #128	; 0x80
 8006cbc:	019b      	lsls	r3, r3, #6
 8006cbe:	429a      	cmp	r2, r3
 8006cc0:	d110      	bne.n	8006ce4 <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	681a      	ldr	r2, [r3, #0]
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	4916      	ldr	r1, [pc, #88]	; (8006d28 <SPI_WaitFifoStateUntilTimeout+0x140>)
 8006cce:	400a      	ands	r2, r1
 8006cd0:	601a      	str	r2, [r3, #0]
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	681a      	ldr	r2, [r3, #0]
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	2180      	movs	r1, #128	; 0x80
 8006cde:	0189      	lsls	r1, r1, #6
 8006ce0:	430a      	orrs	r2, r1
 8006ce2:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	225d      	movs	r2, #93	; 0x5d
 8006ce8:	2101      	movs	r1, #1
 8006cea:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	225c      	movs	r2, #92	; 0x5c
 8006cf0:	2100      	movs	r1, #0
 8006cf2:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8006cf4:	2303      	movs	r3, #3
 8006cf6:	e010      	b.n	8006d1a <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8006cf8:	69bb      	ldr	r3, [r7, #24]
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d101      	bne.n	8006d02 <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 8006cfe:	2300      	movs	r3, #0
 8006d00:	627b      	str	r3, [r7, #36]	; 0x24
      }      
      count--;
 8006d02:	69bb      	ldr	r3, [r7, #24]
 8006d04:	3b01      	subs	r3, #1
 8006d06:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	689b      	ldr	r3, [r3, #8]
 8006d0e:	68ba      	ldr	r2, [r7, #8]
 8006d10:	4013      	ands	r3, r2
 8006d12:	687a      	ldr	r2, [r7, #4]
 8006d14:	429a      	cmp	r2, r3
 8006d16:	d18e      	bne.n	8006c36 <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 8006d18:	2300      	movs	r3, #0
}
 8006d1a:	0018      	movs	r0, r3
 8006d1c:	46bd      	mov	sp, r7
 8006d1e:	b00a      	add	sp, #40	; 0x28
 8006d20:	bd80      	pop	{r7, pc}
 8006d22:	46c0      	nop			; (mov r8, r8)
 8006d24:	20000000 	.word	0x20000000
 8006d28:	ffffdfff 	.word	0xffffdfff

08006d2c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006d2c:	b580      	push	{r7, lr}
 8006d2e:	b086      	sub	sp, #24
 8006d30:	af02      	add	r7, sp, #8
 8006d32:	60f8      	str	r0, [r7, #12]
 8006d34:	60b9      	str	r1, [r7, #8]
 8006d36:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006d38:	68ba      	ldr	r2, [r7, #8]
 8006d3a:	23c0      	movs	r3, #192	; 0xc0
 8006d3c:	0159      	lsls	r1, r3, #5
 8006d3e:	68f8      	ldr	r0, [r7, #12]
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	9300      	str	r3, [sp, #0]
 8006d44:	0013      	movs	r3, r2
 8006d46:	2200      	movs	r2, #0
 8006d48:	f7ff ff4e 	bl	8006be8 <SPI_WaitFifoStateUntilTimeout>
 8006d4c:	1e03      	subs	r3, r0, #0
 8006d4e:	d007      	beq.n	8006d60 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006d54:	2220      	movs	r2, #32
 8006d56:	431a      	orrs	r2, r3
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006d5c:	2303      	movs	r3, #3
 8006d5e:	e027      	b.n	8006db0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006d60:	68ba      	ldr	r2, [r7, #8]
 8006d62:	68f8      	ldr	r0, [r7, #12]
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	9300      	str	r3, [sp, #0]
 8006d68:	0013      	movs	r3, r2
 8006d6a:	2200      	movs	r2, #0
 8006d6c:	2180      	movs	r1, #128	; 0x80
 8006d6e:	f7ff fead 	bl	8006acc <SPI_WaitFlagStateUntilTimeout>
 8006d72:	1e03      	subs	r3, r0, #0
 8006d74:	d007      	beq.n	8006d86 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006d7a:	2220      	movs	r2, #32
 8006d7c:	431a      	orrs	r2, r3
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006d82:	2303      	movs	r3, #3
 8006d84:	e014      	b.n	8006db0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006d86:	68ba      	ldr	r2, [r7, #8]
 8006d88:	23c0      	movs	r3, #192	; 0xc0
 8006d8a:	00d9      	lsls	r1, r3, #3
 8006d8c:	68f8      	ldr	r0, [r7, #12]
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	9300      	str	r3, [sp, #0]
 8006d92:	0013      	movs	r3, r2
 8006d94:	2200      	movs	r2, #0
 8006d96:	f7ff ff27 	bl	8006be8 <SPI_WaitFifoStateUntilTimeout>
 8006d9a:	1e03      	subs	r3, r0, #0
 8006d9c:	d007      	beq.n	8006dae <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006da2:	2220      	movs	r2, #32
 8006da4:	431a      	orrs	r2, r3
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006daa:	2303      	movs	r3, #3
 8006dac:	e000      	b.n	8006db0 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8006dae:	2300      	movs	r3, #0
}
 8006db0:	0018      	movs	r0, r3
 8006db2:	46bd      	mov	sp, r7
 8006db4:	b004      	add	sp, #16
 8006db6:	bd80      	pop	{r7, pc}

08006db8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006db8:	b580      	push	{r7, lr}
 8006dba:	b082      	sub	sp, #8
 8006dbc:	af00      	add	r7, sp, #0
 8006dbe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d101      	bne.n	8006dca <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006dc6:	2301      	movs	r3, #1
 8006dc8:	e042      	b.n	8006e50 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	223d      	movs	r2, #61	; 0x3d
 8006dce:	5c9b      	ldrb	r3, [r3, r2]
 8006dd0:	b2db      	uxtb	r3, r3
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d107      	bne.n	8006de6 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	223c      	movs	r2, #60	; 0x3c
 8006dda:	2100      	movs	r1, #0
 8006ddc:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	0018      	movs	r0, r3
 8006de2:	f7fb f983 	bl	80020ec <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	223d      	movs	r2, #61	; 0x3d
 8006dea:	2102      	movs	r1, #2
 8006dec:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	681a      	ldr	r2, [r3, #0]
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	3304      	adds	r3, #4
 8006df6:	0019      	movs	r1, r3
 8006df8:	0010      	movs	r0, r2
 8006dfa:	f000 fa65 	bl	80072c8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	2246      	movs	r2, #70	; 0x46
 8006e02:	2101      	movs	r1, #1
 8006e04:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	223e      	movs	r2, #62	; 0x3e
 8006e0a:	2101      	movs	r1, #1
 8006e0c:	5499      	strb	r1, [r3, r2]
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	223f      	movs	r2, #63	; 0x3f
 8006e12:	2101      	movs	r1, #1
 8006e14:	5499      	strb	r1, [r3, r2]
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	2240      	movs	r2, #64	; 0x40
 8006e1a:	2101      	movs	r1, #1
 8006e1c:	5499      	strb	r1, [r3, r2]
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	2241      	movs	r2, #65	; 0x41
 8006e22:	2101      	movs	r1, #1
 8006e24:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	2242      	movs	r2, #66	; 0x42
 8006e2a:	2101      	movs	r1, #1
 8006e2c:	5499      	strb	r1, [r3, r2]
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	2243      	movs	r2, #67	; 0x43
 8006e32:	2101      	movs	r1, #1
 8006e34:	5499      	strb	r1, [r3, r2]
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	2244      	movs	r2, #68	; 0x44
 8006e3a:	2101      	movs	r1, #1
 8006e3c:	5499      	strb	r1, [r3, r2]
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	2245      	movs	r2, #69	; 0x45
 8006e42:	2101      	movs	r1, #1
 8006e44:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	223d      	movs	r2, #61	; 0x3d
 8006e4a:	2101      	movs	r1, #1
 8006e4c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006e4e:	2300      	movs	r3, #0
}
 8006e50:	0018      	movs	r0, r3
 8006e52:	46bd      	mov	sp, r7
 8006e54:	b002      	add	sp, #8
 8006e56:	bd80      	pop	{r7, pc}

08006e58 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006e58:	b580      	push	{r7, lr}
 8006e5a:	b084      	sub	sp, #16
 8006e5c:	af00      	add	r7, sp, #0
 8006e5e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	223d      	movs	r2, #61	; 0x3d
 8006e64:	5c9b      	ldrb	r3, [r3, r2]
 8006e66:	b2db      	uxtb	r3, r3
 8006e68:	2b01      	cmp	r3, #1
 8006e6a:	d001      	beq.n	8006e70 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006e6c:	2301      	movs	r3, #1
 8006e6e:	e03b      	b.n	8006ee8 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	223d      	movs	r2, #61	; 0x3d
 8006e74:	2102      	movs	r1, #2
 8006e76:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	68da      	ldr	r2, [r3, #12]
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	2101      	movs	r1, #1
 8006e84:	430a      	orrs	r2, r1
 8006e86:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	4a18      	ldr	r2, [pc, #96]	; (8006ef0 <HAL_TIM_Base_Start_IT+0x98>)
 8006e8e:	4293      	cmp	r3, r2
 8006e90:	d00f      	beq.n	8006eb2 <HAL_TIM_Base_Start_IT+0x5a>
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	681a      	ldr	r2, [r3, #0]
 8006e96:	2380      	movs	r3, #128	; 0x80
 8006e98:	05db      	lsls	r3, r3, #23
 8006e9a:	429a      	cmp	r2, r3
 8006e9c:	d009      	beq.n	8006eb2 <HAL_TIM_Base_Start_IT+0x5a>
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	4a14      	ldr	r2, [pc, #80]	; (8006ef4 <HAL_TIM_Base_Start_IT+0x9c>)
 8006ea4:	4293      	cmp	r3, r2
 8006ea6:	d004      	beq.n	8006eb2 <HAL_TIM_Base_Start_IT+0x5a>
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	4a12      	ldr	r2, [pc, #72]	; (8006ef8 <HAL_TIM_Base_Start_IT+0xa0>)
 8006eae:	4293      	cmp	r3, r2
 8006eb0:	d111      	bne.n	8006ed6 <HAL_TIM_Base_Start_IT+0x7e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	689b      	ldr	r3, [r3, #8]
 8006eb8:	2207      	movs	r2, #7
 8006eba:	4013      	ands	r3, r2
 8006ebc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	2b06      	cmp	r3, #6
 8006ec2:	d010      	beq.n	8006ee6 <HAL_TIM_Base_Start_IT+0x8e>
    {
      __HAL_TIM_ENABLE(htim);
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	681a      	ldr	r2, [r3, #0]
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	2101      	movs	r1, #1
 8006ed0:	430a      	orrs	r2, r1
 8006ed2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006ed4:	e007      	b.n	8006ee6 <HAL_TIM_Base_Start_IT+0x8e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	681a      	ldr	r2, [r3, #0]
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	2101      	movs	r1, #1
 8006ee2:	430a      	orrs	r2, r1
 8006ee4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006ee6:	2300      	movs	r3, #0
}
 8006ee8:	0018      	movs	r0, r3
 8006eea:	46bd      	mov	sp, r7
 8006eec:	b004      	add	sp, #16
 8006eee:	bd80      	pop	{r7, pc}
 8006ef0:	40012c00 	.word	0x40012c00
 8006ef4:	40000400 	.word	0x40000400
 8006ef8:	40014000 	.word	0x40014000

08006efc <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8006efc:	b580      	push	{r7, lr}
 8006efe:	b082      	sub	sp, #8
 8006f00:	af00      	add	r7, sp, #0
 8006f02:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d101      	bne.n	8006f0e <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8006f0a:	2301      	movs	r3, #1
 8006f0c:	e042      	b.n	8006f94 <HAL_TIM_OC_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	223d      	movs	r2, #61	; 0x3d
 8006f12:	5c9b      	ldrb	r3, [r3, r2]
 8006f14:	b2db      	uxtb	r3, r3
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d107      	bne.n	8006f2a <HAL_TIM_OC_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	223c      	movs	r2, #60	; 0x3c
 8006f1e:	2100      	movs	r1, #0
 8006f20:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	0018      	movs	r0, r3
 8006f26:	f000 f839 	bl	8006f9c <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	223d      	movs	r2, #61	; 0x3d
 8006f2e:	2102      	movs	r1, #2
 8006f30:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	681a      	ldr	r2, [r3, #0]
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	3304      	adds	r3, #4
 8006f3a:	0019      	movs	r1, r3
 8006f3c:	0010      	movs	r0, r2
 8006f3e:	f000 f9c3 	bl	80072c8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	2246      	movs	r2, #70	; 0x46
 8006f46:	2101      	movs	r1, #1
 8006f48:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	223e      	movs	r2, #62	; 0x3e
 8006f4e:	2101      	movs	r1, #1
 8006f50:	5499      	strb	r1, [r3, r2]
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	223f      	movs	r2, #63	; 0x3f
 8006f56:	2101      	movs	r1, #1
 8006f58:	5499      	strb	r1, [r3, r2]
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	2240      	movs	r2, #64	; 0x40
 8006f5e:	2101      	movs	r1, #1
 8006f60:	5499      	strb	r1, [r3, r2]
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	2241      	movs	r2, #65	; 0x41
 8006f66:	2101      	movs	r1, #1
 8006f68:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	2242      	movs	r2, #66	; 0x42
 8006f6e:	2101      	movs	r1, #1
 8006f70:	5499      	strb	r1, [r3, r2]
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	2243      	movs	r2, #67	; 0x43
 8006f76:	2101      	movs	r1, #1
 8006f78:	5499      	strb	r1, [r3, r2]
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	2244      	movs	r2, #68	; 0x44
 8006f7e:	2101      	movs	r1, #1
 8006f80:	5499      	strb	r1, [r3, r2]
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	2245      	movs	r2, #69	; 0x45
 8006f86:	2101      	movs	r1, #1
 8006f88:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	223d      	movs	r2, #61	; 0x3d
 8006f8e:	2101      	movs	r1, #1
 8006f90:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006f92:	2300      	movs	r3, #0
}
 8006f94:	0018      	movs	r0, r3
 8006f96:	46bd      	mov	sp, r7
 8006f98:	b002      	add	sp, #8
 8006f9a:	bd80      	pop	{r7, pc}

08006f9c <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8006f9c:	b580      	push	{r7, lr}
 8006f9e:	b082      	sub	sp, #8
 8006fa0:	af00      	add	r7, sp, #0
 8006fa2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8006fa4:	46c0      	nop			; (mov r8, r8)
 8006fa6:	46bd      	mov	sp, r7
 8006fa8:	b002      	add	sp, #8
 8006faa:	bd80      	pop	{r7, pc}

08006fac <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006fac:	b580      	push	{r7, lr}
 8006fae:	b082      	sub	sp, #8
 8006fb0:	af00      	add	r7, sp, #0
 8006fb2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	691b      	ldr	r3, [r3, #16]
 8006fba:	2202      	movs	r2, #2
 8006fbc:	4013      	ands	r3, r2
 8006fbe:	2b02      	cmp	r3, #2
 8006fc0:	d124      	bne.n	800700c <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	68db      	ldr	r3, [r3, #12]
 8006fc8:	2202      	movs	r2, #2
 8006fca:	4013      	ands	r3, r2
 8006fcc:	2b02      	cmp	r3, #2
 8006fce:	d11d      	bne.n	800700c <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	2203      	movs	r2, #3
 8006fd6:	4252      	negs	r2, r2
 8006fd8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	2201      	movs	r2, #1
 8006fde:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	699b      	ldr	r3, [r3, #24]
 8006fe6:	2203      	movs	r2, #3
 8006fe8:	4013      	ands	r3, r2
 8006fea:	d004      	beq.n	8006ff6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	0018      	movs	r0, r3
 8006ff0:	f000 f952 	bl	8007298 <HAL_TIM_IC_CaptureCallback>
 8006ff4:	e007      	b.n	8007006 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	0018      	movs	r0, r3
 8006ffa:	f000 f945 	bl	8007288 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	0018      	movs	r0, r3
 8007002:	f000 f951 	bl	80072a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	2200      	movs	r2, #0
 800700a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	691b      	ldr	r3, [r3, #16]
 8007012:	2204      	movs	r2, #4
 8007014:	4013      	ands	r3, r2
 8007016:	2b04      	cmp	r3, #4
 8007018:	d125      	bne.n	8007066 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	68db      	ldr	r3, [r3, #12]
 8007020:	2204      	movs	r2, #4
 8007022:	4013      	ands	r3, r2
 8007024:	2b04      	cmp	r3, #4
 8007026:	d11e      	bne.n	8007066 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	2205      	movs	r2, #5
 800702e:	4252      	negs	r2, r2
 8007030:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	2202      	movs	r2, #2
 8007036:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	699a      	ldr	r2, [r3, #24]
 800703e:	23c0      	movs	r3, #192	; 0xc0
 8007040:	009b      	lsls	r3, r3, #2
 8007042:	4013      	ands	r3, r2
 8007044:	d004      	beq.n	8007050 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	0018      	movs	r0, r3
 800704a:	f000 f925 	bl	8007298 <HAL_TIM_IC_CaptureCallback>
 800704e:	e007      	b.n	8007060 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	0018      	movs	r0, r3
 8007054:	f000 f918 	bl	8007288 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	0018      	movs	r0, r3
 800705c:	f000 f924 	bl	80072a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	2200      	movs	r2, #0
 8007064:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	691b      	ldr	r3, [r3, #16]
 800706c:	2208      	movs	r2, #8
 800706e:	4013      	ands	r3, r2
 8007070:	2b08      	cmp	r3, #8
 8007072:	d124      	bne.n	80070be <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	68db      	ldr	r3, [r3, #12]
 800707a:	2208      	movs	r2, #8
 800707c:	4013      	ands	r3, r2
 800707e:	2b08      	cmp	r3, #8
 8007080:	d11d      	bne.n	80070be <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	2209      	movs	r2, #9
 8007088:	4252      	negs	r2, r2
 800708a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	2204      	movs	r2, #4
 8007090:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	69db      	ldr	r3, [r3, #28]
 8007098:	2203      	movs	r2, #3
 800709a:	4013      	ands	r3, r2
 800709c:	d004      	beq.n	80070a8 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	0018      	movs	r0, r3
 80070a2:	f000 f8f9 	bl	8007298 <HAL_TIM_IC_CaptureCallback>
 80070a6:	e007      	b.n	80070b8 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	0018      	movs	r0, r3
 80070ac:	f000 f8ec 	bl	8007288 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	0018      	movs	r0, r3
 80070b4:	f000 f8f8 	bl	80072a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	2200      	movs	r2, #0
 80070bc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	691b      	ldr	r3, [r3, #16]
 80070c4:	2210      	movs	r2, #16
 80070c6:	4013      	ands	r3, r2
 80070c8:	2b10      	cmp	r3, #16
 80070ca:	d125      	bne.n	8007118 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	68db      	ldr	r3, [r3, #12]
 80070d2:	2210      	movs	r2, #16
 80070d4:	4013      	ands	r3, r2
 80070d6:	2b10      	cmp	r3, #16
 80070d8:	d11e      	bne.n	8007118 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	2211      	movs	r2, #17
 80070e0:	4252      	negs	r2, r2
 80070e2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	2208      	movs	r2, #8
 80070e8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	69da      	ldr	r2, [r3, #28]
 80070f0:	23c0      	movs	r3, #192	; 0xc0
 80070f2:	009b      	lsls	r3, r3, #2
 80070f4:	4013      	ands	r3, r2
 80070f6:	d004      	beq.n	8007102 <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	0018      	movs	r0, r3
 80070fc:	f000 f8cc 	bl	8007298 <HAL_TIM_IC_CaptureCallback>
 8007100:	e007      	b.n	8007112 <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	0018      	movs	r0, r3
 8007106:	f000 f8bf 	bl	8007288 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	0018      	movs	r0, r3
 800710e:	f000 f8cb 	bl	80072a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	2200      	movs	r2, #0
 8007116:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	691b      	ldr	r3, [r3, #16]
 800711e:	2201      	movs	r2, #1
 8007120:	4013      	ands	r3, r2
 8007122:	2b01      	cmp	r3, #1
 8007124:	d10f      	bne.n	8007146 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	68db      	ldr	r3, [r3, #12]
 800712c:	2201      	movs	r2, #1
 800712e:	4013      	ands	r3, r2
 8007130:	2b01      	cmp	r3, #1
 8007132:	d108      	bne.n	8007146 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	2202      	movs	r2, #2
 800713a:	4252      	negs	r2, r2
 800713c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	0018      	movs	r0, r3
 8007142:	f7f9 fe1f 	bl	8000d84 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	691b      	ldr	r3, [r3, #16]
 800714c:	2280      	movs	r2, #128	; 0x80
 800714e:	4013      	ands	r3, r2
 8007150:	2b80      	cmp	r3, #128	; 0x80
 8007152:	d10f      	bne.n	8007174 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	68db      	ldr	r3, [r3, #12]
 800715a:	2280      	movs	r2, #128	; 0x80
 800715c:	4013      	ands	r3, r2
 800715e:	2b80      	cmp	r3, #128	; 0x80
 8007160:	d108      	bne.n	8007174 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	2281      	movs	r2, #129	; 0x81
 8007168:	4252      	negs	r2, r2
 800716a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	0018      	movs	r0, r3
 8007170:	f000 fb2e 	bl	80077d0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	691b      	ldr	r3, [r3, #16]
 800717a:	2240      	movs	r2, #64	; 0x40
 800717c:	4013      	ands	r3, r2
 800717e:	2b40      	cmp	r3, #64	; 0x40
 8007180:	d10f      	bne.n	80071a2 <HAL_TIM_IRQHandler+0x1f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	68db      	ldr	r3, [r3, #12]
 8007188:	2240      	movs	r2, #64	; 0x40
 800718a:	4013      	ands	r3, r2
 800718c:	2b40      	cmp	r3, #64	; 0x40
 800718e:	d108      	bne.n	80071a2 <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	2241      	movs	r2, #65	; 0x41
 8007196:	4252      	negs	r2, r2
 8007198:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	0018      	movs	r0, r3
 800719e:	f000 f88b 	bl	80072b8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	691b      	ldr	r3, [r3, #16]
 80071a8:	2220      	movs	r2, #32
 80071aa:	4013      	ands	r3, r2
 80071ac:	2b20      	cmp	r3, #32
 80071ae:	d10f      	bne.n	80071d0 <HAL_TIM_IRQHandler+0x224>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	68db      	ldr	r3, [r3, #12]
 80071b6:	2220      	movs	r2, #32
 80071b8:	4013      	ands	r3, r2
 80071ba:	2b20      	cmp	r3, #32
 80071bc:	d108      	bne.n	80071d0 <HAL_TIM_IRQHandler+0x224>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	2221      	movs	r2, #33	; 0x21
 80071c4:	4252      	negs	r2, r2
 80071c6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	0018      	movs	r0, r3
 80071cc:	f000 faf8 	bl	80077c0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80071d0:	46c0      	nop			; (mov r8, r8)
 80071d2:	46bd      	mov	sp, r7
 80071d4:	b002      	add	sp, #8
 80071d6:	bd80      	pop	{r7, pc}

080071d8 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 80071d8:	b580      	push	{r7, lr}
 80071da:	b086      	sub	sp, #24
 80071dc:	af00      	add	r7, sp, #0
 80071de:	60f8      	str	r0, [r7, #12]
 80071e0:	60b9      	str	r1, [r7, #8]
 80071e2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80071e4:	2317      	movs	r3, #23
 80071e6:	18fb      	adds	r3, r7, r3
 80071e8:	2200      	movs	r2, #0
 80071ea:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	223c      	movs	r2, #60	; 0x3c
 80071f0:	5c9b      	ldrb	r3, [r3, r2]
 80071f2:	2b01      	cmp	r3, #1
 80071f4:	d101      	bne.n	80071fa <HAL_TIM_OC_ConfigChannel+0x22>
 80071f6:	2302      	movs	r3, #2
 80071f8:	e042      	b.n	8007280 <HAL_TIM_OC_ConfigChannel+0xa8>
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	223c      	movs	r2, #60	; 0x3c
 80071fe:	2101      	movs	r1, #1
 8007200:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	2b0c      	cmp	r3, #12
 8007206:	d027      	beq.n	8007258 <HAL_TIM_OC_ConfigChannel+0x80>
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	2b0c      	cmp	r3, #12
 800720c:	d82c      	bhi.n	8007268 <HAL_TIM_OC_ConfigChannel+0x90>
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	2b08      	cmp	r3, #8
 8007212:	d019      	beq.n	8007248 <HAL_TIM_OC_ConfigChannel+0x70>
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	2b08      	cmp	r3, #8
 8007218:	d826      	bhi.n	8007268 <HAL_TIM_OC_ConfigChannel+0x90>
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	2b00      	cmp	r3, #0
 800721e:	d003      	beq.n	8007228 <HAL_TIM_OC_ConfigChannel+0x50>
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	2b04      	cmp	r3, #4
 8007224:	d008      	beq.n	8007238 <HAL_TIM_OC_ConfigChannel+0x60>
 8007226:	e01f      	b.n	8007268 <HAL_TIM_OC_ConfigChannel+0x90>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	68ba      	ldr	r2, [r7, #8]
 800722e:	0011      	movs	r1, r2
 8007230:	0018      	movs	r0, r3
 8007232:	f000 f8c9 	bl	80073c8 <TIM_OC1_SetConfig>
      break;
 8007236:	e01c      	b.n	8007272 <HAL_TIM_OC_ConfigChannel+0x9a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	68ba      	ldr	r2, [r7, #8]
 800723e:	0011      	movs	r1, r2
 8007240:	0018      	movs	r0, r3
 8007242:	f000 f949 	bl	80074d8 <TIM_OC2_SetConfig>
      break;
 8007246:	e014      	b.n	8007272 <HAL_TIM_OC_ConfigChannel+0x9a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	68ba      	ldr	r2, [r7, #8]
 800724e:	0011      	movs	r1, r2
 8007250:	0018      	movs	r0, r3
 8007252:	f000 f9c5 	bl	80075e0 <TIM_OC3_SetConfig>
      break;
 8007256:	e00c      	b.n	8007272 <HAL_TIM_OC_ConfigChannel+0x9a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	68ba      	ldr	r2, [r7, #8]
 800725e:	0011      	movs	r1, r2
 8007260:	0018      	movs	r0, r3
 8007262:	f000 fa43 	bl	80076ec <TIM_OC4_SetConfig>
      break;
 8007266:	e004      	b.n	8007272 <HAL_TIM_OC_ConfigChannel+0x9a>
    }

    default:
      status = HAL_ERROR;
 8007268:	2317      	movs	r3, #23
 800726a:	18fb      	adds	r3, r7, r3
 800726c:	2201      	movs	r2, #1
 800726e:	701a      	strb	r2, [r3, #0]
      break;
 8007270:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	223c      	movs	r2, #60	; 0x3c
 8007276:	2100      	movs	r1, #0
 8007278:	5499      	strb	r1, [r3, r2]

  return status;
 800727a:	2317      	movs	r3, #23
 800727c:	18fb      	adds	r3, r7, r3
 800727e:	781b      	ldrb	r3, [r3, #0]
}
 8007280:	0018      	movs	r0, r3
 8007282:	46bd      	mov	sp, r7
 8007284:	b006      	add	sp, #24
 8007286:	bd80      	pop	{r7, pc}

08007288 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007288:	b580      	push	{r7, lr}
 800728a:	b082      	sub	sp, #8
 800728c:	af00      	add	r7, sp, #0
 800728e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007290:	46c0      	nop			; (mov r8, r8)
 8007292:	46bd      	mov	sp, r7
 8007294:	b002      	add	sp, #8
 8007296:	bd80      	pop	{r7, pc}

08007298 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007298:	b580      	push	{r7, lr}
 800729a:	b082      	sub	sp, #8
 800729c:	af00      	add	r7, sp, #0
 800729e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80072a0:	46c0      	nop			; (mov r8, r8)
 80072a2:	46bd      	mov	sp, r7
 80072a4:	b002      	add	sp, #8
 80072a6:	bd80      	pop	{r7, pc}

080072a8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80072a8:	b580      	push	{r7, lr}
 80072aa:	b082      	sub	sp, #8
 80072ac:	af00      	add	r7, sp, #0
 80072ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80072b0:	46c0      	nop			; (mov r8, r8)
 80072b2:	46bd      	mov	sp, r7
 80072b4:	b002      	add	sp, #8
 80072b6:	bd80      	pop	{r7, pc}

080072b8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80072b8:	b580      	push	{r7, lr}
 80072ba:	b082      	sub	sp, #8
 80072bc:	af00      	add	r7, sp, #0
 80072be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80072c0:	46c0      	nop			; (mov r8, r8)
 80072c2:	46bd      	mov	sp, r7
 80072c4:	b002      	add	sp, #8
 80072c6:	bd80      	pop	{r7, pc}

080072c8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80072c8:	b580      	push	{r7, lr}
 80072ca:	b084      	sub	sp, #16
 80072cc:	af00      	add	r7, sp, #0
 80072ce:	6078      	str	r0, [r7, #4]
 80072d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	4a34      	ldr	r2, [pc, #208]	; (80073ac <TIM_Base_SetConfig+0xe4>)
 80072dc:	4293      	cmp	r3, r2
 80072de:	d008      	beq.n	80072f2 <TIM_Base_SetConfig+0x2a>
 80072e0:	687a      	ldr	r2, [r7, #4]
 80072e2:	2380      	movs	r3, #128	; 0x80
 80072e4:	05db      	lsls	r3, r3, #23
 80072e6:	429a      	cmp	r2, r3
 80072e8:	d003      	beq.n	80072f2 <TIM_Base_SetConfig+0x2a>
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	4a30      	ldr	r2, [pc, #192]	; (80073b0 <TIM_Base_SetConfig+0xe8>)
 80072ee:	4293      	cmp	r3, r2
 80072f0:	d108      	bne.n	8007304 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	2270      	movs	r2, #112	; 0x70
 80072f6:	4393      	bics	r3, r2
 80072f8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80072fa:	683b      	ldr	r3, [r7, #0]
 80072fc:	685b      	ldr	r3, [r3, #4]
 80072fe:	68fa      	ldr	r2, [r7, #12]
 8007300:	4313      	orrs	r3, r2
 8007302:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	4a29      	ldr	r2, [pc, #164]	; (80073ac <TIM_Base_SetConfig+0xe4>)
 8007308:	4293      	cmp	r3, r2
 800730a:	d018      	beq.n	800733e <TIM_Base_SetConfig+0x76>
 800730c:	687a      	ldr	r2, [r7, #4]
 800730e:	2380      	movs	r3, #128	; 0x80
 8007310:	05db      	lsls	r3, r3, #23
 8007312:	429a      	cmp	r2, r3
 8007314:	d013      	beq.n	800733e <TIM_Base_SetConfig+0x76>
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	4a25      	ldr	r2, [pc, #148]	; (80073b0 <TIM_Base_SetConfig+0xe8>)
 800731a:	4293      	cmp	r3, r2
 800731c:	d00f      	beq.n	800733e <TIM_Base_SetConfig+0x76>
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	4a24      	ldr	r2, [pc, #144]	; (80073b4 <TIM_Base_SetConfig+0xec>)
 8007322:	4293      	cmp	r3, r2
 8007324:	d00b      	beq.n	800733e <TIM_Base_SetConfig+0x76>
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	4a23      	ldr	r2, [pc, #140]	; (80073b8 <TIM_Base_SetConfig+0xf0>)
 800732a:	4293      	cmp	r3, r2
 800732c:	d007      	beq.n	800733e <TIM_Base_SetConfig+0x76>
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	4a22      	ldr	r2, [pc, #136]	; (80073bc <TIM_Base_SetConfig+0xf4>)
 8007332:	4293      	cmp	r3, r2
 8007334:	d003      	beq.n	800733e <TIM_Base_SetConfig+0x76>
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	4a21      	ldr	r2, [pc, #132]	; (80073c0 <TIM_Base_SetConfig+0xf8>)
 800733a:	4293      	cmp	r3, r2
 800733c:	d108      	bne.n	8007350 <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	4a20      	ldr	r2, [pc, #128]	; (80073c4 <TIM_Base_SetConfig+0xfc>)
 8007342:	4013      	ands	r3, r2
 8007344:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007346:	683b      	ldr	r3, [r7, #0]
 8007348:	68db      	ldr	r3, [r3, #12]
 800734a:	68fa      	ldr	r2, [r7, #12]
 800734c:	4313      	orrs	r3, r2
 800734e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	2280      	movs	r2, #128	; 0x80
 8007354:	4393      	bics	r3, r2
 8007356:	001a      	movs	r2, r3
 8007358:	683b      	ldr	r3, [r7, #0]
 800735a:	695b      	ldr	r3, [r3, #20]
 800735c:	4313      	orrs	r3, r2
 800735e:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	68fa      	ldr	r2, [r7, #12]
 8007364:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007366:	683b      	ldr	r3, [r7, #0]
 8007368:	689a      	ldr	r2, [r3, #8]
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800736e:	683b      	ldr	r3, [r7, #0]
 8007370:	681a      	ldr	r2, [r3, #0]
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	4a0c      	ldr	r2, [pc, #48]	; (80073ac <TIM_Base_SetConfig+0xe4>)
 800737a:	4293      	cmp	r3, r2
 800737c:	d00b      	beq.n	8007396 <TIM_Base_SetConfig+0xce>
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	4a0d      	ldr	r2, [pc, #52]	; (80073b8 <TIM_Base_SetConfig+0xf0>)
 8007382:	4293      	cmp	r3, r2
 8007384:	d007      	beq.n	8007396 <TIM_Base_SetConfig+0xce>
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	4a0c      	ldr	r2, [pc, #48]	; (80073bc <TIM_Base_SetConfig+0xf4>)
 800738a:	4293      	cmp	r3, r2
 800738c:	d003      	beq.n	8007396 <TIM_Base_SetConfig+0xce>
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	4a0b      	ldr	r2, [pc, #44]	; (80073c0 <TIM_Base_SetConfig+0xf8>)
 8007392:	4293      	cmp	r3, r2
 8007394:	d103      	bne.n	800739e <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007396:	683b      	ldr	r3, [r7, #0]
 8007398:	691a      	ldr	r2, [r3, #16]
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	2201      	movs	r2, #1
 80073a2:	615a      	str	r2, [r3, #20]
}
 80073a4:	46c0      	nop			; (mov r8, r8)
 80073a6:	46bd      	mov	sp, r7
 80073a8:	b004      	add	sp, #16
 80073aa:	bd80      	pop	{r7, pc}
 80073ac:	40012c00 	.word	0x40012c00
 80073b0:	40000400 	.word	0x40000400
 80073b4:	40002000 	.word	0x40002000
 80073b8:	40014000 	.word	0x40014000
 80073bc:	40014400 	.word	0x40014400
 80073c0:	40014800 	.word	0x40014800
 80073c4:	fffffcff 	.word	0xfffffcff

080073c8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80073c8:	b580      	push	{r7, lr}
 80073ca:	b086      	sub	sp, #24
 80073cc:	af00      	add	r7, sp, #0
 80073ce:	6078      	str	r0, [r7, #4]
 80073d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	6a1b      	ldr	r3, [r3, #32]
 80073d6:	2201      	movs	r2, #1
 80073d8:	4393      	bics	r3, r2
 80073da:	001a      	movs	r2, r3
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	6a1b      	ldr	r3, [r3, #32]
 80073e4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	685b      	ldr	r3, [r3, #4]
 80073ea:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	699b      	ldr	r3, [r3, #24]
 80073f0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	2270      	movs	r2, #112	; 0x70
 80073f6:	4393      	bics	r3, r2
 80073f8:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	2203      	movs	r2, #3
 80073fe:	4393      	bics	r3, r2
 8007400:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007402:	683b      	ldr	r3, [r7, #0]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	68fa      	ldr	r2, [r7, #12]
 8007408:	4313      	orrs	r3, r2
 800740a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800740c:	697b      	ldr	r3, [r7, #20]
 800740e:	2202      	movs	r2, #2
 8007410:	4393      	bics	r3, r2
 8007412:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007414:	683b      	ldr	r3, [r7, #0]
 8007416:	689b      	ldr	r3, [r3, #8]
 8007418:	697a      	ldr	r2, [r7, #20]
 800741a:	4313      	orrs	r3, r2
 800741c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	4a27      	ldr	r2, [pc, #156]	; (80074c0 <TIM_OC1_SetConfig+0xf8>)
 8007422:	4293      	cmp	r3, r2
 8007424:	d00b      	beq.n	800743e <TIM_OC1_SetConfig+0x76>
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	4a26      	ldr	r2, [pc, #152]	; (80074c4 <TIM_OC1_SetConfig+0xfc>)
 800742a:	4293      	cmp	r3, r2
 800742c:	d007      	beq.n	800743e <TIM_OC1_SetConfig+0x76>
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	4a25      	ldr	r2, [pc, #148]	; (80074c8 <TIM_OC1_SetConfig+0x100>)
 8007432:	4293      	cmp	r3, r2
 8007434:	d003      	beq.n	800743e <TIM_OC1_SetConfig+0x76>
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	4a24      	ldr	r2, [pc, #144]	; (80074cc <TIM_OC1_SetConfig+0x104>)
 800743a:	4293      	cmp	r3, r2
 800743c:	d10c      	bne.n	8007458 <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800743e:	697b      	ldr	r3, [r7, #20]
 8007440:	2208      	movs	r2, #8
 8007442:	4393      	bics	r3, r2
 8007444:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007446:	683b      	ldr	r3, [r7, #0]
 8007448:	68db      	ldr	r3, [r3, #12]
 800744a:	697a      	ldr	r2, [r7, #20]
 800744c:	4313      	orrs	r3, r2
 800744e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007450:	697b      	ldr	r3, [r7, #20]
 8007452:	2204      	movs	r2, #4
 8007454:	4393      	bics	r3, r2
 8007456:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	4a19      	ldr	r2, [pc, #100]	; (80074c0 <TIM_OC1_SetConfig+0xf8>)
 800745c:	4293      	cmp	r3, r2
 800745e:	d00b      	beq.n	8007478 <TIM_OC1_SetConfig+0xb0>
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	4a18      	ldr	r2, [pc, #96]	; (80074c4 <TIM_OC1_SetConfig+0xfc>)
 8007464:	4293      	cmp	r3, r2
 8007466:	d007      	beq.n	8007478 <TIM_OC1_SetConfig+0xb0>
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	4a17      	ldr	r2, [pc, #92]	; (80074c8 <TIM_OC1_SetConfig+0x100>)
 800746c:	4293      	cmp	r3, r2
 800746e:	d003      	beq.n	8007478 <TIM_OC1_SetConfig+0xb0>
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	4a16      	ldr	r2, [pc, #88]	; (80074cc <TIM_OC1_SetConfig+0x104>)
 8007474:	4293      	cmp	r3, r2
 8007476:	d111      	bne.n	800749c <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007478:	693b      	ldr	r3, [r7, #16]
 800747a:	4a15      	ldr	r2, [pc, #84]	; (80074d0 <TIM_OC1_SetConfig+0x108>)
 800747c:	4013      	ands	r3, r2
 800747e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007480:	693b      	ldr	r3, [r7, #16]
 8007482:	4a14      	ldr	r2, [pc, #80]	; (80074d4 <TIM_OC1_SetConfig+0x10c>)
 8007484:	4013      	ands	r3, r2
 8007486:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007488:	683b      	ldr	r3, [r7, #0]
 800748a:	695b      	ldr	r3, [r3, #20]
 800748c:	693a      	ldr	r2, [r7, #16]
 800748e:	4313      	orrs	r3, r2
 8007490:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007492:	683b      	ldr	r3, [r7, #0]
 8007494:	699b      	ldr	r3, [r3, #24]
 8007496:	693a      	ldr	r2, [r7, #16]
 8007498:	4313      	orrs	r3, r2
 800749a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	693a      	ldr	r2, [r7, #16]
 80074a0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	68fa      	ldr	r2, [r7, #12]
 80074a6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80074a8:	683b      	ldr	r3, [r7, #0]
 80074aa:	685a      	ldr	r2, [r3, #4]
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	697a      	ldr	r2, [r7, #20]
 80074b4:	621a      	str	r2, [r3, #32]
}
 80074b6:	46c0      	nop			; (mov r8, r8)
 80074b8:	46bd      	mov	sp, r7
 80074ba:	b006      	add	sp, #24
 80074bc:	bd80      	pop	{r7, pc}
 80074be:	46c0      	nop			; (mov r8, r8)
 80074c0:	40012c00 	.word	0x40012c00
 80074c4:	40014000 	.word	0x40014000
 80074c8:	40014400 	.word	0x40014400
 80074cc:	40014800 	.word	0x40014800
 80074d0:	fffffeff 	.word	0xfffffeff
 80074d4:	fffffdff 	.word	0xfffffdff

080074d8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80074d8:	b580      	push	{r7, lr}
 80074da:	b086      	sub	sp, #24
 80074dc:	af00      	add	r7, sp, #0
 80074de:	6078      	str	r0, [r7, #4]
 80074e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	6a1b      	ldr	r3, [r3, #32]
 80074e6:	2210      	movs	r2, #16
 80074e8:	4393      	bics	r3, r2
 80074ea:	001a      	movs	r2, r3
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	6a1b      	ldr	r3, [r3, #32]
 80074f4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	685b      	ldr	r3, [r3, #4]
 80074fa:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	699b      	ldr	r3, [r3, #24]
 8007500:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	4a2e      	ldr	r2, [pc, #184]	; (80075c0 <TIM_OC2_SetConfig+0xe8>)
 8007506:	4013      	ands	r3, r2
 8007508:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	4a2d      	ldr	r2, [pc, #180]	; (80075c4 <TIM_OC2_SetConfig+0xec>)
 800750e:	4013      	ands	r3, r2
 8007510:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007512:	683b      	ldr	r3, [r7, #0]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	021b      	lsls	r3, r3, #8
 8007518:	68fa      	ldr	r2, [r7, #12]
 800751a:	4313      	orrs	r3, r2
 800751c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800751e:	697b      	ldr	r3, [r7, #20]
 8007520:	2220      	movs	r2, #32
 8007522:	4393      	bics	r3, r2
 8007524:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007526:	683b      	ldr	r3, [r7, #0]
 8007528:	689b      	ldr	r3, [r3, #8]
 800752a:	011b      	lsls	r3, r3, #4
 800752c:	697a      	ldr	r2, [r7, #20]
 800752e:	4313      	orrs	r3, r2
 8007530:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	4a24      	ldr	r2, [pc, #144]	; (80075c8 <TIM_OC2_SetConfig+0xf0>)
 8007536:	4293      	cmp	r3, r2
 8007538:	d10d      	bne.n	8007556 <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800753a:	697b      	ldr	r3, [r7, #20]
 800753c:	2280      	movs	r2, #128	; 0x80
 800753e:	4393      	bics	r3, r2
 8007540:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007542:	683b      	ldr	r3, [r7, #0]
 8007544:	68db      	ldr	r3, [r3, #12]
 8007546:	011b      	lsls	r3, r3, #4
 8007548:	697a      	ldr	r2, [r7, #20]
 800754a:	4313      	orrs	r3, r2
 800754c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800754e:	697b      	ldr	r3, [r7, #20]
 8007550:	2240      	movs	r2, #64	; 0x40
 8007552:	4393      	bics	r3, r2
 8007554:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	4a1b      	ldr	r2, [pc, #108]	; (80075c8 <TIM_OC2_SetConfig+0xf0>)
 800755a:	4293      	cmp	r3, r2
 800755c:	d00b      	beq.n	8007576 <TIM_OC2_SetConfig+0x9e>
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	4a1a      	ldr	r2, [pc, #104]	; (80075cc <TIM_OC2_SetConfig+0xf4>)
 8007562:	4293      	cmp	r3, r2
 8007564:	d007      	beq.n	8007576 <TIM_OC2_SetConfig+0x9e>
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	4a19      	ldr	r2, [pc, #100]	; (80075d0 <TIM_OC2_SetConfig+0xf8>)
 800756a:	4293      	cmp	r3, r2
 800756c:	d003      	beq.n	8007576 <TIM_OC2_SetConfig+0x9e>
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	4a18      	ldr	r2, [pc, #96]	; (80075d4 <TIM_OC2_SetConfig+0xfc>)
 8007572:	4293      	cmp	r3, r2
 8007574:	d113      	bne.n	800759e <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007576:	693b      	ldr	r3, [r7, #16]
 8007578:	4a17      	ldr	r2, [pc, #92]	; (80075d8 <TIM_OC2_SetConfig+0x100>)
 800757a:	4013      	ands	r3, r2
 800757c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800757e:	693b      	ldr	r3, [r7, #16]
 8007580:	4a16      	ldr	r2, [pc, #88]	; (80075dc <TIM_OC2_SetConfig+0x104>)
 8007582:	4013      	ands	r3, r2
 8007584:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007586:	683b      	ldr	r3, [r7, #0]
 8007588:	695b      	ldr	r3, [r3, #20]
 800758a:	009b      	lsls	r3, r3, #2
 800758c:	693a      	ldr	r2, [r7, #16]
 800758e:	4313      	orrs	r3, r2
 8007590:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007592:	683b      	ldr	r3, [r7, #0]
 8007594:	699b      	ldr	r3, [r3, #24]
 8007596:	009b      	lsls	r3, r3, #2
 8007598:	693a      	ldr	r2, [r7, #16]
 800759a:	4313      	orrs	r3, r2
 800759c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	693a      	ldr	r2, [r7, #16]
 80075a2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	68fa      	ldr	r2, [r7, #12]
 80075a8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80075aa:	683b      	ldr	r3, [r7, #0]
 80075ac:	685a      	ldr	r2, [r3, #4]
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	697a      	ldr	r2, [r7, #20]
 80075b6:	621a      	str	r2, [r3, #32]
}
 80075b8:	46c0      	nop			; (mov r8, r8)
 80075ba:	46bd      	mov	sp, r7
 80075bc:	b006      	add	sp, #24
 80075be:	bd80      	pop	{r7, pc}
 80075c0:	ffff8fff 	.word	0xffff8fff
 80075c4:	fffffcff 	.word	0xfffffcff
 80075c8:	40012c00 	.word	0x40012c00
 80075cc:	40014000 	.word	0x40014000
 80075d0:	40014400 	.word	0x40014400
 80075d4:	40014800 	.word	0x40014800
 80075d8:	fffffbff 	.word	0xfffffbff
 80075dc:	fffff7ff 	.word	0xfffff7ff

080075e0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80075e0:	b580      	push	{r7, lr}
 80075e2:	b086      	sub	sp, #24
 80075e4:	af00      	add	r7, sp, #0
 80075e6:	6078      	str	r0, [r7, #4]
 80075e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	6a1b      	ldr	r3, [r3, #32]
 80075ee:	4a35      	ldr	r2, [pc, #212]	; (80076c4 <TIM_OC3_SetConfig+0xe4>)
 80075f0:	401a      	ands	r2, r3
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	6a1b      	ldr	r3, [r3, #32]
 80075fa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	685b      	ldr	r3, [r3, #4]
 8007600:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	69db      	ldr	r3, [r3, #28]
 8007606:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	2270      	movs	r2, #112	; 0x70
 800760c:	4393      	bics	r3, r2
 800760e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	2203      	movs	r2, #3
 8007614:	4393      	bics	r3, r2
 8007616:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007618:	683b      	ldr	r3, [r7, #0]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	68fa      	ldr	r2, [r7, #12]
 800761e:	4313      	orrs	r3, r2
 8007620:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007622:	697b      	ldr	r3, [r7, #20]
 8007624:	4a28      	ldr	r2, [pc, #160]	; (80076c8 <TIM_OC3_SetConfig+0xe8>)
 8007626:	4013      	ands	r3, r2
 8007628:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800762a:	683b      	ldr	r3, [r7, #0]
 800762c:	689b      	ldr	r3, [r3, #8]
 800762e:	021b      	lsls	r3, r3, #8
 8007630:	697a      	ldr	r2, [r7, #20]
 8007632:	4313      	orrs	r3, r2
 8007634:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	4a24      	ldr	r2, [pc, #144]	; (80076cc <TIM_OC3_SetConfig+0xec>)
 800763a:	4293      	cmp	r3, r2
 800763c:	d10d      	bne.n	800765a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800763e:	697b      	ldr	r3, [r7, #20]
 8007640:	4a23      	ldr	r2, [pc, #140]	; (80076d0 <TIM_OC3_SetConfig+0xf0>)
 8007642:	4013      	ands	r3, r2
 8007644:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007646:	683b      	ldr	r3, [r7, #0]
 8007648:	68db      	ldr	r3, [r3, #12]
 800764a:	021b      	lsls	r3, r3, #8
 800764c:	697a      	ldr	r2, [r7, #20]
 800764e:	4313      	orrs	r3, r2
 8007650:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007652:	697b      	ldr	r3, [r7, #20]
 8007654:	4a1f      	ldr	r2, [pc, #124]	; (80076d4 <TIM_OC3_SetConfig+0xf4>)
 8007656:	4013      	ands	r3, r2
 8007658:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	4a1b      	ldr	r2, [pc, #108]	; (80076cc <TIM_OC3_SetConfig+0xec>)
 800765e:	4293      	cmp	r3, r2
 8007660:	d00b      	beq.n	800767a <TIM_OC3_SetConfig+0x9a>
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	4a1c      	ldr	r2, [pc, #112]	; (80076d8 <TIM_OC3_SetConfig+0xf8>)
 8007666:	4293      	cmp	r3, r2
 8007668:	d007      	beq.n	800767a <TIM_OC3_SetConfig+0x9a>
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	4a1b      	ldr	r2, [pc, #108]	; (80076dc <TIM_OC3_SetConfig+0xfc>)
 800766e:	4293      	cmp	r3, r2
 8007670:	d003      	beq.n	800767a <TIM_OC3_SetConfig+0x9a>
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	4a1a      	ldr	r2, [pc, #104]	; (80076e0 <TIM_OC3_SetConfig+0x100>)
 8007676:	4293      	cmp	r3, r2
 8007678:	d113      	bne.n	80076a2 <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800767a:	693b      	ldr	r3, [r7, #16]
 800767c:	4a19      	ldr	r2, [pc, #100]	; (80076e4 <TIM_OC3_SetConfig+0x104>)
 800767e:	4013      	ands	r3, r2
 8007680:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007682:	693b      	ldr	r3, [r7, #16]
 8007684:	4a18      	ldr	r2, [pc, #96]	; (80076e8 <TIM_OC3_SetConfig+0x108>)
 8007686:	4013      	ands	r3, r2
 8007688:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800768a:	683b      	ldr	r3, [r7, #0]
 800768c:	695b      	ldr	r3, [r3, #20]
 800768e:	011b      	lsls	r3, r3, #4
 8007690:	693a      	ldr	r2, [r7, #16]
 8007692:	4313      	orrs	r3, r2
 8007694:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007696:	683b      	ldr	r3, [r7, #0]
 8007698:	699b      	ldr	r3, [r3, #24]
 800769a:	011b      	lsls	r3, r3, #4
 800769c:	693a      	ldr	r2, [r7, #16]
 800769e:	4313      	orrs	r3, r2
 80076a0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	693a      	ldr	r2, [r7, #16]
 80076a6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	68fa      	ldr	r2, [r7, #12]
 80076ac:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80076ae:	683b      	ldr	r3, [r7, #0]
 80076b0:	685a      	ldr	r2, [r3, #4]
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	697a      	ldr	r2, [r7, #20]
 80076ba:	621a      	str	r2, [r3, #32]
}
 80076bc:	46c0      	nop			; (mov r8, r8)
 80076be:	46bd      	mov	sp, r7
 80076c0:	b006      	add	sp, #24
 80076c2:	bd80      	pop	{r7, pc}
 80076c4:	fffffeff 	.word	0xfffffeff
 80076c8:	fffffdff 	.word	0xfffffdff
 80076cc:	40012c00 	.word	0x40012c00
 80076d0:	fffff7ff 	.word	0xfffff7ff
 80076d4:	fffffbff 	.word	0xfffffbff
 80076d8:	40014000 	.word	0x40014000
 80076dc:	40014400 	.word	0x40014400
 80076e0:	40014800 	.word	0x40014800
 80076e4:	ffffefff 	.word	0xffffefff
 80076e8:	ffffdfff 	.word	0xffffdfff

080076ec <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80076ec:	b580      	push	{r7, lr}
 80076ee:	b086      	sub	sp, #24
 80076f0:	af00      	add	r7, sp, #0
 80076f2:	6078      	str	r0, [r7, #4]
 80076f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	6a1b      	ldr	r3, [r3, #32]
 80076fa:	4a28      	ldr	r2, [pc, #160]	; (800779c <TIM_OC4_SetConfig+0xb0>)
 80076fc:	401a      	ands	r2, r3
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	6a1b      	ldr	r3, [r3, #32]
 8007706:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	685b      	ldr	r3, [r3, #4]
 800770c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	69db      	ldr	r3, [r3, #28]
 8007712:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	4a22      	ldr	r2, [pc, #136]	; (80077a0 <TIM_OC4_SetConfig+0xb4>)
 8007718:	4013      	ands	r3, r2
 800771a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	4a21      	ldr	r2, [pc, #132]	; (80077a4 <TIM_OC4_SetConfig+0xb8>)
 8007720:	4013      	ands	r3, r2
 8007722:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007724:	683b      	ldr	r3, [r7, #0]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	021b      	lsls	r3, r3, #8
 800772a:	68fa      	ldr	r2, [r7, #12]
 800772c:	4313      	orrs	r3, r2
 800772e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007730:	693b      	ldr	r3, [r7, #16]
 8007732:	4a1d      	ldr	r2, [pc, #116]	; (80077a8 <TIM_OC4_SetConfig+0xbc>)
 8007734:	4013      	ands	r3, r2
 8007736:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007738:	683b      	ldr	r3, [r7, #0]
 800773a:	689b      	ldr	r3, [r3, #8]
 800773c:	031b      	lsls	r3, r3, #12
 800773e:	693a      	ldr	r2, [r7, #16]
 8007740:	4313      	orrs	r3, r2
 8007742:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	4a19      	ldr	r2, [pc, #100]	; (80077ac <TIM_OC4_SetConfig+0xc0>)
 8007748:	4293      	cmp	r3, r2
 800774a:	d00b      	beq.n	8007764 <TIM_OC4_SetConfig+0x78>
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	4a18      	ldr	r2, [pc, #96]	; (80077b0 <TIM_OC4_SetConfig+0xc4>)
 8007750:	4293      	cmp	r3, r2
 8007752:	d007      	beq.n	8007764 <TIM_OC4_SetConfig+0x78>
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	4a17      	ldr	r2, [pc, #92]	; (80077b4 <TIM_OC4_SetConfig+0xc8>)
 8007758:	4293      	cmp	r3, r2
 800775a:	d003      	beq.n	8007764 <TIM_OC4_SetConfig+0x78>
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	4a16      	ldr	r2, [pc, #88]	; (80077b8 <TIM_OC4_SetConfig+0xcc>)
 8007760:	4293      	cmp	r3, r2
 8007762:	d109      	bne.n	8007778 <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007764:	697b      	ldr	r3, [r7, #20]
 8007766:	4a15      	ldr	r2, [pc, #84]	; (80077bc <TIM_OC4_SetConfig+0xd0>)
 8007768:	4013      	ands	r3, r2
 800776a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800776c:	683b      	ldr	r3, [r7, #0]
 800776e:	695b      	ldr	r3, [r3, #20]
 8007770:	019b      	lsls	r3, r3, #6
 8007772:	697a      	ldr	r2, [r7, #20]
 8007774:	4313      	orrs	r3, r2
 8007776:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	697a      	ldr	r2, [r7, #20]
 800777c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	68fa      	ldr	r2, [r7, #12]
 8007782:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007784:	683b      	ldr	r3, [r7, #0]
 8007786:	685a      	ldr	r2, [r3, #4]
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	693a      	ldr	r2, [r7, #16]
 8007790:	621a      	str	r2, [r3, #32]
}
 8007792:	46c0      	nop			; (mov r8, r8)
 8007794:	46bd      	mov	sp, r7
 8007796:	b006      	add	sp, #24
 8007798:	bd80      	pop	{r7, pc}
 800779a:	46c0      	nop			; (mov r8, r8)
 800779c:	ffffefff 	.word	0xffffefff
 80077a0:	ffff8fff 	.word	0xffff8fff
 80077a4:	fffffcff 	.word	0xfffffcff
 80077a8:	ffffdfff 	.word	0xffffdfff
 80077ac:	40012c00 	.word	0x40012c00
 80077b0:	40014000 	.word	0x40014000
 80077b4:	40014400 	.word	0x40014400
 80077b8:	40014800 	.word	0x40014800
 80077bc:	ffffbfff 	.word	0xffffbfff

080077c0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80077c0:	b580      	push	{r7, lr}
 80077c2:	b082      	sub	sp, #8
 80077c4:	af00      	add	r7, sp, #0
 80077c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80077c8:	46c0      	nop			; (mov r8, r8)
 80077ca:	46bd      	mov	sp, r7
 80077cc:	b002      	add	sp, #8
 80077ce:	bd80      	pop	{r7, pc}

080077d0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80077d0:	b580      	push	{r7, lr}
 80077d2:	b082      	sub	sp, #8
 80077d4:	af00      	add	r7, sp, #0
 80077d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80077d8:	46c0      	nop			; (mov r8, r8)
 80077da:	46bd      	mov	sp, r7
 80077dc:	b002      	add	sp, #8
 80077de:	bd80      	pop	{r7, pc}

080077e0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80077e0:	b580      	push	{r7, lr}
 80077e2:	b082      	sub	sp, #8
 80077e4:	af00      	add	r7, sp, #0
 80077e6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d101      	bne.n	80077f2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80077ee:	2301      	movs	r3, #1
 80077f0:	e044      	b.n	800787c <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d107      	bne.n	800780a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	2274      	movs	r2, #116	; 0x74
 80077fe:	2100      	movs	r1, #0
 8007800:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	0018      	movs	r0, r3
 8007806:	f7fa fc99 	bl	800213c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	2224      	movs	r2, #36	; 0x24
 800780e:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	681a      	ldr	r2, [r3, #0]
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	2101      	movs	r1, #1
 800781c:	438a      	bics	r2, r1
 800781e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	0018      	movs	r0, r3
 8007824:	f000 fb24 	bl	8007e70 <UART_SetConfig>
 8007828:	0003      	movs	r3, r0
 800782a:	2b01      	cmp	r3, #1
 800782c:	d101      	bne.n	8007832 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800782e:	2301      	movs	r3, #1
 8007830:	e024      	b.n	800787c <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007836:	2b00      	cmp	r3, #0
 8007838:	d003      	beq.n	8007842 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	0018      	movs	r0, r3
 800783e:	f000 fc9f 	bl	8008180 <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	685a      	ldr	r2, [r3, #4]
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	490d      	ldr	r1, [pc, #52]	; (8007884 <HAL_UART_Init+0xa4>)
 800784e:	400a      	ands	r2, r1
 8007850:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	689a      	ldr	r2, [r3, #8]
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	212a      	movs	r1, #42	; 0x2a
 800785e:	438a      	bics	r2, r1
 8007860:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	681a      	ldr	r2, [r3, #0]
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	2101      	movs	r1, #1
 800786e:	430a      	orrs	r2, r1
 8007870:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	0018      	movs	r0, r3
 8007876:	f000 fd37 	bl	80082e8 <UART_CheckIdleState>
 800787a:	0003      	movs	r3, r0
}
 800787c:	0018      	movs	r0, r3
 800787e:	46bd      	mov	sp, r7
 8007880:	b002      	add	sp, #8
 8007882:	bd80      	pop	{r7, pc}
 8007884:	ffffb7ff 	.word	0xffffb7ff

08007888 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007888:	b590      	push	{r4, r7, lr}
 800788a:	b0ab      	sub	sp, #172	; 0xac
 800788c:	af00      	add	r7, sp, #0
 800788e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	69db      	ldr	r3, [r3, #28]
 8007896:	22a4      	movs	r2, #164	; 0xa4
 8007898:	18b9      	adds	r1, r7, r2
 800789a:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	20a0      	movs	r0, #160	; 0xa0
 80078a4:	1839      	adds	r1, r7, r0
 80078a6:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	689b      	ldr	r3, [r3, #8]
 80078ae:	219c      	movs	r1, #156	; 0x9c
 80078b0:	1879      	adds	r1, r7, r1
 80078b2:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80078b4:	0011      	movs	r1, r2
 80078b6:	18bb      	adds	r3, r7, r2
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	4a99      	ldr	r2, [pc, #612]	; (8007b20 <HAL_UART_IRQHandler+0x298>)
 80078bc:	4013      	ands	r3, r2
 80078be:	2298      	movs	r2, #152	; 0x98
 80078c0:	18bc      	adds	r4, r7, r2
 80078c2:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 80078c4:	18bb      	adds	r3, r7, r2
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	d114      	bne.n	80078f6 <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80078cc:	187b      	adds	r3, r7, r1
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	2220      	movs	r2, #32
 80078d2:	4013      	ands	r3, r2
 80078d4:	d00f      	beq.n	80078f6 <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80078d6:	183b      	adds	r3, r7, r0
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	2220      	movs	r2, #32
 80078dc:	4013      	ands	r3, r2
 80078de:	d00a      	beq.n	80078f6 <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	d100      	bne.n	80078ea <HAL_UART_IRQHandler+0x62>
 80078e8:	e296      	b.n	8007e18 <HAL_UART_IRQHandler+0x590>
      {
        huart->RxISR(huart);
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80078ee:	687a      	ldr	r2, [r7, #4]
 80078f0:	0010      	movs	r0, r2
 80078f2:	4798      	blx	r3
      }
      return;
 80078f4:	e290      	b.n	8007e18 <HAL_UART_IRQHandler+0x590>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80078f6:	2398      	movs	r3, #152	; 0x98
 80078f8:	18fb      	adds	r3, r7, r3
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	d100      	bne.n	8007902 <HAL_UART_IRQHandler+0x7a>
 8007900:	e114      	b.n	8007b2c <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8007902:	239c      	movs	r3, #156	; 0x9c
 8007904:	18fb      	adds	r3, r7, r3
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	2201      	movs	r2, #1
 800790a:	4013      	ands	r3, r2
 800790c:	d106      	bne.n	800791c <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800790e:	23a0      	movs	r3, #160	; 0xa0
 8007910:	18fb      	adds	r3, r7, r3
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	4a83      	ldr	r2, [pc, #524]	; (8007b24 <HAL_UART_IRQHandler+0x29c>)
 8007916:	4013      	ands	r3, r2
 8007918:	d100      	bne.n	800791c <HAL_UART_IRQHandler+0x94>
 800791a:	e107      	b.n	8007b2c <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800791c:	23a4      	movs	r3, #164	; 0xa4
 800791e:	18fb      	adds	r3, r7, r3
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	2201      	movs	r2, #1
 8007924:	4013      	ands	r3, r2
 8007926:	d012      	beq.n	800794e <HAL_UART_IRQHandler+0xc6>
 8007928:	23a0      	movs	r3, #160	; 0xa0
 800792a:	18fb      	adds	r3, r7, r3
 800792c:	681a      	ldr	r2, [r3, #0]
 800792e:	2380      	movs	r3, #128	; 0x80
 8007930:	005b      	lsls	r3, r3, #1
 8007932:	4013      	ands	r3, r2
 8007934:	d00b      	beq.n	800794e <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	2201      	movs	r2, #1
 800793c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	2280      	movs	r2, #128	; 0x80
 8007942:	589b      	ldr	r3, [r3, r2]
 8007944:	2201      	movs	r2, #1
 8007946:	431a      	orrs	r2, r3
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	2180      	movs	r1, #128	; 0x80
 800794c:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800794e:	23a4      	movs	r3, #164	; 0xa4
 8007950:	18fb      	adds	r3, r7, r3
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	2202      	movs	r2, #2
 8007956:	4013      	ands	r3, r2
 8007958:	d011      	beq.n	800797e <HAL_UART_IRQHandler+0xf6>
 800795a:	239c      	movs	r3, #156	; 0x9c
 800795c:	18fb      	adds	r3, r7, r3
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	2201      	movs	r2, #1
 8007962:	4013      	ands	r3, r2
 8007964:	d00b      	beq.n	800797e <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	2202      	movs	r2, #2
 800796c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	2280      	movs	r2, #128	; 0x80
 8007972:	589b      	ldr	r3, [r3, r2]
 8007974:	2204      	movs	r2, #4
 8007976:	431a      	orrs	r2, r3
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	2180      	movs	r1, #128	; 0x80
 800797c:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800797e:	23a4      	movs	r3, #164	; 0xa4
 8007980:	18fb      	adds	r3, r7, r3
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	2204      	movs	r2, #4
 8007986:	4013      	ands	r3, r2
 8007988:	d011      	beq.n	80079ae <HAL_UART_IRQHandler+0x126>
 800798a:	239c      	movs	r3, #156	; 0x9c
 800798c:	18fb      	adds	r3, r7, r3
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	2201      	movs	r2, #1
 8007992:	4013      	ands	r3, r2
 8007994:	d00b      	beq.n	80079ae <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	2204      	movs	r2, #4
 800799c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	2280      	movs	r2, #128	; 0x80
 80079a2:	589b      	ldr	r3, [r3, r2]
 80079a4:	2202      	movs	r2, #2
 80079a6:	431a      	orrs	r2, r3
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	2180      	movs	r1, #128	; 0x80
 80079ac:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80079ae:	23a4      	movs	r3, #164	; 0xa4
 80079b0:	18fb      	adds	r3, r7, r3
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	2208      	movs	r2, #8
 80079b6:	4013      	ands	r3, r2
 80079b8:	d017      	beq.n	80079ea <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80079ba:	23a0      	movs	r3, #160	; 0xa0
 80079bc:	18fb      	adds	r3, r7, r3
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	2220      	movs	r2, #32
 80079c2:	4013      	ands	r3, r2
 80079c4:	d105      	bne.n	80079d2 <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80079c6:	239c      	movs	r3, #156	; 0x9c
 80079c8:	18fb      	adds	r3, r7, r3
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	2201      	movs	r2, #1
 80079ce:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80079d0:	d00b      	beq.n	80079ea <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	2208      	movs	r2, #8
 80079d8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	2280      	movs	r2, #128	; 0x80
 80079de:	589b      	ldr	r3, [r3, r2]
 80079e0:	2208      	movs	r2, #8
 80079e2:	431a      	orrs	r2, r3
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	2180      	movs	r1, #128	; 0x80
 80079e8:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80079ea:	23a4      	movs	r3, #164	; 0xa4
 80079ec:	18fb      	adds	r3, r7, r3
 80079ee:	681a      	ldr	r2, [r3, #0]
 80079f0:	2380      	movs	r3, #128	; 0x80
 80079f2:	011b      	lsls	r3, r3, #4
 80079f4:	4013      	ands	r3, r2
 80079f6:	d013      	beq.n	8007a20 <HAL_UART_IRQHandler+0x198>
 80079f8:	23a0      	movs	r3, #160	; 0xa0
 80079fa:	18fb      	adds	r3, r7, r3
 80079fc:	681a      	ldr	r2, [r3, #0]
 80079fe:	2380      	movs	r3, #128	; 0x80
 8007a00:	04db      	lsls	r3, r3, #19
 8007a02:	4013      	ands	r3, r2
 8007a04:	d00c      	beq.n	8007a20 <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	2280      	movs	r2, #128	; 0x80
 8007a0c:	0112      	lsls	r2, r2, #4
 8007a0e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	2280      	movs	r2, #128	; 0x80
 8007a14:	589b      	ldr	r3, [r3, r2]
 8007a16:	2220      	movs	r2, #32
 8007a18:	431a      	orrs	r2, r3
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	2180      	movs	r1, #128	; 0x80
 8007a1e:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	2280      	movs	r2, #128	; 0x80
 8007a24:	589b      	ldr	r3, [r3, r2]
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	d100      	bne.n	8007a2c <HAL_UART_IRQHandler+0x1a4>
 8007a2a:	e1f7      	b.n	8007e1c <HAL_UART_IRQHandler+0x594>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8007a2c:	23a4      	movs	r3, #164	; 0xa4
 8007a2e:	18fb      	adds	r3, r7, r3
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	2220      	movs	r2, #32
 8007a34:	4013      	ands	r3, r2
 8007a36:	d00e      	beq.n	8007a56 <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8007a38:	23a0      	movs	r3, #160	; 0xa0
 8007a3a:	18fb      	adds	r3, r7, r3
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	2220      	movs	r2, #32
 8007a40:	4013      	ands	r3, r2
 8007a42:	d008      	beq.n	8007a56 <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007a48:	2b00      	cmp	r3, #0
 8007a4a:	d004      	beq.n	8007a56 <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007a50:	687a      	ldr	r2, [r7, #4]
 8007a52:	0010      	movs	r0, r2
 8007a54:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	2280      	movs	r2, #128	; 0x80
 8007a5a:	589b      	ldr	r3, [r3, r2]
 8007a5c:	2194      	movs	r1, #148	; 0x94
 8007a5e:	187a      	adds	r2, r7, r1
 8007a60:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	689b      	ldr	r3, [r3, #8]
 8007a68:	2240      	movs	r2, #64	; 0x40
 8007a6a:	4013      	ands	r3, r2
 8007a6c:	2b40      	cmp	r3, #64	; 0x40
 8007a6e:	d004      	beq.n	8007a7a <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8007a70:	187b      	adds	r3, r7, r1
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	2228      	movs	r2, #40	; 0x28
 8007a76:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007a78:	d047      	beq.n	8007b0a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	0018      	movs	r0, r3
 8007a7e:	f000 fd3f 	bl	8008500 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	689b      	ldr	r3, [r3, #8]
 8007a88:	2240      	movs	r2, #64	; 0x40
 8007a8a:	4013      	ands	r3, r2
 8007a8c:	2b40      	cmp	r3, #64	; 0x40
 8007a8e:	d137      	bne.n	8007b00 <HAL_UART_IRQHandler+0x278>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007a90:	f3ef 8310 	mrs	r3, PRIMASK
 8007a94:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 8007a96:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007a98:	2090      	movs	r0, #144	; 0x90
 8007a9a:	183a      	adds	r2, r7, r0
 8007a9c:	6013      	str	r3, [r2, #0]
 8007a9e:	2301      	movs	r3, #1
 8007aa0:	667b      	str	r3, [r7, #100]	; 0x64
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007aa2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007aa4:	f383 8810 	msr	PRIMASK, r3
}
 8007aa8:	46c0      	nop			; (mov r8, r8)
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	689a      	ldr	r2, [r3, #8]
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	2140      	movs	r1, #64	; 0x40
 8007ab6:	438a      	bics	r2, r1
 8007ab8:	609a      	str	r2, [r3, #8]
 8007aba:	183b      	adds	r3, r7, r0
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007ac0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007ac2:	f383 8810 	msr	PRIMASK, r3
}
 8007ac6:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	d012      	beq.n	8007af6 <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007ad4:	4a14      	ldr	r2, [pc, #80]	; (8007b28 <HAL_UART_IRQHandler+0x2a0>)
 8007ad6:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007adc:	0018      	movs	r0, r3
 8007ade:	f7fb fd71 	bl	80035c4 <HAL_DMA_Abort_IT>
 8007ae2:	1e03      	subs	r3, r0, #0
 8007ae4:	d01a      	beq.n	8007b1c <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007aea:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007af0:	0018      	movs	r0, r3
 8007af2:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007af4:	e012      	b.n	8007b1c <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	0018      	movs	r0, r3
 8007afa:	f000 f9a5 	bl	8007e48 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007afe:	e00d      	b.n	8007b1c <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	0018      	movs	r0, r3
 8007b04:	f000 f9a0 	bl	8007e48 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007b08:	e008      	b.n	8007b1c <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	0018      	movs	r0, r3
 8007b0e:	f000 f99b 	bl	8007e48 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	2280      	movs	r2, #128	; 0x80
 8007b16:	2100      	movs	r1, #0
 8007b18:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8007b1a:	e17f      	b.n	8007e1c <HAL_UART_IRQHandler+0x594>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007b1c:	46c0      	nop			; (mov r8, r8)
    return;
 8007b1e:	e17d      	b.n	8007e1c <HAL_UART_IRQHandler+0x594>
 8007b20:	0000080f 	.word	0x0000080f
 8007b24:	04000120 	.word	0x04000120
 8007b28:	080085c5 	.word	0x080085c5

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007b30:	2b01      	cmp	r3, #1
 8007b32:	d000      	beq.n	8007b36 <HAL_UART_IRQHandler+0x2ae>
 8007b34:	e131      	b.n	8007d9a <HAL_UART_IRQHandler+0x512>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8007b36:	23a4      	movs	r3, #164	; 0xa4
 8007b38:	18fb      	adds	r3, r7, r3
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	2210      	movs	r2, #16
 8007b3e:	4013      	ands	r3, r2
 8007b40:	d100      	bne.n	8007b44 <HAL_UART_IRQHandler+0x2bc>
 8007b42:	e12a      	b.n	8007d9a <HAL_UART_IRQHandler+0x512>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8007b44:	23a0      	movs	r3, #160	; 0xa0
 8007b46:	18fb      	adds	r3, r7, r3
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	2210      	movs	r2, #16
 8007b4c:	4013      	ands	r3, r2
 8007b4e:	d100      	bne.n	8007b52 <HAL_UART_IRQHandler+0x2ca>
 8007b50:	e123      	b.n	8007d9a <HAL_UART_IRQHandler+0x512>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	2210      	movs	r2, #16
 8007b58:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	689b      	ldr	r3, [r3, #8]
 8007b60:	2240      	movs	r2, #64	; 0x40
 8007b62:	4013      	ands	r3, r2
 8007b64:	2b40      	cmp	r3, #64	; 0x40
 8007b66:	d000      	beq.n	8007b6a <HAL_UART_IRQHandler+0x2e2>
 8007b68:	e09b      	b.n	8007ca2 <HAL_UART_IRQHandler+0x41a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	685a      	ldr	r2, [r3, #4]
 8007b72:	217e      	movs	r1, #126	; 0x7e
 8007b74:	187b      	adds	r3, r7, r1
 8007b76:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8007b78:	187b      	adds	r3, r7, r1
 8007b7a:	881b      	ldrh	r3, [r3, #0]
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	d100      	bne.n	8007b82 <HAL_UART_IRQHandler+0x2fa>
 8007b80:	e14e      	b.n	8007e20 <HAL_UART_IRQHandler+0x598>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	2258      	movs	r2, #88	; 0x58
 8007b86:	5a9b      	ldrh	r3, [r3, r2]
 8007b88:	187a      	adds	r2, r7, r1
 8007b8a:	8812      	ldrh	r2, [r2, #0]
 8007b8c:	429a      	cmp	r2, r3
 8007b8e:	d300      	bcc.n	8007b92 <HAL_UART_IRQHandler+0x30a>
 8007b90:	e146      	b.n	8007e20 <HAL_UART_IRQHandler+0x598>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	187a      	adds	r2, r7, r1
 8007b96:	215a      	movs	r1, #90	; 0x5a
 8007b98:	8812      	ldrh	r2, [r2, #0]
 8007b9a:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007ba0:	699b      	ldr	r3, [r3, #24]
 8007ba2:	2b20      	cmp	r3, #32
 8007ba4:	d06e      	beq.n	8007c84 <HAL_UART_IRQHandler+0x3fc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007ba6:	f3ef 8310 	mrs	r3, PRIMASK
 8007baa:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8007bac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007bae:	67bb      	str	r3, [r7, #120]	; 0x78
 8007bb0:	2301      	movs	r3, #1
 8007bb2:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007bb4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007bb6:	f383 8810 	msr	PRIMASK, r3
}
 8007bba:	46c0      	nop			; (mov r8, r8)
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	681a      	ldr	r2, [r3, #0]
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	499a      	ldr	r1, [pc, #616]	; (8007e30 <HAL_UART_IRQHandler+0x5a8>)
 8007bc8:	400a      	ands	r2, r1
 8007bca:	601a      	str	r2, [r3, #0]
 8007bcc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007bce:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007bd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007bd2:	f383 8810 	msr	PRIMASK, r3
}
 8007bd6:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007bd8:	f3ef 8310 	mrs	r3, PRIMASK
 8007bdc:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 8007bde:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007be0:	677b      	str	r3, [r7, #116]	; 0x74
 8007be2:	2301      	movs	r3, #1
 8007be4:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007be6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007be8:	f383 8810 	msr	PRIMASK, r3
}
 8007bec:	46c0      	nop			; (mov r8, r8)
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	689a      	ldr	r2, [r3, #8]
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	2101      	movs	r1, #1
 8007bfa:	438a      	bics	r2, r1
 8007bfc:	609a      	str	r2, [r3, #8]
 8007bfe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007c00:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007c02:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007c04:	f383 8810 	msr	PRIMASK, r3
}
 8007c08:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007c0a:	f3ef 8310 	mrs	r3, PRIMASK
 8007c0e:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 8007c10:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007c12:	673b      	str	r3, [r7, #112]	; 0x70
 8007c14:	2301      	movs	r3, #1
 8007c16:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007c18:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007c1a:	f383 8810 	msr	PRIMASK, r3
}
 8007c1e:	46c0      	nop			; (mov r8, r8)
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	689a      	ldr	r2, [r3, #8]
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	2140      	movs	r1, #64	; 0x40
 8007c2c:	438a      	bics	r2, r1
 8007c2e:	609a      	str	r2, [r3, #8]
 8007c30:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007c32:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007c34:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007c36:	f383 8810 	msr	PRIMASK, r3
}
 8007c3a:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	2220      	movs	r2, #32
 8007c40:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	2200      	movs	r2, #0
 8007c46:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007c48:	f3ef 8310 	mrs	r3, PRIMASK
 8007c4c:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 8007c4e:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007c50:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007c52:	2301      	movs	r3, #1
 8007c54:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007c56:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007c58:	f383 8810 	msr	PRIMASK, r3
}
 8007c5c:	46c0      	nop			; (mov r8, r8)
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	681a      	ldr	r2, [r3, #0]
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	2110      	movs	r1, #16
 8007c6a:	438a      	bics	r2, r1
 8007c6c:	601a      	str	r2, [r3, #0]
 8007c6e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007c70:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007c72:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007c74:	f383 8810 	msr	PRIMASK, r3
}
 8007c78:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007c7e:	0018      	movs	r0, r3
 8007c80:	f7fb fc68 	bl	8003554 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	2258      	movs	r2, #88	; 0x58
 8007c88:	5a9a      	ldrh	r2, [r3, r2]
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	215a      	movs	r1, #90	; 0x5a
 8007c8e:	5a5b      	ldrh	r3, [r3, r1]
 8007c90:	b29b      	uxth	r3, r3
 8007c92:	1ad3      	subs	r3, r2, r3
 8007c94:	b29a      	uxth	r2, r3
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	0011      	movs	r1, r2
 8007c9a:	0018      	movs	r0, r3
 8007c9c:	f000 f8dc 	bl	8007e58 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007ca0:	e0be      	b.n	8007e20 <HAL_UART_IRQHandler+0x598>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	2258      	movs	r2, #88	; 0x58
 8007ca6:	5a99      	ldrh	r1, [r3, r2]
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	225a      	movs	r2, #90	; 0x5a
 8007cac:	5a9b      	ldrh	r3, [r3, r2]
 8007cae:	b29a      	uxth	r2, r3
 8007cb0:	208e      	movs	r0, #142	; 0x8e
 8007cb2:	183b      	adds	r3, r7, r0
 8007cb4:	1a8a      	subs	r2, r1, r2
 8007cb6:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	225a      	movs	r2, #90	; 0x5a
 8007cbc:	5a9b      	ldrh	r3, [r3, r2]
 8007cbe:	b29b      	uxth	r3, r3
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	d100      	bne.n	8007cc6 <HAL_UART_IRQHandler+0x43e>
 8007cc4:	e0ae      	b.n	8007e24 <HAL_UART_IRQHandler+0x59c>
          && (nb_rx_data > 0U))
 8007cc6:	183b      	adds	r3, r7, r0
 8007cc8:	881b      	ldrh	r3, [r3, #0]
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	d100      	bne.n	8007cd0 <HAL_UART_IRQHandler+0x448>
 8007cce:	e0a9      	b.n	8007e24 <HAL_UART_IRQHandler+0x59c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007cd0:	f3ef 8310 	mrs	r3, PRIMASK
 8007cd4:	60fb      	str	r3, [r7, #12]
  return(result);
 8007cd6:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007cd8:	2488      	movs	r4, #136	; 0x88
 8007cda:	193a      	adds	r2, r7, r4
 8007cdc:	6013      	str	r3, [r2, #0]
 8007cde:	2301      	movs	r3, #1
 8007ce0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007ce2:	693b      	ldr	r3, [r7, #16]
 8007ce4:	f383 8810 	msr	PRIMASK, r3
}
 8007ce8:	46c0      	nop			; (mov r8, r8)
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	681a      	ldr	r2, [r3, #0]
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	494f      	ldr	r1, [pc, #316]	; (8007e34 <HAL_UART_IRQHandler+0x5ac>)
 8007cf6:	400a      	ands	r2, r1
 8007cf8:	601a      	str	r2, [r3, #0]
 8007cfa:	193b      	adds	r3, r7, r4
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007d00:	697b      	ldr	r3, [r7, #20]
 8007d02:	f383 8810 	msr	PRIMASK, r3
}
 8007d06:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007d08:	f3ef 8310 	mrs	r3, PRIMASK
 8007d0c:	61bb      	str	r3, [r7, #24]
  return(result);
 8007d0e:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007d10:	2484      	movs	r4, #132	; 0x84
 8007d12:	193a      	adds	r2, r7, r4
 8007d14:	6013      	str	r3, [r2, #0]
 8007d16:	2301      	movs	r3, #1
 8007d18:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007d1a:	69fb      	ldr	r3, [r7, #28]
 8007d1c:	f383 8810 	msr	PRIMASK, r3
}
 8007d20:	46c0      	nop			; (mov r8, r8)
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	689a      	ldr	r2, [r3, #8]
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	2101      	movs	r1, #1
 8007d2e:	438a      	bics	r2, r1
 8007d30:	609a      	str	r2, [r3, #8]
 8007d32:	193b      	adds	r3, r7, r4
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007d38:	6a3b      	ldr	r3, [r7, #32]
 8007d3a:	f383 8810 	msr	PRIMASK, r3
}
 8007d3e:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	2220      	movs	r2, #32
 8007d44:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	2200      	movs	r2, #0
 8007d4a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	2200      	movs	r2, #0
 8007d50:	665a      	str	r2, [r3, #100]	; 0x64
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007d52:	f3ef 8310 	mrs	r3, PRIMASK
 8007d56:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8007d58:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007d5a:	2480      	movs	r4, #128	; 0x80
 8007d5c:	193a      	adds	r2, r7, r4
 8007d5e:	6013      	str	r3, [r2, #0]
 8007d60:	2301      	movs	r3, #1
 8007d62:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007d64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d66:	f383 8810 	msr	PRIMASK, r3
}
 8007d6a:	46c0      	nop			; (mov r8, r8)
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	681a      	ldr	r2, [r3, #0]
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	2110      	movs	r1, #16
 8007d78:	438a      	bics	r2, r1
 8007d7a:	601a      	str	r2, [r3, #0]
 8007d7c:	193b      	adds	r3, r7, r4
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007d82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d84:	f383 8810 	msr	PRIMASK, r3
}
 8007d88:	46c0      	nop			; (mov r8, r8)
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007d8a:	183b      	adds	r3, r7, r0
 8007d8c:	881a      	ldrh	r2, [r3, #0]
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	0011      	movs	r1, r2
 8007d92:	0018      	movs	r0, r3
 8007d94:	f000 f860 	bl	8007e58 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007d98:	e044      	b.n	8007e24 <HAL_UART_IRQHandler+0x59c>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8007d9a:	23a4      	movs	r3, #164	; 0xa4
 8007d9c:	18fb      	adds	r3, r7, r3
 8007d9e:	681a      	ldr	r2, [r3, #0]
 8007da0:	2380      	movs	r3, #128	; 0x80
 8007da2:	035b      	lsls	r3, r3, #13
 8007da4:	4013      	ands	r3, r2
 8007da6:	d010      	beq.n	8007dca <HAL_UART_IRQHandler+0x542>
 8007da8:	239c      	movs	r3, #156	; 0x9c
 8007daa:	18fb      	adds	r3, r7, r3
 8007dac:	681a      	ldr	r2, [r3, #0]
 8007dae:	2380      	movs	r3, #128	; 0x80
 8007db0:	03db      	lsls	r3, r3, #15
 8007db2:	4013      	ands	r3, r2
 8007db4:	d009      	beq.n	8007dca <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	2280      	movs	r2, #128	; 0x80
 8007dbc:	0352      	lsls	r2, r2, #13
 8007dbe:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	0018      	movs	r0, r3
 8007dc4:	f000 fc40 	bl	8008648 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007dc8:	e02f      	b.n	8007e2a <HAL_UART_IRQHandler+0x5a2>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8007dca:	23a4      	movs	r3, #164	; 0xa4
 8007dcc:	18fb      	adds	r3, r7, r3
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	2280      	movs	r2, #128	; 0x80
 8007dd2:	4013      	ands	r3, r2
 8007dd4:	d00f      	beq.n	8007df6 <HAL_UART_IRQHandler+0x56e>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8007dd6:	23a0      	movs	r3, #160	; 0xa0
 8007dd8:	18fb      	adds	r3, r7, r3
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	2280      	movs	r2, #128	; 0x80
 8007dde:	4013      	ands	r3, r2
 8007de0:	d009      	beq.n	8007df6 <HAL_UART_IRQHandler+0x56e>
  {
    if (huart->TxISR != NULL)
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	d01e      	beq.n	8007e28 <HAL_UART_IRQHandler+0x5a0>
    {
      huart->TxISR(huart);
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007dee:	687a      	ldr	r2, [r7, #4]
 8007df0:	0010      	movs	r0, r2
 8007df2:	4798      	blx	r3
    }
    return;
 8007df4:	e018      	b.n	8007e28 <HAL_UART_IRQHandler+0x5a0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8007df6:	23a4      	movs	r3, #164	; 0xa4
 8007df8:	18fb      	adds	r3, r7, r3
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	2240      	movs	r2, #64	; 0x40
 8007dfe:	4013      	ands	r3, r2
 8007e00:	d013      	beq.n	8007e2a <HAL_UART_IRQHandler+0x5a2>
 8007e02:	23a0      	movs	r3, #160	; 0xa0
 8007e04:	18fb      	adds	r3, r7, r3
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	2240      	movs	r2, #64	; 0x40
 8007e0a:	4013      	ands	r3, r2
 8007e0c:	d00d      	beq.n	8007e2a <HAL_UART_IRQHandler+0x5a2>
  {
    UART_EndTransmit_IT(huart);
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	0018      	movs	r0, r3
 8007e12:	f000 fbee 	bl	80085f2 <UART_EndTransmit_IT>
    return;
 8007e16:	e008      	b.n	8007e2a <HAL_UART_IRQHandler+0x5a2>
      return;
 8007e18:	46c0      	nop			; (mov r8, r8)
 8007e1a:	e006      	b.n	8007e2a <HAL_UART_IRQHandler+0x5a2>
    return;
 8007e1c:	46c0      	nop			; (mov r8, r8)
 8007e1e:	e004      	b.n	8007e2a <HAL_UART_IRQHandler+0x5a2>
      return;
 8007e20:	46c0      	nop			; (mov r8, r8)
 8007e22:	e002      	b.n	8007e2a <HAL_UART_IRQHandler+0x5a2>
      return;
 8007e24:	46c0      	nop			; (mov r8, r8)
 8007e26:	e000      	b.n	8007e2a <HAL_UART_IRQHandler+0x5a2>
    return;
 8007e28:	46c0      	nop			; (mov r8, r8)
  }

}
 8007e2a:	46bd      	mov	sp, r7
 8007e2c:	b02b      	add	sp, #172	; 0xac
 8007e2e:	bd90      	pop	{r4, r7, pc}
 8007e30:	fffffeff 	.word	0xfffffeff
 8007e34:	fffffedf 	.word	0xfffffedf

08007e38 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007e38:	b580      	push	{r7, lr}
 8007e3a:	b082      	sub	sp, #8
 8007e3c:	af00      	add	r7, sp, #0
 8007e3e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8007e40:	46c0      	nop			; (mov r8, r8)
 8007e42:	46bd      	mov	sp, r7
 8007e44:	b002      	add	sp, #8
 8007e46:	bd80      	pop	{r7, pc}

08007e48 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007e48:	b580      	push	{r7, lr}
 8007e4a:	b082      	sub	sp, #8
 8007e4c:	af00      	add	r7, sp, #0
 8007e4e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007e50:	46c0      	nop			; (mov r8, r8)
 8007e52:	46bd      	mov	sp, r7
 8007e54:	b002      	add	sp, #8
 8007e56:	bd80      	pop	{r7, pc}

08007e58 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007e58:	b580      	push	{r7, lr}
 8007e5a:	b082      	sub	sp, #8
 8007e5c:	af00      	add	r7, sp, #0
 8007e5e:	6078      	str	r0, [r7, #4]
 8007e60:	000a      	movs	r2, r1
 8007e62:	1cbb      	adds	r3, r7, #2
 8007e64:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007e66:	46c0      	nop			; (mov r8, r8)
 8007e68:	46bd      	mov	sp, r7
 8007e6a:	b002      	add	sp, #8
 8007e6c:	bd80      	pop	{r7, pc}
	...

08007e70 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007e70:	b580      	push	{r7, lr}
 8007e72:	b088      	sub	sp, #32
 8007e74:	af00      	add	r7, sp, #0
 8007e76:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007e78:	231e      	movs	r3, #30
 8007e7a:	18fb      	adds	r3, r7, r3
 8007e7c:	2200      	movs	r2, #0
 8007e7e:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	689a      	ldr	r2, [r3, #8]
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	691b      	ldr	r3, [r3, #16]
 8007e88:	431a      	orrs	r2, r3
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	695b      	ldr	r3, [r3, #20]
 8007e8e:	431a      	orrs	r2, r3
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	69db      	ldr	r3, [r3, #28]
 8007e94:	4313      	orrs	r3, r2
 8007e96:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	4aaf      	ldr	r2, [pc, #700]	; (800815c <UART_SetConfig+0x2ec>)
 8007ea0:	4013      	ands	r3, r2
 8007ea2:	0019      	movs	r1, r3
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	697a      	ldr	r2, [r7, #20]
 8007eaa:	430a      	orrs	r2, r1
 8007eac:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	685b      	ldr	r3, [r3, #4]
 8007eb4:	4aaa      	ldr	r2, [pc, #680]	; (8008160 <UART_SetConfig+0x2f0>)
 8007eb6:	4013      	ands	r3, r2
 8007eb8:	0019      	movs	r1, r3
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	68da      	ldr	r2, [r3, #12]
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	430a      	orrs	r2, r1
 8007ec4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	699b      	ldr	r3, [r3, #24]
 8007eca:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	6a1b      	ldr	r3, [r3, #32]
 8007ed0:	697a      	ldr	r2, [r7, #20]
 8007ed2:	4313      	orrs	r3, r2
 8007ed4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	689b      	ldr	r3, [r3, #8]
 8007edc:	4aa1      	ldr	r2, [pc, #644]	; (8008164 <UART_SetConfig+0x2f4>)
 8007ede:	4013      	ands	r3, r2
 8007ee0:	0019      	movs	r1, r3
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	697a      	ldr	r2, [r7, #20]
 8007ee8:	430a      	orrs	r2, r1
 8007eea:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	4a9d      	ldr	r2, [pc, #628]	; (8008168 <UART_SetConfig+0x2f8>)
 8007ef2:	4293      	cmp	r3, r2
 8007ef4:	d127      	bne.n	8007f46 <UART_SetConfig+0xd6>
 8007ef6:	4b9d      	ldr	r3, [pc, #628]	; (800816c <UART_SetConfig+0x2fc>)
 8007ef8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007efa:	2203      	movs	r2, #3
 8007efc:	4013      	ands	r3, r2
 8007efe:	2b03      	cmp	r3, #3
 8007f00:	d00d      	beq.n	8007f1e <UART_SetConfig+0xae>
 8007f02:	d81b      	bhi.n	8007f3c <UART_SetConfig+0xcc>
 8007f04:	2b02      	cmp	r3, #2
 8007f06:	d014      	beq.n	8007f32 <UART_SetConfig+0xc2>
 8007f08:	d818      	bhi.n	8007f3c <UART_SetConfig+0xcc>
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	d002      	beq.n	8007f14 <UART_SetConfig+0xa4>
 8007f0e:	2b01      	cmp	r3, #1
 8007f10:	d00a      	beq.n	8007f28 <UART_SetConfig+0xb8>
 8007f12:	e013      	b.n	8007f3c <UART_SetConfig+0xcc>
 8007f14:	231f      	movs	r3, #31
 8007f16:	18fb      	adds	r3, r7, r3
 8007f18:	2200      	movs	r2, #0
 8007f1a:	701a      	strb	r2, [r3, #0]
 8007f1c:	e065      	b.n	8007fea <UART_SetConfig+0x17a>
 8007f1e:	231f      	movs	r3, #31
 8007f20:	18fb      	adds	r3, r7, r3
 8007f22:	2202      	movs	r2, #2
 8007f24:	701a      	strb	r2, [r3, #0]
 8007f26:	e060      	b.n	8007fea <UART_SetConfig+0x17a>
 8007f28:	231f      	movs	r3, #31
 8007f2a:	18fb      	adds	r3, r7, r3
 8007f2c:	2204      	movs	r2, #4
 8007f2e:	701a      	strb	r2, [r3, #0]
 8007f30:	e05b      	b.n	8007fea <UART_SetConfig+0x17a>
 8007f32:	231f      	movs	r3, #31
 8007f34:	18fb      	adds	r3, r7, r3
 8007f36:	2208      	movs	r2, #8
 8007f38:	701a      	strb	r2, [r3, #0]
 8007f3a:	e056      	b.n	8007fea <UART_SetConfig+0x17a>
 8007f3c:	231f      	movs	r3, #31
 8007f3e:	18fb      	adds	r3, r7, r3
 8007f40:	2210      	movs	r2, #16
 8007f42:	701a      	strb	r2, [r3, #0]
 8007f44:	e051      	b.n	8007fea <UART_SetConfig+0x17a>
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	4a89      	ldr	r2, [pc, #548]	; (8008170 <UART_SetConfig+0x300>)
 8007f4c:	4293      	cmp	r3, r2
 8007f4e:	d134      	bne.n	8007fba <UART_SetConfig+0x14a>
 8007f50:	4b86      	ldr	r3, [pc, #536]	; (800816c <UART_SetConfig+0x2fc>)
 8007f52:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007f54:	23c0      	movs	r3, #192	; 0xc0
 8007f56:	029b      	lsls	r3, r3, #10
 8007f58:	4013      	ands	r3, r2
 8007f5a:	22c0      	movs	r2, #192	; 0xc0
 8007f5c:	0292      	lsls	r2, r2, #10
 8007f5e:	4293      	cmp	r3, r2
 8007f60:	d017      	beq.n	8007f92 <UART_SetConfig+0x122>
 8007f62:	22c0      	movs	r2, #192	; 0xc0
 8007f64:	0292      	lsls	r2, r2, #10
 8007f66:	4293      	cmp	r3, r2
 8007f68:	d822      	bhi.n	8007fb0 <UART_SetConfig+0x140>
 8007f6a:	2280      	movs	r2, #128	; 0x80
 8007f6c:	0292      	lsls	r2, r2, #10
 8007f6e:	4293      	cmp	r3, r2
 8007f70:	d019      	beq.n	8007fa6 <UART_SetConfig+0x136>
 8007f72:	2280      	movs	r2, #128	; 0x80
 8007f74:	0292      	lsls	r2, r2, #10
 8007f76:	4293      	cmp	r3, r2
 8007f78:	d81a      	bhi.n	8007fb0 <UART_SetConfig+0x140>
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	d004      	beq.n	8007f88 <UART_SetConfig+0x118>
 8007f7e:	2280      	movs	r2, #128	; 0x80
 8007f80:	0252      	lsls	r2, r2, #9
 8007f82:	4293      	cmp	r3, r2
 8007f84:	d00a      	beq.n	8007f9c <UART_SetConfig+0x12c>
 8007f86:	e013      	b.n	8007fb0 <UART_SetConfig+0x140>
 8007f88:	231f      	movs	r3, #31
 8007f8a:	18fb      	adds	r3, r7, r3
 8007f8c:	2200      	movs	r2, #0
 8007f8e:	701a      	strb	r2, [r3, #0]
 8007f90:	e02b      	b.n	8007fea <UART_SetConfig+0x17a>
 8007f92:	231f      	movs	r3, #31
 8007f94:	18fb      	adds	r3, r7, r3
 8007f96:	2202      	movs	r2, #2
 8007f98:	701a      	strb	r2, [r3, #0]
 8007f9a:	e026      	b.n	8007fea <UART_SetConfig+0x17a>
 8007f9c:	231f      	movs	r3, #31
 8007f9e:	18fb      	adds	r3, r7, r3
 8007fa0:	2204      	movs	r2, #4
 8007fa2:	701a      	strb	r2, [r3, #0]
 8007fa4:	e021      	b.n	8007fea <UART_SetConfig+0x17a>
 8007fa6:	231f      	movs	r3, #31
 8007fa8:	18fb      	adds	r3, r7, r3
 8007faa:	2208      	movs	r2, #8
 8007fac:	701a      	strb	r2, [r3, #0]
 8007fae:	e01c      	b.n	8007fea <UART_SetConfig+0x17a>
 8007fb0:	231f      	movs	r3, #31
 8007fb2:	18fb      	adds	r3, r7, r3
 8007fb4:	2210      	movs	r2, #16
 8007fb6:	701a      	strb	r2, [r3, #0]
 8007fb8:	e017      	b.n	8007fea <UART_SetConfig+0x17a>
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	4a6d      	ldr	r2, [pc, #436]	; (8008174 <UART_SetConfig+0x304>)
 8007fc0:	4293      	cmp	r3, r2
 8007fc2:	d104      	bne.n	8007fce <UART_SetConfig+0x15e>
 8007fc4:	231f      	movs	r3, #31
 8007fc6:	18fb      	adds	r3, r7, r3
 8007fc8:	2200      	movs	r2, #0
 8007fca:	701a      	strb	r2, [r3, #0]
 8007fcc:	e00d      	b.n	8007fea <UART_SetConfig+0x17a>
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	4a69      	ldr	r2, [pc, #420]	; (8008178 <UART_SetConfig+0x308>)
 8007fd4:	4293      	cmp	r3, r2
 8007fd6:	d104      	bne.n	8007fe2 <UART_SetConfig+0x172>
 8007fd8:	231f      	movs	r3, #31
 8007fda:	18fb      	adds	r3, r7, r3
 8007fdc:	2200      	movs	r2, #0
 8007fde:	701a      	strb	r2, [r3, #0]
 8007fe0:	e003      	b.n	8007fea <UART_SetConfig+0x17a>
 8007fe2:	231f      	movs	r3, #31
 8007fe4:	18fb      	adds	r3, r7, r3
 8007fe6:	2210      	movs	r2, #16
 8007fe8:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	69da      	ldr	r2, [r3, #28]
 8007fee:	2380      	movs	r3, #128	; 0x80
 8007ff0:	021b      	lsls	r3, r3, #8
 8007ff2:	429a      	cmp	r2, r3
 8007ff4:	d15d      	bne.n	80080b2 <UART_SetConfig+0x242>
  {
    switch (clocksource)
 8007ff6:	231f      	movs	r3, #31
 8007ff8:	18fb      	adds	r3, r7, r3
 8007ffa:	781b      	ldrb	r3, [r3, #0]
 8007ffc:	2b08      	cmp	r3, #8
 8007ffe:	d015      	beq.n	800802c <UART_SetConfig+0x1bc>
 8008000:	dc18      	bgt.n	8008034 <UART_SetConfig+0x1c4>
 8008002:	2b04      	cmp	r3, #4
 8008004:	d00d      	beq.n	8008022 <UART_SetConfig+0x1b2>
 8008006:	dc15      	bgt.n	8008034 <UART_SetConfig+0x1c4>
 8008008:	2b00      	cmp	r3, #0
 800800a:	d002      	beq.n	8008012 <UART_SetConfig+0x1a2>
 800800c:	2b02      	cmp	r3, #2
 800800e:	d005      	beq.n	800801c <UART_SetConfig+0x1ac>
 8008010:	e010      	b.n	8008034 <UART_SetConfig+0x1c4>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008012:	f7fe f865 	bl	80060e0 <HAL_RCC_GetPCLK1Freq>
 8008016:	0003      	movs	r3, r0
 8008018:	61bb      	str	r3, [r7, #24]
        break;
 800801a:	e012      	b.n	8008042 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800801c:	4b57      	ldr	r3, [pc, #348]	; (800817c <UART_SetConfig+0x30c>)
 800801e:	61bb      	str	r3, [r7, #24]
        break;
 8008020:	e00f      	b.n	8008042 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008022:	f7fd ffd1 	bl	8005fc8 <HAL_RCC_GetSysClockFreq>
 8008026:	0003      	movs	r3, r0
 8008028:	61bb      	str	r3, [r7, #24]
        break;
 800802a:	e00a      	b.n	8008042 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800802c:	2380      	movs	r3, #128	; 0x80
 800802e:	021b      	lsls	r3, r3, #8
 8008030:	61bb      	str	r3, [r7, #24]
        break;
 8008032:	e006      	b.n	8008042 <UART_SetConfig+0x1d2>
      default:
        pclk = 0U;
 8008034:	2300      	movs	r3, #0
 8008036:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8008038:	231e      	movs	r3, #30
 800803a:	18fb      	adds	r3, r7, r3
 800803c:	2201      	movs	r2, #1
 800803e:	701a      	strb	r2, [r3, #0]
        break;
 8008040:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008042:	69bb      	ldr	r3, [r7, #24]
 8008044:	2b00      	cmp	r3, #0
 8008046:	d100      	bne.n	800804a <UART_SetConfig+0x1da>
 8008048:	e07b      	b.n	8008142 <UART_SetConfig+0x2d2>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800804a:	69bb      	ldr	r3, [r7, #24]
 800804c:	005a      	lsls	r2, r3, #1
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	685b      	ldr	r3, [r3, #4]
 8008052:	085b      	lsrs	r3, r3, #1
 8008054:	18d2      	adds	r2, r2, r3
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	685b      	ldr	r3, [r3, #4]
 800805a:	0019      	movs	r1, r3
 800805c:	0010      	movs	r0, r2
 800805e:	f7f8 f865 	bl	800012c <__udivsi3>
 8008062:	0003      	movs	r3, r0
 8008064:	b29b      	uxth	r3, r3
 8008066:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008068:	693b      	ldr	r3, [r7, #16]
 800806a:	2b0f      	cmp	r3, #15
 800806c:	d91c      	bls.n	80080a8 <UART_SetConfig+0x238>
 800806e:	693a      	ldr	r2, [r7, #16]
 8008070:	2380      	movs	r3, #128	; 0x80
 8008072:	025b      	lsls	r3, r3, #9
 8008074:	429a      	cmp	r2, r3
 8008076:	d217      	bcs.n	80080a8 <UART_SetConfig+0x238>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008078:	693b      	ldr	r3, [r7, #16]
 800807a:	b29a      	uxth	r2, r3
 800807c:	200e      	movs	r0, #14
 800807e:	183b      	adds	r3, r7, r0
 8008080:	210f      	movs	r1, #15
 8008082:	438a      	bics	r2, r1
 8008084:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008086:	693b      	ldr	r3, [r7, #16]
 8008088:	085b      	lsrs	r3, r3, #1
 800808a:	b29b      	uxth	r3, r3
 800808c:	2207      	movs	r2, #7
 800808e:	4013      	ands	r3, r2
 8008090:	b299      	uxth	r1, r3
 8008092:	183b      	adds	r3, r7, r0
 8008094:	183a      	adds	r2, r7, r0
 8008096:	8812      	ldrh	r2, [r2, #0]
 8008098:	430a      	orrs	r2, r1
 800809a:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	183a      	adds	r2, r7, r0
 80080a2:	8812      	ldrh	r2, [r2, #0]
 80080a4:	60da      	str	r2, [r3, #12]
 80080a6:	e04c      	b.n	8008142 <UART_SetConfig+0x2d2>
      }
      else
      {
        ret = HAL_ERROR;
 80080a8:	231e      	movs	r3, #30
 80080aa:	18fb      	adds	r3, r7, r3
 80080ac:	2201      	movs	r2, #1
 80080ae:	701a      	strb	r2, [r3, #0]
 80080b0:	e047      	b.n	8008142 <UART_SetConfig+0x2d2>
      }
    }
  }
  else
  {
    switch (clocksource)
 80080b2:	231f      	movs	r3, #31
 80080b4:	18fb      	adds	r3, r7, r3
 80080b6:	781b      	ldrb	r3, [r3, #0]
 80080b8:	2b08      	cmp	r3, #8
 80080ba:	d015      	beq.n	80080e8 <UART_SetConfig+0x278>
 80080bc:	dc18      	bgt.n	80080f0 <UART_SetConfig+0x280>
 80080be:	2b04      	cmp	r3, #4
 80080c0:	d00d      	beq.n	80080de <UART_SetConfig+0x26e>
 80080c2:	dc15      	bgt.n	80080f0 <UART_SetConfig+0x280>
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	d002      	beq.n	80080ce <UART_SetConfig+0x25e>
 80080c8:	2b02      	cmp	r3, #2
 80080ca:	d005      	beq.n	80080d8 <UART_SetConfig+0x268>
 80080cc:	e010      	b.n	80080f0 <UART_SetConfig+0x280>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80080ce:	f7fe f807 	bl	80060e0 <HAL_RCC_GetPCLK1Freq>
 80080d2:	0003      	movs	r3, r0
 80080d4:	61bb      	str	r3, [r7, #24]
        break;
 80080d6:	e012      	b.n	80080fe <UART_SetConfig+0x28e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80080d8:	4b28      	ldr	r3, [pc, #160]	; (800817c <UART_SetConfig+0x30c>)
 80080da:	61bb      	str	r3, [r7, #24]
        break;
 80080dc:	e00f      	b.n	80080fe <UART_SetConfig+0x28e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80080de:	f7fd ff73 	bl	8005fc8 <HAL_RCC_GetSysClockFreq>
 80080e2:	0003      	movs	r3, r0
 80080e4:	61bb      	str	r3, [r7, #24]
        break;
 80080e6:	e00a      	b.n	80080fe <UART_SetConfig+0x28e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80080e8:	2380      	movs	r3, #128	; 0x80
 80080ea:	021b      	lsls	r3, r3, #8
 80080ec:	61bb      	str	r3, [r7, #24]
        break;
 80080ee:	e006      	b.n	80080fe <UART_SetConfig+0x28e>
      default:
        pclk = 0U;
 80080f0:	2300      	movs	r3, #0
 80080f2:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80080f4:	231e      	movs	r3, #30
 80080f6:	18fb      	adds	r3, r7, r3
 80080f8:	2201      	movs	r2, #1
 80080fa:	701a      	strb	r2, [r3, #0]
        break;
 80080fc:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 80080fe:	69bb      	ldr	r3, [r7, #24]
 8008100:	2b00      	cmp	r3, #0
 8008102:	d01e      	beq.n	8008142 <UART_SetConfig+0x2d2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	685b      	ldr	r3, [r3, #4]
 8008108:	085a      	lsrs	r2, r3, #1
 800810a:	69bb      	ldr	r3, [r7, #24]
 800810c:	18d2      	adds	r2, r2, r3
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	685b      	ldr	r3, [r3, #4]
 8008112:	0019      	movs	r1, r3
 8008114:	0010      	movs	r0, r2
 8008116:	f7f8 f809 	bl	800012c <__udivsi3>
 800811a:	0003      	movs	r3, r0
 800811c:	b29b      	uxth	r3, r3
 800811e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008120:	693b      	ldr	r3, [r7, #16]
 8008122:	2b0f      	cmp	r3, #15
 8008124:	d909      	bls.n	800813a <UART_SetConfig+0x2ca>
 8008126:	693a      	ldr	r2, [r7, #16]
 8008128:	2380      	movs	r3, #128	; 0x80
 800812a:	025b      	lsls	r3, r3, #9
 800812c:	429a      	cmp	r2, r3
 800812e:	d204      	bcs.n	800813a <UART_SetConfig+0x2ca>
      {
        huart->Instance->BRR = usartdiv;
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	693a      	ldr	r2, [r7, #16]
 8008136:	60da      	str	r2, [r3, #12]
 8008138:	e003      	b.n	8008142 <UART_SetConfig+0x2d2>
      }
      else
      {
        ret = HAL_ERROR;
 800813a:	231e      	movs	r3, #30
 800813c:	18fb      	adds	r3, r7, r3
 800813e:	2201      	movs	r2, #1
 8008140:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	2200      	movs	r2, #0
 8008146:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	2200      	movs	r2, #0
 800814c:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800814e:	231e      	movs	r3, #30
 8008150:	18fb      	adds	r3, r7, r3
 8008152:	781b      	ldrb	r3, [r3, #0]
}
 8008154:	0018      	movs	r0, r3
 8008156:	46bd      	mov	sp, r7
 8008158:	b008      	add	sp, #32
 800815a:	bd80      	pop	{r7, pc}
 800815c:	efff69f3 	.word	0xefff69f3
 8008160:	ffffcfff 	.word	0xffffcfff
 8008164:	fffff4ff 	.word	0xfffff4ff
 8008168:	40013800 	.word	0x40013800
 800816c:	40021000 	.word	0x40021000
 8008170:	40004400 	.word	0x40004400
 8008174:	40004800 	.word	0x40004800
 8008178:	40004c00 	.word	0x40004c00
 800817c:	007a1200 	.word	0x007a1200

08008180 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008180:	b580      	push	{r7, lr}
 8008182:	b082      	sub	sp, #8
 8008184:	af00      	add	r7, sp, #0
 8008186:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800818c:	2201      	movs	r2, #1
 800818e:	4013      	ands	r3, r2
 8008190:	d00b      	beq.n	80081aa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	685b      	ldr	r3, [r3, #4]
 8008198:	4a4a      	ldr	r2, [pc, #296]	; (80082c4 <UART_AdvFeatureConfig+0x144>)
 800819a:	4013      	ands	r3, r2
 800819c:	0019      	movs	r1, r3
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	430a      	orrs	r2, r1
 80081a8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081ae:	2202      	movs	r2, #2
 80081b0:	4013      	ands	r3, r2
 80081b2:	d00b      	beq.n	80081cc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	685b      	ldr	r3, [r3, #4]
 80081ba:	4a43      	ldr	r2, [pc, #268]	; (80082c8 <UART_AdvFeatureConfig+0x148>)
 80081bc:	4013      	ands	r3, r2
 80081be:	0019      	movs	r1, r3
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	430a      	orrs	r2, r1
 80081ca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081d0:	2204      	movs	r2, #4
 80081d2:	4013      	ands	r3, r2
 80081d4:	d00b      	beq.n	80081ee <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	685b      	ldr	r3, [r3, #4]
 80081dc:	4a3b      	ldr	r2, [pc, #236]	; (80082cc <UART_AdvFeatureConfig+0x14c>)
 80081de:	4013      	ands	r3, r2
 80081e0:	0019      	movs	r1, r3
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	430a      	orrs	r2, r1
 80081ec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081f2:	2208      	movs	r2, #8
 80081f4:	4013      	ands	r3, r2
 80081f6:	d00b      	beq.n	8008210 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	685b      	ldr	r3, [r3, #4]
 80081fe:	4a34      	ldr	r2, [pc, #208]	; (80082d0 <UART_AdvFeatureConfig+0x150>)
 8008200:	4013      	ands	r3, r2
 8008202:	0019      	movs	r1, r3
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	430a      	orrs	r2, r1
 800820e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008214:	2210      	movs	r2, #16
 8008216:	4013      	ands	r3, r2
 8008218:	d00b      	beq.n	8008232 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	689b      	ldr	r3, [r3, #8]
 8008220:	4a2c      	ldr	r2, [pc, #176]	; (80082d4 <UART_AdvFeatureConfig+0x154>)
 8008222:	4013      	ands	r3, r2
 8008224:	0019      	movs	r1, r3
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	430a      	orrs	r2, r1
 8008230:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008236:	2220      	movs	r2, #32
 8008238:	4013      	ands	r3, r2
 800823a:	d00b      	beq.n	8008254 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	689b      	ldr	r3, [r3, #8]
 8008242:	4a25      	ldr	r2, [pc, #148]	; (80082d8 <UART_AdvFeatureConfig+0x158>)
 8008244:	4013      	ands	r3, r2
 8008246:	0019      	movs	r1, r3
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	430a      	orrs	r2, r1
 8008252:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008258:	2240      	movs	r2, #64	; 0x40
 800825a:	4013      	ands	r3, r2
 800825c:	d01d      	beq.n	800829a <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	685b      	ldr	r3, [r3, #4]
 8008264:	4a1d      	ldr	r2, [pc, #116]	; (80082dc <UART_AdvFeatureConfig+0x15c>)
 8008266:	4013      	ands	r3, r2
 8008268:	0019      	movs	r1, r3
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	430a      	orrs	r2, r1
 8008274:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800827a:	2380      	movs	r3, #128	; 0x80
 800827c:	035b      	lsls	r3, r3, #13
 800827e:	429a      	cmp	r2, r3
 8008280:	d10b      	bne.n	800829a <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	685b      	ldr	r3, [r3, #4]
 8008288:	4a15      	ldr	r2, [pc, #84]	; (80082e0 <UART_AdvFeatureConfig+0x160>)
 800828a:	4013      	ands	r3, r2
 800828c:	0019      	movs	r1, r3
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	430a      	orrs	r2, r1
 8008298:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800829e:	2280      	movs	r2, #128	; 0x80
 80082a0:	4013      	ands	r3, r2
 80082a2:	d00b      	beq.n	80082bc <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	685b      	ldr	r3, [r3, #4]
 80082aa:	4a0e      	ldr	r2, [pc, #56]	; (80082e4 <UART_AdvFeatureConfig+0x164>)
 80082ac:	4013      	ands	r3, r2
 80082ae:	0019      	movs	r1, r3
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	430a      	orrs	r2, r1
 80082ba:	605a      	str	r2, [r3, #4]
  }
}
 80082bc:	46c0      	nop			; (mov r8, r8)
 80082be:	46bd      	mov	sp, r7
 80082c0:	b002      	add	sp, #8
 80082c2:	bd80      	pop	{r7, pc}
 80082c4:	fffdffff 	.word	0xfffdffff
 80082c8:	fffeffff 	.word	0xfffeffff
 80082cc:	fffbffff 	.word	0xfffbffff
 80082d0:	ffff7fff 	.word	0xffff7fff
 80082d4:	ffffefff 	.word	0xffffefff
 80082d8:	ffffdfff 	.word	0xffffdfff
 80082dc:	ffefffff 	.word	0xffefffff
 80082e0:	ff9fffff 	.word	0xff9fffff
 80082e4:	fff7ffff 	.word	0xfff7ffff

080082e8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80082e8:	b580      	push	{r7, lr}
 80082ea:	b086      	sub	sp, #24
 80082ec:	af02      	add	r7, sp, #8
 80082ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	2280      	movs	r2, #128	; 0x80
 80082f4:	2100      	movs	r1, #0
 80082f6:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80082f8:	f7fa fb00 	bl	80028fc <HAL_GetTick>
 80082fc:	0003      	movs	r3, r0
 80082fe:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	2208      	movs	r2, #8
 8008308:	4013      	ands	r3, r2
 800830a:	2b08      	cmp	r3, #8
 800830c:	d10c      	bne.n	8008328 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800830e:	68fb      	ldr	r3, [r7, #12]
 8008310:	2280      	movs	r2, #128	; 0x80
 8008312:	0391      	lsls	r1, r2, #14
 8008314:	6878      	ldr	r0, [r7, #4]
 8008316:	4a17      	ldr	r2, [pc, #92]	; (8008374 <UART_CheckIdleState+0x8c>)
 8008318:	9200      	str	r2, [sp, #0]
 800831a:	2200      	movs	r2, #0
 800831c:	f000 f82c 	bl	8008378 <UART_WaitOnFlagUntilTimeout>
 8008320:	1e03      	subs	r3, r0, #0
 8008322:	d001      	beq.n	8008328 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008324:	2303      	movs	r3, #3
 8008326:	e021      	b.n	800836c <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	2204      	movs	r2, #4
 8008330:	4013      	ands	r3, r2
 8008332:	2b04      	cmp	r3, #4
 8008334:	d10c      	bne.n	8008350 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008336:	68fb      	ldr	r3, [r7, #12]
 8008338:	2280      	movs	r2, #128	; 0x80
 800833a:	03d1      	lsls	r1, r2, #15
 800833c:	6878      	ldr	r0, [r7, #4]
 800833e:	4a0d      	ldr	r2, [pc, #52]	; (8008374 <UART_CheckIdleState+0x8c>)
 8008340:	9200      	str	r2, [sp, #0]
 8008342:	2200      	movs	r2, #0
 8008344:	f000 f818 	bl	8008378 <UART_WaitOnFlagUntilTimeout>
 8008348:	1e03      	subs	r3, r0, #0
 800834a:	d001      	beq.n	8008350 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800834c:	2303      	movs	r3, #3
 800834e:	e00d      	b.n	800836c <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	2220      	movs	r2, #32
 8008354:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	2220      	movs	r2, #32
 800835a:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	2200      	movs	r2, #0
 8008360:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	2274      	movs	r2, #116	; 0x74
 8008366:	2100      	movs	r1, #0
 8008368:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800836a:	2300      	movs	r3, #0
}
 800836c:	0018      	movs	r0, r3
 800836e:	46bd      	mov	sp, r7
 8008370:	b004      	add	sp, #16
 8008372:	bd80      	pop	{r7, pc}
 8008374:	01ffffff 	.word	0x01ffffff

08008378 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008378:	b580      	push	{r7, lr}
 800837a:	b094      	sub	sp, #80	; 0x50
 800837c:	af00      	add	r7, sp, #0
 800837e:	60f8      	str	r0, [r7, #12]
 8008380:	60b9      	str	r1, [r7, #8]
 8008382:	603b      	str	r3, [r7, #0]
 8008384:	1dfb      	adds	r3, r7, #7
 8008386:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008388:	e0a3      	b.n	80084d2 <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800838a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800838c:	3301      	adds	r3, #1
 800838e:	d100      	bne.n	8008392 <UART_WaitOnFlagUntilTimeout+0x1a>
 8008390:	e09f      	b.n	80084d2 <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008392:	f7fa fab3 	bl	80028fc <HAL_GetTick>
 8008396:	0002      	movs	r2, r0
 8008398:	683b      	ldr	r3, [r7, #0]
 800839a:	1ad3      	subs	r3, r2, r3
 800839c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800839e:	429a      	cmp	r2, r3
 80083a0:	d302      	bcc.n	80083a8 <UART_WaitOnFlagUntilTimeout+0x30>
 80083a2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80083a4:	2b00      	cmp	r3, #0
 80083a6:	d13d      	bne.n	8008424 <UART_WaitOnFlagUntilTimeout+0xac>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80083a8:	f3ef 8310 	mrs	r3, PRIMASK
 80083ac:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 80083ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80083b0:	647b      	str	r3, [r7, #68]	; 0x44
 80083b2:	2301      	movs	r3, #1
 80083b4:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80083b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083b8:	f383 8810 	msr	PRIMASK, r3
}
 80083bc:	46c0      	nop			; (mov r8, r8)
 80083be:	68fb      	ldr	r3, [r7, #12]
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	681a      	ldr	r2, [r3, #0]
 80083c4:	68fb      	ldr	r3, [r7, #12]
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	494c      	ldr	r1, [pc, #304]	; (80084fc <UART_WaitOnFlagUntilTimeout+0x184>)
 80083ca:	400a      	ands	r2, r1
 80083cc:	601a      	str	r2, [r3, #0]
 80083ce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80083d0:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80083d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083d4:	f383 8810 	msr	PRIMASK, r3
}
 80083d8:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80083da:	f3ef 8310 	mrs	r3, PRIMASK
 80083de:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 80083e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80083e2:	643b      	str	r3, [r7, #64]	; 0x40
 80083e4:	2301      	movs	r3, #1
 80083e6:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80083e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083ea:	f383 8810 	msr	PRIMASK, r3
}
 80083ee:	46c0      	nop			; (mov r8, r8)
 80083f0:	68fb      	ldr	r3, [r7, #12]
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	689a      	ldr	r2, [r3, #8]
 80083f6:	68fb      	ldr	r3, [r7, #12]
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	2101      	movs	r1, #1
 80083fc:	438a      	bics	r2, r1
 80083fe:	609a      	str	r2, [r3, #8]
 8008400:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008402:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008404:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008406:	f383 8810 	msr	PRIMASK, r3
}
 800840a:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 800840c:	68fb      	ldr	r3, [r7, #12]
 800840e:	2220      	movs	r2, #32
 8008410:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8008412:	68fb      	ldr	r3, [r7, #12]
 8008414:	2220      	movs	r2, #32
 8008416:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8008418:	68fb      	ldr	r3, [r7, #12]
 800841a:	2274      	movs	r2, #116	; 0x74
 800841c:	2100      	movs	r1, #0
 800841e:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8008420:	2303      	movs	r3, #3
 8008422:	e067      	b.n	80084f4 <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008424:	68fb      	ldr	r3, [r7, #12]
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	2204      	movs	r2, #4
 800842c:	4013      	ands	r3, r2
 800842e:	d050      	beq.n	80084d2 <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	69da      	ldr	r2, [r3, #28]
 8008436:	2380      	movs	r3, #128	; 0x80
 8008438:	011b      	lsls	r3, r3, #4
 800843a:	401a      	ands	r2, r3
 800843c:	2380      	movs	r3, #128	; 0x80
 800843e:	011b      	lsls	r3, r3, #4
 8008440:	429a      	cmp	r2, r3
 8008442:	d146      	bne.n	80084d2 <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008444:	68fb      	ldr	r3, [r7, #12]
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	2280      	movs	r2, #128	; 0x80
 800844a:	0112      	lsls	r2, r2, #4
 800844c:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800844e:	f3ef 8310 	mrs	r3, PRIMASK
 8008452:	613b      	str	r3, [r7, #16]
  return(result);
 8008454:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008456:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008458:	2301      	movs	r3, #1
 800845a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800845c:	697b      	ldr	r3, [r7, #20]
 800845e:	f383 8810 	msr	PRIMASK, r3
}
 8008462:	46c0      	nop			; (mov r8, r8)
 8008464:	68fb      	ldr	r3, [r7, #12]
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	681a      	ldr	r2, [r3, #0]
 800846a:	68fb      	ldr	r3, [r7, #12]
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	4923      	ldr	r1, [pc, #140]	; (80084fc <UART_WaitOnFlagUntilTimeout+0x184>)
 8008470:	400a      	ands	r2, r1
 8008472:	601a      	str	r2, [r3, #0]
 8008474:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008476:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008478:	69bb      	ldr	r3, [r7, #24]
 800847a:	f383 8810 	msr	PRIMASK, r3
}
 800847e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008480:	f3ef 8310 	mrs	r3, PRIMASK
 8008484:	61fb      	str	r3, [r7, #28]
  return(result);
 8008486:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008488:	64bb      	str	r3, [r7, #72]	; 0x48
 800848a:	2301      	movs	r3, #1
 800848c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800848e:	6a3b      	ldr	r3, [r7, #32]
 8008490:	f383 8810 	msr	PRIMASK, r3
}
 8008494:	46c0      	nop			; (mov r8, r8)
 8008496:	68fb      	ldr	r3, [r7, #12]
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	689a      	ldr	r2, [r3, #8]
 800849c:	68fb      	ldr	r3, [r7, #12]
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	2101      	movs	r1, #1
 80084a2:	438a      	bics	r2, r1
 80084a4:	609a      	str	r2, [r3, #8]
 80084a6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80084a8:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80084aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084ac:	f383 8810 	msr	PRIMASK, r3
}
 80084b0:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 80084b2:	68fb      	ldr	r3, [r7, #12]
 80084b4:	2220      	movs	r2, #32
 80084b6:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80084b8:	68fb      	ldr	r3, [r7, #12]
 80084ba:	2220      	movs	r2, #32
 80084bc:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80084be:	68fb      	ldr	r3, [r7, #12]
 80084c0:	2280      	movs	r2, #128	; 0x80
 80084c2:	2120      	movs	r1, #32
 80084c4:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80084c6:	68fb      	ldr	r3, [r7, #12]
 80084c8:	2274      	movs	r2, #116	; 0x74
 80084ca:	2100      	movs	r1, #0
 80084cc:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80084ce:	2303      	movs	r3, #3
 80084d0:	e010      	b.n	80084f4 <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80084d2:	68fb      	ldr	r3, [r7, #12]
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	69db      	ldr	r3, [r3, #28]
 80084d8:	68ba      	ldr	r2, [r7, #8]
 80084da:	4013      	ands	r3, r2
 80084dc:	68ba      	ldr	r2, [r7, #8]
 80084de:	1ad3      	subs	r3, r2, r3
 80084e0:	425a      	negs	r2, r3
 80084e2:	4153      	adcs	r3, r2
 80084e4:	b2db      	uxtb	r3, r3
 80084e6:	001a      	movs	r2, r3
 80084e8:	1dfb      	adds	r3, r7, #7
 80084ea:	781b      	ldrb	r3, [r3, #0]
 80084ec:	429a      	cmp	r2, r3
 80084ee:	d100      	bne.n	80084f2 <UART_WaitOnFlagUntilTimeout+0x17a>
 80084f0:	e74b      	b.n	800838a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80084f2:	2300      	movs	r3, #0
}
 80084f4:	0018      	movs	r0, r3
 80084f6:	46bd      	mov	sp, r7
 80084f8:	b014      	add	sp, #80	; 0x50
 80084fa:	bd80      	pop	{r7, pc}
 80084fc:	fffffe5f 	.word	0xfffffe5f

08008500 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008500:	b580      	push	{r7, lr}
 8008502:	b08e      	sub	sp, #56	; 0x38
 8008504:	af00      	add	r7, sp, #0
 8008506:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008508:	f3ef 8310 	mrs	r3, PRIMASK
 800850c:	617b      	str	r3, [r7, #20]
  return(result);
 800850e:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008510:	637b      	str	r3, [r7, #52]	; 0x34
 8008512:	2301      	movs	r3, #1
 8008514:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008516:	69bb      	ldr	r3, [r7, #24]
 8008518:	f383 8810 	msr	PRIMASK, r3
}
 800851c:	46c0      	nop			; (mov r8, r8)
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	681a      	ldr	r2, [r3, #0]
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	4925      	ldr	r1, [pc, #148]	; (80085c0 <UART_EndRxTransfer+0xc0>)
 800852a:	400a      	ands	r2, r1
 800852c:	601a      	str	r2, [r3, #0]
 800852e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008530:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008532:	69fb      	ldr	r3, [r7, #28]
 8008534:	f383 8810 	msr	PRIMASK, r3
}
 8008538:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800853a:	f3ef 8310 	mrs	r3, PRIMASK
 800853e:	623b      	str	r3, [r7, #32]
  return(result);
 8008540:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008542:	633b      	str	r3, [r7, #48]	; 0x30
 8008544:	2301      	movs	r3, #1
 8008546:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008548:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800854a:	f383 8810 	msr	PRIMASK, r3
}
 800854e:	46c0      	nop			; (mov r8, r8)
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	689a      	ldr	r2, [r3, #8]
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	2101      	movs	r1, #1
 800855c:	438a      	bics	r2, r1
 800855e:	609a      	str	r2, [r3, #8]
 8008560:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008562:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008564:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008566:	f383 8810 	msr	PRIMASK, r3
}
 800856a:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008570:	2b01      	cmp	r3, #1
 8008572:	d118      	bne.n	80085a6 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008574:	f3ef 8310 	mrs	r3, PRIMASK
 8008578:	60bb      	str	r3, [r7, #8]
  return(result);
 800857a:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800857c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800857e:	2301      	movs	r3, #1
 8008580:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008582:	68fb      	ldr	r3, [r7, #12]
 8008584:	f383 8810 	msr	PRIMASK, r3
}
 8008588:	46c0      	nop			; (mov r8, r8)
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	681a      	ldr	r2, [r3, #0]
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	2110      	movs	r1, #16
 8008596:	438a      	bics	r2, r1
 8008598:	601a      	str	r2, [r3, #0]
 800859a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800859c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800859e:	693b      	ldr	r3, [r7, #16]
 80085a0:	f383 8810 	msr	PRIMASK, r3
}
 80085a4:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	2220      	movs	r2, #32
 80085aa:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	2200      	movs	r2, #0
 80085b0:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	2200      	movs	r2, #0
 80085b6:	665a      	str	r2, [r3, #100]	; 0x64
}
 80085b8:	46c0      	nop			; (mov r8, r8)
 80085ba:	46bd      	mov	sp, r7
 80085bc:	b00e      	add	sp, #56	; 0x38
 80085be:	bd80      	pop	{r7, pc}
 80085c0:	fffffedf 	.word	0xfffffedf

080085c4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80085c4:	b580      	push	{r7, lr}
 80085c6:	b084      	sub	sp, #16
 80085c8:	af00      	add	r7, sp, #0
 80085ca:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085d0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80085d2:	68fb      	ldr	r3, [r7, #12]
 80085d4:	225a      	movs	r2, #90	; 0x5a
 80085d6:	2100      	movs	r1, #0
 80085d8:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 80085da:	68fb      	ldr	r3, [r7, #12]
 80085dc:	2252      	movs	r2, #82	; 0x52
 80085de:	2100      	movs	r1, #0
 80085e0:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80085e2:	68fb      	ldr	r3, [r7, #12]
 80085e4:	0018      	movs	r0, r3
 80085e6:	f7ff fc2f 	bl	8007e48 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80085ea:	46c0      	nop			; (mov r8, r8)
 80085ec:	46bd      	mov	sp, r7
 80085ee:	b004      	add	sp, #16
 80085f0:	bd80      	pop	{r7, pc}

080085f2 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80085f2:	b580      	push	{r7, lr}
 80085f4:	b086      	sub	sp, #24
 80085f6:	af00      	add	r7, sp, #0
 80085f8:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80085fa:	f3ef 8310 	mrs	r3, PRIMASK
 80085fe:	60bb      	str	r3, [r7, #8]
  return(result);
 8008600:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008602:	617b      	str	r3, [r7, #20]
 8008604:	2301      	movs	r3, #1
 8008606:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008608:	68fb      	ldr	r3, [r7, #12]
 800860a:	f383 8810 	msr	PRIMASK, r3
}
 800860e:	46c0      	nop			; (mov r8, r8)
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	681a      	ldr	r2, [r3, #0]
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	681b      	ldr	r3, [r3, #0]
 800861a:	2140      	movs	r1, #64	; 0x40
 800861c:	438a      	bics	r2, r1
 800861e:	601a      	str	r2, [r3, #0]
 8008620:	697b      	ldr	r3, [r7, #20]
 8008622:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008624:	693b      	ldr	r3, [r7, #16]
 8008626:	f383 8810 	msr	PRIMASK, r3
}
 800862a:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	2220      	movs	r2, #32
 8008630:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	2200      	movs	r2, #0
 8008636:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	0018      	movs	r0, r3
 800863c:	f7ff fbfc 	bl	8007e38 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008640:	46c0      	nop			; (mov r8, r8)
 8008642:	46bd      	mov	sp, r7
 8008644:	b006      	add	sp, #24
 8008646:	bd80      	pop	{r7, pc}

08008648 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8008648:	b580      	push	{r7, lr}
 800864a:	b082      	sub	sp, #8
 800864c:	af00      	add	r7, sp, #0
 800864e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8008650:	46c0      	nop			; (mov r8, r8)
 8008652:	46bd      	mov	sp, r7
 8008654:	b002      	add	sp, #8
 8008656:	bd80      	pop	{r7, pc}

08008658 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8008658:	b580      	push	{r7, lr}
 800865a:	b084      	sub	sp, #16
 800865c:	af00      	add	r7, sp, #0
 800865e:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	2244      	movs	r2, #68	; 0x44
 8008664:	2100      	movs	r1, #0
 8008666:	5299      	strh	r1, [r3, r2]

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8008668:	4b05      	ldr	r3, [pc, #20]	; (8008680 <USB_EnableGlobalInt+0x28>)
 800866a:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 800866c:	68fb      	ldr	r3, [r7, #12]
 800866e:	b299      	uxth	r1, r3
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	2240      	movs	r2, #64	; 0x40
 8008674:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8008676:	2300      	movs	r3, #0
}
 8008678:	0018      	movs	r0, r3
 800867a:	46bd      	mov	sp, r7
 800867c:	b004      	add	sp, #16
 800867e:	bd80      	pop	{r7, pc}
 8008680:	0000bf80 	.word	0x0000bf80

08008684 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8008684:	b580      	push	{r7, lr}
 8008686:	b084      	sub	sp, #16
 8008688:	af00      	add	r7, sp, #0
 800868a:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800868c:	4b09      	ldr	r3, [pc, #36]	; (80086b4 <USB_DisableGlobalInt+0x30>)
 800868e:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	2240      	movs	r2, #64	; 0x40
 8008694:	5a9b      	ldrh	r3, [r3, r2]
 8008696:	b29b      	uxth	r3, r3
 8008698:	68fa      	ldr	r2, [r7, #12]
 800869a:	b292      	uxth	r2, r2
 800869c:	43d2      	mvns	r2, r2
 800869e:	b292      	uxth	r2, r2
 80086a0:	4013      	ands	r3, r2
 80086a2:	b299      	uxth	r1, r3
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	2240      	movs	r2, #64	; 0x40
 80086a8:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 80086aa:	2300      	movs	r3, #0
}
 80086ac:	0018      	movs	r0, r3
 80086ae:	46bd      	mov	sp, r7
 80086b0:	b004      	add	sp, #16
 80086b2:	bd80      	pop	{r7, pc}
 80086b4:	0000bf80 	.word	0x0000bf80

080086b8 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80086b8:	b084      	sub	sp, #16
 80086ba:	b590      	push	{r4, r7, lr}
 80086bc:	46c6      	mov	lr, r8
 80086be:	b500      	push	{lr}
 80086c0:	b082      	sub	sp, #8
 80086c2:	af00      	add	r7, sp, #0
 80086c4:	6078      	str	r0, [r7, #4]
 80086c6:	2004      	movs	r0, #4
 80086c8:	2410      	movs	r4, #16
 80086ca:	46a4      	mov	ip, r4
 80086cc:	2408      	movs	r4, #8
 80086ce:	46a0      	mov	r8, r4
 80086d0:	44b8      	add	r8, r7
 80086d2:	44c4      	add	ip, r8
 80086d4:	4460      	add	r0, ip
 80086d6:	6001      	str	r1, [r0, #0]
 80086d8:	6042      	str	r2, [r0, #4]
 80086da:	6083      	str	r3, [r0, #8]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	2240      	movs	r2, #64	; 0x40
 80086e0:	2101      	movs	r1, #1
 80086e2:	5299      	strh	r1, [r3, r2]

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	2240      	movs	r2, #64	; 0x40
 80086e8:	2100      	movs	r1, #0
 80086ea:	5299      	strh	r1, [r3, r2]

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	2244      	movs	r2, #68	; 0x44
 80086f0:	2100      	movs	r1, #0
 80086f2:	5299      	strh	r1, [r3, r2]

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	2250      	movs	r2, #80	; 0x50
 80086f8:	2100      	movs	r1, #0
 80086fa:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 80086fc:	2300      	movs	r3, #0
}
 80086fe:	0018      	movs	r0, r3
 8008700:	46bd      	mov	sp, r7
 8008702:	b002      	add	sp, #8
 8008704:	bc80      	pop	{r7}
 8008706:	46b8      	mov	r8, r7
 8008708:	bc90      	pop	{r4, r7}
 800870a:	bc08      	pop	{r3}
 800870c:	b004      	add	sp, #16
 800870e:	4718      	bx	r3

08008710 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008710:	b580      	push	{r7, lr}
 8008712:	b09c      	sub	sp, #112	; 0x70
 8008714:	af00      	add	r7, sp, #0
 8008716:	6078      	str	r0, [r7, #4]
 8008718:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800871a:	236f      	movs	r3, #111	; 0x6f
 800871c:	18fb      	adds	r3, r7, r3
 800871e:	2200      	movs	r2, #0
 8008720:	701a      	strb	r2, [r3, #0]
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8008722:	687a      	ldr	r2, [r7, #4]
 8008724:	683b      	ldr	r3, [r7, #0]
 8008726:	781b      	ldrb	r3, [r3, #0]
 8008728:	009b      	lsls	r3, r3, #2
 800872a:	18d3      	adds	r3, r2, r3
 800872c:	881b      	ldrh	r3, [r3, #0]
 800872e:	b29a      	uxth	r2, r3
 8008730:	236c      	movs	r3, #108	; 0x6c
 8008732:	18fb      	adds	r3, r7, r3
 8008734:	49cf      	ldr	r1, [pc, #828]	; (8008a74 <USB_ActivateEndpoint+0x364>)
 8008736:	400a      	ands	r2, r1
 8008738:	801a      	strh	r2, [r3, #0]

  /* initialize Endpoint */
  switch (ep->type)
 800873a:	683b      	ldr	r3, [r7, #0]
 800873c:	78db      	ldrb	r3, [r3, #3]
 800873e:	2b03      	cmp	r3, #3
 8008740:	d017      	beq.n	8008772 <USB_ActivateEndpoint+0x62>
 8008742:	dc28      	bgt.n	8008796 <USB_ActivateEndpoint+0x86>
 8008744:	2b02      	cmp	r3, #2
 8008746:	d00e      	beq.n	8008766 <USB_ActivateEndpoint+0x56>
 8008748:	dc25      	bgt.n	8008796 <USB_ActivateEndpoint+0x86>
 800874a:	2b00      	cmp	r3, #0
 800874c:	d002      	beq.n	8008754 <USB_ActivateEndpoint+0x44>
 800874e:	2b01      	cmp	r3, #1
 8008750:	d018      	beq.n	8008784 <USB_ActivateEndpoint+0x74>
 8008752:	e020      	b.n	8008796 <USB_ActivateEndpoint+0x86>
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8008754:	226c      	movs	r2, #108	; 0x6c
 8008756:	18bb      	adds	r3, r7, r2
 8008758:	18ba      	adds	r2, r7, r2
 800875a:	8812      	ldrh	r2, [r2, #0]
 800875c:	2180      	movs	r1, #128	; 0x80
 800875e:	0089      	lsls	r1, r1, #2
 8008760:	430a      	orrs	r2, r1
 8008762:	801a      	strh	r2, [r3, #0]
      break;
 8008764:	e01c      	b.n	80087a0 <USB_ActivateEndpoint+0x90>

    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
 8008766:	226c      	movs	r2, #108	; 0x6c
 8008768:	18bb      	adds	r3, r7, r2
 800876a:	18ba      	adds	r2, r7, r2
 800876c:	8812      	ldrh	r2, [r2, #0]
 800876e:	801a      	strh	r2, [r3, #0]
      break;
 8008770:	e016      	b.n	80087a0 <USB_ActivateEndpoint+0x90>

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8008772:	226c      	movs	r2, #108	; 0x6c
 8008774:	18bb      	adds	r3, r7, r2
 8008776:	18ba      	adds	r2, r7, r2
 8008778:	8812      	ldrh	r2, [r2, #0]
 800877a:	21c0      	movs	r1, #192	; 0xc0
 800877c:	00c9      	lsls	r1, r1, #3
 800877e:	430a      	orrs	r2, r1
 8008780:	801a      	strh	r2, [r3, #0]
      break;
 8008782:	e00d      	b.n	80087a0 <USB_ActivateEndpoint+0x90>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8008784:	226c      	movs	r2, #108	; 0x6c
 8008786:	18bb      	adds	r3, r7, r2
 8008788:	18ba      	adds	r2, r7, r2
 800878a:	8812      	ldrh	r2, [r2, #0]
 800878c:	2180      	movs	r1, #128	; 0x80
 800878e:	00c9      	lsls	r1, r1, #3
 8008790:	430a      	orrs	r2, r1
 8008792:	801a      	strh	r2, [r3, #0]
      break;
 8008794:	e004      	b.n	80087a0 <USB_ActivateEndpoint+0x90>

    default:
      ret = HAL_ERROR;
 8008796:	236f      	movs	r3, #111	; 0x6f
 8008798:	18fb      	adds	r3, r7, r3
 800879a:	2201      	movs	r2, #1
 800879c:	701a      	strb	r2, [r3, #0]
      break;
 800879e:	46c0      	nop			; (mov r8, r8)
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 80087a0:	687a      	ldr	r2, [r7, #4]
 80087a2:	683b      	ldr	r3, [r7, #0]
 80087a4:	781b      	ldrb	r3, [r3, #0]
 80087a6:	009b      	lsls	r3, r3, #2
 80087a8:	18d3      	adds	r3, r2, r3
 80087aa:	226c      	movs	r2, #108	; 0x6c
 80087ac:	18ba      	adds	r2, r7, r2
 80087ae:	8812      	ldrh	r2, [r2, #0]
 80087b0:	49b1      	ldr	r1, [pc, #708]	; (8008a78 <USB_ActivateEndpoint+0x368>)
 80087b2:	430a      	orrs	r2, r1
 80087b4:	b292      	uxth	r2, r2
 80087b6:	801a      	strh	r2, [r3, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 80087b8:	687a      	ldr	r2, [r7, #4]
 80087ba:	683b      	ldr	r3, [r7, #0]
 80087bc:	781b      	ldrb	r3, [r3, #0]
 80087be:	009b      	lsls	r3, r3, #2
 80087c0:	18d3      	adds	r3, r2, r3
 80087c2:	881b      	ldrh	r3, [r3, #0]
 80087c4:	b29b      	uxth	r3, r3
 80087c6:	b21b      	sxth	r3, r3
 80087c8:	4aac      	ldr	r2, [pc, #688]	; (8008a7c <USB_ActivateEndpoint+0x36c>)
 80087ca:	4013      	ands	r3, r2
 80087cc:	b21a      	sxth	r2, r3
 80087ce:	683b      	ldr	r3, [r7, #0]
 80087d0:	781b      	ldrb	r3, [r3, #0]
 80087d2:	b21b      	sxth	r3, r3
 80087d4:	4313      	orrs	r3, r2
 80087d6:	b21a      	sxth	r2, r3
 80087d8:	2166      	movs	r1, #102	; 0x66
 80087da:	187b      	adds	r3, r7, r1
 80087dc:	801a      	strh	r2, [r3, #0]
 80087de:	687a      	ldr	r2, [r7, #4]
 80087e0:	683b      	ldr	r3, [r7, #0]
 80087e2:	781b      	ldrb	r3, [r3, #0]
 80087e4:	009b      	lsls	r3, r3, #2
 80087e6:	18d3      	adds	r3, r2, r3
 80087e8:	187a      	adds	r2, r7, r1
 80087ea:	8812      	ldrh	r2, [r2, #0]
 80087ec:	49a2      	ldr	r1, [pc, #648]	; (8008a78 <USB_ActivateEndpoint+0x368>)
 80087ee:	430a      	orrs	r2, r1
 80087f0:	b292      	uxth	r2, r2
 80087f2:	801a      	strh	r2, [r3, #0]

  if (ep->doublebuffer == 0U)
 80087f4:	683b      	ldr	r3, [r7, #0]
 80087f6:	7b1b      	ldrb	r3, [r3, #12]
 80087f8:	2b00      	cmp	r3, #0
 80087fa:	d000      	beq.n	80087fe <USB_ActivateEndpoint+0xee>
 80087fc:	e150      	b.n	8008aa0 <USB_ActivateEndpoint+0x390>
  {
    if (ep->is_in != 0U)
 80087fe:	683b      	ldr	r3, [r7, #0]
 8008800:	785b      	ldrb	r3, [r3, #1]
 8008802:	2b00      	cmp	r3, #0
 8008804:	d100      	bne.n	8008808 <USB_ActivateEndpoint+0xf8>
 8008806:	e07a      	b.n	80088fe <USB_ActivateEndpoint+0x1ee>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	61bb      	str	r3, [r7, #24]
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	2250      	movs	r2, #80	; 0x50
 8008810:	5a9b      	ldrh	r3, [r3, r2]
 8008812:	b29b      	uxth	r3, r3
 8008814:	001a      	movs	r2, r3
 8008816:	69bb      	ldr	r3, [r7, #24]
 8008818:	189b      	adds	r3, r3, r2
 800881a:	61bb      	str	r3, [r7, #24]
 800881c:	683b      	ldr	r3, [r7, #0]
 800881e:	781b      	ldrb	r3, [r3, #0]
 8008820:	00da      	lsls	r2, r3, #3
 8008822:	69bb      	ldr	r3, [r7, #24]
 8008824:	18d3      	adds	r3, r2, r3
 8008826:	2280      	movs	r2, #128	; 0x80
 8008828:	00d2      	lsls	r2, r2, #3
 800882a:	4694      	mov	ip, r2
 800882c:	4463      	add	r3, ip
 800882e:	617b      	str	r3, [r7, #20]
 8008830:	683b      	ldr	r3, [r7, #0]
 8008832:	88db      	ldrh	r3, [r3, #6]
 8008834:	085b      	lsrs	r3, r3, #1
 8008836:	b29b      	uxth	r3, r3
 8008838:	18db      	adds	r3, r3, r3
 800883a:	b29a      	uxth	r2, r3
 800883c:	697b      	ldr	r3, [r7, #20]
 800883e:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008840:	687a      	ldr	r2, [r7, #4]
 8008842:	683b      	ldr	r3, [r7, #0]
 8008844:	781b      	ldrb	r3, [r3, #0]
 8008846:	009b      	lsls	r3, r3, #2
 8008848:	18d2      	adds	r2, r2, r3
 800884a:	2112      	movs	r1, #18
 800884c:	187b      	adds	r3, r7, r1
 800884e:	8812      	ldrh	r2, [r2, #0]
 8008850:	801a      	strh	r2, [r3, #0]
 8008852:	187b      	adds	r3, r7, r1
 8008854:	881b      	ldrh	r3, [r3, #0]
 8008856:	2240      	movs	r2, #64	; 0x40
 8008858:	4013      	ands	r3, r2
 800885a:	d016      	beq.n	800888a <USB_ActivateEndpoint+0x17a>
 800885c:	687a      	ldr	r2, [r7, #4]
 800885e:	683b      	ldr	r3, [r7, #0]
 8008860:	781b      	ldrb	r3, [r3, #0]
 8008862:	009b      	lsls	r3, r3, #2
 8008864:	18d3      	adds	r3, r2, r3
 8008866:	881b      	ldrh	r3, [r3, #0]
 8008868:	b29a      	uxth	r2, r3
 800886a:	2010      	movs	r0, #16
 800886c:	183b      	adds	r3, r7, r0
 800886e:	4983      	ldr	r1, [pc, #524]	; (8008a7c <USB_ActivateEndpoint+0x36c>)
 8008870:	400a      	ands	r2, r1
 8008872:	801a      	strh	r2, [r3, #0]
 8008874:	687a      	ldr	r2, [r7, #4]
 8008876:	683b      	ldr	r3, [r7, #0]
 8008878:	781b      	ldrb	r3, [r3, #0]
 800887a:	009b      	lsls	r3, r3, #2
 800887c:	18d3      	adds	r3, r2, r3
 800887e:	183a      	adds	r2, r7, r0
 8008880:	8812      	ldrh	r2, [r2, #0]
 8008882:	497f      	ldr	r1, [pc, #508]	; (8008a80 <USB_ActivateEndpoint+0x370>)
 8008884:	430a      	orrs	r2, r1
 8008886:	b292      	uxth	r2, r2
 8008888:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 800888a:	683b      	ldr	r3, [r7, #0]
 800888c:	78db      	ldrb	r3, [r3, #3]
 800888e:	2b01      	cmp	r3, #1
 8008890:	d01d      	beq.n	80088ce <USB_ActivateEndpoint+0x1be>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8008892:	687a      	ldr	r2, [r7, #4]
 8008894:	683b      	ldr	r3, [r7, #0]
 8008896:	781b      	ldrb	r3, [r3, #0]
 8008898:	009b      	lsls	r3, r3, #2
 800889a:	18d3      	adds	r3, r2, r3
 800889c:	881b      	ldrh	r3, [r3, #0]
 800889e:	b29a      	uxth	r2, r3
 80088a0:	200c      	movs	r0, #12
 80088a2:	183b      	adds	r3, r7, r0
 80088a4:	4977      	ldr	r1, [pc, #476]	; (8008a84 <USB_ActivateEndpoint+0x374>)
 80088a6:	400a      	ands	r2, r1
 80088a8:	801a      	strh	r2, [r3, #0]
 80088aa:	183b      	adds	r3, r7, r0
 80088ac:	183a      	adds	r2, r7, r0
 80088ae:	8812      	ldrh	r2, [r2, #0]
 80088b0:	2120      	movs	r1, #32
 80088b2:	404a      	eors	r2, r1
 80088b4:	801a      	strh	r2, [r3, #0]
 80088b6:	687a      	ldr	r2, [r7, #4]
 80088b8:	683b      	ldr	r3, [r7, #0]
 80088ba:	781b      	ldrb	r3, [r3, #0]
 80088bc:	009b      	lsls	r3, r3, #2
 80088be:	18d3      	adds	r3, r2, r3
 80088c0:	183a      	adds	r2, r7, r0
 80088c2:	8812      	ldrh	r2, [r2, #0]
 80088c4:	496c      	ldr	r1, [pc, #432]	; (8008a78 <USB_ActivateEndpoint+0x368>)
 80088c6:	430a      	orrs	r2, r1
 80088c8:	b292      	uxth	r2, r2
 80088ca:	801a      	strh	r2, [r3, #0]
 80088cc:	e27a      	b.n	8008dc4 <USB_ActivateEndpoint+0x6b4>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80088ce:	687a      	ldr	r2, [r7, #4]
 80088d0:	683b      	ldr	r3, [r7, #0]
 80088d2:	781b      	ldrb	r3, [r3, #0]
 80088d4:	009b      	lsls	r3, r3, #2
 80088d6:	18d3      	adds	r3, r2, r3
 80088d8:	881b      	ldrh	r3, [r3, #0]
 80088da:	b29a      	uxth	r2, r3
 80088dc:	200e      	movs	r0, #14
 80088de:	183b      	adds	r3, r7, r0
 80088e0:	4968      	ldr	r1, [pc, #416]	; (8008a84 <USB_ActivateEndpoint+0x374>)
 80088e2:	400a      	ands	r2, r1
 80088e4:	801a      	strh	r2, [r3, #0]
 80088e6:	687a      	ldr	r2, [r7, #4]
 80088e8:	683b      	ldr	r3, [r7, #0]
 80088ea:	781b      	ldrb	r3, [r3, #0]
 80088ec:	009b      	lsls	r3, r3, #2
 80088ee:	18d3      	adds	r3, r2, r3
 80088f0:	183a      	adds	r2, r7, r0
 80088f2:	8812      	ldrh	r2, [r2, #0]
 80088f4:	4960      	ldr	r1, [pc, #384]	; (8008a78 <USB_ActivateEndpoint+0x368>)
 80088f6:	430a      	orrs	r2, r1
 80088f8:	b292      	uxth	r2, r2
 80088fa:	801a      	strh	r2, [r3, #0]
 80088fc:	e262      	b.n	8008dc4 <USB_ActivateEndpoint+0x6b4>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	633b      	str	r3, [r7, #48]	; 0x30
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	2250      	movs	r2, #80	; 0x50
 8008906:	5a9b      	ldrh	r3, [r3, r2]
 8008908:	b29b      	uxth	r3, r3
 800890a:	001a      	movs	r2, r3
 800890c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800890e:	189b      	adds	r3, r3, r2
 8008910:	633b      	str	r3, [r7, #48]	; 0x30
 8008912:	683b      	ldr	r3, [r7, #0]
 8008914:	781b      	ldrb	r3, [r3, #0]
 8008916:	00da      	lsls	r2, r3, #3
 8008918:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800891a:	18d3      	adds	r3, r2, r3
 800891c:	4a5a      	ldr	r2, [pc, #360]	; (8008a88 <USB_ActivateEndpoint+0x378>)
 800891e:	4694      	mov	ip, r2
 8008920:	4463      	add	r3, ip
 8008922:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008924:	683b      	ldr	r3, [r7, #0]
 8008926:	88db      	ldrh	r3, [r3, #6]
 8008928:	085b      	lsrs	r3, r3, #1
 800892a:	b29b      	uxth	r3, r3
 800892c:	18db      	adds	r3, r3, r3
 800892e:	b29a      	uxth	r2, r3
 8008930:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008932:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	62bb      	str	r3, [r7, #40]	; 0x28
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	2250      	movs	r2, #80	; 0x50
 800893c:	5a9b      	ldrh	r3, [r3, r2]
 800893e:	b29b      	uxth	r3, r3
 8008940:	001a      	movs	r2, r3
 8008942:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008944:	189b      	adds	r3, r3, r2
 8008946:	62bb      	str	r3, [r7, #40]	; 0x28
 8008948:	683b      	ldr	r3, [r7, #0]
 800894a:	781b      	ldrb	r3, [r3, #0]
 800894c:	00da      	lsls	r2, r3, #3
 800894e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008950:	18d3      	adds	r3, r2, r3
 8008952:	4a4e      	ldr	r2, [pc, #312]	; (8008a8c <USB_ActivateEndpoint+0x37c>)
 8008954:	4694      	mov	ip, r2
 8008956:	4463      	add	r3, ip
 8008958:	627b      	str	r3, [r7, #36]	; 0x24
 800895a:	683b      	ldr	r3, [r7, #0]
 800895c:	691b      	ldr	r3, [r3, #16]
 800895e:	2b00      	cmp	r3, #0
 8008960:	d110      	bne.n	8008984 <USB_ActivateEndpoint+0x274>
 8008962:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008964:	881b      	ldrh	r3, [r3, #0]
 8008966:	b29b      	uxth	r3, r3
 8008968:	4a49      	ldr	r2, [pc, #292]	; (8008a90 <USB_ActivateEndpoint+0x380>)
 800896a:	4013      	ands	r3, r2
 800896c:	b29a      	uxth	r2, r3
 800896e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008970:	801a      	strh	r2, [r3, #0]
 8008972:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008974:	881b      	ldrh	r3, [r3, #0]
 8008976:	b29b      	uxth	r3, r3
 8008978:	4a46      	ldr	r2, [pc, #280]	; (8008a94 <USB_ActivateEndpoint+0x384>)
 800897a:	4313      	orrs	r3, r2
 800897c:	b29a      	uxth	r2, r3
 800897e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008980:	801a      	strh	r2, [r3, #0]
 8008982:	e02b      	b.n	80089dc <USB_ActivateEndpoint+0x2cc>
 8008984:	683b      	ldr	r3, [r7, #0]
 8008986:	691b      	ldr	r3, [r3, #16]
 8008988:	2b3e      	cmp	r3, #62	; 0x3e
 800898a:	d812      	bhi.n	80089b2 <USB_ActivateEndpoint+0x2a2>
 800898c:	683b      	ldr	r3, [r7, #0]
 800898e:	691b      	ldr	r3, [r3, #16]
 8008990:	085b      	lsrs	r3, r3, #1
 8008992:	66bb      	str	r3, [r7, #104]	; 0x68
 8008994:	683b      	ldr	r3, [r7, #0]
 8008996:	691b      	ldr	r3, [r3, #16]
 8008998:	2201      	movs	r2, #1
 800899a:	4013      	ands	r3, r2
 800899c:	d002      	beq.n	80089a4 <USB_ActivateEndpoint+0x294>
 800899e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80089a0:	3301      	adds	r3, #1
 80089a2:	66bb      	str	r3, [r7, #104]	; 0x68
 80089a4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80089a6:	b29b      	uxth	r3, r3
 80089a8:	029b      	lsls	r3, r3, #10
 80089aa:	b29a      	uxth	r2, r3
 80089ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089ae:	801a      	strh	r2, [r3, #0]
 80089b0:	e014      	b.n	80089dc <USB_ActivateEndpoint+0x2cc>
 80089b2:	683b      	ldr	r3, [r7, #0]
 80089b4:	691b      	ldr	r3, [r3, #16]
 80089b6:	095b      	lsrs	r3, r3, #5
 80089b8:	66bb      	str	r3, [r7, #104]	; 0x68
 80089ba:	683b      	ldr	r3, [r7, #0]
 80089bc:	691b      	ldr	r3, [r3, #16]
 80089be:	221f      	movs	r2, #31
 80089c0:	4013      	ands	r3, r2
 80089c2:	d102      	bne.n	80089ca <USB_ActivateEndpoint+0x2ba>
 80089c4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80089c6:	3b01      	subs	r3, #1
 80089c8:	66bb      	str	r3, [r7, #104]	; 0x68
 80089ca:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80089cc:	b29b      	uxth	r3, r3
 80089ce:	029b      	lsls	r3, r3, #10
 80089d0:	b29b      	uxth	r3, r3
 80089d2:	4a30      	ldr	r2, [pc, #192]	; (8008a94 <USB_ActivateEndpoint+0x384>)
 80089d4:	4313      	orrs	r3, r2
 80089d6:	b29a      	uxth	r2, r3
 80089d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089da:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80089dc:	687a      	ldr	r2, [r7, #4]
 80089de:	683b      	ldr	r3, [r7, #0]
 80089e0:	781b      	ldrb	r3, [r3, #0]
 80089e2:	009b      	lsls	r3, r3, #2
 80089e4:	18d2      	adds	r2, r2, r3
 80089e6:	2122      	movs	r1, #34	; 0x22
 80089e8:	187b      	adds	r3, r7, r1
 80089ea:	8812      	ldrh	r2, [r2, #0]
 80089ec:	801a      	strh	r2, [r3, #0]
 80089ee:	187b      	adds	r3, r7, r1
 80089f0:	881a      	ldrh	r2, [r3, #0]
 80089f2:	2380      	movs	r3, #128	; 0x80
 80089f4:	01db      	lsls	r3, r3, #7
 80089f6:	4013      	ands	r3, r2
 80089f8:	d016      	beq.n	8008a28 <USB_ActivateEndpoint+0x318>
 80089fa:	687a      	ldr	r2, [r7, #4]
 80089fc:	683b      	ldr	r3, [r7, #0]
 80089fe:	781b      	ldrb	r3, [r3, #0]
 8008a00:	009b      	lsls	r3, r3, #2
 8008a02:	18d3      	adds	r3, r2, r3
 8008a04:	881b      	ldrh	r3, [r3, #0]
 8008a06:	b29a      	uxth	r2, r3
 8008a08:	2020      	movs	r0, #32
 8008a0a:	183b      	adds	r3, r7, r0
 8008a0c:	491b      	ldr	r1, [pc, #108]	; (8008a7c <USB_ActivateEndpoint+0x36c>)
 8008a0e:	400a      	ands	r2, r1
 8008a10:	801a      	strh	r2, [r3, #0]
 8008a12:	687a      	ldr	r2, [r7, #4]
 8008a14:	683b      	ldr	r3, [r7, #0]
 8008a16:	781b      	ldrb	r3, [r3, #0]
 8008a18:	009b      	lsls	r3, r3, #2
 8008a1a:	18d3      	adds	r3, r2, r3
 8008a1c:	183a      	adds	r2, r7, r0
 8008a1e:	8812      	ldrh	r2, [r2, #0]
 8008a20:	491d      	ldr	r1, [pc, #116]	; (8008a98 <USB_ActivateEndpoint+0x388>)
 8008a22:	430a      	orrs	r2, r1
 8008a24:	b292      	uxth	r2, r2
 8008a26:	801a      	strh	r2, [r3, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008a28:	687a      	ldr	r2, [r7, #4]
 8008a2a:	683b      	ldr	r3, [r7, #0]
 8008a2c:	781b      	ldrb	r3, [r3, #0]
 8008a2e:	009b      	lsls	r3, r3, #2
 8008a30:	18d3      	adds	r3, r2, r3
 8008a32:	881b      	ldrh	r3, [r3, #0]
 8008a34:	b29a      	uxth	r2, r3
 8008a36:	201e      	movs	r0, #30
 8008a38:	183b      	adds	r3, r7, r0
 8008a3a:	4918      	ldr	r1, [pc, #96]	; (8008a9c <USB_ActivateEndpoint+0x38c>)
 8008a3c:	400a      	ands	r2, r1
 8008a3e:	801a      	strh	r2, [r3, #0]
 8008a40:	183b      	adds	r3, r7, r0
 8008a42:	183a      	adds	r2, r7, r0
 8008a44:	8812      	ldrh	r2, [r2, #0]
 8008a46:	2180      	movs	r1, #128	; 0x80
 8008a48:	0149      	lsls	r1, r1, #5
 8008a4a:	404a      	eors	r2, r1
 8008a4c:	801a      	strh	r2, [r3, #0]
 8008a4e:	183b      	adds	r3, r7, r0
 8008a50:	183a      	adds	r2, r7, r0
 8008a52:	8812      	ldrh	r2, [r2, #0]
 8008a54:	2180      	movs	r1, #128	; 0x80
 8008a56:	0189      	lsls	r1, r1, #6
 8008a58:	404a      	eors	r2, r1
 8008a5a:	801a      	strh	r2, [r3, #0]
 8008a5c:	687a      	ldr	r2, [r7, #4]
 8008a5e:	683b      	ldr	r3, [r7, #0]
 8008a60:	781b      	ldrb	r3, [r3, #0]
 8008a62:	009b      	lsls	r3, r3, #2
 8008a64:	18d3      	adds	r3, r2, r3
 8008a66:	183a      	adds	r2, r7, r0
 8008a68:	8812      	ldrh	r2, [r2, #0]
 8008a6a:	4903      	ldr	r1, [pc, #12]	; (8008a78 <USB_ActivateEndpoint+0x368>)
 8008a6c:	430a      	orrs	r2, r1
 8008a6e:	b292      	uxth	r2, r2
 8008a70:	801a      	strh	r2, [r3, #0]
 8008a72:	e1a7      	b.n	8008dc4 <USB_ActivateEndpoint+0x6b4>
 8008a74:	ffff898f 	.word	0xffff898f
 8008a78:	ffff8080 	.word	0xffff8080
 8008a7c:	ffff8f8f 	.word	0xffff8f8f
 8008a80:	ffff80c0 	.word	0xffff80c0
 8008a84:	ffff8fbf 	.word	0xffff8fbf
 8008a88:	00000404 	.word	0x00000404
 8008a8c:	00000406 	.word	0x00000406
 8008a90:	ffff83ff 	.word	0xffff83ff
 8008a94:	ffff8000 	.word	0xffff8000
 8008a98:	ffffc080 	.word	0xffffc080
 8008a9c:	ffffbf8f 	.word	0xffffbf8f
    }
  }
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8008aa0:	683b      	ldr	r3, [r7, #0]
 8008aa2:	78db      	ldrb	r3, [r3, #3]
 8008aa4:	2b02      	cmp	r3, #2
 8008aa6:	d117      	bne.n	8008ad8 <USB_ActivateEndpoint+0x3c8>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8008aa8:	687a      	ldr	r2, [r7, #4]
 8008aaa:	683b      	ldr	r3, [r7, #0]
 8008aac:	781b      	ldrb	r3, [r3, #0]
 8008aae:	009b      	lsls	r3, r3, #2
 8008ab0:	18d3      	adds	r3, r2, r3
 8008ab2:	881b      	ldrh	r3, [r3, #0]
 8008ab4:	b29a      	uxth	r2, r3
 8008ab6:	2062      	movs	r0, #98	; 0x62
 8008ab8:	183b      	adds	r3, r7, r0
 8008aba:	49c6      	ldr	r1, [pc, #792]	; (8008dd4 <USB_ActivateEndpoint+0x6c4>)
 8008abc:	400a      	ands	r2, r1
 8008abe:	801a      	strh	r2, [r3, #0]
 8008ac0:	687a      	ldr	r2, [r7, #4]
 8008ac2:	683b      	ldr	r3, [r7, #0]
 8008ac4:	781b      	ldrb	r3, [r3, #0]
 8008ac6:	009b      	lsls	r3, r3, #2
 8008ac8:	18d3      	adds	r3, r2, r3
 8008aca:	183a      	adds	r2, r7, r0
 8008acc:	8812      	ldrh	r2, [r2, #0]
 8008ace:	49c2      	ldr	r1, [pc, #776]	; (8008dd8 <USB_ActivateEndpoint+0x6c8>)
 8008ad0:	430a      	orrs	r2, r1
 8008ad2:	b292      	uxth	r2, r2
 8008ad4:	801a      	strh	r2, [r3, #0]
 8008ad6:	e016      	b.n	8008b06 <USB_ActivateEndpoint+0x3f6>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8008ad8:	687a      	ldr	r2, [r7, #4]
 8008ada:	683b      	ldr	r3, [r7, #0]
 8008adc:	781b      	ldrb	r3, [r3, #0]
 8008ade:	009b      	lsls	r3, r3, #2
 8008ae0:	18d3      	adds	r3, r2, r3
 8008ae2:	881b      	ldrh	r3, [r3, #0]
 8008ae4:	b29a      	uxth	r2, r3
 8008ae6:	2064      	movs	r0, #100	; 0x64
 8008ae8:	183b      	adds	r3, r7, r0
 8008aea:	49bc      	ldr	r1, [pc, #752]	; (8008ddc <USB_ActivateEndpoint+0x6cc>)
 8008aec:	400a      	ands	r2, r1
 8008aee:	801a      	strh	r2, [r3, #0]
 8008af0:	687a      	ldr	r2, [r7, #4]
 8008af2:	683b      	ldr	r3, [r7, #0]
 8008af4:	781b      	ldrb	r3, [r3, #0]
 8008af6:	009b      	lsls	r3, r3, #2
 8008af8:	18d3      	adds	r3, r2, r3
 8008afa:	183a      	adds	r2, r7, r0
 8008afc:	8812      	ldrh	r2, [r2, #0]
 8008afe:	49b8      	ldr	r1, [pc, #736]	; (8008de0 <USB_ActivateEndpoint+0x6d0>)
 8008b00:	430a      	orrs	r2, r1
 8008b02:	b292      	uxth	r2, r2
 8008b04:	801a      	strh	r2, [r3, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	2250      	movs	r2, #80	; 0x50
 8008b0e:	5a9b      	ldrh	r3, [r3, r2]
 8008b10:	b29b      	uxth	r3, r3
 8008b12:	001a      	movs	r2, r3
 8008b14:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008b16:	189b      	adds	r3, r3, r2
 8008b18:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008b1a:	683b      	ldr	r3, [r7, #0]
 8008b1c:	781b      	ldrb	r3, [r3, #0]
 8008b1e:	00da      	lsls	r2, r3, #3
 8008b20:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008b22:	18d3      	adds	r3, r2, r3
 8008b24:	2280      	movs	r2, #128	; 0x80
 8008b26:	00d2      	lsls	r2, r2, #3
 8008b28:	4694      	mov	ip, r2
 8008b2a:	4463      	add	r3, ip
 8008b2c:	65bb      	str	r3, [r7, #88]	; 0x58
 8008b2e:	683b      	ldr	r3, [r7, #0]
 8008b30:	891b      	ldrh	r3, [r3, #8]
 8008b32:	085b      	lsrs	r3, r3, #1
 8008b34:	b29b      	uxth	r3, r3
 8008b36:	18db      	adds	r3, r3, r3
 8008b38:	b29a      	uxth	r2, r3
 8008b3a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008b3c:	801a      	strh	r2, [r3, #0]
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	657b      	str	r3, [r7, #84]	; 0x54
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	2250      	movs	r2, #80	; 0x50
 8008b46:	5a9b      	ldrh	r3, [r3, r2]
 8008b48:	b29b      	uxth	r3, r3
 8008b4a:	001a      	movs	r2, r3
 8008b4c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008b4e:	189b      	adds	r3, r3, r2
 8008b50:	657b      	str	r3, [r7, #84]	; 0x54
 8008b52:	683b      	ldr	r3, [r7, #0]
 8008b54:	781b      	ldrb	r3, [r3, #0]
 8008b56:	00da      	lsls	r2, r3, #3
 8008b58:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008b5a:	18d3      	adds	r3, r2, r3
 8008b5c:	4aa1      	ldr	r2, [pc, #644]	; (8008de4 <USB_ActivateEndpoint+0x6d4>)
 8008b5e:	4694      	mov	ip, r2
 8008b60:	4463      	add	r3, ip
 8008b62:	653b      	str	r3, [r7, #80]	; 0x50
 8008b64:	683b      	ldr	r3, [r7, #0]
 8008b66:	895b      	ldrh	r3, [r3, #10]
 8008b68:	085b      	lsrs	r3, r3, #1
 8008b6a:	b29b      	uxth	r3, r3
 8008b6c:	18db      	adds	r3, r3, r3
 8008b6e:	b29a      	uxth	r2, r3
 8008b70:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008b72:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8008b74:	683b      	ldr	r3, [r7, #0]
 8008b76:	785b      	ldrb	r3, [r3, #1]
 8008b78:	2b00      	cmp	r3, #0
 8008b7a:	d000      	beq.n	8008b7e <USB_ActivateEndpoint+0x46e>
 8008b7c:	e087      	b.n	8008c8e <USB_ActivateEndpoint+0x57e>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008b7e:	687a      	ldr	r2, [r7, #4]
 8008b80:	683b      	ldr	r3, [r7, #0]
 8008b82:	781b      	ldrb	r3, [r3, #0]
 8008b84:	009b      	lsls	r3, r3, #2
 8008b86:	18d2      	adds	r2, r2, r3
 8008b88:	2140      	movs	r1, #64	; 0x40
 8008b8a:	187b      	adds	r3, r7, r1
 8008b8c:	8812      	ldrh	r2, [r2, #0]
 8008b8e:	801a      	strh	r2, [r3, #0]
 8008b90:	187b      	adds	r3, r7, r1
 8008b92:	881a      	ldrh	r2, [r3, #0]
 8008b94:	2380      	movs	r3, #128	; 0x80
 8008b96:	01db      	lsls	r3, r3, #7
 8008b98:	4013      	ands	r3, r2
 8008b9a:	d016      	beq.n	8008bca <USB_ActivateEndpoint+0x4ba>
 8008b9c:	687a      	ldr	r2, [r7, #4]
 8008b9e:	683b      	ldr	r3, [r7, #0]
 8008ba0:	781b      	ldrb	r3, [r3, #0]
 8008ba2:	009b      	lsls	r3, r3, #2
 8008ba4:	18d3      	adds	r3, r2, r3
 8008ba6:	881b      	ldrh	r3, [r3, #0]
 8008ba8:	b29a      	uxth	r2, r3
 8008baa:	203e      	movs	r0, #62	; 0x3e
 8008bac:	183b      	adds	r3, r7, r0
 8008bae:	4989      	ldr	r1, [pc, #548]	; (8008dd4 <USB_ActivateEndpoint+0x6c4>)
 8008bb0:	400a      	ands	r2, r1
 8008bb2:	801a      	strh	r2, [r3, #0]
 8008bb4:	687a      	ldr	r2, [r7, #4]
 8008bb6:	683b      	ldr	r3, [r7, #0]
 8008bb8:	781b      	ldrb	r3, [r3, #0]
 8008bba:	009b      	lsls	r3, r3, #2
 8008bbc:	18d3      	adds	r3, r2, r3
 8008bbe:	183a      	adds	r2, r7, r0
 8008bc0:	8812      	ldrh	r2, [r2, #0]
 8008bc2:	4989      	ldr	r1, [pc, #548]	; (8008de8 <USB_ActivateEndpoint+0x6d8>)
 8008bc4:	430a      	orrs	r2, r1
 8008bc6:	b292      	uxth	r2, r2
 8008bc8:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008bca:	687a      	ldr	r2, [r7, #4]
 8008bcc:	683b      	ldr	r3, [r7, #0]
 8008bce:	781b      	ldrb	r3, [r3, #0]
 8008bd0:	009b      	lsls	r3, r3, #2
 8008bd2:	18d2      	adds	r2, r2, r3
 8008bd4:	213c      	movs	r1, #60	; 0x3c
 8008bd6:	187b      	adds	r3, r7, r1
 8008bd8:	8812      	ldrh	r2, [r2, #0]
 8008bda:	801a      	strh	r2, [r3, #0]
 8008bdc:	187b      	adds	r3, r7, r1
 8008bde:	881b      	ldrh	r3, [r3, #0]
 8008be0:	2240      	movs	r2, #64	; 0x40
 8008be2:	4013      	ands	r3, r2
 8008be4:	d016      	beq.n	8008c14 <USB_ActivateEndpoint+0x504>
 8008be6:	687a      	ldr	r2, [r7, #4]
 8008be8:	683b      	ldr	r3, [r7, #0]
 8008bea:	781b      	ldrb	r3, [r3, #0]
 8008bec:	009b      	lsls	r3, r3, #2
 8008bee:	18d3      	adds	r3, r2, r3
 8008bf0:	881b      	ldrh	r3, [r3, #0]
 8008bf2:	b29a      	uxth	r2, r3
 8008bf4:	203a      	movs	r0, #58	; 0x3a
 8008bf6:	183b      	adds	r3, r7, r0
 8008bf8:	4976      	ldr	r1, [pc, #472]	; (8008dd4 <USB_ActivateEndpoint+0x6c4>)
 8008bfa:	400a      	ands	r2, r1
 8008bfc:	801a      	strh	r2, [r3, #0]
 8008bfe:	687a      	ldr	r2, [r7, #4]
 8008c00:	683b      	ldr	r3, [r7, #0]
 8008c02:	781b      	ldrb	r3, [r3, #0]
 8008c04:	009b      	lsls	r3, r3, #2
 8008c06:	18d3      	adds	r3, r2, r3
 8008c08:	183a      	adds	r2, r7, r0
 8008c0a:	8812      	ldrh	r2, [r2, #0]
 8008c0c:	4977      	ldr	r1, [pc, #476]	; (8008dec <USB_ActivateEndpoint+0x6dc>)
 8008c0e:	430a      	orrs	r2, r1
 8008c10:	b292      	uxth	r2, r2
 8008c12:	801a      	strh	r2, [r3, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008c14:	687a      	ldr	r2, [r7, #4]
 8008c16:	683b      	ldr	r3, [r7, #0]
 8008c18:	781b      	ldrb	r3, [r3, #0]
 8008c1a:	009b      	lsls	r3, r3, #2
 8008c1c:	18d3      	adds	r3, r2, r3
 8008c1e:	881b      	ldrh	r3, [r3, #0]
 8008c20:	b29a      	uxth	r2, r3
 8008c22:	2038      	movs	r0, #56	; 0x38
 8008c24:	183b      	adds	r3, r7, r0
 8008c26:	4972      	ldr	r1, [pc, #456]	; (8008df0 <USB_ActivateEndpoint+0x6e0>)
 8008c28:	400a      	ands	r2, r1
 8008c2a:	801a      	strh	r2, [r3, #0]
 8008c2c:	183b      	adds	r3, r7, r0
 8008c2e:	183a      	adds	r2, r7, r0
 8008c30:	8812      	ldrh	r2, [r2, #0]
 8008c32:	2180      	movs	r1, #128	; 0x80
 8008c34:	0149      	lsls	r1, r1, #5
 8008c36:	404a      	eors	r2, r1
 8008c38:	801a      	strh	r2, [r3, #0]
 8008c3a:	183b      	adds	r3, r7, r0
 8008c3c:	183a      	adds	r2, r7, r0
 8008c3e:	8812      	ldrh	r2, [r2, #0]
 8008c40:	2180      	movs	r1, #128	; 0x80
 8008c42:	0189      	lsls	r1, r1, #6
 8008c44:	404a      	eors	r2, r1
 8008c46:	801a      	strh	r2, [r3, #0]
 8008c48:	687a      	ldr	r2, [r7, #4]
 8008c4a:	683b      	ldr	r3, [r7, #0]
 8008c4c:	781b      	ldrb	r3, [r3, #0]
 8008c4e:	009b      	lsls	r3, r3, #2
 8008c50:	18d3      	adds	r3, r2, r3
 8008c52:	183a      	adds	r2, r7, r0
 8008c54:	8812      	ldrh	r2, [r2, #0]
 8008c56:	4962      	ldr	r1, [pc, #392]	; (8008de0 <USB_ActivateEndpoint+0x6d0>)
 8008c58:	430a      	orrs	r2, r1
 8008c5a:	b292      	uxth	r2, r2
 8008c5c:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008c5e:	687a      	ldr	r2, [r7, #4]
 8008c60:	683b      	ldr	r3, [r7, #0]
 8008c62:	781b      	ldrb	r3, [r3, #0]
 8008c64:	009b      	lsls	r3, r3, #2
 8008c66:	18d3      	adds	r3, r2, r3
 8008c68:	881b      	ldrh	r3, [r3, #0]
 8008c6a:	b29a      	uxth	r2, r3
 8008c6c:	2036      	movs	r0, #54	; 0x36
 8008c6e:	183b      	adds	r3, r7, r0
 8008c70:	4960      	ldr	r1, [pc, #384]	; (8008df4 <USB_ActivateEndpoint+0x6e4>)
 8008c72:	400a      	ands	r2, r1
 8008c74:	801a      	strh	r2, [r3, #0]
 8008c76:	687a      	ldr	r2, [r7, #4]
 8008c78:	683b      	ldr	r3, [r7, #0]
 8008c7a:	781b      	ldrb	r3, [r3, #0]
 8008c7c:	009b      	lsls	r3, r3, #2
 8008c7e:	18d3      	adds	r3, r2, r3
 8008c80:	183a      	adds	r2, r7, r0
 8008c82:	8812      	ldrh	r2, [r2, #0]
 8008c84:	4956      	ldr	r1, [pc, #344]	; (8008de0 <USB_ActivateEndpoint+0x6d0>)
 8008c86:	430a      	orrs	r2, r1
 8008c88:	b292      	uxth	r2, r2
 8008c8a:	801a      	strh	r2, [r3, #0]
 8008c8c:	e09a      	b.n	8008dc4 <USB_ActivateEndpoint+0x6b4>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008c8e:	687a      	ldr	r2, [r7, #4]
 8008c90:	683b      	ldr	r3, [r7, #0]
 8008c92:	781b      	ldrb	r3, [r3, #0]
 8008c94:	009b      	lsls	r3, r3, #2
 8008c96:	18d2      	adds	r2, r2, r3
 8008c98:	214e      	movs	r1, #78	; 0x4e
 8008c9a:	187b      	adds	r3, r7, r1
 8008c9c:	8812      	ldrh	r2, [r2, #0]
 8008c9e:	801a      	strh	r2, [r3, #0]
 8008ca0:	187b      	adds	r3, r7, r1
 8008ca2:	881a      	ldrh	r2, [r3, #0]
 8008ca4:	2380      	movs	r3, #128	; 0x80
 8008ca6:	01db      	lsls	r3, r3, #7
 8008ca8:	4013      	ands	r3, r2
 8008caa:	d016      	beq.n	8008cda <USB_ActivateEndpoint+0x5ca>
 8008cac:	687a      	ldr	r2, [r7, #4]
 8008cae:	683b      	ldr	r3, [r7, #0]
 8008cb0:	781b      	ldrb	r3, [r3, #0]
 8008cb2:	009b      	lsls	r3, r3, #2
 8008cb4:	18d3      	adds	r3, r2, r3
 8008cb6:	881b      	ldrh	r3, [r3, #0]
 8008cb8:	b29a      	uxth	r2, r3
 8008cba:	204c      	movs	r0, #76	; 0x4c
 8008cbc:	183b      	adds	r3, r7, r0
 8008cbe:	4945      	ldr	r1, [pc, #276]	; (8008dd4 <USB_ActivateEndpoint+0x6c4>)
 8008cc0:	400a      	ands	r2, r1
 8008cc2:	801a      	strh	r2, [r3, #0]
 8008cc4:	687a      	ldr	r2, [r7, #4]
 8008cc6:	683b      	ldr	r3, [r7, #0]
 8008cc8:	781b      	ldrb	r3, [r3, #0]
 8008cca:	009b      	lsls	r3, r3, #2
 8008ccc:	18d3      	adds	r3, r2, r3
 8008cce:	183a      	adds	r2, r7, r0
 8008cd0:	8812      	ldrh	r2, [r2, #0]
 8008cd2:	4945      	ldr	r1, [pc, #276]	; (8008de8 <USB_ActivateEndpoint+0x6d8>)
 8008cd4:	430a      	orrs	r2, r1
 8008cd6:	b292      	uxth	r2, r2
 8008cd8:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008cda:	687a      	ldr	r2, [r7, #4]
 8008cdc:	683b      	ldr	r3, [r7, #0]
 8008cde:	781b      	ldrb	r3, [r3, #0]
 8008ce0:	009b      	lsls	r3, r3, #2
 8008ce2:	18d2      	adds	r2, r2, r3
 8008ce4:	214a      	movs	r1, #74	; 0x4a
 8008ce6:	187b      	adds	r3, r7, r1
 8008ce8:	8812      	ldrh	r2, [r2, #0]
 8008cea:	801a      	strh	r2, [r3, #0]
 8008cec:	187b      	adds	r3, r7, r1
 8008cee:	881b      	ldrh	r3, [r3, #0]
 8008cf0:	2240      	movs	r2, #64	; 0x40
 8008cf2:	4013      	ands	r3, r2
 8008cf4:	d016      	beq.n	8008d24 <USB_ActivateEndpoint+0x614>
 8008cf6:	687a      	ldr	r2, [r7, #4]
 8008cf8:	683b      	ldr	r3, [r7, #0]
 8008cfa:	781b      	ldrb	r3, [r3, #0]
 8008cfc:	009b      	lsls	r3, r3, #2
 8008cfe:	18d3      	adds	r3, r2, r3
 8008d00:	881b      	ldrh	r3, [r3, #0]
 8008d02:	b29a      	uxth	r2, r3
 8008d04:	2048      	movs	r0, #72	; 0x48
 8008d06:	183b      	adds	r3, r7, r0
 8008d08:	4932      	ldr	r1, [pc, #200]	; (8008dd4 <USB_ActivateEndpoint+0x6c4>)
 8008d0a:	400a      	ands	r2, r1
 8008d0c:	801a      	strh	r2, [r3, #0]
 8008d0e:	687a      	ldr	r2, [r7, #4]
 8008d10:	683b      	ldr	r3, [r7, #0]
 8008d12:	781b      	ldrb	r3, [r3, #0]
 8008d14:	009b      	lsls	r3, r3, #2
 8008d16:	18d3      	adds	r3, r2, r3
 8008d18:	183a      	adds	r2, r7, r0
 8008d1a:	8812      	ldrh	r2, [r2, #0]
 8008d1c:	4933      	ldr	r1, [pc, #204]	; (8008dec <USB_ActivateEndpoint+0x6dc>)
 8008d1e:	430a      	orrs	r2, r1
 8008d20:	b292      	uxth	r2, r2
 8008d22:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 8008d24:	683b      	ldr	r3, [r7, #0]
 8008d26:	78db      	ldrb	r3, [r3, #3]
 8008d28:	2b01      	cmp	r3, #1
 8008d2a:	d01d      	beq.n	8008d68 <USB_ActivateEndpoint+0x658>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8008d2c:	687a      	ldr	r2, [r7, #4]
 8008d2e:	683b      	ldr	r3, [r7, #0]
 8008d30:	781b      	ldrb	r3, [r3, #0]
 8008d32:	009b      	lsls	r3, r3, #2
 8008d34:	18d3      	adds	r3, r2, r3
 8008d36:	881b      	ldrh	r3, [r3, #0]
 8008d38:	b29a      	uxth	r2, r3
 8008d3a:	2044      	movs	r0, #68	; 0x44
 8008d3c:	183b      	adds	r3, r7, r0
 8008d3e:	492d      	ldr	r1, [pc, #180]	; (8008df4 <USB_ActivateEndpoint+0x6e4>)
 8008d40:	400a      	ands	r2, r1
 8008d42:	801a      	strh	r2, [r3, #0]
 8008d44:	183b      	adds	r3, r7, r0
 8008d46:	183a      	adds	r2, r7, r0
 8008d48:	8812      	ldrh	r2, [r2, #0]
 8008d4a:	2120      	movs	r1, #32
 8008d4c:	404a      	eors	r2, r1
 8008d4e:	801a      	strh	r2, [r3, #0]
 8008d50:	687a      	ldr	r2, [r7, #4]
 8008d52:	683b      	ldr	r3, [r7, #0]
 8008d54:	781b      	ldrb	r3, [r3, #0]
 8008d56:	009b      	lsls	r3, r3, #2
 8008d58:	18d3      	adds	r3, r2, r3
 8008d5a:	183a      	adds	r2, r7, r0
 8008d5c:	8812      	ldrh	r2, [r2, #0]
 8008d5e:	4920      	ldr	r1, [pc, #128]	; (8008de0 <USB_ActivateEndpoint+0x6d0>)
 8008d60:	430a      	orrs	r2, r1
 8008d62:	b292      	uxth	r2, r2
 8008d64:	801a      	strh	r2, [r3, #0]
 8008d66:	e016      	b.n	8008d96 <USB_ActivateEndpoint+0x686>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008d68:	687a      	ldr	r2, [r7, #4]
 8008d6a:	683b      	ldr	r3, [r7, #0]
 8008d6c:	781b      	ldrb	r3, [r3, #0]
 8008d6e:	009b      	lsls	r3, r3, #2
 8008d70:	18d3      	adds	r3, r2, r3
 8008d72:	881b      	ldrh	r3, [r3, #0]
 8008d74:	b29a      	uxth	r2, r3
 8008d76:	2046      	movs	r0, #70	; 0x46
 8008d78:	183b      	adds	r3, r7, r0
 8008d7a:	491e      	ldr	r1, [pc, #120]	; (8008df4 <USB_ActivateEndpoint+0x6e4>)
 8008d7c:	400a      	ands	r2, r1
 8008d7e:	801a      	strh	r2, [r3, #0]
 8008d80:	687a      	ldr	r2, [r7, #4]
 8008d82:	683b      	ldr	r3, [r7, #0]
 8008d84:	781b      	ldrb	r3, [r3, #0]
 8008d86:	009b      	lsls	r3, r3, #2
 8008d88:	18d3      	adds	r3, r2, r3
 8008d8a:	183a      	adds	r2, r7, r0
 8008d8c:	8812      	ldrh	r2, [r2, #0]
 8008d8e:	4914      	ldr	r1, [pc, #80]	; (8008de0 <USB_ActivateEndpoint+0x6d0>)
 8008d90:	430a      	orrs	r2, r1
 8008d92:	b292      	uxth	r2, r2
 8008d94:	801a      	strh	r2, [r3, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8008d96:	687a      	ldr	r2, [r7, #4]
 8008d98:	683b      	ldr	r3, [r7, #0]
 8008d9a:	781b      	ldrb	r3, [r3, #0]
 8008d9c:	009b      	lsls	r3, r3, #2
 8008d9e:	18d3      	adds	r3, r2, r3
 8008da0:	881b      	ldrh	r3, [r3, #0]
 8008da2:	b29a      	uxth	r2, r3
 8008da4:	2042      	movs	r0, #66	; 0x42
 8008da6:	183b      	adds	r3, r7, r0
 8008da8:	4911      	ldr	r1, [pc, #68]	; (8008df0 <USB_ActivateEndpoint+0x6e0>)
 8008daa:	400a      	ands	r2, r1
 8008dac:	801a      	strh	r2, [r3, #0]
 8008dae:	687a      	ldr	r2, [r7, #4]
 8008db0:	683b      	ldr	r3, [r7, #0]
 8008db2:	781b      	ldrb	r3, [r3, #0]
 8008db4:	009b      	lsls	r3, r3, #2
 8008db6:	18d3      	adds	r3, r2, r3
 8008db8:	183a      	adds	r2, r7, r0
 8008dba:	8812      	ldrh	r2, [r2, #0]
 8008dbc:	4908      	ldr	r1, [pc, #32]	; (8008de0 <USB_ActivateEndpoint+0x6d0>)
 8008dbe:	430a      	orrs	r2, r1
 8008dc0:	b292      	uxth	r2, r2
 8008dc2:	801a      	strh	r2, [r3, #0]
    }
  }

  return ret;
 8008dc4:	236f      	movs	r3, #111	; 0x6f
 8008dc6:	18fb      	adds	r3, r7, r3
 8008dc8:	781b      	ldrb	r3, [r3, #0]
}
 8008dca:	0018      	movs	r0, r3
 8008dcc:	46bd      	mov	sp, r7
 8008dce:	b01c      	add	sp, #112	; 0x70
 8008dd0:	bd80      	pop	{r7, pc}
 8008dd2:	46c0      	nop			; (mov r8, r8)
 8008dd4:	ffff8f8f 	.word	0xffff8f8f
 8008dd8:	ffff8180 	.word	0xffff8180
 8008ddc:	ffff8e8f 	.word	0xffff8e8f
 8008de0:	ffff8080 	.word	0xffff8080
 8008de4:	00000404 	.word	0x00000404
 8008de8:	ffffc080 	.word	0xffffc080
 8008dec:	ffff80c0 	.word	0xffff80c0
 8008df0:	ffffbf8f 	.word	0xffffbf8f
 8008df4:	ffff8fbf 	.word	0xffff8fbf

08008df8 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008df8:	b580      	push	{r7, lr}
 8008dfa:	b08c      	sub	sp, #48	; 0x30
 8008dfc:	af00      	add	r7, sp, #0
 8008dfe:	6078      	str	r0, [r7, #4]
 8008e00:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8008e02:	683b      	ldr	r3, [r7, #0]
 8008e04:	7b1b      	ldrb	r3, [r3, #12]
 8008e06:	2b00      	cmp	r3, #0
 8008e08:	d000      	beq.n	8008e0c <USB_DeactivateEndpoint+0x14>
 8008e0a:	e07e      	b.n	8008f0a <USB_DeactivateEndpoint+0x112>
  {
    if (ep->is_in != 0U)
 8008e0c:	683b      	ldr	r3, [r7, #0]
 8008e0e:	785b      	ldrb	r3, [r3, #1]
 8008e10:	2b00      	cmp	r3, #0
 8008e12:	d03c      	beq.n	8008e8e <USB_DeactivateEndpoint+0x96>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008e14:	687a      	ldr	r2, [r7, #4]
 8008e16:	683b      	ldr	r3, [r7, #0]
 8008e18:	781b      	ldrb	r3, [r3, #0]
 8008e1a:	009b      	lsls	r3, r3, #2
 8008e1c:	18d2      	adds	r2, r2, r3
 8008e1e:	210c      	movs	r1, #12
 8008e20:	187b      	adds	r3, r7, r1
 8008e22:	8812      	ldrh	r2, [r2, #0]
 8008e24:	801a      	strh	r2, [r3, #0]
 8008e26:	187b      	adds	r3, r7, r1
 8008e28:	881b      	ldrh	r3, [r3, #0]
 8008e2a:	2240      	movs	r2, #64	; 0x40
 8008e2c:	4013      	ands	r3, r2
 8008e2e:	d016      	beq.n	8008e5e <USB_DeactivateEndpoint+0x66>
 8008e30:	687a      	ldr	r2, [r7, #4]
 8008e32:	683b      	ldr	r3, [r7, #0]
 8008e34:	781b      	ldrb	r3, [r3, #0]
 8008e36:	009b      	lsls	r3, r3, #2
 8008e38:	18d3      	adds	r3, r2, r3
 8008e3a:	881b      	ldrh	r3, [r3, #0]
 8008e3c:	b29a      	uxth	r2, r3
 8008e3e:	200a      	movs	r0, #10
 8008e40:	183b      	adds	r3, r7, r0
 8008e42:	49c7      	ldr	r1, [pc, #796]	; (8009160 <USB_DeactivateEndpoint+0x368>)
 8008e44:	400a      	ands	r2, r1
 8008e46:	801a      	strh	r2, [r3, #0]
 8008e48:	687a      	ldr	r2, [r7, #4]
 8008e4a:	683b      	ldr	r3, [r7, #0]
 8008e4c:	781b      	ldrb	r3, [r3, #0]
 8008e4e:	009b      	lsls	r3, r3, #2
 8008e50:	18d3      	adds	r3, r2, r3
 8008e52:	183a      	adds	r2, r7, r0
 8008e54:	8812      	ldrh	r2, [r2, #0]
 8008e56:	49c3      	ldr	r1, [pc, #780]	; (8009164 <USB_DeactivateEndpoint+0x36c>)
 8008e58:	430a      	orrs	r2, r1
 8008e5a:	b292      	uxth	r2, r2
 8008e5c:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008e5e:	687a      	ldr	r2, [r7, #4]
 8008e60:	683b      	ldr	r3, [r7, #0]
 8008e62:	781b      	ldrb	r3, [r3, #0]
 8008e64:	009b      	lsls	r3, r3, #2
 8008e66:	18d3      	adds	r3, r2, r3
 8008e68:	881b      	ldrh	r3, [r3, #0]
 8008e6a:	b29a      	uxth	r2, r3
 8008e6c:	2008      	movs	r0, #8
 8008e6e:	183b      	adds	r3, r7, r0
 8008e70:	49bd      	ldr	r1, [pc, #756]	; (8009168 <USB_DeactivateEndpoint+0x370>)
 8008e72:	400a      	ands	r2, r1
 8008e74:	801a      	strh	r2, [r3, #0]
 8008e76:	687a      	ldr	r2, [r7, #4]
 8008e78:	683b      	ldr	r3, [r7, #0]
 8008e7a:	781b      	ldrb	r3, [r3, #0]
 8008e7c:	009b      	lsls	r3, r3, #2
 8008e7e:	18d3      	adds	r3, r2, r3
 8008e80:	183a      	adds	r2, r7, r0
 8008e82:	8812      	ldrh	r2, [r2, #0]
 8008e84:	49b9      	ldr	r1, [pc, #740]	; (800916c <USB_DeactivateEndpoint+0x374>)
 8008e86:	430a      	orrs	r2, r1
 8008e88:	b292      	uxth	r2, r2
 8008e8a:	801a      	strh	r2, [r3, #0]
 8008e8c:	e163      	b.n	8009156 <USB_DeactivateEndpoint+0x35e>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008e8e:	687a      	ldr	r2, [r7, #4]
 8008e90:	683b      	ldr	r3, [r7, #0]
 8008e92:	781b      	ldrb	r3, [r3, #0]
 8008e94:	009b      	lsls	r3, r3, #2
 8008e96:	18d2      	adds	r2, r2, r3
 8008e98:	2112      	movs	r1, #18
 8008e9a:	187b      	adds	r3, r7, r1
 8008e9c:	8812      	ldrh	r2, [r2, #0]
 8008e9e:	801a      	strh	r2, [r3, #0]
 8008ea0:	187b      	adds	r3, r7, r1
 8008ea2:	881a      	ldrh	r2, [r3, #0]
 8008ea4:	2380      	movs	r3, #128	; 0x80
 8008ea6:	01db      	lsls	r3, r3, #7
 8008ea8:	4013      	ands	r3, r2
 8008eaa:	d016      	beq.n	8008eda <USB_DeactivateEndpoint+0xe2>
 8008eac:	687a      	ldr	r2, [r7, #4]
 8008eae:	683b      	ldr	r3, [r7, #0]
 8008eb0:	781b      	ldrb	r3, [r3, #0]
 8008eb2:	009b      	lsls	r3, r3, #2
 8008eb4:	18d3      	adds	r3, r2, r3
 8008eb6:	881b      	ldrh	r3, [r3, #0]
 8008eb8:	b29a      	uxth	r2, r3
 8008eba:	2010      	movs	r0, #16
 8008ebc:	183b      	adds	r3, r7, r0
 8008ebe:	49a8      	ldr	r1, [pc, #672]	; (8009160 <USB_DeactivateEndpoint+0x368>)
 8008ec0:	400a      	ands	r2, r1
 8008ec2:	801a      	strh	r2, [r3, #0]
 8008ec4:	687a      	ldr	r2, [r7, #4]
 8008ec6:	683b      	ldr	r3, [r7, #0]
 8008ec8:	781b      	ldrb	r3, [r3, #0]
 8008eca:	009b      	lsls	r3, r3, #2
 8008ecc:	18d3      	adds	r3, r2, r3
 8008ece:	183a      	adds	r2, r7, r0
 8008ed0:	8812      	ldrh	r2, [r2, #0]
 8008ed2:	49a7      	ldr	r1, [pc, #668]	; (8009170 <USB_DeactivateEndpoint+0x378>)
 8008ed4:	430a      	orrs	r2, r1
 8008ed6:	b292      	uxth	r2, r2
 8008ed8:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8008eda:	687a      	ldr	r2, [r7, #4]
 8008edc:	683b      	ldr	r3, [r7, #0]
 8008ede:	781b      	ldrb	r3, [r3, #0]
 8008ee0:	009b      	lsls	r3, r3, #2
 8008ee2:	18d3      	adds	r3, r2, r3
 8008ee4:	881b      	ldrh	r3, [r3, #0]
 8008ee6:	b29a      	uxth	r2, r3
 8008ee8:	200e      	movs	r0, #14
 8008eea:	183b      	adds	r3, r7, r0
 8008eec:	49a1      	ldr	r1, [pc, #644]	; (8009174 <USB_DeactivateEndpoint+0x37c>)
 8008eee:	400a      	ands	r2, r1
 8008ef0:	801a      	strh	r2, [r3, #0]
 8008ef2:	687a      	ldr	r2, [r7, #4]
 8008ef4:	683b      	ldr	r3, [r7, #0]
 8008ef6:	781b      	ldrb	r3, [r3, #0]
 8008ef8:	009b      	lsls	r3, r3, #2
 8008efa:	18d3      	adds	r3, r2, r3
 8008efc:	183a      	adds	r2, r7, r0
 8008efe:	8812      	ldrh	r2, [r2, #0]
 8008f00:	499a      	ldr	r1, [pc, #616]	; (800916c <USB_DeactivateEndpoint+0x374>)
 8008f02:	430a      	orrs	r2, r1
 8008f04:	b292      	uxth	r2, r2
 8008f06:	801a      	strh	r2, [r3, #0]
 8008f08:	e125      	b.n	8009156 <USB_DeactivateEndpoint+0x35e>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8008f0a:	683b      	ldr	r3, [r7, #0]
 8008f0c:	785b      	ldrb	r3, [r3, #1]
 8008f0e:	2b00      	cmp	r3, #0
 8008f10:	d000      	beq.n	8008f14 <USB_DeactivateEndpoint+0x11c>
 8008f12:	e090      	b.n	8009036 <USB_DeactivateEndpoint+0x23e>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008f14:	687a      	ldr	r2, [r7, #4]
 8008f16:	683b      	ldr	r3, [r7, #0]
 8008f18:	781b      	ldrb	r3, [r3, #0]
 8008f1a:	009b      	lsls	r3, r3, #2
 8008f1c:	18d2      	adds	r2, r2, r3
 8008f1e:	2120      	movs	r1, #32
 8008f20:	187b      	adds	r3, r7, r1
 8008f22:	8812      	ldrh	r2, [r2, #0]
 8008f24:	801a      	strh	r2, [r3, #0]
 8008f26:	187b      	adds	r3, r7, r1
 8008f28:	881a      	ldrh	r2, [r3, #0]
 8008f2a:	2380      	movs	r3, #128	; 0x80
 8008f2c:	01db      	lsls	r3, r3, #7
 8008f2e:	4013      	ands	r3, r2
 8008f30:	d016      	beq.n	8008f60 <USB_DeactivateEndpoint+0x168>
 8008f32:	687a      	ldr	r2, [r7, #4]
 8008f34:	683b      	ldr	r3, [r7, #0]
 8008f36:	781b      	ldrb	r3, [r3, #0]
 8008f38:	009b      	lsls	r3, r3, #2
 8008f3a:	18d3      	adds	r3, r2, r3
 8008f3c:	881b      	ldrh	r3, [r3, #0]
 8008f3e:	b29a      	uxth	r2, r3
 8008f40:	201e      	movs	r0, #30
 8008f42:	183b      	adds	r3, r7, r0
 8008f44:	4986      	ldr	r1, [pc, #536]	; (8009160 <USB_DeactivateEndpoint+0x368>)
 8008f46:	400a      	ands	r2, r1
 8008f48:	801a      	strh	r2, [r3, #0]
 8008f4a:	687a      	ldr	r2, [r7, #4]
 8008f4c:	683b      	ldr	r3, [r7, #0]
 8008f4e:	781b      	ldrb	r3, [r3, #0]
 8008f50:	009b      	lsls	r3, r3, #2
 8008f52:	18d3      	adds	r3, r2, r3
 8008f54:	183a      	adds	r2, r7, r0
 8008f56:	8812      	ldrh	r2, [r2, #0]
 8008f58:	4985      	ldr	r1, [pc, #532]	; (8009170 <USB_DeactivateEndpoint+0x378>)
 8008f5a:	430a      	orrs	r2, r1
 8008f5c:	b292      	uxth	r2, r2
 8008f5e:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008f60:	687a      	ldr	r2, [r7, #4]
 8008f62:	683b      	ldr	r3, [r7, #0]
 8008f64:	781b      	ldrb	r3, [r3, #0]
 8008f66:	009b      	lsls	r3, r3, #2
 8008f68:	18d2      	adds	r2, r2, r3
 8008f6a:	211c      	movs	r1, #28
 8008f6c:	187b      	adds	r3, r7, r1
 8008f6e:	8812      	ldrh	r2, [r2, #0]
 8008f70:	801a      	strh	r2, [r3, #0]
 8008f72:	187b      	adds	r3, r7, r1
 8008f74:	881b      	ldrh	r3, [r3, #0]
 8008f76:	2240      	movs	r2, #64	; 0x40
 8008f78:	4013      	ands	r3, r2
 8008f7a:	d016      	beq.n	8008faa <USB_DeactivateEndpoint+0x1b2>
 8008f7c:	687a      	ldr	r2, [r7, #4]
 8008f7e:	683b      	ldr	r3, [r7, #0]
 8008f80:	781b      	ldrb	r3, [r3, #0]
 8008f82:	009b      	lsls	r3, r3, #2
 8008f84:	18d3      	adds	r3, r2, r3
 8008f86:	881b      	ldrh	r3, [r3, #0]
 8008f88:	b29a      	uxth	r2, r3
 8008f8a:	201a      	movs	r0, #26
 8008f8c:	183b      	adds	r3, r7, r0
 8008f8e:	4974      	ldr	r1, [pc, #464]	; (8009160 <USB_DeactivateEndpoint+0x368>)
 8008f90:	400a      	ands	r2, r1
 8008f92:	801a      	strh	r2, [r3, #0]
 8008f94:	687a      	ldr	r2, [r7, #4]
 8008f96:	683b      	ldr	r3, [r7, #0]
 8008f98:	781b      	ldrb	r3, [r3, #0]
 8008f9a:	009b      	lsls	r3, r3, #2
 8008f9c:	18d3      	adds	r3, r2, r3
 8008f9e:	183a      	adds	r2, r7, r0
 8008fa0:	8812      	ldrh	r2, [r2, #0]
 8008fa2:	4970      	ldr	r1, [pc, #448]	; (8009164 <USB_DeactivateEndpoint+0x36c>)
 8008fa4:	430a      	orrs	r2, r1
 8008fa6:	b292      	uxth	r2, r2
 8008fa8:	801a      	strh	r2, [r3, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8008faa:	687a      	ldr	r2, [r7, #4]
 8008fac:	683b      	ldr	r3, [r7, #0]
 8008fae:	781b      	ldrb	r3, [r3, #0]
 8008fb0:	009b      	lsls	r3, r3, #2
 8008fb2:	18d3      	adds	r3, r2, r3
 8008fb4:	881b      	ldrh	r3, [r3, #0]
 8008fb6:	b29a      	uxth	r2, r3
 8008fb8:	2018      	movs	r0, #24
 8008fba:	183b      	adds	r3, r7, r0
 8008fbc:	4968      	ldr	r1, [pc, #416]	; (8009160 <USB_DeactivateEndpoint+0x368>)
 8008fbe:	400a      	ands	r2, r1
 8008fc0:	801a      	strh	r2, [r3, #0]
 8008fc2:	687a      	ldr	r2, [r7, #4]
 8008fc4:	683b      	ldr	r3, [r7, #0]
 8008fc6:	781b      	ldrb	r3, [r3, #0]
 8008fc8:	009b      	lsls	r3, r3, #2
 8008fca:	18d3      	adds	r3, r2, r3
 8008fcc:	183a      	adds	r2, r7, r0
 8008fce:	8812      	ldrh	r2, [r2, #0]
 8008fd0:	4964      	ldr	r1, [pc, #400]	; (8009164 <USB_DeactivateEndpoint+0x36c>)
 8008fd2:	430a      	orrs	r2, r1
 8008fd4:	b292      	uxth	r2, r2
 8008fd6:	801a      	strh	r2, [r3, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8008fd8:	687a      	ldr	r2, [r7, #4]
 8008fda:	683b      	ldr	r3, [r7, #0]
 8008fdc:	781b      	ldrb	r3, [r3, #0]
 8008fde:	009b      	lsls	r3, r3, #2
 8008fe0:	18d3      	adds	r3, r2, r3
 8008fe2:	881b      	ldrh	r3, [r3, #0]
 8008fe4:	b29a      	uxth	r2, r3
 8008fe6:	2016      	movs	r0, #22
 8008fe8:	183b      	adds	r3, r7, r0
 8008fea:	4962      	ldr	r1, [pc, #392]	; (8009174 <USB_DeactivateEndpoint+0x37c>)
 8008fec:	400a      	ands	r2, r1
 8008fee:	801a      	strh	r2, [r3, #0]
 8008ff0:	687a      	ldr	r2, [r7, #4]
 8008ff2:	683b      	ldr	r3, [r7, #0]
 8008ff4:	781b      	ldrb	r3, [r3, #0]
 8008ff6:	009b      	lsls	r3, r3, #2
 8008ff8:	18d3      	adds	r3, r2, r3
 8008ffa:	183a      	adds	r2, r7, r0
 8008ffc:	8812      	ldrh	r2, [r2, #0]
 8008ffe:	495b      	ldr	r1, [pc, #364]	; (800916c <USB_DeactivateEndpoint+0x374>)
 8009000:	430a      	orrs	r2, r1
 8009002:	b292      	uxth	r2, r2
 8009004:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8009006:	687a      	ldr	r2, [r7, #4]
 8009008:	683b      	ldr	r3, [r7, #0]
 800900a:	781b      	ldrb	r3, [r3, #0]
 800900c:	009b      	lsls	r3, r3, #2
 800900e:	18d3      	adds	r3, r2, r3
 8009010:	881b      	ldrh	r3, [r3, #0]
 8009012:	b29a      	uxth	r2, r3
 8009014:	2014      	movs	r0, #20
 8009016:	183b      	adds	r3, r7, r0
 8009018:	4953      	ldr	r1, [pc, #332]	; (8009168 <USB_DeactivateEndpoint+0x370>)
 800901a:	400a      	ands	r2, r1
 800901c:	801a      	strh	r2, [r3, #0]
 800901e:	687a      	ldr	r2, [r7, #4]
 8009020:	683b      	ldr	r3, [r7, #0]
 8009022:	781b      	ldrb	r3, [r3, #0]
 8009024:	009b      	lsls	r3, r3, #2
 8009026:	18d3      	adds	r3, r2, r3
 8009028:	183a      	adds	r2, r7, r0
 800902a:	8812      	ldrh	r2, [r2, #0]
 800902c:	494f      	ldr	r1, [pc, #316]	; (800916c <USB_DeactivateEndpoint+0x374>)
 800902e:	430a      	orrs	r2, r1
 8009030:	b292      	uxth	r2, r2
 8009032:	801a      	strh	r2, [r3, #0]
 8009034:	e08f      	b.n	8009156 <USB_DeactivateEndpoint+0x35e>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009036:	687a      	ldr	r2, [r7, #4]
 8009038:	683b      	ldr	r3, [r7, #0]
 800903a:	781b      	ldrb	r3, [r3, #0]
 800903c:	009b      	lsls	r3, r3, #2
 800903e:	18d2      	adds	r2, r2, r3
 8009040:	212e      	movs	r1, #46	; 0x2e
 8009042:	187b      	adds	r3, r7, r1
 8009044:	8812      	ldrh	r2, [r2, #0]
 8009046:	801a      	strh	r2, [r3, #0]
 8009048:	187b      	adds	r3, r7, r1
 800904a:	881a      	ldrh	r2, [r3, #0]
 800904c:	2380      	movs	r3, #128	; 0x80
 800904e:	01db      	lsls	r3, r3, #7
 8009050:	4013      	ands	r3, r2
 8009052:	d016      	beq.n	8009082 <USB_DeactivateEndpoint+0x28a>
 8009054:	687a      	ldr	r2, [r7, #4]
 8009056:	683b      	ldr	r3, [r7, #0]
 8009058:	781b      	ldrb	r3, [r3, #0]
 800905a:	009b      	lsls	r3, r3, #2
 800905c:	18d3      	adds	r3, r2, r3
 800905e:	881b      	ldrh	r3, [r3, #0]
 8009060:	b29a      	uxth	r2, r3
 8009062:	202c      	movs	r0, #44	; 0x2c
 8009064:	183b      	adds	r3, r7, r0
 8009066:	493e      	ldr	r1, [pc, #248]	; (8009160 <USB_DeactivateEndpoint+0x368>)
 8009068:	400a      	ands	r2, r1
 800906a:	801a      	strh	r2, [r3, #0]
 800906c:	687a      	ldr	r2, [r7, #4]
 800906e:	683b      	ldr	r3, [r7, #0]
 8009070:	781b      	ldrb	r3, [r3, #0]
 8009072:	009b      	lsls	r3, r3, #2
 8009074:	18d3      	adds	r3, r2, r3
 8009076:	183a      	adds	r2, r7, r0
 8009078:	8812      	ldrh	r2, [r2, #0]
 800907a:	493d      	ldr	r1, [pc, #244]	; (8009170 <USB_DeactivateEndpoint+0x378>)
 800907c:	430a      	orrs	r2, r1
 800907e:	b292      	uxth	r2, r2
 8009080:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009082:	687a      	ldr	r2, [r7, #4]
 8009084:	683b      	ldr	r3, [r7, #0]
 8009086:	781b      	ldrb	r3, [r3, #0]
 8009088:	009b      	lsls	r3, r3, #2
 800908a:	18d2      	adds	r2, r2, r3
 800908c:	212a      	movs	r1, #42	; 0x2a
 800908e:	187b      	adds	r3, r7, r1
 8009090:	8812      	ldrh	r2, [r2, #0]
 8009092:	801a      	strh	r2, [r3, #0]
 8009094:	187b      	adds	r3, r7, r1
 8009096:	881b      	ldrh	r3, [r3, #0]
 8009098:	2240      	movs	r2, #64	; 0x40
 800909a:	4013      	ands	r3, r2
 800909c:	d016      	beq.n	80090cc <USB_DeactivateEndpoint+0x2d4>
 800909e:	687a      	ldr	r2, [r7, #4]
 80090a0:	683b      	ldr	r3, [r7, #0]
 80090a2:	781b      	ldrb	r3, [r3, #0]
 80090a4:	009b      	lsls	r3, r3, #2
 80090a6:	18d3      	adds	r3, r2, r3
 80090a8:	881b      	ldrh	r3, [r3, #0]
 80090aa:	b29a      	uxth	r2, r3
 80090ac:	2028      	movs	r0, #40	; 0x28
 80090ae:	183b      	adds	r3, r7, r0
 80090b0:	492b      	ldr	r1, [pc, #172]	; (8009160 <USB_DeactivateEndpoint+0x368>)
 80090b2:	400a      	ands	r2, r1
 80090b4:	801a      	strh	r2, [r3, #0]
 80090b6:	687a      	ldr	r2, [r7, #4]
 80090b8:	683b      	ldr	r3, [r7, #0]
 80090ba:	781b      	ldrb	r3, [r3, #0]
 80090bc:	009b      	lsls	r3, r3, #2
 80090be:	18d3      	adds	r3, r2, r3
 80090c0:	183a      	adds	r2, r7, r0
 80090c2:	8812      	ldrh	r2, [r2, #0]
 80090c4:	4927      	ldr	r1, [pc, #156]	; (8009164 <USB_DeactivateEndpoint+0x36c>)
 80090c6:	430a      	orrs	r2, r1
 80090c8:	b292      	uxth	r2, r2
 80090ca:	801a      	strh	r2, [r3, #0]
      PCD_RX_DTOG(USBx, ep->num);
 80090cc:	687a      	ldr	r2, [r7, #4]
 80090ce:	683b      	ldr	r3, [r7, #0]
 80090d0:	781b      	ldrb	r3, [r3, #0]
 80090d2:	009b      	lsls	r3, r3, #2
 80090d4:	18d3      	adds	r3, r2, r3
 80090d6:	881b      	ldrh	r3, [r3, #0]
 80090d8:	b29a      	uxth	r2, r3
 80090da:	2026      	movs	r0, #38	; 0x26
 80090dc:	183b      	adds	r3, r7, r0
 80090de:	4920      	ldr	r1, [pc, #128]	; (8009160 <USB_DeactivateEndpoint+0x368>)
 80090e0:	400a      	ands	r2, r1
 80090e2:	801a      	strh	r2, [r3, #0]
 80090e4:	687a      	ldr	r2, [r7, #4]
 80090e6:	683b      	ldr	r3, [r7, #0]
 80090e8:	781b      	ldrb	r3, [r3, #0]
 80090ea:	009b      	lsls	r3, r3, #2
 80090ec:	18d3      	adds	r3, r2, r3
 80090ee:	183a      	adds	r2, r7, r0
 80090f0:	8812      	ldrh	r2, [r2, #0]
 80090f2:	491f      	ldr	r1, [pc, #124]	; (8009170 <USB_DeactivateEndpoint+0x378>)
 80090f4:	430a      	orrs	r2, r1
 80090f6:	b292      	uxth	r2, r2
 80090f8:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80090fa:	687a      	ldr	r2, [r7, #4]
 80090fc:	683b      	ldr	r3, [r7, #0]
 80090fe:	781b      	ldrb	r3, [r3, #0]
 8009100:	009b      	lsls	r3, r3, #2
 8009102:	18d3      	adds	r3, r2, r3
 8009104:	881b      	ldrh	r3, [r3, #0]
 8009106:	b29a      	uxth	r2, r3
 8009108:	2024      	movs	r0, #36	; 0x24
 800910a:	183b      	adds	r3, r7, r0
 800910c:	4916      	ldr	r1, [pc, #88]	; (8009168 <USB_DeactivateEndpoint+0x370>)
 800910e:	400a      	ands	r2, r1
 8009110:	801a      	strh	r2, [r3, #0]
 8009112:	687a      	ldr	r2, [r7, #4]
 8009114:	683b      	ldr	r3, [r7, #0]
 8009116:	781b      	ldrb	r3, [r3, #0]
 8009118:	009b      	lsls	r3, r3, #2
 800911a:	18d3      	adds	r3, r2, r3
 800911c:	183a      	adds	r2, r7, r0
 800911e:	8812      	ldrh	r2, [r2, #0]
 8009120:	4912      	ldr	r1, [pc, #72]	; (800916c <USB_DeactivateEndpoint+0x374>)
 8009122:	430a      	orrs	r2, r1
 8009124:	b292      	uxth	r2, r2
 8009126:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8009128:	687a      	ldr	r2, [r7, #4]
 800912a:	683b      	ldr	r3, [r7, #0]
 800912c:	781b      	ldrb	r3, [r3, #0]
 800912e:	009b      	lsls	r3, r3, #2
 8009130:	18d3      	adds	r3, r2, r3
 8009132:	881b      	ldrh	r3, [r3, #0]
 8009134:	b29a      	uxth	r2, r3
 8009136:	2022      	movs	r0, #34	; 0x22
 8009138:	183b      	adds	r3, r7, r0
 800913a:	490e      	ldr	r1, [pc, #56]	; (8009174 <USB_DeactivateEndpoint+0x37c>)
 800913c:	400a      	ands	r2, r1
 800913e:	801a      	strh	r2, [r3, #0]
 8009140:	687a      	ldr	r2, [r7, #4]
 8009142:	683b      	ldr	r3, [r7, #0]
 8009144:	781b      	ldrb	r3, [r3, #0]
 8009146:	009b      	lsls	r3, r3, #2
 8009148:	18d3      	adds	r3, r2, r3
 800914a:	183a      	adds	r2, r7, r0
 800914c:	8812      	ldrh	r2, [r2, #0]
 800914e:	4907      	ldr	r1, [pc, #28]	; (800916c <USB_DeactivateEndpoint+0x374>)
 8009150:	430a      	orrs	r2, r1
 8009152:	b292      	uxth	r2, r2
 8009154:	801a      	strh	r2, [r3, #0]
    }
  }

  return HAL_OK;
 8009156:	2300      	movs	r3, #0
}
 8009158:	0018      	movs	r0, r3
 800915a:	46bd      	mov	sp, r7
 800915c:	b00c      	add	sp, #48	; 0x30
 800915e:	bd80      	pop	{r7, pc}
 8009160:	ffff8f8f 	.word	0xffff8f8f
 8009164:	ffff80c0 	.word	0xffff80c0
 8009168:	ffff8fbf 	.word	0xffff8fbf
 800916c:	ffff8080 	.word	0xffff8080
 8009170:	ffffc080 	.word	0xffffc080
 8009174:	ffffbf8f 	.word	0xffffbf8f

08009178 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8009178:	b590      	push	{r4, r7, lr}
 800917a:	b0c3      	sub	sp, #268	; 0x10c
 800917c:	af00      	add	r7, sp, #0
 800917e:	6078      	str	r0, [r7, #4]
 8009180:	6039      	str	r1, [r7, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8009182:	683b      	ldr	r3, [r7, #0]
 8009184:	785b      	ldrb	r3, [r3, #1]
 8009186:	2b01      	cmp	r3, #1
 8009188:	d001      	beq.n	800918e <USB_EPStartXfer+0x16>
 800918a:	f000 fcef 	bl	8009b6c <USB_EPStartXfer+0x9f4>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800918e:	683b      	ldr	r3, [r7, #0]
 8009190:	699a      	ldr	r2, [r3, #24]
 8009192:	683b      	ldr	r3, [r7, #0]
 8009194:	691b      	ldr	r3, [r3, #16]
 8009196:	429a      	cmp	r2, r3
 8009198:	d905      	bls.n	80091a6 <USB_EPStartXfer+0x2e>
    {
      len = ep->maxpacket;
 800919a:	683b      	ldr	r3, [r7, #0]
 800919c:	691b      	ldr	r3, [r3, #16]
 800919e:	1d7a      	adds	r2, r7, #5
 80091a0:	32ff      	adds	r2, #255	; 0xff
 80091a2:	6013      	str	r3, [r2, #0]
 80091a4:	e004      	b.n	80091b0 <USB_EPStartXfer+0x38>
    }
    else
    {
      len = ep->xfer_len;
 80091a6:	683b      	ldr	r3, [r7, #0]
 80091a8:	699b      	ldr	r3, [r3, #24]
 80091aa:	1d7a      	adds	r2, r7, #5
 80091ac:	32ff      	adds	r2, #255	; 0xff
 80091ae:	6013      	str	r3, [r2, #0]
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 80091b0:	683b      	ldr	r3, [r7, #0]
 80091b2:	7b1b      	ldrb	r3, [r3, #12]
 80091b4:	2b00      	cmp	r3, #0
 80091b6:	d125      	bne.n	8009204 <USB_EPStartXfer+0x8c>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80091b8:	683b      	ldr	r3, [r7, #0]
 80091ba:	6959      	ldr	r1, [r3, #20]
 80091bc:	683b      	ldr	r3, [r7, #0]
 80091be:	88da      	ldrh	r2, [r3, #6]
 80091c0:	1d7b      	adds	r3, r7, #5
 80091c2:	33ff      	adds	r3, #255	; 0xff
 80091c4:	681b      	ldr	r3, [r3, #0]
 80091c6:	b29b      	uxth	r3, r3
 80091c8:	6878      	ldr	r0, [r7, #4]
 80091ca:	f001 f9c9 	bl	800a560 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	613b      	str	r3, [r7, #16]
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	2250      	movs	r2, #80	; 0x50
 80091d6:	5a9b      	ldrh	r3, [r3, r2]
 80091d8:	b29b      	uxth	r3, r3
 80091da:	001a      	movs	r2, r3
 80091dc:	693b      	ldr	r3, [r7, #16]
 80091de:	189b      	adds	r3, r3, r2
 80091e0:	613b      	str	r3, [r7, #16]
 80091e2:	683b      	ldr	r3, [r7, #0]
 80091e4:	781b      	ldrb	r3, [r3, #0]
 80091e6:	00da      	lsls	r2, r3, #3
 80091e8:	693b      	ldr	r3, [r7, #16]
 80091ea:	18d3      	adds	r3, r2, r3
 80091ec:	4acc      	ldr	r2, [pc, #816]	; (8009520 <USB_EPStartXfer+0x3a8>)
 80091ee:	4694      	mov	ip, r2
 80091f0:	4463      	add	r3, ip
 80091f2:	60fb      	str	r3, [r7, #12]
 80091f4:	1d7b      	adds	r3, r7, #5
 80091f6:	33ff      	adds	r3, #255	; 0xff
 80091f8:	681b      	ldr	r3, [r3, #0]
 80091fa:	b29a      	uxth	r2, r3
 80091fc:	68fb      	ldr	r3, [r7, #12]
 80091fe:	801a      	strh	r2, [r3, #0]
 8009200:	f000 fc8f 	bl	8009b22 <USB_EPStartXfer+0x9aa>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8009204:	683b      	ldr	r3, [r7, #0]
 8009206:	78db      	ldrb	r3, [r3, #3]
 8009208:	2b02      	cmp	r3, #2
 800920a:	d000      	beq.n	800920e <USB_EPStartXfer+0x96>
 800920c:	e33a      	b.n	8009884 <USB_EPStartXfer+0x70c>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800920e:	683b      	ldr	r3, [r7, #0]
 8009210:	6a1a      	ldr	r2, [r3, #32]
 8009212:	683b      	ldr	r3, [r7, #0]
 8009214:	691b      	ldr	r3, [r3, #16]
 8009216:	429a      	cmp	r2, r3
 8009218:	d800      	bhi.n	800921c <USB_EPStartXfer+0xa4>
 800921a:	e2df      	b.n	80097dc <USB_EPStartXfer+0x664>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800921c:	687a      	ldr	r2, [r7, #4]
 800921e:	683b      	ldr	r3, [r7, #0]
 8009220:	781b      	ldrb	r3, [r3, #0]
 8009222:	009b      	lsls	r3, r3, #2
 8009224:	18d3      	adds	r3, r2, r3
 8009226:	881b      	ldrh	r3, [r3, #0]
 8009228:	b29a      	uxth	r2, r3
 800922a:	2056      	movs	r0, #86	; 0x56
 800922c:	183b      	adds	r3, r7, r0
 800922e:	49bd      	ldr	r1, [pc, #756]	; (8009524 <USB_EPStartXfer+0x3ac>)
 8009230:	400a      	ands	r2, r1
 8009232:	801a      	strh	r2, [r3, #0]
 8009234:	687a      	ldr	r2, [r7, #4]
 8009236:	683b      	ldr	r3, [r7, #0]
 8009238:	781b      	ldrb	r3, [r3, #0]
 800923a:	009b      	lsls	r3, r3, #2
 800923c:	18d3      	adds	r3, r2, r3
 800923e:	183a      	adds	r2, r7, r0
 8009240:	8812      	ldrh	r2, [r2, #0]
 8009242:	49b9      	ldr	r1, [pc, #740]	; (8009528 <USB_EPStartXfer+0x3b0>)
 8009244:	430a      	orrs	r2, r1
 8009246:	b292      	uxth	r2, r2
 8009248:	801a      	strh	r2, [r3, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 800924a:	683b      	ldr	r3, [r7, #0]
 800924c:	6a1a      	ldr	r2, [r3, #32]
 800924e:	1d7b      	adds	r3, r7, #5
 8009250:	33ff      	adds	r3, #255	; 0xff
 8009252:	681b      	ldr	r3, [r3, #0]
 8009254:	1ad2      	subs	r2, r2, r3
 8009256:	683b      	ldr	r3, [r7, #0]
 8009258:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800925a:	687a      	ldr	r2, [r7, #4]
 800925c:	683b      	ldr	r3, [r7, #0]
 800925e:	781b      	ldrb	r3, [r3, #0]
 8009260:	009b      	lsls	r3, r3, #2
 8009262:	18d3      	adds	r3, r2, r3
 8009264:	881b      	ldrh	r3, [r3, #0]
 8009266:	b29b      	uxth	r3, r3
 8009268:	001a      	movs	r2, r3
 800926a:	2340      	movs	r3, #64	; 0x40
 800926c:	4013      	ands	r3, r2
 800926e:	d100      	bne.n	8009272 <USB_EPStartXfer+0xfa>
 8009270:	e162      	b.n	8009538 <USB_EPStartXfer+0x3c0>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	633b      	str	r3, [r7, #48]	; 0x30
 8009276:	683b      	ldr	r3, [r7, #0]
 8009278:	785b      	ldrb	r3, [r3, #1]
 800927a:	2b00      	cmp	r3, #0
 800927c:	d16a      	bne.n	8009354 <USB_EPStartXfer+0x1dc>
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	62bb      	str	r3, [r7, #40]	; 0x28
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	2250      	movs	r2, #80	; 0x50
 8009286:	5a9b      	ldrh	r3, [r3, r2]
 8009288:	b29b      	uxth	r3, r3
 800928a:	001a      	movs	r2, r3
 800928c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800928e:	189b      	adds	r3, r3, r2
 8009290:	62bb      	str	r3, [r7, #40]	; 0x28
 8009292:	683b      	ldr	r3, [r7, #0]
 8009294:	781b      	ldrb	r3, [r3, #0]
 8009296:	00da      	lsls	r2, r3, #3
 8009298:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800929a:	18d3      	adds	r3, r2, r3
 800929c:	4aa3      	ldr	r2, [pc, #652]	; (800952c <USB_EPStartXfer+0x3b4>)
 800929e:	4694      	mov	ip, r2
 80092a0:	4463      	add	r3, ip
 80092a2:	627b      	str	r3, [r7, #36]	; 0x24
 80092a4:	1d7b      	adds	r3, r7, #5
 80092a6:	33ff      	adds	r3, #255	; 0xff
 80092a8:	681b      	ldr	r3, [r3, #0]
 80092aa:	2b00      	cmp	r3, #0
 80092ac:	d110      	bne.n	80092d0 <USB_EPStartXfer+0x158>
 80092ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092b0:	881b      	ldrh	r3, [r3, #0]
 80092b2:	b29b      	uxth	r3, r3
 80092b4:	4a9e      	ldr	r2, [pc, #632]	; (8009530 <USB_EPStartXfer+0x3b8>)
 80092b6:	4013      	ands	r3, r2
 80092b8:	b29a      	uxth	r2, r3
 80092ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092bc:	801a      	strh	r2, [r3, #0]
 80092be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092c0:	881b      	ldrh	r3, [r3, #0]
 80092c2:	b29b      	uxth	r3, r3
 80092c4:	4a9b      	ldr	r2, [pc, #620]	; (8009534 <USB_EPStartXfer+0x3bc>)
 80092c6:	4313      	orrs	r3, r2
 80092c8:	b29a      	uxth	r2, r3
 80092ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092cc:	801a      	strh	r2, [r3, #0]
 80092ce:	e05c      	b.n	800938a <USB_EPStartXfer+0x212>
 80092d0:	1d7b      	adds	r3, r7, #5
 80092d2:	33ff      	adds	r3, #255	; 0xff
 80092d4:	681b      	ldr	r3, [r3, #0]
 80092d6:	2b3e      	cmp	r3, #62	; 0x3e
 80092d8:	d81c      	bhi.n	8009314 <USB_EPStartXfer+0x19c>
 80092da:	1d7b      	adds	r3, r7, #5
 80092dc:	33ff      	adds	r3, #255	; 0xff
 80092de:	681b      	ldr	r3, [r3, #0]
 80092e0:	085b      	lsrs	r3, r3, #1
 80092e2:	1c7a      	adds	r2, r7, #1
 80092e4:	32ff      	adds	r2, #255	; 0xff
 80092e6:	6013      	str	r3, [r2, #0]
 80092e8:	1d7b      	adds	r3, r7, #5
 80092ea:	33ff      	adds	r3, #255	; 0xff
 80092ec:	681b      	ldr	r3, [r3, #0]
 80092ee:	2201      	movs	r2, #1
 80092f0:	4013      	ands	r3, r2
 80092f2:	d006      	beq.n	8009302 <USB_EPStartXfer+0x18a>
 80092f4:	1c7b      	adds	r3, r7, #1
 80092f6:	33ff      	adds	r3, #255	; 0xff
 80092f8:	681b      	ldr	r3, [r3, #0]
 80092fa:	3301      	adds	r3, #1
 80092fc:	1c7a      	adds	r2, r7, #1
 80092fe:	32ff      	adds	r2, #255	; 0xff
 8009300:	6013      	str	r3, [r2, #0]
 8009302:	1c7b      	adds	r3, r7, #1
 8009304:	33ff      	adds	r3, #255	; 0xff
 8009306:	681b      	ldr	r3, [r3, #0]
 8009308:	b29b      	uxth	r3, r3
 800930a:	029b      	lsls	r3, r3, #10
 800930c:	b29a      	uxth	r2, r3
 800930e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009310:	801a      	strh	r2, [r3, #0]
 8009312:	e03a      	b.n	800938a <USB_EPStartXfer+0x212>
 8009314:	1d7b      	adds	r3, r7, #5
 8009316:	33ff      	adds	r3, #255	; 0xff
 8009318:	681b      	ldr	r3, [r3, #0]
 800931a:	095b      	lsrs	r3, r3, #5
 800931c:	1c7a      	adds	r2, r7, #1
 800931e:	32ff      	adds	r2, #255	; 0xff
 8009320:	6013      	str	r3, [r2, #0]
 8009322:	1d7b      	adds	r3, r7, #5
 8009324:	33ff      	adds	r3, #255	; 0xff
 8009326:	681b      	ldr	r3, [r3, #0]
 8009328:	221f      	movs	r2, #31
 800932a:	4013      	ands	r3, r2
 800932c:	d106      	bne.n	800933c <USB_EPStartXfer+0x1c4>
 800932e:	1c7b      	adds	r3, r7, #1
 8009330:	33ff      	adds	r3, #255	; 0xff
 8009332:	681b      	ldr	r3, [r3, #0]
 8009334:	3b01      	subs	r3, #1
 8009336:	1c7a      	adds	r2, r7, #1
 8009338:	32ff      	adds	r2, #255	; 0xff
 800933a:	6013      	str	r3, [r2, #0]
 800933c:	1c7b      	adds	r3, r7, #1
 800933e:	33ff      	adds	r3, #255	; 0xff
 8009340:	681b      	ldr	r3, [r3, #0]
 8009342:	b29b      	uxth	r3, r3
 8009344:	029b      	lsls	r3, r3, #10
 8009346:	b29b      	uxth	r3, r3
 8009348:	4a7a      	ldr	r2, [pc, #488]	; (8009534 <USB_EPStartXfer+0x3bc>)
 800934a:	4313      	orrs	r3, r2
 800934c:	b29a      	uxth	r2, r3
 800934e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009350:	801a      	strh	r2, [r3, #0]
 8009352:	e01a      	b.n	800938a <USB_EPStartXfer+0x212>
 8009354:	683b      	ldr	r3, [r7, #0]
 8009356:	785b      	ldrb	r3, [r3, #1]
 8009358:	2b01      	cmp	r3, #1
 800935a:	d116      	bne.n	800938a <USB_EPStartXfer+0x212>
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	2250      	movs	r2, #80	; 0x50
 8009360:	5a9b      	ldrh	r3, [r3, r2]
 8009362:	b29b      	uxth	r3, r3
 8009364:	001a      	movs	r2, r3
 8009366:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009368:	189b      	adds	r3, r3, r2
 800936a:	633b      	str	r3, [r7, #48]	; 0x30
 800936c:	683b      	ldr	r3, [r7, #0]
 800936e:	781b      	ldrb	r3, [r3, #0]
 8009370:	00da      	lsls	r2, r3, #3
 8009372:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009374:	18d3      	adds	r3, r2, r3
 8009376:	4a6d      	ldr	r2, [pc, #436]	; (800952c <USB_EPStartXfer+0x3b4>)
 8009378:	4694      	mov	ip, r2
 800937a:	4463      	add	r3, ip
 800937c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800937e:	1d7b      	adds	r3, r7, #5
 8009380:	33ff      	adds	r3, #255	; 0xff
 8009382:	681b      	ldr	r3, [r3, #0]
 8009384:	b29a      	uxth	r2, r3
 8009386:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009388:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800938a:	2076      	movs	r0, #118	; 0x76
 800938c:	183b      	adds	r3, r7, r0
 800938e:	683a      	ldr	r2, [r7, #0]
 8009390:	8952      	ldrh	r2, [r2, #10]
 8009392:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009394:	683b      	ldr	r3, [r7, #0]
 8009396:	6959      	ldr	r1, [r3, #20]
 8009398:	1d7b      	adds	r3, r7, #5
 800939a:	33ff      	adds	r3, #255	; 0xff
 800939c:	681b      	ldr	r3, [r3, #0]
 800939e:	b29c      	uxth	r4, r3
 80093a0:	183b      	adds	r3, r7, r0
 80093a2:	881a      	ldrh	r2, [r3, #0]
 80093a4:	6878      	ldr	r0, [r7, #4]
 80093a6:	0023      	movs	r3, r4
 80093a8:	f001 f8da 	bl	800a560 <USB_WritePMA>
            ep->xfer_buff += len;
 80093ac:	683b      	ldr	r3, [r7, #0]
 80093ae:	695a      	ldr	r2, [r3, #20]
 80093b0:	1d7b      	adds	r3, r7, #5
 80093b2:	33ff      	adds	r3, #255	; 0xff
 80093b4:	681b      	ldr	r3, [r3, #0]
 80093b6:	18d2      	adds	r2, r2, r3
 80093b8:	683b      	ldr	r3, [r7, #0]
 80093ba:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80093bc:	683b      	ldr	r3, [r7, #0]
 80093be:	6a1a      	ldr	r2, [r3, #32]
 80093c0:	683b      	ldr	r3, [r7, #0]
 80093c2:	691b      	ldr	r3, [r3, #16]
 80093c4:	429a      	cmp	r2, r3
 80093c6:	d908      	bls.n	80093da <USB_EPStartXfer+0x262>
            {
              ep->xfer_len_db -= len;
 80093c8:	683b      	ldr	r3, [r7, #0]
 80093ca:	6a1a      	ldr	r2, [r3, #32]
 80093cc:	1d7b      	adds	r3, r7, #5
 80093ce:	33ff      	adds	r3, #255	; 0xff
 80093d0:	681b      	ldr	r3, [r3, #0]
 80093d2:	1ad2      	subs	r2, r2, r3
 80093d4:	683b      	ldr	r3, [r7, #0]
 80093d6:	621a      	str	r2, [r3, #32]
 80093d8:	e007      	b.n	80093ea <USB_EPStartXfer+0x272>
            }
            else
            {
              len = ep->xfer_len_db;
 80093da:	683b      	ldr	r3, [r7, #0]
 80093dc:	6a1b      	ldr	r3, [r3, #32]
 80093de:	1d7a      	adds	r2, r7, #5
 80093e0:	32ff      	adds	r2, #255	; 0xff
 80093e2:	6013      	str	r3, [r2, #0]
              ep->xfer_len_db = 0U;
 80093e4:	683b      	ldr	r3, [r7, #0]
 80093e6:	2200      	movs	r2, #0
 80093e8:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80093ea:	683b      	ldr	r3, [r7, #0]
 80093ec:	785b      	ldrb	r3, [r3, #1]
 80093ee:	2b00      	cmp	r3, #0
 80093f0:	d166      	bne.n	80094c0 <USB_EPStartXfer+0x348>
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	61bb      	str	r3, [r7, #24]
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	2250      	movs	r2, #80	; 0x50
 80093fa:	5a9b      	ldrh	r3, [r3, r2]
 80093fc:	b29b      	uxth	r3, r3
 80093fe:	001a      	movs	r2, r3
 8009400:	69bb      	ldr	r3, [r7, #24]
 8009402:	189b      	adds	r3, r3, r2
 8009404:	61bb      	str	r3, [r7, #24]
 8009406:	683b      	ldr	r3, [r7, #0]
 8009408:	781b      	ldrb	r3, [r3, #0]
 800940a:	00da      	lsls	r2, r3, #3
 800940c:	69bb      	ldr	r3, [r7, #24]
 800940e:	18d3      	adds	r3, r2, r3
 8009410:	4a43      	ldr	r2, [pc, #268]	; (8009520 <USB_EPStartXfer+0x3a8>)
 8009412:	4694      	mov	ip, r2
 8009414:	4463      	add	r3, ip
 8009416:	617b      	str	r3, [r7, #20]
 8009418:	1d7b      	adds	r3, r7, #5
 800941a:	33ff      	adds	r3, #255	; 0xff
 800941c:	681b      	ldr	r3, [r3, #0]
 800941e:	2b00      	cmp	r3, #0
 8009420:	d110      	bne.n	8009444 <USB_EPStartXfer+0x2cc>
 8009422:	697b      	ldr	r3, [r7, #20]
 8009424:	881b      	ldrh	r3, [r3, #0]
 8009426:	b29b      	uxth	r3, r3
 8009428:	4a41      	ldr	r2, [pc, #260]	; (8009530 <USB_EPStartXfer+0x3b8>)
 800942a:	4013      	ands	r3, r2
 800942c:	b29a      	uxth	r2, r3
 800942e:	697b      	ldr	r3, [r7, #20]
 8009430:	801a      	strh	r2, [r3, #0]
 8009432:	697b      	ldr	r3, [r7, #20]
 8009434:	881b      	ldrh	r3, [r3, #0]
 8009436:	b29b      	uxth	r3, r3
 8009438:	4a3e      	ldr	r2, [pc, #248]	; (8009534 <USB_EPStartXfer+0x3bc>)
 800943a:	4313      	orrs	r3, r2
 800943c:	b29a      	uxth	r2, r3
 800943e:	697b      	ldr	r3, [r7, #20]
 8009440:	801a      	strh	r2, [r3, #0]
 8009442:	e05a      	b.n	80094fa <USB_EPStartXfer+0x382>
 8009444:	1d7b      	adds	r3, r7, #5
 8009446:	33ff      	adds	r3, #255	; 0xff
 8009448:	681b      	ldr	r3, [r3, #0]
 800944a:	2b3e      	cmp	r3, #62	; 0x3e
 800944c:	d81a      	bhi.n	8009484 <USB_EPStartXfer+0x30c>
 800944e:	1d7b      	adds	r3, r7, #5
 8009450:	33ff      	adds	r3, #255	; 0xff
 8009452:	681b      	ldr	r3, [r3, #0]
 8009454:	085b      	lsrs	r3, r3, #1
 8009456:	21fc      	movs	r1, #252	; 0xfc
 8009458:	187a      	adds	r2, r7, r1
 800945a:	6013      	str	r3, [r2, #0]
 800945c:	1d7b      	adds	r3, r7, #5
 800945e:	33ff      	adds	r3, #255	; 0xff
 8009460:	681b      	ldr	r3, [r3, #0]
 8009462:	2201      	movs	r2, #1
 8009464:	4013      	ands	r3, r2
 8009466:	d004      	beq.n	8009472 <USB_EPStartXfer+0x2fa>
 8009468:	187b      	adds	r3, r7, r1
 800946a:	681b      	ldr	r3, [r3, #0]
 800946c:	3301      	adds	r3, #1
 800946e:	187a      	adds	r2, r7, r1
 8009470:	6013      	str	r3, [r2, #0]
 8009472:	23fc      	movs	r3, #252	; 0xfc
 8009474:	18fb      	adds	r3, r7, r3
 8009476:	681b      	ldr	r3, [r3, #0]
 8009478:	b29b      	uxth	r3, r3
 800947a:	029b      	lsls	r3, r3, #10
 800947c:	b29a      	uxth	r2, r3
 800947e:	697b      	ldr	r3, [r7, #20]
 8009480:	801a      	strh	r2, [r3, #0]
 8009482:	e03a      	b.n	80094fa <USB_EPStartXfer+0x382>
 8009484:	1d7b      	adds	r3, r7, #5
 8009486:	33ff      	adds	r3, #255	; 0xff
 8009488:	681b      	ldr	r3, [r3, #0]
 800948a:	095b      	lsrs	r3, r3, #5
 800948c:	21fc      	movs	r1, #252	; 0xfc
 800948e:	187a      	adds	r2, r7, r1
 8009490:	6013      	str	r3, [r2, #0]
 8009492:	1d7b      	adds	r3, r7, #5
 8009494:	33ff      	adds	r3, #255	; 0xff
 8009496:	681b      	ldr	r3, [r3, #0]
 8009498:	221f      	movs	r2, #31
 800949a:	4013      	ands	r3, r2
 800949c:	d104      	bne.n	80094a8 <USB_EPStartXfer+0x330>
 800949e:	187b      	adds	r3, r7, r1
 80094a0:	681b      	ldr	r3, [r3, #0]
 80094a2:	3b01      	subs	r3, #1
 80094a4:	187a      	adds	r2, r7, r1
 80094a6:	6013      	str	r3, [r2, #0]
 80094a8:	23fc      	movs	r3, #252	; 0xfc
 80094aa:	18fb      	adds	r3, r7, r3
 80094ac:	681b      	ldr	r3, [r3, #0]
 80094ae:	b29b      	uxth	r3, r3
 80094b0:	029b      	lsls	r3, r3, #10
 80094b2:	b29b      	uxth	r3, r3
 80094b4:	4a1f      	ldr	r2, [pc, #124]	; (8009534 <USB_EPStartXfer+0x3bc>)
 80094b6:	4313      	orrs	r3, r2
 80094b8:	b29a      	uxth	r2, r3
 80094ba:	697b      	ldr	r3, [r7, #20]
 80094bc:	801a      	strh	r2, [r3, #0]
 80094be:	e01c      	b.n	80094fa <USB_EPStartXfer+0x382>
 80094c0:	683b      	ldr	r3, [r7, #0]
 80094c2:	785b      	ldrb	r3, [r3, #1]
 80094c4:	2b01      	cmp	r3, #1
 80094c6:	d118      	bne.n	80094fa <USB_EPStartXfer+0x382>
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	623b      	str	r3, [r7, #32]
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	2250      	movs	r2, #80	; 0x50
 80094d0:	5a9b      	ldrh	r3, [r3, r2]
 80094d2:	b29b      	uxth	r3, r3
 80094d4:	001a      	movs	r2, r3
 80094d6:	6a3b      	ldr	r3, [r7, #32]
 80094d8:	189b      	adds	r3, r3, r2
 80094da:	623b      	str	r3, [r7, #32]
 80094dc:	683b      	ldr	r3, [r7, #0]
 80094de:	781b      	ldrb	r3, [r3, #0]
 80094e0:	00da      	lsls	r2, r3, #3
 80094e2:	6a3b      	ldr	r3, [r7, #32]
 80094e4:	18d3      	adds	r3, r2, r3
 80094e6:	4a0e      	ldr	r2, [pc, #56]	; (8009520 <USB_EPStartXfer+0x3a8>)
 80094e8:	4694      	mov	ip, r2
 80094ea:	4463      	add	r3, ip
 80094ec:	61fb      	str	r3, [r7, #28]
 80094ee:	1d7b      	adds	r3, r7, #5
 80094f0:	33ff      	adds	r3, #255	; 0xff
 80094f2:	681b      	ldr	r3, [r3, #0]
 80094f4:	b29a      	uxth	r2, r3
 80094f6:	69fb      	ldr	r3, [r7, #28]
 80094f8:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80094fa:	2076      	movs	r0, #118	; 0x76
 80094fc:	183b      	adds	r3, r7, r0
 80094fe:	683a      	ldr	r2, [r7, #0]
 8009500:	8912      	ldrh	r2, [r2, #8]
 8009502:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009504:	683b      	ldr	r3, [r7, #0]
 8009506:	6959      	ldr	r1, [r3, #20]
 8009508:	1d7b      	adds	r3, r7, #5
 800950a:	33ff      	adds	r3, #255	; 0xff
 800950c:	681b      	ldr	r3, [r3, #0]
 800950e:	b29c      	uxth	r4, r3
 8009510:	183b      	adds	r3, r7, r0
 8009512:	881a      	ldrh	r2, [r3, #0]
 8009514:	6878      	ldr	r0, [r7, #4]
 8009516:	0023      	movs	r3, r4
 8009518:	f001 f822 	bl	800a560 <USB_WritePMA>
 800951c:	e301      	b.n	8009b22 <USB_EPStartXfer+0x9aa>
 800951e:	46c0      	nop			; (mov r8, r8)
 8009520:	00000402 	.word	0x00000402
 8009524:	ffff8f8f 	.word	0xffff8f8f
 8009528:	ffff8180 	.word	0xffff8180
 800952c:	00000406 	.word	0x00000406
 8009530:	ffff83ff 	.word	0xffff83ff
 8009534:	ffff8000 	.word	0xffff8000
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8009538:	683b      	ldr	r3, [r7, #0]
 800953a:	785b      	ldrb	r3, [r3, #1]
 800953c:	2b00      	cmp	r3, #0
 800953e:	d166      	bne.n	800960e <USB_EPStartXfer+0x496>
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	64bb      	str	r3, [r7, #72]	; 0x48
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	2250      	movs	r2, #80	; 0x50
 8009548:	5a9b      	ldrh	r3, [r3, r2]
 800954a:	b29b      	uxth	r3, r3
 800954c:	001a      	movs	r2, r3
 800954e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009550:	189b      	adds	r3, r3, r2
 8009552:	64bb      	str	r3, [r7, #72]	; 0x48
 8009554:	683b      	ldr	r3, [r7, #0]
 8009556:	781b      	ldrb	r3, [r3, #0]
 8009558:	00da      	lsls	r2, r3, #3
 800955a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800955c:	18d3      	adds	r3, r2, r3
 800955e:	4ac3      	ldr	r2, [pc, #780]	; (800986c <USB_EPStartXfer+0x6f4>)
 8009560:	4694      	mov	ip, r2
 8009562:	4463      	add	r3, ip
 8009564:	647b      	str	r3, [r7, #68]	; 0x44
 8009566:	1d7b      	adds	r3, r7, #5
 8009568:	33ff      	adds	r3, #255	; 0xff
 800956a:	681b      	ldr	r3, [r3, #0]
 800956c:	2b00      	cmp	r3, #0
 800956e:	d110      	bne.n	8009592 <USB_EPStartXfer+0x41a>
 8009570:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009572:	881b      	ldrh	r3, [r3, #0]
 8009574:	b29b      	uxth	r3, r3
 8009576:	4abe      	ldr	r2, [pc, #760]	; (8009870 <USB_EPStartXfer+0x6f8>)
 8009578:	4013      	ands	r3, r2
 800957a:	b29a      	uxth	r2, r3
 800957c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800957e:	801a      	strh	r2, [r3, #0]
 8009580:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009582:	881b      	ldrh	r3, [r3, #0]
 8009584:	b29b      	uxth	r3, r3
 8009586:	4abb      	ldr	r2, [pc, #748]	; (8009874 <USB_EPStartXfer+0x6fc>)
 8009588:	4313      	orrs	r3, r2
 800958a:	b29a      	uxth	r2, r3
 800958c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800958e:	801a      	strh	r2, [r3, #0]
 8009590:	e05a      	b.n	8009648 <USB_EPStartXfer+0x4d0>
 8009592:	1d7b      	adds	r3, r7, #5
 8009594:	33ff      	adds	r3, #255	; 0xff
 8009596:	681b      	ldr	r3, [r3, #0]
 8009598:	2b3e      	cmp	r3, #62	; 0x3e
 800959a:	d81a      	bhi.n	80095d2 <USB_EPStartXfer+0x45a>
 800959c:	1d7b      	adds	r3, r7, #5
 800959e:	33ff      	adds	r3, #255	; 0xff
 80095a0:	681b      	ldr	r3, [r3, #0]
 80095a2:	085b      	lsrs	r3, r3, #1
 80095a4:	21f8      	movs	r1, #248	; 0xf8
 80095a6:	187a      	adds	r2, r7, r1
 80095a8:	6013      	str	r3, [r2, #0]
 80095aa:	1d7b      	adds	r3, r7, #5
 80095ac:	33ff      	adds	r3, #255	; 0xff
 80095ae:	681b      	ldr	r3, [r3, #0]
 80095b0:	2201      	movs	r2, #1
 80095b2:	4013      	ands	r3, r2
 80095b4:	d004      	beq.n	80095c0 <USB_EPStartXfer+0x448>
 80095b6:	187b      	adds	r3, r7, r1
 80095b8:	681b      	ldr	r3, [r3, #0]
 80095ba:	3301      	adds	r3, #1
 80095bc:	187a      	adds	r2, r7, r1
 80095be:	6013      	str	r3, [r2, #0]
 80095c0:	23f8      	movs	r3, #248	; 0xf8
 80095c2:	18fb      	adds	r3, r7, r3
 80095c4:	681b      	ldr	r3, [r3, #0]
 80095c6:	b29b      	uxth	r3, r3
 80095c8:	029b      	lsls	r3, r3, #10
 80095ca:	b29a      	uxth	r2, r3
 80095cc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80095ce:	801a      	strh	r2, [r3, #0]
 80095d0:	e03a      	b.n	8009648 <USB_EPStartXfer+0x4d0>
 80095d2:	1d7b      	adds	r3, r7, #5
 80095d4:	33ff      	adds	r3, #255	; 0xff
 80095d6:	681b      	ldr	r3, [r3, #0]
 80095d8:	095b      	lsrs	r3, r3, #5
 80095da:	21f8      	movs	r1, #248	; 0xf8
 80095dc:	187a      	adds	r2, r7, r1
 80095de:	6013      	str	r3, [r2, #0]
 80095e0:	1d7b      	adds	r3, r7, #5
 80095e2:	33ff      	adds	r3, #255	; 0xff
 80095e4:	681b      	ldr	r3, [r3, #0]
 80095e6:	221f      	movs	r2, #31
 80095e8:	4013      	ands	r3, r2
 80095ea:	d104      	bne.n	80095f6 <USB_EPStartXfer+0x47e>
 80095ec:	187b      	adds	r3, r7, r1
 80095ee:	681b      	ldr	r3, [r3, #0]
 80095f0:	3b01      	subs	r3, #1
 80095f2:	187a      	adds	r2, r7, r1
 80095f4:	6013      	str	r3, [r2, #0]
 80095f6:	23f8      	movs	r3, #248	; 0xf8
 80095f8:	18fb      	adds	r3, r7, r3
 80095fa:	681b      	ldr	r3, [r3, #0]
 80095fc:	b29b      	uxth	r3, r3
 80095fe:	029b      	lsls	r3, r3, #10
 8009600:	b29b      	uxth	r3, r3
 8009602:	4a9c      	ldr	r2, [pc, #624]	; (8009874 <USB_EPStartXfer+0x6fc>)
 8009604:	4313      	orrs	r3, r2
 8009606:	b29a      	uxth	r2, r3
 8009608:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800960a:	801a      	strh	r2, [r3, #0]
 800960c:	e01c      	b.n	8009648 <USB_EPStartXfer+0x4d0>
 800960e:	683b      	ldr	r3, [r7, #0]
 8009610:	785b      	ldrb	r3, [r3, #1]
 8009612:	2b01      	cmp	r3, #1
 8009614:	d118      	bne.n	8009648 <USB_EPStartXfer+0x4d0>
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	653b      	str	r3, [r7, #80]	; 0x50
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	2250      	movs	r2, #80	; 0x50
 800961e:	5a9b      	ldrh	r3, [r3, r2]
 8009620:	b29b      	uxth	r3, r3
 8009622:	001a      	movs	r2, r3
 8009624:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009626:	189b      	adds	r3, r3, r2
 8009628:	653b      	str	r3, [r7, #80]	; 0x50
 800962a:	683b      	ldr	r3, [r7, #0]
 800962c:	781b      	ldrb	r3, [r3, #0]
 800962e:	00da      	lsls	r2, r3, #3
 8009630:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009632:	18d3      	adds	r3, r2, r3
 8009634:	4a8d      	ldr	r2, [pc, #564]	; (800986c <USB_EPStartXfer+0x6f4>)
 8009636:	4694      	mov	ip, r2
 8009638:	4463      	add	r3, ip
 800963a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800963c:	1d7b      	adds	r3, r7, #5
 800963e:	33ff      	adds	r3, #255	; 0xff
 8009640:	681b      	ldr	r3, [r3, #0]
 8009642:	b29a      	uxth	r2, r3
 8009644:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009646:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8009648:	2076      	movs	r0, #118	; 0x76
 800964a:	183b      	adds	r3, r7, r0
 800964c:	683a      	ldr	r2, [r7, #0]
 800964e:	8912      	ldrh	r2, [r2, #8]
 8009650:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009652:	683b      	ldr	r3, [r7, #0]
 8009654:	6959      	ldr	r1, [r3, #20]
 8009656:	1d7b      	adds	r3, r7, #5
 8009658:	33ff      	adds	r3, #255	; 0xff
 800965a:	681b      	ldr	r3, [r3, #0]
 800965c:	b29c      	uxth	r4, r3
 800965e:	183b      	adds	r3, r7, r0
 8009660:	881a      	ldrh	r2, [r3, #0]
 8009662:	6878      	ldr	r0, [r7, #4]
 8009664:	0023      	movs	r3, r4
 8009666:	f000 ff7b 	bl	800a560 <USB_WritePMA>
            ep->xfer_buff += len;
 800966a:	683b      	ldr	r3, [r7, #0]
 800966c:	695a      	ldr	r2, [r3, #20]
 800966e:	1d7b      	adds	r3, r7, #5
 8009670:	33ff      	adds	r3, #255	; 0xff
 8009672:	681b      	ldr	r3, [r3, #0]
 8009674:	18d2      	adds	r2, r2, r3
 8009676:	683b      	ldr	r3, [r7, #0]
 8009678:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800967a:	683b      	ldr	r3, [r7, #0]
 800967c:	6a1a      	ldr	r2, [r3, #32]
 800967e:	683b      	ldr	r3, [r7, #0]
 8009680:	691b      	ldr	r3, [r3, #16]
 8009682:	429a      	cmp	r2, r3
 8009684:	d908      	bls.n	8009698 <USB_EPStartXfer+0x520>
            {
              ep->xfer_len_db -= len;
 8009686:	683b      	ldr	r3, [r7, #0]
 8009688:	6a1a      	ldr	r2, [r3, #32]
 800968a:	1d7b      	adds	r3, r7, #5
 800968c:	33ff      	adds	r3, #255	; 0xff
 800968e:	681b      	ldr	r3, [r3, #0]
 8009690:	1ad2      	subs	r2, r2, r3
 8009692:	683b      	ldr	r3, [r7, #0]
 8009694:	621a      	str	r2, [r3, #32]
 8009696:	e007      	b.n	80096a8 <USB_EPStartXfer+0x530>
            }
            else
            {
              len = ep->xfer_len_db;
 8009698:	683b      	ldr	r3, [r7, #0]
 800969a:	6a1b      	ldr	r3, [r3, #32]
 800969c:	1d7a      	adds	r2, r7, #5
 800969e:	32ff      	adds	r2, #255	; 0xff
 80096a0:	6013      	str	r3, [r2, #0]
              ep->xfer_len_db = 0U;
 80096a2:	683b      	ldr	r3, [r7, #0]
 80096a4:	2200      	movs	r2, #0
 80096a6:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	643b      	str	r3, [r7, #64]	; 0x40
 80096ac:	683b      	ldr	r3, [r7, #0]
 80096ae:	785b      	ldrb	r3, [r3, #1]
 80096b0:	2b00      	cmp	r3, #0
 80096b2:	d166      	bne.n	8009782 <USB_EPStartXfer+0x60a>
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	63bb      	str	r3, [r7, #56]	; 0x38
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	2250      	movs	r2, #80	; 0x50
 80096bc:	5a9b      	ldrh	r3, [r3, r2]
 80096be:	b29b      	uxth	r3, r3
 80096c0:	001a      	movs	r2, r3
 80096c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096c4:	189b      	adds	r3, r3, r2
 80096c6:	63bb      	str	r3, [r7, #56]	; 0x38
 80096c8:	683b      	ldr	r3, [r7, #0]
 80096ca:	781b      	ldrb	r3, [r3, #0]
 80096cc:	00da      	lsls	r2, r3, #3
 80096ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096d0:	18d3      	adds	r3, r2, r3
 80096d2:	4a69      	ldr	r2, [pc, #420]	; (8009878 <USB_EPStartXfer+0x700>)
 80096d4:	4694      	mov	ip, r2
 80096d6:	4463      	add	r3, ip
 80096d8:	637b      	str	r3, [r7, #52]	; 0x34
 80096da:	1d7b      	adds	r3, r7, #5
 80096dc:	33ff      	adds	r3, #255	; 0xff
 80096de:	681b      	ldr	r3, [r3, #0]
 80096e0:	2b00      	cmp	r3, #0
 80096e2:	d110      	bne.n	8009706 <USB_EPStartXfer+0x58e>
 80096e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80096e6:	881b      	ldrh	r3, [r3, #0]
 80096e8:	b29b      	uxth	r3, r3
 80096ea:	4a61      	ldr	r2, [pc, #388]	; (8009870 <USB_EPStartXfer+0x6f8>)
 80096ec:	4013      	ands	r3, r2
 80096ee:	b29a      	uxth	r2, r3
 80096f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80096f2:	801a      	strh	r2, [r3, #0]
 80096f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80096f6:	881b      	ldrh	r3, [r3, #0]
 80096f8:	b29b      	uxth	r3, r3
 80096fa:	4a5e      	ldr	r2, [pc, #376]	; (8009874 <USB_EPStartXfer+0x6fc>)
 80096fc:	4313      	orrs	r3, r2
 80096fe:	b29a      	uxth	r2, r3
 8009700:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009702:	801a      	strh	r2, [r3, #0]
 8009704:	e058      	b.n	80097b8 <USB_EPStartXfer+0x640>
 8009706:	1d7b      	adds	r3, r7, #5
 8009708:	33ff      	adds	r3, #255	; 0xff
 800970a:	681b      	ldr	r3, [r3, #0]
 800970c:	2b3e      	cmp	r3, #62	; 0x3e
 800970e:	d81a      	bhi.n	8009746 <USB_EPStartXfer+0x5ce>
 8009710:	1d7b      	adds	r3, r7, #5
 8009712:	33ff      	adds	r3, #255	; 0xff
 8009714:	681b      	ldr	r3, [r3, #0]
 8009716:	085b      	lsrs	r3, r3, #1
 8009718:	21f4      	movs	r1, #244	; 0xf4
 800971a:	187a      	adds	r2, r7, r1
 800971c:	6013      	str	r3, [r2, #0]
 800971e:	1d7b      	adds	r3, r7, #5
 8009720:	33ff      	adds	r3, #255	; 0xff
 8009722:	681b      	ldr	r3, [r3, #0]
 8009724:	2201      	movs	r2, #1
 8009726:	4013      	ands	r3, r2
 8009728:	d004      	beq.n	8009734 <USB_EPStartXfer+0x5bc>
 800972a:	187b      	adds	r3, r7, r1
 800972c:	681b      	ldr	r3, [r3, #0]
 800972e:	3301      	adds	r3, #1
 8009730:	187a      	adds	r2, r7, r1
 8009732:	6013      	str	r3, [r2, #0]
 8009734:	23f4      	movs	r3, #244	; 0xf4
 8009736:	18fb      	adds	r3, r7, r3
 8009738:	681b      	ldr	r3, [r3, #0]
 800973a:	b29b      	uxth	r3, r3
 800973c:	029b      	lsls	r3, r3, #10
 800973e:	b29a      	uxth	r2, r3
 8009740:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009742:	801a      	strh	r2, [r3, #0]
 8009744:	e038      	b.n	80097b8 <USB_EPStartXfer+0x640>
 8009746:	1d7b      	adds	r3, r7, #5
 8009748:	33ff      	adds	r3, #255	; 0xff
 800974a:	681b      	ldr	r3, [r3, #0]
 800974c:	095b      	lsrs	r3, r3, #5
 800974e:	21f4      	movs	r1, #244	; 0xf4
 8009750:	187a      	adds	r2, r7, r1
 8009752:	6013      	str	r3, [r2, #0]
 8009754:	1d7b      	adds	r3, r7, #5
 8009756:	33ff      	adds	r3, #255	; 0xff
 8009758:	681b      	ldr	r3, [r3, #0]
 800975a:	221f      	movs	r2, #31
 800975c:	4013      	ands	r3, r2
 800975e:	d104      	bne.n	800976a <USB_EPStartXfer+0x5f2>
 8009760:	187b      	adds	r3, r7, r1
 8009762:	681b      	ldr	r3, [r3, #0]
 8009764:	3b01      	subs	r3, #1
 8009766:	187a      	adds	r2, r7, r1
 8009768:	6013      	str	r3, [r2, #0]
 800976a:	23f4      	movs	r3, #244	; 0xf4
 800976c:	18fb      	adds	r3, r7, r3
 800976e:	681b      	ldr	r3, [r3, #0]
 8009770:	b29b      	uxth	r3, r3
 8009772:	029b      	lsls	r3, r3, #10
 8009774:	b29b      	uxth	r3, r3
 8009776:	4a3f      	ldr	r2, [pc, #252]	; (8009874 <USB_EPStartXfer+0x6fc>)
 8009778:	4313      	orrs	r3, r2
 800977a:	b29a      	uxth	r2, r3
 800977c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800977e:	801a      	strh	r2, [r3, #0]
 8009780:	e01a      	b.n	80097b8 <USB_EPStartXfer+0x640>
 8009782:	683b      	ldr	r3, [r7, #0]
 8009784:	785b      	ldrb	r3, [r3, #1]
 8009786:	2b01      	cmp	r3, #1
 8009788:	d116      	bne.n	80097b8 <USB_EPStartXfer+0x640>
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	2250      	movs	r2, #80	; 0x50
 800978e:	5a9b      	ldrh	r3, [r3, r2]
 8009790:	b29b      	uxth	r3, r3
 8009792:	001a      	movs	r2, r3
 8009794:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009796:	189b      	adds	r3, r3, r2
 8009798:	643b      	str	r3, [r7, #64]	; 0x40
 800979a:	683b      	ldr	r3, [r7, #0]
 800979c:	781b      	ldrb	r3, [r3, #0]
 800979e:	00da      	lsls	r2, r3, #3
 80097a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80097a2:	18d3      	adds	r3, r2, r3
 80097a4:	4a34      	ldr	r2, [pc, #208]	; (8009878 <USB_EPStartXfer+0x700>)
 80097a6:	4694      	mov	ip, r2
 80097a8:	4463      	add	r3, ip
 80097aa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80097ac:	1d7b      	adds	r3, r7, #5
 80097ae:	33ff      	adds	r3, #255	; 0xff
 80097b0:	681b      	ldr	r3, [r3, #0]
 80097b2:	b29a      	uxth	r2, r3
 80097b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80097b6:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80097b8:	2076      	movs	r0, #118	; 0x76
 80097ba:	183b      	adds	r3, r7, r0
 80097bc:	683a      	ldr	r2, [r7, #0]
 80097be:	8952      	ldrh	r2, [r2, #10]
 80097c0:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80097c2:	683b      	ldr	r3, [r7, #0]
 80097c4:	6959      	ldr	r1, [r3, #20]
 80097c6:	1d7b      	adds	r3, r7, #5
 80097c8:	33ff      	adds	r3, #255	; 0xff
 80097ca:	681b      	ldr	r3, [r3, #0]
 80097cc:	b29c      	uxth	r4, r3
 80097ce:	183b      	adds	r3, r7, r0
 80097d0:	881a      	ldrh	r2, [r3, #0]
 80097d2:	6878      	ldr	r0, [r7, #4]
 80097d4:	0023      	movs	r3, r4
 80097d6:	f000 fec3 	bl	800a560 <USB_WritePMA>
 80097da:	e1a2      	b.n	8009b22 <USB_EPStartXfer+0x9aa>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 80097dc:	683b      	ldr	r3, [r7, #0]
 80097de:	6a1b      	ldr	r3, [r3, #32]
 80097e0:	1d7a      	adds	r2, r7, #5
 80097e2:	32ff      	adds	r2, #255	; 0xff
 80097e4:	6013      	str	r3, [r2, #0]

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 80097e6:	687a      	ldr	r2, [r7, #4]
 80097e8:	683b      	ldr	r3, [r7, #0]
 80097ea:	781b      	ldrb	r3, [r3, #0]
 80097ec:	009b      	lsls	r3, r3, #2
 80097ee:	18d3      	adds	r3, r2, r3
 80097f0:	881b      	ldrh	r3, [r3, #0]
 80097f2:	b29a      	uxth	r2, r3
 80097f4:	2062      	movs	r0, #98	; 0x62
 80097f6:	183b      	adds	r3, r7, r0
 80097f8:	4920      	ldr	r1, [pc, #128]	; (800987c <USB_EPStartXfer+0x704>)
 80097fa:	400a      	ands	r2, r1
 80097fc:	801a      	strh	r2, [r3, #0]
 80097fe:	687a      	ldr	r2, [r7, #4]
 8009800:	683b      	ldr	r3, [r7, #0]
 8009802:	781b      	ldrb	r3, [r3, #0]
 8009804:	009b      	lsls	r3, r3, #2
 8009806:	18d3      	adds	r3, r2, r3
 8009808:	183a      	adds	r2, r7, r0
 800980a:	8812      	ldrh	r2, [r2, #0]
 800980c:	491c      	ldr	r1, [pc, #112]	; (8009880 <USB_EPStartXfer+0x708>)
 800980e:	430a      	orrs	r2, r1
 8009810:	b292      	uxth	r2, r2
 8009812:	801a      	strh	r2, [r3, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	2250      	movs	r2, #80	; 0x50
 800981c:	5a9b      	ldrh	r3, [r3, r2]
 800981e:	b29b      	uxth	r3, r3
 8009820:	001a      	movs	r2, r3
 8009822:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009824:	189b      	adds	r3, r3, r2
 8009826:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009828:	683b      	ldr	r3, [r7, #0]
 800982a:	781b      	ldrb	r3, [r3, #0]
 800982c:	00da      	lsls	r2, r3, #3
 800982e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009830:	18d3      	adds	r3, r2, r3
 8009832:	4a0e      	ldr	r2, [pc, #56]	; (800986c <USB_EPStartXfer+0x6f4>)
 8009834:	4694      	mov	ip, r2
 8009836:	4463      	add	r3, ip
 8009838:	65bb      	str	r3, [r7, #88]	; 0x58
 800983a:	1d7b      	adds	r3, r7, #5
 800983c:	33ff      	adds	r3, #255	; 0xff
 800983e:	681b      	ldr	r3, [r3, #0]
 8009840:	b29a      	uxth	r2, r3
 8009842:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009844:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8009846:	2076      	movs	r0, #118	; 0x76
 8009848:	183b      	adds	r3, r7, r0
 800984a:	683a      	ldr	r2, [r7, #0]
 800984c:	8912      	ldrh	r2, [r2, #8]
 800984e:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009850:	683b      	ldr	r3, [r7, #0]
 8009852:	6959      	ldr	r1, [r3, #20]
 8009854:	1d7b      	adds	r3, r7, #5
 8009856:	33ff      	adds	r3, #255	; 0xff
 8009858:	681b      	ldr	r3, [r3, #0]
 800985a:	b29c      	uxth	r4, r3
 800985c:	183b      	adds	r3, r7, r0
 800985e:	881a      	ldrh	r2, [r3, #0]
 8009860:	6878      	ldr	r0, [r7, #4]
 8009862:	0023      	movs	r3, r4
 8009864:	f000 fe7c 	bl	800a560 <USB_WritePMA>
 8009868:	e15b      	b.n	8009b22 <USB_EPStartXfer+0x9aa>
 800986a:	46c0      	nop			; (mov r8, r8)
 800986c:	00000402 	.word	0x00000402
 8009870:	ffff83ff 	.word	0xffff83ff
 8009874:	ffff8000 	.word	0xffff8000
 8009878:	00000406 	.word	0x00000406
 800987c:	ffff8e8f 	.word	0xffff8e8f
 8009880:	ffff8080 	.word	0xffff8080
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8009884:	683b      	ldr	r3, [r7, #0]
 8009886:	6a1a      	ldr	r2, [r3, #32]
 8009888:	1d7b      	adds	r3, r7, #5
 800988a:	33ff      	adds	r3, #255	; 0xff
 800988c:	681b      	ldr	r3, [r3, #0]
 800988e:	1ad2      	subs	r2, r2, r3
 8009890:	683b      	ldr	r3, [r7, #0]
 8009892:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8009894:	687a      	ldr	r2, [r7, #4]
 8009896:	683b      	ldr	r3, [r7, #0]
 8009898:	781b      	ldrb	r3, [r3, #0]
 800989a:	009b      	lsls	r3, r3, #2
 800989c:	18d3      	adds	r3, r2, r3
 800989e:	881b      	ldrh	r3, [r3, #0]
 80098a0:	b29b      	uxth	r3, r3
 80098a2:	001a      	movs	r2, r3
 80098a4:	2340      	movs	r3, #64	; 0x40
 80098a6:	4013      	ands	r3, r2
 80098a8:	d100      	bne.n	80098ac <USB_EPStartXfer+0x734>
 80098aa:	e099      	b.n	80099e0 <USB_EPStartXfer+0x868>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	673b      	str	r3, [r7, #112]	; 0x70
 80098b0:	683b      	ldr	r3, [r7, #0]
 80098b2:	785b      	ldrb	r3, [r3, #1]
 80098b4:	2b00      	cmp	r3, #0
 80098b6:	d166      	bne.n	8009986 <USB_EPStartXfer+0x80e>
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	66bb      	str	r3, [r7, #104]	; 0x68
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	2250      	movs	r2, #80	; 0x50
 80098c0:	5a9b      	ldrh	r3, [r3, r2]
 80098c2:	b29b      	uxth	r3, r3
 80098c4:	001a      	movs	r2, r3
 80098c6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80098c8:	189b      	adds	r3, r3, r2
 80098ca:	66bb      	str	r3, [r7, #104]	; 0x68
 80098cc:	683b      	ldr	r3, [r7, #0]
 80098ce:	781b      	ldrb	r3, [r3, #0]
 80098d0:	00da      	lsls	r2, r3, #3
 80098d2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80098d4:	18d3      	adds	r3, r2, r3
 80098d6:	4ad0      	ldr	r2, [pc, #832]	; (8009c18 <USB_EPStartXfer+0xaa0>)
 80098d8:	4694      	mov	ip, r2
 80098da:	4463      	add	r3, ip
 80098dc:	667b      	str	r3, [r7, #100]	; 0x64
 80098de:	1d7b      	adds	r3, r7, #5
 80098e0:	33ff      	adds	r3, #255	; 0xff
 80098e2:	681b      	ldr	r3, [r3, #0]
 80098e4:	2b00      	cmp	r3, #0
 80098e6:	d110      	bne.n	800990a <USB_EPStartXfer+0x792>
 80098e8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80098ea:	881b      	ldrh	r3, [r3, #0]
 80098ec:	b29b      	uxth	r3, r3
 80098ee:	4acb      	ldr	r2, [pc, #812]	; (8009c1c <USB_EPStartXfer+0xaa4>)
 80098f0:	4013      	ands	r3, r2
 80098f2:	b29a      	uxth	r2, r3
 80098f4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80098f6:	801a      	strh	r2, [r3, #0]
 80098f8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80098fa:	881b      	ldrh	r3, [r3, #0]
 80098fc:	b29b      	uxth	r3, r3
 80098fe:	4ac8      	ldr	r2, [pc, #800]	; (8009c20 <USB_EPStartXfer+0xaa8>)
 8009900:	4313      	orrs	r3, r2
 8009902:	b29a      	uxth	r2, r3
 8009904:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009906:	801a      	strh	r2, [r3, #0]
 8009908:	e058      	b.n	80099bc <USB_EPStartXfer+0x844>
 800990a:	1d7b      	adds	r3, r7, #5
 800990c:	33ff      	adds	r3, #255	; 0xff
 800990e:	681b      	ldr	r3, [r3, #0]
 8009910:	2b3e      	cmp	r3, #62	; 0x3e
 8009912:	d81a      	bhi.n	800994a <USB_EPStartXfer+0x7d2>
 8009914:	1d7b      	adds	r3, r7, #5
 8009916:	33ff      	adds	r3, #255	; 0xff
 8009918:	681b      	ldr	r3, [r3, #0]
 800991a:	085b      	lsrs	r3, r3, #1
 800991c:	21f0      	movs	r1, #240	; 0xf0
 800991e:	187a      	adds	r2, r7, r1
 8009920:	6013      	str	r3, [r2, #0]
 8009922:	1d7b      	adds	r3, r7, #5
 8009924:	33ff      	adds	r3, #255	; 0xff
 8009926:	681b      	ldr	r3, [r3, #0]
 8009928:	2201      	movs	r2, #1
 800992a:	4013      	ands	r3, r2
 800992c:	d004      	beq.n	8009938 <USB_EPStartXfer+0x7c0>
 800992e:	187b      	adds	r3, r7, r1
 8009930:	681b      	ldr	r3, [r3, #0]
 8009932:	3301      	adds	r3, #1
 8009934:	187a      	adds	r2, r7, r1
 8009936:	6013      	str	r3, [r2, #0]
 8009938:	23f0      	movs	r3, #240	; 0xf0
 800993a:	18fb      	adds	r3, r7, r3
 800993c:	681b      	ldr	r3, [r3, #0]
 800993e:	b29b      	uxth	r3, r3
 8009940:	029b      	lsls	r3, r3, #10
 8009942:	b29a      	uxth	r2, r3
 8009944:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009946:	801a      	strh	r2, [r3, #0]
 8009948:	e038      	b.n	80099bc <USB_EPStartXfer+0x844>
 800994a:	1d7b      	adds	r3, r7, #5
 800994c:	33ff      	adds	r3, #255	; 0xff
 800994e:	681b      	ldr	r3, [r3, #0]
 8009950:	095b      	lsrs	r3, r3, #5
 8009952:	21f0      	movs	r1, #240	; 0xf0
 8009954:	187a      	adds	r2, r7, r1
 8009956:	6013      	str	r3, [r2, #0]
 8009958:	1d7b      	adds	r3, r7, #5
 800995a:	33ff      	adds	r3, #255	; 0xff
 800995c:	681b      	ldr	r3, [r3, #0]
 800995e:	221f      	movs	r2, #31
 8009960:	4013      	ands	r3, r2
 8009962:	d104      	bne.n	800996e <USB_EPStartXfer+0x7f6>
 8009964:	187b      	adds	r3, r7, r1
 8009966:	681b      	ldr	r3, [r3, #0]
 8009968:	3b01      	subs	r3, #1
 800996a:	187a      	adds	r2, r7, r1
 800996c:	6013      	str	r3, [r2, #0]
 800996e:	23f0      	movs	r3, #240	; 0xf0
 8009970:	18fb      	adds	r3, r7, r3
 8009972:	681b      	ldr	r3, [r3, #0]
 8009974:	b29b      	uxth	r3, r3
 8009976:	029b      	lsls	r3, r3, #10
 8009978:	b29b      	uxth	r3, r3
 800997a:	4aa9      	ldr	r2, [pc, #676]	; (8009c20 <USB_EPStartXfer+0xaa8>)
 800997c:	4313      	orrs	r3, r2
 800997e:	b29a      	uxth	r2, r3
 8009980:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009982:	801a      	strh	r2, [r3, #0]
 8009984:	e01a      	b.n	80099bc <USB_EPStartXfer+0x844>
 8009986:	683b      	ldr	r3, [r7, #0]
 8009988:	785b      	ldrb	r3, [r3, #1]
 800998a:	2b01      	cmp	r3, #1
 800998c:	d116      	bne.n	80099bc <USB_EPStartXfer+0x844>
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	2250      	movs	r2, #80	; 0x50
 8009992:	5a9b      	ldrh	r3, [r3, r2]
 8009994:	b29b      	uxth	r3, r3
 8009996:	001a      	movs	r2, r3
 8009998:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800999a:	189b      	adds	r3, r3, r2
 800999c:	673b      	str	r3, [r7, #112]	; 0x70
 800999e:	683b      	ldr	r3, [r7, #0]
 80099a0:	781b      	ldrb	r3, [r3, #0]
 80099a2:	00da      	lsls	r2, r3, #3
 80099a4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80099a6:	18d3      	adds	r3, r2, r3
 80099a8:	4a9b      	ldr	r2, [pc, #620]	; (8009c18 <USB_EPStartXfer+0xaa0>)
 80099aa:	4694      	mov	ip, r2
 80099ac:	4463      	add	r3, ip
 80099ae:	66fb      	str	r3, [r7, #108]	; 0x6c
 80099b0:	1d7b      	adds	r3, r7, #5
 80099b2:	33ff      	adds	r3, #255	; 0xff
 80099b4:	681b      	ldr	r3, [r3, #0]
 80099b6:	b29a      	uxth	r2, r3
 80099b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80099ba:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 80099bc:	2076      	movs	r0, #118	; 0x76
 80099be:	183b      	adds	r3, r7, r0
 80099c0:	683a      	ldr	r2, [r7, #0]
 80099c2:	8952      	ldrh	r2, [r2, #10]
 80099c4:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80099c6:	683b      	ldr	r3, [r7, #0]
 80099c8:	6959      	ldr	r1, [r3, #20]
 80099ca:	1d7b      	adds	r3, r7, #5
 80099cc:	33ff      	adds	r3, #255	; 0xff
 80099ce:	681b      	ldr	r3, [r3, #0]
 80099d0:	b29c      	uxth	r4, r3
 80099d2:	183b      	adds	r3, r7, r0
 80099d4:	881a      	ldrh	r2, [r3, #0]
 80099d6:	6878      	ldr	r0, [r7, #4]
 80099d8:	0023      	movs	r3, r4
 80099da:	f000 fdc1 	bl	800a560 <USB_WritePMA>
 80099de:	e0a0      	b.n	8009b22 <USB_EPStartXfer+0x9aa>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80099e0:	683b      	ldr	r3, [r7, #0]
 80099e2:	785b      	ldrb	r3, [r3, #1]
 80099e4:	2b00      	cmp	r3, #0
 80099e6:	d166      	bne.n	8009ab6 <USB_EPStartXfer+0x93e>
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	67fb      	str	r3, [r7, #124]	; 0x7c
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	2250      	movs	r2, #80	; 0x50
 80099f0:	5a9b      	ldrh	r3, [r3, r2]
 80099f2:	b29b      	uxth	r3, r3
 80099f4:	001a      	movs	r2, r3
 80099f6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80099f8:	189b      	adds	r3, r3, r2
 80099fa:	67fb      	str	r3, [r7, #124]	; 0x7c
 80099fc:	683b      	ldr	r3, [r7, #0]
 80099fe:	781b      	ldrb	r3, [r3, #0]
 8009a00:	00da      	lsls	r2, r3, #3
 8009a02:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8009a04:	18d3      	adds	r3, r2, r3
 8009a06:	4a87      	ldr	r2, [pc, #540]	; (8009c24 <USB_EPStartXfer+0xaac>)
 8009a08:	4694      	mov	ip, r2
 8009a0a:	4463      	add	r3, ip
 8009a0c:	67bb      	str	r3, [r7, #120]	; 0x78
 8009a0e:	1d7b      	adds	r3, r7, #5
 8009a10:	33ff      	adds	r3, #255	; 0xff
 8009a12:	681b      	ldr	r3, [r3, #0]
 8009a14:	2b00      	cmp	r3, #0
 8009a16:	d110      	bne.n	8009a3a <USB_EPStartXfer+0x8c2>
 8009a18:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009a1a:	881b      	ldrh	r3, [r3, #0]
 8009a1c:	b29b      	uxth	r3, r3
 8009a1e:	4a7f      	ldr	r2, [pc, #508]	; (8009c1c <USB_EPStartXfer+0xaa4>)
 8009a20:	4013      	ands	r3, r2
 8009a22:	b29a      	uxth	r2, r3
 8009a24:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009a26:	801a      	strh	r2, [r3, #0]
 8009a28:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009a2a:	881b      	ldrh	r3, [r3, #0]
 8009a2c:	b29b      	uxth	r3, r3
 8009a2e:	4a7c      	ldr	r2, [pc, #496]	; (8009c20 <USB_EPStartXfer+0xaa8>)
 8009a30:	4313      	orrs	r3, r2
 8009a32:	b29a      	uxth	r2, r3
 8009a34:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009a36:	801a      	strh	r2, [r3, #0]
 8009a38:	e062      	b.n	8009b00 <USB_EPStartXfer+0x988>
 8009a3a:	1d7b      	adds	r3, r7, #5
 8009a3c:	33ff      	adds	r3, #255	; 0xff
 8009a3e:	681b      	ldr	r3, [r3, #0]
 8009a40:	2b3e      	cmp	r3, #62	; 0x3e
 8009a42:	d81a      	bhi.n	8009a7a <USB_EPStartXfer+0x902>
 8009a44:	1d7b      	adds	r3, r7, #5
 8009a46:	33ff      	adds	r3, #255	; 0xff
 8009a48:	681b      	ldr	r3, [r3, #0]
 8009a4a:	085b      	lsrs	r3, r3, #1
 8009a4c:	21ec      	movs	r1, #236	; 0xec
 8009a4e:	187a      	adds	r2, r7, r1
 8009a50:	6013      	str	r3, [r2, #0]
 8009a52:	1d7b      	adds	r3, r7, #5
 8009a54:	33ff      	adds	r3, #255	; 0xff
 8009a56:	681b      	ldr	r3, [r3, #0]
 8009a58:	2201      	movs	r2, #1
 8009a5a:	4013      	ands	r3, r2
 8009a5c:	d004      	beq.n	8009a68 <USB_EPStartXfer+0x8f0>
 8009a5e:	187b      	adds	r3, r7, r1
 8009a60:	681b      	ldr	r3, [r3, #0]
 8009a62:	3301      	adds	r3, #1
 8009a64:	187a      	adds	r2, r7, r1
 8009a66:	6013      	str	r3, [r2, #0]
 8009a68:	23ec      	movs	r3, #236	; 0xec
 8009a6a:	18fb      	adds	r3, r7, r3
 8009a6c:	681b      	ldr	r3, [r3, #0]
 8009a6e:	b29b      	uxth	r3, r3
 8009a70:	029b      	lsls	r3, r3, #10
 8009a72:	b29a      	uxth	r2, r3
 8009a74:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009a76:	801a      	strh	r2, [r3, #0]
 8009a78:	e042      	b.n	8009b00 <USB_EPStartXfer+0x988>
 8009a7a:	1d7b      	adds	r3, r7, #5
 8009a7c:	33ff      	adds	r3, #255	; 0xff
 8009a7e:	681b      	ldr	r3, [r3, #0]
 8009a80:	095b      	lsrs	r3, r3, #5
 8009a82:	21ec      	movs	r1, #236	; 0xec
 8009a84:	187a      	adds	r2, r7, r1
 8009a86:	6013      	str	r3, [r2, #0]
 8009a88:	1d7b      	adds	r3, r7, #5
 8009a8a:	33ff      	adds	r3, #255	; 0xff
 8009a8c:	681b      	ldr	r3, [r3, #0]
 8009a8e:	221f      	movs	r2, #31
 8009a90:	4013      	ands	r3, r2
 8009a92:	d104      	bne.n	8009a9e <USB_EPStartXfer+0x926>
 8009a94:	187b      	adds	r3, r7, r1
 8009a96:	681b      	ldr	r3, [r3, #0]
 8009a98:	3b01      	subs	r3, #1
 8009a9a:	187a      	adds	r2, r7, r1
 8009a9c:	6013      	str	r3, [r2, #0]
 8009a9e:	23ec      	movs	r3, #236	; 0xec
 8009aa0:	18fb      	adds	r3, r7, r3
 8009aa2:	681b      	ldr	r3, [r3, #0]
 8009aa4:	b29b      	uxth	r3, r3
 8009aa6:	029b      	lsls	r3, r3, #10
 8009aa8:	b29b      	uxth	r3, r3
 8009aaa:	4a5d      	ldr	r2, [pc, #372]	; (8009c20 <USB_EPStartXfer+0xaa8>)
 8009aac:	4313      	orrs	r3, r2
 8009aae:	b29a      	uxth	r2, r3
 8009ab0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009ab2:	801a      	strh	r2, [r3, #0]
 8009ab4:	e024      	b.n	8009b00 <USB_EPStartXfer+0x988>
 8009ab6:	683b      	ldr	r3, [r7, #0]
 8009ab8:	785b      	ldrb	r3, [r3, #1]
 8009aba:	2b01      	cmp	r3, #1
 8009abc:	d120      	bne.n	8009b00 <USB_EPStartXfer+0x988>
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	2184      	movs	r1, #132	; 0x84
 8009ac2:	187a      	adds	r2, r7, r1
 8009ac4:	6013      	str	r3, [r2, #0]
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	2250      	movs	r2, #80	; 0x50
 8009aca:	5a9b      	ldrh	r3, [r3, r2]
 8009acc:	b29b      	uxth	r3, r3
 8009ace:	001a      	movs	r2, r3
 8009ad0:	187b      	adds	r3, r7, r1
 8009ad2:	681b      	ldr	r3, [r3, #0]
 8009ad4:	189b      	adds	r3, r3, r2
 8009ad6:	187a      	adds	r2, r7, r1
 8009ad8:	6013      	str	r3, [r2, #0]
 8009ada:	683b      	ldr	r3, [r7, #0]
 8009adc:	781b      	ldrb	r3, [r3, #0]
 8009ade:	00da      	lsls	r2, r3, #3
 8009ae0:	187b      	adds	r3, r7, r1
 8009ae2:	681b      	ldr	r3, [r3, #0]
 8009ae4:	18d3      	adds	r3, r2, r3
 8009ae6:	4a4f      	ldr	r2, [pc, #316]	; (8009c24 <USB_EPStartXfer+0xaac>)
 8009ae8:	4694      	mov	ip, r2
 8009aea:	4463      	add	r3, ip
 8009aec:	2180      	movs	r1, #128	; 0x80
 8009aee:	187a      	adds	r2, r7, r1
 8009af0:	6013      	str	r3, [r2, #0]
 8009af2:	1d7b      	adds	r3, r7, #5
 8009af4:	33ff      	adds	r3, #255	; 0xff
 8009af6:	681b      	ldr	r3, [r3, #0]
 8009af8:	b29a      	uxth	r2, r3
 8009afa:	187b      	adds	r3, r7, r1
 8009afc:	681b      	ldr	r3, [r3, #0]
 8009afe:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8009b00:	2076      	movs	r0, #118	; 0x76
 8009b02:	183b      	adds	r3, r7, r0
 8009b04:	683a      	ldr	r2, [r7, #0]
 8009b06:	8912      	ldrh	r2, [r2, #8]
 8009b08:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009b0a:	683b      	ldr	r3, [r7, #0]
 8009b0c:	6959      	ldr	r1, [r3, #20]
 8009b0e:	1d7b      	adds	r3, r7, #5
 8009b10:	33ff      	adds	r3, #255	; 0xff
 8009b12:	681b      	ldr	r3, [r3, #0]
 8009b14:	b29c      	uxth	r4, r3
 8009b16:	183b      	adds	r3, r7, r0
 8009b18:	881a      	ldrh	r2, [r3, #0]
 8009b1a:	6878      	ldr	r0, [r7, #4]
 8009b1c:	0023      	movs	r3, r4
 8009b1e:	f000 fd1f 	bl	800a560 <USB_WritePMA>
        }
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8009b22:	687a      	ldr	r2, [r7, #4]
 8009b24:	683b      	ldr	r3, [r7, #0]
 8009b26:	781b      	ldrb	r3, [r3, #0]
 8009b28:	009b      	lsls	r3, r3, #2
 8009b2a:	18d3      	adds	r3, r2, r3
 8009b2c:	881b      	ldrh	r3, [r3, #0]
 8009b2e:	b29a      	uxth	r2, r3
 8009b30:	200a      	movs	r0, #10
 8009b32:	183b      	adds	r3, r7, r0
 8009b34:	493c      	ldr	r1, [pc, #240]	; (8009c28 <USB_EPStartXfer+0xab0>)
 8009b36:	400a      	ands	r2, r1
 8009b38:	801a      	strh	r2, [r3, #0]
 8009b3a:	183b      	adds	r3, r7, r0
 8009b3c:	183a      	adds	r2, r7, r0
 8009b3e:	8812      	ldrh	r2, [r2, #0]
 8009b40:	2110      	movs	r1, #16
 8009b42:	404a      	eors	r2, r1
 8009b44:	801a      	strh	r2, [r3, #0]
 8009b46:	183b      	adds	r3, r7, r0
 8009b48:	183a      	adds	r2, r7, r0
 8009b4a:	8812      	ldrh	r2, [r2, #0]
 8009b4c:	2120      	movs	r1, #32
 8009b4e:	404a      	eors	r2, r1
 8009b50:	801a      	strh	r2, [r3, #0]
 8009b52:	687a      	ldr	r2, [r7, #4]
 8009b54:	683b      	ldr	r3, [r7, #0]
 8009b56:	781b      	ldrb	r3, [r3, #0]
 8009b58:	009b      	lsls	r3, r3, #2
 8009b5a:	18d3      	adds	r3, r2, r3
 8009b5c:	183a      	adds	r2, r7, r0
 8009b5e:	8812      	ldrh	r2, [r2, #0]
 8009b60:	4932      	ldr	r1, [pc, #200]	; (8009c2c <USB_EPStartXfer+0xab4>)
 8009b62:	430a      	orrs	r2, r1
 8009b64:	b292      	uxth	r2, r2
 8009b66:	801a      	strh	r2, [r3, #0]
 8009b68:	f000 fbaf 	bl	800a2ca <USB_EPStartXfer+0x1152>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8009b6c:	683b      	ldr	r3, [r7, #0]
 8009b6e:	7b1b      	ldrb	r3, [r3, #12]
 8009b70:	2b00      	cmp	r3, #0
 8009b72:	d000      	beq.n	8009b76 <USB_EPStartXfer+0x9fe>
 8009b74:	e09e      	b.n	8009cb4 <USB_EPStartXfer+0xb3c>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8009b76:	683b      	ldr	r3, [r7, #0]
 8009b78:	699a      	ldr	r2, [r3, #24]
 8009b7a:	683b      	ldr	r3, [r7, #0]
 8009b7c:	691b      	ldr	r3, [r3, #16]
 8009b7e:	429a      	cmp	r2, r3
 8009b80:	d90d      	bls.n	8009b9e <USB_EPStartXfer+0xa26>
      {
        len = ep->maxpacket;
 8009b82:	683b      	ldr	r3, [r7, #0]
 8009b84:	691b      	ldr	r3, [r3, #16]
 8009b86:	1d7a      	adds	r2, r7, #5
 8009b88:	32ff      	adds	r2, #255	; 0xff
 8009b8a:	6013      	str	r3, [r2, #0]
        ep->xfer_len -= len;
 8009b8c:	683b      	ldr	r3, [r7, #0]
 8009b8e:	699a      	ldr	r2, [r3, #24]
 8009b90:	1d7b      	adds	r3, r7, #5
 8009b92:	33ff      	adds	r3, #255	; 0xff
 8009b94:	681b      	ldr	r3, [r3, #0]
 8009b96:	1ad2      	subs	r2, r2, r3
 8009b98:	683b      	ldr	r3, [r7, #0]
 8009b9a:	619a      	str	r2, [r3, #24]
 8009b9c:	e007      	b.n	8009bae <USB_EPStartXfer+0xa36>
      }
      else
      {
        len = ep->xfer_len;
 8009b9e:	683b      	ldr	r3, [r7, #0]
 8009ba0:	699b      	ldr	r3, [r3, #24]
 8009ba2:	1d7a      	adds	r2, r7, #5
 8009ba4:	32ff      	adds	r2, #255	; 0xff
 8009ba6:	6013      	str	r3, [r2, #0]
        ep->xfer_len = 0U;
 8009ba8:	683b      	ldr	r3, [r7, #0]
 8009baa:	2200      	movs	r2, #0
 8009bac:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	2190      	movs	r1, #144	; 0x90
 8009bb2:	187a      	adds	r2, r7, r1
 8009bb4:	6013      	str	r3, [r2, #0]
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	2250      	movs	r2, #80	; 0x50
 8009bba:	5a9b      	ldrh	r3, [r3, r2]
 8009bbc:	b29b      	uxth	r3, r3
 8009bbe:	001a      	movs	r2, r3
 8009bc0:	187b      	adds	r3, r7, r1
 8009bc2:	681b      	ldr	r3, [r3, #0]
 8009bc4:	189b      	adds	r3, r3, r2
 8009bc6:	187a      	adds	r2, r7, r1
 8009bc8:	6013      	str	r3, [r2, #0]
 8009bca:	683b      	ldr	r3, [r7, #0]
 8009bcc:	781b      	ldrb	r3, [r3, #0]
 8009bce:	00da      	lsls	r2, r3, #3
 8009bd0:	187b      	adds	r3, r7, r1
 8009bd2:	681b      	ldr	r3, [r3, #0]
 8009bd4:	18d3      	adds	r3, r2, r3
 8009bd6:	4a10      	ldr	r2, [pc, #64]	; (8009c18 <USB_EPStartXfer+0xaa0>)
 8009bd8:	4694      	mov	ip, r2
 8009bda:	4463      	add	r3, ip
 8009bdc:	218c      	movs	r1, #140	; 0x8c
 8009bde:	187a      	adds	r2, r7, r1
 8009be0:	6013      	str	r3, [r2, #0]
 8009be2:	1d7b      	adds	r3, r7, #5
 8009be4:	33ff      	adds	r3, #255	; 0xff
 8009be6:	681b      	ldr	r3, [r3, #0]
 8009be8:	2b00      	cmp	r3, #0
 8009bea:	d121      	bne.n	8009c30 <USB_EPStartXfer+0xab8>
 8009bec:	187b      	adds	r3, r7, r1
 8009bee:	681b      	ldr	r3, [r3, #0]
 8009bf0:	881b      	ldrh	r3, [r3, #0]
 8009bf2:	b29b      	uxth	r3, r3
 8009bf4:	4a09      	ldr	r2, [pc, #36]	; (8009c1c <USB_EPStartXfer+0xaa4>)
 8009bf6:	4013      	ands	r3, r2
 8009bf8:	b29a      	uxth	r2, r3
 8009bfa:	187b      	adds	r3, r7, r1
 8009bfc:	681b      	ldr	r3, [r3, #0]
 8009bfe:	801a      	strh	r2, [r3, #0]
 8009c00:	187b      	adds	r3, r7, r1
 8009c02:	681b      	ldr	r3, [r3, #0]
 8009c04:	881b      	ldrh	r3, [r3, #0]
 8009c06:	b29b      	uxth	r3, r3
 8009c08:	4a05      	ldr	r2, [pc, #20]	; (8009c20 <USB_EPStartXfer+0xaa8>)
 8009c0a:	4313      	orrs	r3, r2
 8009c0c:	b29a      	uxth	r2, r3
 8009c0e:	187b      	adds	r3, r7, r1
 8009c10:	681b      	ldr	r3, [r3, #0]
 8009c12:	801a      	strh	r2, [r3, #0]
 8009c14:	e334      	b.n	800a280 <USB_EPStartXfer+0x1108>
 8009c16:	46c0      	nop			; (mov r8, r8)
 8009c18:	00000406 	.word	0x00000406
 8009c1c:	ffff83ff 	.word	0xffff83ff
 8009c20:	ffff8000 	.word	0xffff8000
 8009c24:	00000402 	.word	0x00000402
 8009c28:	ffff8fbf 	.word	0xffff8fbf
 8009c2c:	ffff8080 	.word	0xffff8080
 8009c30:	1d7b      	adds	r3, r7, #5
 8009c32:	33ff      	adds	r3, #255	; 0xff
 8009c34:	681b      	ldr	r3, [r3, #0]
 8009c36:	2b3e      	cmp	r3, #62	; 0x3e
 8009c38:	d81c      	bhi.n	8009c74 <USB_EPStartXfer+0xafc>
 8009c3a:	1d7b      	adds	r3, r7, #5
 8009c3c:	33ff      	adds	r3, #255	; 0xff
 8009c3e:	681b      	ldr	r3, [r3, #0]
 8009c40:	085b      	lsrs	r3, r3, #1
 8009c42:	21e8      	movs	r1, #232	; 0xe8
 8009c44:	187a      	adds	r2, r7, r1
 8009c46:	6013      	str	r3, [r2, #0]
 8009c48:	1d7b      	adds	r3, r7, #5
 8009c4a:	33ff      	adds	r3, #255	; 0xff
 8009c4c:	681b      	ldr	r3, [r3, #0]
 8009c4e:	2201      	movs	r2, #1
 8009c50:	4013      	ands	r3, r2
 8009c52:	d004      	beq.n	8009c5e <USB_EPStartXfer+0xae6>
 8009c54:	187b      	adds	r3, r7, r1
 8009c56:	681b      	ldr	r3, [r3, #0]
 8009c58:	3301      	adds	r3, #1
 8009c5a:	187a      	adds	r2, r7, r1
 8009c5c:	6013      	str	r3, [r2, #0]
 8009c5e:	23e8      	movs	r3, #232	; 0xe8
 8009c60:	18fb      	adds	r3, r7, r3
 8009c62:	681b      	ldr	r3, [r3, #0]
 8009c64:	b29b      	uxth	r3, r3
 8009c66:	029b      	lsls	r3, r3, #10
 8009c68:	b29a      	uxth	r2, r3
 8009c6a:	238c      	movs	r3, #140	; 0x8c
 8009c6c:	18fb      	adds	r3, r7, r3
 8009c6e:	681b      	ldr	r3, [r3, #0]
 8009c70:	801a      	strh	r2, [r3, #0]
 8009c72:	e305      	b.n	800a280 <USB_EPStartXfer+0x1108>
 8009c74:	1d7b      	adds	r3, r7, #5
 8009c76:	33ff      	adds	r3, #255	; 0xff
 8009c78:	681b      	ldr	r3, [r3, #0]
 8009c7a:	095b      	lsrs	r3, r3, #5
 8009c7c:	21e8      	movs	r1, #232	; 0xe8
 8009c7e:	187a      	adds	r2, r7, r1
 8009c80:	6013      	str	r3, [r2, #0]
 8009c82:	1d7b      	adds	r3, r7, #5
 8009c84:	33ff      	adds	r3, #255	; 0xff
 8009c86:	681b      	ldr	r3, [r3, #0]
 8009c88:	221f      	movs	r2, #31
 8009c8a:	4013      	ands	r3, r2
 8009c8c:	d104      	bne.n	8009c98 <USB_EPStartXfer+0xb20>
 8009c8e:	187b      	adds	r3, r7, r1
 8009c90:	681b      	ldr	r3, [r3, #0]
 8009c92:	3b01      	subs	r3, #1
 8009c94:	187a      	adds	r2, r7, r1
 8009c96:	6013      	str	r3, [r2, #0]
 8009c98:	23e8      	movs	r3, #232	; 0xe8
 8009c9a:	18fb      	adds	r3, r7, r3
 8009c9c:	681b      	ldr	r3, [r3, #0]
 8009c9e:	b29b      	uxth	r3, r3
 8009ca0:	029b      	lsls	r3, r3, #10
 8009ca2:	b29b      	uxth	r3, r3
 8009ca4:	4aca      	ldr	r2, [pc, #808]	; (8009fd0 <USB_EPStartXfer+0xe58>)
 8009ca6:	4313      	orrs	r3, r2
 8009ca8:	b29a      	uxth	r2, r3
 8009caa:	238c      	movs	r3, #140	; 0x8c
 8009cac:	18fb      	adds	r3, r7, r3
 8009cae:	681b      	ldr	r3, [r3, #0]
 8009cb0:	801a      	strh	r2, [r3, #0]
 8009cb2:	e2e5      	b.n	800a280 <USB_EPStartXfer+0x1108>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8009cb4:	683b      	ldr	r3, [r7, #0]
 8009cb6:	78db      	ldrb	r3, [r3, #3]
 8009cb8:	2b02      	cmp	r3, #2
 8009cba:	d000      	beq.n	8009cbe <USB_EPStartXfer+0xb46>
 8009cbc:	e16f      	b.n	8009f9e <USB_EPStartXfer+0xe26>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8009cbe:	683b      	ldr	r3, [r7, #0]
 8009cc0:	785b      	ldrb	r3, [r3, #1]
 8009cc2:	2b00      	cmp	r3, #0
 8009cc4:	d16f      	bne.n	8009da6 <USB_EPStartXfer+0xc2e>
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	21ac      	movs	r1, #172	; 0xac
 8009cca:	187a      	adds	r2, r7, r1
 8009ccc:	6013      	str	r3, [r2, #0]
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	2250      	movs	r2, #80	; 0x50
 8009cd2:	5a9b      	ldrh	r3, [r3, r2]
 8009cd4:	b29b      	uxth	r3, r3
 8009cd6:	001a      	movs	r2, r3
 8009cd8:	187b      	adds	r3, r7, r1
 8009cda:	681b      	ldr	r3, [r3, #0]
 8009cdc:	189b      	adds	r3, r3, r2
 8009cde:	187a      	adds	r2, r7, r1
 8009ce0:	6013      	str	r3, [r2, #0]
 8009ce2:	683b      	ldr	r3, [r7, #0]
 8009ce4:	781b      	ldrb	r3, [r3, #0]
 8009ce6:	00da      	lsls	r2, r3, #3
 8009ce8:	187b      	adds	r3, r7, r1
 8009cea:	681b      	ldr	r3, [r3, #0]
 8009cec:	18d3      	adds	r3, r2, r3
 8009cee:	4ab9      	ldr	r2, [pc, #740]	; (8009fd4 <USB_EPStartXfer+0xe5c>)
 8009cf0:	4694      	mov	ip, r2
 8009cf2:	4463      	add	r3, ip
 8009cf4:	21a8      	movs	r1, #168	; 0xa8
 8009cf6:	187a      	adds	r2, r7, r1
 8009cf8:	6013      	str	r3, [r2, #0]
 8009cfa:	683b      	ldr	r3, [r7, #0]
 8009cfc:	691b      	ldr	r3, [r3, #16]
 8009cfe:	2b00      	cmp	r3, #0
 8009d00:	d114      	bne.n	8009d2c <USB_EPStartXfer+0xbb4>
 8009d02:	187b      	adds	r3, r7, r1
 8009d04:	681b      	ldr	r3, [r3, #0]
 8009d06:	881b      	ldrh	r3, [r3, #0]
 8009d08:	b29b      	uxth	r3, r3
 8009d0a:	4ab3      	ldr	r2, [pc, #716]	; (8009fd8 <USB_EPStartXfer+0xe60>)
 8009d0c:	4013      	ands	r3, r2
 8009d0e:	b29a      	uxth	r2, r3
 8009d10:	187b      	adds	r3, r7, r1
 8009d12:	681b      	ldr	r3, [r3, #0]
 8009d14:	801a      	strh	r2, [r3, #0]
 8009d16:	187b      	adds	r3, r7, r1
 8009d18:	681b      	ldr	r3, [r3, #0]
 8009d1a:	881b      	ldrh	r3, [r3, #0]
 8009d1c:	b29b      	uxth	r3, r3
 8009d1e:	4aac      	ldr	r2, [pc, #688]	; (8009fd0 <USB_EPStartXfer+0xe58>)
 8009d20:	4313      	orrs	r3, r2
 8009d22:	b29a      	uxth	r2, r3
 8009d24:	187b      	adds	r3, r7, r1
 8009d26:	681b      	ldr	r3, [r3, #0]
 8009d28:	801a      	strh	r2, [r3, #0]
 8009d2a:	e060      	b.n	8009dee <USB_EPStartXfer+0xc76>
 8009d2c:	683b      	ldr	r3, [r7, #0]
 8009d2e:	691b      	ldr	r3, [r3, #16]
 8009d30:	2b3e      	cmp	r3, #62	; 0x3e
 8009d32:	d81a      	bhi.n	8009d6a <USB_EPStartXfer+0xbf2>
 8009d34:	683b      	ldr	r3, [r7, #0]
 8009d36:	691b      	ldr	r3, [r3, #16]
 8009d38:	085b      	lsrs	r3, r3, #1
 8009d3a:	21e4      	movs	r1, #228	; 0xe4
 8009d3c:	187a      	adds	r2, r7, r1
 8009d3e:	6013      	str	r3, [r2, #0]
 8009d40:	683b      	ldr	r3, [r7, #0]
 8009d42:	691b      	ldr	r3, [r3, #16]
 8009d44:	2201      	movs	r2, #1
 8009d46:	4013      	ands	r3, r2
 8009d48:	d004      	beq.n	8009d54 <USB_EPStartXfer+0xbdc>
 8009d4a:	187b      	adds	r3, r7, r1
 8009d4c:	681b      	ldr	r3, [r3, #0]
 8009d4e:	3301      	adds	r3, #1
 8009d50:	187a      	adds	r2, r7, r1
 8009d52:	6013      	str	r3, [r2, #0]
 8009d54:	23e4      	movs	r3, #228	; 0xe4
 8009d56:	18fb      	adds	r3, r7, r3
 8009d58:	681b      	ldr	r3, [r3, #0]
 8009d5a:	b29b      	uxth	r3, r3
 8009d5c:	029b      	lsls	r3, r3, #10
 8009d5e:	b29a      	uxth	r2, r3
 8009d60:	23a8      	movs	r3, #168	; 0xa8
 8009d62:	18fb      	adds	r3, r7, r3
 8009d64:	681b      	ldr	r3, [r3, #0]
 8009d66:	801a      	strh	r2, [r3, #0]
 8009d68:	e041      	b.n	8009dee <USB_EPStartXfer+0xc76>
 8009d6a:	683b      	ldr	r3, [r7, #0]
 8009d6c:	691b      	ldr	r3, [r3, #16]
 8009d6e:	095b      	lsrs	r3, r3, #5
 8009d70:	21e4      	movs	r1, #228	; 0xe4
 8009d72:	187a      	adds	r2, r7, r1
 8009d74:	6013      	str	r3, [r2, #0]
 8009d76:	683b      	ldr	r3, [r7, #0]
 8009d78:	691b      	ldr	r3, [r3, #16]
 8009d7a:	221f      	movs	r2, #31
 8009d7c:	4013      	ands	r3, r2
 8009d7e:	d104      	bne.n	8009d8a <USB_EPStartXfer+0xc12>
 8009d80:	187b      	adds	r3, r7, r1
 8009d82:	681b      	ldr	r3, [r3, #0]
 8009d84:	3b01      	subs	r3, #1
 8009d86:	187a      	adds	r2, r7, r1
 8009d88:	6013      	str	r3, [r2, #0]
 8009d8a:	23e4      	movs	r3, #228	; 0xe4
 8009d8c:	18fb      	adds	r3, r7, r3
 8009d8e:	681b      	ldr	r3, [r3, #0]
 8009d90:	b29b      	uxth	r3, r3
 8009d92:	029b      	lsls	r3, r3, #10
 8009d94:	b29b      	uxth	r3, r3
 8009d96:	4a8e      	ldr	r2, [pc, #568]	; (8009fd0 <USB_EPStartXfer+0xe58>)
 8009d98:	4313      	orrs	r3, r2
 8009d9a:	b29a      	uxth	r2, r3
 8009d9c:	23a8      	movs	r3, #168	; 0xa8
 8009d9e:	18fb      	adds	r3, r7, r3
 8009da0:	681b      	ldr	r3, [r3, #0]
 8009da2:	801a      	strh	r2, [r3, #0]
 8009da4:	e023      	b.n	8009dee <USB_EPStartXfer+0xc76>
 8009da6:	683b      	ldr	r3, [r7, #0]
 8009da8:	785b      	ldrb	r3, [r3, #1]
 8009daa:	2b01      	cmp	r3, #1
 8009dac:	d11f      	bne.n	8009dee <USB_EPStartXfer+0xc76>
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	21b4      	movs	r1, #180	; 0xb4
 8009db2:	187a      	adds	r2, r7, r1
 8009db4:	6013      	str	r3, [r2, #0]
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	2250      	movs	r2, #80	; 0x50
 8009dba:	5a9b      	ldrh	r3, [r3, r2]
 8009dbc:	b29b      	uxth	r3, r3
 8009dbe:	001a      	movs	r2, r3
 8009dc0:	187b      	adds	r3, r7, r1
 8009dc2:	681b      	ldr	r3, [r3, #0]
 8009dc4:	189b      	adds	r3, r3, r2
 8009dc6:	187a      	adds	r2, r7, r1
 8009dc8:	6013      	str	r3, [r2, #0]
 8009dca:	683b      	ldr	r3, [r7, #0]
 8009dcc:	781b      	ldrb	r3, [r3, #0]
 8009dce:	00da      	lsls	r2, r3, #3
 8009dd0:	187b      	adds	r3, r7, r1
 8009dd2:	681b      	ldr	r3, [r3, #0]
 8009dd4:	18d3      	adds	r3, r2, r3
 8009dd6:	4a7f      	ldr	r2, [pc, #508]	; (8009fd4 <USB_EPStartXfer+0xe5c>)
 8009dd8:	4694      	mov	ip, r2
 8009dda:	4463      	add	r3, ip
 8009ddc:	21b0      	movs	r1, #176	; 0xb0
 8009dde:	187a      	adds	r2, r7, r1
 8009de0:	6013      	str	r3, [r2, #0]
 8009de2:	683b      	ldr	r3, [r7, #0]
 8009de4:	691b      	ldr	r3, [r3, #16]
 8009de6:	b29a      	uxth	r2, r3
 8009de8:	187b      	adds	r3, r7, r1
 8009dea:	681b      	ldr	r3, [r3, #0]
 8009dec:	801a      	strh	r2, [r3, #0]
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	22a4      	movs	r2, #164	; 0xa4
 8009df2:	18ba      	adds	r2, r7, r2
 8009df4:	6013      	str	r3, [r2, #0]
 8009df6:	683b      	ldr	r3, [r7, #0]
 8009df8:	785b      	ldrb	r3, [r3, #1]
 8009dfa:	2b00      	cmp	r3, #0
 8009dfc:	d16f      	bne.n	8009ede <USB_EPStartXfer+0xd66>
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	219c      	movs	r1, #156	; 0x9c
 8009e02:	187a      	adds	r2, r7, r1
 8009e04:	6013      	str	r3, [r2, #0]
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	2250      	movs	r2, #80	; 0x50
 8009e0a:	5a9b      	ldrh	r3, [r3, r2]
 8009e0c:	b29b      	uxth	r3, r3
 8009e0e:	001a      	movs	r2, r3
 8009e10:	187b      	adds	r3, r7, r1
 8009e12:	681b      	ldr	r3, [r3, #0]
 8009e14:	189b      	adds	r3, r3, r2
 8009e16:	187a      	adds	r2, r7, r1
 8009e18:	6013      	str	r3, [r2, #0]
 8009e1a:	683b      	ldr	r3, [r7, #0]
 8009e1c:	781b      	ldrb	r3, [r3, #0]
 8009e1e:	00da      	lsls	r2, r3, #3
 8009e20:	187b      	adds	r3, r7, r1
 8009e22:	681b      	ldr	r3, [r3, #0]
 8009e24:	18d3      	adds	r3, r2, r3
 8009e26:	4a6d      	ldr	r2, [pc, #436]	; (8009fdc <USB_EPStartXfer+0xe64>)
 8009e28:	4694      	mov	ip, r2
 8009e2a:	4463      	add	r3, ip
 8009e2c:	2198      	movs	r1, #152	; 0x98
 8009e2e:	187a      	adds	r2, r7, r1
 8009e30:	6013      	str	r3, [r2, #0]
 8009e32:	683b      	ldr	r3, [r7, #0]
 8009e34:	691b      	ldr	r3, [r3, #16]
 8009e36:	2b00      	cmp	r3, #0
 8009e38:	d114      	bne.n	8009e64 <USB_EPStartXfer+0xcec>
 8009e3a:	187b      	adds	r3, r7, r1
 8009e3c:	681b      	ldr	r3, [r3, #0]
 8009e3e:	881b      	ldrh	r3, [r3, #0]
 8009e40:	b29b      	uxth	r3, r3
 8009e42:	4a65      	ldr	r2, [pc, #404]	; (8009fd8 <USB_EPStartXfer+0xe60>)
 8009e44:	4013      	ands	r3, r2
 8009e46:	b29a      	uxth	r2, r3
 8009e48:	187b      	adds	r3, r7, r1
 8009e4a:	681b      	ldr	r3, [r3, #0]
 8009e4c:	801a      	strh	r2, [r3, #0]
 8009e4e:	187b      	adds	r3, r7, r1
 8009e50:	681b      	ldr	r3, [r3, #0]
 8009e52:	881b      	ldrh	r3, [r3, #0]
 8009e54:	b29b      	uxth	r3, r3
 8009e56:	4a5e      	ldr	r2, [pc, #376]	; (8009fd0 <USB_EPStartXfer+0xe58>)
 8009e58:	4313      	orrs	r3, r2
 8009e5a:	b29a      	uxth	r2, r3
 8009e5c:	187b      	adds	r3, r7, r1
 8009e5e:	681b      	ldr	r3, [r3, #0]
 8009e60:	801a      	strh	r2, [r3, #0]
 8009e62:	e05d      	b.n	8009f20 <USB_EPStartXfer+0xda8>
 8009e64:	683b      	ldr	r3, [r7, #0]
 8009e66:	691b      	ldr	r3, [r3, #16]
 8009e68:	2b3e      	cmp	r3, #62	; 0x3e
 8009e6a:	d81a      	bhi.n	8009ea2 <USB_EPStartXfer+0xd2a>
 8009e6c:	683b      	ldr	r3, [r7, #0]
 8009e6e:	691b      	ldr	r3, [r3, #16]
 8009e70:	085b      	lsrs	r3, r3, #1
 8009e72:	21e0      	movs	r1, #224	; 0xe0
 8009e74:	187a      	adds	r2, r7, r1
 8009e76:	6013      	str	r3, [r2, #0]
 8009e78:	683b      	ldr	r3, [r7, #0]
 8009e7a:	691b      	ldr	r3, [r3, #16]
 8009e7c:	2201      	movs	r2, #1
 8009e7e:	4013      	ands	r3, r2
 8009e80:	d004      	beq.n	8009e8c <USB_EPStartXfer+0xd14>
 8009e82:	187b      	adds	r3, r7, r1
 8009e84:	681b      	ldr	r3, [r3, #0]
 8009e86:	3301      	adds	r3, #1
 8009e88:	187a      	adds	r2, r7, r1
 8009e8a:	6013      	str	r3, [r2, #0]
 8009e8c:	23e0      	movs	r3, #224	; 0xe0
 8009e8e:	18fb      	adds	r3, r7, r3
 8009e90:	681b      	ldr	r3, [r3, #0]
 8009e92:	b29b      	uxth	r3, r3
 8009e94:	029b      	lsls	r3, r3, #10
 8009e96:	b29a      	uxth	r2, r3
 8009e98:	2398      	movs	r3, #152	; 0x98
 8009e9a:	18fb      	adds	r3, r7, r3
 8009e9c:	681b      	ldr	r3, [r3, #0]
 8009e9e:	801a      	strh	r2, [r3, #0]
 8009ea0:	e03e      	b.n	8009f20 <USB_EPStartXfer+0xda8>
 8009ea2:	683b      	ldr	r3, [r7, #0]
 8009ea4:	691b      	ldr	r3, [r3, #16]
 8009ea6:	095b      	lsrs	r3, r3, #5
 8009ea8:	21e0      	movs	r1, #224	; 0xe0
 8009eaa:	187a      	adds	r2, r7, r1
 8009eac:	6013      	str	r3, [r2, #0]
 8009eae:	683b      	ldr	r3, [r7, #0]
 8009eb0:	691b      	ldr	r3, [r3, #16]
 8009eb2:	221f      	movs	r2, #31
 8009eb4:	4013      	ands	r3, r2
 8009eb6:	d104      	bne.n	8009ec2 <USB_EPStartXfer+0xd4a>
 8009eb8:	187b      	adds	r3, r7, r1
 8009eba:	681b      	ldr	r3, [r3, #0]
 8009ebc:	3b01      	subs	r3, #1
 8009ebe:	187a      	adds	r2, r7, r1
 8009ec0:	6013      	str	r3, [r2, #0]
 8009ec2:	23e0      	movs	r3, #224	; 0xe0
 8009ec4:	18fb      	adds	r3, r7, r3
 8009ec6:	681b      	ldr	r3, [r3, #0]
 8009ec8:	b29b      	uxth	r3, r3
 8009eca:	029b      	lsls	r3, r3, #10
 8009ecc:	b29b      	uxth	r3, r3
 8009ece:	4a40      	ldr	r2, [pc, #256]	; (8009fd0 <USB_EPStartXfer+0xe58>)
 8009ed0:	4313      	orrs	r3, r2
 8009ed2:	b29a      	uxth	r2, r3
 8009ed4:	2398      	movs	r3, #152	; 0x98
 8009ed6:	18fb      	adds	r3, r7, r3
 8009ed8:	681b      	ldr	r3, [r3, #0]
 8009eda:	801a      	strh	r2, [r3, #0]
 8009edc:	e020      	b.n	8009f20 <USB_EPStartXfer+0xda8>
 8009ede:	683b      	ldr	r3, [r7, #0]
 8009ee0:	785b      	ldrb	r3, [r3, #1]
 8009ee2:	2b01      	cmp	r3, #1
 8009ee4:	d11c      	bne.n	8009f20 <USB_EPStartXfer+0xda8>
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	2250      	movs	r2, #80	; 0x50
 8009eea:	5a9b      	ldrh	r3, [r3, r2]
 8009eec:	b29b      	uxth	r3, r3
 8009eee:	001a      	movs	r2, r3
 8009ef0:	21a4      	movs	r1, #164	; 0xa4
 8009ef2:	187b      	adds	r3, r7, r1
 8009ef4:	681b      	ldr	r3, [r3, #0]
 8009ef6:	189b      	adds	r3, r3, r2
 8009ef8:	187a      	adds	r2, r7, r1
 8009efa:	6013      	str	r3, [r2, #0]
 8009efc:	683b      	ldr	r3, [r7, #0]
 8009efe:	781b      	ldrb	r3, [r3, #0]
 8009f00:	00da      	lsls	r2, r3, #3
 8009f02:	187b      	adds	r3, r7, r1
 8009f04:	681b      	ldr	r3, [r3, #0]
 8009f06:	18d3      	adds	r3, r2, r3
 8009f08:	4a34      	ldr	r2, [pc, #208]	; (8009fdc <USB_EPStartXfer+0xe64>)
 8009f0a:	4694      	mov	ip, r2
 8009f0c:	4463      	add	r3, ip
 8009f0e:	21a0      	movs	r1, #160	; 0xa0
 8009f10:	187a      	adds	r2, r7, r1
 8009f12:	6013      	str	r3, [r2, #0]
 8009f14:	683b      	ldr	r3, [r7, #0]
 8009f16:	691b      	ldr	r3, [r3, #16]
 8009f18:	b29a      	uxth	r2, r3
 8009f1a:	187b      	adds	r3, r7, r1
 8009f1c:	681b      	ldr	r3, [r3, #0]
 8009f1e:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8009f20:	683b      	ldr	r3, [r7, #0]
 8009f22:	69db      	ldr	r3, [r3, #28]
 8009f24:	2b00      	cmp	r3, #0
 8009f26:	d100      	bne.n	8009f2a <USB_EPStartXfer+0xdb2>
 8009f28:	e1aa      	b.n	800a280 <USB_EPStartXfer+0x1108>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8009f2a:	687a      	ldr	r2, [r7, #4]
 8009f2c:	683b      	ldr	r3, [r7, #0]
 8009f2e:	781b      	ldrb	r3, [r3, #0]
 8009f30:	009b      	lsls	r3, r3, #2
 8009f32:	18d2      	adds	r2, r2, r3
 8009f34:	2196      	movs	r1, #150	; 0x96
 8009f36:	187b      	adds	r3, r7, r1
 8009f38:	8812      	ldrh	r2, [r2, #0]
 8009f3a:	801a      	strh	r2, [r3, #0]

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8009f3c:	187b      	adds	r3, r7, r1
 8009f3e:	881a      	ldrh	r2, [r3, #0]
 8009f40:	2380      	movs	r3, #128	; 0x80
 8009f42:	01db      	lsls	r3, r3, #7
 8009f44:	4013      	ands	r3, r2
 8009f46:	d004      	beq.n	8009f52 <USB_EPStartXfer+0xdda>
 8009f48:	187b      	adds	r3, r7, r1
 8009f4a:	881b      	ldrh	r3, [r3, #0]
 8009f4c:	2240      	movs	r2, #64	; 0x40
 8009f4e:	4013      	ands	r3, r2
 8009f50:	d10d      	bne.n	8009f6e <USB_EPStartXfer+0xdf6>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8009f52:	2196      	movs	r1, #150	; 0x96
 8009f54:	187b      	adds	r3, r7, r1
 8009f56:	881a      	ldrh	r2, [r3, #0]
 8009f58:	2380      	movs	r3, #128	; 0x80
 8009f5a:	01db      	lsls	r3, r3, #7
 8009f5c:	4013      	ands	r3, r2
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8009f5e:	d000      	beq.n	8009f62 <USB_EPStartXfer+0xdea>
 8009f60:	e18e      	b.n	800a280 <USB_EPStartXfer+0x1108>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8009f62:	187b      	adds	r3, r7, r1
 8009f64:	881b      	ldrh	r3, [r3, #0]
 8009f66:	2240      	movs	r2, #64	; 0x40
 8009f68:	4013      	ands	r3, r2
 8009f6a:	d000      	beq.n	8009f6e <USB_EPStartXfer+0xdf6>
 8009f6c:	e188      	b.n	800a280 <USB_EPStartXfer+0x1108>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 8009f6e:	687a      	ldr	r2, [r7, #4]
 8009f70:	683b      	ldr	r3, [r7, #0]
 8009f72:	781b      	ldrb	r3, [r3, #0]
 8009f74:	009b      	lsls	r3, r3, #2
 8009f76:	18d3      	adds	r3, r2, r3
 8009f78:	881b      	ldrh	r3, [r3, #0]
 8009f7a:	b29a      	uxth	r2, r3
 8009f7c:	2094      	movs	r0, #148	; 0x94
 8009f7e:	183b      	adds	r3, r7, r0
 8009f80:	4917      	ldr	r1, [pc, #92]	; (8009fe0 <USB_EPStartXfer+0xe68>)
 8009f82:	400a      	ands	r2, r1
 8009f84:	801a      	strh	r2, [r3, #0]
 8009f86:	687a      	ldr	r2, [r7, #4]
 8009f88:	683b      	ldr	r3, [r7, #0]
 8009f8a:	781b      	ldrb	r3, [r3, #0]
 8009f8c:	009b      	lsls	r3, r3, #2
 8009f8e:	18d3      	adds	r3, r2, r3
 8009f90:	183a      	adds	r2, r7, r0
 8009f92:	8812      	ldrh	r2, [r2, #0]
 8009f94:	4913      	ldr	r1, [pc, #76]	; (8009fe4 <USB_EPStartXfer+0xe6c>)
 8009f96:	430a      	orrs	r2, r1
 8009f98:	b292      	uxth	r2, r2
 8009f9a:	801a      	strh	r2, [r3, #0]
 8009f9c:	e170      	b.n	800a280 <USB_EPStartXfer+0x1108>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8009f9e:	683b      	ldr	r3, [r7, #0]
 8009fa0:	78db      	ldrb	r3, [r3, #3]
 8009fa2:	2b01      	cmp	r3, #1
 8009fa4:	d000      	beq.n	8009fa8 <USB_EPStartXfer+0xe30>
 8009fa6:	e169      	b.n	800a27c <USB_EPStartXfer+0x1104>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8009fa8:	683b      	ldr	r3, [r7, #0]
 8009faa:	699a      	ldr	r2, [r3, #24]
 8009fac:	683b      	ldr	r3, [r7, #0]
 8009fae:	691b      	ldr	r3, [r3, #16]
 8009fb0:	429a      	cmp	r2, r3
 8009fb2:	d919      	bls.n	8009fe8 <USB_EPStartXfer+0xe70>
        {
          len = ep->maxpacket;
 8009fb4:	683b      	ldr	r3, [r7, #0]
 8009fb6:	691b      	ldr	r3, [r3, #16]
 8009fb8:	1d7a      	adds	r2, r7, #5
 8009fba:	32ff      	adds	r2, #255	; 0xff
 8009fbc:	6013      	str	r3, [r2, #0]
          ep->xfer_len -= len;
 8009fbe:	683b      	ldr	r3, [r7, #0]
 8009fc0:	699a      	ldr	r2, [r3, #24]
 8009fc2:	1d7b      	adds	r3, r7, #5
 8009fc4:	33ff      	adds	r3, #255	; 0xff
 8009fc6:	681b      	ldr	r3, [r3, #0]
 8009fc8:	1ad2      	subs	r2, r2, r3
 8009fca:	683b      	ldr	r3, [r7, #0]
 8009fcc:	619a      	str	r2, [r3, #24]
 8009fce:	e013      	b.n	8009ff8 <USB_EPStartXfer+0xe80>
 8009fd0:	ffff8000 	.word	0xffff8000
 8009fd4:	00000402 	.word	0x00000402
 8009fd8:	ffff83ff 	.word	0xffff83ff
 8009fdc:	00000406 	.word	0x00000406
 8009fe0:	ffff8f8f 	.word	0xffff8f8f
 8009fe4:	ffff80c0 	.word	0xffff80c0
        }
        else
        {
          len = ep->xfer_len;
 8009fe8:	683b      	ldr	r3, [r7, #0]
 8009fea:	699b      	ldr	r3, [r3, #24]
 8009fec:	1d7a      	adds	r2, r7, #5
 8009fee:	32ff      	adds	r2, #255	; 0xff
 8009ff0:	6013      	str	r3, [r2, #0]
          ep->xfer_len = 0U;
 8009ff2:	683b      	ldr	r3, [r7, #0]
 8009ff4:	2200      	movs	r2, #0
 8009ff6:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8009ff8:	683b      	ldr	r3, [r7, #0]
 8009ffa:	785b      	ldrb	r3, [r3, #1]
 8009ffc:	2b00      	cmp	r3, #0
 8009ffe:	d000      	beq.n	800a002 <USB_EPStartXfer+0xe8a>
 800a000:	e075      	b.n	800a0ee <USB_EPStartXfer+0xf76>
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	21cc      	movs	r1, #204	; 0xcc
 800a006:	187a      	adds	r2, r7, r1
 800a008:	6013      	str	r3, [r2, #0]
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	2250      	movs	r2, #80	; 0x50
 800a00e:	5a9b      	ldrh	r3, [r3, r2]
 800a010:	b29b      	uxth	r3, r3
 800a012:	001a      	movs	r2, r3
 800a014:	187b      	adds	r3, r7, r1
 800a016:	681b      	ldr	r3, [r3, #0]
 800a018:	189b      	adds	r3, r3, r2
 800a01a:	187a      	adds	r2, r7, r1
 800a01c:	6013      	str	r3, [r2, #0]
 800a01e:	683b      	ldr	r3, [r7, #0]
 800a020:	781b      	ldrb	r3, [r3, #0]
 800a022:	00da      	lsls	r2, r3, #3
 800a024:	187b      	adds	r3, r7, r1
 800a026:	681b      	ldr	r3, [r3, #0]
 800a028:	18d3      	adds	r3, r2, r3
 800a02a:	4aaa      	ldr	r2, [pc, #680]	; (800a2d4 <USB_EPStartXfer+0x115c>)
 800a02c:	4694      	mov	ip, r2
 800a02e:	4463      	add	r3, ip
 800a030:	21c8      	movs	r1, #200	; 0xc8
 800a032:	187a      	adds	r2, r7, r1
 800a034:	6013      	str	r3, [r2, #0]
 800a036:	1d7b      	adds	r3, r7, #5
 800a038:	33ff      	adds	r3, #255	; 0xff
 800a03a:	681b      	ldr	r3, [r3, #0]
 800a03c:	2b00      	cmp	r3, #0
 800a03e:	d114      	bne.n	800a06a <USB_EPStartXfer+0xef2>
 800a040:	187b      	adds	r3, r7, r1
 800a042:	681b      	ldr	r3, [r3, #0]
 800a044:	881b      	ldrh	r3, [r3, #0]
 800a046:	b29b      	uxth	r3, r3
 800a048:	4aa3      	ldr	r2, [pc, #652]	; (800a2d8 <USB_EPStartXfer+0x1160>)
 800a04a:	4013      	ands	r3, r2
 800a04c:	b29a      	uxth	r2, r3
 800a04e:	187b      	adds	r3, r7, r1
 800a050:	681b      	ldr	r3, [r3, #0]
 800a052:	801a      	strh	r2, [r3, #0]
 800a054:	187b      	adds	r3, r7, r1
 800a056:	681b      	ldr	r3, [r3, #0]
 800a058:	881b      	ldrh	r3, [r3, #0]
 800a05a:	b29b      	uxth	r3, r3
 800a05c:	4a9f      	ldr	r2, [pc, #636]	; (800a2dc <USB_EPStartXfer+0x1164>)
 800a05e:	4313      	orrs	r3, r2
 800a060:	b29a      	uxth	r2, r3
 800a062:	187b      	adds	r3, r7, r1
 800a064:	681b      	ldr	r3, [r3, #0]
 800a066:	801a      	strh	r2, [r3, #0]
 800a068:	e066      	b.n	800a138 <USB_EPStartXfer+0xfc0>
 800a06a:	1d7b      	adds	r3, r7, #5
 800a06c:	33ff      	adds	r3, #255	; 0xff
 800a06e:	681b      	ldr	r3, [r3, #0]
 800a070:	2b3e      	cmp	r3, #62	; 0x3e
 800a072:	d81c      	bhi.n	800a0ae <USB_EPStartXfer+0xf36>
 800a074:	1d7b      	adds	r3, r7, #5
 800a076:	33ff      	adds	r3, #255	; 0xff
 800a078:	681b      	ldr	r3, [r3, #0]
 800a07a:	085b      	lsrs	r3, r3, #1
 800a07c:	21dc      	movs	r1, #220	; 0xdc
 800a07e:	187a      	adds	r2, r7, r1
 800a080:	6013      	str	r3, [r2, #0]
 800a082:	1d7b      	adds	r3, r7, #5
 800a084:	33ff      	adds	r3, #255	; 0xff
 800a086:	681b      	ldr	r3, [r3, #0]
 800a088:	2201      	movs	r2, #1
 800a08a:	4013      	ands	r3, r2
 800a08c:	d004      	beq.n	800a098 <USB_EPStartXfer+0xf20>
 800a08e:	187b      	adds	r3, r7, r1
 800a090:	681b      	ldr	r3, [r3, #0]
 800a092:	3301      	adds	r3, #1
 800a094:	187a      	adds	r2, r7, r1
 800a096:	6013      	str	r3, [r2, #0]
 800a098:	23dc      	movs	r3, #220	; 0xdc
 800a09a:	18fb      	adds	r3, r7, r3
 800a09c:	681b      	ldr	r3, [r3, #0]
 800a09e:	b29b      	uxth	r3, r3
 800a0a0:	029b      	lsls	r3, r3, #10
 800a0a2:	b29a      	uxth	r2, r3
 800a0a4:	23c8      	movs	r3, #200	; 0xc8
 800a0a6:	18fb      	adds	r3, r7, r3
 800a0a8:	681b      	ldr	r3, [r3, #0]
 800a0aa:	801a      	strh	r2, [r3, #0]
 800a0ac:	e044      	b.n	800a138 <USB_EPStartXfer+0xfc0>
 800a0ae:	1d7b      	adds	r3, r7, #5
 800a0b0:	33ff      	adds	r3, #255	; 0xff
 800a0b2:	681b      	ldr	r3, [r3, #0]
 800a0b4:	095b      	lsrs	r3, r3, #5
 800a0b6:	21dc      	movs	r1, #220	; 0xdc
 800a0b8:	187a      	adds	r2, r7, r1
 800a0ba:	6013      	str	r3, [r2, #0]
 800a0bc:	1d7b      	adds	r3, r7, #5
 800a0be:	33ff      	adds	r3, #255	; 0xff
 800a0c0:	681b      	ldr	r3, [r3, #0]
 800a0c2:	221f      	movs	r2, #31
 800a0c4:	4013      	ands	r3, r2
 800a0c6:	d104      	bne.n	800a0d2 <USB_EPStartXfer+0xf5a>
 800a0c8:	187b      	adds	r3, r7, r1
 800a0ca:	681b      	ldr	r3, [r3, #0]
 800a0cc:	3b01      	subs	r3, #1
 800a0ce:	187a      	adds	r2, r7, r1
 800a0d0:	6013      	str	r3, [r2, #0]
 800a0d2:	23dc      	movs	r3, #220	; 0xdc
 800a0d4:	18fb      	adds	r3, r7, r3
 800a0d6:	681b      	ldr	r3, [r3, #0]
 800a0d8:	b29b      	uxth	r3, r3
 800a0da:	029b      	lsls	r3, r3, #10
 800a0dc:	b29b      	uxth	r3, r3
 800a0de:	4a7f      	ldr	r2, [pc, #508]	; (800a2dc <USB_EPStartXfer+0x1164>)
 800a0e0:	4313      	orrs	r3, r2
 800a0e2:	b29a      	uxth	r2, r3
 800a0e4:	23c8      	movs	r3, #200	; 0xc8
 800a0e6:	18fb      	adds	r3, r7, r3
 800a0e8:	681b      	ldr	r3, [r3, #0]
 800a0ea:	801a      	strh	r2, [r3, #0]
 800a0ec:	e024      	b.n	800a138 <USB_EPStartXfer+0xfc0>
 800a0ee:	683b      	ldr	r3, [r7, #0]
 800a0f0:	785b      	ldrb	r3, [r3, #1]
 800a0f2:	2b01      	cmp	r3, #1
 800a0f4:	d120      	bne.n	800a138 <USB_EPStartXfer+0xfc0>
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	21d4      	movs	r1, #212	; 0xd4
 800a0fa:	187a      	adds	r2, r7, r1
 800a0fc:	6013      	str	r3, [r2, #0]
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	2250      	movs	r2, #80	; 0x50
 800a102:	5a9b      	ldrh	r3, [r3, r2]
 800a104:	b29b      	uxth	r3, r3
 800a106:	001a      	movs	r2, r3
 800a108:	187b      	adds	r3, r7, r1
 800a10a:	681b      	ldr	r3, [r3, #0]
 800a10c:	189b      	adds	r3, r3, r2
 800a10e:	187a      	adds	r2, r7, r1
 800a110:	6013      	str	r3, [r2, #0]
 800a112:	683b      	ldr	r3, [r7, #0]
 800a114:	781b      	ldrb	r3, [r3, #0]
 800a116:	00da      	lsls	r2, r3, #3
 800a118:	187b      	adds	r3, r7, r1
 800a11a:	681b      	ldr	r3, [r3, #0]
 800a11c:	18d3      	adds	r3, r2, r3
 800a11e:	4a6d      	ldr	r2, [pc, #436]	; (800a2d4 <USB_EPStartXfer+0x115c>)
 800a120:	4694      	mov	ip, r2
 800a122:	4463      	add	r3, ip
 800a124:	21d0      	movs	r1, #208	; 0xd0
 800a126:	187a      	adds	r2, r7, r1
 800a128:	6013      	str	r3, [r2, #0]
 800a12a:	1d7b      	adds	r3, r7, #5
 800a12c:	33ff      	adds	r3, #255	; 0xff
 800a12e:	681b      	ldr	r3, [r3, #0]
 800a130:	b29a      	uxth	r2, r3
 800a132:	187b      	adds	r3, r7, r1
 800a134:	681b      	ldr	r3, [r3, #0]
 800a136:	801a      	strh	r2, [r3, #0]
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	22c4      	movs	r2, #196	; 0xc4
 800a13c:	18ba      	adds	r2, r7, r2
 800a13e:	6013      	str	r3, [r2, #0]
 800a140:	683b      	ldr	r3, [r7, #0]
 800a142:	785b      	ldrb	r3, [r3, #1]
 800a144:	2b00      	cmp	r3, #0
 800a146:	d000      	beq.n	800a14a <USB_EPStartXfer+0xfd2>
 800a148:	e075      	b.n	800a236 <USB_EPStartXfer+0x10be>
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	21bc      	movs	r1, #188	; 0xbc
 800a14e:	187a      	adds	r2, r7, r1
 800a150:	6013      	str	r3, [r2, #0]
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	2250      	movs	r2, #80	; 0x50
 800a156:	5a9b      	ldrh	r3, [r3, r2]
 800a158:	b29b      	uxth	r3, r3
 800a15a:	001a      	movs	r2, r3
 800a15c:	187b      	adds	r3, r7, r1
 800a15e:	681b      	ldr	r3, [r3, #0]
 800a160:	189b      	adds	r3, r3, r2
 800a162:	187a      	adds	r2, r7, r1
 800a164:	6013      	str	r3, [r2, #0]
 800a166:	683b      	ldr	r3, [r7, #0]
 800a168:	781b      	ldrb	r3, [r3, #0]
 800a16a:	00da      	lsls	r2, r3, #3
 800a16c:	187b      	adds	r3, r7, r1
 800a16e:	681b      	ldr	r3, [r3, #0]
 800a170:	18d3      	adds	r3, r2, r3
 800a172:	4a5b      	ldr	r2, [pc, #364]	; (800a2e0 <USB_EPStartXfer+0x1168>)
 800a174:	4694      	mov	ip, r2
 800a176:	4463      	add	r3, ip
 800a178:	21b8      	movs	r1, #184	; 0xb8
 800a17a:	187a      	adds	r2, r7, r1
 800a17c:	6013      	str	r3, [r2, #0]
 800a17e:	1d7b      	adds	r3, r7, #5
 800a180:	33ff      	adds	r3, #255	; 0xff
 800a182:	681b      	ldr	r3, [r3, #0]
 800a184:	2b00      	cmp	r3, #0
 800a186:	d114      	bne.n	800a1b2 <USB_EPStartXfer+0x103a>
 800a188:	187b      	adds	r3, r7, r1
 800a18a:	681b      	ldr	r3, [r3, #0]
 800a18c:	881b      	ldrh	r3, [r3, #0]
 800a18e:	b29b      	uxth	r3, r3
 800a190:	4a51      	ldr	r2, [pc, #324]	; (800a2d8 <USB_EPStartXfer+0x1160>)
 800a192:	4013      	ands	r3, r2
 800a194:	b29a      	uxth	r2, r3
 800a196:	187b      	adds	r3, r7, r1
 800a198:	681b      	ldr	r3, [r3, #0]
 800a19a:	801a      	strh	r2, [r3, #0]
 800a19c:	187b      	adds	r3, r7, r1
 800a19e:	681b      	ldr	r3, [r3, #0]
 800a1a0:	881b      	ldrh	r3, [r3, #0]
 800a1a2:	b29b      	uxth	r3, r3
 800a1a4:	4a4d      	ldr	r2, [pc, #308]	; (800a2dc <USB_EPStartXfer+0x1164>)
 800a1a6:	4313      	orrs	r3, r2
 800a1a8:	b29a      	uxth	r2, r3
 800a1aa:	187b      	adds	r3, r7, r1
 800a1ac:	681b      	ldr	r3, [r3, #0]
 800a1ae:	801a      	strh	r2, [r3, #0]
 800a1b0:	e066      	b.n	800a280 <USB_EPStartXfer+0x1108>
 800a1b2:	1d7b      	adds	r3, r7, #5
 800a1b4:	33ff      	adds	r3, #255	; 0xff
 800a1b6:	681b      	ldr	r3, [r3, #0]
 800a1b8:	2b3e      	cmp	r3, #62	; 0x3e
 800a1ba:	d81c      	bhi.n	800a1f6 <USB_EPStartXfer+0x107e>
 800a1bc:	1d7b      	adds	r3, r7, #5
 800a1be:	33ff      	adds	r3, #255	; 0xff
 800a1c0:	681b      	ldr	r3, [r3, #0]
 800a1c2:	085b      	lsrs	r3, r3, #1
 800a1c4:	21d8      	movs	r1, #216	; 0xd8
 800a1c6:	187a      	adds	r2, r7, r1
 800a1c8:	6013      	str	r3, [r2, #0]
 800a1ca:	1d7b      	adds	r3, r7, #5
 800a1cc:	33ff      	adds	r3, #255	; 0xff
 800a1ce:	681b      	ldr	r3, [r3, #0]
 800a1d0:	2201      	movs	r2, #1
 800a1d2:	4013      	ands	r3, r2
 800a1d4:	d004      	beq.n	800a1e0 <USB_EPStartXfer+0x1068>
 800a1d6:	187b      	adds	r3, r7, r1
 800a1d8:	681b      	ldr	r3, [r3, #0]
 800a1da:	3301      	adds	r3, #1
 800a1dc:	187a      	adds	r2, r7, r1
 800a1de:	6013      	str	r3, [r2, #0]
 800a1e0:	23d8      	movs	r3, #216	; 0xd8
 800a1e2:	18fb      	adds	r3, r7, r3
 800a1e4:	681b      	ldr	r3, [r3, #0]
 800a1e6:	b29b      	uxth	r3, r3
 800a1e8:	029b      	lsls	r3, r3, #10
 800a1ea:	b29a      	uxth	r2, r3
 800a1ec:	23b8      	movs	r3, #184	; 0xb8
 800a1ee:	18fb      	adds	r3, r7, r3
 800a1f0:	681b      	ldr	r3, [r3, #0]
 800a1f2:	801a      	strh	r2, [r3, #0]
 800a1f4:	e044      	b.n	800a280 <USB_EPStartXfer+0x1108>
 800a1f6:	1d7b      	adds	r3, r7, #5
 800a1f8:	33ff      	adds	r3, #255	; 0xff
 800a1fa:	681b      	ldr	r3, [r3, #0]
 800a1fc:	095b      	lsrs	r3, r3, #5
 800a1fe:	21d8      	movs	r1, #216	; 0xd8
 800a200:	187a      	adds	r2, r7, r1
 800a202:	6013      	str	r3, [r2, #0]
 800a204:	1d7b      	adds	r3, r7, #5
 800a206:	33ff      	adds	r3, #255	; 0xff
 800a208:	681b      	ldr	r3, [r3, #0]
 800a20a:	221f      	movs	r2, #31
 800a20c:	4013      	ands	r3, r2
 800a20e:	d104      	bne.n	800a21a <USB_EPStartXfer+0x10a2>
 800a210:	187b      	adds	r3, r7, r1
 800a212:	681b      	ldr	r3, [r3, #0]
 800a214:	3b01      	subs	r3, #1
 800a216:	187a      	adds	r2, r7, r1
 800a218:	6013      	str	r3, [r2, #0]
 800a21a:	23d8      	movs	r3, #216	; 0xd8
 800a21c:	18fb      	adds	r3, r7, r3
 800a21e:	681b      	ldr	r3, [r3, #0]
 800a220:	b29b      	uxth	r3, r3
 800a222:	029b      	lsls	r3, r3, #10
 800a224:	b29b      	uxth	r3, r3
 800a226:	4a2d      	ldr	r2, [pc, #180]	; (800a2dc <USB_EPStartXfer+0x1164>)
 800a228:	4313      	orrs	r3, r2
 800a22a:	b29a      	uxth	r2, r3
 800a22c:	23b8      	movs	r3, #184	; 0xb8
 800a22e:	18fb      	adds	r3, r7, r3
 800a230:	681b      	ldr	r3, [r3, #0]
 800a232:	801a      	strh	r2, [r3, #0]
 800a234:	e024      	b.n	800a280 <USB_EPStartXfer+0x1108>
 800a236:	683b      	ldr	r3, [r7, #0]
 800a238:	785b      	ldrb	r3, [r3, #1]
 800a23a:	2b01      	cmp	r3, #1
 800a23c:	d120      	bne.n	800a280 <USB_EPStartXfer+0x1108>
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	2250      	movs	r2, #80	; 0x50
 800a242:	5a9b      	ldrh	r3, [r3, r2]
 800a244:	b29b      	uxth	r3, r3
 800a246:	001a      	movs	r2, r3
 800a248:	21c4      	movs	r1, #196	; 0xc4
 800a24a:	187b      	adds	r3, r7, r1
 800a24c:	681b      	ldr	r3, [r3, #0]
 800a24e:	189b      	adds	r3, r3, r2
 800a250:	187a      	adds	r2, r7, r1
 800a252:	6013      	str	r3, [r2, #0]
 800a254:	683b      	ldr	r3, [r7, #0]
 800a256:	781b      	ldrb	r3, [r3, #0]
 800a258:	00da      	lsls	r2, r3, #3
 800a25a:	187b      	adds	r3, r7, r1
 800a25c:	681b      	ldr	r3, [r3, #0]
 800a25e:	18d3      	adds	r3, r2, r3
 800a260:	4a1f      	ldr	r2, [pc, #124]	; (800a2e0 <USB_EPStartXfer+0x1168>)
 800a262:	4694      	mov	ip, r2
 800a264:	4463      	add	r3, ip
 800a266:	21c0      	movs	r1, #192	; 0xc0
 800a268:	187a      	adds	r2, r7, r1
 800a26a:	6013      	str	r3, [r2, #0]
 800a26c:	1d7b      	adds	r3, r7, #5
 800a26e:	33ff      	adds	r3, #255	; 0xff
 800a270:	681b      	ldr	r3, [r3, #0]
 800a272:	b29a      	uxth	r2, r3
 800a274:	187b      	adds	r3, r7, r1
 800a276:	681b      	ldr	r3, [r3, #0]
 800a278:	801a      	strh	r2, [r3, #0]
 800a27a:	e001      	b.n	800a280 <USB_EPStartXfer+0x1108>
      }
      else
      {
        return HAL_ERROR;
 800a27c:	2301      	movs	r3, #1
 800a27e:	e025      	b.n	800a2cc <USB_EPStartXfer+0x1154>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800a280:	687a      	ldr	r2, [r7, #4]
 800a282:	683b      	ldr	r3, [r7, #0]
 800a284:	781b      	ldrb	r3, [r3, #0]
 800a286:	009b      	lsls	r3, r3, #2
 800a288:	18d3      	adds	r3, r2, r3
 800a28a:	881b      	ldrh	r3, [r3, #0]
 800a28c:	b29a      	uxth	r2, r3
 800a28e:	208a      	movs	r0, #138	; 0x8a
 800a290:	183b      	adds	r3, r7, r0
 800a292:	4914      	ldr	r1, [pc, #80]	; (800a2e4 <USB_EPStartXfer+0x116c>)
 800a294:	400a      	ands	r2, r1
 800a296:	801a      	strh	r2, [r3, #0]
 800a298:	183b      	adds	r3, r7, r0
 800a29a:	183a      	adds	r2, r7, r0
 800a29c:	8812      	ldrh	r2, [r2, #0]
 800a29e:	2180      	movs	r1, #128	; 0x80
 800a2a0:	0149      	lsls	r1, r1, #5
 800a2a2:	404a      	eors	r2, r1
 800a2a4:	801a      	strh	r2, [r3, #0]
 800a2a6:	183b      	adds	r3, r7, r0
 800a2a8:	183a      	adds	r2, r7, r0
 800a2aa:	8812      	ldrh	r2, [r2, #0]
 800a2ac:	2180      	movs	r1, #128	; 0x80
 800a2ae:	0189      	lsls	r1, r1, #6
 800a2b0:	404a      	eors	r2, r1
 800a2b2:	801a      	strh	r2, [r3, #0]
 800a2b4:	687a      	ldr	r2, [r7, #4]
 800a2b6:	683b      	ldr	r3, [r7, #0]
 800a2b8:	781b      	ldrb	r3, [r3, #0]
 800a2ba:	009b      	lsls	r3, r3, #2
 800a2bc:	18d3      	adds	r3, r2, r3
 800a2be:	183a      	adds	r2, r7, r0
 800a2c0:	8812      	ldrh	r2, [r2, #0]
 800a2c2:	4909      	ldr	r1, [pc, #36]	; (800a2e8 <USB_EPStartXfer+0x1170>)
 800a2c4:	430a      	orrs	r2, r1
 800a2c6:	b292      	uxth	r2, r2
 800a2c8:	801a      	strh	r2, [r3, #0]
  }

  return HAL_OK;
 800a2ca:	2300      	movs	r3, #0
}
 800a2cc:	0018      	movs	r0, r3
 800a2ce:	46bd      	mov	sp, r7
 800a2d0:	b043      	add	sp, #268	; 0x10c
 800a2d2:	bd90      	pop	{r4, r7, pc}
 800a2d4:	00000402 	.word	0x00000402
 800a2d8:	ffff83ff 	.word	0xffff83ff
 800a2dc:	ffff8000 	.word	0xffff8000
 800a2e0:	00000406 	.word	0x00000406
 800a2e4:	ffffbf8f 	.word	0xffffbf8f
 800a2e8:	ffff8080 	.word	0xffff8080

0800a2ec <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800a2ec:	b580      	push	{r7, lr}
 800a2ee:	b084      	sub	sp, #16
 800a2f0:	af00      	add	r7, sp, #0
 800a2f2:	6078      	str	r0, [r7, #4]
 800a2f4:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800a2f6:	683b      	ldr	r3, [r7, #0]
 800a2f8:	785b      	ldrb	r3, [r3, #1]
 800a2fa:	2b00      	cmp	r3, #0
 800a2fc:	d01d      	beq.n	800a33a <USB_EPSetStall+0x4e>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800a2fe:	687a      	ldr	r2, [r7, #4]
 800a300:	683b      	ldr	r3, [r7, #0]
 800a302:	781b      	ldrb	r3, [r3, #0]
 800a304:	009b      	lsls	r3, r3, #2
 800a306:	18d3      	adds	r3, r2, r3
 800a308:	881b      	ldrh	r3, [r3, #0]
 800a30a:	b29a      	uxth	r2, r3
 800a30c:	200c      	movs	r0, #12
 800a30e:	183b      	adds	r3, r7, r0
 800a310:	491b      	ldr	r1, [pc, #108]	; (800a380 <USB_EPSetStall+0x94>)
 800a312:	400a      	ands	r2, r1
 800a314:	801a      	strh	r2, [r3, #0]
 800a316:	183b      	adds	r3, r7, r0
 800a318:	183a      	adds	r2, r7, r0
 800a31a:	8812      	ldrh	r2, [r2, #0]
 800a31c:	2110      	movs	r1, #16
 800a31e:	404a      	eors	r2, r1
 800a320:	801a      	strh	r2, [r3, #0]
 800a322:	687a      	ldr	r2, [r7, #4]
 800a324:	683b      	ldr	r3, [r7, #0]
 800a326:	781b      	ldrb	r3, [r3, #0]
 800a328:	009b      	lsls	r3, r3, #2
 800a32a:	18d3      	adds	r3, r2, r3
 800a32c:	183a      	adds	r2, r7, r0
 800a32e:	8812      	ldrh	r2, [r2, #0]
 800a330:	4914      	ldr	r1, [pc, #80]	; (800a384 <USB_EPSetStall+0x98>)
 800a332:	430a      	orrs	r2, r1
 800a334:	b292      	uxth	r2, r2
 800a336:	801a      	strh	r2, [r3, #0]
 800a338:	e01d      	b.n	800a376 <USB_EPSetStall+0x8a>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800a33a:	687a      	ldr	r2, [r7, #4]
 800a33c:	683b      	ldr	r3, [r7, #0]
 800a33e:	781b      	ldrb	r3, [r3, #0]
 800a340:	009b      	lsls	r3, r3, #2
 800a342:	18d3      	adds	r3, r2, r3
 800a344:	881b      	ldrh	r3, [r3, #0]
 800a346:	b29a      	uxth	r2, r3
 800a348:	200e      	movs	r0, #14
 800a34a:	183b      	adds	r3, r7, r0
 800a34c:	490e      	ldr	r1, [pc, #56]	; (800a388 <USB_EPSetStall+0x9c>)
 800a34e:	400a      	ands	r2, r1
 800a350:	801a      	strh	r2, [r3, #0]
 800a352:	183b      	adds	r3, r7, r0
 800a354:	183a      	adds	r2, r7, r0
 800a356:	8812      	ldrh	r2, [r2, #0]
 800a358:	2180      	movs	r1, #128	; 0x80
 800a35a:	0149      	lsls	r1, r1, #5
 800a35c:	404a      	eors	r2, r1
 800a35e:	801a      	strh	r2, [r3, #0]
 800a360:	687a      	ldr	r2, [r7, #4]
 800a362:	683b      	ldr	r3, [r7, #0]
 800a364:	781b      	ldrb	r3, [r3, #0]
 800a366:	009b      	lsls	r3, r3, #2
 800a368:	18d3      	adds	r3, r2, r3
 800a36a:	183a      	adds	r2, r7, r0
 800a36c:	8812      	ldrh	r2, [r2, #0]
 800a36e:	4905      	ldr	r1, [pc, #20]	; (800a384 <USB_EPSetStall+0x98>)
 800a370:	430a      	orrs	r2, r1
 800a372:	b292      	uxth	r2, r2
 800a374:	801a      	strh	r2, [r3, #0]
  }

  return HAL_OK;
 800a376:	2300      	movs	r3, #0
}
 800a378:	0018      	movs	r0, r3
 800a37a:	46bd      	mov	sp, r7
 800a37c:	b004      	add	sp, #16
 800a37e:	bd80      	pop	{r7, pc}
 800a380:	ffff8fbf 	.word	0xffff8fbf
 800a384:	ffff8080 	.word	0xffff8080
 800a388:	ffffbf8f 	.word	0xffffbf8f

0800a38c <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800a38c:	b580      	push	{r7, lr}
 800a38e:	b086      	sub	sp, #24
 800a390:	af00      	add	r7, sp, #0
 800a392:	6078      	str	r0, [r7, #4]
 800a394:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800a396:	683b      	ldr	r3, [r7, #0]
 800a398:	7b1b      	ldrb	r3, [r3, #12]
 800a39a:	2b00      	cmp	r3, #0
 800a39c:	d000      	beq.n	800a3a0 <USB_EPClearStall+0x14>
 800a39e:	e095      	b.n	800a4cc <USB_EPClearStall+0x140>
  {
    if (ep->is_in != 0U)
 800a3a0:	683b      	ldr	r3, [r7, #0]
 800a3a2:	785b      	ldrb	r3, [r3, #1]
 800a3a4:	2b00      	cmp	r3, #0
 800a3a6:	d046      	beq.n	800a436 <USB_EPClearStall+0xaa>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800a3a8:	687a      	ldr	r2, [r7, #4]
 800a3aa:	683b      	ldr	r3, [r7, #0]
 800a3ac:	781b      	ldrb	r3, [r3, #0]
 800a3ae:	009b      	lsls	r3, r3, #2
 800a3b0:	18d2      	adds	r2, r2, r3
 800a3b2:	2110      	movs	r1, #16
 800a3b4:	187b      	adds	r3, r7, r1
 800a3b6:	8812      	ldrh	r2, [r2, #0]
 800a3b8:	801a      	strh	r2, [r3, #0]
 800a3ba:	187b      	adds	r3, r7, r1
 800a3bc:	881b      	ldrh	r3, [r3, #0]
 800a3be:	2240      	movs	r2, #64	; 0x40
 800a3c0:	4013      	ands	r3, r2
 800a3c2:	d016      	beq.n	800a3f2 <USB_EPClearStall+0x66>
 800a3c4:	687a      	ldr	r2, [r7, #4]
 800a3c6:	683b      	ldr	r3, [r7, #0]
 800a3c8:	781b      	ldrb	r3, [r3, #0]
 800a3ca:	009b      	lsls	r3, r3, #2
 800a3cc:	18d3      	adds	r3, r2, r3
 800a3ce:	881b      	ldrh	r3, [r3, #0]
 800a3d0:	b29a      	uxth	r2, r3
 800a3d2:	200e      	movs	r0, #14
 800a3d4:	183b      	adds	r3, r7, r0
 800a3d6:	4940      	ldr	r1, [pc, #256]	; (800a4d8 <USB_EPClearStall+0x14c>)
 800a3d8:	400a      	ands	r2, r1
 800a3da:	801a      	strh	r2, [r3, #0]
 800a3dc:	687a      	ldr	r2, [r7, #4]
 800a3de:	683b      	ldr	r3, [r7, #0]
 800a3e0:	781b      	ldrb	r3, [r3, #0]
 800a3e2:	009b      	lsls	r3, r3, #2
 800a3e4:	18d3      	adds	r3, r2, r3
 800a3e6:	183a      	adds	r2, r7, r0
 800a3e8:	8812      	ldrh	r2, [r2, #0]
 800a3ea:	493c      	ldr	r1, [pc, #240]	; (800a4dc <USB_EPClearStall+0x150>)
 800a3ec:	430a      	orrs	r2, r1
 800a3ee:	b292      	uxth	r2, r2
 800a3f0:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 800a3f2:	683b      	ldr	r3, [r7, #0]
 800a3f4:	78db      	ldrb	r3, [r3, #3]
 800a3f6:	2b01      	cmp	r3, #1
 800a3f8:	d068      	beq.n	800a4cc <USB_EPClearStall+0x140>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800a3fa:	687a      	ldr	r2, [r7, #4]
 800a3fc:	683b      	ldr	r3, [r7, #0]
 800a3fe:	781b      	ldrb	r3, [r3, #0]
 800a400:	009b      	lsls	r3, r3, #2
 800a402:	18d3      	adds	r3, r2, r3
 800a404:	881b      	ldrh	r3, [r3, #0]
 800a406:	b29a      	uxth	r2, r3
 800a408:	200c      	movs	r0, #12
 800a40a:	183b      	adds	r3, r7, r0
 800a40c:	4934      	ldr	r1, [pc, #208]	; (800a4e0 <USB_EPClearStall+0x154>)
 800a40e:	400a      	ands	r2, r1
 800a410:	801a      	strh	r2, [r3, #0]
 800a412:	183b      	adds	r3, r7, r0
 800a414:	183a      	adds	r2, r7, r0
 800a416:	8812      	ldrh	r2, [r2, #0]
 800a418:	2120      	movs	r1, #32
 800a41a:	404a      	eors	r2, r1
 800a41c:	801a      	strh	r2, [r3, #0]
 800a41e:	687a      	ldr	r2, [r7, #4]
 800a420:	683b      	ldr	r3, [r7, #0]
 800a422:	781b      	ldrb	r3, [r3, #0]
 800a424:	009b      	lsls	r3, r3, #2
 800a426:	18d3      	adds	r3, r2, r3
 800a428:	183a      	adds	r2, r7, r0
 800a42a:	8812      	ldrh	r2, [r2, #0]
 800a42c:	492d      	ldr	r1, [pc, #180]	; (800a4e4 <USB_EPClearStall+0x158>)
 800a42e:	430a      	orrs	r2, r1
 800a430:	b292      	uxth	r2, r2
 800a432:	801a      	strh	r2, [r3, #0]
 800a434:	e04a      	b.n	800a4cc <USB_EPClearStall+0x140>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800a436:	687a      	ldr	r2, [r7, #4]
 800a438:	683b      	ldr	r3, [r7, #0]
 800a43a:	781b      	ldrb	r3, [r3, #0]
 800a43c:	009b      	lsls	r3, r3, #2
 800a43e:	18d2      	adds	r2, r2, r3
 800a440:	2116      	movs	r1, #22
 800a442:	187b      	adds	r3, r7, r1
 800a444:	8812      	ldrh	r2, [r2, #0]
 800a446:	801a      	strh	r2, [r3, #0]
 800a448:	187b      	adds	r3, r7, r1
 800a44a:	881a      	ldrh	r2, [r3, #0]
 800a44c:	2380      	movs	r3, #128	; 0x80
 800a44e:	01db      	lsls	r3, r3, #7
 800a450:	4013      	ands	r3, r2
 800a452:	d016      	beq.n	800a482 <USB_EPClearStall+0xf6>
 800a454:	687a      	ldr	r2, [r7, #4]
 800a456:	683b      	ldr	r3, [r7, #0]
 800a458:	781b      	ldrb	r3, [r3, #0]
 800a45a:	009b      	lsls	r3, r3, #2
 800a45c:	18d3      	adds	r3, r2, r3
 800a45e:	881b      	ldrh	r3, [r3, #0]
 800a460:	b29a      	uxth	r2, r3
 800a462:	2014      	movs	r0, #20
 800a464:	183b      	adds	r3, r7, r0
 800a466:	491c      	ldr	r1, [pc, #112]	; (800a4d8 <USB_EPClearStall+0x14c>)
 800a468:	400a      	ands	r2, r1
 800a46a:	801a      	strh	r2, [r3, #0]
 800a46c:	687a      	ldr	r2, [r7, #4]
 800a46e:	683b      	ldr	r3, [r7, #0]
 800a470:	781b      	ldrb	r3, [r3, #0]
 800a472:	009b      	lsls	r3, r3, #2
 800a474:	18d3      	adds	r3, r2, r3
 800a476:	183a      	adds	r2, r7, r0
 800a478:	8812      	ldrh	r2, [r2, #0]
 800a47a:	491b      	ldr	r1, [pc, #108]	; (800a4e8 <USB_EPClearStall+0x15c>)
 800a47c:	430a      	orrs	r2, r1
 800a47e:	b292      	uxth	r2, r2
 800a480:	801a      	strh	r2, [r3, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800a482:	687a      	ldr	r2, [r7, #4]
 800a484:	683b      	ldr	r3, [r7, #0]
 800a486:	781b      	ldrb	r3, [r3, #0]
 800a488:	009b      	lsls	r3, r3, #2
 800a48a:	18d3      	adds	r3, r2, r3
 800a48c:	881b      	ldrh	r3, [r3, #0]
 800a48e:	b29a      	uxth	r2, r3
 800a490:	2012      	movs	r0, #18
 800a492:	183b      	adds	r3, r7, r0
 800a494:	4915      	ldr	r1, [pc, #84]	; (800a4ec <USB_EPClearStall+0x160>)
 800a496:	400a      	ands	r2, r1
 800a498:	801a      	strh	r2, [r3, #0]
 800a49a:	183b      	adds	r3, r7, r0
 800a49c:	183a      	adds	r2, r7, r0
 800a49e:	8812      	ldrh	r2, [r2, #0]
 800a4a0:	2180      	movs	r1, #128	; 0x80
 800a4a2:	0149      	lsls	r1, r1, #5
 800a4a4:	404a      	eors	r2, r1
 800a4a6:	801a      	strh	r2, [r3, #0]
 800a4a8:	183b      	adds	r3, r7, r0
 800a4aa:	183a      	adds	r2, r7, r0
 800a4ac:	8812      	ldrh	r2, [r2, #0]
 800a4ae:	2180      	movs	r1, #128	; 0x80
 800a4b0:	0189      	lsls	r1, r1, #6
 800a4b2:	404a      	eors	r2, r1
 800a4b4:	801a      	strh	r2, [r3, #0]
 800a4b6:	687a      	ldr	r2, [r7, #4]
 800a4b8:	683b      	ldr	r3, [r7, #0]
 800a4ba:	781b      	ldrb	r3, [r3, #0]
 800a4bc:	009b      	lsls	r3, r3, #2
 800a4be:	18d3      	adds	r3, r2, r3
 800a4c0:	183a      	adds	r2, r7, r0
 800a4c2:	8812      	ldrh	r2, [r2, #0]
 800a4c4:	4907      	ldr	r1, [pc, #28]	; (800a4e4 <USB_EPClearStall+0x158>)
 800a4c6:	430a      	orrs	r2, r1
 800a4c8:	b292      	uxth	r2, r2
 800a4ca:	801a      	strh	r2, [r3, #0]
    }
  }

  return HAL_OK;
 800a4cc:	2300      	movs	r3, #0
}
 800a4ce:	0018      	movs	r0, r3
 800a4d0:	46bd      	mov	sp, r7
 800a4d2:	b006      	add	sp, #24
 800a4d4:	bd80      	pop	{r7, pc}
 800a4d6:	46c0      	nop			; (mov r8, r8)
 800a4d8:	ffff8f8f 	.word	0xffff8f8f
 800a4dc:	ffff80c0 	.word	0xffff80c0
 800a4e0:	ffff8fbf 	.word	0xffff8fbf
 800a4e4:	ffff8080 	.word	0xffff8080
 800a4e8:	ffffc080 	.word	0xffffc080
 800a4ec:	ffffbf8f 	.word	0xffffbf8f

0800a4f0 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800a4f0:	b580      	push	{r7, lr}
 800a4f2:	b082      	sub	sp, #8
 800a4f4:	af00      	add	r7, sp, #0
 800a4f6:	6078      	str	r0, [r7, #4]
 800a4f8:	000a      	movs	r2, r1
 800a4fa:	1cfb      	adds	r3, r7, #3
 800a4fc:	701a      	strb	r2, [r3, #0]
  if (address == 0U)
 800a4fe:	1cfb      	adds	r3, r7, #3
 800a500:	781b      	ldrb	r3, [r3, #0]
 800a502:	2b00      	cmp	r3, #0
 800a504:	d103      	bne.n	800a50e <USB_SetDevAddress+0x1e>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	224c      	movs	r2, #76	; 0x4c
 800a50a:	2180      	movs	r1, #128	; 0x80
 800a50c:	5299      	strh	r1, [r3, r2]
  }

  return HAL_OK;
 800a50e:	2300      	movs	r3, #0
}
 800a510:	0018      	movs	r0, r3
 800a512:	46bd      	mov	sp, r7
 800a514:	b002      	add	sp, #8
 800a516:	bd80      	pop	{r7, pc}

0800a518 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800a518:	b580      	push	{r7, lr}
 800a51a:	b082      	sub	sp, #8
 800a51c:	af00      	add	r7, sp, #0
 800a51e:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	2258      	movs	r2, #88	; 0x58
 800a524:	5a9b      	ldrh	r3, [r3, r2]
 800a526:	b29b      	uxth	r3, r3
 800a528:	4a05      	ldr	r2, [pc, #20]	; (800a540 <USB_DevConnect+0x28>)
 800a52a:	4313      	orrs	r3, r2
 800a52c:	b299      	uxth	r1, r3
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	2258      	movs	r2, #88	; 0x58
 800a532:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 800a534:	2300      	movs	r3, #0
}
 800a536:	0018      	movs	r0, r3
 800a538:	46bd      	mov	sp, r7
 800a53a:	b002      	add	sp, #8
 800a53c:	bd80      	pop	{r7, pc}
 800a53e:	46c0      	nop			; (mov r8, r8)
 800a540:	ffff8000 	.word	0xffff8000

0800a544 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 800a544:	b580      	push	{r7, lr}
 800a546:	b084      	sub	sp, #16
 800a548:	af00      	add	r7, sp, #0
 800a54a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	2244      	movs	r2, #68	; 0x44
 800a550:	5a9b      	ldrh	r3, [r3, r2]
 800a552:	b29b      	uxth	r3, r3
 800a554:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800a556:	68fb      	ldr	r3, [r7, #12]
}
 800a558:	0018      	movs	r0, r3
 800a55a:	46bd      	mov	sp, r7
 800a55c:	b004      	add	sp, #16
 800a55e:	bd80      	pop	{r7, pc}

0800a560 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800a560:	b580      	push	{r7, lr}
 800a562:	b08c      	sub	sp, #48	; 0x30
 800a564:	af00      	add	r7, sp, #0
 800a566:	60f8      	str	r0, [r7, #12]
 800a568:	60b9      	str	r1, [r7, #8]
 800a56a:	0019      	movs	r1, r3
 800a56c:	1dbb      	adds	r3, r7, #6
 800a56e:	801a      	strh	r2, [r3, #0]
 800a570:	1d3b      	adds	r3, r7, #4
 800a572:	1c0a      	adds	r2, r1, #0
 800a574:	801a      	strh	r2, [r3, #0]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800a576:	1d3b      	adds	r3, r7, #4
 800a578:	881b      	ldrh	r3, [r3, #0]
 800a57a:	3301      	adds	r3, #1
 800a57c:	085b      	lsrs	r3, r3, #1
 800a57e:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 800a580:	68fb      	ldr	r3, [r7, #12]
 800a582:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800a584:	68bb      	ldr	r3, [r7, #8]
 800a586:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800a588:	1dbb      	adds	r3, r7, #6
 800a58a:	881a      	ldrh	r2, [r3, #0]
 800a58c:	69fb      	ldr	r3, [r7, #28]
 800a58e:	18d3      	adds	r3, r2, r3
 800a590:	2280      	movs	r2, #128	; 0x80
 800a592:	00d2      	lsls	r2, r2, #3
 800a594:	4694      	mov	ip, r2
 800a596:	4463      	add	r3, ip
 800a598:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 800a59a:	6a3b      	ldr	r3, [r7, #32]
 800a59c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a59e:	e01b      	b.n	800a5d8 <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 800a5a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5a2:	781b      	ldrb	r3, [r3, #0]
 800a5a4:	61bb      	str	r3, [r7, #24]
    pBuf++;
 800a5a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5a8:	3301      	adds	r3, #1
 800a5aa:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 800a5ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5ae:	781b      	ldrb	r3, [r3, #0]
 800a5b0:	b29b      	uxth	r3, r3
 800a5b2:	021b      	lsls	r3, r3, #8
 800a5b4:	b29b      	uxth	r3, r3
 800a5b6:	001a      	movs	r2, r3
 800a5b8:	69bb      	ldr	r3, [r7, #24]
 800a5ba:	4313      	orrs	r3, r2
 800a5bc:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 800a5be:	697b      	ldr	r3, [r7, #20]
 800a5c0:	b29a      	uxth	r2, r3
 800a5c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5c4:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800a5c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5c8:	3302      	adds	r3, #2
 800a5ca:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
#endif

    pBuf++;
 800a5cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5ce:	3301      	adds	r3, #1
 800a5d0:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 800a5d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a5d4:	3b01      	subs	r3, #1
 800a5d6:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a5d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a5da:	2b00      	cmp	r3, #0
 800a5dc:	d1e0      	bne.n	800a5a0 <USB_WritePMA+0x40>
  }
}
 800a5de:	46c0      	nop			; (mov r8, r8)
 800a5e0:	46c0      	nop			; (mov r8, r8)
 800a5e2:	46bd      	mov	sp, r7
 800a5e4:	b00c      	add	sp, #48	; 0x30
 800a5e6:	bd80      	pop	{r7, pc}

0800a5e8 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800a5e8:	b580      	push	{r7, lr}
 800a5ea:	b08a      	sub	sp, #40	; 0x28
 800a5ec:	af00      	add	r7, sp, #0
 800a5ee:	60f8      	str	r0, [r7, #12]
 800a5f0:	60b9      	str	r1, [r7, #8]
 800a5f2:	0019      	movs	r1, r3
 800a5f4:	1dbb      	adds	r3, r7, #6
 800a5f6:	801a      	strh	r2, [r3, #0]
 800a5f8:	1d3b      	adds	r3, r7, #4
 800a5fa:	1c0a      	adds	r2, r1, #0
 800a5fc:	801a      	strh	r2, [r3, #0]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800a5fe:	1d3b      	adds	r3, r7, #4
 800a600:	881b      	ldrh	r3, [r3, #0]
 800a602:	085b      	lsrs	r3, r3, #1
 800a604:	b29b      	uxth	r3, r3
 800a606:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800a608:	68fb      	ldr	r3, [r7, #12]
 800a60a:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800a60c:	68bb      	ldr	r3, [r7, #8]
 800a60e:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800a610:	1dbb      	adds	r3, r7, #6
 800a612:	881a      	ldrh	r2, [r3, #0]
 800a614:	697b      	ldr	r3, [r7, #20]
 800a616:	18d3      	adds	r3, r2, r3
 800a618:	2280      	movs	r2, #128	; 0x80
 800a61a:	00d2      	lsls	r2, r2, #3
 800a61c:	4694      	mov	ip, r2
 800a61e:	4463      	add	r3, ip
 800a620:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 800a622:	69bb      	ldr	r3, [r7, #24]
 800a624:	627b      	str	r3, [r7, #36]	; 0x24
 800a626:	e018      	b.n	800a65a <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 800a628:	6a3b      	ldr	r3, [r7, #32]
 800a62a:	881b      	ldrh	r3, [r3, #0]
 800a62c:	b29b      	uxth	r3, r3
 800a62e:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800a630:	6a3b      	ldr	r3, [r7, #32]
 800a632:	3302      	adds	r3, #2
 800a634:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800a636:	693b      	ldr	r3, [r7, #16]
 800a638:	b2da      	uxtb	r2, r3
 800a63a:	69fb      	ldr	r3, [r7, #28]
 800a63c:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800a63e:	69fb      	ldr	r3, [r7, #28]
 800a640:	3301      	adds	r3, #1
 800a642:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 800a644:	693b      	ldr	r3, [r7, #16]
 800a646:	0a1b      	lsrs	r3, r3, #8
 800a648:	b2da      	uxtb	r2, r3
 800a64a:	69fb      	ldr	r3, [r7, #28]
 800a64c:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800a64e:	69fb      	ldr	r3, [r7, #28]
 800a650:	3301      	adds	r3, #1
 800a652:	61fb      	str	r3, [r7, #28]
  for (i = n; i != 0U; i--)
 800a654:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a656:	3b01      	subs	r3, #1
 800a658:	627b      	str	r3, [r7, #36]	; 0x24
 800a65a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a65c:	2b00      	cmp	r3, #0
 800a65e:	d1e3      	bne.n	800a628 <USB_ReadPMA+0x40>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif
  }

  if ((wNBytes % 2U) != 0U)
 800a660:	1d3b      	adds	r3, r7, #4
 800a662:	881b      	ldrh	r3, [r3, #0]
 800a664:	2201      	movs	r2, #1
 800a666:	4013      	ands	r3, r2
 800a668:	b29b      	uxth	r3, r3
 800a66a:	2b00      	cmp	r3, #0
 800a66c:	d007      	beq.n	800a67e <USB_ReadPMA+0x96>
  {
    temp = *pdwVal;
 800a66e:	6a3b      	ldr	r3, [r7, #32]
 800a670:	881b      	ldrh	r3, [r3, #0]
 800a672:	b29b      	uxth	r3, r3
 800a674:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800a676:	693b      	ldr	r3, [r7, #16]
 800a678:	b2da      	uxtb	r2, r3
 800a67a:	69fb      	ldr	r3, [r7, #28]
 800a67c:	701a      	strb	r2, [r3, #0]
  }
}
 800a67e:	46c0      	nop			; (mov r8, r8)
 800a680:	46bd      	mov	sp, r7
 800a682:	b00a      	add	sp, #40	; 0x28
 800a684:	bd80      	pop	{r7, pc}

0800a686 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a686:	b580      	push	{r7, lr}
 800a688:	b084      	sub	sp, #16
 800a68a:	af00      	add	r7, sp, #0
 800a68c:	6078      	str	r0, [r7, #4]
 800a68e:	000a      	movs	r2, r1
 800a690:	1cfb      	adds	r3, r7, #3
 800a692:	701a      	strb	r2, [r3, #0]
  uint8_t ret = 0U;
 800a694:	230f      	movs	r3, #15
 800a696:	18fb      	adds	r3, r7, r3
 800a698:	2200      	movs	r2, #0
 800a69a:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	7c1b      	ldrb	r3, [r3, #16]
 800a6a0:	2b00      	cmp	r3, #0
 800a6a2:	d116      	bne.n	800a6d2 <USBD_CDC_Init+0x4c>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800a6a4:	2380      	movs	r3, #128	; 0x80
 800a6a6:	009b      	lsls	r3, r3, #2
 800a6a8:	6878      	ldr	r0, [r7, #4]
 800a6aa:	2202      	movs	r2, #2
 800a6ac:	2181      	movs	r1, #129	; 0x81
 800a6ae:	f002 f8b4 	bl	800c81a <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	2201      	movs	r2, #1
 800a6b6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800a6b8:	2380      	movs	r3, #128	; 0x80
 800a6ba:	009b      	lsls	r3, r3, #2
 800a6bc:	6878      	ldr	r0, [r7, #4]
 800a6be:	2202      	movs	r2, #2
 800a6c0:	2101      	movs	r1, #1
 800a6c2:	f002 f8aa 	bl	800c81a <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800a6c6:	687a      	ldr	r2, [r7, #4]
 800a6c8:	23b6      	movs	r3, #182	; 0xb6
 800a6ca:	005b      	lsls	r3, r3, #1
 800a6cc:	2101      	movs	r1, #1
 800a6ce:	50d1      	str	r1, [r2, r3]
 800a6d0:	e013      	b.n	800a6fa <USBD_CDC_Init+0x74>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800a6d2:	6878      	ldr	r0, [r7, #4]
 800a6d4:	2340      	movs	r3, #64	; 0x40
 800a6d6:	2202      	movs	r2, #2
 800a6d8:	2181      	movs	r1, #129	; 0x81
 800a6da:	f002 f89e 	bl	800c81a <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	2201      	movs	r2, #1
 800a6e2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800a6e4:	6878      	ldr	r0, [r7, #4]
 800a6e6:	2340      	movs	r3, #64	; 0x40
 800a6e8:	2202      	movs	r2, #2
 800a6ea:	2101      	movs	r1, #1
 800a6ec:	f002 f895 	bl	800c81a <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800a6f0:	687a      	ldr	r2, [r7, #4]
 800a6f2:	23b6      	movs	r3, #182	; 0xb6
 800a6f4:	005b      	lsls	r3, r3, #1
 800a6f6:	2101      	movs	r1, #1
 800a6f8:	50d1      	str	r1, [r2, r3]
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800a6fa:	6878      	ldr	r0, [r7, #4]
 800a6fc:	2308      	movs	r3, #8
 800a6fe:	2203      	movs	r2, #3
 800a700:	2182      	movs	r1, #130	; 0x82
 800a702:	f002 f88a 	bl	800c81a <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	2201      	movs	r2, #1
 800a70a:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800a70c:	2387      	movs	r3, #135	; 0x87
 800a70e:	009b      	lsls	r3, r3, #2
 800a710:	0018      	movs	r0, r3
 800a712:	f002 fa1b 	bl	800cb4c <USBD_static_malloc>
 800a716:	0001      	movs	r1, r0
 800a718:	687a      	ldr	r2, [r7, #4]
 800a71a:	23ae      	movs	r3, #174	; 0xae
 800a71c:	009b      	lsls	r3, r3, #2
 800a71e:	50d1      	str	r1, [r2, r3]

  if (pdev->pClassData == NULL)
 800a720:	687a      	ldr	r2, [r7, #4]
 800a722:	23ae      	movs	r3, #174	; 0xae
 800a724:	009b      	lsls	r3, r3, #2
 800a726:	58d3      	ldr	r3, [r2, r3]
 800a728:	2b00      	cmp	r3, #0
 800a72a:	d104      	bne.n	800a736 <USBD_CDC_Init+0xb0>
  {
    ret = 1U;
 800a72c:	230f      	movs	r3, #15
 800a72e:	18fb      	adds	r3, r7, r3
 800a730:	2201      	movs	r2, #1
 800a732:	701a      	strb	r2, [r3, #0]
 800a734:	e02c      	b.n	800a790 <USBD_CDC_Init+0x10a>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800a736:	687a      	ldr	r2, [r7, #4]
 800a738:	23ae      	movs	r3, #174	; 0xae
 800a73a:	009b      	lsls	r3, r3, #2
 800a73c:	58d3      	ldr	r3, [r2, r3]
 800a73e:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800a740:	687a      	ldr	r2, [r7, #4]
 800a742:	23af      	movs	r3, #175	; 0xaf
 800a744:	009b      	lsls	r3, r3, #2
 800a746:	58d3      	ldr	r3, [r2, r3]
 800a748:	681b      	ldr	r3, [r3, #0]
 800a74a:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 800a74c:	68ba      	ldr	r2, [r7, #8]
 800a74e:	2385      	movs	r3, #133	; 0x85
 800a750:	009b      	lsls	r3, r3, #2
 800a752:	2100      	movs	r1, #0
 800a754:	50d1      	str	r1, [r2, r3]
    hcdc->RxState = 0U;
 800a756:	68ba      	ldr	r2, [r7, #8]
 800a758:	2386      	movs	r3, #134	; 0x86
 800a75a:	009b      	lsls	r3, r3, #2
 800a75c:	2100      	movs	r1, #0
 800a75e:	50d1      	str	r1, [r2, r3]

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	7c1b      	ldrb	r3, [r3, #16]
 800a764:	2b00      	cmp	r3, #0
 800a766:	d10a      	bne.n	800a77e <USBD_CDC_Init+0xf8>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800a768:	68ba      	ldr	r2, [r7, #8]
 800a76a:	2381      	movs	r3, #129	; 0x81
 800a76c:	009b      	lsls	r3, r3, #2
 800a76e:	58d2      	ldr	r2, [r2, r3]
 800a770:	2380      	movs	r3, #128	; 0x80
 800a772:	009b      	lsls	r3, r3, #2
 800a774:	6878      	ldr	r0, [r7, #4]
 800a776:	2101      	movs	r1, #1
 800a778:	f002 f99a 	bl	800cab0 <USBD_LL_PrepareReceive>
 800a77c:	e008      	b.n	800a790 <USBD_CDC_Init+0x10a>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800a77e:	68ba      	ldr	r2, [r7, #8]
 800a780:	2381      	movs	r3, #129	; 0x81
 800a782:	009b      	lsls	r3, r3, #2
 800a784:	58d2      	ldr	r2, [r2, r3]
 800a786:	6878      	ldr	r0, [r7, #4]
 800a788:	2340      	movs	r3, #64	; 0x40
 800a78a:	2101      	movs	r1, #1
 800a78c:	f002 f990 	bl	800cab0 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 800a790:	230f      	movs	r3, #15
 800a792:	18fb      	adds	r3, r7, r3
 800a794:	781b      	ldrb	r3, [r3, #0]
}
 800a796:	0018      	movs	r0, r3
 800a798:	46bd      	mov	sp, r7
 800a79a:	b004      	add	sp, #16
 800a79c:	bd80      	pop	{r7, pc}

0800a79e <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a79e:	b580      	push	{r7, lr}
 800a7a0:	b084      	sub	sp, #16
 800a7a2:	af00      	add	r7, sp, #0
 800a7a4:	6078      	str	r0, [r7, #4]
 800a7a6:	000a      	movs	r2, r1
 800a7a8:	1cfb      	adds	r3, r7, #3
 800a7aa:	701a      	strb	r2, [r3, #0]
  uint8_t ret = 0U;
 800a7ac:	230f      	movs	r3, #15
 800a7ae:	18fb      	adds	r3, r7, r3
 800a7b0:	2200      	movs	r2, #0
 800a7b2:	701a      	strb	r2, [r3, #0]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	2181      	movs	r1, #129	; 0x81
 800a7b8:	0018      	movs	r0, r3
 800a7ba:	f002 f865 	bl	800c888 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	2200      	movs	r2, #0
 800a7c2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	2101      	movs	r1, #1
 800a7c8:	0018      	movs	r0, r3
 800a7ca:	f002 f85d 	bl	800c888 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800a7ce:	687a      	ldr	r2, [r7, #4]
 800a7d0:	23b6      	movs	r3, #182	; 0xb6
 800a7d2:	005b      	lsls	r3, r3, #1
 800a7d4:	2100      	movs	r1, #0
 800a7d6:	50d1      	str	r1, [r2, r3]

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	2182      	movs	r1, #130	; 0x82
 800a7dc:	0018      	movs	r0, r3
 800a7de:	f002 f853 	bl	800c888 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	2200      	movs	r2, #0
 800a7e6:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800a7e8:	687a      	ldr	r2, [r7, #4]
 800a7ea:	23ae      	movs	r3, #174	; 0xae
 800a7ec:	009b      	lsls	r3, r3, #2
 800a7ee:	58d3      	ldr	r3, [r2, r3]
 800a7f0:	2b00      	cmp	r3, #0
 800a7f2:	d011      	beq.n	800a818 <USBD_CDC_DeInit+0x7a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800a7f4:	687a      	ldr	r2, [r7, #4]
 800a7f6:	23af      	movs	r3, #175	; 0xaf
 800a7f8:	009b      	lsls	r3, r3, #2
 800a7fa:	58d3      	ldr	r3, [r2, r3]
 800a7fc:	685b      	ldr	r3, [r3, #4]
 800a7fe:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 800a800:	687a      	ldr	r2, [r7, #4]
 800a802:	23ae      	movs	r3, #174	; 0xae
 800a804:	009b      	lsls	r3, r3, #2
 800a806:	58d3      	ldr	r3, [r2, r3]
 800a808:	0018      	movs	r0, r3
 800a80a:	f002 f9ab 	bl	800cb64 <USBD_static_free>
    pdev->pClassData = NULL;
 800a80e:	687a      	ldr	r2, [r7, #4]
 800a810:	23ae      	movs	r3, #174	; 0xae
 800a812:	009b      	lsls	r3, r3, #2
 800a814:	2100      	movs	r1, #0
 800a816:	50d1      	str	r1, [r2, r3]
  }

  return ret;
 800a818:	230f      	movs	r3, #15
 800a81a:	18fb      	adds	r3, r7, r3
 800a81c:	781b      	ldrb	r3, [r3, #0]
}
 800a81e:	0018      	movs	r0, r3
 800a820:	46bd      	mov	sp, r7
 800a822:	b004      	add	sp, #16
 800a824:	bd80      	pop	{r7, pc}
	...

0800a828 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800a828:	b580      	push	{r7, lr}
 800a82a:	b086      	sub	sp, #24
 800a82c:	af00      	add	r7, sp, #0
 800a82e:	6078      	str	r0, [r7, #4]
 800a830:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800a832:	687a      	ldr	r2, [r7, #4]
 800a834:	23ae      	movs	r3, #174	; 0xae
 800a836:	009b      	lsls	r3, r3, #2
 800a838:	58d3      	ldr	r3, [r2, r3]
 800a83a:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 800a83c:	230f      	movs	r3, #15
 800a83e:	18fb      	adds	r3, r7, r3
 800a840:	2200      	movs	r2, #0
 800a842:	701a      	strb	r2, [r3, #0]
  uint16_t status_info = 0U;
 800a844:	230c      	movs	r3, #12
 800a846:	18fb      	adds	r3, r7, r3
 800a848:	2200      	movs	r2, #0
 800a84a:	801a      	strh	r2, [r3, #0]
  uint8_t ret = USBD_OK;
 800a84c:	2317      	movs	r3, #23
 800a84e:	18fb      	adds	r3, r7, r3
 800a850:	2200      	movs	r2, #0
 800a852:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a854:	683b      	ldr	r3, [r7, #0]
 800a856:	781b      	ldrb	r3, [r3, #0]
 800a858:	001a      	movs	r2, r3
 800a85a:	2360      	movs	r3, #96	; 0x60
 800a85c:	4013      	ands	r3, r2
 800a85e:	d03d      	beq.n	800a8dc <USBD_CDC_Setup+0xb4>
 800a860:	2b20      	cmp	r3, #32
 800a862:	d000      	beq.n	800a866 <USBD_CDC_Setup+0x3e>
 800a864:	e094      	b.n	800a990 <USBD_CDC_Setup+0x168>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 800a866:	683b      	ldr	r3, [r7, #0]
 800a868:	88db      	ldrh	r3, [r3, #6]
 800a86a:	2b00      	cmp	r3, #0
 800a86c:	d02b      	beq.n	800a8c6 <USBD_CDC_Setup+0x9e>
      {
        if (req->bmRequest & 0x80U)
 800a86e:	683b      	ldr	r3, [r7, #0]
 800a870:	781b      	ldrb	r3, [r3, #0]
 800a872:	b25b      	sxtb	r3, r3
 800a874:	2b00      	cmp	r3, #0
 800a876:	da12      	bge.n	800a89e <USBD_CDC_Setup+0x76>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800a878:	687a      	ldr	r2, [r7, #4]
 800a87a:	23af      	movs	r3, #175	; 0xaf
 800a87c:	009b      	lsls	r3, r3, #2
 800a87e:	58d3      	ldr	r3, [r2, r3]
 800a880:	689b      	ldr	r3, [r3, #8]
 800a882:	683a      	ldr	r2, [r7, #0]
 800a884:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 800a886:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800a888:	683a      	ldr	r2, [r7, #0]
 800a88a:	88d2      	ldrh	r2, [r2, #6]
 800a88c:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800a88e:	6939      	ldr	r1, [r7, #16]
 800a890:	683b      	ldr	r3, [r7, #0]
 800a892:	88da      	ldrh	r2, [r3, #6]
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	0018      	movs	r0, r3
 800a898:	f001 fbb2 	bl	800c000 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 800a89c:	e083      	b.n	800a9a6 <USBD_CDC_Setup+0x17e>
          hcdc->CmdOpCode = req->bRequest;
 800a89e:	683b      	ldr	r3, [r7, #0]
 800a8a0:	7859      	ldrb	r1, [r3, #1]
 800a8a2:	693a      	ldr	r2, [r7, #16]
 800a8a4:	2380      	movs	r3, #128	; 0x80
 800a8a6:	009b      	lsls	r3, r3, #2
 800a8a8:	54d1      	strb	r1, [r2, r3]
          hcdc->CmdLength = (uint8_t)req->wLength;
 800a8aa:	683b      	ldr	r3, [r7, #0]
 800a8ac:	88db      	ldrh	r3, [r3, #6]
 800a8ae:	b2d9      	uxtb	r1, r3
 800a8b0:	693b      	ldr	r3, [r7, #16]
 800a8b2:	4a40      	ldr	r2, [pc, #256]	; (800a9b4 <USBD_CDC_Setup+0x18c>)
 800a8b4:	5499      	strb	r1, [r3, r2]
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800a8b6:	6939      	ldr	r1, [r7, #16]
 800a8b8:	683b      	ldr	r3, [r7, #0]
 800a8ba:	88da      	ldrh	r2, [r3, #6]
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	0018      	movs	r0, r3
 800a8c0:	f001 fbd1 	bl	800c066 <USBD_CtlPrepareRx>
      break;
 800a8c4:	e06f      	b.n	800a9a6 <USBD_CDC_Setup+0x17e>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800a8c6:	687a      	ldr	r2, [r7, #4]
 800a8c8:	23af      	movs	r3, #175	; 0xaf
 800a8ca:	009b      	lsls	r3, r3, #2
 800a8cc:	58d3      	ldr	r3, [r2, r3]
 800a8ce:	689b      	ldr	r3, [r3, #8]
 800a8d0:	683a      	ldr	r2, [r7, #0]
 800a8d2:	7850      	ldrb	r0, [r2, #1]
 800a8d4:	6839      	ldr	r1, [r7, #0]
 800a8d6:	2200      	movs	r2, #0
 800a8d8:	4798      	blx	r3
      break;
 800a8da:	e064      	b.n	800a9a6 <USBD_CDC_Setup+0x17e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a8dc:	683b      	ldr	r3, [r7, #0]
 800a8de:	785b      	ldrb	r3, [r3, #1]
 800a8e0:	2b0b      	cmp	r3, #11
 800a8e2:	d037      	beq.n	800a954 <USBD_CDC_Setup+0x12c>
 800a8e4:	dc47      	bgt.n	800a976 <USBD_CDC_Setup+0x14e>
 800a8e6:	2b00      	cmp	r3, #0
 800a8e8:	d002      	beq.n	800a8f0 <USBD_CDC_Setup+0xc8>
 800a8ea:	2b0a      	cmp	r3, #10
 800a8ec:	d019      	beq.n	800a922 <USBD_CDC_Setup+0xfa>
 800a8ee:	e042      	b.n	800a976 <USBD_CDC_Setup+0x14e>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a8f0:	687a      	ldr	r2, [r7, #4]
 800a8f2:	23a7      	movs	r3, #167	; 0xa7
 800a8f4:	009b      	lsls	r3, r3, #2
 800a8f6:	5cd3      	ldrb	r3, [r2, r3]
 800a8f8:	2b03      	cmp	r3, #3
 800a8fa:	d107      	bne.n	800a90c <USBD_CDC_Setup+0xe4>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 800a8fc:	230c      	movs	r3, #12
 800a8fe:	18f9      	adds	r1, r7, r3
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	2202      	movs	r2, #2
 800a904:	0018      	movs	r0, r3
 800a906:	f001 fb7b 	bl	800c000 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800a90a:	e040      	b.n	800a98e <USBD_CDC_Setup+0x166>
            USBD_CtlError(pdev, req);
 800a90c:	683a      	ldr	r2, [r7, #0]
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	0011      	movs	r1, r2
 800a912:	0018      	movs	r0, r3
 800a914:	f001 faf6 	bl	800bf04 <USBD_CtlError>
            ret = USBD_FAIL;
 800a918:	2317      	movs	r3, #23
 800a91a:	18fb      	adds	r3, r7, r3
 800a91c:	2202      	movs	r2, #2
 800a91e:	701a      	strb	r2, [r3, #0]
          break;
 800a920:	e035      	b.n	800a98e <USBD_CDC_Setup+0x166>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a922:	687a      	ldr	r2, [r7, #4]
 800a924:	23a7      	movs	r3, #167	; 0xa7
 800a926:	009b      	lsls	r3, r3, #2
 800a928:	5cd3      	ldrb	r3, [r2, r3]
 800a92a:	2b03      	cmp	r3, #3
 800a92c:	d107      	bne.n	800a93e <USBD_CDC_Setup+0x116>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 800a92e:	230f      	movs	r3, #15
 800a930:	18f9      	adds	r1, r7, r3
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	2201      	movs	r2, #1
 800a936:	0018      	movs	r0, r3
 800a938:	f001 fb62 	bl	800c000 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800a93c:	e027      	b.n	800a98e <USBD_CDC_Setup+0x166>
            USBD_CtlError(pdev, req);
 800a93e:	683a      	ldr	r2, [r7, #0]
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	0011      	movs	r1, r2
 800a944:	0018      	movs	r0, r3
 800a946:	f001 fadd 	bl	800bf04 <USBD_CtlError>
            ret = USBD_FAIL;
 800a94a:	2317      	movs	r3, #23
 800a94c:	18fb      	adds	r3, r7, r3
 800a94e:	2202      	movs	r2, #2
 800a950:	701a      	strb	r2, [r3, #0]
          break;
 800a952:	e01c      	b.n	800a98e <USBD_CDC_Setup+0x166>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800a954:	687a      	ldr	r2, [r7, #4]
 800a956:	23a7      	movs	r3, #167	; 0xa7
 800a958:	009b      	lsls	r3, r3, #2
 800a95a:	5cd3      	ldrb	r3, [r2, r3]
 800a95c:	2b03      	cmp	r3, #3
 800a95e:	d015      	beq.n	800a98c <USBD_CDC_Setup+0x164>
          {
            USBD_CtlError(pdev, req);
 800a960:	683a      	ldr	r2, [r7, #0]
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	0011      	movs	r1, r2
 800a966:	0018      	movs	r0, r3
 800a968:	f001 facc 	bl	800bf04 <USBD_CtlError>
            ret = USBD_FAIL;
 800a96c:	2317      	movs	r3, #23
 800a96e:	18fb      	adds	r3, r7, r3
 800a970:	2202      	movs	r2, #2
 800a972:	701a      	strb	r2, [r3, #0]
          }
          break;
 800a974:	e00a      	b.n	800a98c <USBD_CDC_Setup+0x164>

        default:
          USBD_CtlError(pdev, req);
 800a976:	683a      	ldr	r2, [r7, #0]
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	0011      	movs	r1, r2
 800a97c:	0018      	movs	r0, r3
 800a97e:	f001 fac1 	bl	800bf04 <USBD_CtlError>
          ret = USBD_FAIL;
 800a982:	2317      	movs	r3, #23
 800a984:	18fb      	adds	r3, r7, r3
 800a986:	2202      	movs	r2, #2
 800a988:	701a      	strb	r2, [r3, #0]
          break;
 800a98a:	e000      	b.n	800a98e <USBD_CDC_Setup+0x166>
          break;
 800a98c:	46c0      	nop			; (mov r8, r8)
      }
      break;
 800a98e:	e00a      	b.n	800a9a6 <USBD_CDC_Setup+0x17e>

    default:
      USBD_CtlError(pdev, req);
 800a990:	683a      	ldr	r2, [r7, #0]
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	0011      	movs	r1, r2
 800a996:	0018      	movs	r0, r3
 800a998:	f001 fab4 	bl	800bf04 <USBD_CtlError>
      ret = USBD_FAIL;
 800a99c:	2317      	movs	r3, #23
 800a99e:	18fb      	adds	r3, r7, r3
 800a9a0:	2202      	movs	r2, #2
 800a9a2:	701a      	strb	r2, [r3, #0]
      break;
 800a9a4:	46c0      	nop			; (mov r8, r8)
  }

  return ret;
 800a9a6:	2317      	movs	r3, #23
 800a9a8:	18fb      	adds	r3, r7, r3
 800a9aa:	781b      	ldrb	r3, [r3, #0]
}
 800a9ac:	0018      	movs	r0, r3
 800a9ae:	46bd      	mov	sp, r7
 800a9b0:	b006      	add	sp, #24
 800a9b2:	bd80      	pop	{r7, pc}
 800a9b4:	00000201 	.word	0x00000201

0800a9b8 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a9b8:	b580      	push	{r7, lr}
 800a9ba:	b084      	sub	sp, #16
 800a9bc:	af00      	add	r7, sp, #0
 800a9be:	6078      	str	r0, [r7, #4]
 800a9c0:	000a      	movs	r2, r1
 800a9c2:	1cfb      	adds	r3, r7, #3
 800a9c4:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800a9c6:	687a      	ldr	r2, [r7, #4]
 800a9c8:	23ae      	movs	r3, #174	; 0xae
 800a9ca:	009b      	lsls	r3, r3, #2
 800a9cc:	58d3      	ldr	r3, [r2, r3]
 800a9ce:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800a9d0:	687a      	ldr	r2, [r7, #4]
 800a9d2:	23b0      	movs	r3, #176	; 0xb0
 800a9d4:	009b      	lsls	r3, r3, #2
 800a9d6:	58d3      	ldr	r3, [r2, r3]
 800a9d8:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 800a9da:	687a      	ldr	r2, [r7, #4]
 800a9dc:	23ae      	movs	r3, #174	; 0xae
 800a9de:	009b      	lsls	r3, r3, #2
 800a9e0:	58d3      	ldr	r3, [r2, r3]
 800a9e2:	2b00      	cmp	r3, #0
 800a9e4:	d03e      	beq.n	800aa64 <USBD_CDC_DataIn+0xac>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800a9e6:	1cfb      	adds	r3, r7, #3
 800a9e8:	781a      	ldrb	r2, [r3, #0]
 800a9ea:	6879      	ldr	r1, [r7, #4]
 800a9ec:	0013      	movs	r3, r2
 800a9ee:	009b      	lsls	r3, r3, #2
 800a9f0:	189b      	adds	r3, r3, r2
 800a9f2:	009b      	lsls	r3, r3, #2
 800a9f4:	18cb      	adds	r3, r1, r3
 800a9f6:	331c      	adds	r3, #28
 800a9f8:	681b      	ldr	r3, [r3, #0]
 800a9fa:	2b00      	cmp	r3, #0
 800a9fc:	d02b      	beq.n	800aa56 <USBD_CDC_DataIn+0x9e>
 800a9fe:	1cfb      	adds	r3, r7, #3
 800aa00:	781a      	ldrb	r2, [r3, #0]
 800aa02:	6879      	ldr	r1, [r7, #4]
 800aa04:	0013      	movs	r3, r2
 800aa06:	009b      	lsls	r3, r3, #2
 800aa08:	189b      	adds	r3, r3, r2
 800aa0a:	009b      	lsls	r3, r3, #2
 800aa0c:	18cb      	adds	r3, r1, r3
 800aa0e:	331c      	adds	r3, #28
 800aa10:	6818      	ldr	r0, [r3, #0]
 800aa12:	1cfb      	adds	r3, r7, #3
 800aa14:	781a      	ldrb	r2, [r3, #0]
 800aa16:	68b9      	ldr	r1, [r7, #8]
 800aa18:	0013      	movs	r3, r2
 800aa1a:	009b      	lsls	r3, r3, #2
 800aa1c:	189b      	adds	r3, r3, r2
 800aa1e:	00db      	lsls	r3, r3, #3
 800aa20:	18cb      	adds	r3, r1, r3
 800aa22:	3338      	adds	r3, #56	; 0x38
 800aa24:	681b      	ldr	r3, [r3, #0]
 800aa26:	0019      	movs	r1, r3
 800aa28:	f7f5 fc06 	bl	8000238 <__aeabi_uidivmod>
 800aa2c:	1e0b      	subs	r3, r1, #0
 800aa2e:	d112      	bne.n	800aa56 <USBD_CDC_DataIn+0x9e>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 800aa30:	1cfb      	adds	r3, r7, #3
 800aa32:	781a      	ldrb	r2, [r3, #0]
 800aa34:	6879      	ldr	r1, [r7, #4]
 800aa36:	0013      	movs	r3, r2
 800aa38:	009b      	lsls	r3, r3, #2
 800aa3a:	189b      	adds	r3, r3, r2
 800aa3c:	009b      	lsls	r3, r3, #2
 800aa3e:	18cb      	adds	r3, r1, r3
 800aa40:	331c      	adds	r3, #28
 800aa42:	2200      	movs	r2, #0
 800aa44:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800aa46:	1cfb      	adds	r3, r7, #3
 800aa48:	7819      	ldrb	r1, [r3, #0]
 800aa4a:	6878      	ldr	r0, [r7, #4]
 800aa4c:	2300      	movs	r3, #0
 800aa4e:	2200      	movs	r2, #0
 800aa50:	f001 fff7 	bl	800ca42 <USBD_LL_Transmit>
 800aa54:	e004      	b.n	800aa60 <USBD_CDC_DataIn+0xa8>
    }
    else
    {
      hcdc->TxState = 0U;
 800aa56:	68fa      	ldr	r2, [r7, #12]
 800aa58:	2385      	movs	r3, #133	; 0x85
 800aa5a:	009b      	lsls	r3, r3, #2
 800aa5c:	2100      	movs	r1, #0
 800aa5e:	50d1      	str	r1, [r2, r3]
    }
    return USBD_OK;
 800aa60:	2300      	movs	r3, #0
 800aa62:	e000      	b.n	800aa66 <USBD_CDC_DataIn+0xae>
  }
  else
  {
    return USBD_FAIL;
 800aa64:	2302      	movs	r3, #2
  }
}
 800aa66:	0018      	movs	r0, r3
 800aa68:	46bd      	mov	sp, r7
 800aa6a:	b004      	add	sp, #16
 800aa6c:	bd80      	pop	{r7, pc}

0800aa6e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800aa6e:	b580      	push	{r7, lr}
 800aa70:	b084      	sub	sp, #16
 800aa72:	af00      	add	r7, sp, #0
 800aa74:	6078      	str	r0, [r7, #4]
 800aa76:	000a      	movs	r2, r1
 800aa78:	1cfb      	adds	r3, r7, #3
 800aa7a:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800aa7c:	687a      	ldr	r2, [r7, #4]
 800aa7e:	23ae      	movs	r3, #174	; 0xae
 800aa80:	009b      	lsls	r3, r3, #2
 800aa82:	58d3      	ldr	r3, [r2, r3]
 800aa84:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800aa86:	1cfb      	adds	r3, r7, #3
 800aa88:	781a      	ldrb	r2, [r3, #0]
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	0011      	movs	r1, r2
 800aa8e:	0018      	movs	r0, r3
 800aa90:	f002 f845 	bl	800cb1e <USBD_LL_GetRxDataSize>
 800aa94:	0001      	movs	r1, r0
 800aa96:	68fa      	ldr	r2, [r7, #12]
 800aa98:	2383      	movs	r3, #131	; 0x83
 800aa9a:	009b      	lsls	r3, r3, #2
 800aa9c:	50d1      	str	r1, [r2, r3]

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 800aa9e:	687a      	ldr	r2, [r7, #4]
 800aaa0:	23ae      	movs	r3, #174	; 0xae
 800aaa2:	009b      	lsls	r3, r3, #2
 800aaa4:	58d3      	ldr	r3, [r2, r3]
 800aaa6:	2b00      	cmp	r3, #0
 800aaa8:	d011      	beq.n	800aace <USBD_CDC_DataOut+0x60>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800aaaa:	687a      	ldr	r2, [r7, #4]
 800aaac:	23af      	movs	r3, #175	; 0xaf
 800aaae:	009b      	lsls	r3, r3, #2
 800aab0:	58d3      	ldr	r3, [r2, r3]
 800aab2:	68da      	ldr	r2, [r3, #12]
 800aab4:	68f9      	ldr	r1, [r7, #12]
 800aab6:	2381      	movs	r3, #129	; 0x81
 800aab8:	009b      	lsls	r3, r3, #2
 800aaba:	58c8      	ldr	r0, [r1, r3]
 800aabc:	68fb      	ldr	r3, [r7, #12]
 800aabe:	2183      	movs	r1, #131	; 0x83
 800aac0:	0089      	lsls	r1, r1, #2
 800aac2:	468c      	mov	ip, r1
 800aac4:	4463      	add	r3, ip
 800aac6:	0019      	movs	r1, r3
 800aac8:	4790      	blx	r2

    return USBD_OK;
 800aaca:	2300      	movs	r3, #0
 800aacc:	e000      	b.n	800aad0 <USBD_CDC_DataOut+0x62>
  }
  else
  {
    return USBD_FAIL;
 800aace:	2302      	movs	r3, #2
  }
}
 800aad0:	0018      	movs	r0, r3
 800aad2:	46bd      	mov	sp, r7
 800aad4:	b004      	add	sp, #16
 800aad6:	bd80      	pop	{r7, pc}

0800aad8 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800aad8:	b590      	push	{r4, r7, lr}
 800aada:	b085      	sub	sp, #20
 800aadc:	af00      	add	r7, sp, #0
 800aade:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800aae0:	687a      	ldr	r2, [r7, #4]
 800aae2:	23ae      	movs	r3, #174	; 0xae
 800aae4:	009b      	lsls	r3, r3, #2
 800aae6:	58d3      	ldr	r3, [r2, r3]
 800aae8:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800aaea:	687a      	ldr	r2, [r7, #4]
 800aaec:	23af      	movs	r3, #175	; 0xaf
 800aaee:	009b      	lsls	r3, r3, #2
 800aaf0:	58d3      	ldr	r3, [r2, r3]
 800aaf2:	2b00      	cmp	r3, #0
 800aaf4:	d019      	beq.n	800ab2a <USBD_CDC_EP0_RxReady+0x52>
 800aaf6:	68fa      	ldr	r2, [r7, #12]
 800aaf8:	2380      	movs	r3, #128	; 0x80
 800aafa:	009b      	lsls	r3, r3, #2
 800aafc:	5cd3      	ldrb	r3, [r2, r3]
 800aafe:	2bff      	cmp	r3, #255	; 0xff
 800ab00:	d013      	beq.n	800ab2a <USBD_CDC_EP0_RxReady+0x52>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800ab02:	687a      	ldr	r2, [r7, #4]
 800ab04:	23af      	movs	r3, #175	; 0xaf
 800ab06:	009b      	lsls	r3, r3, #2
 800ab08:	58d3      	ldr	r3, [r2, r3]
 800ab0a:	689b      	ldr	r3, [r3, #8]
 800ab0c:	68f9      	ldr	r1, [r7, #12]
 800ab0e:	2280      	movs	r2, #128	; 0x80
 800ab10:	0092      	lsls	r2, r2, #2
 800ab12:	5c88      	ldrb	r0, [r1, r2]
                                                      (uint8_t *)(void *)hcdc->data,
 800ab14:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800ab16:	68fa      	ldr	r2, [r7, #12]
 800ab18:	4c06      	ldr	r4, [pc, #24]	; (800ab34 <USBD_CDC_EP0_RxReady+0x5c>)
 800ab1a:	5d12      	ldrb	r2, [r2, r4]
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800ab1c:	b292      	uxth	r2, r2
 800ab1e:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800ab20:	68fa      	ldr	r2, [r7, #12]
 800ab22:	2380      	movs	r3, #128	; 0x80
 800ab24:	009b      	lsls	r3, r3, #2
 800ab26:	21ff      	movs	r1, #255	; 0xff
 800ab28:	54d1      	strb	r1, [r2, r3]

  }
  return USBD_OK;
 800ab2a:	2300      	movs	r3, #0
}
 800ab2c:	0018      	movs	r0, r3
 800ab2e:	46bd      	mov	sp, r7
 800ab30:	b005      	add	sp, #20
 800ab32:	bd90      	pop	{r4, r7, pc}
 800ab34:	00000201 	.word	0x00000201

0800ab38 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800ab38:	b580      	push	{r7, lr}
 800ab3a:	b082      	sub	sp, #8
 800ab3c:	af00      	add	r7, sp, #0
 800ab3e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	2243      	movs	r2, #67	; 0x43
 800ab44:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 800ab46:	4b02      	ldr	r3, [pc, #8]	; (800ab50 <USBD_CDC_GetFSCfgDesc+0x18>)
}
 800ab48:	0018      	movs	r0, r3
 800ab4a:	46bd      	mov	sp, r7
 800ab4c:	b002      	add	sp, #8
 800ab4e:	bd80      	pop	{r7, pc}
 800ab50:	20000094 	.word	0x20000094

0800ab54 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800ab54:	b580      	push	{r7, lr}
 800ab56:	b082      	sub	sp, #8
 800ab58:	af00      	add	r7, sp, #0
 800ab5a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	2243      	movs	r2, #67	; 0x43
 800ab60:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 800ab62:	4b02      	ldr	r3, [pc, #8]	; (800ab6c <USBD_CDC_GetHSCfgDesc+0x18>)
}
 800ab64:	0018      	movs	r0, r3
 800ab66:	46bd      	mov	sp, r7
 800ab68:	b002      	add	sp, #8
 800ab6a:	bd80      	pop	{r7, pc}
 800ab6c:	20000050 	.word	0x20000050

0800ab70 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800ab70:	b580      	push	{r7, lr}
 800ab72:	b082      	sub	sp, #8
 800ab74:	af00      	add	r7, sp, #0
 800ab76:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	2243      	movs	r2, #67	; 0x43
 800ab7c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 800ab7e:	4b02      	ldr	r3, [pc, #8]	; (800ab88 <USBD_CDC_GetOtherSpeedCfgDesc+0x18>)
}
 800ab80:	0018      	movs	r0, r3
 800ab82:	46bd      	mov	sp, r7
 800ab84:	b002      	add	sp, #8
 800ab86:	bd80      	pop	{r7, pc}
 800ab88:	200000d8 	.word	0x200000d8

0800ab8c <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800ab8c:	b580      	push	{r7, lr}
 800ab8e:	b082      	sub	sp, #8
 800ab90:	af00      	add	r7, sp, #0
 800ab92:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	220a      	movs	r2, #10
 800ab98:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 800ab9a:	4b02      	ldr	r3, [pc, #8]	; (800aba4 <USBD_CDC_GetDeviceQualifierDescriptor+0x18>)
}
 800ab9c:	0018      	movs	r0, r3
 800ab9e:	46bd      	mov	sp, r7
 800aba0:	b002      	add	sp, #8
 800aba2:	bd80      	pop	{r7, pc}
 800aba4:	2000000c 	.word	0x2000000c

0800aba8 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 800aba8:	b580      	push	{r7, lr}
 800abaa:	b084      	sub	sp, #16
 800abac:	af00      	add	r7, sp, #0
 800abae:	6078      	str	r0, [r7, #4]
 800abb0:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 800abb2:	200f      	movs	r0, #15
 800abb4:	183b      	adds	r3, r7, r0
 800abb6:	2202      	movs	r2, #2
 800abb8:	701a      	strb	r2, [r3, #0]

  if (fops != NULL)
 800abba:	683b      	ldr	r3, [r7, #0]
 800abbc:	2b00      	cmp	r3, #0
 800abbe:	d007      	beq.n	800abd0 <USBD_CDC_RegisterInterface+0x28>
  {
    pdev->pUserData = fops;
 800abc0:	687a      	ldr	r2, [r7, #4]
 800abc2:	23af      	movs	r3, #175	; 0xaf
 800abc4:	009b      	lsls	r3, r3, #2
 800abc6:	6839      	ldr	r1, [r7, #0]
 800abc8:	50d1      	str	r1, [r2, r3]
    ret = USBD_OK;
 800abca:	183b      	adds	r3, r7, r0
 800abcc:	2200      	movs	r2, #0
 800abce:	701a      	strb	r2, [r3, #0]
  }

  return ret;
 800abd0:	230f      	movs	r3, #15
 800abd2:	18fb      	adds	r3, r7, r3
 800abd4:	781b      	ldrb	r3, [r3, #0]
}
 800abd6:	0018      	movs	r0, r3
 800abd8:	46bd      	mov	sp, r7
 800abda:	b004      	add	sp, #16
 800abdc:	bd80      	pop	{r7, pc}

0800abde <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 800abde:	b580      	push	{r7, lr}
 800abe0:	b086      	sub	sp, #24
 800abe2:	af00      	add	r7, sp, #0
 800abe4:	60f8      	str	r0, [r7, #12]
 800abe6:	60b9      	str	r1, [r7, #8]
 800abe8:	1dbb      	adds	r3, r7, #6
 800abea:	801a      	strh	r2, [r3, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800abec:	68fa      	ldr	r2, [r7, #12]
 800abee:	23ae      	movs	r3, #174	; 0xae
 800abf0:	009b      	lsls	r3, r3, #2
 800abf2:	58d3      	ldr	r3, [r2, r3]
 800abf4:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800abf6:	697a      	ldr	r2, [r7, #20]
 800abf8:	2382      	movs	r3, #130	; 0x82
 800abfa:	009b      	lsls	r3, r3, #2
 800abfc:	68b9      	ldr	r1, [r7, #8]
 800abfe:	50d1      	str	r1, [r2, r3]
  hcdc->TxLength = length;
 800ac00:	1dbb      	adds	r3, r7, #6
 800ac02:	8819      	ldrh	r1, [r3, #0]
 800ac04:	697a      	ldr	r2, [r7, #20]
 800ac06:	2384      	movs	r3, #132	; 0x84
 800ac08:	009b      	lsls	r3, r3, #2
 800ac0a:	50d1      	str	r1, [r2, r3]

  return USBD_OK;
 800ac0c:	2300      	movs	r3, #0
}
 800ac0e:	0018      	movs	r0, r3
 800ac10:	46bd      	mov	sp, r7
 800ac12:	b006      	add	sp, #24
 800ac14:	bd80      	pop	{r7, pc}

0800ac16 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 800ac16:	b580      	push	{r7, lr}
 800ac18:	b084      	sub	sp, #16
 800ac1a:	af00      	add	r7, sp, #0
 800ac1c:	6078      	str	r0, [r7, #4]
 800ac1e:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800ac20:	687a      	ldr	r2, [r7, #4]
 800ac22:	23ae      	movs	r3, #174	; 0xae
 800ac24:	009b      	lsls	r3, r3, #2
 800ac26:	58d3      	ldr	r3, [r2, r3]
 800ac28:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 800ac2a:	68fa      	ldr	r2, [r7, #12]
 800ac2c:	2381      	movs	r3, #129	; 0x81
 800ac2e:	009b      	lsls	r3, r3, #2
 800ac30:	6839      	ldr	r1, [r7, #0]
 800ac32:	50d1      	str	r1, [r2, r3]

  return USBD_OK;
 800ac34:	2300      	movs	r3, #0
}
 800ac36:	0018      	movs	r0, r3
 800ac38:	46bd      	mov	sp, r7
 800ac3a:	b004      	add	sp, #16
 800ac3c:	bd80      	pop	{r7, pc}

0800ac3e <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800ac3e:	b580      	push	{r7, lr}
 800ac40:	b084      	sub	sp, #16
 800ac42:	af00      	add	r7, sp, #0
 800ac44:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800ac46:	687a      	ldr	r2, [r7, #4]
 800ac48:	23ae      	movs	r3, #174	; 0xae
 800ac4a:	009b      	lsls	r3, r3, #2
 800ac4c:	58d3      	ldr	r3, [r2, r3]
 800ac4e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 800ac50:	687a      	ldr	r2, [r7, #4]
 800ac52:	23ae      	movs	r3, #174	; 0xae
 800ac54:	009b      	lsls	r3, r3, #2
 800ac56:	58d3      	ldr	r3, [r2, r3]
 800ac58:	2b00      	cmp	r3, #0
 800ac5a:	d022      	beq.n	800aca2 <USBD_CDC_TransmitPacket+0x64>
  {
    if (hcdc->TxState == 0U)
 800ac5c:	68fa      	ldr	r2, [r7, #12]
 800ac5e:	2385      	movs	r3, #133	; 0x85
 800ac60:	009b      	lsls	r3, r3, #2
 800ac62:	58d3      	ldr	r3, [r2, r3]
 800ac64:	2b00      	cmp	r3, #0
 800ac66:	d11a      	bne.n	800ac9e <USBD_CDC_TransmitPacket+0x60>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 800ac68:	68fa      	ldr	r2, [r7, #12]
 800ac6a:	2385      	movs	r3, #133	; 0x85
 800ac6c:	009b      	lsls	r3, r3, #2
 800ac6e:	2101      	movs	r1, #1
 800ac70:	50d1      	str	r1, [r2, r3]

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800ac72:	68fa      	ldr	r2, [r7, #12]
 800ac74:	2384      	movs	r3, #132	; 0x84
 800ac76:	009b      	lsls	r3, r3, #2
 800ac78:	58d2      	ldr	r2, [r2, r3]
 800ac7a:	687b      	ldr	r3, [r7, #4]
 800ac7c:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800ac7e:	68fa      	ldr	r2, [r7, #12]
 800ac80:	2382      	movs	r3, #130	; 0x82
 800ac82:	009b      	lsls	r3, r3, #2
 800ac84:	58d1      	ldr	r1, [r2, r3]
                       (uint16_t)hcdc->TxLength);
 800ac86:	68fa      	ldr	r2, [r7, #12]
 800ac88:	2384      	movs	r3, #132	; 0x84
 800ac8a:	009b      	lsls	r3, r3, #2
 800ac8c:	58d3      	ldr	r3, [r2, r3]
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800ac8e:	b29b      	uxth	r3, r3
 800ac90:	6878      	ldr	r0, [r7, #4]
 800ac92:	000a      	movs	r2, r1
 800ac94:	2181      	movs	r1, #129	; 0x81
 800ac96:	f001 fed4 	bl	800ca42 <USBD_LL_Transmit>

      return USBD_OK;
 800ac9a:	2300      	movs	r3, #0
 800ac9c:	e002      	b.n	800aca4 <USBD_CDC_TransmitPacket+0x66>
    }
    else
    {
      return USBD_BUSY;
 800ac9e:	2301      	movs	r3, #1
 800aca0:	e000      	b.n	800aca4 <USBD_CDC_TransmitPacket+0x66>
    }
  }
  else
  {
    return USBD_FAIL;
 800aca2:	2302      	movs	r3, #2
  }
}
 800aca4:	0018      	movs	r0, r3
 800aca6:	46bd      	mov	sp, r7
 800aca8:	b004      	add	sp, #16
 800acaa:	bd80      	pop	{r7, pc}

0800acac <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800acac:	b580      	push	{r7, lr}
 800acae:	b084      	sub	sp, #16
 800acb0:	af00      	add	r7, sp, #0
 800acb2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800acb4:	687a      	ldr	r2, [r7, #4]
 800acb6:	23ae      	movs	r3, #174	; 0xae
 800acb8:	009b      	lsls	r3, r3, #2
 800acba:	58d3      	ldr	r3, [r2, r3]
 800acbc:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 800acbe:	687a      	ldr	r2, [r7, #4]
 800acc0:	23ae      	movs	r3, #174	; 0xae
 800acc2:	009b      	lsls	r3, r3, #2
 800acc4:	58d3      	ldr	r3, [r2, r3]
 800acc6:	2b00      	cmp	r3, #0
 800acc8:	d019      	beq.n	800acfe <USBD_CDC_ReceivePacket+0x52>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800acca:	687b      	ldr	r3, [r7, #4]
 800accc:	7c1b      	ldrb	r3, [r3, #16]
 800acce:	2b00      	cmp	r3, #0
 800acd0:	d10a      	bne.n	800ace8 <USBD_CDC_ReceivePacket+0x3c>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800acd2:	68fa      	ldr	r2, [r7, #12]
 800acd4:	2381      	movs	r3, #129	; 0x81
 800acd6:	009b      	lsls	r3, r3, #2
 800acd8:	58d2      	ldr	r2, [r2, r3]
 800acda:	2380      	movs	r3, #128	; 0x80
 800acdc:	009b      	lsls	r3, r3, #2
 800acde:	6878      	ldr	r0, [r7, #4]
 800ace0:	2101      	movs	r1, #1
 800ace2:	f001 fee5 	bl	800cab0 <USBD_LL_PrepareReceive>
 800ace6:	e008      	b.n	800acfa <USBD_CDC_ReceivePacket+0x4e>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800ace8:	68fa      	ldr	r2, [r7, #12]
 800acea:	2381      	movs	r3, #129	; 0x81
 800acec:	009b      	lsls	r3, r3, #2
 800acee:	58d2      	ldr	r2, [r2, r3]
 800acf0:	6878      	ldr	r0, [r7, #4]
 800acf2:	2340      	movs	r3, #64	; 0x40
 800acf4:	2101      	movs	r1, #1
 800acf6:	f001 fedb 	bl	800cab0 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 800acfa:	2300      	movs	r3, #0
 800acfc:	e000      	b.n	800ad00 <USBD_CDC_ReceivePacket+0x54>
  }
  else
  {
    return USBD_FAIL;
 800acfe:	2302      	movs	r3, #2
  }
}
 800ad00:	0018      	movs	r0, r3
 800ad02:	46bd      	mov	sp, r7
 800ad04:	b004      	add	sp, #16
 800ad06:	bd80      	pop	{r7, pc}

0800ad08 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800ad08:	b580      	push	{r7, lr}
 800ad0a:	b084      	sub	sp, #16
 800ad0c:	af00      	add	r7, sp, #0
 800ad0e:	60f8      	str	r0, [r7, #12]
 800ad10:	60b9      	str	r1, [r7, #8]
 800ad12:	1dfb      	adds	r3, r7, #7
 800ad14:	701a      	strb	r2, [r3, #0]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800ad16:	68fb      	ldr	r3, [r7, #12]
 800ad18:	2b00      	cmp	r3, #0
 800ad1a:	d101      	bne.n	800ad20 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800ad1c:	2302      	movs	r3, #2
 800ad1e:	e020      	b.n	800ad62 <USBD_Init+0x5a>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 800ad20:	68fa      	ldr	r2, [r7, #12]
 800ad22:	23ad      	movs	r3, #173	; 0xad
 800ad24:	009b      	lsls	r3, r3, #2
 800ad26:	58d3      	ldr	r3, [r2, r3]
 800ad28:	2b00      	cmp	r3, #0
 800ad2a:	d004      	beq.n	800ad36 <USBD_Init+0x2e>
  {
    pdev->pClass = NULL;
 800ad2c:	68fa      	ldr	r2, [r7, #12]
 800ad2e:	23ad      	movs	r3, #173	; 0xad
 800ad30:	009b      	lsls	r3, r3, #2
 800ad32:	2100      	movs	r1, #0
 800ad34:	50d1      	str	r1, [r2, r3]
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800ad36:	68bb      	ldr	r3, [r7, #8]
 800ad38:	2b00      	cmp	r3, #0
 800ad3a:	d004      	beq.n	800ad46 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800ad3c:	68fa      	ldr	r2, [r7, #12]
 800ad3e:	23ac      	movs	r3, #172	; 0xac
 800ad40:	009b      	lsls	r3, r3, #2
 800ad42:	68b9      	ldr	r1, [r7, #8]
 800ad44:	50d1      	str	r1, [r2, r3]
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800ad46:	68fa      	ldr	r2, [r7, #12]
 800ad48:	23a7      	movs	r3, #167	; 0xa7
 800ad4a:	009b      	lsls	r3, r3, #2
 800ad4c:	2101      	movs	r1, #1
 800ad4e:	54d1      	strb	r1, [r2, r3]
  pdev->id = id;
 800ad50:	68fb      	ldr	r3, [r7, #12]
 800ad52:	1dfa      	adds	r2, r7, #7
 800ad54:	7812      	ldrb	r2, [r2, #0]
 800ad56:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800ad58:	68fb      	ldr	r3, [r7, #12]
 800ad5a:	0018      	movs	r0, r3
 800ad5c:	f001 fcd4 	bl	800c708 <USBD_LL_Init>

  return USBD_OK;
 800ad60:	2300      	movs	r3, #0
}
 800ad62:	0018      	movs	r0, r3
 800ad64:	46bd      	mov	sp, r7
 800ad66:	b004      	add	sp, #16
 800ad68:	bd80      	pop	{r7, pc}

0800ad6a <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800ad6a:	b580      	push	{r7, lr}
 800ad6c:	b084      	sub	sp, #16
 800ad6e:	af00      	add	r7, sp, #0
 800ad70:	6078      	str	r0, [r7, #4]
 800ad72:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 800ad74:	200f      	movs	r0, #15
 800ad76:	183b      	adds	r3, r7, r0
 800ad78:	2200      	movs	r2, #0
 800ad7a:	701a      	strb	r2, [r3, #0]
  if (pclass != NULL)
 800ad7c:	683b      	ldr	r3, [r7, #0]
 800ad7e:	2b00      	cmp	r3, #0
 800ad80:	d008      	beq.n	800ad94 <USBD_RegisterClass+0x2a>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 800ad82:	687a      	ldr	r2, [r7, #4]
 800ad84:	23ad      	movs	r3, #173	; 0xad
 800ad86:	009b      	lsls	r3, r3, #2
 800ad88:	6839      	ldr	r1, [r7, #0]
 800ad8a:	50d1      	str	r1, [r2, r3]
    status = USBD_OK;
 800ad8c:	183b      	adds	r3, r7, r0
 800ad8e:	2200      	movs	r2, #0
 800ad90:	701a      	strb	r2, [r3, #0]
 800ad92:	e003      	b.n	800ad9c <USBD_RegisterClass+0x32>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 800ad94:	230f      	movs	r3, #15
 800ad96:	18fb      	adds	r3, r7, r3
 800ad98:	2202      	movs	r2, #2
 800ad9a:	701a      	strb	r2, [r3, #0]
  }

  return status;
 800ad9c:	230f      	movs	r3, #15
 800ad9e:	18fb      	adds	r3, r7, r3
 800ada0:	781b      	ldrb	r3, [r3, #0]
}
 800ada2:	0018      	movs	r0, r3
 800ada4:	46bd      	mov	sp, r7
 800ada6:	b004      	add	sp, #16
 800ada8:	bd80      	pop	{r7, pc}

0800adaa <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 800adaa:	b580      	push	{r7, lr}
 800adac:	b082      	sub	sp, #8
 800adae:	af00      	add	r7, sp, #0
 800adb0:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 800adb2:	687b      	ldr	r3, [r7, #4]
 800adb4:	0018      	movs	r0, r3
 800adb6:	f001 fd0b 	bl	800c7d0 <USBD_LL_Start>

  return USBD_OK;
 800adba:	2300      	movs	r3, #0
}
 800adbc:	0018      	movs	r0, r3
 800adbe:	46bd      	mov	sp, r7
 800adc0:	b002      	add	sp, #8
 800adc2:	bd80      	pop	{r7, pc}

0800adc4 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800adc4:	b580      	push	{r7, lr}
 800adc6:	b082      	sub	sp, #8
 800adc8:	af00      	add	r7, sp, #0
 800adca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800adcc:	2300      	movs	r3, #0
}
 800adce:	0018      	movs	r0, r3
 800add0:	46bd      	mov	sp, r7
 800add2:	b002      	add	sp, #8
 800add4:	bd80      	pop	{r7, pc}

0800add6 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800add6:	b590      	push	{r4, r7, lr}
 800add8:	b085      	sub	sp, #20
 800adda:	af00      	add	r7, sp, #0
 800addc:	6078      	str	r0, [r7, #4]
 800adde:	000a      	movs	r2, r1
 800ade0:	1cfb      	adds	r3, r7, #3
 800ade2:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800ade4:	240f      	movs	r4, #15
 800ade6:	193b      	adds	r3, r7, r4
 800ade8:	2202      	movs	r2, #2
 800adea:	701a      	strb	r2, [r3, #0]

  if (pdev->pClass != NULL)
 800adec:	687a      	ldr	r2, [r7, #4]
 800adee:	23ad      	movs	r3, #173	; 0xad
 800adf0:	009b      	lsls	r3, r3, #2
 800adf2:	58d3      	ldr	r3, [r2, r3]
 800adf4:	2b00      	cmp	r3, #0
 800adf6:	d00e      	beq.n	800ae16 <USBD_SetClassConfig+0x40>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 800adf8:	687a      	ldr	r2, [r7, #4]
 800adfa:	23ad      	movs	r3, #173	; 0xad
 800adfc:	009b      	lsls	r3, r3, #2
 800adfe:	58d3      	ldr	r3, [r2, r3]
 800ae00:	681b      	ldr	r3, [r3, #0]
 800ae02:	1cfa      	adds	r2, r7, #3
 800ae04:	7811      	ldrb	r1, [r2, #0]
 800ae06:	687a      	ldr	r2, [r7, #4]
 800ae08:	0010      	movs	r0, r2
 800ae0a:	4798      	blx	r3
 800ae0c:	1e03      	subs	r3, r0, #0
 800ae0e:	d102      	bne.n	800ae16 <USBD_SetClassConfig+0x40>
    {
      ret = USBD_OK;
 800ae10:	193b      	adds	r3, r7, r4
 800ae12:	2200      	movs	r2, #0
 800ae14:	701a      	strb	r2, [r3, #0]
    }
  }

  return ret;
 800ae16:	230f      	movs	r3, #15
 800ae18:	18fb      	adds	r3, r7, r3
 800ae1a:	781b      	ldrb	r3, [r3, #0]
}
 800ae1c:	0018      	movs	r0, r3
 800ae1e:	46bd      	mov	sp, r7
 800ae20:	b005      	add	sp, #20
 800ae22:	bd90      	pop	{r4, r7, pc}

0800ae24 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800ae24:	b580      	push	{r7, lr}
 800ae26:	b082      	sub	sp, #8
 800ae28:	af00      	add	r7, sp, #0
 800ae2a:	6078      	str	r0, [r7, #4]
 800ae2c:	000a      	movs	r2, r1
 800ae2e:	1cfb      	adds	r3, r7, #3
 800ae30:	701a      	strb	r2, [r3, #0]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 800ae32:	687a      	ldr	r2, [r7, #4]
 800ae34:	23ad      	movs	r3, #173	; 0xad
 800ae36:	009b      	lsls	r3, r3, #2
 800ae38:	58d3      	ldr	r3, [r2, r3]
 800ae3a:	685b      	ldr	r3, [r3, #4]
 800ae3c:	1cfa      	adds	r2, r7, #3
 800ae3e:	7811      	ldrb	r1, [r2, #0]
 800ae40:	687a      	ldr	r2, [r7, #4]
 800ae42:	0010      	movs	r0, r2
 800ae44:	4798      	blx	r3

  return USBD_OK;
 800ae46:	2300      	movs	r3, #0
}
 800ae48:	0018      	movs	r0, r3
 800ae4a:	46bd      	mov	sp, r7
 800ae4c:	b002      	add	sp, #8
 800ae4e:	bd80      	pop	{r7, pc}

0800ae50 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800ae50:	b580      	push	{r7, lr}
 800ae52:	b082      	sub	sp, #8
 800ae54:	af00      	add	r7, sp, #0
 800ae56:	6078      	str	r0, [r7, #4]
 800ae58:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	22aa      	movs	r2, #170	; 0xaa
 800ae5e:	0092      	lsls	r2, r2, #2
 800ae60:	4694      	mov	ip, r2
 800ae62:	4463      	add	r3, ip
 800ae64:	683a      	ldr	r2, [r7, #0]
 800ae66:	0011      	movs	r1, r2
 800ae68:	0018      	movs	r0, r3
 800ae6a:	f001 f810 	bl	800be8e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800ae6e:	687a      	ldr	r2, [r7, #4]
 800ae70:	23a5      	movs	r3, #165	; 0xa5
 800ae72:	009b      	lsls	r3, r3, #2
 800ae74:	2101      	movs	r1, #1
 800ae76:	50d1      	str	r1, [r2, r3]

  pdev->ep0_data_len = pdev->request.wLength;
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	4a23      	ldr	r2, [pc, #140]	; (800af08 <USBD_LL_SetupStage+0xb8>)
 800ae7c:	5a9b      	ldrh	r3, [r3, r2]
 800ae7e:	0019      	movs	r1, r3
 800ae80:	687a      	ldr	r2, [r7, #4]
 800ae82:	23a6      	movs	r3, #166	; 0xa6
 800ae84:	009b      	lsls	r3, r3, #2
 800ae86:	50d1      	str	r1, [r2, r3]

  switch (pdev->request.bmRequest & 0x1FU)
 800ae88:	687a      	ldr	r2, [r7, #4]
 800ae8a:	23aa      	movs	r3, #170	; 0xaa
 800ae8c:	009b      	lsls	r3, r3, #2
 800ae8e:	5cd3      	ldrb	r3, [r2, r3]
 800ae90:	001a      	movs	r2, r3
 800ae92:	231f      	movs	r3, #31
 800ae94:	4013      	ands	r3, r2
 800ae96:	2b02      	cmp	r3, #2
 800ae98:	d019      	beq.n	800aece <USBD_LL_SetupStage+0x7e>
 800ae9a:	d822      	bhi.n	800aee2 <USBD_LL_SetupStage+0x92>
 800ae9c:	2b00      	cmp	r3, #0
 800ae9e:	d002      	beq.n	800aea6 <USBD_LL_SetupStage+0x56>
 800aea0:	2b01      	cmp	r3, #1
 800aea2:	d00a      	beq.n	800aeba <USBD_LL_SetupStage+0x6a>
 800aea4:	e01d      	b.n	800aee2 <USBD_LL_SetupStage+0x92>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 800aea6:	687b      	ldr	r3, [r7, #4]
 800aea8:	22aa      	movs	r2, #170	; 0xaa
 800aeaa:	0092      	lsls	r2, r2, #2
 800aeac:	189a      	adds	r2, r3, r2
 800aeae:	687b      	ldr	r3, [r7, #4]
 800aeb0:	0011      	movs	r1, r2
 800aeb2:	0018      	movs	r0, r3
 800aeb4:	f000 fa10 	bl	800b2d8 <USBD_StdDevReq>
      break;
 800aeb8:	e020      	b.n	800aefc <USBD_LL_SetupStage+0xac>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 800aeba:	687b      	ldr	r3, [r7, #4]
 800aebc:	22aa      	movs	r2, #170	; 0xaa
 800aebe:	0092      	lsls	r2, r2, #2
 800aec0:	189a      	adds	r2, r3, r2
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	0011      	movs	r1, r2
 800aec6:	0018      	movs	r0, r3
 800aec8:	f000 fa78 	bl	800b3bc <USBD_StdItfReq>
      break;
 800aecc:	e016      	b.n	800aefc <USBD_LL_SetupStage+0xac>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 800aece:	687b      	ldr	r3, [r7, #4]
 800aed0:	22aa      	movs	r2, #170	; 0xaa
 800aed2:	0092      	lsls	r2, r2, #2
 800aed4:	189a      	adds	r2, r3, r2
 800aed6:	687b      	ldr	r3, [r7, #4]
 800aed8:	0011      	movs	r1, r2
 800aeda:	0018      	movs	r0, r3
 800aedc:	f000 fac5 	bl	800b46a <USBD_StdEPReq>
      break;
 800aee0:	e00c      	b.n	800aefc <USBD_LL_SetupStage+0xac>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800aee2:	687a      	ldr	r2, [r7, #4]
 800aee4:	23aa      	movs	r3, #170	; 0xaa
 800aee6:	009b      	lsls	r3, r3, #2
 800aee8:	5cd3      	ldrb	r3, [r2, r3]
 800aeea:	227f      	movs	r2, #127	; 0x7f
 800aeec:	4393      	bics	r3, r2
 800aeee:	b2da      	uxtb	r2, r3
 800aef0:	687b      	ldr	r3, [r7, #4]
 800aef2:	0011      	movs	r1, r2
 800aef4:	0018      	movs	r0, r3
 800aef6:	f001 fcf2 	bl	800c8de <USBD_LL_StallEP>
      break;
 800aefa:	46c0      	nop			; (mov r8, r8)
  }

  return USBD_OK;
 800aefc:	2300      	movs	r3, #0
}
 800aefe:	0018      	movs	r0, r3
 800af00:	46bd      	mov	sp, r7
 800af02:	b002      	add	sp, #8
 800af04:	bd80      	pop	{r7, pc}
 800af06:	46c0      	nop			; (mov r8, r8)
 800af08:	000002ae 	.word	0x000002ae

0800af0c <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800af0c:	b580      	push	{r7, lr}
 800af0e:	b086      	sub	sp, #24
 800af10:	af00      	add	r7, sp, #0
 800af12:	60f8      	str	r0, [r7, #12]
 800af14:	607a      	str	r2, [r7, #4]
 800af16:	200b      	movs	r0, #11
 800af18:	183b      	adds	r3, r7, r0
 800af1a:	1c0a      	adds	r2, r1, #0
 800af1c:	701a      	strb	r2, [r3, #0]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800af1e:	183b      	adds	r3, r7, r0
 800af20:	781b      	ldrb	r3, [r3, #0]
 800af22:	2b00      	cmp	r3, #0
 800af24:	d154      	bne.n	800afd0 <USBD_LL_DataOutStage+0xc4>
  {
    pep = &pdev->ep_out[0];
 800af26:	68fb      	ldr	r3, [r7, #12]
 800af28:	3355      	adds	r3, #85	; 0x55
 800af2a:	33ff      	adds	r3, #255	; 0xff
 800af2c:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800af2e:	68fa      	ldr	r2, [r7, #12]
 800af30:	23a5      	movs	r3, #165	; 0xa5
 800af32:	009b      	lsls	r3, r3, #2
 800af34:	58d3      	ldr	r3, [r2, r3]
 800af36:	2b03      	cmp	r3, #3
 800af38:	d139      	bne.n	800afae <USBD_LL_DataOutStage+0xa2>
    {
      if (pep->rem_length > pep->maxpacket)
 800af3a:	697b      	ldr	r3, [r7, #20]
 800af3c:	68da      	ldr	r2, [r3, #12]
 800af3e:	697b      	ldr	r3, [r7, #20]
 800af40:	691b      	ldr	r3, [r3, #16]
 800af42:	429a      	cmp	r2, r3
 800af44:	d919      	bls.n	800af7a <USBD_LL_DataOutStage+0x6e>
      {
        pep->rem_length -= pep->maxpacket;
 800af46:	697b      	ldr	r3, [r7, #20]
 800af48:	68da      	ldr	r2, [r3, #12]
 800af4a:	697b      	ldr	r3, [r7, #20]
 800af4c:	691b      	ldr	r3, [r3, #16]
 800af4e:	1ad2      	subs	r2, r2, r3
 800af50:	697b      	ldr	r3, [r7, #20]
 800af52:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800af54:	697b      	ldr	r3, [r7, #20]
 800af56:	68da      	ldr	r2, [r3, #12]
 800af58:	697b      	ldr	r3, [r7, #20]
 800af5a:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800af5c:	429a      	cmp	r2, r3
 800af5e:	d203      	bcs.n	800af68 <USBD_LL_DataOutStage+0x5c>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800af60:	697b      	ldr	r3, [r7, #20]
 800af62:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 800af64:	b29b      	uxth	r3, r3
 800af66:	e002      	b.n	800af6e <USBD_LL_DataOutStage+0x62>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800af68:	697b      	ldr	r3, [r7, #20]
 800af6a:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800af6c:	b29b      	uxth	r3, r3
 800af6e:	6879      	ldr	r1, [r7, #4]
 800af70:	68f8      	ldr	r0, [r7, #12]
 800af72:	001a      	movs	r2, r3
 800af74:	f001 f89b 	bl	800c0ae <USBD_CtlContinueRx>
 800af78:	e045      	b.n	800b006 <USBD_LL_DataOutStage+0xfa>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800af7a:	68fa      	ldr	r2, [r7, #12]
 800af7c:	23ad      	movs	r3, #173	; 0xad
 800af7e:	009b      	lsls	r3, r3, #2
 800af80:	58d3      	ldr	r3, [r2, r3]
 800af82:	691b      	ldr	r3, [r3, #16]
 800af84:	2b00      	cmp	r3, #0
 800af86:	d00d      	beq.n	800afa4 <USBD_LL_DataOutStage+0x98>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800af88:	68fa      	ldr	r2, [r7, #12]
 800af8a:	23a7      	movs	r3, #167	; 0xa7
 800af8c:	009b      	lsls	r3, r3, #2
 800af8e:	5cd3      	ldrb	r3, [r2, r3]
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800af90:	2b03      	cmp	r3, #3
 800af92:	d107      	bne.n	800afa4 <USBD_LL_DataOutStage+0x98>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800af94:	68fa      	ldr	r2, [r7, #12]
 800af96:	23ad      	movs	r3, #173	; 0xad
 800af98:	009b      	lsls	r3, r3, #2
 800af9a:	58d3      	ldr	r3, [r2, r3]
 800af9c:	691b      	ldr	r3, [r3, #16]
 800af9e:	68fa      	ldr	r2, [r7, #12]
 800afa0:	0010      	movs	r0, r2
 800afa2:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 800afa4:	68fb      	ldr	r3, [r7, #12]
 800afa6:	0018      	movs	r0, r3
 800afa8:	f001 f894 	bl	800c0d4 <USBD_CtlSendStatus>
 800afac:	e02b      	b.n	800b006 <USBD_LL_DataOutStage+0xfa>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 800afae:	68fa      	ldr	r2, [r7, #12]
 800afb0:	23a5      	movs	r3, #165	; 0xa5
 800afb2:	009b      	lsls	r3, r3, #2
 800afb4:	58d3      	ldr	r3, [r2, r3]
 800afb6:	2b05      	cmp	r3, #5
 800afb8:	d125      	bne.n	800b006 <USBD_LL_DataOutStage+0xfa>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 800afba:	68fa      	ldr	r2, [r7, #12]
 800afbc:	23a5      	movs	r3, #165	; 0xa5
 800afbe:	009b      	lsls	r3, r3, #2
 800afc0:	2100      	movs	r1, #0
 800afc2:	50d1      	str	r1, [r2, r3]
        USBD_LL_StallEP(pdev, 0U);
 800afc4:	68fb      	ldr	r3, [r7, #12]
 800afc6:	2100      	movs	r1, #0
 800afc8:	0018      	movs	r0, r3
 800afca:	f001 fc88 	bl	800c8de <USBD_LL_StallEP>
 800afce:	e01a      	b.n	800b006 <USBD_LL_DataOutStage+0xfa>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800afd0:	68fa      	ldr	r2, [r7, #12]
 800afd2:	23ad      	movs	r3, #173	; 0xad
 800afd4:	009b      	lsls	r3, r3, #2
 800afd6:	58d3      	ldr	r3, [r2, r3]
 800afd8:	699b      	ldr	r3, [r3, #24]
 800afda:	2b00      	cmp	r3, #0
 800afdc:	d011      	beq.n	800b002 <USBD_LL_DataOutStage+0xf6>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800afde:	68fa      	ldr	r2, [r7, #12]
 800afe0:	23a7      	movs	r3, #167	; 0xa7
 800afe2:	009b      	lsls	r3, r3, #2
 800afe4:	5cd3      	ldrb	r3, [r2, r3]
  else if ((pdev->pClass->DataOut != NULL) &&
 800afe6:	2b03      	cmp	r3, #3
 800afe8:	d10b      	bne.n	800b002 <USBD_LL_DataOutStage+0xf6>
  {
    pdev->pClass->DataOut(pdev, epnum);
 800afea:	68fa      	ldr	r2, [r7, #12]
 800afec:	23ad      	movs	r3, #173	; 0xad
 800afee:	009b      	lsls	r3, r3, #2
 800aff0:	58d3      	ldr	r3, [r2, r3]
 800aff2:	699b      	ldr	r3, [r3, #24]
 800aff4:	220b      	movs	r2, #11
 800aff6:	18ba      	adds	r2, r7, r2
 800aff8:	7811      	ldrb	r1, [r2, #0]
 800affa:	68fa      	ldr	r2, [r7, #12]
 800affc:	0010      	movs	r0, r2
 800affe:	4798      	blx	r3
 800b000:	e001      	b.n	800b006 <USBD_LL_DataOutStage+0xfa>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800b002:	2302      	movs	r3, #2
 800b004:	e000      	b.n	800b008 <USBD_LL_DataOutStage+0xfc>
  }

  return USBD_OK;
 800b006:	2300      	movs	r3, #0
}
 800b008:	0018      	movs	r0, r3
 800b00a:	46bd      	mov	sp, r7
 800b00c:	b006      	add	sp, #24
 800b00e:	bd80      	pop	{r7, pc}

0800b010 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800b010:	b580      	push	{r7, lr}
 800b012:	b086      	sub	sp, #24
 800b014:	af00      	add	r7, sp, #0
 800b016:	60f8      	str	r0, [r7, #12]
 800b018:	607a      	str	r2, [r7, #4]
 800b01a:	200b      	movs	r0, #11
 800b01c:	183b      	adds	r3, r7, r0
 800b01e:	1c0a      	adds	r2, r1, #0
 800b020:	701a      	strb	r2, [r3, #0]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800b022:	183b      	adds	r3, r7, r0
 800b024:	781b      	ldrb	r3, [r3, #0]
 800b026:	2b00      	cmp	r3, #0
 800b028:	d000      	beq.n	800b02c <USBD_LL_DataInStage+0x1c>
 800b02a:	e08e      	b.n	800b14a <USBD_LL_DataInStage+0x13a>
  {
    pep = &pdev->ep_in[0];
 800b02c:	68fb      	ldr	r3, [r7, #12]
 800b02e:	3314      	adds	r3, #20
 800b030:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800b032:	68fa      	ldr	r2, [r7, #12]
 800b034:	23a5      	movs	r3, #165	; 0xa5
 800b036:	009b      	lsls	r3, r3, #2
 800b038:	58d3      	ldr	r3, [r2, r3]
 800b03a:	2b02      	cmp	r3, #2
 800b03c:	d164      	bne.n	800b108 <USBD_LL_DataInStage+0xf8>
    {
      if (pep->rem_length > pep->maxpacket)
 800b03e:	697b      	ldr	r3, [r7, #20]
 800b040:	68da      	ldr	r2, [r3, #12]
 800b042:	697b      	ldr	r3, [r7, #20]
 800b044:	691b      	ldr	r3, [r3, #16]
 800b046:	429a      	cmp	r2, r3
 800b048:	d915      	bls.n	800b076 <USBD_LL_DataInStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 800b04a:	697b      	ldr	r3, [r7, #20]
 800b04c:	68da      	ldr	r2, [r3, #12]
 800b04e:	697b      	ldr	r3, [r7, #20]
 800b050:	691b      	ldr	r3, [r3, #16]
 800b052:	1ad2      	subs	r2, r2, r3
 800b054:	697b      	ldr	r3, [r7, #20]
 800b056:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 800b058:	697b      	ldr	r3, [r7, #20]
 800b05a:	68db      	ldr	r3, [r3, #12]
 800b05c:	b29a      	uxth	r2, r3
 800b05e:	6879      	ldr	r1, [r7, #4]
 800b060:	68fb      	ldr	r3, [r7, #12]
 800b062:	0018      	movs	r0, r3
 800b064:	f000 ffec 	bl	800c040 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b068:	68f8      	ldr	r0, [r7, #12]
 800b06a:	2300      	movs	r3, #0
 800b06c:	2200      	movs	r2, #0
 800b06e:	2100      	movs	r1, #0
 800b070:	f001 fd1e 	bl	800cab0 <USBD_LL_PrepareReceive>
 800b074:	e059      	b.n	800b12a <USBD_LL_DataInStage+0x11a>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800b076:	697b      	ldr	r3, [r7, #20]
 800b078:	689a      	ldr	r2, [r3, #8]
 800b07a:	697b      	ldr	r3, [r7, #20]
 800b07c:	691b      	ldr	r3, [r3, #16]
 800b07e:	0019      	movs	r1, r3
 800b080:	0010      	movs	r0, r2
 800b082:	f7f5 f8d9 	bl	8000238 <__aeabi_uidivmod>
 800b086:	1e0b      	subs	r3, r1, #0
 800b088:	d11f      	bne.n	800b0ca <USBD_LL_DataInStage+0xba>
            (pep->total_length >= pep->maxpacket) &&
 800b08a:	697b      	ldr	r3, [r7, #20]
 800b08c:	689a      	ldr	r2, [r3, #8]
 800b08e:	697b      	ldr	r3, [r7, #20]
 800b090:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800b092:	429a      	cmp	r2, r3
 800b094:	d319      	bcc.n	800b0ca <USBD_LL_DataInStage+0xba>
            (pep->total_length < pdev->ep0_data_len))
 800b096:	697b      	ldr	r3, [r7, #20]
 800b098:	689a      	ldr	r2, [r3, #8]
 800b09a:	68f9      	ldr	r1, [r7, #12]
 800b09c:	23a6      	movs	r3, #166	; 0xa6
 800b09e:	009b      	lsls	r3, r3, #2
 800b0a0:	58cb      	ldr	r3, [r1, r3]
            (pep->total_length >= pep->maxpacket) &&
 800b0a2:	429a      	cmp	r2, r3
 800b0a4:	d211      	bcs.n	800b0ca <USBD_LL_DataInStage+0xba>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800b0a6:	68fb      	ldr	r3, [r7, #12]
 800b0a8:	2200      	movs	r2, #0
 800b0aa:	2100      	movs	r1, #0
 800b0ac:	0018      	movs	r0, r3
 800b0ae:	f000 ffc7 	bl	800c040 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800b0b2:	68fa      	ldr	r2, [r7, #12]
 800b0b4:	23a6      	movs	r3, #166	; 0xa6
 800b0b6:	009b      	lsls	r3, r3, #2
 800b0b8:	2100      	movs	r1, #0
 800b0ba:	50d1      	str	r1, [r2, r3]

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b0bc:	68f8      	ldr	r0, [r7, #12]
 800b0be:	2300      	movs	r3, #0
 800b0c0:	2200      	movs	r2, #0
 800b0c2:	2100      	movs	r1, #0
 800b0c4:	f001 fcf4 	bl	800cab0 <USBD_LL_PrepareReceive>
 800b0c8:	e02f      	b.n	800b12a <USBD_LL_DataInStage+0x11a>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800b0ca:	68fa      	ldr	r2, [r7, #12]
 800b0cc:	23ad      	movs	r3, #173	; 0xad
 800b0ce:	009b      	lsls	r3, r3, #2
 800b0d0:	58d3      	ldr	r3, [r2, r3]
 800b0d2:	68db      	ldr	r3, [r3, #12]
 800b0d4:	2b00      	cmp	r3, #0
 800b0d6:	d00d      	beq.n	800b0f4 <USBD_LL_DataInStage+0xe4>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800b0d8:	68fa      	ldr	r2, [r7, #12]
 800b0da:	23a7      	movs	r3, #167	; 0xa7
 800b0dc:	009b      	lsls	r3, r3, #2
 800b0de:	5cd3      	ldrb	r3, [r2, r3]
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800b0e0:	2b03      	cmp	r3, #3
 800b0e2:	d107      	bne.n	800b0f4 <USBD_LL_DataInStage+0xe4>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800b0e4:	68fa      	ldr	r2, [r7, #12]
 800b0e6:	23ad      	movs	r3, #173	; 0xad
 800b0e8:	009b      	lsls	r3, r3, #2
 800b0ea:	58d3      	ldr	r3, [r2, r3]
 800b0ec:	68db      	ldr	r3, [r3, #12]
 800b0ee:	68fa      	ldr	r2, [r7, #12]
 800b0f0:	0010      	movs	r0, r2
 800b0f2:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 800b0f4:	68fb      	ldr	r3, [r7, #12]
 800b0f6:	2180      	movs	r1, #128	; 0x80
 800b0f8:	0018      	movs	r0, r3
 800b0fa:	f001 fbf0 	bl	800c8de <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800b0fe:	68fb      	ldr	r3, [r7, #12]
 800b100:	0018      	movs	r0, r3
 800b102:	f000 fffb 	bl	800c0fc <USBD_CtlReceiveStatus>
 800b106:	e010      	b.n	800b12a <USBD_LL_DataInStage+0x11a>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800b108:	68fa      	ldr	r2, [r7, #12]
 800b10a:	23a5      	movs	r3, #165	; 0xa5
 800b10c:	009b      	lsls	r3, r3, #2
 800b10e:	58d3      	ldr	r3, [r2, r3]
 800b110:	2b04      	cmp	r3, #4
 800b112:	d005      	beq.n	800b120 <USBD_LL_DataInStage+0x110>
          (pdev->ep0_state == USBD_EP0_IDLE))
 800b114:	68fa      	ldr	r2, [r7, #12]
 800b116:	23a5      	movs	r3, #165	; 0xa5
 800b118:	009b      	lsls	r3, r3, #2
 800b11a:	58d3      	ldr	r3, [r2, r3]
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800b11c:	2b00      	cmp	r3, #0
 800b11e:	d104      	bne.n	800b12a <USBD_LL_DataInStage+0x11a>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 800b120:	68fb      	ldr	r3, [r7, #12]
 800b122:	2180      	movs	r1, #128	; 0x80
 800b124:	0018      	movs	r0, r3
 800b126:	f001 fbda 	bl	800c8de <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 800b12a:	68fa      	ldr	r2, [r7, #12]
 800b12c:	23a8      	movs	r3, #168	; 0xa8
 800b12e:	009b      	lsls	r3, r3, #2
 800b130:	5cd3      	ldrb	r3, [r2, r3]
 800b132:	2b01      	cmp	r3, #1
 800b134:	d124      	bne.n	800b180 <USBD_LL_DataInStage+0x170>
    {
      USBD_RunTestMode(pdev);
 800b136:	68fb      	ldr	r3, [r7, #12]
 800b138:	0018      	movs	r0, r3
 800b13a:	f7ff fe43 	bl	800adc4 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800b13e:	68fa      	ldr	r2, [r7, #12]
 800b140:	23a8      	movs	r3, #168	; 0xa8
 800b142:	009b      	lsls	r3, r3, #2
 800b144:	2100      	movs	r1, #0
 800b146:	54d1      	strb	r1, [r2, r3]
 800b148:	e01a      	b.n	800b180 <USBD_LL_DataInStage+0x170>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800b14a:	68fa      	ldr	r2, [r7, #12]
 800b14c:	23ad      	movs	r3, #173	; 0xad
 800b14e:	009b      	lsls	r3, r3, #2
 800b150:	58d3      	ldr	r3, [r2, r3]
 800b152:	695b      	ldr	r3, [r3, #20]
 800b154:	2b00      	cmp	r3, #0
 800b156:	d011      	beq.n	800b17c <USBD_LL_DataInStage+0x16c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800b158:	68fa      	ldr	r2, [r7, #12]
 800b15a:	23a7      	movs	r3, #167	; 0xa7
 800b15c:	009b      	lsls	r3, r3, #2
 800b15e:	5cd3      	ldrb	r3, [r2, r3]
  else if ((pdev->pClass->DataIn != NULL) &&
 800b160:	2b03      	cmp	r3, #3
 800b162:	d10b      	bne.n	800b17c <USBD_LL_DataInStage+0x16c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 800b164:	68fa      	ldr	r2, [r7, #12]
 800b166:	23ad      	movs	r3, #173	; 0xad
 800b168:	009b      	lsls	r3, r3, #2
 800b16a:	58d3      	ldr	r3, [r2, r3]
 800b16c:	695b      	ldr	r3, [r3, #20]
 800b16e:	220b      	movs	r2, #11
 800b170:	18ba      	adds	r2, r7, r2
 800b172:	7811      	ldrb	r1, [r2, #0]
 800b174:	68fa      	ldr	r2, [r7, #12]
 800b176:	0010      	movs	r0, r2
 800b178:	4798      	blx	r3
 800b17a:	e001      	b.n	800b180 <USBD_LL_DataInStage+0x170>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800b17c:	2302      	movs	r3, #2
 800b17e:	e000      	b.n	800b182 <USBD_LL_DataInStage+0x172>
  }

  return USBD_OK;
 800b180:	2300      	movs	r3, #0
}
 800b182:	0018      	movs	r0, r3
 800b184:	46bd      	mov	sp, r7
 800b186:	b006      	add	sp, #24
 800b188:	bd80      	pop	{r7, pc}

0800b18a <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800b18a:	b580      	push	{r7, lr}
 800b18c:	b082      	sub	sp, #8
 800b18e:	af00      	add	r7, sp, #0
 800b190:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800b192:	6878      	ldr	r0, [r7, #4]
 800b194:	2340      	movs	r3, #64	; 0x40
 800b196:	2200      	movs	r2, #0
 800b198:	2100      	movs	r1, #0
 800b19a:	f001 fb3e 	bl	800c81a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800b19e:	687a      	ldr	r2, [r7, #4]
 800b1a0:	23ac      	movs	r3, #172	; 0xac
 800b1a2:	005b      	lsls	r3, r3, #1
 800b1a4:	2101      	movs	r1, #1
 800b1a6:	50d1      	str	r1, [r2, r3]

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800b1a8:	687a      	ldr	r2, [r7, #4]
 800b1aa:	23b2      	movs	r3, #178	; 0xb2
 800b1ac:	005b      	lsls	r3, r3, #1
 800b1ae:	2140      	movs	r1, #64	; 0x40
 800b1b0:	50d1      	str	r1, [r2, r3]

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800b1b2:	6878      	ldr	r0, [r7, #4]
 800b1b4:	2340      	movs	r3, #64	; 0x40
 800b1b6:	2200      	movs	r2, #0
 800b1b8:	2180      	movs	r1, #128	; 0x80
 800b1ba:	f001 fb2e 	bl	800c81a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800b1be:	687b      	ldr	r3, [r7, #4]
 800b1c0:	2201      	movs	r2, #1
 800b1c2:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800b1c4:	687b      	ldr	r3, [r7, #4]
 800b1c6:	2240      	movs	r2, #64	; 0x40
 800b1c8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b1ca:	687a      	ldr	r2, [r7, #4]
 800b1cc:	23a7      	movs	r3, #167	; 0xa7
 800b1ce:	009b      	lsls	r3, r3, #2
 800b1d0:	2101      	movs	r1, #1
 800b1d2:	54d1      	strb	r1, [r2, r3]
  pdev->ep0_state = USBD_EP0_IDLE;
 800b1d4:	687a      	ldr	r2, [r7, #4]
 800b1d6:	23a5      	movs	r3, #165	; 0xa5
 800b1d8:	009b      	lsls	r3, r3, #2
 800b1da:	2100      	movs	r1, #0
 800b1dc:	50d1      	str	r1, [r2, r3]
  pdev->dev_config = 0U;
 800b1de:	687b      	ldr	r3, [r7, #4]
 800b1e0:	2200      	movs	r2, #0
 800b1e2:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800b1e4:	687a      	ldr	r2, [r7, #4]
 800b1e6:	23a9      	movs	r3, #169	; 0xa9
 800b1e8:	009b      	lsls	r3, r3, #2
 800b1ea:	2100      	movs	r1, #0
 800b1ec:	50d1      	str	r1, [r2, r3]

  if (pdev->pClassData)
 800b1ee:	687a      	ldr	r2, [r7, #4]
 800b1f0:	23ae      	movs	r3, #174	; 0xae
 800b1f2:	009b      	lsls	r3, r3, #2
 800b1f4:	58d3      	ldr	r3, [r2, r3]
 800b1f6:	2b00      	cmp	r3, #0
 800b1f8:	d00a      	beq.n	800b210 <USBD_LL_Reset+0x86>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800b1fa:	687a      	ldr	r2, [r7, #4]
 800b1fc:	23ad      	movs	r3, #173	; 0xad
 800b1fe:	009b      	lsls	r3, r3, #2
 800b200:	58d3      	ldr	r3, [r2, r3]
 800b202:	685a      	ldr	r2, [r3, #4]
 800b204:	687b      	ldr	r3, [r7, #4]
 800b206:	685b      	ldr	r3, [r3, #4]
 800b208:	b2d9      	uxtb	r1, r3
 800b20a:	687b      	ldr	r3, [r7, #4]
 800b20c:	0018      	movs	r0, r3
 800b20e:	4790      	blx	r2
  }

  return USBD_OK;
 800b210:	2300      	movs	r3, #0
}
 800b212:	0018      	movs	r0, r3
 800b214:	46bd      	mov	sp, r7
 800b216:	b002      	add	sp, #8
 800b218:	bd80      	pop	{r7, pc}

0800b21a <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800b21a:	b580      	push	{r7, lr}
 800b21c:	b082      	sub	sp, #8
 800b21e:	af00      	add	r7, sp, #0
 800b220:	6078      	str	r0, [r7, #4]
 800b222:	000a      	movs	r2, r1
 800b224:	1cfb      	adds	r3, r7, #3
 800b226:	701a      	strb	r2, [r3, #0]
  pdev->dev_speed = speed;
 800b228:	687b      	ldr	r3, [r7, #4]
 800b22a:	1cfa      	adds	r2, r7, #3
 800b22c:	7812      	ldrb	r2, [r2, #0]
 800b22e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800b230:	2300      	movs	r3, #0
}
 800b232:	0018      	movs	r0, r3
 800b234:	46bd      	mov	sp, r7
 800b236:	b002      	add	sp, #8
 800b238:	bd80      	pop	{r7, pc}
	...

0800b23c <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800b23c:	b580      	push	{r7, lr}
 800b23e:	b082      	sub	sp, #8
 800b240:	af00      	add	r7, sp, #0
 800b242:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 800b244:	687a      	ldr	r2, [r7, #4]
 800b246:	23a7      	movs	r3, #167	; 0xa7
 800b248:	009b      	lsls	r3, r3, #2
 800b24a:	5cd1      	ldrb	r1, [r2, r3]
 800b24c:	687b      	ldr	r3, [r7, #4]
 800b24e:	4a06      	ldr	r2, [pc, #24]	; (800b268 <USBD_LL_Suspend+0x2c>)
 800b250:	5499      	strb	r1, [r3, r2]
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800b252:	687a      	ldr	r2, [r7, #4]
 800b254:	23a7      	movs	r3, #167	; 0xa7
 800b256:	009b      	lsls	r3, r3, #2
 800b258:	2104      	movs	r1, #4
 800b25a:	54d1      	strb	r1, [r2, r3]

  return USBD_OK;
 800b25c:	2300      	movs	r3, #0
}
 800b25e:	0018      	movs	r0, r3
 800b260:	46bd      	mov	sp, r7
 800b262:	b002      	add	sp, #8
 800b264:	bd80      	pop	{r7, pc}
 800b266:	46c0      	nop			; (mov r8, r8)
 800b268:	0000029d 	.word	0x0000029d

0800b26c <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800b26c:	b580      	push	{r7, lr}
 800b26e:	b082      	sub	sp, #8
 800b270:	af00      	add	r7, sp, #0
 800b272:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800b274:	687a      	ldr	r2, [r7, #4]
 800b276:	23a7      	movs	r3, #167	; 0xa7
 800b278:	009b      	lsls	r3, r3, #2
 800b27a:	5cd3      	ldrb	r3, [r2, r3]
 800b27c:	2b04      	cmp	r3, #4
 800b27e:	d106      	bne.n	800b28e <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800b280:	687b      	ldr	r3, [r7, #4]
 800b282:	4a05      	ldr	r2, [pc, #20]	; (800b298 <USBD_LL_Resume+0x2c>)
 800b284:	5c99      	ldrb	r1, [r3, r2]
 800b286:	687a      	ldr	r2, [r7, #4]
 800b288:	23a7      	movs	r3, #167	; 0xa7
 800b28a:	009b      	lsls	r3, r3, #2
 800b28c:	54d1      	strb	r1, [r2, r3]
  }

  return USBD_OK;
 800b28e:	2300      	movs	r3, #0
}
 800b290:	0018      	movs	r0, r3
 800b292:	46bd      	mov	sp, r7
 800b294:	b002      	add	sp, #8
 800b296:	bd80      	pop	{r7, pc}
 800b298:	0000029d 	.word	0x0000029d

0800b29c <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800b29c:	b580      	push	{r7, lr}
 800b29e:	b082      	sub	sp, #8
 800b2a0:	af00      	add	r7, sp, #0
 800b2a2:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b2a4:	687a      	ldr	r2, [r7, #4]
 800b2a6:	23a7      	movs	r3, #167	; 0xa7
 800b2a8:	009b      	lsls	r3, r3, #2
 800b2aa:	5cd3      	ldrb	r3, [r2, r3]
 800b2ac:	2b03      	cmp	r3, #3
 800b2ae:	d10e      	bne.n	800b2ce <USBD_LL_SOF+0x32>
  {
    if (pdev->pClass->SOF != NULL)
 800b2b0:	687a      	ldr	r2, [r7, #4]
 800b2b2:	23ad      	movs	r3, #173	; 0xad
 800b2b4:	009b      	lsls	r3, r3, #2
 800b2b6:	58d3      	ldr	r3, [r2, r3]
 800b2b8:	69db      	ldr	r3, [r3, #28]
 800b2ba:	2b00      	cmp	r3, #0
 800b2bc:	d007      	beq.n	800b2ce <USBD_LL_SOF+0x32>
    {
      pdev->pClass->SOF(pdev);
 800b2be:	687a      	ldr	r2, [r7, #4]
 800b2c0:	23ad      	movs	r3, #173	; 0xad
 800b2c2:	009b      	lsls	r3, r3, #2
 800b2c4:	58d3      	ldr	r3, [r2, r3]
 800b2c6:	69db      	ldr	r3, [r3, #28]
 800b2c8:	687a      	ldr	r2, [r7, #4]
 800b2ca:	0010      	movs	r0, r2
 800b2cc:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800b2ce:	2300      	movs	r3, #0
}
 800b2d0:	0018      	movs	r0, r3
 800b2d2:	46bd      	mov	sp, r7
 800b2d4:	b002      	add	sp, #8
 800b2d6:	bd80      	pop	{r7, pc}

0800b2d8 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 800b2d8:	b580      	push	{r7, lr}
 800b2da:	b084      	sub	sp, #16
 800b2dc:	af00      	add	r7, sp, #0
 800b2de:	6078      	str	r0, [r7, #4]
 800b2e0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b2e2:	230f      	movs	r3, #15
 800b2e4:	18fb      	adds	r3, r7, r3
 800b2e6:	2200      	movs	r2, #0
 800b2e8:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b2ea:	683b      	ldr	r3, [r7, #0]
 800b2ec:	781b      	ldrb	r3, [r3, #0]
 800b2ee:	001a      	movs	r2, r3
 800b2f0:	2360      	movs	r3, #96	; 0x60
 800b2f2:	4013      	ands	r3, r2
 800b2f4:	2b40      	cmp	r3, #64	; 0x40
 800b2f6:	d004      	beq.n	800b302 <USBD_StdDevReq+0x2a>
 800b2f8:	d84f      	bhi.n	800b39a <USBD_StdDevReq+0xc2>
 800b2fa:	2b00      	cmp	r3, #0
 800b2fc:	d00b      	beq.n	800b316 <USBD_StdDevReq+0x3e>
 800b2fe:	2b20      	cmp	r3, #32
 800b300:	d14b      	bne.n	800b39a <USBD_StdDevReq+0xc2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800b302:	687a      	ldr	r2, [r7, #4]
 800b304:	23ad      	movs	r3, #173	; 0xad
 800b306:	009b      	lsls	r3, r3, #2
 800b308:	58d3      	ldr	r3, [r2, r3]
 800b30a:	689b      	ldr	r3, [r3, #8]
 800b30c:	6839      	ldr	r1, [r7, #0]
 800b30e:	687a      	ldr	r2, [r7, #4]
 800b310:	0010      	movs	r0, r2
 800b312:	4798      	blx	r3
      break;
 800b314:	e048      	b.n	800b3a8 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b316:	683b      	ldr	r3, [r7, #0]
 800b318:	785b      	ldrb	r3, [r3, #1]
 800b31a:	2b09      	cmp	r3, #9
 800b31c:	d835      	bhi.n	800b38a <USBD_StdDevReq+0xb2>
 800b31e:	009a      	lsls	r2, r3, #2
 800b320:	4b25      	ldr	r3, [pc, #148]	; (800b3b8 <USBD_StdDevReq+0xe0>)
 800b322:	18d3      	adds	r3, r2, r3
 800b324:	681b      	ldr	r3, [r3, #0]
 800b326:	469f      	mov	pc, r3
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800b328:	683a      	ldr	r2, [r7, #0]
 800b32a:	687b      	ldr	r3, [r7, #4]
 800b32c:	0011      	movs	r1, r2
 800b32e:	0018      	movs	r0, r3
 800b330:	f000 fa52 	bl	800b7d8 <USBD_GetDescriptor>
          break;
 800b334:	e030      	b.n	800b398 <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800b336:	683a      	ldr	r2, [r7, #0]
 800b338:	687b      	ldr	r3, [r7, #4]
 800b33a:	0011      	movs	r1, r2
 800b33c:	0018      	movs	r0, r3
 800b33e:	f000 fbfd 	bl	800bb3c <USBD_SetAddress>
          break;
 800b342:	e029      	b.n	800b398 <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 800b344:	683a      	ldr	r2, [r7, #0]
 800b346:	687b      	ldr	r3, [r7, #4]
 800b348:	0011      	movs	r1, r2
 800b34a:	0018      	movs	r0, r3
 800b34c:	f000 fc4a 	bl	800bbe4 <USBD_SetConfig>
          break;
 800b350:	e022      	b.n	800b398 <USBD_StdDevReq+0xc0>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800b352:	683a      	ldr	r2, [r7, #0]
 800b354:	687b      	ldr	r3, [r7, #4]
 800b356:	0011      	movs	r1, r2
 800b358:	0018      	movs	r0, r3
 800b35a:	f000 fce7 	bl	800bd2c <USBD_GetConfig>
          break;
 800b35e:	e01b      	b.n	800b398 <USBD_StdDevReq+0xc0>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800b360:	683a      	ldr	r2, [r7, #0]
 800b362:	687b      	ldr	r3, [r7, #4]
 800b364:	0011      	movs	r1, r2
 800b366:	0018      	movs	r0, r3
 800b368:	f000 fd1b 	bl	800bda2 <USBD_GetStatus>
          break;
 800b36c:	e014      	b.n	800b398 <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800b36e:	683a      	ldr	r2, [r7, #0]
 800b370:	687b      	ldr	r3, [r7, #4]
 800b372:	0011      	movs	r1, r2
 800b374:	0018      	movs	r0, r3
 800b376:	f000 fd4e 	bl	800be16 <USBD_SetFeature>
          break;
 800b37a:	e00d      	b.n	800b398 <USBD_StdDevReq+0xc0>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800b37c:	683a      	ldr	r2, [r7, #0]
 800b37e:	687b      	ldr	r3, [r7, #4]
 800b380:	0011      	movs	r1, r2
 800b382:	0018      	movs	r0, r3
 800b384:	f000 fd5d 	bl	800be42 <USBD_ClrFeature>
          break;
 800b388:	e006      	b.n	800b398 <USBD_StdDevReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800b38a:	683a      	ldr	r2, [r7, #0]
 800b38c:	687b      	ldr	r3, [r7, #4]
 800b38e:	0011      	movs	r1, r2
 800b390:	0018      	movs	r0, r3
 800b392:	f000 fdb7 	bl	800bf04 <USBD_CtlError>
          break;
 800b396:	46c0      	nop			; (mov r8, r8)
      }
      break;
 800b398:	e006      	b.n	800b3a8 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800b39a:	683a      	ldr	r2, [r7, #0]
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	0011      	movs	r1, r2
 800b3a0:	0018      	movs	r0, r3
 800b3a2:	f000 fdaf 	bl	800bf04 <USBD_CtlError>
      break;
 800b3a6:	46c0      	nop			; (mov r8, r8)
  }

  return ret;
 800b3a8:	230f      	movs	r3, #15
 800b3aa:	18fb      	adds	r3, r7, r3
 800b3ac:	781b      	ldrb	r3, [r3, #0]
}
 800b3ae:	0018      	movs	r0, r3
 800b3b0:	46bd      	mov	sp, r7
 800b3b2:	b004      	add	sp, #16
 800b3b4:	bd80      	pop	{r7, pc}
 800b3b6:	46c0      	nop			; (mov r8, r8)
 800b3b8:	0800d62c 	.word	0x0800d62c

0800b3bc <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 800b3bc:	b5b0      	push	{r4, r5, r7, lr}
 800b3be:	b084      	sub	sp, #16
 800b3c0:	af00      	add	r7, sp, #0
 800b3c2:	6078      	str	r0, [r7, #4]
 800b3c4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b3c6:	230f      	movs	r3, #15
 800b3c8:	18fb      	adds	r3, r7, r3
 800b3ca:	2200      	movs	r2, #0
 800b3cc:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b3ce:	683b      	ldr	r3, [r7, #0]
 800b3d0:	781b      	ldrb	r3, [r3, #0]
 800b3d2:	001a      	movs	r2, r3
 800b3d4:	2360      	movs	r3, #96	; 0x60
 800b3d6:	4013      	ands	r3, r2
 800b3d8:	2b40      	cmp	r3, #64	; 0x40
 800b3da:	d004      	beq.n	800b3e6 <USBD_StdItfReq+0x2a>
 800b3dc:	d839      	bhi.n	800b452 <USBD_StdItfReq+0x96>
 800b3de:	2b00      	cmp	r3, #0
 800b3e0:	d001      	beq.n	800b3e6 <USBD_StdItfReq+0x2a>
 800b3e2:	2b20      	cmp	r3, #32
 800b3e4:	d135      	bne.n	800b452 <USBD_StdItfReq+0x96>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800b3e6:	687a      	ldr	r2, [r7, #4]
 800b3e8:	23a7      	movs	r3, #167	; 0xa7
 800b3ea:	009b      	lsls	r3, r3, #2
 800b3ec:	5cd3      	ldrb	r3, [r2, r3]
 800b3ee:	3b01      	subs	r3, #1
 800b3f0:	2b02      	cmp	r3, #2
 800b3f2:	d825      	bhi.n	800b440 <USBD_StdItfReq+0x84>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800b3f4:	683b      	ldr	r3, [r7, #0]
 800b3f6:	889b      	ldrh	r3, [r3, #4]
 800b3f8:	b2db      	uxtb	r3, r3
 800b3fa:	2b01      	cmp	r3, #1
 800b3fc:	d819      	bhi.n	800b432 <USBD_StdItfReq+0x76>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800b3fe:	687a      	ldr	r2, [r7, #4]
 800b400:	23ad      	movs	r3, #173	; 0xad
 800b402:	009b      	lsls	r3, r3, #2
 800b404:	58d3      	ldr	r3, [r2, r3]
 800b406:	689b      	ldr	r3, [r3, #8]
 800b408:	250f      	movs	r5, #15
 800b40a:	197c      	adds	r4, r7, r5
 800b40c:	6839      	ldr	r1, [r7, #0]
 800b40e:	687a      	ldr	r2, [r7, #4]
 800b410:	0010      	movs	r0, r2
 800b412:	4798      	blx	r3
 800b414:	0003      	movs	r3, r0
 800b416:	7023      	strb	r3, [r4, #0]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800b418:	683b      	ldr	r3, [r7, #0]
 800b41a:	88db      	ldrh	r3, [r3, #6]
 800b41c:	2b00      	cmp	r3, #0
 800b41e:	d116      	bne.n	800b44e <USBD_StdItfReq+0x92>
 800b420:	197b      	adds	r3, r7, r5
 800b422:	781b      	ldrb	r3, [r3, #0]
 800b424:	2b00      	cmp	r3, #0
 800b426:	d112      	bne.n	800b44e <USBD_StdItfReq+0x92>
            {
              USBD_CtlSendStatus(pdev);
 800b428:	687b      	ldr	r3, [r7, #4]
 800b42a:	0018      	movs	r0, r3
 800b42c:	f000 fe52 	bl	800c0d4 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800b430:	e00d      	b.n	800b44e <USBD_StdItfReq+0x92>
            USBD_CtlError(pdev, req);
 800b432:	683a      	ldr	r2, [r7, #0]
 800b434:	687b      	ldr	r3, [r7, #4]
 800b436:	0011      	movs	r1, r2
 800b438:	0018      	movs	r0, r3
 800b43a:	f000 fd63 	bl	800bf04 <USBD_CtlError>
          break;
 800b43e:	e006      	b.n	800b44e <USBD_StdItfReq+0x92>

        default:
          USBD_CtlError(pdev, req);
 800b440:	683a      	ldr	r2, [r7, #0]
 800b442:	687b      	ldr	r3, [r7, #4]
 800b444:	0011      	movs	r1, r2
 800b446:	0018      	movs	r0, r3
 800b448:	f000 fd5c 	bl	800bf04 <USBD_CtlError>
          break;
 800b44c:	e000      	b.n	800b450 <USBD_StdItfReq+0x94>
          break;
 800b44e:	46c0      	nop			; (mov r8, r8)
      }
      break;
 800b450:	e006      	b.n	800b460 <USBD_StdItfReq+0xa4>

    default:
      USBD_CtlError(pdev, req);
 800b452:	683a      	ldr	r2, [r7, #0]
 800b454:	687b      	ldr	r3, [r7, #4]
 800b456:	0011      	movs	r1, r2
 800b458:	0018      	movs	r0, r3
 800b45a:	f000 fd53 	bl	800bf04 <USBD_CtlError>
      break;
 800b45e:	46c0      	nop			; (mov r8, r8)
  }

  return USBD_OK;
 800b460:	2300      	movs	r3, #0
}
 800b462:	0018      	movs	r0, r3
 800b464:	46bd      	mov	sp, r7
 800b466:	b004      	add	sp, #16
 800b468:	bdb0      	pop	{r4, r5, r7, pc}

0800b46a <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 800b46a:	b5b0      	push	{r4, r5, r7, lr}
 800b46c:	b084      	sub	sp, #16
 800b46e:	af00      	add	r7, sp, #0
 800b470:	6078      	str	r0, [r7, #4]
 800b472:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800b474:	230f      	movs	r3, #15
 800b476:	18fb      	adds	r3, r7, r3
 800b478:	2200      	movs	r2, #0
 800b47a:	701a      	strb	r2, [r3, #0]
  ep_addr  = LOBYTE(req->wIndex);
 800b47c:	683b      	ldr	r3, [r7, #0]
 800b47e:	889a      	ldrh	r2, [r3, #4]
 800b480:	230e      	movs	r3, #14
 800b482:	18fb      	adds	r3, r7, r3
 800b484:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b486:	683b      	ldr	r3, [r7, #0]
 800b488:	781b      	ldrb	r3, [r3, #0]
 800b48a:	001a      	movs	r2, r3
 800b48c:	2360      	movs	r3, #96	; 0x60
 800b48e:	4013      	ands	r3, r2
 800b490:	2b40      	cmp	r3, #64	; 0x40
 800b492:	d006      	beq.n	800b4a2 <USBD_StdEPReq+0x38>
 800b494:	d900      	bls.n	800b498 <USBD_StdEPReq+0x2e>
 800b496:	e190      	b.n	800b7ba <USBD_StdEPReq+0x350>
 800b498:	2b00      	cmp	r3, #0
 800b49a:	d00c      	beq.n	800b4b6 <USBD_StdEPReq+0x4c>
 800b49c:	2b20      	cmp	r3, #32
 800b49e:	d000      	beq.n	800b4a2 <USBD_StdEPReq+0x38>
 800b4a0:	e18b      	b.n	800b7ba <USBD_StdEPReq+0x350>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800b4a2:	687a      	ldr	r2, [r7, #4]
 800b4a4:	23ad      	movs	r3, #173	; 0xad
 800b4a6:	009b      	lsls	r3, r3, #2
 800b4a8:	58d3      	ldr	r3, [r2, r3]
 800b4aa:	689b      	ldr	r3, [r3, #8]
 800b4ac:	6839      	ldr	r1, [r7, #0]
 800b4ae:	687a      	ldr	r2, [r7, #4]
 800b4b0:	0010      	movs	r0, r2
 800b4b2:	4798      	blx	r3
      break;
 800b4b4:	e188      	b.n	800b7c8 <USBD_StdEPReq+0x35e>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 800b4b6:	683b      	ldr	r3, [r7, #0]
 800b4b8:	781b      	ldrb	r3, [r3, #0]
 800b4ba:	001a      	movs	r2, r3
 800b4bc:	2360      	movs	r3, #96	; 0x60
 800b4be:	4013      	ands	r3, r2
 800b4c0:	2b20      	cmp	r3, #32
 800b4c2:	d10f      	bne.n	800b4e4 <USBD_StdEPReq+0x7a>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800b4c4:	687a      	ldr	r2, [r7, #4]
 800b4c6:	23ad      	movs	r3, #173	; 0xad
 800b4c8:	009b      	lsls	r3, r3, #2
 800b4ca:	58d3      	ldr	r3, [r2, r3]
 800b4cc:	689b      	ldr	r3, [r3, #8]
 800b4ce:	250f      	movs	r5, #15
 800b4d0:	197c      	adds	r4, r7, r5
 800b4d2:	6839      	ldr	r1, [r7, #0]
 800b4d4:	687a      	ldr	r2, [r7, #4]
 800b4d6:	0010      	movs	r0, r2
 800b4d8:	4798      	blx	r3
 800b4da:	0003      	movs	r3, r0
 800b4dc:	7023      	strb	r3, [r4, #0]

        return ret;
 800b4de:	197b      	adds	r3, r7, r5
 800b4e0:	781b      	ldrb	r3, [r3, #0]
 800b4e2:	e174      	b.n	800b7ce <USBD_StdEPReq+0x364>
      }

      switch (req->bRequest)
 800b4e4:	683b      	ldr	r3, [r7, #0]
 800b4e6:	785b      	ldrb	r3, [r3, #1]
 800b4e8:	2b03      	cmp	r3, #3
 800b4ea:	d007      	beq.n	800b4fc <USBD_StdEPReq+0x92>
 800b4ec:	dd00      	ble.n	800b4f0 <USBD_StdEPReq+0x86>
 800b4ee:	e15c      	b.n	800b7aa <USBD_StdEPReq+0x340>
 800b4f0:	2b00      	cmp	r3, #0
 800b4f2:	d100      	bne.n	800b4f6 <USBD_StdEPReq+0x8c>
 800b4f4:	e092      	b.n	800b61c <USBD_StdEPReq+0x1b2>
 800b4f6:	2b01      	cmp	r3, #1
 800b4f8:	d04b      	beq.n	800b592 <USBD_StdEPReq+0x128>
 800b4fa:	e156      	b.n	800b7aa <USBD_StdEPReq+0x340>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800b4fc:	687a      	ldr	r2, [r7, #4]
 800b4fe:	23a7      	movs	r3, #167	; 0xa7
 800b500:	009b      	lsls	r3, r3, #2
 800b502:	5cd3      	ldrb	r3, [r2, r3]
 800b504:	2b02      	cmp	r3, #2
 800b506:	d002      	beq.n	800b50e <USBD_StdEPReq+0xa4>
 800b508:	2b03      	cmp	r3, #3
 800b50a:	d01d      	beq.n	800b548 <USBD_StdEPReq+0xde>
 800b50c:	e039      	b.n	800b582 <USBD_StdEPReq+0x118>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b50e:	220e      	movs	r2, #14
 800b510:	18bb      	adds	r3, r7, r2
 800b512:	781b      	ldrb	r3, [r3, #0]
 800b514:	2b00      	cmp	r3, #0
 800b516:	d010      	beq.n	800b53a <USBD_StdEPReq+0xd0>
 800b518:	18bb      	adds	r3, r7, r2
 800b51a:	781b      	ldrb	r3, [r3, #0]
 800b51c:	2b80      	cmp	r3, #128	; 0x80
 800b51e:	d00c      	beq.n	800b53a <USBD_StdEPReq+0xd0>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800b520:	18bb      	adds	r3, r7, r2
 800b522:	781a      	ldrb	r2, [r3, #0]
 800b524:	687b      	ldr	r3, [r7, #4]
 800b526:	0011      	movs	r1, r2
 800b528:	0018      	movs	r0, r3
 800b52a:	f001 f9d8 	bl	800c8de <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800b52e:	687b      	ldr	r3, [r7, #4]
 800b530:	2180      	movs	r1, #128	; 0x80
 800b532:	0018      	movs	r0, r3
 800b534:	f001 f9d3 	bl	800c8de <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800b538:	e02a      	b.n	800b590 <USBD_StdEPReq+0x126>
                USBD_CtlError(pdev, req);
 800b53a:	683a      	ldr	r2, [r7, #0]
 800b53c:	687b      	ldr	r3, [r7, #4]
 800b53e:	0011      	movs	r1, r2
 800b540:	0018      	movs	r0, r3
 800b542:	f000 fcdf 	bl	800bf04 <USBD_CtlError>
              break;
 800b546:	e023      	b.n	800b590 <USBD_StdEPReq+0x126>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800b548:	683b      	ldr	r3, [r7, #0]
 800b54a:	885b      	ldrh	r3, [r3, #2]
 800b54c:	2b00      	cmp	r3, #0
 800b54e:	d113      	bne.n	800b578 <USBD_StdEPReq+0x10e>
              {
                if ((ep_addr != 0x00U) &&
 800b550:	220e      	movs	r2, #14
 800b552:	18bb      	adds	r3, r7, r2
 800b554:	781b      	ldrb	r3, [r3, #0]
 800b556:	2b00      	cmp	r3, #0
 800b558:	d00e      	beq.n	800b578 <USBD_StdEPReq+0x10e>
 800b55a:	18bb      	adds	r3, r7, r2
 800b55c:	781b      	ldrb	r3, [r3, #0]
 800b55e:	2b80      	cmp	r3, #128	; 0x80
 800b560:	d00a      	beq.n	800b578 <USBD_StdEPReq+0x10e>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800b562:	683b      	ldr	r3, [r7, #0]
 800b564:	88db      	ldrh	r3, [r3, #6]
 800b566:	2b00      	cmp	r3, #0
 800b568:	d106      	bne.n	800b578 <USBD_StdEPReq+0x10e>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 800b56a:	18bb      	adds	r3, r7, r2
 800b56c:	781a      	ldrb	r2, [r3, #0]
 800b56e:	687b      	ldr	r3, [r7, #4]
 800b570:	0011      	movs	r1, r2
 800b572:	0018      	movs	r0, r3
 800b574:	f001 f9b3 	bl	800c8de <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 800b578:	687b      	ldr	r3, [r7, #4]
 800b57a:	0018      	movs	r0, r3
 800b57c:	f000 fdaa 	bl	800c0d4 <USBD_CtlSendStatus>

              break;
 800b580:	e006      	b.n	800b590 <USBD_StdEPReq+0x126>

            default:
              USBD_CtlError(pdev, req);
 800b582:	683a      	ldr	r2, [r7, #0]
 800b584:	687b      	ldr	r3, [r7, #4]
 800b586:	0011      	movs	r1, r2
 800b588:	0018      	movs	r0, r3
 800b58a:	f000 fcbb 	bl	800bf04 <USBD_CtlError>
              break;
 800b58e:	46c0      	nop			; (mov r8, r8)
          }
          break;
 800b590:	e112      	b.n	800b7b8 <USBD_StdEPReq+0x34e>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800b592:	687a      	ldr	r2, [r7, #4]
 800b594:	23a7      	movs	r3, #167	; 0xa7
 800b596:	009b      	lsls	r3, r3, #2
 800b598:	5cd3      	ldrb	r3, [r2, r3]
 800b59a:	2b02      	cmp	r3, #2
 800b59c:	d002      	beq.n	800b5a4 <USBD_StdEPReq+0x13a>
 800b59e:	2b03      	cmp	r3, #3
 800b5a0:	d01d      	beq.n	800b5de <USBD_StdEPReq+0x174>
 800b5a2:	e032      	b.n	800b60a <USBD_StdEPReq+0x1a0>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b5a4:	220e      	movs	r2, #14
 800b5a6:	18bb      	adds	r3, r7, r2
 800b5a8:	781b      	ldrb	r3, [r3, #0]
 800b5aa:	2b00      	cmp	r3, #0
 800b5ac:	d010      	beq.n	800b5d0 <USBD_StdEPReq+0x166>
 800b5ae:	18bb      	adds	r3, r7, r2
 800b5b0:	781b      	ldrb	r3, [r3, #0]
 800b5b2:	2b80      	cmp	r3, #128	; 0x80
 800b5b4:	d00c      	beq.n	800b5d0 <USBD_StdEPReq+0x166>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800b5b6:	18bb      	adds	r3, r7, r2
 800b5b8:	781a      	ldrb	r2, [r3, #0]
 800b5ba:	687b      	ldr	r3, [r7, #4]
 800b5bc:	0011      	movs	r1, r2
 800b5be:	0018      	movs	r0, r3
 800b5c0:	f001 f98d 	bl	800c8de <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800b5c4:	687b      	ldr	r3, [r7, #4]
 800b5c6:	2180      	movs	r1, #128	; 0x80
 800b5c8:	0018      	movs	r0, r3
 800b5ca:	f001 f988 	bl	800c8de <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800b5ce:	e024      	b.n	800b61a <USBD_StdEPReq+0x1b0>
                USBD_CtlError(pdev, req);
 800b5d0:	683a      	ldr	r2, [r7, #0]
 800b5d2:	687b      	ldr	r3, [r7, #4]
 800b5d4:	0011      	movs	r1, r2
 800b5d6:	0018      	movs	r0, r3
 800b5d8:	f000 fc94 	bl	800bf04 <USBD_CtlError>
              break;
 800b5dc:	e01d      	b.n	800b61a <USBD_StdEPReq+0x1b0>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800b5de:	683b      	ldr	r3, [r7, #0]
 800b5e0:	885b      	ldrh	r3, [r3, #2]
 800b5e2:	2b00      	cmp	r3, #0
 800b5e4:	d118      	bne.n	800b618 <USBD_StdEPReq+0x1ae>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800b5e6:	210e      	movs	r1, #14
 800b5e8:	187b      	adds	r3, r7, r1
 800b5ea:	781b      	ldrb	r3, [r3, #0]
 800b5ec:	227f      	movs	r2, #127	; 0x7f
 800b5ee:	4013      	ands	r3, r2
 800b5f0:	d006      	beq.n	800b600 <USBD_StdEPReq+0x196>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 800b5f2:	187b      	adds	r3, r7, r1
 800b5f4:	781a      	ldrb	r2, [r3, #0]
 800b5f6:	687b      	ldr	r3, [r7, #4]
 800b5f8:	0011      	movs	r1, r2
 800b5fa:	0018      	movs	r0, r3
 800b5fc:	f001 f99a 	bl	800c934 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 800b600:	687b      	ldr	r3, [r7, #4]
 800b602:	0018      	movs	r0, r3
 800b604:	f000 fd66 	bl	800c0d4 <USBD_CtlSendStatus>
              }
              break;
 800b608:	e006      	b.n	800b618 <USBD_StdEPReq+0x1ae>

            default:
              USBD_CtlError(pdev, req);
 800b60a:	683a      	ldr	r2, [r7, #0]
 800b60c:	687b      	ldr	r3, [r7, #4]
 800b60e:	0011      	movs	r1, r2
 800b610:	0018      	movs	r0, r3
 800b612:	f000 fc77 	bl	800bf04 <USBD_CtlError>
              break;
 800b616:	e000      	b.n	800b61a <USBD_StdEPReq+0x1b0>
              break;
 800b618:	46c0      	nop			; (mov r8, r8)
          }
          break;
 800b61a:	e0cd      	b.n	800b7b8 <USBD_StdEPReq+0x34e>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800b61c:	687a      	ldr	r2, [r7, #4]
 800b61e:	23a7      	movs	r3, #167	; 0xa7
 800b620:	009b      	lsls	r3, r3, #2
 800b622:	5cd3      	ldrb	r3, [r2, r3]
 800b624:	2b02      	cmp	r3, #2
 800b626:	d002      	beq.n	800b62e <USBD_StdEPReq+0x1c4>
 800b628:	2b03      	cmp	r3, #3
 800b62a:	d03c      	beq.n	800b6a6 <USBD_StdEPReq+0x23c>
 800b62c:	e0b5      	b.n	800b79a <USBD_StdEPReq+0x330>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b62e:	220e      	movs	r2, #14
 800b630:	18bb      	adds	r3, r7, r2
 800b632:	781b      	ldrb	r3, [r3, #0]
 800b634:	2b00      	cmp	r3, #0
 800b636:	d00a      	beq.n	800b64e <USBD_StdEPReq+0x1e4>
 800b638:	18bb      	adds	r3, r7, r2
 800b63a:	781b      	ldrb	r3, [r3, #0]
 800b63c:	2b80      	cmp	r3, #128	; 0x80
 800b63e:	d006      	beq.n	800b64e <USBD_StdEPReq+0x1e4>
              {
                USBD_CtlError(pdev, req);
 800b640:	683a      	ldr	r2, [r7, #0]
 800b642:	687b      	ldr	r3, [r7, #4]
 800b644:	0011      	movs	r1, r2
 800b646:	0018      	movs	r0, r3
 800b648:	f000 fc5c 	bl	800bf04 <USBD_CtlError>
                break;
 800b64c:	e0ac      	b.n	800b7a8 <USBD_StdEPReq+0x33e>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b64e:	220e      	movs	r2, #14
 800b650:	18bb      	adds	r3, r7, r2
 800b652:	781b      	ldrb	r3, [r3, #0]
 800b654:	b25b      	sxtb	r3, r3
 800b656:	2b00      	cmp	r3, #0
 800b658:	da0c      	bge.n	800b674 <USBD_StdEPReq+0x20a>
 800b65a:	18bb      	adds	r3, r7, r2
 800b65c:	781b      	ldrb	r3, [r3, #0]
 800b65e:	227f      	movs	r2, #127	; 0x7f
 800b660:	401a      	ands	r2, r3
 800b662:	0013      	movs	r3, r2
 800b664:	009b      	lsls	r3, r3, #2
 800b666:	189b      	adds	r3, r3, r2
 800b668:	009b      	lsls	r3, r3, #2
 800b66a:	3310      	adds	r3, #16
 800b66c:	687a      	ldr	r2, [r7, #4]
 800b66e:	18d3      	adds	r3, r2, r3
 800b670:	3304      	adds	r3, #4
 800b672:	e00d      	b.n	800b690 <USBD_StdEPReq+0x226>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800b674:	230e      	movs	r3, #14
 800b676:	18fb      	adds	r3, r7, r3
 800b678:	781b      	ldrb	r3, [r3, #0]
 800b67a:	227f      	movs	r2, #127	; 0x7f
 800b67c:	401a      	ands	r2, r3
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b67e:	0013      	movs	r3, r2
 800b680:	009b      	lsls	r3, r3, #2
 800b682:	189b      	adds	r3, r3, r2
 800b684:	009b      	lsls	r3, r3, #2
 800b686:	3351      	adds	r3, #81	; 0x51
 800b688:	33ff      	adds	r3, #255	; 0xff
 800b68a:	687a      	ldr	r2, [r7, #4]
 800b68c:	18d3      	adds	r3, r2, r3
 800b68e:	3304      	adds	r3, #4
 800b690:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800b692:	68bb      	ldr	r3, [r7, #8]
 800b694:	2200      	movs	r2, #0
 800b696:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800b698:	68b9      	ldr	r1, [r7, #8]
 800b69a:	687b      	ldr	r3, [r7, #4]
 800b69c:	2202      	movs	r2, #2
 800b69e:	0018      	movs	r0, r3
 800b6a0:	f000 fcae 	bl	800c000 <USBD_CtlSendData>
              break;
 800b6a4:	e080      	b.n	800b7a8 <USBD_StdEPReq+0x33e>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800b6a6:	220e      	movs	r2, #14
 800b6a8:	18bb      	adds	r3, r7, r2
 800b6aa:	781b      	ldrb	r3, [r3, #0]
 800b6ac:	b25b      	sxtb	r3, r3
 800b6ae:	2b00      	cmp	r3, #0
 800b6b0:	da14      	bge.n	800b6dc <USBD_StdEPReq+0x272>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800b6b2:	18bb      	adds	r3, r7, r2
 800b6b4:	781b      	ldrb	r3, [r3, #0]
 800b6b6:	220f      	movs	r2, #15
 800b6b8:	401a      	ands	r2, r3
 800b6ba:	6879      	ldr	r1, [r7, #4]
 800b6bc:	0013      	movs	r3, r2
 800b6be:	009b      	lsls	r3, r3, #2
 800b6c0:	189b      	adds	r3, r3, r2
 800b6c2:	009b      	lsls	r3, r3, #2
 800b6c4:	18cb      	adds	r3, r1, r3
 800b6c6:	3318      	adds	r3, #24
 800b6c8:	681b      	ldr	r3, [r3, #0]
 800b6ca:	2b00      	cmp	r3, #0
 800b6cc:	d11e      	bne.n	800b70c <USBD_StdEPReq+0x2a2>
                {
                  USBD_CtlError(pdev, req);
 800b6ce:	683a      	ldr	r2, [r7, #0]
 800b6d0:	687b      	ldr	r3, [r7, #4]
 800b6d2:	0011      	movs	r1, r2
 800b6d4:	0018      	movs	r0, r3
 800b6d6:	f000 fc15 	bl	800bf04 <USBD_CtlError>
                  break;
 800b6da:	e065      	b.n	800b7a8 <USBD_StdEPReq+0x33e>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800b6dc:	230e      	movs	r3, #14
 800b6de:	18fb      	adds	r3, r7, r3
 800b6e0:	781b      	ldrb	r3, [r3, #0]
 800b6e2:	220f      	movs	r2, #15
 800b6e4:	401a      	ands	r2, r3
 800b6e6:	6878      	ldr	r0, [r7, #4]
 800b6e8:	23ac      	movs	r3, #172	; 0xac
 800b6ea:	0059      	lsls	r1, r3, #1
 800b6ec:	0013      	movs	r3, r2
 800b6ee:	009b      	lsls	r3, r3, #2
 800b6f0:	189b      	adds	r3, r3, r2
 800b6f2:	009b      	lsls	r3, r3, #2
 800b6f4:	18c3      	adds	r3, r0, r3
 800b6f6:	185b      	adds	r3, r3, r1
 800b6f8:	681b      	ldr	r3, [r3, #0]
 800b6fa:	2b00      	cmp	r3, #0
 800b6fc:	d106      	bne.n	800b70c <USBD_StdEPReq+0x2a2>
                {
                  USBD_CtlError(pdev, req);
 800b6fe:	683a      	ldr	r2, [r7, #0]
 800b700:	687b      	ldr	r3, [r7, #4]
 800b702:	0011      	movs	r1, r2
 800b704:	0018      	movs	r0, r3
 800b706:	f000 fbfd 	bl	800bf04 <USBD_CtlError>
                  break;
 800b70a:	e04d      	b.n	800b7a8 <USBD_StdEPReq+0x33e>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b70c:	220e      	movs	r2, #14
 800b70e:	18bb      	adds	r3, r7, r2
 800b710:	781b      	ldrb	r3, [r3, #0]
 800b712:	b25b      	sxtb	r3, r3
 800b714:	2b00      	cmp	r3, #0
 800b716:	da0c      	bge.n	800b732 <USBD_StdEPReq+0x2c8>
 800b718:	18bb      	adds	r3, r7, r2
 800b71a:	781b      	ldrb	r3, [r3, #0]
 800b71c:	227f      	movs	r2, #127	; 0x7f
 800b71e:	401a      	ands	r2, r3
 800b720:	0013      	movs	r3, r2
 800b722:	009b      	lsls	r3, r3, #2
 800b724:	189b      	adds	r3, r3, r2
 800b726:	009b      	lsls	r3, r3, #2
 800b728:	3310      	adds	r3, #16
 800b72a:	687a      	ldr	r2, [r7, #4]
 800b72c:	18d3      	adds	r3, r2, r3
 800b72e:	3304      	adds	r3, #4
 800b730:	e00d      	b.n	800b74e <USBD_StdEPReq+0x2e4>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800b732:	230e      	movs	r3, #14
 800b734:	18fb      	adds	r3, r7, r3
 800b736:	781b      	ldrb	r3, [r3, #0]
 800b738:	227f      	movs	r2, #127	; 0x7f
 800b73a:	401a      	ands	r2, r3
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b73c:	0013      	movs	r3, r2
 800b73e:	009b      	lsls	r3, r3, #2
 800b740:	189b      	adds	r3, r3, r2
 800b742:	009b      	lsls	r3, r3, #2
 800b744:	3351      	adds	r3, #81	; 0x51
 800b746:	33ff      	adds	r3, #255	; 0xff
 800b748:	687a      	ldr	r2, [r7, #4]
 800b74a:	18d3      	adds	r3, r2, r3
 800b74c:	3304      	adds	r3, #4
 800b74e:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800b750:	220e      	movs	r2, #14
 800b752:	18bb      	adds	r3, r7, r2
 800b754:	781b      	ldrb	r3, [r3, #0]
 800b756:	2b00      	cmp	r3, #0
 800b758:	d003      	beq.n	800b762 <USBD_StdEPReq+0x2f8>
 800b75a:	18bb      	adds	r3, r7, r2
 800b75c:	781b      	ldrb	r3, [r3, #0]
 800b75e:	2b80      	cmp	r3, #128	; 0x80
 800b760:	d103      	bne.n	800b76a <USBD_StdEPReq+0x300>
              {
                pep->status = 0x0000U;
 800b762:	68bb      	ldr	r3, [r7, #8]
 800b764:	2200      	movs	r2, #0
 800b766:	601a      	str	r2, [r3, #0]
 800b768:	e010      	b.n	800b78c <USBD_StdEPReq+0x322>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 800b76a:	230e      	movs	r3, #14
 800b76c:	18fb      	adds	r3, r7, r3
 800b76e:	781a      	ldrb	r2, [r3, #0]
 800b770:	687b      	ldr	r3, [r7, #4]
 800b772:	0011      	movs	r1, r2
 800b774:	0018      	movs	r0, r3
 800b776:	f001 f908 	bl	800c98a <USBD_LL_IsStallEP>
 800b77a:	1e03      	subs	r3, r0, #0
 800b77c:	d003      	beq.n	800b786 <USBD_StdEPReq+0x31c>
              {
                pep->status = 0x0001U;
 800b77e:	68bb      	ldr	r3, [r7, #8]
 800b780:	2201      	movs	r2, #1
 800b782:	601a      	str	r2, [r3, #0]
 800b784:	e002      	b.n	800b78c <USBD_StdEPReq+0x322>
              }
              else
              {
                pep->status = 0x0000U;
 800b786:	68bb      	ldr	r3, [r7, #8]
 800b788:	2200      	movs	r2, #0
 800b78a:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800b78c:	68b9      	ldr	r1, [r7, #8]
 800b78e:	687b      	ldr	r3, [r7, #4]
 800b790:	2202      	movs	r2, #2
 800b792:	0018      	movs	r0, r3
 800b794:	f000 fc34 	bl	800c000 <USBD_CtlSendData>
              break;
 800b798:	e006      	b.n	800b7a8 <USBD_StdEPReq+0x33e>

            default:
              USBD_CtlError(pdev, req);
 800b79a:	683a      	ldr	r2, [r7, #0]
 800b79c:	687b      	ldr	r3, [r7, #4]
 800b79e:	0011      	movs	r1, r2
 800b7a0:	0018      	movs	r0, r3
 800b7a2:	f000 fbaf 	bl	800bf04 <USBD_CtlError>
              break;
 800b7a6:	46c0      	nop			; (mov r8, r8)
          }
          break;
 800b7a8:	e006      	b.n	800b7b8 <USBD_StdEPReq+0x34e>

        default:
          USBD_CtlError(pdev, req);
 800b7aa:	683a      	ldr	r2, [r7, #0]
 800b7ac:	687b      	ldr	r3, [r7, #4]
 800b7ae:	0011      	movs	r1, r2
 800b7b0:	0018      	movs	r0, r3
 800b7b2:	f000 fba7 	bl	800bf04 <USBD_CtlError>
          break;
 800b7b6:	46c0      	nop			; (mov r8, r8)
      }
      break;
 800b7b8:	e006      	b.n	800b7c8 <USBD_StdEPReq+0x35e>

    default:
      USBD_CtlError(pdev, req);
 800b7ba:	683a      	ldr	r2, [r7, #0]
 800b7bc:	687b      	ldr	r3, [r7, #4]
 800b7be:	0011      	movs	r1, r2
 800b7c0:	0018      	movs	r0, r3
 800b7c2:	f000 fb9f 	bl	800bf04 <USBD_CtlError>
      break;
 800b7c6:	46c0      	nop			; (mov r8, r8)
  }

  return ret;
 800b7c8:	230f      	movs	r3, #15
 800b7ca:	18fb      	adds	r3, r7, r3
 800b7cc:	781b      	ldrb	r3, [r3, #0]
}
 800b7ce:	0018      	movs	r0, r3
 800b7d0:	46bd      	mov	sp, r7
 800b7d2:	b004      	add	sp, #16
 800b7d4:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800b7d8 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800b7d8:	b580      	push	{r7, lr}
 800b7da:	b084      	sub	sp, #16
 800b7dc:	af00      	add	r7, sp, #0
 800b7de:	6078      	str	r0, [r7, #4]
 800b7e0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800b7e2:	2308      	movs	r3, #8
 800b7e4:	18fb      	adds	r3, r7, r3
 800b7e6:	2200      	movs	r2, #0
 800b7e8:	801a      	strh	r2, [r3, #0]
  uint8_t *pbuf = NULL;
 800b7ea:	2300      	movs	r3, #0
 800b7ec:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800b7ee:	230b      	movs	r3, #11
 800b7f0:	18fb      	adds	r3, r7, r3
 800b7f2:	2200      	movs	r2, #0
 800b7f4:	701a      	strb	r2, [r3, #0]

  switch (req->wValue >> 8)
 800b7f6:	683b      	ldr	r3, [r7, #0]
 800b7f8:	885b      	ldrh	r3, [r3, #2]
 800b7fa:	0a1b      	lsrs	r3, r3, #8
 800b7fc:	b29b      	uxth	r3, r3
 800b7fe:	2b07      	cmp	r3, #7
 800b800:	d900      	bls.n	800b804 <USBD_GetDescriptor+0x2c>
 800b802:	e159      	b.n	800bab8 <USBD_GetDescriptor+0x2e0>
 800b804:	009a      	lsls	r2, r3, #2
 800b806:	4bcb      	ldr	r3, [pc, #812]	; (800bb34 <USBD_GetDescriptor+0x35c>)
 800b808:	18d3      	adds	r3, r2, r3
 800b80a:	681b      	ldr	r3, [r3, #0]
 800b80c:	469f      	mov	pc, r3
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800b80e:	687a      	ldr	r2, [r7, #4]
 800b810:	23ac      	movs	r3, #172	; 0xac
 800b812:	009b      	lsls	r3, r3, #2
 800b814:	58d3      	ldr	r3, [r2, r3]
 800b816:	681b      	ldr	r3, [r3, #0]
 800b818:	687a      	ldr	r2, [r7, #4]
 800b81a:	7c12      	ldrb	r2, [r2, #16]
 800b81c:	2108      	movs	r1, #8
 800b81e:	1879      	adds	r1, r7, r1
 800b820:	0010      	movs	r0, r2
 800b822:	4798      	blx	r3
 800b824:	0003      	movs	r3, r0
 800b826:	60fb      	str	r3, [r7, #12]
      break;
 800b828:	e153      	b.n	800bad2 <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b82a:	687b      	ldr	r3, [r7, #4]
 800b82c:	7c1b      	ldrb	r3, [r3, #16]
 800b82e:	2b00      	cmp	r3, #0
 800b830:	d10f      	bne.n	800b852 <USBD_GetDescriptor+0x7a>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800b832:	687a      	ldr	r2, [r7, #4]
 800b834:	23ad      	movs	r3, #173	; 0xad
 800b836:	009b      	lsls	r3, r3, #2
 800b838:	58d3      	ldr	r3, [r2, r3]
 800b83a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b83c:	2208      	movs	r2, #8
 800b83e:	18ba      	adds	r2, r7, r2
 800b840:	0010      	movs	r0, r2
 800b842:	4798      	blx	r3
 800b844:	0003      	movs	r3, r0
 800b846:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b848:	68fb      	ldr	r3, [r7, #12]
 800b84a:	3301      	adds	r3, #1
 800b84c:	2202      	movs	r2, #2
 800b84e:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800b850:	e13f      	b.n	800bad2 <USBD_GetDescriptor+0x2fa>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800b852:	687a      	ldr	r2, [r7, #4]
 800b854:	23ad      	movs	r3, #173	; 0xad
 800b856:	009b      	lsls	r3, r3, #2
 800b858:	58d3      	ldr	r3, [r2, r3]
 800b85a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b85c:	2208      	movs	r2, #8
 800b85e:	18ba      	adds	r2, r7, r2
 800b860:	0010      	movs	r0, r2
 800b862:	4798      	blx	r3
 800b864:	0003      	movs	r3, r0
 800b866:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b868:	68fb      	ldr	r3, [r7, #12]
 800b86a:	3301      	adds	r3, #1
 800b86c:	2202      	movs	r2, #2
 800b86e:	701a      	strb	r2, [r3, #0]
      break;
 800b870:	e12f      	b.n	800bad2 <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800b872:	683b      	ldr	r3, [r7, #0]
 800b874:	885b      	ldrh	r3, [r3, #2]
 800b876:	b2db      	uxtb	r3, r3
 800b878:	2b05      	cmp	r3, #5
 800b87a:	d900      	bls.n	800b87e <USBD_GetDescriptor+0xa6>
 800b87c:	e0d0      	b.n	800ba20 <USBD_GetDescriptor+0x248>
 800b87e:	009a      	lsls	r2, r3, #2
 800b880:	4bad      	ldr	r3, [pc, #692]	; (800bb38 <USBD_GetDescriptor+0x360>)
 800b882:	18d3      	adds	r3, r2, r3
 800b884:	681b      	ldr	r3, [r3, #0]
 800b886:	469f      	mov	pc, r3
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800b888:	687a      	ldr	r2, [r7, #4]
 800b88a:	23ac      	movs	r3, #172	; 0xac
 800b88c:	009b      	lsls	r3, r3, #2
 800b88e:	58d3      	ldr	r3, [r2, r3]
 800b890:	685b      	ldr	r3, [r3, #4]
 800b892:	2b00      	cmp	r3, #0
 800b894:	d00d      	beq.n	800b8b2 <USBD_GetDescriptor+0xda>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800b896:	687a      	ldr	r2, [r7, #4]
 800b898:	23ac      	movs	r3, #172	; 0xac
 800b89a:	009b      	lsls	r3, r3, #2
 800b89c:	58d3      	ldr	r3, [r2, r3]
 800b89e:	685b      	ldr	r3, [r3, #4]
 800b8a0:	687a      	ldr	r2, [r7, #4]
 800b8a2:	7c12      	ldrb	r2, [r2, #16]
 800b8a4:	2108      	movs	r1, #8
 800b8a6:	1879      	adds	r1, r7, r1
 800b8a8:	0010      	movs	r0, r2
 800b8aa:	4798      	blx	r3
 800b8ac:	0003      	movs	r3, r0
 800b8ae:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b8b0:	e0c3      	b.n	800ba3a <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 800b8b2:	683a      	ldr	r2, [r7, #0]
 800b8b4:	687b      	ldr	r3, [r7, #4]
 800b8b6:	0011      	movs	r1, r2
 800b8b8:	0018      	movs	r0, r3
 800b8ba:	f000 fb23 	bl	800bf04 <USBD_CtlError>
            err++;
 800b8be:	210b      	movs	r1, #11
 800b8c0:	187b      	adds	r3, r7, r1
 800b8c2:	781a      	ldrb	r2, [r3, #0]
 800b8c4:	187b      	adds	r3, r7, r1
 800b8c6:	3201      	adds	r2, #1
 800b8c8:	701a      	strb	r2, [r3, #0]
          break;
 800b8ca:	e0b6      	b.n	800ba3a <USBD_GetDescriptor+0x262>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800b8cc:	687a      	ldr	r2, [r7, #4]
 800b8ce:	23ac      	movs	r3, #172	; 0xac
 800b8d0:	009b      	lsls	r3, r3, #2
 800b8d2:	58d3      	ldr	r3, [r2, r3]
 800b8d4:	689b      	ldr	r3, [r3, #8]
 800b8d6:	2b00      	cmp	r3, #0
 800b8d8:	d00d      	beq.n	800b8f6 <USBD_GetDescriptor+0x11e>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800b8da:	687a      	ldr	r2, [r7, #4]
 800b8dc:	23ac      	movs	r3, #172	; 0xac
 800b8de:	009b      	lsls	r3, r3, #2
 800b8e0:	58d3      	ldr	r3, [r2, r3]
 800b8e2:	689b      	ldr	r3, [r3, #8]
 800b8e4:	687a      	ldr	r2, [r7, #4]
 800b8e6:	7c12      	ldrb	r2, [r2, #16]
 800b8e8:	2108      	movs	r1, #8
 800b8ea:	1879      	adds	r1, r7, r1
 800b8ec:	0010      	movs	r0, r2
 800b8ee:	4798      	blx	r3
 800b8f0:	0003      	movs	r3, r0
 800b8f2:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b8f4:	e0a1      	b.n	800ba3a <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 800b8f6:	683a      	ldr	r2, [r7, #0]
 800b8f8:	687b      	ldr	r3, [r7, #4]
 800b8fa:	0011      	movs	r1, r2
 800b8fc:	0018      	movs	r0, r3
 800b8fe:	f000 fb01 	bl	800bf04 <USBD_CtlError>
            err++;
 800b902:	210b      	movs	r1, #11
 800b904:	187b      	adds	r3, r7, r1
 800b906:	781a      	ldrb	r2, [r3, #0]
 800b908:	187b      	adds	r3, r7, r1
 800b90a:	3201      	adds	r2, #1
 800b90c:	701a      	strb	r2, [r3, #0]
          break;
 800b90e:	e094      	b.n	800ba3a <USBD_GetDescriptor+0x262>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800b910:	687a      	ldr	r2, [r7, #4]
 800b912:	23ac      	movs	r3, #172	; 0xac
 800b914:	009b      	lsls	r3, r3, #2
 800b916:	58d3      	ldr	r3, [r2, r3]
 800b918:	68db      	ldr	r3, [r3, #12]
 800b91a:	2b00      	cmp	r3, #0
 800b91c:	d00d      	beq.n	800b93a <USBD_GetDescriptor+0x162>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800b91e:	687a      	ldr	r2, [r7, #4]
 800b920:	23ac      	movs	r3, #172	; 0xac
 800b922:	009b      	lsls	r3, r3, #2
 800b924:	58d3      	ldr	r3, [r2, r3]
 800b926:	68db      	ldr	r3, [r3, #12]
 800b928:	687a      	ldr	r2, [r7, #4]
 800b92a:	7c12      	ldrb	r2, [r2, #16]
 800b92c:	2108      	movs	r1, #8
 800b92e:	1879      	adds	r1, r7, r1
 800b930:	0010      	movs	r0, r2
 800b932:	4798      	blx	r3
 800b934:	0003      	movs	r3, r0
 800b936:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b938:	e07f      	b.n	800ba3a <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 800b93a:	683a      	ldr	r2, [r7, #0]
 800b93c:	687b      	ldr	r3, [r7, #4]
 800b93e:	0011      	movs	r1, r2
 800b940:	0018      	movs	r0, r3
 800b942:	f000 fadf 	bl	800bf04 <USBD_CtlError>
            err++;
 800b946:	210b      	movs	r1, #11
 800b948:	187b      	adds	r3, r7, r1
 800b94a:	781a      	ldrb	r2, [r3, #0]
 800b94c:	187b      	adds	r3, r7, r1
 800b94e:	3201      	adds	r2, #1
 800b950:	701a      	strb	r2, [r3, #0]
          break;
 800b952:	e072      	b.n	800ba3a <USBD_GetDescriptor+0x262>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800b954:	687a      	ldr	r2, [r7, #4]
 800b956:	23ac      	movs	r3, #172	; 0xac
 800b958:	009b      	lsls	r3, r3, #2
 800b95a:	58d3      	ldr	r3, [r2, r3]
 800b95c:	691b      	ldr	r3, [r3, #16]
 800b95e:	2b00      	cmp	r3, #0
 800b960:	d00d      	beq.n	800b97e <USBD_GetDescriptor+0x1a6>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800b962:	687a      	ldr	r2, [r7, #4]
 800b964:	23ac      	movs	r3, #172	; 0xac
 800b966:	009b      	lsls	r3, r3, #2
 800b968:	58d3      	ldr	r3, [r2, r3]
 800b96a:	691b      	ldr	r3, [r3, #16]
 800b96c:	687a      	ldr	r2, [r7, #4]
 800b96e:	7c12      	ldrb	r2, [r2, #16]
 800b970:	2108      	movs	r1, #8
 800b972:	1879      	adds	r1, r7, r1
 800b974:	0010      	movs	r0, r2
 800b976:	4798      	blx	r3
 800b978:	0003      	movs	r3, r0
 800b97a:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b97c:	e05d      	b.n	800ba3a <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 800b97e:	683a      	ldr	r2, [r7, #0]
 800b980:	687b      	ldr	r3, [r7, #4]
 800b982:	0011      	movs	r1, r2
 800b984:	0018      	movs	r0, r3
 800b986:	f000 fabd 	bl	800bf04 <USBD_CtlError>
            err++;
 800b98a:	210b      	movs	r1, #11
 800b98c:	187b      	adds	r3, r7, r1
 800b98e:	781a      	ldrb	r2, [r3, #0]
 800b990:	187b      	adds	r3, r7, r1
 800b992:	3201      	adds	r2, #1
 800b994:	701a      	strb	r2, [r3, #0]
          break;
 800b996:	e050      	b.n	800ba3a <USBD_GetDescriptor+0x262>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800b998:	687a      	ldr	r2, [r7, #4]
 800b99a:	23ac      	movs	r3, #172	; 0xac
 800b99c:	009b      	lsls	r3, r3, #2
 800b99e:	58d3      	ldr	r3, [r2, r3]
 800b9a0:	695b      	ldr	r3, [r3, #20]
 800b9a2:	2b00      	cmp	r3, #0
 800b9a4:	d00d      	beq.n	800b9c2 <USBD_GetDescriptor+0x1ea>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800b9a6:	687a      	ldr	r2, [r7, #4]
 800b9a8:	23ac      	movs	r3, #172	; 0xac
 800b9aa:	009b      	lsls	r3, r3, #2
 800b9ac:	58d3      	ldr	r3, [r2, r3]
 800b9ae:	695b      	ldr	r3, [r3, #20]
 800b9b0:	687a      	ldr	r2, [r7, #4]
 800b9b2:	7c12      	ldrb	r2, [r2, #16]
 800b9b4:	2108      	movs	r1, #8
 800b9b6:	1879      	adds	r1, r7, r1
 800b9b8:	0010      	movs	r0, r2
 800b9ba:	4798      	blx	r3
 800b9bc:	0003      	movs	r3, r0
 800b9be:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b9c0:	e03b      	b.n	800ba3a <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 800b9c2:	683a      	ldr	r2, [r7, #0]
 800b9c4:	687b      	ldr	r3, [r7, #4]
 800b9c6:	0011      	movs	r1, r2
 800b9c8:	0018      	movs	r0, r3
 800b9ca:	f000 fa9b 	bl	800bf04 <USBD_CtlError>
            err++;
 800b9ce:	210b      	movs	r1, #11
 800b9d0:	187b      	adds	r3, r7, r1
 800b9d2:	781a      	ldrb	r2, [r3, #0]
 800b9d4:	187b      	adds	r3, r7, r1
 800b9d6:	3201      	adds	r2, #1
 800b9d8:	701a      	strb	r2, [r3, #0]
          break;
 800b9da:	e02e      	b.n	800ba3a <USBD_GetDescriptor+0x262>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800b9dc:	687a      	ldr	r2, [r7, #4]
 800b9de:	23ac      	movs	r3, #172	; 0xac
 800b9e0:	009b      	lsls	r3, r3, #2
 800b9e2:	58d3      	ldr	r3, [r2, r3]
 800b9e4:	699b      	ldr	r3, [r3, #24]
 800b9e6:	2b00      	cmp	r3, #0
 800b9e8:	d00d      	beq.n	800ba06 <USBD_GetDescriptor+0x22e>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800b9ea:	687a      	ldr	r2, [r7, #4]
 800b9ec:	23ac      	movs	r3, #172	; 0xac
 800b9ee:	009b      	lsls	r3, r3, #2
 800b9f0:	58d3      	ldr	r3, [r2, r3]
 800b9f2:	699b      	ldr	r3, [r3, #24]
 800b9f4:	687a      	ldr	r2, [r7, #4]
 800b9f6:	7c12      	ldrb	r2, [r2, #16]
 800b9f8:	2108      	movs	r1, #8
 800b9fa:	1879      	adds	r1, r7, r1
 800b9fc:	0010      	movs	r0, r2
 800b9fe:	4798      	blx	r3
 800ba00:	0003      	movs	r3, r0
 800ba02:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ba04:	e019      	b.n	800ba3a <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 800ba06:	683a      	ldr	r2, [r7, #0]
 800ba08:	687b      	ldr	r3, [r7, #4]
 800ba0a:	0011      	movs	r1, r2
 800ba0c:	0018      	movs	r0, r3
 800ba0e:	f000 fa79 	bl	800bf04 <USBD_CtlError>
            err++;
 800ba12:	210b      	movs	r1, #11
 800ba14:	187b      	adds	r3, r7, r1
 800ba16:	781a      	ldrb	r2, [r3, #0]
 800ba18:	187b      	adds	r3, r7, r1
 800ba1a:	3201      	adds	r2, #1
 800ba1c:	701a      	strb	r2, [r3, #0]
          break;
 800ba1e:	e00c      	b.n	800ba3a <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 800ba20:	683a      	ldr	r2, [r7, #0]
 800ba22:	687b      	ldr	r3, [r7, #4]
 800ba24:	0011      	movs	r1, r2
 800ba26:	0018      	movs	r0, r3
 800ba28:	f000 fa6c 	bl	800bf04 <USBD_CtlError>
          err++;
 800ba2c:	210b      	movs	r1, #11
 800ba2e:	187b      	adds	r3, r7, r1
 800ba30:	781a      	ldrb	r2, [r3, #0]
 800ba32:	187b      	adds	r3, r7, r1
 800ba34:	3201      	adds	r2, #1
 800ba36:	701a      	strb	r2, [r3, #0]
#endif
      }
      break;
 800ba38:	e04b      	b.n	800bad2 <USBD_GetDescriptor+0x2fa>
 800ba3a:	e04a      	b.n	800bad2 <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ba3c:	687b      	ldr	r3, [r7, #4]
 800ba3e:	7c1b      	ldrb	r3, [r3, #16]
 800ba40:	2b00      	cmp	r3, #0
 800ba42:	d10b      	bne.n	800ba5c <USBD_GetDescriptor+0x284>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800ba44:	687a      	ldr	r2, [r7, #4]
 800ba46:	23ad      	movs	r3, #173	; 0xad
 800ba48:	009b      	lsls	r3, r3, #2
 800ba4a:	58d3      	ldr	r3, [r2, r3]
 800ba4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ba4e:	2208      	movs	r2, #8
 800ba50:	18ba      	adds	r2, r7, r2
 800ba52:	0010      	movs	r0, r2
 800ba54:	4798      	blx	r3
 800ba56:	0003      	movs	r3, r0
 800ba58:	60fb      	str	r3, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800ba5a:	e03a      	b.n	800bad2 <USBD_GetDescriptor+0x2fa>
        USBD_CtlError(pdev, req);
 800ba5c:	683a      	ldr	r2, [r7, #0]
 800ba5e:	687b      	ldr	r3, [r7, #4]
 800ba60:	0011      	movs	r1, r2
 800ba62:	0018      	movs	r0, r3
 800ba64:	f000 fa4e 	bl	800bf04 <USBD_CtlError>
        err++;
 800ba68:	210b      	movs	r1, #11
 800ba6a:	187b      	adds	r3, r7, r1
 800ba6c:	781a      	ldrb	r2, [r3, #0]
 800ba6e:	187b      	adds	r3, r7, r1
 800ba70:	3201      	adds	r2, #1
 800ba72:	701a      	strb	r2, [r3, #0]
      break;
 800ba74:	e02d      	b.n	800bad2 <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ba76:	687b      	ldr	r3, [r7, #4]
 800ba78:	7c1b      	ldrb	r3, [r3, #16]
 800ba7a:	2b00      	cmp	r3, #0
 800ba7c:	d10f      	bne.n	800ba9e <USBD_GetDescriptor+0x2c6>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800ba7e:	687a      	ldr	r2, [r7, #4]
 800ba80:	23ad      	movs	r3, #173	; 0xad
 800ba82:	009b      	lsls	r3, r3, #2
 800ba84:	58d3      	ldr	r3, [r2, r3]
 800ba86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ba88:	2208      	movs	r2, #8
 800ba8a:	18ba      	adds	r2, r7, r2
 800ba8c:	0010      	movs	r0, r2
 800ba8e:	4798      	blx	r3
 800ba90:	0003      	movs	r3, r0
 800ba92:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800ba94:	68fb      	ldr	r3, [r7, #12]
 800ba96:	3301      	adds	r3, #1
 800ba98:	2207      	movs	r2, #7
 800ba9a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800ba9c:	e019      	b.n	800bad2 <USBD_GetDescriptor+0x2fa>
        USBD_CtlError(pdev, req);
 800ba9e:	683a      	ldr	r2, [r7, #0]
 800baa0:	687b      	ldr	r3, [r7, #4]
 800baa2:	0011      	movs	r1, r2
 800baa4:	0018      	movs	r0, r3
 800baa6:	f000 fa2d 	bl	800bf04 <USBD_CtlError>
        err++;
 800baaa:	210b      	movs	r1, #11
 800baac:	187b      	adds	r3, r7, r1
 800baae:	781a      	ldrb	r2, [r3, #0]
 800bab0:	187b      	adds	r3, r7, r1
 800bab2:	3201      	adds	r2, #1
 800bab4:	701a      	strb	r2, [r3, #0]
      break;
 800bab6:	e00c      	b.n	800bad2 <USBD_GetDescriptor+0x2fa>

    default:
      USBD_CtlError(pdev, req);
 800bab8:	683a      	ldr	r2, [r7, #0]
 800baba:	687b      	ldr	r3, [r7, #4]
 800babc:	0011      	movs	r1, r2
 800babe:	0018      	movs	r0, r3
 800bac0:	f000 fa20 	bl	800bf04 <USBD_CtlError>
      err++;
 800bac4:	210b      	movs	r1, #11
 800bac6:	187b      	adds	r3, r7, r1
 800bac8:	781a      	ldrb	r2, [r3, #0]
 800baca:	187b      	adds	r3, r7, r1
 800bacc:	3201      	adds	r2, #1
 800bace:	701a      	strb	r2, [r3, #0]
      break;
 800bad0:	46c0      	nop			; (mov r8, r8)
  }

  if (err != 0U)
 800bad2:	230b      	movs	r3, #11
 800bad4:	18fb      	adds	r3, r7, r3
 800bad6:	781b      	ldrb	r3, [r3, #0]
 800bad8:	2b00      	cmp	r3, #0
 800bada:	d127      	bne.n	800bb2c <USBD_GetDescriptor+0x354>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 800badc:	2108      	movs	r1, #8
 800bade:	187b      	adds	r3, r7, r1
 800bae0:	881b      	ldrh	r3, [r3, #0]
 800bae2:	2b00      	cmp	r3, #0
 800bae4:	d019      	beq.n	800bb1a <USBD_GetDescriptor+0x342>
 800bae6:	683b      	ldr	r3, [r7, #0]
 800bae8:	88db      	ldrh	r3, [r3, #6]
 800baea:	2b00      	cmp	r3, #0
 800baec:	d015      	beq.n	800bb1a <USBD_GetDescriptor+0x342>
    {
      len = MIN(len, req->wLength);
 800baee:	683b      	ldr	r3, [r7, #0]
 800baf0:	88da      	ldrh	r2, [r3, #6]
 800baf2:	187b      	adds	r3, r7, r1
 800baf4:	881b      	ldrh	r3, [r3, #0]
 800baf6:	1c18      	adds	r0, r3, #0
 800baf8:	1c11      	adds	r1, r2, #0
 800bafa:	b28a      	uxth	r2, r1
 800bafc:	b283      	uxth	r3, r0
 800bafe:	429a      	cmp	r2, r3
 800bb00:	d900      	bls.n	800bb04 <USBD_GetDescriptor+0x32c>
 800bb02:	1c01      	adds	r1, r0, #0
 800bb04:	b28a      	uxth	r2, r1
 800bb06:	2108      	movs	r1, #8
 800bb08:	187b      	adds	r3, r7, r1
 800bb0a:	801a      	strh	r2, [r3, #0]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800bb0c:	187b      	adds	r3, r7, r1
 800bb0e:	881a      	ldrh	r2, [r3, #0]
 800bb10:	68f9      	ldr	r1, [r7, #12]
 800bb12:	687b      	ldr	r3, [r7, #4]
 800bb14:	0018      	movs	r0, r3
 800bb16:	f000 fa73 	bl	800c000 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 800bb1a:	683b      	ldr	r3, [r7, #0]
 800bb1c:	88db      	ldrh	r3, [r3, #6]
 800bb1e:	2b00      	cmp	r3, #0
 800bb20:	d105      	bne.n	800bb2e <USBD_GetDescriptor+0x356>
    {
      (void)USBD_CtlSendStatus(pdev);
 800bb22:	687b      	ldr	r3, [r7, #4]
 800bb24:	0018      	movs	r0, r3
 800bb26:	f000 fad5 	bl	800c0d4 <USBD_CtlSendStatus>
 800bb2a:	e000      	b.n	800bb2e <USBD_GetDescriptor+0x356>
    return;
 800bb2c:	46c0      	nop			; (mov r8, r8)
    }
  }
}
 800bb2e:	46bd      	mov	sp, r7
 800bb30:	b004      	add	sp, #16
 800bb32:	bd80      	pop	{r7, pc}
 800bb34:	0800d654 	.word	0x0800d654
 800bb38:	0800d674 	.word	0x0800d674

0800bb3c <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800bb3c:	b590      	push	{r4, r7, lr}
 800bb3e:	b085      	sub	sp, #20
 800bb40:	af00      	add	r7, sp, #0
 800bb42:	6078      	str	r0, [r7, #4]
 800bb44:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800bb46:	683b      	ldr	r3, [r7, #0]
 800bb48:	889b      	ldrh	r3, [r3, #4]
 800bb4a:	2b00      	cmp	r3, #0
 800bb4c:	d13d      	bne.n	800bbca <USBD_SetAddress+0x8e>
 800bb4e:	683b      	ldr	r3, [r7, #0]
 800bb50:	88db      	ldrh	r3, [r3, #6]
 800bb52:	2b00      	cmp	r3, #0
 800bb54:	d139      	bne.n	800bbca <USBD_SetAddress+0x8e>
 800bb56:	683b      	ldr	r3, [r7, #0]
 800bb58:	885b      	ldrh	r3, [r3, #2]
 800bb5a:	2b7f      	cmp	r3, #127	; 0x7f
 800bb5c:	d835      	bhi.n	800bbca <USBD_SetAddress+0x8e>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800bb5e:	683b      	ldr	r3, [r7, #0]
 800bb60:	885b      	ldrh	r3, [r3, #2]
 800bb62:	b2da      	uxtb	r2, r3
 800bb64:	230f      	movs	r3, #15
 800bb66:	18fb      	adds	r3, r7, r3
 800bb68:	217f      	movs	r1, #127	; 0x7f
 800bb6a:	400a      	ands	r2, r1
 800bb6c:	701a      	strb	r2, [r3, #0]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bb6e:	687a      	ldr	r2, [r7, #4]
 800bb70:	23a7      	movs	r3, #167	; 0xa7
 800bb72:	009b      	lsls	r3, r3, #2
 800bb74:	5cd3      	ldrb	r3, [r2, r3]
 800bb76:	2b03      	cmp	r3, #3
 800bb78:	d106      	bne.n	800bb88 <USBD_SetAddress+0x4c>
    {
      USBD_CtlError(pdev, req);
 800bb7a:	683a      	ldr	r2, [r7, #0]
 800bb7c:	687b      	ldr	r3, [r7, #4]
 800bb7e:	0011      	movs	r1, r2
 800bb80:	0018      	movs	r0, r3
 800bb82:	f000 f9bf 	bl	800bf04 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bb86:	e027      	b.n	800bbd8 <USBD_SetAddress+0x9c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800bb88:	687b      	ldr	r3, [r7, #4]
 800bb8a:	240f      	movs	r4, #15
 800bb8c:	193a      	adds	r2, r7, r4
 800bb8e:	4914      	ldr	r1, [pc, #80]	; (800bbe0 <USBD_SetAddress+0xa4>)
 800bb90:	7812      	ldrb	r2, [r2, #0]
 800bb92:	545a      	strb	r2, [r3, r1]
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800bb94:	193b      	adds	r3, r7, r4
 800bb96:	781a      	ldrb	r2, [r3, #0]
 800bb98:	687b      	ldr	r3, [r7, #4]
 800bb9a:	0011      	movs	r1, r2
 800bb9c:	0018      	movs	r0, r3
 800bb9e:	f000 ff25 	bl	800c9ec <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800bba2:	687b      	ldr	r3, [r7, #4]
 800bba4:	0018      	movs	r0, r3
 800bba6:	f000 fa95 	bl	800c0d4 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800bbaa:	193b      	adds	r3, r7, r4
 800bbac:	781b      	ldrb	r3, [r3, #0]
 800bbae:	2b00      	cmp	r3, #0
 800bbb0:	d005      	beq.n	800bbbe <USBD_SetAddress+0x82>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800bbb2:	687a      	ldr	r2, [r7, #4]
 800bbb4:	23a7      	movs	r3, #167	; 0xa7
 800bbb6:	009b      	lsls	r3, r3, #2
 800bbb8:	2102      	movs	r1, #2
 800bbba:	54d1      	strb	r1, [r2, r3]
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bbbc:	e00c      	b.n	800bbd8 <USBD_SetAddress+0x9c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800bbbe:	687a      	ldr	r2, [r7, #4]
 800bbc0:	23a7      	movs	r3, #167	; 0xa7
 800bbc2:	009b      	lsls	r3, r3, #2
 800bbc4:	2101      	movs	r1, #1
 800bbc6:	54d1      	strb	r1, [r2, r3]
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bbc8:	e006      	b.n	800bbd8 <USBD_SetAddress+0x9c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800bbca:	683a      	ldr	r2, [r7, #0]
 800bbcc:	687b      	ldr	r3, [r7, #4]
 800bbce:	0011      	movs	r1, r2
 800bbd0:	0018      	movs	r0, r3
 800bbd2:	f000 f997 	bl	800bf04 <USBD_CtlError>
  }
}
 800bbd6:	46c0      	nop			; (mov r8, r8)
 800bbd8:	46c0      	nop			; (mov r8, r8)
 800bbda:	46bd      	mov	sp, r7
 800bbdc:	b005      	add	sp, #20
 800bbde:	bd90      	pop	{r4, r7, pc}
 800bbe0:	0000029e 	.word	0x0000029e

0800bbe4 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bbe4:	b580      	push	{r7, lr}
 800bbe6:	b082      	sub	sp, #8
 800bbe8:	af00      	add	r7, sp, #0
 800bbea:	6078      	str	r0, [r7, #4]
 800bbec:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800bbee:	683b      	ldr	r3, [r7, #0]
 800bbf0:	885b      	ldrh	r3, [r3, #2]
 800bbf2:	b2da      	uxtb	r2, r3
 800bbf4:	4b4c      	ldr	r3, [pc, #304]	; (800bd28 <USBD_SetConfig+0x144>)
 800bbf6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800bbf8:	4b4b      	ldr	r3, [pc, #300]	; (800bd28 <USBD_SetConfig+0x144>)
 800bbfa:	781b      	ldrb	r3, [r3, #0]
 800bbfc:	2b01      	cmp	r3, #1
 800bbfe:	d906      	bls.n	800bc0e <USBD_SetConfig+0x2a>
  {
    USBD_CtlError(pdev, req);
 800bc00:	683a      	ldr	r2, [r7, #0]
 800bc02:	687b      	ldr	r3, [r7, #4]
 800bc04:	0011      	movs	r1, r2
 800bc06:	0018      	movs	r0, r3
 800bc08:	f000 f97c 	bl	800bf04 <USBD_CtlError>
 800bc0c:	e088      	b.n	800bd20 <USBD_SetConfig+0x13c>
  }
  else
  {
    switch (pdev->dev_state)
 800bc0e:	687a      	ldr	r2, [r7, #4]
 800bc10:	23a7      	movs	r3, #167	; 0xa7
 800bc12:	009b      	lsls	r3, r3, #2
 800bc14:	5cd3      	ldrb	r3, [r2, r3]
 800bc16:	2b02      	cmp	r3, #2
 800bc18:	d002      	beq.n	800bc20 <USBD_SetConfig+0x3c>
 800bc1a:	2b03      	cmp	r3, #3
 800bc1c:	d029      	beq.n	800bc72 <USBD_SetConfig+0x8e>
 800bc1e:	e071      	b.n	800bd04 <USBD_SetConfig+0x120>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 800bc20:	4b41      	ldr	r3, [pc, #260]	; (800bd28 <USBD_SetConfig+0x144>)
 800bc22:	781b      	ldrb	r3, [r3, #0]
 800bc24:	2b00      	cmp	r3, #0
 800bc26:	d01f      	beq.n	800bc68 <USBD_SetConfig+0x84>
        {
          pdev->dev_config = cfgidx;
 800bc28:	4b3f      	ldr	r3, [pc, #252]	; (800bd28 <USBD_SetConfig+0x144>)
 800bc2a:	781b      	ldrb	r3, [r3, #0]
 800bc2c:	001a      	movs	r2, r3
 800bc2e:	687b      	ldr	r3, [r7, #4]
 800bc30:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800bc32:	687a      	ldr	r2, [r7, #4]
 800bc34:	23a7      	movs	r3, #167	; 0xa7
 800bc36:	009b      	lsls	r3, r3, #2
 800bc38:	2103      	movs	r1, #3
 800bc3a:	54d1      	strb	r1, [r2, r3]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800bc3c:	4b3a      	ldr	r3, [pc, #232]	; (800bd28 <USBD_SetConfig+0x144>)
 800bc3e:	781a      	ldrb	r2, [r3, #0]
 800bc40:	687b      	ldr	r3, [r7, #4]
 800bc42:	0011      	movs	r1, r2
 800bc44:	0018      	movs	r0, r3
 800bc46:	f7ff f8c6 	bl	800add6 <USBD_SetClassConfig>
 800bc4a:	0003      	movs	r3, r0
 800bc4c:	2b02      	cmp	r3, #2
 800bc4e:	d106      	bne.n	800bc5e <USBD_SetConfig+0x7a>
          {
            USBD_CtlError(pdev, req);
 800bc50:	683a      	ldr	r2, [r7, #0]
 800bc52:	687b      	ldr	r3, [r7, #4]
 800bc54:	0011      	movs	r1, r2
 800bc56:	0018      	movs	r0, r3
 800bc58:	f000 f954 	bl	800bf04 <USBD_CtlError>
            return;
 800bc5c:	e060      	b.n	800bd20 <USBD_SetConfig+0x13c>
          }
          USBD_CtlSendStatus(pdev);
 800bc5e:	687b      	ldr	r3, [r7, #4]
 800bc60:	0018      	movs	r0, r3
 800bc62:	f000 fa37 	bl	800c0d4 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800bc66:	e05b      	b.n	800bd20 <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 800bc68:	687b      	ldr	r3, [r7, #4]
 800bc6a:	0018      	movs	r0, r3
 800bc6c:	f000 fa32 	bl	800c0d4 <USBD_CtlSendStatus>
        break;
 800bc70:	e056      	b.n	800bd20 <USBD_SetConfig+0x13c>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 800bc72:	4b2d      	ldr	r3, [pc, #180]	; (800bd28 <USBD_SetConfig+0x144>)
 800bc74:	781b      	ldrb	r3, [r3, #0]
 800bc76:	2b00      	cmp	r3, #0
 800bc78:	d115      	bne.n	800bca6 <USBD_SetConfig+0xc2>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800bc7a:	687a      	ldr	r2, [r7, #4]
 800bc7c:	23a7      	movs	r3, #167	; 0xa7
 800bc7e:	009b      	lsls	r3, r3, #2
 800bc80:	2102      	movs	r1, #2
 800bc82:	54d1      	strb	r1, [r2, r3]
          pdev->dev_config = cfgidx;
 800bc84:	4b28      	ldr	r3, [pc, #160]	; (800bd28 <USBD_SetConfig+0x144>)
 800bc86:	781b      	ldrb	r3, [r3, #0]
 800bc88:	001a      	movs	r2, r3
 800bc8a:	687b      	ldr	r3, [r7, #4]
 800bc8c:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 800bc8e:	4b26      	ldr	r3, [pc, #152]	; (800bd28 <USBD_SetConfig+0x144>)
 800bc90:	781a      	ldrb	r2, [r3, #0]
 800bc92:	687b      	ldr	r3, [r7, #4]
 800bc94:	0011      	movs	r1, r2
 800bc96:	0018      	movs	r0, r3
 800bc98:	f7ff f8c4 	bl	800ae24 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 800bc9c:	687b      	ldr	r3, [r7, #4]
 800bc9e:	0018      	movs	r0, r3
 800bca0:	f000 fa18 	bl	800c0d4 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800bca4:	e03c      	b.n	800bd20 <USBD_SetConfig+0x13c>
        else if (cfgidx != pdev->dev_config)
 800bca6:	4b20      	ldr	r3, [pc, #128]	; (800bd28 <USBD_SetConfig+0x144>)
 800bca8:	781b      	ldrb	r3, [r3, #0]
 800bcaa:	001a      	movs	r2, r3
 800bcac:	687b      	ldr	r3, [r7, #4]
 800bcae:	685b      	ldr	r3, [r3, #4]
 800bcb0:	429a      	cmp	r2, r3
 800bcb2:	d022      	beq.n	800bcfa <USBD_SetConfig+0x116>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800bcb4:	687b      	ldr	r3, [r7, #4]
 800bcb6:	685b      	ldr	r3, [r3, #4]
 800bcb8:	b2da      	uxtb	r2, r3
 800bcba:	687b      	ldr	r3, [r7, #4]
 800bcbc:	0011      	movs	r1, r2
 800bcbe:	0018      	movs	r0, r3
 800bcc0:	f7ff f8b0 	bl	800ae24 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800bcc4:	4b18      	ldr	r3, [pc, #96]	; (800bd28 <USBD_SetConfig+0x144>)
 800bcc6:	781b      	ldrb	r3, [r3, #0]
 800bcc8:	001a      	movs	r2, r3
 800bcca:	687b      	ldr	r3, [r7, #4]
 800bccc:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800bcce:	4b16      	ldr	r3, [pc, #88]	; (800bd28 <USBD_SetConfig+0x144>)
 800bcd0:	781a      	ldrb	r2, [r3, #0]
 800bcd2:	687b      	ldr	r3, [r7, #4]
 800bcd4:	0011      	movs	r1, r2
 800bcd6:	0018      	movs	r0, r3
 800bcd8:	f7ff f87d 	bl	800add6 <USBD_SetClassConfig>
 800bcdc:	0003      	movs	r3, r0
 800bcde:	2b02      	cmp	r3, #2
 800bce0:	d106      	bne.n	800bcf0 <USBD_SetConfig+0x10c>
            USBD_CtlError(pdev, req);
 800bce2:	683a      	ldr	r2, [r7, #0]
 800bce4:	687b      	ldr	r3, [r7, #4]
 800bce6:	0011      	movs	r1, r2
 800bce8:	0018      	movs	r0, r3
 800bcea:	f000 f90b 	bl	800bf04 <USBD_CtlError>
            return;
 800bcee:	e017      	b.n	800bd20 <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 800bcf0:	687b      	ldr	r3, [r7, #4]
 800bcf2:	0018      	movs	r0, r3
 800bcf4:	f000 f9ee 	bl	800c0d4 <USBD_CtlSendStatus>
        break;
 800bcf8:	e012      	b.n	800bd20 <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 800bcfa:	687b      	ldr	r3, [r7, #4]
 800bcfc:	0018      	movs	r0, r3
 800bcfe:	f000 f9e9 	bl	800c0d4 <USBD_CtlSendStatus>
        break;
 800bd02:	e00d      	b.n	800bd20 <USBD_SetConfig+0x13c>

      default:
        USBD_CtlError(pdev, req);
 800bd04:	683a      	ldr	r2, [r7, #0]
 800bd06:	687b      	ldr	r3, [r7, #4]
 800bd08:	0011      	movs	r1, r2
 800bd0a:	0018      	movs	r0, r3
 800bd0c:	f000 f8fa 	bl	800bf04 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 800bd10:	4b05      	ldr	r3, [pc, #20]	; (800bd28 <USBD_SetConfig+0x144>)
 800bd12:	781a      	ldrb	r2, [r3, #0]
 800bd14:	687b      	ldr	r3, [r7, #4]
 800bd16:	0011      	movs	r1, r2
 800bd18:	0018      	movs	r0, r3
 800bd1a:	f7ff f883 	bl	800ae24 <USBD_ClrClassConfig>
        break;
 800bd1e:	46c0      	nop			; (mov r8, r8)
    }
  }
}
 800bd20:	46bd      	mov	sp, r7
 800bd22:	b002      	add	sp, #8
 800bd24:	bd80      	pop	{r7, pc}
 800bd26:	46c0      	nop			; (mov r8, r8)
 800bd28:	20000264 	.word	0x20000264

0800bd2c <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bd2c:	b580      	push	{r7, lr}
 800bd2e:	b082      	sub	sp, #8
 800bd30:	af00      	add	r7, sp, #0
 800bd32:	6078      	str	r0, [r7, #4]
 800bd34:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800bd36:	683b      	ldr	r3, [r7, #0]
 800bd38:	88db      	ldrh	r3, [r3, #6]
 800bd3a:	2b01      	cmp	r3, #1
 800bd3c:	d006      	beq.n	800bd4c <USBD_GetConfig+0x20>
  {
    USBD_CtlError(pdev, req);
 800bd3e:	683a      	ldr	r2, [r7, #0]
 800bd40:	687b      	ldr	r3, [r7, #4]
 800bd42:	0011      	movs	r1, r2
 800bd44:	0018      	movs	r0, r3
 800bd46:	f000 f8dd 	bl	800bf04 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800bd4a:	e026      	b.n	800bd9a <USBD_GetConfig+0x6e>
    switch (pdev->dev_state)
 800bd4c:	687a      	ldr	r2, [r7, #4]
 800bd4e:	23a7      	movs	r3, #167	; 0xa7
 800bd50:	009b      	lsls	r3, r3, #2
 800bd52:	5cd3      	ldrb	r3, [r2, r3]
 800bd54:	2b02      	cmp	r3, #2
 800bd56:	dc02      	bgt.n	800bd5e <USBD_GetConfig+0x32>
 800bd58:	2b00      	cmp	r3, #0
 800bd5a:	dc03      	bgt.n	800bd64 <USBD_GetConfig+0x38>
 800bd5c:	e016      	b.n	800bd8c <USBD_GetConfig+0x60>
 800bd5e:	2b03      	cmp	r3, #3
 800bd60:	d00c      	beq.n	800bd7c <USBD_GetConfig+0x50>
 800bd62:	e013      	b.n	800bd8c <USBD_GetConfig+0x60>
        pdev->dev_default_config = 0U;
 800bd64:	687b      	ldr	r3, [r7, #4]
 800bd66:	2200      	movs	r2, #0
 800bd68:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800bd6a:	687b      	ldr	r3, [r7, #4]
 800bd6c:	3308      	adds	r3, #8
 800bd6e:	0019      	movs	r1, r3
 800bd70:	687b      	ldr	r3, [r7, #4]
 800bd72:	2201      	movs	r2, #1
 800bd74:	0018      	movs	r0, r3
 800bd76:	f000 f943 	bl	800c000 <USBD_CtlSendData>
        break;
 800bd7a:	e00e      	b.n	800bd9a <USBD_GetConfig+0x6e>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800bd7c:	687b      	ldr	r3, [r7, #4]
 800bd7e:	1d19      	adds	r1, r3, #4
 800bd80:	687b      	ldr	r3, [r7, #4]
 800bd82:	2201      	movs	r2, #1
 800bd84:	0018      	movs	r0, r3
 800bd86:	f000 f93b 	bl	800c000 <USBD_CtlSendData>
        break;
 800bd8a:	e006      	b.n	800bd9a <USBD_GetConfig+0x6e>
        USBD_CtlError(pdev, req);
 800bd8c:	683a      	ldr	r2, [r7, #0]
 800bd8e:	687b      	ldr	r3, [r7, #4]
 800bd90:	0011      	movs	r1, r2
 800bd92:	0018      	movs	r0, r3
 800bd94:	f000 f8b6 	bl	800bf04 <USBD_CtlError>
        break;
 800bd98:	46c0      	nop			; (mov r8, r8)
}
 800bd9a:	46c0      	nop			; (mov r8, r8)
 800bd9c:	46bd      	mov	sp, r7
 800bd9e:	b002      	add	sp, #8
 800bda0:	bd80      	pop	{r7, pc}

0800bda2 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bda2:	b580      	push	{r7, lr}
 800bda4:	b082      	sub	sp, #8
 800bda6:	af00      	add	r7, sp, #0
 800bda8:	6078      	str	r0, [r7, #4]
 800bdaa:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800bdac:	687a      	ldr	r2, [r7, #4]
 800bdae:	23a7      	movs	r3, #167	; 0xa7
 800bdb0:	009b      	lsls	r3, r3, #2
 800bdb2:	5cd3      	ldrb	r3, [r2, r3]
 800bdb4:	3b01      	subs	r3, #1
 800bdb6:	2b02      	cmp	r3, #2
 800bdb8:	d822      	bhi.n	800be00 <USBD_GetStatus+0x5e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800bdba:	683b      	ldr	r3, [r7, #0]
 800bdbc:	88db      	ldrh	r3, [r3, #6]
 800bdbe:	2b02      	cmp	r3, #2
 800bdc0:	d006      	beq.n	800bdd0 <USBD_GetStatus+0x2e>
      {
        USBD_CtlError(pdev, req);
 800bdc2:	683a      	ldr	r2, [r7, #0]
 800bdc4:	687b      	ldr	r3, [r7, #4]
 800bdc6:	0011      	movs	r1, r2
 800bdc8:	0018      	movs	r0, r3
 800bdca:	f000 f89b 	bl	800bf04 <USBD_CtlError>
        break;
 800bdce:	e01e      	b.n	800be0e <USBD_GetStatus+0x6c>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800bdd0:	687b      	ldr	r3, [r7, #4]
 800bdd2:	2201      	movs	r2, #1
 800bdd4:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 800bdd6:	687a      	ldr	r2, [r7, #4]
 800bdd8:	23a9      	movs	r3, #169	; 0xa9
 800bdda:	009b      	lsls	r3, r3, #2
 800bddc:	58d3      	ldr	r3, [r2, r3]
 800bdde:	2b00      	cmp	r3, #0
 800bde0:	d005      	beq.n	800bdee <USBD_GetStatus+0x4c>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800bde2:	687b      	ldr	r3, [r7, #4]
 800bde4:	68db      	ldr	r3, [r3, #12]
 800bde6:	2202      	movs	r2, #2
 800bde8:	431a      	orrs	r2, r3
 800bdea:	687b      	ldr	r3, [r7, #4]
 800bdec:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800bdee:	687b      	ldr	r3, [r7, #4]
 800bdf0:	330c      	adds	r3, #12
 800bdf2:	0019      	movs	r1, r3
 800bdf4:	687b      	ldr	r3, [r7, #4]
 800bdf6:	2202      	movs	r2, #2
 800bdf8:	0018      	movs	r0, r3
 800bdfa:	f000 f901 	bl	800c000 <USBD_CtlSendData>
      break;
 800bdfe:	e006      	b.n	800be0e <USBD_GetStatus+0x6c>

    default:
      USBD_CtlError(pdev, req);
 800be00:	683a      	ldr	r2, [r7, #0]
 800be02:	687b      	ldr	r3, [r7, #4]
 800be04:	0011      	movs	r1, r2
 800be06:	0018      	movs	r0, r3
 800be08:	f000 f87c 	bl	800bf04 <USBD_CtlError>
      break;
 800be0c:	46c0      	nop			; (mov r8, r8)
  }
}
 800be0e:	46c0      	nop			; (mov r8, r8)
 800be10:	46bd      	mov	sp, r7
 800be12:	b002      	add	sp, #8
 800be14:	bd80      	pop	{r7, pc}

0800be16 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800be16:	b580      	push	{r7, lr}
 800be18:	b082      	sub	sp, #8
 800be1a:	af00      	add	r7, sp, #0
 800be1c:	6078      	str	r0, [r7, #4]
 800be1e:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800be20:	683b      	ldr	r3, [r7, #0]
 800be22:	885b      	ldrh	r3, [r3, #2]
 800be24:	2b01      	cmp	r3, #1
 800be26:	d108      	bne.n	800be3a <USBD_SetFeature+0x24>
  {
    pdev->dev_remote_wakeup = 1U;
 800be28:	687a      	ldr	r2, [r7, #4]
 800be2a:	23a9      	movs	r3, #169	; 0xa9
 800be2c:	009b      	lsls	r3, r3, #2
 800be2e:	2101      	movs	r1, #1
 800be30:	50d1      	str	r1, [r2, r3]
    USBD_CtlSendStatus(pdev);
 800be32:	687b      	ldr	r3, [r7, #4]
 800be34:	0018      	movs	r0, r3
 800be36:	f000 f94d 	bl	800c0d4 <USBD_CtlSendStatus>
  }
}
 800be3a:	46c0      	nop			; (mov r8, r8)
 800be3c:	46bd      	mov	sp, r7
 800be3e:	b002      	add	sp, #8
 800be40:	bd80      	pop	{r7, pc}

0800be42 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800be42:	b580      	push	{r7, lr}
 800be44:	b082      	sub	sp, #8
 800be46:	af00      	add	r7, sp, #0
 800be48:	6078      	str	r0, [r7, #4]
 800be4a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800be4c:	687a      	ldr	r2, [r7, #4]
 800be4e:	23a7      	movs	r3, #167	; 0xa7
 800be50:	009b      	lsls	r3, r3, #2
 800be52:	5cd3      	ldrb	r3, [r2, r3]
 800be54:	3b01      	subs	r3, #1
 800be56:	2b02      	cmp	r3, #2
 800be58:	d80d      	bhi.n	800be76 <USBD_ClrFeature+0x34>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800be5a:	683b      	ldr	r3, [r7, #0]
 800be5c:	885b      	ldrh	r3, [r3, #2]
 800be5e:	2b01      	cmp	r3, #1
 800be60:	d110      	bne.n	800be84 <USBD_ClrFeature+0x42>
      {
        pdev->dev_remote_wakeup = 0U;
 800be62:	687a      	ldr	r2, [r7, #4]
 800be64:	23a9      	movs	r3, #169	; 0xa9
 800be66:	009b      	lsls	r3, r3, #2
 800be68:	2100      	movs	r1, #0
 800be6a:	50d1      	str	r1, [r2, r3]
        USBD_CtlSendStatus(pdev);
 800be6c:	687b      	ldr	r3, [r7, #4]
 800be6e:	0018      	movs	r0, r3
 800be70:	f000 f930 	bl	800c0d4 <USBD_CtlSendStatus>
      }
      break;
 800be74:	e006      	b.n	800be84 <USBD_ClrFeature+0x42>

    default:
      USBD_CtlError(pdev, req);
 800be76:	683a      	ldr	r2, [r7, #0]
 800be78:	687b      	ldr	r3, [r7, #4]
 800be7a:	0011      	movs	r1, r2
 800be7c:	0018      	movs	r0, r3
 800be7e:	f000 f841 	bl	800bf04 <USBD_CtlError>
      break;
 800be82:	e000      	b.n	800be86 <USBD_ClrFeature+0x44>
      break;
 800be84:	46c0      	nop			; (mov r8, r8)
  }
}
 800be86:	46c0      	nop			; (mov r8, r8)
 800be88:	46bd      	mov	sp, r7
 800be8a:	b002      	add	sp, #8
 800be8c:	bd80      	pop	{r7, pc}

0800be8e <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800be8e:	b580      	push	{r7, lr}
 800be90:	b082      	sub	sp, #8
 800be92:	af00      	add	r7, sp, #0
 800be94:	6078      	str	r0, [r7, #4]
 800be96:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 800be98:	683b      	ldr	r3, [r7, #0]
 800be9a:	781a      	ldrb	r2, [r3, #0]
 800be9c:	687b      	ldr	r3, [r7, #4]
 800be9e:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 800bea0:	683b      	ldr	r3, [r7, #0]
 800bea2:	785a      	ldrb	r2, [r3, #1]
 800bea4:	687b      	ldr	r3, [r7, #4]
 800bea6:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 800bea8:	683b      	ldr	r3, [r7, #0]
 800beaa:	3302      	adds	r3, #2
 800beac:	781b      	ldrb	r3, [r3, #0]
 800beae:	b29a      	uxth	r2, r3
 800beb0:	683b      	ldr	r3, [r7, #0]
 800beb2:	3303      	adds	r3, #3
 800beb4:	781b      	ldrb	r3, [r3, #0]
 800beb6:	b29b      	uxth	r3, r3
 800beb8:	021b      	lsls	r3, r3, #8
 800beba:	b29b      	uxth	r3, r3
 800bebc:	18d3      	adds	r3, r2, r3
 800bebe:	b29a      	uxth	r2, r3
 800bec0:	687b      	ldr	r3, [r7, #4]
 800bec2:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 800bec4:	683b      	ldr	r3, [r7, #0]
 800bec6:	3304      	adds	r3, #4
 800bec8:	781b      	ldrb	r3, [r3, #0]
 800beca:	b29a      	uxth	r2, r3
 800becc:	683b      	ldr	r3, [r7, #0]
 800bece:	3305      	adds	r3, #5
 800bed0:	781b      	ldrb	r3, [r3, #0]
 800bed2:	b29b      	uxth	r3, r3
 800bed4:	021b      	lsls	r3, r3, #8
 800bed6:	b29b      	uxth	r3, r3
 800bed8:	18d3      	adds	r3, r2, r3
 800beda:	b29a      	uxth	r2, r3
 800bedc:	687b      	ldr	r3, [r7, #4]
 800bede:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 800bee0:	683b      	ldr	r3, [r7, #0]
 800bee2:	3306      	adds	r3, #6
 800bee4:	781b      	ldrb	r3, [r3, #0]
 800bee6:	b29a      	uxth	r2, r3
 800bee8:	683b      	ldr	r3, [r7, #0]
 800beea:	3307      	adds	r3, #7
 800beec:	781b      	ldrb	r3, [r3, #0]
 800beee:	b29b      	uxth	r3, r3
 800bef0:	021b      	lsls	r3, r3, #8
 800bef2:	b29b      	uxth	r3, r3
 800bef4:	18d3      	adds	r3, r2, r3
 800bef6:	b29a      	uxth	r2, r3
 800bef8:	687b      	ldr	r3, [r7, #4]
 800befa:	80da      	strh	r2, [r3, #6]

}
 800befc:	46c0      	nop			; (mov r8, r8)
 800befe:	46bd      	mov	sp, r7
 800bf00:	b002      	add	sp, #8
 800bf02:	bd80      	pop	{r7, pc}

0800bf04 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 800bf04:	b580      	push	{r7, lr}
 800bf06:	b082      	sub	sp, #8
 800bf08:	af00      	add	r7, sp, #0
 800bf0a:	6078      	str	r0, [r7, #4]
 800bf0c:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 800bf0e:	687b      	ldr	r3, [r7, #4]
 800bf10:	2180      	movs	r1, #128	; 0x80
 800bf12:	0018      	movs	r0, r3
 800bf14:	f000 fce3 	bl	800c8de <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800bf18:	687b      	ldr	r3, [r7, #4]
 800bf1a:	2100      	movs	r1, #0
 800bf1c:	0018      	movs	r0, r3
 800bf1e:	f000 fcde 	bl	800c8de <USBD_LL_StallEP>
}
 800bf22:	46c0      	nop			; (mov r8, r8)
 800bf24:	46bd      	mov	sp, r7
 800bf26:	b002      	add	sp, #8
 800bf28:	bd80      	pop	{r7, pc}

0800bf2a <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800bf2a:	b590      	push	{r4, r7, lr}
 800bf2c:	b087      	sub	sp, #28
 800bf2e:	af00      	add	r7, sp, #0
 800bf30:	60f8      	str	r0, [r7, #12]
 800bf32:	60b9      	str	r1, [r7, #8]
 800bf34:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800bf36:	2417      	movs	r4, #23
 800bf38:	193b      	adds	r3, r7, r4
 800bf3a:	2200      	movs	r2, #0
 800bf3c:	701a      	strb	r2, [r3, #0]

  if (desc != NULL)
 800bf3e:	68fb      	ldr	r3, [r7, #12]
 800bf40:	2b00      	cmp	r3, #0
 800bf42:	d03c      	beq.n	800bfbe <USBD_GetString+0x94>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800bf44:	68fb      	ldr	r3, [r7, #12]
 800bf46:	0018      	movs	r0, r3
 800bf48:	f000 f83d 	bl	800bfc6 <USBD_GetLen>
 800bf4c:	0003      	movs	r3, r0
 800bf4e:	3301      	adds	r3, #1
 800bf50:	b29b      	uxth	r3, r3
 800bf52:	18db      	adds	r3, r3, r3
 800bf54:	b29a      	uxth	r2, r3
 800bf56:	687b      	ldr	r3, [r7, #4]
 800bf58:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800bf5a:	193b      	adds	r3, r7, r4
 800bf5c:	781b      	ldrb	r3, [r3, #0]
 800bf5e:	193a      	adds	r2, r7, r4
 800bf60:	1c59      	adds	r1, r3, #1
 800bf62:	7011      	strb	r1, [r2, #0]
 800bf64:	001a      	movs	r2, r3
 800bf66:	68bb      	ldr	r3, [r7, #8]
 800bf68:	189b      	adds	r3, r3, r2
 800bf6a:	687a      	ldr	r2, [r7, #4]
 800bf6c:	7812      	ldrb	r2, [r2, #0]
 800bf6e:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800bf70:	193b      	adds	r3, r7, r4
 800bf72:	781b      	ldrb	r3, [r3, #0]
 800bf74:	193a      	adds	r2, r7, r4
 800bf76:	1c59      	adds	r1, r3, #1
 800bf78:	7011      	strb	r1, [r2, #0]
 800bf7a:	001a      	movs	r2, r3
 800bf7c:	68bb      	ldr	r3, [r7, #8]
 800bf7e:	189b      	adds	r3, r3, r2
 800bf80:	2203      	movs	r2, #3
 800bf82:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800bf84:	e017      	b.n	800bfb6 <USBD_GetString+0x8c>
    {
      unicode[idx++] = *desc++;
 800bf86:	68fb      	ldr	r3, [r7, #12]
 800bf88:	1c5a      	adds	r2, r3, #1
 800bf8a:	60fa      	str	r2, [r7, #12]
 800bf8c:	2417      	movs	r4, #23
 800bf8e:	193a      	adds	r2, r7, r4
 800bf90:	7812      	ldrb	r2, [r2, #0]
 800bf92:	1939      	adds	r1, r7, r4
 800bf94:	1c50      	adds	r0, r2, #1
 800bf96:	7008      	strb	r0, [r1, #0]
 800bf98:	0011      	movs	r1, r2
 800bf9a:	68ba      	ldr	r2, [r7, #8]
 800bf9c:	1852      	adds	r2, r2, r1
 800bf9e:	781b      	ldrb	r3, [r3, #0]
 800bfa0:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800bfa2:	193b      	adds	r3, r7, r4
 800bfa4:	781b      	ldrb	r3, [r3, #0]
 800bfa6:	193a      	adds	r2, r7, r4
 800bfa8:	1c59      	adds	r1, r3, #1
 800bfaa:	7011      	strb	r1, [r2, #0]
 800bfac:	001a      	movs	r2, r3
 800bfae:	68bb      	ldr	r3, [r7, #8]
 800bfb0:	189b      	adds	r3, r3, r2
 800bfb2:	2200      	movs	r2, #0
 800bfb4:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800bfb6:	68fb      	ldr	r3, [r7, #12]
 800bfb8:	781b      	ldrb	r3, [r3, #0]
 800bfba:	2b00      	cmp	r3, #0
 800bfbc:	d1e3      	bne.n	800bf86 <USBD_GetString+0x5c>
    }
  }
}
 800bfbe:	46c0      	nop			; (mov r8, r8)
 800bfc0:	46bd      	mov	sp, r7
 800bfc2:	b007      	add	sp, #28
 800bfc4:	bd90      	pop	{r4, r7, pc}

0800bfc6 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800bfc6:	b580      	push	{r7, lr}
 800bfc8:	b084      	sub	sp, #16
 800bfca:	af00      	add	r7, sp, #0
 800bfcc:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800bfce:	230f      	movs	r3, #15
 800bfd0:	18fb      	adds	r3, r7, r3
 800bfd2:	2200      	movs	r2, #0
 800bfd4:	701a      	strb	r2, [r3, #0]

  while (*buf != '\0')
 800bfd6:	e008      	b.n	800bfea <USBD_GetLen+0x24>
  {
    len++;
 800bfd8:	210f      	movs	r1, #15
 800bfda:	187b      	adds	r3, r7, r1
 800bfdc:	781a      	ldrb	r2, [r3, #0]
 800bfde:	187b      	adds	r3, r7, r1
 800bfe0:	3201      	adds	r2, #1
 800bfe2:	701a      	strb	r2, [r3, #0]
    buf++;
 800bfe4:	687b      	ldr	r3, [r7, #4]
 800bfe6:	3301      	adds	r3, #1
 800bfe8:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 800bfea:	687b      	ldr	r3, [r7, #4]
 800bfec:	781b      	ldrb	r3, [r3, #0]
 800bfee:	2b00      	cmp	r3, #0
 800bff0:	d1f2      	bne.n	800bfd8 <USBD_GetLen+0x12>
  }

  return len;
 800bff2:	230f      	movs	r3, #15
 800bff4:	18fb      	adds	r3, r7, r3
 800bff6:	781b      	ldrb	r3, [r3, #0]
}
 800bff8:	0018      	movs	r0, r3
 800bffa:	46bd      	mov	sp, r7
 800bffc:	b004      	add	sp, #16
 800bffe:	bd80      	pop	{r7, pc}

0800c000 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 800c000:	b580      	push	{r7, lr}
 800c002:	b084      	sub	sp, #16
 800c004:	af00      	add	r7, sp, #0
 800c006:	60f8      	str	r0, [r7, #12]
 800c008:	60b9      	str	r1, [r7, #8]
 800c00a:	1dbb      	adds	r3, r7, #6
 800c00c:	801a      	strh	r2, [r3, #0]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800c00e:	68fa      	ldr	r2, [r7, #12]
 800c010:	23a5      	movs	r3, #165	; 0xa5
 800c012:	009b      	lsls	r3, r3, #2
 800c014:	2102      	movs	r1, #2
 800c016:	50d1      	str	r1, [r2, r3]
  pdev->ep_in[0].total_length = len;
 800c018:	1dbb      	adds	r3, r7, #6
 800c01a:	881a      	ldrh	r2, [r3, #0]
 800c01c:	68fb      	ldr	r3, [r7, #12]
 800c01e:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800c020:	1dbb      	adds	r3, r7, #6
 800c022:	881a      	ldrh	r2, [r3, #0]
 800c024:	68fb      	ldr	r3, [r7, #12]
 800c026:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800c028:	1dbb      	adds	r3, r7, #6
 800c02a:	881b      	ldrh	r3, [r3, #0]
 800c02c:	68ba      	ldr	r2, [r7, #8]
 800c02e:	68f8      	ldr	r0, [r7, #12]
 800c030:	2100      	movs	r1, #0
 800c032:	f000 fd06 	bl	800ca42 <USBD_LL_Transmit>

  return USBD_OK;
 800c036:	2300      	movs	r3, #0
}
 800c038:	0018      	movs	r0, r3
 800c03a:	46bd      	mov	sp, r7
 800c03c:	b004      	add	sp, #16
 800c03e:	bd80      	pop	{r7, pc}

0800c040 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 800c040:	b580      	push	{r7, lr}
 800c042:	b084      	sub	sp, #16
 800c044:	af00      	add	r7, sp, #0
 800c046:	60f8      	str	r0, [r7, #12]
 800c048:	60b9      	str	r1, [r7, #8]
 800c04a:	1dbb      	adds	r3, r7, #6
 800c04c:	801a      	strh	r2, [r3, #0]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800c04e:	1dbb      	adds	r3, r7, #6
 800c050:	881b      	ldrh	r3, [r3, #0]
 800c052:	68ba      	ldr	r2, [r7, #8]
 800c054:	68f8      	ldr	r0, [r7, #12]
 800c056:	2100      	movs	r1, #0
 800c058:	f000 fcf3 	bl	800ca42 <USBD_LL_Transmit>

  return USBD_OK;
 800c05c:	2300      	movs	r3, #0
}
 800c05e:	0018      	movs	r0, r3
 800c060:	46bd      	mov	sp, r7
 800c062:	b004      	add	sp, #16
 800c064:	bd80      	pop	{r7, pc}

0800c066 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 800c066:	b580      	push	{r7, lr}
 800c068:	b084      	sub	sp, #16
 800c06a:	af00      	add	r7, sp, #0
 800c06c:	60f8      	str	r0, [r7, #12]
 800c06e:	60b9      	str	r1, [r7, #8]
 800c070:	1dbb      	adds	r3, r7, #6
 800c072:	801a      	strh	r2, [r3, #0]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800c074:	68fa      	ldr	r2, [r7, #12]
 800c076:	23a5      	movs	r3, #165	; 0xa5
 800c078:	009b      	lsls	r3, r3, #2
 800c07a:	2103      	movs	r1, #3
 800c07c:	50d1      	str	r1, [r2, r3]
  pdev->ep_out[0].total_length = len;
 800c07e:	1dbb      	adds	r3, r7, #6
 800c080:	8819      	ldrh	r1, [r3, #0]
 800c082:	68fa      	ldr	r2, [r7, #12]
 800c084:	23ae      	movs	r3, #174	; 0xae
 800c086:	005b      	lsls	r3, r3, #1
 800c088:	50d1      	str	r1, [r2, r3]
  pdev->ep_out[0].rem_length   = len;
 800c08a:	1dbb      	adds	r3, r7, #6
 800c08c:	8819      	ldrh	r1, [r3, #0]
 800c08e:	68fa      	ldr	r2, [r7, #12]
 800c090:	23b0      	movs	r3, #176	; 0xb0
 800c092:	005b      	lsls	r3, r3, #1
 800c094:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800c096:	1dbb      	adds	r3, r7, #6
 800c098:	881b      	ldrh	r3, [r3, #0]
 800c09a:	68ba      	ldr	r2, [r7, #8]
 800c09c:	68f8      	ldr	r0, [r7, #12]
 800c09e:	2100      	movs	r1, #0
 800c0a0:	f000 fd06 	bl	800cab0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c0a4:	2300      	movs	r3, #0
}
 800c0a6:	0018      	movs	r0, r3
 800c0a8:	46bd      	mov	sp, r7
 800c0aa:	b004      	add	sp, #16
 800c0ac:	bd80      	pop	{r7, pc}

0800c0ae <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 800c0ae:	b580      	push	{r7, lr}
 800c0b0:	b084      	sub	sp, #16
 800c0b2:	af00      	add	r7, sp, #0
 800c0b4:	60f8      	str	r0, [r7, #12]
 800c0b6:	60b9      	str	r1, [r7, #8]
 800c0b8:	1dbb      	adds	r3, r7, #6
 800c0ba:	801a      	strh	r2, [r3, #0]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800c0bc:	1dbb      	adds	r3, r7, #6
 800c0be:	881b      	ldrh	r3, [r3, #0]
 800c0c0:	68ba      	ldr	r2, [r7, #8]
 800c0c2:	68f8      	ldr	r0, [r7, #12]
 800c0c4:	2100      	movs	r1, #0
 800c0c6:	f000 fcf3 	bl	800cab0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c0ca:	2300      	movs	r3, #0
}
 800c0cc:	0018      	movs	r0, r3
 800c0ce:	46bd      	mov	sp, r7
 800c0d0:	b004      	add	sp, #16
 800c0d2:	bd80      	pop	{r7, pc}

0800c0d4 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800c0d4:	b580      	push	{r7, lr}
 800c0d6:	b082      	sub	sp, #8
 800c0d8:	af00      	add	r7, sp, #0
 800c0da:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800c0dc:	687a      	ldr	r2, [r7, #4]
 800c0de:	23a5      	movs	r3, #165	; 0xa5
 800c0e0:	009b      	lsls	r3, r3, #2
 800c0e2:	2104      	movs	r1, #4
 800c0e4:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800c0e6:	6878      	ldr	r0, [r7, #4]
 800c0e8:	2300      	movs	r3, #0
 800c0ea:	2200      	movs	r2, #0
 800c0ec:	2100      	movs	r1, #0
 800c0ee:	f000 fca8 	bl	800ca42 <USBD_LL_Transmit>

  return USBD_OK;
 800c0f2:	2300      	movs	r3, #0
}
 800c0f4:	0018      	movs	r0, r3
 800c0f6:	46bd      	mov	sp, r7
 800c0f8:	b002      	add	sp, #8
 800c0fa:	bd80      	pop	{r7, pc}

0800c0fc <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800c0fc:	b580      	push	{r7, lr}
 800c0fe:	b082      	sub	sp, #8
 800c100:	af00      	add	r7, sp, #0
 800c102:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800c104:	687a      	ldr	r2, [r7, #4]
 800c106:	23a5      	movs	r3, #165	; 0xa5
 800c108:	009b      	lsls	r3, r3, #2
 800c10a:	2105      	movs	r1, #5
 800c10c:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c10e:	6878      	ldr	r0, [r7, #4]
 800c110:	2300      	movs	r3, #0
 800c112:	2200      	movs	r2, #0
 800c114:	2100      	movs	r1, #0
 800c116:	f000 fccb 	bl	800cab0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c11a:	2300      	movs	r3, #0
}
 800c11c:	0018      	movs	r0, r3
 800c11e:	46bd      	mov	sp, r7
 800c120:	b002      	add	sp, #8
 800c122:	bd80      	pop	{r7, pc}

0800c124 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800c124:	b580      	push	{r7, lr}
 800c126:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800c128:	4914      	ldr	r1, [pc, #80]	; (800c17c <MX_USB_DEVICE_Init+0x58>)
 800c12a:	4b15      	ldr	r3, [pc, #84]	; (800c180 <MX_USB_DEVICE_Init+0x5c>)
 800c12c:	2200      	movs	r2, #0
 800c12e:	0018      	movs	r0, r3
 800c130:	f7fe fdea 	bl	800ad08 <USBD_Init>
 800c134:	1e03      	subs	r3, r0, #0
 800c136:	d001      	beq.n	800c13c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800c138:	f7f5 fcfc 	bl	8001b34 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800c13c:	4a11      	ldr	r2, [pc, #68]	; (800c184 <MX_USB_DEVICE_Init+0x60>)
 800c13e:	4b10      	ldr	r3, [pc, #64]	; (800c180 <MX_USB_DEVICE_Init+0x5c>)
 800c140:	0011      	movs	r1, r2
 800c142:	0018      	movs	r0, r3
 800c144:	f7fe fe11 	bl	800ad6a <USBD_RegisterClass>
 800c148:	1e03      	subs	r3, r0, #0
 800c14a:	d001      	beq.n	800c150 <MX_USB_DEVICE_Init+0x2c>
  {
    Error_Handler();
 800c14c:	f7f5 fcf2 	bl	8001b34 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800c150:	4a0d      	ldr	r2, [pc, #52]	; (800c188 <MX_USB_DEVICE_Init+0x64>)
 800c152:	4b0b      	ldr	r3, [pc, #44]	; (800c180 <MX_USB_DEVICE_Init+0x5c>)
 800c154:	0011      	movs	r1, r2
 800c156:	0018      	movs	r0, r3
 800c158:	f7fe fd26 	bl	800aba8 <USBD_CDC_RegisterInterface>
 800c15c:	1e03      	subs	r3, r0, #0
 800c15e:	d001      	beq.n	800c164 <MX_USB_DEVICE_Init+0x40>
  {
    Error_Handler();
 800c160:	f7f5 fce8 	bl	8001b34 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800c164:	4b06      	ldr	r3, [pc, #24]	; (800c180 <MX_USB_DEVICE_Init+0x5c>)
 800c166:	0018      	movs	r0, r3
 800c168:	f7fe fe1f 	bl	800adaa <USBD_Start>
 800c16c:	1e03      	subs	r3, r0, #0
 800c16e:	d001      	beq.n	800c174 <MX_USB_DEVICE_Init+0x50>
  {
    Error_Handler();
 800c170:	f7f5 fce0 	bl	8001b34 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800c174:	46c0      	nop			; (mov r8, r8)
 800c176:	46bd      	mov	sp, r7
 800c178:	bd80      	pop	{r7, pc}
 800c17a:	46c0      	nop			; (mov r8, r8)
 800c17c:	2000012c 	.word	0x2000012c
 800c180:	200006a0 	.word	0x200006a0
 800c184:	20000018 	.word	0x20000018
 800c188:	2000011c 	.word	0x2000011c

0800c18c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800c18c:	b580      	push	{r7, lr}
 800c18e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800c190:	4907      	ldr	r1, [pc, #28]	; (800c1b0 <CDC_Init_FS+0x24>)
 800c192:	4b08      	ldr	r3, [pc, #32]	; (800c1b4 <CDC_Init_FS+0x28>)
 800c194:	2200      	movs	r2, #0
 800c196:	0018      	movs	r0, r3
 800c198:	f7fe fd21 	bl	800abde <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800c19c:	4a06      	ldr	r2, [pc, #24]	; (800c1b8 <CDC_Init_FS+0x2c>)
 800c19e:	4b05      	ldr	r3, [pc, #20]	; (800c1b4 <CDC_Init_FS+0x28>)
 800c1a0:	0011      	movs	r1, r2
 800c1a2:	0018      	movs	r0, r3
 800c1a4:	f7fe fd37 	bl	800ac16 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800c1a8:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800c1aa:	0018      	movs	r0, r3
 800c1ac:	46bd      	mov	sp, r7
 800c1ae:	bd80      	pop	{r7, pc}
 800c1b0:	20000d4c 	.word	0x20000d4c
 800c1b4:	200006a0 	.word	0x200006a0
 800c1b8:	20000964 	.word	0x20000964

0800c1bc <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800c1bc:	b580      	push	{r7, lr}
 800c1be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800c1c0:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800c1c2:	0018      	movs	r0, r3
 800c1c4:	46bd      	mov	sp, r7
 800c1c6:	bd80      	pop	{r7, pc}

0800c1c8 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800c1c8:	b580      	push	{r7, lr}
 800c1ca:	b082      	sub	sp, #8
 800c1cc:	af00      	add	r7, sp, #0
 800c1ce:	6039      	str	r1, [r7, #0]
 800c1d0:	0011      	movs	r1, r2
 800c1d2:	1dfb      	adds	r3, r7, #7
 800c1d4:	1c02      	adds	r2, r0, #0
 800c1d6:	701a      	strb	r2, [r3, #0]
 800c1d8:	1d3b      	adds	r3, r7, #4
 800c1da:	1c0a      	adds	r2, r1, #0
 800c1dc:	801a      	strh	r2, [r3, #0]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800c1de:	1dfb      	adds	r3, r7, #7
 800c1e0:	781b      	ldrb	r3, [r3, #0]
 800c1e2:	2b23      	cmp	r3, #35	; 0x23
 800c1e4:	d804      	bhi.n	800c1f0 <CDC_Control_FS+0x28>
 800c1e6:	009a      	lsls	r2, r3, #2
 800c1e8:	4b04      	ldr	r3, [pc, #16]	; (800c1fc <CDC_Control_FS+0x34>)
 800c1ea:	18d3      	adds	r3, r2, r3
 800c1ec:	681b      	ldr	r3, [r3, #0]
 800c1ee:	469f      	mov	pc, r3
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800c1f0:	46c0      	nop			; (mov r8, r8)
  }

  return (USBD_OK);
 800c1f2:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800c1f4:	0018      	movs	r0, r3
 800c1f6:	46bd      	mov	sp, r7
 800c1f8:	b002      	add	sp, #8
 800c1fa:	bd80      	pop	{r7, pc}
 800c1fc:	0800d68c 	.word	0x0800d68c

0800c200 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800c200:	b590      	push	{r4, r7, lr}
 800c202:	b085      	sub	sp, #20
 800c204:	af00      	add	r7, sp, #0
 800c206:	6078      	str	r0, [r7, #4]
 800c208:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */

  flags.data_received = 1;
 800c20a:	4b18      	ldr	r3, [pc, #96]	; (800c26c <CDC_Receive_FS+0x6c>)
 800c20c:	7a1a      	ldrb	r2, [r3, #8]
 800c20e:	2101      	movs	r1, #1
 800c210:	430a      	orrs	r2, r1
 800c212:	721a      	strb	r2, [r3, #8]

  for(uint8_t i = 0; i < *Len; i++)
 800c214:	230f      	movs	r3, #15
 800c216:	18fb      	adds	r3, r7, r3
 800c218:	2200      	movs	r2, #0
 800c21a:	701a      	strb	r2, [r3, #0]
 800c21c:	e00f      	b.n	800c23e <CDC_Receive_FS+0x3e>
  {
	  push(USB_Rx_Buffer, Buf[i]);
 800c21e:	4b14      	ldr	r3, [pc, #80]	; (800c270 <CDC_Receive_FS+0x70>)
 800c220:	6818      	ldr	r0, [r3, #0]
 800c222:	240f      	movs	r4, #15
 800c224:	193b      	adds	r3, r7, r4
 800c226:	781b      	ldrb	r3, [r3, #0]
 800c228:	687a      	ldr	r2, [r7, #4]
 800c22a:	18d3      	adds	r3, r2, r3
 800c22c:	781b      	ldrb	r3, [r3, #0]
 800c22e:	0019      	movs	r1, r3
 800c230:	f7f5 fcba 	bl	8001ba8 <push>
  for(uint8_t i = 0; i < *Len; i++)
 800c234:	193b      	adds	r3, r7, r4
 800c236:	781a      	ldrb	r2, [r3, #0]
 800c238:	193b      	adds	r3, r7, r4
 800c23a:	3201      	adds	r2, #1
 800c23c:	701a      	strb	r2, [r3, #0]
 800c23e:	230f      	movs	r3, #15
 800c240:	18fb      	adds	r3, r7, r3
 800c242:	781a      	ldrb	r2, [r3, #0]
 800c244:	683b      	ldr	r3, [r7, #0]
 800c246:	681b      	ldr	r3, [r3, #0]
 800c248:	429a      	cmp	r2, r3
 800c24a:	d3e8      	bcc.n	800c21e <CDC_Receive_FS+0x1e>
  }

  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800c24c:	687a      	ldr	r2, [r7, #4]
 800c24e:	4b09      	ldr	r3, [pc, #36]	; (800c274 <CDC_Receive_FS+0x74>)
 800c250:	0011      	movs	r1, r2
 800c252:	0018      	movs	r0, r3
 800c254:	f7fe fcdf 	bl	800ac16 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800c258:	4b06      	ldr	r3, [pc, #24]	; (800c274 <CDC_Receive_FS+0x74>)
 800c25a:	0018      	movs	r0, r3
 800c25c:	f7fe fd26 	bl	800acac <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800c260:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800c262:	0018      	movs	r0, r3
 800c264:	46bd      	mov	sp, r7
 800c266:	b005      	add	sp, #20
 800c268:	bd90      	pop	{r4, r7, pc}
 800c26a:	46c0      	nop			; (mov r8, r8)
 800c26c:	20000630 	.word	0x20000630
 800c270:	20001134 	.word	0x20001134
 800c274:	200006a0 	.word	0x200006a0

0800c278 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800c278:	b5b0      	push	{r4, r5, r7, lr}
 800c27a:	b084      	sub	sp, #16
 800c27c:	af00      	add	r7, sp, #0
 800c27e:	6078      	str	r0, [r7, #4]
 800c280:	000a      	movs	r2, r1
 800c282:	1cbb      	adds	r3, r7, #2
 800c284:	801a      	strh	r2, [r3, #0]
  uint8_t result = USBD_OK;
 800c286:	230f      	movs	r3, #15
 800c288:	18fb      	adds	r3, r7, r3
 800c28a:	2200      	movs	r2, #0
 800c28c:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800c28e:	4a11      	ldr	r2, [pc, #68]	; (800c2d4 <CDC_Transmit_FS+0x5c>)
 800c290:	23ae      	movs	r3, #174	; 0xae
 800c292:	009b      	lsls	r3, r3, #2
 800c294:	58d3      	ldr	r3, [r2, r3]
 800c296:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800c298:	68ba      	ldr	r2, [r7, #8]
 800c29a:	2385      	movs	r3, #133	; 0x85
 800c29c:	009b      	lsls	r3, r3, #2
 800c29e:	58d3      	ldr	r3, [r2, r3]
 800c2a0:	2b00      	cmp	r3, #0
 800c2a2:	d001      	beq.n	800c2a8 <CDC_Transmit_FS+0x30>
    return USBD_BUSY;
 800c2a4:	2301      	movs	r3, #1
 800c2a6:	e010      	b.n	800c2ca <CDC_Transmit_FS+0x52>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800c2a8:	1cbb      	adds	r3, r7, #2
 800c2aa:	881a      	ldrh	r2, [r3, #0]
 800c2ac:	6879      	ldr	r1, [r7, #4]
 800c2ae:	4b09      	ldr	r3, [pc, #36]	; (800c2d4 <CDC_Transmit_FS+0x5c>)
 800c2b0:	0018      	movs	r0, r3
 800c2b2:	f7fe fc94 	bl	800abde <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800c2b6:	250f      	movs	r5, #15
 800c2b8:	197c      	adds	r4, r7, r5
 800c2ba:	4b06      	ldr	r3, [pc, #24]	; (800c2d4 <CDC_Transmit_FS+0x5c>)
 800c2bc:	0018      	movs	r0, r3
 800c2be:	f7fe fcbe 	bl	800ac3e <USBD_CDC_TransmitPacket>
 800c2c2:	0003      	movs	r3, r0
 800c2c4:	7023      	strb	r3, [r4, #0]
  /* USER CODE END 7 */
  return result;
 800c2c6:	197b      	adds	r3, r7, r5
 800c2c8:	781b      	ldrb	r3, [r3, #0]
}
 800c2ca:	0018      	movs	r0, r3
 800c2cc:	46bd      	mov	sp, r7
 800c2ce:	b004      	add	sp, #16
 800c2d0:	bdb0      	pop	{r4, r5, r7, pc}
 800c2d2:	46c0      	nop			; (mov r8, r8)
 800c2d4:	200006a0 	.word	0x200006a0

0800c2d8 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c2d8:	b580      	push	{r7, lr}
 800c2da:	b082      	sub	sp, #8
 800c2dc:	af00      	add	r7, sp, #0
 800c2de:	0002      	movs	r2, r0
 800c2e0:	6039      	str	r1, [r7, #0]
 800c2e2:	1dfb      	adds	r3, r7, #7
 800c2e4:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800c2e6:	683b      	ldr	r3, [r7, #0]
 800c2e8:	2212      	movs	r2, #18
 800c2ea:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800c2ec:	4b02      	ldr	r3, [pc, #8]	; (800c2f8 <USBD_FS_DeviceDescriptor+0x20>)
}
 800c2ee:	0018      	movs	r0, r3
 800c2f0:	46bd      	mov	sp, r7
 800c2f2:	b002      	add	sp, #8
 800c2f4:	bd80      	pop	{r7, pc}
 800c2f6:	46c0      	nop			; (mov r8, r8)
 800c2f8:	20000148 	.word	0x20000148

0800c2fc <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c2fc:	b580      	push	{r7, lr}
 800c2fe:	b082      	sub	sp, #8
 800c300:	af00      	add	r7, sp, #0
 800c302:	0002      	movs	r2, r0
 800c304:	6039      	str	r1, [r7, #0]
 800c306:	1dfb      	adds	r3, r7, #7
 800c308:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800c30a:	683b      	ldr	r3, [r7, #0]
 800c30c:	2204      	movs	r2, #4
 800c30e:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800c310:	4b02      	ldr	r3, [pc, #8]	; (800c31c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800c312:	0018      	movs	r0, r3
 800c314:	46bd      	mov	sp, r7
 800c316:	b002      	add	sp, #8
 800c318:	bd80      	pop	{r7, pc}
 800c31a:	46c0      	nop			; (mov r8, r8)
 800c31c:	2000015c 	.word	0x2000015c

0800c320 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c320:	b580      	push	{r7, lr}
 800c322:	b082      	sub	sp, #8
 800c324:	af00      	add	r7, sp, #0
 800c326:	0002      	movs	r2, r0
 800c328:	6039      	str	r1, [r7, #0]
 800c32a:	1dfb      	adds	r3, r7, #7
 800c32c:	701a      	strb	r2, [r3, #0]
  if(speed == 0)
 800c32e:	1dfb      	adds	r3, r7, #7
 800c330:	781b      	ldrb	r3, [r3, #0]
 800c332:	2b00      	cmp	r3, #0
 800c334:	d106      	bne.n	800c344 <USBD_FS_ProductStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800c336:	683a      	ldr	r2, [r7, #0]
 800c338:	4908      	ldr	r1, [pc, #32]	; (800c35c <USBD_FS_ProductStrDescriptor+0x3c>)
 800c33a:	4b09      	ldr	r3, [pc, #36]	; (800c360 <USBD_FS_ProductStrDescriptor+0x40>)
 800c33c:	0018      	movs	r0, r3
 800c33e:	f7ff fdf4 	bl	800bf2a <USBD_GetString>
 800c342:	e005      	b.n	800c350 <USBD_FS_ProductStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800c344:	683a      	ldr	r2, [r7, #0]
 800c346:	4905      	ldr	r1, [pc, #20]	; (800c35c <USBD_FS_ProductStrDescriptor+0x3c>)
 800c348:	4b05      	ldr	r3, [pc, #20]	; (800c360 <USBD_FS_ProductStrDescriptor+0x40>)
 800c34a:	0018      	movs	r0, r3
 800c34c:	f7ff fded 	bl	800bf2a <USBD_GetString>
  }
  return USBD_StrDesc;
 800c350:	4b02      	ldr	r3, [pc, #8]	; (800c35c <USBD_FS_ProductStrDescriptor+0x3c>)
}
 800c352:	0018      	movs	r0, r3
 800c354:	46bd      	mov	sp, r7
 800c356:	b002      	add	sp, #8
 800c358:	bd80      	pop	{r7, pc}
 800c35a:	46c0      	nop			; (mov r8, r8)
 800c35c:	20001138 	.word	0x20001138
 800c360:	0800d53c 	.word	0x0800d53c

0800c364 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c364:	b580      	push	{r7, lr}
 800c366:	b082      	sub	sp, #8
 800c368:	af00      	add	r7, sp, #0
 800c36a:	0002      	movs	r2, r0
 800c36c:	6039      	str	r1, [r7, #0]
 800c36e:	1dfb      	adds	r3, r7, #7
 800c370:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800c372:	683a      	ldr	r2, [r7, #0]
 800c374:	4904      	ldr	r1, [pc, #16]	; (800c388 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800c376:	4b05      	ldr	r3, [pc, #20]	; (800c38c <USBD_FS_ManufacturerStrDescriptor+0x28>)
 800c378:	0018      	movs	r0, r3
 800c37a:	f7ff fdd6 	bl	800bf2a <USBD_GetString>
  return USBD_StrDesc;
 800c37e:	4b02      	ldr	r3, [pc, #8]	; (800c388 <USBD_FS_ManufacturerStrDescriptor+0x24>)
}
 800c380:	0018      	movs	r0, r3
 800c382:	46bd      	mov	sp, r7
 800c384:	b002      	add	sp, #8
 800c386:	bd80      	pop	{r7, pc}
 800c388:	20001138 	.word	0x20001138
 800c38c:	0800d554 	.word	0x0800d554

0800c390 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c390:	b580      	push	{r7, lr}
 800c392:	b082      	sub	sp, #8
 800c394:	af00      	add	r7, sp, #0
 800c396:	0002      	movs	r2, r0
 800c398:	6039      	str	r1, [r7, #0]
 800c39a:	1dfb      	adds	r3, r7, #7
 800c39c:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800c39e:	683b      	ldr	r3, [r7, #0]
 800c3a0:	221a      	movs	r2, #26
 800c3a2:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800c3a4:	f000 f84c 	bl	800c440 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800c3a8:	4b02      	ldr	r3, [pc, #8]	; (800c3b4 <USBD_FS_SerialStrDescriptor+0x24>)
}
 800c3aa:	0018      	movs	r0, r3
 800c3ac:	46bd      	mov	sp, r7
 800c3ae:	b002      	add	sp, #8
 800c3b0:	bd80      	pop	{r7, pc}
 800c3b2:	46c0      	nop			; (mov r8, r8)
 800c3b4:	20000160 	.word	0x20000160

0800c3b8 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c3b8:	b580      	push	{r7, lr}
 800c3ba:	b082      	sub	sp, #8
 800c3bc:	af00      	add	r7, sp, #0
 800c3be:	0002      	movs	r2, r0
 800c3c0:	6039      	str	r1, [r7, #0]
 800c3c2:	1dfb      	adds	r3, r7, #7
 800c3c4:	701a      	strb	r2, [r3, #0]
  if(speed == USBD_SPEED_HIGH)
 800c3c6:	1dfb      	adds	r3, r7, #7
 800c3c8:	781b      	ldrb	r3, [r3, #0]
 800c3ca:	2b00      	cmp	r3, #0
 800c3cc:	d106      	bne.n	800c3dc <USBD_FS_ConfigStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800c3ce:	683a      	ldr	r2, [r7, #0]
 800c3d0:	4908      	ldr	r1, [pc, #32]	; (800c3f4 <USBD_FS_ConfigStrDescriptor+0x3c>)
 800c3d2:	4b09      	ldr	r3, [pc, #36]	; (800c3f8 <USBD_FS_ConfigStrDescriptor+0x40>)
 800c3d4:	0018      	movs	r0, r3
 800c3d6:	f7ff fda8 	bl	800bf2a <USBD_GetString>
 800c3da:	e005      	b.n	800c3e8 <USBD_FS_ConfigStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800c3dc:	683a      	ldr	r2, [r7, #0]
 800c3de:	4905      	ldr	r1, [pc, #20]	; (800c3f4 <USBD_FS_ConfigStrDescriptor+0x3c>)
 800c3e0:	4b05      	ldr	r3, [pc, #20]	; (800c3f8 <USBD_FS_ConfigStrDescriptor+0x40>)
 800c3e2:	0018      	movs	r0, r3
 800c3e4:	f7ff fda1 	bl	800bf2a <USBD_GetString>
  }
  return USBD_StrDesc;
 800c3e8:	4b02      	ldr	r3, [pc, #8]	; (800c3f4 <USBD_FS_ConfigStrDescriptor+0x3c>)
}
 800c3ea:	0018      	movs	r0, r3
 800c3ec:	46bd      	mov	sp, r7
 800c3ee:	b002      	add	sp, #8
 800c3f0:	bd80      	pop	{r7, pc}
 800c3f2:	46c0      	nop			; (mov r8, r8)
 800c3f4:	20001138 	.word	0x20001138
 800c3f8:	0800d568 	.word	0x0800d568

0800c3fc <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c3fc:	b580      	push	{r7, lr}
 800c3fe:	b082      	sub	sp, #8
 800c400:	af00      	add	r7, sp, #0
 800c402:	0002      	movs	r2, r0
 800c404:	6039      	str	r1, [r7, #0]
 800c406:	1dfb      	adds	r3, r7, #7
 800c408:	701a      	strb	r2, [r3, #0]
  if(speed == 0)
 800c40a:	1dfb      	adds	r3, r7, #7
 800c40c:	781b      	ldrb	r3, [r3, #0]
 800c40e:	2b00      	cmp	r3, #0
 800c410:	d106      	bne.n	800c420 <USBD_FS_InterfaceStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800c412:	683a      	ldr	r2, [r7, #0]
 800c414:	4908      	ldr	r1, [pc, #32]	; (800c438 <USBD_FS_InterfaceStrDescriptor+0x3c>)
 800c416:	4b09      	ldr	r3, [pc, #36]	; (800c43c <USBD_FS_InterfaceStrDescriptor+0x40>)
 800c418:	0018      	movs	r0, r3
 800c41a:	f7ff fd86 	bl	800bf2a <USBD_GetString>
 800c41e:	e005      	b.n	800c42c <USBD_FS_InterfaceStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800c420:	683a      	ldr	r2, [r7, #0]
 800c422:	4905      	ldr	r1, [pc, #20]	; (800c438 <USBD_FS_InterfaceStrDescriptor+0x3c>)
 800c424:	4b05      	ldr	r3, [pc, #20]	; (800c43c <USBD_FS_InterfaceStrDescriptor+0x40>)
 800c426:	0018      	movs	r0, r3
 800c428:	f7ff fd7f 	bl	800bf2a <USBD_GetString>
  }
  return USBD_StrDesc;
 800c42c:	4b02      	ldr	r3, [pc, #8]	; (800c438 <USBD_FS_InterfaceStrDescriptor+0x3c>)
}
 800c42e:	0018      	movs	r0, r3
 800c430:	46bd      	mov	sp, r7
 800c432:	b002      	add	sp, #8
 800c434:	bd80      	pop	{r7, pc}
 800c436:	46c0      	nop			; (mov r8, r8)
 800c438:	20001138 	.word	0x20001138
 800c43c:	0800d574 	.word	0x0800d574

0800c440 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800c440:	b580      	push	{r7, lr}
 800c442:	b084      	sub	sp, #16
 800c444:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800c446:	4b10      	ldr	r3, [pc, #64]	; (800c488 <Get_SerialNum+0x48>)
 800c448:	681b      	ldr	r3, [r3, #0]
 800c44a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800c44c:	4b0f      	ldr	r3, [pc, #60]	; (800c48c <Get_SerialNum+0x4c>)
 800c44e:	681b      	ldr	r3, [r3, #0]
 800c450:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800c452:	4b0f      	ldr	r3, [pc, #60]	; (800c490 <Get_SerialNum+0x50>)
 800c454:	681b      	ldr	r3, [r3, #0]
 800c456:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800c458:	68fa      	ldr	r2, [r7, #12]
 800c45a:	687b      	ldr	r3, [r7, #4]
 800c45c:	18d3      	adds	r3, r2, r3
 800c45e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800c460:	68fb      	ldr	r3, [r7, #12]
 800c462:	2b00      	cmp	r3, #0
 800c464:	d00b      	beq.n	800c47e <Get_SerialNum+0x3e>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800c466:	490b      	ldr	r1, [pc, #44]	; (800c494 <Get_SerialNum+0x54>)
 800c468:	68fb      	ldr	r3, [r7, #12]
 800c46a:	2208      	movs	r2, #8
 800c46c:	0018      	movs	r0, r3
 800c46e:	f000 f815 	bl	800c49c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800c472:	4909      	ldr	r1, [pc, #36]	; (800c498 <Get_SerialNum+0x58>)
 800c474:	68bb      	ldr	r3, [r7, #8]
 800c476:	2204      	movs	r2, #4
 800c478:	0018      	movs	r0, r3
 800c47a:	f000 f80f 	bl	800c49c <IntToUnicode>
  }
}
 800c47e:	46c0      	nop			; (mov r8, r8)
 800c480:	46bd      	mov	sp, r7
 800c482:	b004      	add	sp, #16
 800c484:	bd80      	pop	{r7, pc}
 800c486:	46c0      	nop			; (mov r8, r8)
 800c488:	1ffff7ac 	.word	0x1ffff7ac
 800c48c:	1ffff7b0 	.word	0x1ffff7b0
 800c490:	1ffff7b4 	.word	0x1ffff7b4
 800c494:	20000162 	.word	0x20000162
 800c498:	20000172 	.word	0x20000172

0800c49c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800c49c:	b580      	push	{r7, lr}
 800c49e:	b086      	sub	sp, #24
 800c4a0:	af00      	add	r7, sp, #0
 800c4a2:	60f8      	str	r0, [r7, #12]
 800c4a4:	60b9      	str	r1, [r7, #8]
 800c4a6:	1dfb      	adds	r3, r7, #7
 800c4a8:	701a      	strb	r2, [r3, #0]
  uint8_t idx = 0;
 800c4aa:	2117      	movs	r1, #23
 800c4ac:	187b      	adds	r3, r7, r1
 800c4ae:	2200      	movs	r2, #0
 800c4b0:	701a      	strb	r2, [r3, #0]

  for (idx = 0; idx < len; idx++)
 800c4b2:	187b      	adds	r3, r7, r1
 800c4b4:	2200      	movs	r2, #0
 800c4b6:	701a      	strb	r2, [r3, #0]
 800c4b8:	e02f      	b.n	800c51a <IntToUnicode+0x7e>
  {
    if (((value >> 28)) < 0xA)
 800c4ba:	68fb      	ldr	r3, [r7, #12]
 800c4bc:	0f1b      	lsrs	r3, r3, #28
 800c4be:	2b09      	cmp	r3, #9
 800c4c0:	d80d      	bhi.n	800c4de <IntToUnicode+0x42>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800c4c2:	68fb      	ldr	r3, [r7, #12]
 800c4c4:	0f1b      	lsrs	r3, r3, #28
 800c4c6:	b2da      	uxtb	r2, r3
 800c4c8:	2317      	movs	r3, #23
 800c4ca:	18fb      	adds	r3, r7, r3
 800c4cc:	781b      	ldrb	r3, [r3, #0]
 800c4ce:	005b      	lsls	r3, r3, #1
 800c4d0:	0019      	movs	r1, r3
 800c4d2:	68bb      	ldr	r3, [r7, #8]
 800c4d4:	185b      	adds	r3, r3, r1
 800c4d6:	3230      	adds	r2, #48	; 0x30
 800c4d8:	b2d2      	uxtb	r2, r2
 800c4da:	701a      	strb	r2, [r3, #0]
 800c4dc:	e00c      	b.n	800c4f8 <IntToUnicode+0x5c>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800c4de:	68fb      	ldr	r3, [r7, #12]
 800c4e0:	0f1b      	lsrs	r3, r3, #28
 800c4e2:	b2da      	uxtb	r2, r3
 800c4e4:	2317      	movs	r3, #23
 800c4e6:	18fb      	adds	r3, r7, r3
 800c4e8:	781b      	ldrb	r3, [r3, #0]
 800c4ea:	005b      	lsls	r3, r3, #1
 800c4ec:	0019      	movs	r1, r3
 800c4ee:	68bb      	ldr	r3, [r7, #8]
 800c4f0:	185b      	adds	r3, r3, r1
 800c4f2:	3237      	adds	r2, #55	; 0x37
 800c4f4:	b2d2      	uxtb	r2, r2
 800c4f6:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800c4f8:	68fb      	ldr	r3, [r7, #12]
 800c4fa:	011b      	lsls	r3, r3, #4
 800c4fc:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800c4fe:	2117      	movs	r1, #23
 800c500:	187b      	adds	r3, r7, r1
 800c502:	781b      	ldrb	r3, [r3, #0]
 800c504:	005b      	lsls	r3, r3, #1
 800c506:	3301      	adds	r3, #1
 800c508:	68ba      	ldr	r2, [r7, #8]
 800c50a:	18d3      	adds	r3, r2, r3
 800c50c:	2200      	movs	r2, #0
 800c50e:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800c510:	187b      	adds	r3, r7, r1
 800c512:	781a      	ldrb	r2, [r3, #0]
 800c514:	187b      	adds	r3, r7, r1
 800c516:	3201      	adds	r2, #1
 800c518:	701a      	strb	r2, [r3, #0]
 800c51a:	2317      	movs	r3, #23
 800c51c:	18fa      	adds	r2, r7, r3
 800c51e:	1dfb      	adds	r3, r7, #7
 800c520:	7812      	ldrb	r2, [r2, #0]
 800c522:	781b      	ldrb	r3, [r3, #0]
 800c524:	429a      	cmp	r2, r3
 800c526:	d3c8      	bcc.n	800c4ba <IntToUnicode+0x1e>
  }
}
 800c528:	46c0      	nop			; (mov r8, r8)
 800c52a:	46c0      	nop			; (mov r8, r8)
 800c52c:	46bd      	mov	sp, r7
 800c52e:	b006      	add	sp, #24
 800c530:	bd80      	pop	{r7, pc}
	...

0800c534 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800c534:	b580      	push	{r7, lr}
 800c536:	b084      	sub	sp, #16
 800c538:	af00      	add	r7, sp, #0
 800c53a:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 800c53c:	687b      	ldr	r3, [r7, #4]
 800c53e:	681b      	ldr	r3, [r3, #0]
 800c540:	4a0e      	ldr	r2, [pc, #56]	; (800c57c <HAL_PCD_MspInit+0x48>)
 800c542:	4293      	cmp	r3, r2
 800c544:	d115      	bne.n	800c572 <HAL_PCD_MspInit+0x3e>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800c546:	4b0e      	ldr	r3, [pc, #56]	; (800c580 <HAL_PCD_MspInit+0x4c>)
 800c548:	69da      	ldr	r2, [r3, #28]
 800c54a:	4b0d      	ldr	r3, [pc, #52]	; (800c580 <HAL_PCD_MspInit+0x4c>)
 800c54c:	2180      	movs	r1, #128	; 0x80
 800c54e:	0409      	lsls	r1, r1, #16
 800c550:	430a      	orrs	r2, r1
 800c552:	61da      	str	r2, [r3, #28]
 800c554:	4b0a      	ldr	r3, [pc, #40]	; (800c580 <HAL_PCD_MspInit+0x4c>)
 800c556:	69da      	ldr	r2, [r3, #28]
 800c558:	2380      	movs	r3, #128	; 0x80
 800c55a:	041b      	lsls	r3, r3, #16
 800c55c:	4013      	ands	r3, r2
 800c55e:	60fb      	str	r3, [r7, #12]
 800c560:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_IRQn, 0, 0);
 800c562:	2200      	movs	r2, #0
 800c564:	2100      	movs	r1, #0
 800c566:	201f      	movs	r0, #31
 800c568:	f7f6 ffc2 	bl	80034f0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_IRQn);
 800c56c:	201f      	movs	r0, #31
 800c56e:	f7f6 ffd4 	bl	800351a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800c572:	46c0      	nop			; (mov r8, r8)
 800c574:	46bd      	mov	sp, r7
 800c576:	b004      	add	sp, #16
 800c578:	bd80      	pop	{r7, pc}
 800c57a:	46c0      	nop			; (mov r8, r8)
 800c57c:	40005c00 	.word	0x40005c00
 800c580:	40021000 	.word	0x40021000

0800c584 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c584:	b580      	push	{r7, lr}
 800c586:	b082      	sub	sp, #8
 800c588:	af00      	add	r7, sp, #0
 800c58a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800c58c:	687a      	ldr	r2, [r7, #4]
 800c58e:	23bc      	movs	r3, #188	; 0xbc
 800c590:	009b      	lsls	r3, r3, #2
 800c592:	58d2      	ldr	r2, [r2, r3]
 800c594:	687b      	ldr	r3, [r7, #4]
 800c596:	21ac      	movs	r1, #172	; 0xac
 800c598:	0089      	lsls	r1, r1, #2
 800c59a:	468c      	mov	ip, r1
 800c59c:	4463      	add	r3, ip
 800c59e:	0019      	movs	r1, r3
 800c5a0:	0010      	movs	r0, r2
 800c5a2:	f7fe fc55 	bl	800ae50 <USBD_LL_SetupStage>
}
 800c5a6:	46c0      	nop			; (mov r8, r8)
 800c5a8:	46bd      	mov	sp, r7
 800c5aa:	b002      	add	sp, #8
 800c5ac:	bd80      	pop	{r7, pc}

0800c5ae <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c5ae:	b590      	push	{r4, r7, lr}
 800c5b0:	b083      	sub	sp, #12
 800c5b2:	af00      	add	r7, sp, #0
 800c5b4:	6078      	str	r0, [r7, #4]
 800c5b6:	000a      	movs	r2, r1
 800c5b8:	1cfb      	adds	r3, r7, #3
 800c5ba:	701a      	strb	r2, [r3, #0]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800c5bc:	687a      	ldr	r2, [r7, #4]
 800c5be:	23bc      	movs	r3, #188	; 0xbc
 800c5c0:	009b      	lsls	r3, r3, #2
 800c5c2:	58d4      	ldr	r4, [r2, r3]
 800c5c4:	1cfb      	adds	r3, r7, #3
 800c5c6:	781a      	ldrb	r2, [r3, #0]
 800c5c8:	6878      	ldr	r0, [r7, #4]
 800c5ca:	23be      	movs	r3, #190	; 0xbe
 800c5cc:	0059      	lsls	r1, r3, #1
 800c5ce:	0013      	movs	r3, r2
 800c5d0:	009b      	lsls	r3, r3, #2
 800c5d2:	189b      	adds	r3, r3, r2
 800c5d4:	00db      	lsls	r3, r3, #3
 800c5d6:	18c3      	adds	r3, r0, r3
 800c5d8:	185b      	adds	r3, r3, r1
 800c5da:	681a      	ldr	r2, [r3, #0]
 800c5dc:	1cfb      	adds	r3, r7, #3
 800c5de:	781b      	ldrb	r3, [r3, #0]
 800c5e0:	0019      	movs	r1, r3
 800c5e2:	0020      	movs	r0, r4
 800c5e4:	f7fe fc92 	bl	800af0c <USBD_LL_DataOutStage>
}
 800c5e8:	46c0      	nop			; (mov r8, r8)
 800c5ea:	46bd      	mov	sp, r7
 800c5ec:	b003      	add	sp, #12
 800c5ee:	bd90      	pop	{r4, r7, pc}

0800c5f0 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c5f0:	b580      	push	{r7, lr}
 800c5f2:	b082      	sub	sp, #8
 800c5f4:	af00      	add	r7, sp, #0
 800c5f6:	6078      	str	r0, [r7, #4]
 800c5f8:	000a      	movs	r2, r1
 800c5fa:	1cfb      	adds	r3, r7, #3
 800c5fc:	701a      	strb	r2, [r3, #0]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800c5fe:	687a      	ldr	r2, [r7, #4]
 800c600:	23bc      	movs	r3, #188	; 0xbc
 800c602:	009b      	lsls	r3, r3, #2
 800c604:	58d0      	ldr	r0, [r2, r3]
 800c606:	1cfb      	adds	r3, r7, #3
 800c608:	781a      	ldrb	r2, [r3, #0]
 800c60a:	6879      	ldr	r1, [r7, #4]
 800c60c:	0013      	movs	r3, r2
 800c60e:	009b      	lsls	r3, r3, #2
 800c610:	189b      	adds	r3, r3, r2
 800c612:	00db      	lsls	r3, r3, #3
 800c614:	18cb      	adds	r3, r1, r3
 800c616:	333c      	adds	r3, #60	; 0x3c
 800c618:	681a      	ldr	r2, [r3, #0]
 800c61a:	1cfb      	adds	r3, r7, #3
 800c61c:	781b      	ldrb	r3, [r3, #0]
 800c61e:	0019      	movs	r1, r3
 800c620:	f7fe fcf6 	bl	800b010 <USBD_LL_DataInStage>
}
 800c624:	46c0      	nop			; (mov r8, r8)
 800c626:	46bd      	mov	sp, r7
 800c628:	b002      	add	sp, #8
 800c62a:	bd80      	pop	{r7, pc}

0800c62c <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c62c:	b580      	push	{r7, lr}
 800c62e:	b082      	sub	sp, #8
 800c630:	af00      	add	r7, sp, #0
 800c632:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800c634:	687a      	ldr	r2, [r7, #4]
 800c636:	23bc      	movs	r3, #188	; 0xbc
 800c638:	009b      	lsls	r3, r3, #2
 800c63a:	58d3      	ldr	r3, [r2, r3]
 800c63c:	0018      	movs	r0, r3
 800c63e:	f7fe fe2d 	bl	800b29c <USBD_LL_SOF>
}
 800c642:	46c0      	nop			; (mov r8, r8)
 800c644:	46bd      	mov	sp, r7
 800c646:	b002      	add	sp, #8
 800c648:	bd80      	pop	{r7, pc}

0800c64a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c64a:	b580      	push	{r7, lr}
 800c64c:	b084      	sub	sp, #16
 800c64e:	af00      	add	r7, sp, #0
 800c650:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800c652:	230f      	movs	r3, #15
 800c654:	18fb      	adds	r3, r7, r3
 800c656:	2201      	movs	r2, #1
 800c658:	701a      	strb	r2, [r3, #0]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800c65a:	687b      	ldr	r3, [r7, #4]
 800c65c:	689b      	ldr	r3, [r3, #8]
 800c65e:	2b02      	cmp	r3, #2
 800c660:	d001      	beq.n	800c666 <HAL_PCD_ResetCallback+0x1c>
  {
    Error_Handler();
 800c662:	f7f5 fa67 	bl	8001b34 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800c666:	687a      	ldr	r2, [r7, #4]
 800c668:	23bc      	movs	r3, #188	; 0xbc
 800c66a:	009b      	lsls	r3, r3, #2
 800c66c:	58d2      	ldr	r2, [r2, r3]
 800c66e:	230f      	movs	r3, #15
 800c670:	18fb      	adds	r3, r7, r3
 800c672:	781b      	ldrb	r3, [r3, #0]
 800c674:	0019      	movs	r1, r3
 800c676:	0010      	movs	r0, r2
 800c678:	f7fe fdcf 	bl	800b21a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800c67c:	687a      	ldr	r2, [r7, #4]
 800c67e:	23bc      	movs	r3, #188	; 0xbc
 800c680:	009b      	lsls	r3, r3, #2
 800c682:	58d3      	ldr	r3, [r2, r3]
 800c684:	0018      	movs	r0, r3
 800c686:	f7fe fd80 	bl	800b18a <USBD_LL_Reset>
}
 800c68a:	46c0      	nop			; (mov r8, r8)
 800c68c:	46bd      	mov	sp, r7
 800c68e:	b004      	add	sp, #16
 800c690:	bd80      	pop	{r7, pc}
	...

0800c694 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c694:	b580      	push	{r7, lr}
 800c696:	b082      	sub	sp, #8
 800c698:	af00      	add	r7, sp, #0
 800c69a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800c69c:	687a      	ldr	r2, [r7, #4]
 800c69e:	23bc      	movs	r3, #188	; 0xbc
 800c6a0:	009b      	lsls	r3, r3, #2
 800c6a2:	58d3      	ldr	r3, [r2, r3]
 800c6a4:	0018      	movs	r0, r3
 800c6a6:	f7fe fdc9 	bl	800b23c <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800c6aa:	687b      	ldr	r3, [r7, #4]
 800c6ac:	699b      	ldr	r3, [r3, #24]
 800c6ae:	2b00      	cmp	r3, #0
 800c6b0:	d005      	beq.n	800c6be <HAL_PCD_SuspendCallback+0x2a>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800c6b2:	4b05      	ldr	r3, [pc, #20]	; (800c6c8 <HAL_PCD_SuspendCallback+0x34>)
 800c6b4:	691a      	ldr	r2, [r3, #16]
 800c6b6:	4b04      	ldr	r3, [pc, #16]	; (800c6c8 <HAL_PCD_SuspendCallback+0x34>)
 800c6b8:	2106      	movs	r1, #6
 800c6ba:	430a      	orrs	r2, r1
 800c6bc:	611a      	str	r2, [r3, #16]
  }
  /* USER CODE END 2 */
}
 800c6be:	46c0      	nop			; (mov r8, r8)
 800c6c0:	46bd      	mov	sp, r7
 800c6c2:	b002      	add	sp, #8
 800c6c4:	bd80      	pop	{r7, pc}
 800c6c6:	46c0      	nop			; (mov r8, r8)
 800c6c8:	e000ed00 	.word	0xe000ed00

0800c6cc <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c6cc:	b580      	push	{r7, lr}
 800c6ce:	b082      	sub	sp, #8
 800c6d0:	af00      	add	r7, sp, #0
 800c6d2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800c6d4:	687b      	ldr	r3, [r7, #4]
 800c6d6:	699b      	ldr	r3, [r3, #24]
 800c6d8:	2b00      	cmp	r3, #0
 800c6da:	d007      	beq.n	800c6ec <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800c6dc:	4b09      	ldr	r3, [pc, #36]	; (800c704 <HAL_PCD_ResumeCallback+0x38>)
 800c6de:	691a      	ldr	r2, [r3, #16]
 800c6e0:	4b08      	ldr	r3, [pc, #32]	; (800c704 <HAL_PCD_ResumeCallback+0x38>)
 800c6e2:	2106      	movs	r1, #6
 800c6e4:	438a      	bics	r2, r1
 800c6e6:	611a      	str	r2, [r3, #16]
    SystemClockConfig_Resume();
 800c6e8:	f000 fa44 	bl	800cb74 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800c6ec:	687a      	ldr	r2, [r7, #4]
 800c6ee:	23bc      	movs	r3, #188	; 0xbc
 800c6f0:	009b      	lsls	r3, r3, #2
 800c6f2:	58d3      	ldr	r3, [r2, r3]
 800c6f4:	0018      	movs	r0, r3
 800c6f6:	f7fe fdb9 	bl	800b26c <USBD_LL_Resume>
}
 800c6fa:	46c0      	nop			; (mov r8, r8)
 800c6fc:	46bd      	mov	sp, r7
 800c6fe:	b002      	add	sp, #8
 800c700:	bd80      	pop	{r7, pc}
 800c702:	46c0      	nop			; (mov r8, r8)
 800c704:	e000ed00 	.word	0xe000ed00

0800c708 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800c708:	b580      	push	{r7, lr}
 800c70a:	b082      	sub	sp, #8
 800c70c:	af00      	add	r7, sp, #0
 800c70e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800c710:	4a2d      	ldr	r2, [pc, #180]	; (800c7c8 <USBD_LL_Init+0xc0>)
 800c712:	23bc      	movs	r3, #188	; 0xbc
 800c714:	009b      	lsls	r3, r3, #2
 800c716:	6879      	ldr	r1, [r7, #4]
 800c718:	50d1      	str	r1, [r2, r3]
  pdev->pData = &hpcd_USB_FS;
 800c71a:	687a      	ldr	r2, [r7, #4]
 800c71c:	23b0      	movs	r3, #176	; 0xb0
 800c71e:	009b      	lsls	r3, r3, #2
 800c720:	4929      	ldr	r1, [pc, #164]	; (800c7c8 <USBD_LL_Init+0xc0>)
 800c722:	50d1      	str	r1, [r2, r3]

  hpcd_USB_FS.Instance = USB;
 800c724:	4b28      	ldr	r3, [pc, #160]	; (800c7c8 <USBD_LL_Init+0xc0>)
 800c726:	4a29      	ldr	r2, [pc, #164]	; (800c7cc <USBD_LL_Init+0xc4>)
 800c728:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800c72a:	4b27      	ldr	r3, [pc, #156]	; (800c7c8 <USBD_LL_Init+0xc0>)
 800c72c:	2208      	movs	r2, #8
 800c72e:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800c730:	4b25      	ldr	r3, [pc, #148]	; (800c7c8 <USBD_LL_Init+0xc0>)
 800c732:	2202      	movs	r2, #2
 800c734:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800c736:	4b24      	ldr	r3, [pc, #144]	; (800c7c8 <USBD_LL_Init+0xc0>)
 800c738:	2202      	movs	r2, #2
 800c73a:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800c73c:	4b22      	ldr	r3, [pc, #136]	; (800c7c8 <USBD_LL_Init+0xc0>)
 800c73e:	2200      	movs	r2, #0
 800c740:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800c742:	4b21      	ldr	r3, [pc, #132]	; (800c7c8 <USBD_LL_Init+0xc0>)
 800c744:	2200      	movs	r2, #0
 800c746:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800c748:	4b1f      	ldr	r3, [pc, #124]	; (800c7c8 <USBD_LL_Init+0xc0>)
 800c74a:	2200      	movs	r2, #0
 800c74c:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800c74e:	4b1e      	ldr	r3, [pc, #120]	; (800c7c8 <USBD_LL_Init+0xc0>)
 800c750:	0018      	movs	r0, r3
 800c752:	f7f7 f967 	bl	8003a24 <HAL_PCD_Init>
 800c756:	1e03      	subs	r3, r0, #0
 800c758:	d001      	beq.n	800c75e <USBD_LL_Init+0x56>
  {
    Error_Handler( );
 800c75a:	f7f5 f9eb 	bl	8001b34 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800c75e:	687a      	ldr	r2, [r7, #4]
 800c760:	23b0      	movs	r3, #176	; 0xb0
 800c762:	009b      	lsls	r3, r3, #2
 800c764:	58d0      	ldr	r0, [r2, r3]
 800c766:	2318      	movs	r3, #24
 800c768:	2200      	movs	r2, #0
 800c76a:	2100      	movs	r1, #0
 800c76c:	f7f8 ff48 	bl	8005600 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800c770:	687a      	ldr	r2, [r7, #4]
 800c772:	23b0      	movs	r3, #176	; 0xb0
 800c774:	009b      	lsls	r3, r3, #2
 800c776:	58d0      	ldr	r0, [r2, r3]
 800c778:	2358      	movs	r3, #88	; 0x58
 800c77a:	2200      	movs	r2, #0
 800c77c:	2180      	movs	r1, #128	; 0x80
 800c77e:	f7f8 ff3f 	bl	8005600 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800c782:	687a      	ldr	r2, [r7, #4]
 800c784:	23b0      	movs	r3, #176	; 0xb0
 800c786:	009b      	lsls	r3, r3, #2
 800c788:	58d0      	ldr	r0, [r2, r3]
 800c78a:	23c0      	movs	r3, #192	; 0xc0
 800c78c:	2200      	movs	r2, #0
 800c78e:	2181      	movs	r1, #129	; 0x81
 800c790:	f7f8 ff36 	bl	8005600 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800c794:	687a      	ldr	r2, [r7, #4]
 800c796:	23b0      	movs	r3, #176	; 0xb0
 800c798:	009b      	lsls	r3, r3, #2
 800c79a:	58d0      	ldr	r0, [r2, r3]
 800c79c:	2388      	movs	r3, #136	; 0x88
 800c79e:	005b      	lsls	r3, r3, #1
 800c7a0:	2200      	movs	r2, #0
 800c7a2:	2101      	movs	r1, #1
 800c7a4:	f7f8 ff2c 	bl	8005600 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800c7a8:	687a      	ldr	r2, [r7, #4]
 800c7aa:	23b0      	movs	r3, #176	; 0xb0
 800c7ac:	009b      	lsls	r3, r3, #2
 800c7ae:	58d0      	ldr	r0, [r2, r3]
 800c7b0:	2380      	movs	r3, #128	; 0x80
 800c7b2:	005b      	lsls	r3, r3, #1
 800c7b4:	2200      	movs	r2, #0
 800c7b6:	2182      	movs	r1, #130	; 0x82
 800c7b8:	f7f8 ff22 	bl	8005600 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800c7bc:	2300      	movs	r3, #0
}
 800c7be:	0018      	movs	r0, r3
 800c7c0:	46bd      	mov	sp, r7
 800c7c2:	b002      	add	sp, #8
 800c7c4:	bd80      	pop	{r7, pc}
 800c7c6:	46c0      	nop			; (mov r8, r8)
 800c7c8:	20001338 	.word	0x20001338
 800c7cc:	40005c00 	.word	0x40005c00

0800c7d0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800c7d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c7d2:	b085      	sub	sp, #20
 800c7d4:	af00      	add	r7, sp, #0
 800c7d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c7d8:	210f      	movs	r1, #15
 800c7da:	187b      	adds	r3, r7, r1
 800c7dc:	2200      	movs	r2, #0
 800c7de:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c7e0:	260e      	movs	r6, #14
 800c7e2:	19bb      	adds	r3, r7, r6
 800c7e4:	2200      	movs	r2, #0
 800c7e6:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_Start(pdev->pData);
 800c7e8:	687a      	ldr	r2, [r7, #4]
 800c7ea:	23b0      	movs	r3, #176	; 0xb0
 800c7ec:	009b      	lsls	r3, r3, #2
 800c7ee:	58d3      	ldr	r3, [r2, r3]
 800c7f0:	000d      	movs	r5, r1
 800c7f2:	187c      	adds	r4, r7, r1
 800c7f4:	0018      	movs	r0, r3
 800c7f6:	f7f7 fa25 	bl	8003c44 <HAL_PCD_Start>
 800c7fa:	0003      	movs	r3, r0
 800c7fc:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c7fe:	19bc      	adds	r4, r7, r6
 800c800:	197b      	adds	r3, r7, r5
 800c802:	781b      	ldrb	r3, [r3, #0]
 800c804:	0018      	movs	r0, r3
 800c806:	f000 f9bc 	bl	800cb82 <USBD_Get_USB_Status>
 800c80a:	0003      	movs	r3, r0
 800c80c:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800c80e:	19bb      	adds	r3, r7, r6
 800c810:	781b      	ldrb	r3, [r3, #0]
}
 800c812:	0018      	movs	r0, r3
 800c814:	46bd      	mov	sp, r7
 800c816:	b005      	add	sp, #20
 800c818:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800c81a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800c81a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c81c:	b085      	sub	sp, #20
 800c81e:	af00      	add	r7, sp, #0
 800c820:	6078      	str	r0, [r7, #4]
 800c822:	000c      	movs	r4, r1
 800c824:	0010      	movs	r0, r2
 800c826:	0019      	movs	r1, r3
 800c828:	1cfb      	adds	r3, r7, #3
 800c82a:	1c22      	adds	r2, r4, #0
 800c82c:	701a      	strb	r2, [r3, #0]
 800c82e:	1cbb      	adds	r3, r7, #2
 800c830:	1c02      	adds	r2, r0, #0
 800c832:	701a      	strb	r2, [r3, #0]
 800c834:	003b      	movs	r3, r7
 800c836:	1c0a      	adds	r2, r1, #0
 800c838:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c83a:	260f      	movs	r6, #15
 800c83c:	19bb      	adds	r3, r7, r6
 800c83e:	2200      	movs	r2, #0
 800c840:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c842:	250e      	movs	r5, #14
 800c844:	197b      	adds	r3, r7, r5
 800c846:	2200      	movs	r2, #0
 800c848:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800c84a:	687a      	ldr	r2, [r7, #4]
 800c84c:	23b0      	movs	r3, #176	; 0xb0
 800c84e:	009b      	lsls	r3, r3, #2
 800c850:	58d0      	ldr	r0, [r2, r3]
 800c852:	19bc      	adds	r4, r7, r6
 800c854:	1cbb      	adds	r3, r7, #2
 800c856:	781d      	ldrb	r5, [r3, #0]
 800c858:	003b      	movs	r3, r7
 800c85a:	881a      	ldrh	r2, [r3, #0]
 800c85c:	1cfb      	adds	r3, r7, #3
 800c85e:	7819      	ldrb	r1, [r3, #0]
 800c860:	002b      	movs	r3, r5
 800c862:	f7f7 fbbc 	bl	8003fde <HAL_PCD_EP_Open>
 800c866:	0003      	movs	r3, r0
 800c868:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c86a:	250e      	movs	r5, #14
 800c86c:	197c      	adds	r4, r7, r5
 800c86e:	19bb      	adds	r3, r7, r6
 800c870:	781b      	ldrb	r3, [r3, #0]
 800c872:	0018      	movs	r0, r3
 800c874:	f000 f985 	bl	800cb82 <USBD_Get_USB_Status>
 800c878:	0003      	movs	r3, r0
 800c87a:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800c87c:	197b      	adds	r3, r7, r5
 800c87e:	781b      	ldrb	r3, [r3, #0]
}
 800c880:	0018      	movs	r0, r3
 800c882:	46bd      	mov	sp, r7
 800c884:	b005      	add	sp, #20
 800c886:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800c888 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c888:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c88a:	b085      	sub	sp, #20
 800c88c:	af00      	add	r7, sp, #0
 800c88e:	6078      	str	r0, [r7, #4]
 800c890:	000a      	movs	r2, r1
 800c892:	1cfb      	adds	r3, r7, #3
 800c894:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c896:	210f      	movs	r1, #15
 800c898:	187b      	adds	r3, r7, r1
 800c89a:	2200      	movs	r2, #0
 800c89c:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c89e:	260e      	movs	r6, #14
 800c8a0:	19bb      	adds	r3, r7, r6
 800c8a2:	2200      	movs	r2, #0
 800c8a4:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800c8a6:	687a      	ldr	r2, [r7, #4]
 800c8a8:	23b0      	movs	r3, #176	; 0xb0
 800c8aa:	009b      	lsls	r3, r3, #2
 800c8ac:	58d2      	ldr	r2, [r2, r3]
 800c8ae:	000d      	movs	r5, r1
 800c8b0:	187c      	adds	r4, r7, r1
 800c8b2:	1cfb      	adds	r3, r7, #3
 800c8b4:	781b      	ldrb	r3, [r3, #0]
 800c8b6:	0019      	movs	r1, r3
 800c8b8:	0010      	movs	r0, r2
 800c8ba:	f7f7 fc08 	bl	80040ce <HAL_PCD_EP_Close>
 800c8be:	0003      	movs	r3, r0
 800c8c0:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c8c2:	19bc      	adds	r4, r7, r6
 800c8c4:	197b      	adds	r3, r7, r5
 800c8c6:	781b      	ldrb	r3, [r3, #0]
 800c8c8:	0018      	movs	r0, r3
 800c8ca:	f000 f95a 	bl	800cb82 <USBD_Get_USB_Status>
 800c8ce:	0003      	movs	r3, r0
 800c8d0:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800c8d2:	19bb      	adds	r3, r7, r6
 800c8d4:	781b      	ldrb	r3, [r3, #0]
}
 800c8d6:	0018      	movs	r0, r3
 800c8d8:	46bd      	mov	sp, r7
 800c8da:	b005      	add	sp, #20
 800c8dc:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800c8de <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c8de:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c8e0:	b085      	sub	sp, #20
 800c8e2:	af00      	add	r7, sp, #0
 800c8e4:	6078      	str	r0, [r7, #4]
 800c8e6:	000a      	movs	r2, r1
 800c8e8:	1cfb      	adds	r3, r7, #3
 800c8ea:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c8ec:	210f      	movs	r1, #15
 800c8ee:	187b      	adds	r3, r7, r1
 800c8f0:	2200      	movs	r2, #0
 800c8f2:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c8f4:	260e      	movs	r6, #14
 800c8f6:	19bb      	adds	r3, r7, r6
 800c8f8:	2200      	movs	r2, #0
 800c8fa:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800c8fc:	687a      	ldr	r2, [r7, #4]
 800c8fe:	23b0      	movs	r3, #176	; 0xb0
 800c900:	009b      	lsls	r3, r3, #2
 800c902:	58d2      	ldr	r2, [r2, r3]
 800c904:	000d      	movs	r5, r1
 800c906:	187c      	adds	r4, r7, r1
 800c908:	1cfb      	adds	r3, r7, #3
 800c90a:	781b      	ldrb	r3, [r3, #0]
 800c90c:	0019      	movs	r1, r3
 800c90e:	0010      	movs	r0, r2
 800c910:	f7f7 fcd4 	bl	80042bc <HAL_PCD_EP_SetStall>
 800c914:	0003      	movs	r3, r0
 800c916:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c918:	19bc      	adds	r4, r7, r6
 800c91a:	197b      	adds	r3, r7, r5
 800c91c:	781b      	ldrb	r3, [r3, #0]
 800c91e:	0018      	movs	r0, r3
 800c920:	f000 f92f 	bl	800cb82 <USBD_Get_USB_Status>
 800c924:	0003      	movs	r3, r0
 800c926:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800c928:	19bb      	adds	r3, r7, r6
 800c92a:	781b      	ldrb	r3, [r3, #0]
}
 800c92c:	0018      	movs	r0, r3
 800c92e:	46bd      	mov	sp, r7
 800c930:	b005      	add	sp, #20
 800c932:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800c934 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c934:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c936:	b085      	sub	sp, #20
 800c938:	af00      	add	r7, sp, #0
 800c93a:	6078      	str	r0, [r7, #4]
 800c93c:	000a      	movs	r2, r1
 800c93e:	1cfb      	adds	r3, r7, #3
 800c940:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c942:	210f      	movs	r1, #15
 800c944:	187b      	adds	r3, r7, r1
 800c946:	2200      	movs	r2, #0
 800c948:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c94a:	260e      	movs	r6, #14
 800c94c:	19bb      	adds	r3, r7, r6
 800c94e:	2200      	movs	r2, #0
 800c950:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800c952:	687a      	ldr	r2, [r7, #4]
 800c954:	23b0      	movs	r3, #176	; 0xb0
 800c956:	009b      	lsls	r3, r3, #2
 800c958:	58d2      	ldr	r2, [r2, r3]
 800c95a:	000d      	movs	r5, r1
 800c95c:	187c      	adds	r4, r7, r1
 800c95e:	1cfb      	adds	r3, r7, #3
 800c960:	781b      	ldrb	r3, [r3, #0]
 800c962:	0019      	movs	r1, r3
 800c964:	0010      	movs	r0, r2
 800c966:	f7f7 fd05 	bl	8004374 <HAL_PCD_EP_ClrStall>
 800c96a:	0003      	movs	r3, r0
 800c96c:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c96e:	19bc      	adds	r4, r7, r6
 800c970:	197b      	adds	r3, r7, r5
 800c972:	781b      	ldrb	r3, [r3, #0]
 800c974:	0018      	movs	r0, r3
 800c976:	f000 f904 	bl	800cb82 <USBD_Get_USB_Status>
 800c97a:	0003      	movs	r3, r0
 800c97c:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800c97e:	19bb      	adds	r3, r7, r6
 800c980:	781b      	ldrb	r3, [r3, #0]
}
 800c982:	0018      	movs	r0, r3
 800c984:	46bd      	mov	sp, r7
 800c986:	b005      	add	sp, #20
 800c988:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800c98a <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c98a:	b580      	push	{r7, lr}
 800c98c:	b084      	sub	sp, #16
 800c98e:	af00      	add	r7, sp, #0
 800c990:	6078      	str	r0, [r7, #4]
 800c992:	000a      	movs	r2, r1
 800c994:	1cfb      	adds	r3, r7, #3
 800c996:	701a      	strb	r2, [r3, #0]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800c998:	687a      	ldr	r2, [r7, #4]
 800c99a:	23b0      	movs	r3, #176	; 0xb0
 800c99c:	009b      	lsls	r3, r3, #2
 800c99e:	58d3      	ldr	r3, [r2, r3]
 800c9a0:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800c9a2:	1cfb      	adds	r3, r7, #3
 800c9a4:	781b      	ldrb	r3, [r3, #0]
 800c9a6:	b25b      	sxtb	r3, r3
 800c9a8:	2b00      	cmp	r3, #0
 800c9aa:	da0d      	bge.n	800c9c8 <USBD_LL_IsStallEP+0x3e>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800c9ac:	1cfb      	adds	r3, r7, #3
 800c9ae:	781b      	ldrb	r3, [r3, #0]
 800c9b0:	227f      	movs	r2, #127	; 0x7f
 800c9b2:	4013      	ands	r3, r2
 800c9b4:	68f9      	ldr	r1, [r7, #12]
 800c9b6:	1c5a      	adds	r2, r3, #1
 800c9b8:	0013      	movs	r3, r2
 800c9ba:	009b      	lsls	r3, r3, #2
 800c9bc:	189b      	adds	r3, r3, r2
 800c9be:	00db      	lsls	r3, r3, #3
 800c9c0:	18cb      	adds	r3, r1, r3
 800c9c2:	3302      	adds	r3, #2
 800c9c4:	781b      	ldrb	r3, [r3, #0]
 800c9c6:	e00d      	b.n	800c9e4 <USBD_LL_IsStallEP+0x5a>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800c9c8:	1cfb      	adds	r3, r7, #3
 800c9ca:	781b      	ldrb	r3, [r3, #0]
 800c9cc:	227f      	movs	r2, #127	; 0x7f
 800c9ce:	401a      	ands	r2, r3
 800c9d0:	68f8      	ldr	r0, [r7, #12]
 800c9d2:	23b5      	movs	r3, #181	; 0xb5
 800c9d4:	0059      	lsls	r1, r3, #1
 800c9d6:	0013      	movs	r3, r2
 800c9d8:	009b      	lsls	r3, r3, #2
 800c9da:	189b      	adds	r3, r3, r2
 800c9dc:	00db      	lsls	r3, r3, #3
 800c9de:	18c3      	adds	r3, r0, r3
 800c9e0:	185b      	adds	r3, r3, r1
 800c9e2:	781b      	ldrb	r3, [r3, #0]
  }
}
 800c9e4:	0018      	movs	r0, r3
 800c9e6:	46bd      	mov	sp, r7
 800c9e8:	b004      	add	sp, #16
 800c9ea:	bd80      	pop	{r7, pc}

0800c9ec <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800c9ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c9ee:	b085      	sub	sp, #20
 800c9f0:	af00      	add	r7, sp, #0
 800c9f2:	6078      	str	r0, [r7, #4]
 800c9f4:	000a      	movs	r2, r1
 800c9f6:	1cfb      	adds	r3, r7, #3
 800c9f8:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c9fa:	210f      	movs	r1, #15
 800c9fc:	187b      	adds	r3, r7, r1
 800c9fe:	2200      	movs	r2, #0
 800ca00:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ca02:	260e      	movs	r6, #14
 800ca04:	19bb      	adds	r3, r7, r6
 800ca06:	2200      	movs	r2, #0
 800ca08:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800ca0a:	687a      	ldr	r2, [r7, #4]
 800ca0c:	23b0      	movs	r3, #176	; 0xb0
 800ca0e:	009b      	lsls	r3, r3, #2
 800ca10:	58d2      	ldr	r2, [r2, r3]
 800ca12:	000d      	movs	r5, r1
 800ca14:	187c      	adds	r4, r7, r1
 800ca16:	1cfb      	adds	r3, r7, #3
 800ca18:	781b      	ldrb	r3, [r3, #0]
 800ca1a:	0019      	movs	r1, r3
 800ca1c:	0010      	movs	r0, r2
 800ca1e:	f7f7 fab3 	bl	8003f88 <HAL_PCD_SetAddress>
 800ca22:	0003      	movs	r3, r0
 800ca24:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ca26:	19bc      	adds	r4, r7, r6
 800ca28:	197b      	adds	r3, r7, r5
 800ca2a:	781b      	ldrb	r3, [r3, #0]
 800ca2c:	0018      	movs	r0, r3
 800ca2e:	f000 f8a8 	bl	800cb82 <USBD_Get_USB_Status>
 800ca32:	0003      	movs	r3, r0
 800ca34:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800ca36:	19bb      	adds	r3, r7, r6
 800ca38:	781b      	ldrb	r3, [r3, #0]
}
 800ca3a:	0018      	movs	r0, r3
 800ca3c:	46bd      	mov	sp, r7
 800ca3e:	b005      	add	sp, #20
 800ca40:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800ca42 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800ca42:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ca44:	b087      	sub	sp, #28
 800ca46:	af00      	add	r7, sp, #0
 800ca48:	60f8      	str	r0, [r7, #12]
 800ca4a:	0008      	movs	r0, r1
 800ca4c:	607a      	str	r2, [r7, #4]
 800ca4e:	0019      	movs	r1, r3
 800ca50:	230b      	movs	r3, #11
 800ca52:	18fb      	adds	r3, r7, r3
 800ca54:	1c02      	adds	r2, r0, #0
 800ca56:	701a      	strb	r2, [r3, #0]
 800ca58:	2408      	movs	r4, #8
 800ca5a:	193b      	adds	r3, r7, r4
 800ca5c:	1c0a      	adds	r2, r1, #0
 800ca5e:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ca60:	2117      	movs	r1, #23
 800ca62:	187b      	adds	r3, r7, r1
 800ca64:	2200      	movs	r2, #0
 800ca66:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ca68:	2516      	movs	r5, #22
 800ca6a:	197b      	adds	r3, r7, r5
 800ca6c:	2200      	movs	r2, #0
 800ca6e:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800ca70:	68fa      	ldr	r2, [r7, #12]
 800ca72:	23b0      	movs	r3, #176	; 0xb0
 800ca74:	009b      	lsls	r3, r3, #2
 800ca76:	58d0      	ldr	r0, [r2, r3]
 800ca78:	193b      	adds	r3, r7, r4
 800ca7a:	881d      	ldrh	r5, [r3, #0]
 800ca7c:	000e      	movs	r6, r1
 800ca7e:	187c      	adds	r4, r7, r1
 800ca80:	687a      	ldr	r2, [r7, #4]
 800ca82:	230b      	movs	r3, #11
 800ca84:	18fb      	adds	r3, r7, r3
 800ca86:	7819      	ldrb	r1, [r3, #0]
 800ca88:	002b      	movs	r3, r5
 800ca8a:	f7f7 fbce 	bl	800422a <HAL_PCD_EP_Transmit>
 800ca8e:	0003      	movs	r3, r0
 800ca90:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ca92:	2516      	movs	r5, #22
 800ca94:	197c      	adds	r4, r7, r5
 800ca96:	19bb      	adds	r3, r7, r6
 800ca98:	781b      	ldrb	r3, [r3, #0]
 800ca9a:	0018      	movs	r0, r3
 800ca9c:	f000 f871 	bl	800cb82 <USBD_Get_USB_Status>
 800caa0:	0003      	movs	r3, r0
 800caa2:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800caa4:	197b      	adds	r3, r7, r5
 800caa6:	781b      	ldrb	r3, [r3, #0]
}
 800caa8:	0018      	movs	r0, r3
 800caaa:	46bd      	mov	sp, r7
 800caac:	b007      	add	sp, #28
 800caae:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800cab0 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800cab0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cab2:	b087      	sub	sp, #28
 800cab4:	af00      	add	r7, sp, #0
 800cab6:	60f8      	str	r0, [r7, #12]
 800cab8:	0008      	movs	r0, r1
 800caba:	607a      	str	r2, [r7, #4]
 800cabc:	0019      	movs	r1, r3
 800cabe:	230b      	movs	r3, #11
 800cac0:	18fb      	adds	r3, r7, r3
 800cac2:	1c02      	adds	r2, r0, #0
 800cac4:	701a      	strb	r2, [r3, #0]
 800cac6:	2408      	movs	r4, #8
 800cac8:	193b      	adds	r3, r7, r4
 800caca:	1c0a      	adds	r2, r1, #0
 800cacc:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cace:	2117      	movs	r1, #23
 800cad0:	187b      	adds	r3, r7, r1
 800cad2:	2200      	movs	r2, #0
 800cad4:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cad6:	2516      	movs	r5, #22
 800cad8:	197b      	adds	r3, r7, r5
 800cada:	2200      	movs	r2, #0
 800cadc:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800cade:	68fa      	ldr	r2, [r7, #12]
 800cae0:	23b0      	movs	r3, #176	; 0xb0
 800cae2:	009b      	lsls	r3, r3, #2
 800cae4:	58d0      	ldr	r0, [r2, r3]
 800cae6:	193b      	adds	r3, r7, r4
 800cae8:	881d      	ldrh	r5, [r3, #0]
 800caea:	000e      	movs	r6, r1
 800caec:	187c      	adds	r4, r7, r1
 800caee:	687a      	ldr	r2, [r7, #4]
 800caf0:	230b      	movs	r3, #11
 800caf2:	18fb      	adds	r3, r7, r3
 800caf4:	7819      	ldrb	r1, [r3, #0]
 800caf6:	002b      	movs	r3, r5
 800caf8:	f7f7 fb3a 	bl	8004170 <HAL_PCD_EP_Receive>
 800cafc:	0003      	movs	r3, r0
 800cafe:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cb00:	2516      	movs	r5, #22
 800cb02:	197c      	adds	r4, r7, r5
 800cb04:	19bb      	adds	r3, r7, r6
 800cb06:	781b      	ldrb	r3, [r3, #0]
 800cb08:	0018      	movs	r0, r3
 800cb0a:	f000 f83a 	bl	800cb82 <USBD_Get_USB_Status>
 800cb0e:	0003      	movs	r3, r0
 800cb10:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800cb12:	197b      	adds	r3, r7, r5
 800cb14:	781b      	ldrb	r3, [r3, #0]
}
 800cb16:	0018      	movs	r0, r3
 800cb18:	46bd      	mov	sp, r7
 800cb1a:	b007      	add	sp, #28
 800cb1c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800cb1e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cb1e:	b580      	push	{r7, lr}
 800cb20:	b082      	sub	sp, #8
 800cb22:	af00      	add	r7, sp, #0
 800cb24:	6078      	str	r0, [r7, #4]
 800cb26:	000a      	movs	r2, r1
 800cb28:	1cfb      	adds	r3, r7, #3
 800cb2a:	701a      	strb	r2, [r3, #0]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800cb2c:	687a      	ldr	r2, [r7, #4]
 800cb2e:	23b0      	movs	r3, #176	; 0xb0
 800cb30:	009b      	lsls	r3, r3, #2
 800cb32:	58d2      	ldr	r2, [r2, r3]
 800cb34:	1cfb      	adds	r3, r7, #3
 800cb36:	781b      	ldrb	r3, [r3, #0]
 800cb38:	0019      	movs	r1, r3
 800cb3a:	0010      	movs	r0, r2
 800cb3c:	f7f7 fb5c 	bl	80041f8 <HAL_PCD_EP_GetRxCount>
 800cb40:	0003      	movs	r3, r0
}
 800cb42:	0018      	movs	r0, r3
 800cb44:	46bd      	mov	sp, r7
 800cb46:	b002      	add	sp, #8
 800cb48:	bd80      	pop	{r7, pc}
	...

0800cb4c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800cb4c:	b580      	push	{r7, lr}
 800cb4e:	b082      	sub	sp, #8
 800cb50:	af00      	add	r7, sp, #0
 800cb52:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800cb54:	4b02      	ldr	r3, [pc, #8]	; (800cb60 <USBD_static_malloc+0x14>)
}
 800cb56:	0018      	movs	r0, r3
 800cb58:	46bd      	mov	sp, r7
 800cb5a:	b002      	add	sp, #8
 800cb5c:	bd80      	pop	{r7, pc}
 800cb5e:	46c0      	nop			; (mov r8, r8)
 800cb60:	20000268 	.word	0x20000268

0800cb64 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800cb64:	b580      	push	{r7, lr}
 800cb66:	b082      	sub	sp, #8
 800cb68:	af00      	add	r7, sp, #0
 800cb6a:	6078      	str	r0, [r7, #4]

}
 800cb6c:	46c0      	nop			; (mov r8, r8)
 800cb6e:	46bd      	mov	sp, r7
 800cb70:	b002      	add	sp, #8
 800cb72:	bd80      	pop	{r7, pc}

0800cb74 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB Resume CallBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800cb74:	b580      	push	{r7, lr}
 800cb76:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800cb78:	f7f4 f9b2 	bl	8000ee0 <SystemClock_Config>
}
 800cb7c:	46c0      	nop			; (mov r8, r8)
 800cb7e:	46bd      	mov	sp, r7
 800cb80:	bd80      	pop	{r7, pc}

0800cb82 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800cb82:	b580      	push	{r7, lr}
 800cb84:	b084      	sub	sp, #16
 800cb86:	af00      	add	r7, sp, #0
 800cb88:	0002      	movs	r2, r0
 800cb8a:	1dfb      	adds	r3, r7, #7
 800cb8c:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cb8e:	230f      	movs	r3, #15
 800cb90:	18fb      	adds	r3, r7, r3
 800cb92:	2200      	movs	r2, #0
 800cb94:	701a      	strb	r2, [r3, #0]

  switch (hal_status)
 800cb96:	1dfb      	adds	r3, r7, #7
 800cb98:	781b      	ldrb	r3, [r3, #0]
 800cb9a:	2b03      	cmp	r3, #3
 800cb9c:	d017      	beq.n	800cbce <USBD_Get_USB_Status+0x4c>
 800cb9e:	dc1b      	bgt.n	800cbd8 <USBD_Get_USB_Status+0x56>
 800cba0:	2b02      	cmp	r3, #2
 800cba2:	d00f      	beq.n	800cbc4 <USBD_Get_USB_Status+0x42>
 800cba4:	dc18      	bgt.n	800cbd8 <USBD_Get_USB_Status+0x56>
 800cba6:	2b00      	cmp	r3, #0
 800cba8:	d002      	beq.n	800cbb0 <USBD_Get_USB_Status+0x2e>
 800cbaa:	2b01      	cmp	r3, #1
 800cbac:	d005      	beq.n	800cbba <USBD_Get_USB_Status+0x38>
 800cbae:	e013      	b.n	800cbd8 <USBD_Get_USB_Status+0x56>
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800cbb0:	230f      	movs	r3, #15
 800cbb2:	18fb      	adds	r3, r7, r3
 800cbb4:	2200      	movs	r2, #0
 800cbb6:	701a      	strb	r2, [r3, #0]
    break;
 800cbb8:	e013      	b.n	800cbe2 <USBD_Get_USB_Status+0x60>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800cbba:	230f      	movs	r3, #15
 800cbbc:	18fb      	adds	r3, r7, r3
 800cbbe:	2202      	movs	r2, #2
 800cbc0:	701a      	strb	r2, [r3, #0]
    break;
 800cbc2:	e00e      	b.n	800cbe2 <USBD_Get_USB_Status+0x60>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800cbc4:	230f      	movs	r3, #15
 800cbc6:	18fb      	adds	r3, r7, r3
 800cbc8:	2201      	movs	r2, #1
 800cbca:	701a      	strb	r2, [r3, #0]
    break;
 800cbcc:	e009      	b.n	800cbe2 <USBD_Get_USB_Status+0x60>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800cbce:	230f      	movs	r3, #15
 800cbd0:	18fb      	adds	r3, r7, r3
 800cbd2:	2202      	movs	r2, #2
 800cbd4:	701a      	strb	r2, [r3, #0]
    break;
 800cbd6:	e004      	b.n	800cbe2 <USBD_Get_USB_Status+0x60>
    default :
      usb_status = USBD_FAIL;
 800cbd8:	230f      	movs	r3, #15
 800cbda:	18fb      	adds	r3, r7, r3
 800cbdc:	2202      	movs	r2, #2
 800cbde:	701a      	strb	r2, [r3, #0]
    break;
 800cbe0:	46c0      	nop			; (mov r8, r8)
  }
  return usb_status;
 800cbe2:	230f      	movs	r3, #15
 800cbe4:	18fb      	adds	r3, r7, r3
 800cbe6:	781b      	ldrb	r3, [r3, #0]
}
 800cbe8:	0018      	movs	r0, r3
 800cbea:	46bd      	mov	sp, r7
 800cbec:	b004      	add	sp, #16
 800cbee:	bd80      	pop	{r7, pc}

0800cbf0 <__errno>:
 800cbf0:	4b01      	ldr	r3, [pc, #4]	; (800cbf8 <__errno+0x8>)
 800cbf2:	6818      	ldr	r0, [r3, #0]
 800cbf4:	4770      	bx	lr
 800cbf6:	46c0      	nop			; (mov r8, r8)
 800cbf8:	2000017c 	.word	0x2000017c

0800cbfc <__libc_init_array>:
 800cbfc:	b570      	push	{r4, r5, r6, lr}
 800cbfe:	2600      	movs	r6, #0
 800cc00:	4d0c      	ldr	r5, [pc, #48]	; (800cc34 <__libc_init_array+0x38>)
 800cc02:	4c0d      	ldr	r4, [pc, #52]	; (800cc38 <__libc_init_array+0x3c>)
 800cc04:	1b64      	subs	r4, r4, r5
 800cc06:	10a4      	asrs	r4, r4, #2
 800cc08:	42a6      	cmp	r6, r4
 800cc0a:	d109      	bne.n	800cc20 <__libc_init_array+0x24>
 800cc0c:	2600      	movs	r6, #0
 800cc0e:	f000 fc5b 	bl	800d4c8 <_init>
 800cc12:	4d0a      	ldr	r5, [pc, #40]	; (800cc3c <__libc_init_array+0x40>)
 800cc14:	4c0a      	ldr	r4, [pc, #40]	; (800cc40 <__libc_init_array+0x44>)
 800cc16:	1b64      	subs	r4, r4, r5
 800cc18:	10a4      	asrs	r4, r4, #2
 800cc1a:	42a6      	cmp	r6, r4
 800cc1c:	d105      	bne.n	800cc2a <__libc_init_array+0x2e>
 800cc1e:	bd70      	pop	{r4, r5, r6, pc}
 800cc20:	00b3      	lsls	r3, r6, #2
 800cc22:	58eb      	ldr	r3, [r5, r3]
 800cc24:	4798      	blx	r3
 800cc26:	3601      	adds	r6, #1
 800cc28:	e7ee      	b.n	800cc08 <__libc_init_array+0xc>
 800cc2a:	00b3      	lsls	r3, r6, #2
 800cc2c:	58eb      	ldr	r3, [r5, r3]
 800cc2e:	4798      	blx	r3
 800cc30:	3601      	adds	r6, #1
 800cc32:	e7f2      	b.n	800cc1a <__libc_init_array+0x1e>
 800cc34:	0800d750 	.word	0x0800d750
 800cc38:	0800d750 	.word	0x0800d750
 800cc3c:	0800d750 	.word	0x0800d750
 800cc40:	0800d754 	.word	0x0800d754

0800cc44 <malloc>:
 800cc44:	b510      	push	{r4, lr}
 800cc46:	4b03      	ldr	r3, [pc, #12]	; (800cc54 <malloc+0x10>)
 800cc48:	0001      	movs	r1, r0
 800cc4a:	6818      	ldr	r0, [r3, #0]
 800cc4c:	f000 f86a 	bl	800cd24 <_malloc_r>
 800cc50:	bd10      	pop	{r4, pc}
 800cc52:	46c0      	nop			; (mov r8, r8)
 800cc54:	2000017c 	.word	0x2000017c

0800cc58 <free>:
 800cc58:	b510      	push	{r4, lr}
 800cc5a:	4b03      	ldr	r3, [pc, #12]	; (800cc68 <free+0x10>)
 800cc5c:	0001      	movs	r1, r0
 800cc5e:	6818      	ldr	r0, [r3, #0]
 800cc60:	f000 f816 	bl	800cc90 <_free_r>
 800cc64:	bd10      	pop	{r4, pc}
 800cc66:	46c0      	nop			; (mov r8, r8)
 800cc68:	2000017c 	.word	0x2000017c

0800cc6c <memcpy>:
 800cc6c:	2300      	movs	r3, #0
 800cc6e:	b510      	push	{r4, lr}
 800cc70:	429a      	cmp	r2, r3
 800cc72:	d100      	bne.n	800cc76 <memcpy+0xa>
 800cc74:	bd10      	pop	{r4, pc}
 800cc76:	5ccc      	ldrb	r4, [r1, r3]
 800cc78:	54c4      	strb	r4, [r0, r3]
 800cc7a:	3301      	adds	r3, #1
 800cc7c:	e7f8      	b.n	800cc70 <memcpy+0x4>

0800cc7e <memset>:
 800cc7e:	0003      	movs	r3, r0
 800cc80:	1882      	adds	r2, r0, r2
 800cc82:	4293      	cmp	r3, r2
 800cc84:	d100      	bne.n	800cc88 <memset+0xa>
 800cc86:	4770      	bx	lr
 800cc88:	7019      	strb	r1, [r3, #0]
 800cc8a:	3301      	adds	r3, #1
 800cc8c:	e7f9      	b.n	800cc82 <memset+0x4>
	...

0800cc90 <_free_r>:
 800cc90:	b570      	push	{r4, r5, r6, lr}
 800cc92:	0005      	movs	r5, r0
 800cc94:	2900      	cmp	r1, #0
 800cc96:	d010      	beq.n	800ccba <_free_r+0x2a>
 800cc98:	1f0c      	subs	r4, r1, #4
 800cc9a:	6823      	ldr	r3, [r4, #0]
 800cc9c:	2b00      	cmp	r3, #0
 800cc9e:	da00      	bge.n	800cca2 <_free_r+0x12>
 800cca0:	18e4      	adds	r4, r4, r3
 800cca2:	0028      	movs	r0, r5
 800cca4:	f000 f8ce 	bl	800ce44 <__malloc_lock>
 800cca8:	4a1d      	ldr	r2, [pc, #116]	; (800cd20 <_free_r+0x90>)
 800ccaa:	6813      	ldr	r3, [r2, #0]
 800ccac:	2b00      	cmp	r3, #0
 800ccae:	d105      	bne.n	800ccbc <_free_r+0x2c>
 800ccb0:	6063      	str	r3, [r4, #4]
 800ccb2:	6014      	str	r4, [r2, #0]
 800ccb4:	0028      	movs	r0, r5
 800ccb6:	f000 f8cd 	bl	800ce54 <__malloc_unlock>
 800ccba:	bd70      	pop	{r4, r5, r6, pc}
 800ccbc:	42a3      	cmp	r3, r4
 800ccbe:	d908      	bls.n	800ccd2 <_free_r+0x42>
 800ccc0:	6821      	ldr	r1, [r4, #0]
 800ccc2:	1860      	adds	r0, r4, r1
 800ccc4:	4283      	cmp	r3, r0
 800ccc6:	d1f3      	bne.n	800ccb0 <_free_r+0x20>
 800ccc8:	6818      	ldr	r0, [r3, #0]
 800ccca:	685b      	ldr	r3, [r3, #4]
 800cccc:	1841      	adds	r1, r0, r1
 800ccce:	6021      	str	r1, [r4, #0]
 800ccd0:	e7ee      	b.n	800ccb0 <_free_r+0x20>
 800ccd2:	001a      	movs	r2, r3
 800ccd4:	685b      	ldr	r3, [r3, #4]
 800ccd6:	2b00      	cmp	r3, #0
 800ccd8:	d001      	beq.n	800ccde <_free_r+0x4e>
 800ccda:	42a3      	cmp	r3, r4
 800ccdc:	d9f9      	bls.n	800ccd2 <_free_r+0x42>
 800ccde:	6811      	ldr	r1, [r2, #0]
 800cce0:	1850      	adds	r0, r2, r1
 800cce2:	42a0      	cmp	r0, r4
 800cce4:	d10b      	bne.n	800ccfe <_free_r+0x6e>
 800cce6:	6820      	ldr	r0, [r4, #0]
 800cce8:	1809      	adds	r1, r1, r0
 800ccea:	1850      	adds	r0, r2, r1
 800ccec:	6011      	str	r1, [r2, #0]
 800ccee:	4283      	cmp	r3, r0
 800ccf0:	d1e0      	bne.n	800ccb4 <_free_r+0x24>
 800ccf2:	6818      	ldr	r0, [r3, #0]
 800ccf4:	685b      	ldr	r3, [r3, #4]
 800ccf6:	1841      	adds	r1, r0, r1
 800ccf8:	6011      	str	r1, [r2, #0]
 800ccfa:	6053      	str	r3, [r2, #4]
 800ccfc:	e7da      	b.n	800ccb4 <_free_r+0x24>
 800ccfe:	42a0      	cmp	r0, r4
 800cd00:	d902      	bls.n	800cd08 <_free_r+0x78>
 800cd02:	230c      	movs	r3, #12
 800cd04:	602b      	str	r3, [r5, #0]
 800cd06:	e7d5      	b.n	800ccb4 <_free_r+0x24>
 800cd08:	6821      	ldr	r1, [r4, #0]
 800cd0a:	1860      	adds	r0, r4, r1
 800cd0c:	4283      	cmp	r3, r0
 800cd0e:	d103      	bne.n	800cd18 <_free_r+0x88>
 800cd10:	6818      	ldr	r0, [r3, #0]
 800cd12:	685b      	ldr	r3, [r3, #4]
 800cd14:	1841      	adds	r1, r0, r1
 800cd16:	6021      	str	r1, [r4, #0]
 800cd18:	6063      	str	r3, [r4, #4]
 800cd1a:	6054      	str	r4, [r2, #4]
 800cd1c:	e7ca      	b.n	800ccb4 <_free_r+0x24>
 800cd1e:	46c0      	nop			; (mov r8, r8)
 800cd20:	20000488 	.word	0x20000488

0800cd24 <_malloc_r>:
 800cd24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cd26:	2303      	movs	r3, #3
 800cd28:	1ccd      	adds	r5, r1, #3
 800cd2a:	439d      	bics	r5, r3
 800cd2c:	3508      	adds	r5, #8
 800cd2e:	0006      	movs	r6, r0
 800cd30:	2d0c      	cmp	r5, #12
 800cd32:	d21f      	bcs.n	800cd74 <_malloc_r+0x50>
 800cd34:	250c      	movs	r5, #12
 800cd36:	42a9      	cmp	r1, r5
 800cd38:	d81e      	bhi.n	800cd78 <_malloc_r+0x54>
 800cd3a:	0030      	movs	r0, r6
 800cd3c:	f000 f882 	bl	800ce44 <__malloc_lock>
 800cd40:	4925      	ldr	r1, [pc, #148]	; (800cdd8 <_malloc_r+0xb4>)
 800cd42:	680a      	ldr	r2, [r1, #0]
 800cd44:	0014      	movs	r4, r2
 800cd46:	2c00      	cmp	r4, #0
 800cd48:	d11a      	bne.n	800cd80 <_malloc_r+0x5c>
 800cd4a:	4f24      	ldr	r7, [pc, #144]	; (800cddc <_malloc_r+0xb8>)
 800cd4c:	683b      	ldr	r3, [r7, #0]
 800cd4e:	2b00      	cmp	r3, #0
 800cd50:	d104      	bne.n	800cd5c <_malloc_r+0x38>
 800cd52:	0021      	movs	r1, r4
 800cd54:	0030      	movs	r0, r6
 800cd56:	f000 f843 	bl	800cde0 <_sbrk_r>
 800cd5a:	6038      	str	r0, [r7, #0]
 800cd5c:	0029      	movs	r1, r5
 800cd5e:	0030      	movs	r0, r6
 800cd60:	f000 f83e 	bl	800cde0 <_sbrk_r>
 800cd64:	1c43      	adds	r3, r0, #1
 800cd66:	d12b      	bne.n	800cdc0 <_malloc_r+0x9c>
 800cd68:	230c      	movs	r3, #12
 800cd6a:	0030      	movs	r0, r6
 800cd6c:	6033      	str	r3, [r6, #0]
 800cd6e:	f000 f871 	bl	800ce54 <__malloc_unlock>
 800cd72:	e003      	b.n	800cd7c <_malloc_r+0x58>
 800cd74:	2d00      	cmp	r5, #0
 800cd76:	dade      	bge.n	800cd36 <_malloc_r+0x12>
 800cd78:	230c      	movs	r3, #12
 800cd7a:	6033      	str	r3, [r6, #0]
 800cd7c:	2000      	movs	r0, #0
 800cd7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cd80:	6823      	ldr	r3, [r4, #0]
 800cd82:	1b5b      	subs	r3, r3, r5
 800cd84:	d419      	bmi.n	800cdba <_malloc_r+0x96>
 800cd86:	2b0b      	cmp	r3, #11
 800cd88:	d903      	bls.n	800cd92 <_malloc_r+0x6e>
 800cd8a:	6023      	str	r3, [r4, #0]
 800cd8c:	18e4      	adds	r4, r4, r3
 800cd8e:	6025      	str	r5, [r4, #0]
 800cd90:	e003      	b.n	800cd9a <_malloc_r+0x76>
 800cd92:	6863      	ldr	r3, [r4, #4]
 800cd94:	42a2      	cmp	r2, r4
 800cd96:	d10e      	bne.n	800cdb6 <_malloc_r+0x92>
 800cd98:	600b      	str	r3, [r1, #0]
 800cd9a:	0030      	movs	r0, r6
 800cd9c:	f000 f85a 	bl	800ce54 <__malloc_unlock>
 800cda0:	0020      	movs	r0, r4
 800cda2:	2207      	movs	r2, #7
 800cda4:	300b      	adds	r0, #11
 800cda6:	1d23      	adds	r3, r4, #4
 800cda8:	4390      	bics	r0, r2
 800cdaa:	1ac2      	subs	r2, r0, r3
 800cdac:	4298      	cmp	r0, r3
 800cdae:	d0e6      	beq.n	800cd7e <_malloc_r+0x5a>
 800cdb0:	1a1b      	subs	r3, r3, r0
 800cdb2:	50a3      	str	r3, [r4, r2]
 800cdb4:	e7e3      	b.n	800cd7e <_malloc_r+0x5a>
 800cdb6:	6053      	str	r3, [r2, #4]
 800cdb8:	e7ef      	b.n	800cd9a <_malloc_r+0x76>
 800cdba:	0022      	movs	r2, r4
 800cdbc:	6864      	ldr	r4, [r4, #4]
 800cdbe:	e7c2      	b.n	800cd46 <_malloc_r+0x22>
 800cdc0:	2303      	movs	r3, #3
 800cdc2:	1cc4      	adds	r4, r0, #3
 800cdc4:	439c      	bics	r4, r3
 800cdc6:	42a0      	cmp	r0, r4
 800cdc8:	d0e1      	beq.n	800cd8e <_malloc_r+0x6a>
 800cdca:	1a21      	subs	r1, r4, r0
 800cdcc:	0030      	movs	r0, r6
 800cdce:	f000 f807 	bl	800cde0 <_sbrk_r>
 800cdd2:	1c43      	adds	r3, r0, #1
 800cdd4:	d1db      	bne.n	800cd8e <_malloc_r+0x6a>
 800cdd6:	e7c7      	b.n	800cd68 <_malloc_r+0x44>
 800cdd8:	20000488 	.word	0x20000488
 800cddc:	2000048c 	.word	0x2000048c

0800cde0 <_sbrk_r>:
 800cde0:	2300      	movs	r3, #0
 800cde2:	b570      	push	{r4, r5, r6, lr}
 800cde4:	4d06      	ldr	r5, [pc, #24]	; (800ce00 <_sbrk_r+0x20>)
 800cde6:	0004      	movs	r4, r0
 800cde8:	0008      	movs	r0, r1
 800cdea:	602b      	str	r3, [r5, #0]
 800cdec:	f7f5 fa52 	bl	8002294 <_sbrk>
 800cdf0:	1c43      	adds	r3, r0, #1
 800cdf2:	d103      	bne.n	800cdfc <_sbrk_r+0x1c>
 800cdf4:	682b      	ldr	r3, [r5, #0]
 800cdf6:	2b00      	cmp	r3, #0
 800cdf8:	d000      	beq.n	800cdfc <_sbrk_r+0x1c>
 800cdfa:	6023      	str	r3, [r4, #0]
 800cdfc:	bd70      	pop	{r4, r5, r6, pc}
 800cdfe:	46c0      	nop			; (mov r8, r8)
 800ce00:	2000162c 	.word	0x2000162c

0800ce04 <siprintf>:
 800ce04:	b40e      	push	{r1, r2, r3}
 800ce06:	b500      	push	{lr}
 800ce08:	490b      	ldr	r1, [pc, #44]	; (800ce38 <siprintf+0x34>)
 800ce0a:	b09c      	sub	sp, #112	; 0x70
 800ce0c:	ab1d      	add	r3, sp, #116	; 0x74
 800ce0e:	9002      	str	r0, [sp, #8]
 800ce10:	9006      	str	r0, [sp, #24]
 800ce12:	9107      	str	r1, [sp, #28]
 800ce14:	9104      	str	r1, [sp, #16]
 800ce16:	4809      	ldr	r0, [pc, #36]	; (800ce3c <siprintf+0x38>)
 800ce18:	4909      	ldr	r1, [pc, #36]	; (800ce40 <siprintf+0x3c>)
 800ce1a:	cb04      	ldmia	r3!, {r2}
 800ce1c:	9105      	str	r1, [sp, #20]
 800ce1e:	6800      	ldr	r0, [r0, #0]
 800ce20:	a902      	add	r1, sp, #8
 800ce22:	9301      	str	r3, [sp, #4]
 800ce24:	f000 f880 	bl	800cf28 <_svfiprintf_r>
 800ce28:	2300      	movs	r3, #0
 800ce2a:	9a02      	ldr	r2, [sp, #8]
 800ce2c:	7013      	strb	r3, [r2, #0]
 800ce2e:	b01c      	add	sp, #112	; 0x70
 800ce30:	bc08      	pop	{r3}
 800ce32:	b003      	add	sp, #12
 800ce34:	4718      	bx	r3
 800ce36:	46c0      	nop			; (mov r8, r8)
 800ce38:	7fffffff 	.word	0x7fffffff
 800ce3c:	2000017c 	.word	0x2000017c
 800ce40:	ffff0208 	.word	0xffff0208

0800ce44 <__malloc_lock>:
 800ce44:	b510      	push	{r4, lr}
 800ce46:	4802      	ldr	r0, [pc, #8]	; (800ce50 <__malloc_lock+0xc>)
 800ce48:	f000 faf0 	bl	800d42c <__retarget_lock_acquire_recursive>
 800ce4c:	bd10      	pop	{r4, pc}
 800ce4e:	46c0      	nop			; (mov r8, r8)
 800ce50:	20001634 	.word	0x20001634

0800ce54 <__malloc_unlock>:
 800ce54:	b510      	push	{r4, lr}
 800ce56:	4802      	ldr	r0, [pc, #8]	; (800ce60 <__malloc_unlock+0xc>)
 800ce58:	f000 fae9 	bl	800d42e <__retarget_lock_release_recursive>
 800ce5c:	bd10      	pop	{r4, pc}
 800ce5e:	46c0      	nop			; (mov r8, r8)
 800ce60:	20001634 	.word	0x20001634

0800ce64 <__ssputs_r>:
 800ce64:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ce66:	688e      	ldr	r6, [r1, #8]
 800ce68:	b085      	sub	sp, #20
 800ce6a:	0007      	movs	r7, r0
 800ce6c:	000c      	movs	r4, r1
 800ce6e:	9203      	str	r2, [sp, #12]
 800ce70:	9301      	str	r3, [sp, #4]
 800ce72:	429e      	cmp	r6, r3
 800ce74:	d83c      	bhi.n	800cef0 <__ssputs_r+0x8c>
 800ce76:	2390      	movs	r3, #144	; 0x90
 800ce78:	898a      	ldrh	r2, [r1, #12]
 800ce7a:	00db      	lsls	r3, r3, #3
 800ce7c:	421a      	tst	r2, r3
 800ce7e:	d034      	beq.n	800ceea <__ssputs_r+0x86>
 800ce80:	2503      	movs	r5, #3
 800ce82:	6909      	ldr	r1, [r1, #16]
 800ce84:	6823      	ldr	r3, [r4, #0]
 800ce86:	1a5b      	subs	r3, r3, r1
 800ce88:	9302      	str	r3, [sp, #8]
 800ce8a:	6963      	ldr	r3, [r4, #20]
 800ce8c:	9802      	ldr	r0, [sp, #8]
 800ce8e:	435d      	muls	r5, r3
 800ce90:	0feb      	lsrs	r3, r5, #31
 800ce92:	195d      	adds	r5, r3, r5
 800ce94:	9b01      	ldr	r3, [sp, #4]
 800ce96:	106d      	asrs	r5, r5, #1
 800ce98:	3301      	adds	r3, #1
 800ce9a:	181b      	adds	r3, r3, r0
 800ce9c:	42ab      	cmp	r3, r5
 800ce9e:	d900      	bls.n	800cea2 <__ssputs_r+0x3e>
 800cea0:	001d      	movs	r5, r3
 800cea2:	0553      	lsls	r3, r2, #21
 800cea4:	d532      	bpl.n	800cf0c <__ssputs_r+0xa8>
 800cea6:	0029      	movs	r1, r5
 800cea8:	0038      	movs	r0, r7
 800ceaa:	f7ff ff3b 	bl	800cd24 <_malloc_r>
 800ceae:	1e06      	subs	r6, r0, #0
 800ceb0:	d109      	bne.n	800cec6 <__ssputs_r+0x62>
 800ceb2:	230c      	movs	r3, #12
 800ceb4:	603b      	str	r3, [r7, #0]
 800ceb6:	2340      	movs	r3, #64	; 0x40
 800ceb8:	2001      	movs	r0, #1
 800ceba:	89a2      	ldrh	r2, [r4, #12]
 800cebc:	4240      	negs	r0, r0
 800cebe:	4313      	orrs	r3, r2
 800cec0:	81a3      	strh	r3, [r4, #12]
 800cec2:	b005      	add	sp, #20
 800cec4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cec6:	9a02      	ldr	r2, [sp, #8]
 800cec8:	6921      	ldr	r1, [r4, #16]
 800ceca:	f7ff fecf 	bl	800cc6c <memcpy>
 800cece:	89a3      	ldrh	r3, [r4, #12]
 800ced0:	4a14      	ldr	r2, [pc, #80]	; (800cf24 <__ssputs_r+0xc0>)
 800ced2:	401a      	ands	r2, r3
 800ced4:	2380      	movs	r3, #128	; 0x80
 800ced6:	4313      	orrs	r3, r2
 800ced8:	81a3      	strh	r3, [r4, #12]
 800ceda:	9b02      	ldr	r3, [sp, #8]
 800cedc:	6126      	str	r6, [r4, #16]
 800cede:	18f6      	adds	r6, r6, r3
 800cee0:	6026      	str	r6, [r4, #0]
 800cee2:	6165      	str	r5, [r4, #20]
 800cee4:	9e01      	ldr	r6, [sp, #4]
 800cee6:	1aed      	subs	r5, r5, r3
 800cee8:	60a5      	str	r5, [r4, #8]
 800ceea:	9b01      	ldr	r3, [sp, #4]
 800ceec:	429e      	cmp	r6, r3
 800ceee:	d900      	bls.n	800cef2 <__ssputs_r+0x8e>
 800cef0:	9e01      	ldr	r6, [sp, #4]
 800cef2:	0032      	movs	r2, r6
 800cef4:	9903      	ldr	r1, [sp, #12]
 800cef6:	6820      	ldr	r0, [r4, #0]
 800cef8:	f000 faa5 	bl	800d446 <memmove>
 800cefc:	68a3      	ldr	r3, [r4, #8]
 800cefe:	2000      	movs	r0, #0
 800cf00:	1b9b      	subs	r3, r3, r6
 800cf02:	60a3      	str	r3, [r4, #8]
 800cf04:	6823      	ldr	r3, [r4, #0]
 800cf06:	199e      	adds	r6, r3, r6
 800cf08:	6026      	str	r6, [r4, #0]
 800cf0a:	e7da      	b.n	800cec2 <__ssputs_r+0x5e>
 800cf0c:	002a      	movs	r2, r5
 800cf0e:	0038      	movs	r0, r7
 800cf10:	f000 faac 	bl	800d46c <_realloc_r>
 800cf14:	1e06      	subs	r6, r0, #0
 800cf16:	d1e0      	bne.n	800ceda <__ssputs_r+0x76>
 800cf18:	0038      	movs	r0, r7
 800cf1a:	6921      	ldr	r1, [r4, #16]
 800cf1c:	f7ff feb8 	bl	800cc90 <_free_r>
 800cf20:	e7c7      	b.n	800ceb2 <__ssputs_r+0x4e>
 800cf22:	46c0      	nop			; (mov r8, r8)
 800cf24:	fffffb7f 	.word	0xfffffb7f

0800cf28 <_svfiprintf_r>:
 800cf28:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cf2a:	b0a1      	sub	sp, #132	; 0x84
 800cf2c:	9003      	str	r0, [sp, #12]
 800cf2e:	001d      	movs	r5, r3
 800cf30:	898b      	ldrh	r3, [r1, #12]
 800cf32:	000f      	movs	r7, r1
 800cf34:	0016      	movs	r6, r2
 800cf36:	061b      	lsls	r3, r3, #24
 800cf38:	d511      	bpl.n	800cf5e <_svfiprintf_r+0x36>
 800cf3a:	690b      	ldr	r3, [r1, #16]
 800cf3c:	2b00      	cmp	r3, #0
 800cf3e:	d10e      	bne.n	800cf5e <_svfiprintf_r+0x36>
 800cf40:	2140      	movs	r1, #64	; 0x40
 800cf42:	f7ff feef 	bl	800cd24 <_malloc_r>
 800cf46:	6038      	str	r0, [r7, #0]
 800cf48:	6138      	str	r0, [r7, #16]
 800cf4a:	2800      	cmp	r0, #0
 800cf4c:	d105      	bne.n	800cf5a <_svfiprintf_r+0x32>
 800cf4e:	230c      	movs	r3, #12
 800cf50:	9a03      	ldr	r2, [sp, #12]
 800cf52:	3801      	subs	r0, #1
 800cf54:	6013      	str	r3, [r2, #0]
 800cf56:	b021      	add	sp, #132	; 0x84
 800cf58:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cf5a:	2340      	movs	r3, #64	; 0x40
 800cf5c:	617b      	str	r3, [r7, #20]
 800cf5e:	2300      	movs	r3, #0
 800cf60:	ac08      	add	r4, sp, #32
 800cf62:	6163      	str	r3, [r4, #20]
 800cf64:	3320      	adds	r3, #32
 800cf66:	7663      	strb	r3, [r4, #25]
 800cf68:	3310      	adds	r3, #16
 800cf6a:	76a3      	strb	r3, [r4, #26]
 800cf6c:	9507      	str	r5, [sp, #28]
 800cf6e:	0035      	movs	r5, r6
 800cf70:	782b      	ldrb	r3, [r5, #0]
 800cf72:	2b00      	cmp	r3, #0
 800cf74:	d001      	beq.n	800cf7a <_svfiprintf_r+0x52>
 800cf76:	2b25      	cmp	r3, #37	; 0x25
 800cf78:	d147      	bne.n	800d00a <_svfiprintf_r+0xe2>
 800cf7a:	1bab      	subs	r3, r5, r6
 800cf7c:	9305      	str	r3, [sp, #20]
 800cf7e:	42b5      	cmp	r5, r6
 800cf80:	d00c      	beq.n	800cf9c <_svfiprintf_r+0x74>
 800cf82:	0032      	movs	r2, r6
 800cf84:	0039      	movs	r1, r7
 800cf86:	9803      	ldr	r0, [sp, #12]
 800cf88:	f7ff ff6c 	bl	800ce64 <__ssputs_r>
 800cf8c:	1c43      	adds	r3, r0, #1
 800cf8e:	d100      	bne.n	800cf92 <_svfiprintf_r+0x6a>
 800cf90:	e0ae      	b.n	800d0f0 <_svfiprintf_r+0x1c8>
 800cf92:	6962      	ldr	r2, [r4, #20]
 800cf94:	9b05      	ldr	r3, [sp, #20]
 800cf96:	4694      	mov	ip, r2
 800cf98:	4463      	add	r3, ip
 800cf9a:	6163      	str	r3, [r4, #20]
 800cf9c:	782b      	ldrb	r3, [r5, #0]
 800cf9e:	2b00      	cmp	r3, #0
 800cfa0:	d100      	bne.n	800cfa4 <_svfiprintf_r+0x7c>
 800cfa2:	e0a5      	b.n	800d0f0 <_svfiprintf_r+0x1c8>
 800cfa4:	2201      	movs	r2, #1
 800cfa6:	2300      	movs	r3, #0
 800cfa8:	4252      	negs	r2, r2
 800cfaa:	6062      	str	r2, [r4, #4]
 800cfac:	a904      	add	r1, sp, #16
 800cfae:	3254      	adds	r2, #84	; 0x54
 800cfb0:	1852      	adds	r2, r2, r1
 800cfb2:	1c6e      	adds	r6, r5, #1
 800cfb4:	6023      	str	r3, [r4, #0]
 800cfb6:	60e3      	str	r3, [r4, #12]
 800cfb8:	60a3      	str	r3, [r4, #8]
 800cfba:	7013      	strb	r3, [r2, #0]
 800cfbc:	65a3      	str	r3, [r4, #88]	; 0x58
 800cfbe:	2205      	movs	r2, #5
 800cfc0:	7831      	ldrb	r1, [r6, #0]
 800cfc2:	4854      	ldr	r0, [pc, #336]	; (800d114 <_svfiprintf_r+0x1ec>)
 800cfc4:	f000 fa34 	bl	800d430 <memchr>
 800cfc8:	1c75      	adds	r5, r6, #1
 800cfca:	2800      	cmp	r0, #0
 800cfcc:	d11f      	bne.n	800d00e <_svfiprintf_r+0xe6>
 800cfce:	6822      	ldr	r2, [r4, #0]
 800cfd0:	06d3      	lsls	r3, r2, #27
 800cfd2:	d504      	bpl.n	800cfde <_svfiprintf_r+0xb6>
 800cfd4:	2353      	movs	r3, #83	; 0x53
 800cfd6:	a904      	add	r1, sp, #16
 800cfd8:	185b      	adds	r3, r3, r1
 800cfda:	2120      	movs	r1, #32
 800cfdc:	7019      	strb	r1, [r3, #0]
 800cfde:	0713      	lsls	r3, r2, #28
 800cfe0:	d504      	bpl.n	800cfec <_svfiprintf_r+0xc4>
 800cfe2:	2353      	movs	r3, #83	; 0x53
 800cfe4:	a904      	add	r1, sp, #16
 800cfe6:	185b      	adds	r3, r3, r1
 800cfe8:	212b      	movs	r1, #43	; 0x2b
 800cfea:	7019      	strb	r1, [r3, #0]
 800cfec:	7833      	ldrb	r3, [r6, #0]
 800cfee:	2b2a      	cmp	r3, #42	; 0x2a
 800cff0:	d016      	beq.n	800d020 <_svfiprintf_r+0xf8>
 800cff2:	0035      	movs	r5, r6
 800cff4:	2100      	movs	r1, #0
 800cff6:	200a      	movs	r0, #10
 800cff8:	68e3      	ldr	r3, [r4, #12]
 800cffa:	782a      	ldrb	r2, [r5, #0]
 800cffc:	1c6e      	adds	r6, r5, #1
 800cffe:	3a30      	subs	r2, #48	; 0x30
 800d000:	2a09      	cmp	r2, #9
 800d002:	d94e      	bls.n	800d0a2 <_svfiprintf_r+0x17a>
 800d004:	2900      	cmp	r1, #0
 800d006:	d111      	bne.n	800d02c <_svfiprintf_r+0x104>
 800d008:	e017      	b.n	800d03a <_svfiprintf_r+0x112>
 800d00a:	3501      	adds	r5, #1
 800d00c:	e7b0      	b.n	800cf70 <_svfiprintf_r+0x48>
 800d00e:	4b41      	ldr	r3, [pc, #260]	; (800d114 <_svfiprintf_r+0x1ec>)
 800d010:	6822      	ldr	r2, [r4, #0]
 800d012:	1ac0      	subs	r0, r0, r3
 800d014:	2301      	movs	r3, #1
 800d016:	4083      	lsls	r3, r0
 800d018:	4313      	orrs	r3, r2
 800d01a:	002e      	movs	r6, r5
 800d01c:	6023      	str	r3, [r4, #0]
 800d01e:	e7ce      	b.n	800cfbe <_svfiprintf_r+0x96>
 800d020:	9b07      	ldr	r3, [sp, #28]
 800d022:	1d19      	adds	r1, r3, #4
 800d024:	681b      	ldr	r3, [r3, #0]
 800d026:	9107      	str	r1, [sp, #28]
 800d028:	2b00      	cmp	r3, #0
 800d02a:	db01      	blt.n	800d030 <_svfiprintf_r+0x108>
 800d02c:	930b      	str	r3, [sp, #44]	; 0x2c
 800d02e:	e004      	b.n	800d03a <_svfiprintf_r+0x112>
 800d030:	425b      	negs	r3, r3
 800d032:	60e3      	str	r3, [r4, #12]
 800d034:	2302      	movs	r3, #2
 800d036:	4313      	orrs	r3, r2
 800d038:	6023      	str	r3, [r4, #0]
 800d03a:	782b      	ldrb	r3, [r5, #0]
 800d03c:	2b2e      	cmp	r3, #46	; 0x2e
 800d03e:	d10a      	bne.n	800d056 <_svfiprintf_r+0x12e>
 800d040:	786b      	ldrb	r3, [r5, #1]
 800d042:	2b2a      	cmp	r3, #42	; 0x2a
 800d044:	d135      	bne.n	800d0b2 <_svfiprintf_r+0x18a>
 800d046:	9b07      	ldr	r3, [sp, #28]
 800d048:	3502      	adds	r5, #2
 800d04a:	1d1a      	adds	r2, r3, #4
 800d04c:	681b      	ldr	r3, [r3, #0]
 800d04e:	9207      	str	r2, [sp, #28]
 800d050:	2b00      	cmp	r3, #0
 800d052:	db2b      	blt.n	800d0ac <_svfiprintf_r+0x184>
 800d054:	9309      	str	r3, [sp, #36]	; 0x24
 800d056:	4e30      	ldr	r6, [pc, #192]	; (800d118 <_svfiprintf_r+0x1f0>)
 800d058:	2203      	movs	r2, #3
 800d05a:	0030      	movs	r0, r6
 800d05c:	7829      	ldrb	r1, [r5, #0]
 800d05e:	f000 f9e7 	bl	800d430 <memchr>
 800d062:	2800      	cmp	r0, #0
 800d064:	d006      	beq.n	800d074 <_svfiprintf_r+0x14c>
 800d066:	2340      	movs	r3, #64	; 0x40
 800d068:	1b80      	subs	r0, r0, r6
 800d06a:	4083      	lsls	r3, r0
 800d06c:	6822      	ldr	r2, [r4, #0]
 800d06e:	3501      	adds	r5, #1
 800d070:	4313      	orrs	r3, r2
 800d072:	6023      	str	r3, [r4, #0]
 800d074:	7829      	ldrb	r1, [r5, #0]
 800d076:	2206      	movs	r2, #6
 800d078:	4828      	ldr	r0, [pc, #160]	; (800d11c <_svfiprintf_r+0x1f4>)
 800d07a:	1c6e      	adds	r6, r5, #1
 800d07c:	7621      	strb	r1, [r4, #24]
 800d07e:	f000 f9d7 	bl	800d430 <memchr>
 800d082:	2800      	cmp	r0, #0
 800d084:	d03c      	beq.n	800d100 <_svfiprintf_r+0x1d8>
 800d086:	4b26      	ldr	r3, [pc, #152]	; (800d120 <_svfiprintf_r+0x1f8>)
 800d088:	2b00      	cmp	r3, #0
 800d08a:	d125      	bne.n	800d0d8 <_svfiprintf_r+0x1b0>
 800d08c:	2207      	movs	r2, #7
 800d08e:	9b07      	ldr	r3, [sp, #28]
 800d090:	3307      	adds	r3, #7
 800d092:	4393      	bics	r3, r2
 800d094:	3308      	adds	r3, #8
 800d096:	9307      	str	r3, [sp, #28]
 800d098:	6963      	ldr	r3, [r4, #20]
 800d09a:	9a04      	ldr	r2, [sp, #16]
 800d09c:	189b      	adds	r3, r3, r2
 800d09e:	6163      	str	r3, [r4, #20]
 800d0a0:	e765      	b.n	800cf6e <_svfiprintf_r+0x46>
 800d0a2:	4343      	muls	r3, r0
 800d0a4:	0035      	movs	r5, r6
 800d0a6:	2101      	movs	r1, #1
 800d0a8:	189b      	adds	r3, r3, r2
 800d0aa:	e7a6      	b.n	800cffa <_svfiprintf_r+0xd2>
 800d0ac:	2301      	movs	r3, #1
 800d0ae:	425b      	negs	r3, r3
 800d0b0:	e7d0      	b.n	800d054 <_svfiprintf_r+0x12c>
 800d0b2:	2300      	movs	r3, #0
 800d0b4:	200a      	movs	r0, #10
 800d0b6:	001a      	movs	r2, r3
 800d0b8:	3501      	adds	r5, #1
 800d0ba:	6063      	str	r3, [r4, #4]
 800d0bc:	7829      	ldrb	r1, [r5, #0]
 800d0be:	1c6e      	adds	r6, r5, #1
 800d0c0:	3930      	subs	r1, #48	; 0x30
 800d0c2:	2909      	cmp	r1, #9
 800d0c4:	d903      	bls.n	800d0ce <_svfiprintf_r+0x1a6>
 800d0c6:	2b00      	cmp	r3, #0
 800d0c8:	d0c5      	beq.n	800d056 <_svfiprintf_r+0x12e>
 800d0ca:	9209      	str	r2, [sp, #36]	; 0x24
 800d0cc:	e7c3      	b.n	800d056 <_svfiprintf_r+0x12e>
 800d0ce:	4342      	muls	r2, r0
 800d0d0:	0035      	movs	r5, r6
 800d0d2:	2301      	movs	r3, #1
 800d0d4:	1852      	adds	r2, r2, r1
 800d0d6:	e7f1      	b.n	800d0bc <_svfiprintf_r+0x194>
 800d0d8:	ab07      	add	r3, sp, #28
 800d0da:	9300      	str	r3, [sp, #0]
 800d0dc:	003a      	movs	r2, r7
 800d0de:	0021      	movs	r1, r4
 800d0e0:	4b10      	ldr	r3, [pc, #64]	; (800d124 <_svfiprintf_r+0x1fc>)
 800d0e2:	9803      	ldr	r0, [sp, #12]
 800d0e4:	e000      	b.n	800d0e8 <_svfiprintf_r+0x1c0>
 800d0e6:	bf00      	nop
 800d0e8:	9004      	str	r0, [sp, #16]
 800d0ea:	9b04      	ldr	r3, [sp, #16]
 800d0ec:	3301      	adds	r3, #1
 800d0ee:	d1d3      	bne.n	800d098 <_svfiprintf_r+0x170>
 800d0f0:	89bb      	ldrh	r3, [r7, #12]
 800d0f2:	980d      	ldr	r0, [sp, #52]	; 0x34
 800d0f4:	065b      	lsls	r3, r3, #25
 800d0f6:	d400      	bmi.n	800d0fa <_svfiprintf_r+0x1d2>
 800d0f8:	e72d      	b.n	800cf56 <_svfiprintf_r+0x2e>
 800d0fa:	2001      	movs	r0, #1
 800d0fc:	4240      	negs	r0, r0
 800d0fe:	e72a      	b.n	800cf56 <_svfiprintf_r+0x2e>
 800d100:	ab07      	add	r3, sp, #28
 800d102:	9300      	str	r3, [sp, #0]
 800d104:	003a      	movs	r2, r7
 800d106:	0021      	movs	r1, r4
 800d108:	4b06      	ldr	r3, [pc, #24]	; (800d124 <_svfiprintf_r+0x1fc>)
 800d10a:	9803      	ldr	r0, [sp, #12]
 800d10c:	f000 f87c 	bl	800d208 <_printf_i>
 800d110:	e7ea      	b.n	800d0e8 <_svfiprintf_r+0x1c0>
 800d112:	46c0      	nop			; (mov r8, r8)
 800d114:	0800d71c 	.word	0x0800d71c
 800d118:	0800d722 	.word	0x0800d722
 800d11c:	0800d726 	.word	0x0800d726
 800d120:	00000000 	.word	0x00000000
 800d124:	0800ce65 	.word	0x0800ce65

0800d128 <_printf_common>:
 800d128:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d12a:	0015      	movs	r5, r2
 800d12c:	9301      	str	r3, [sp, #4]
 800d12e:	688a      	ldr	r2, [r1, #8]
 800d130:	690b      	ldr	r3, [r1, #16]
 800d132:	000c      	movs	r4, r1
 800d134:	9000      	str	r0, [sp, #0]
 800d136:	4293      	cmp	r3, r2
 800d138:	da00      	bge.n	800d13c <_printf_common+0x14>
 800d13a:	0013      	movs	r3, r2
 800d13c:	0022      	movs	r2, r4
 800d13e:	602b      	str	r3, [r5, #0]
 800d140:	3243      	adds	r2, #67	; 0x43
 800d142:	7812      	ldrb	r2, [r2, #0]
 800d144:	2a00      	cmp	r2, #0
 800d146:	d001      	beq.n	800d14c <_printf_common+0x24>
 800d148:	3301      	adds	r3, #1
 800d14a:	602b      	str	r3, [r5, #0]
 800d14c:	6823      	ldr	r3, [r4, #0]
 800d14e:	069b      	lsls	r3, r3, #26
 800d150:	d502      	bpl.n	800d158 <_printf_common+0x30>
 800d152:	682b      	ldr	r3, [r5, #0]
 800d154:	3302      	adds	r3, #2
 800d156:	602b      	str	r3, [r5, #0]
 800d158:	6822      	ldr	r2, [r4, #0]
 800d15a:	2306      	movs	r3, #6
 800d15c:	0017      	movs	r7, r2
 800d15e:	401f      	ands	r7, r3
 800d160:	421a      	tst	r2, r3
 800d162:	d027      	beq.n	800d1b4 <_printf_common+0x8c>
 800d164:	0023      	movs	r3, r4
 800d166:	3343      	adds	r3, #67	; 0x43
 800d168:	781b      	ldrb	r3, [r3, #0]
 800d16a:	1e5a      	subs	r2, r3, #1
 800d16c:	4193      	sbcs	r3, r2
 800d16e:	6822      	ldr	r2, [r4, #0]
 800d170:	0692      	lsls	r2, r2, #26
 800d172:	d430      	bmi.n	800d1d6 <_printf_common+0xae>
 800d174:	0022      	movs	r2, r4
 800d176:	9901      	ldr	r1, [sp, #4]
 800d178:	9800      	ldr	r0, [sp, #0]
 800d17a:	9e08      	ldr	r6, [sp, #32]
 800d17c:	3243      	adds	r2, #67	; 0x43
 800d17e:	47b0      	blx	r6
 800d180:	1c43      	adds	r3, r0, #1
 800d182:	d025      	beq.n	800d1d0 <_printf_common+0xa8>
 800d184:	2306      	movs	r3, #6
 800d186:	6820      	ldr	r0, [r4, #0]
 800d188:	682a      	ldr	r2, [r5, #0]
 800d18a:	68e1      	ldr	r1, [r4, #12]
 800d18c:	2500      	movs	r5, #0
 800d18e:	4003      	ands	r3, r0
 800d190:	2b04      	cmp	r3, #4
 800d192:	d103      	bne.n	800d19c <_printf_common+0x74>
 800d194:	1a8d      	subs	r5, r1, r2
 800d196:	43eb      	mvns	r3, r5
 800d198:	17db      	asrs	r3, r3, #31
 800d19a:	401d      	ands	r5, r3
 800d19c:	68a3      	ldr	r3, [r4, #8]
 800d19e:	6922      	ldr	r2, [r4, #16]
 800d1a0:	4293      	cmp	r3, r2
 800d1a2:	dd01      	ble.n	800d1a8 <_printf_common+0x80>
 800d1a4:	1a9b      	subs	r3, r3, r2
 800d1a6:	18ed      	adds	r5, r5, r3
 800d1a8:	2700      	movs	r7, #0
 800d1aa:	42bd      	cmp	r5, r7
 800d1ac:	d120      	bne.n	800d1f0 <_printf_common+0xc8>
 800d1ae:	2000      	movs	r0, #0
 800d1b0:	e010      	b.n	800d1d4 <_printf_common+0xac>
 800d1b2:	3701      	adds	r7, #1
 800d1b4:	68e3      	ldr	r3, [r4, #12]
 800d1b6:	682a      	ldr	r2, [r5, #0]
 800d1b8:	1a9b      	subs	r3, r3, r2
 800d1ba:	42bb      	cmp	r3, r7
 800d1bc:	ddd2      	ble.n	800d164 <_printf_common+0x3c>
 800d1be:	0022      	movs	r2, r4
 800d1c0:	2301      	movs	r3, #1
 800d1c2:	9901      	ldr	r1, [sp, #4]
 800d1c4:	9800      	ldr	r0, [sp, #0]
 800d1c6:	9e08      	ldr	r6, [sp, #32]
 800d1c8:	3219      	adds	r2, #25
 800d1ca:	47b0      	blx	r6
 800d1cc:	1c43      	adds	r3, r0, #1
 800d1ce:	d1f0      	bne.n	800d1b2 <_printf_common+0x8a>
 800d1d0:	2001      	movs	r0, #1
 800d1d2:	4240      	negs	r0, r0
 800d1d4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800d1d6:	2030      	movs	r0, #48	; 0x30
 800d1d8:	18e1      	adds	r1, r4, r3
 800d1da:	3143      	adds	r1, #67	; 0x43
 800d1dc:	7008      	strb	r0, [r1, #0]
 800d1de:	0021      	movs	r1, r4
 800d1e0:	1c5a      	adds	r2, r3, #1
 800d1e2:	3145      	adds	r1, #69	; 0x45
 800d1e4:	7809      	ldrb	r1, [r1, #0]
 800d1e6:	18a2      	adds	r2, r4, r2
 800d1e8:	3243      	adds	r2, #67	; 0x43
 800d1ea:	3302      	adds	r3, #2
 800d1ec:	7011      	strb	r1, [r2, #0]
 800d1ee:	e7c1      	b.n	800d174 <_printf_common+0x4c>
 800d1f0:	0022      	movs	r2, r4
 800d1f2:	2301      	movs	r3, #1
 800d1f4:	9901      	ldr	r1, [sp, #4]
 800d1f6:	9800      	ldr	r0, [sp, #0]
 800d1f8:	9e08      	ldr	r6, [sp, #32]
 800d1fa:	321a      	adds	r2, #26
 800d1fc:	47b0      	blx	r6
 800d1fe:	1c43      	adds	r3, r0, #1
 800d200:	d0e6      	beq.n	800d1d0 <_printf_common+0xa8>
 800d202:	3701      	adds	r7, #1
 800d204:	e7d1      	b.n	800d1aa <_printf_common+0x82>
	...

0800d208 <_printf_i>:
 800d208:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d20a:	b08b      	sub	sp, #44	; 0x2c
 800d20c:	9206      	str	r2, [sp, #24]
 800d20e:	000a      	movs	r2, r1
 800d210:	3243      	adds	r2, #67	; 0x43
 800d212:	9307      	str	r3, [sp, #28]
 800d214:	9005      	str	r0, [sp, #20]
 800d216:	9204      	str	r2, [sp, #16]
 800d218:	7e0a      	ldrb	r2, [r1, #24]
 800d21a:	000c      	movs	r4, r1
 800d21c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800d21e:	2a78      	cmp	r2, #120	; 0x78
 800d220:	d806      	bhi.n	800d230 <_printf_i+0x28>
 800d222:	2a62      	cmp	r2, #98	; 0x62
 800d224:	d808      	bhi.n	800d238 <_printf_i+0x30>
 800d226:	2a00      	cmp	r2, #0
 800d228:	d100      	bne.n	800d22c <_printf_i+0x24>
 800d22a:	e0c0      	b.n	800d3ae <_printf_i+0x1a6>
 800d22c:	2a58      	cmp	r2, #88	; 0x58
 800d22e:	d052      	beq.n	800d2d6 <_printf_i+0xce>
 800d230:	0026      	movs	r6, r4
 800d232:	3642      	adds	r6, #66	; 0x42
 800d234:	7032      	strb	r2, [r6, #0]
 800d236:	e022      	b.n	800d27e <_printf_i+0x76>
 800d238:	0010      	movs	r0, r2
 800d23a:	3863      	subs	r0, #99	; 0x63
 800d23c:	2815      	cmp	r0, #21
 800d23e:	d8f7      	bhi.n	800d230 <_printf_i+0x28>
 800d240:	f7f2 ff6a 	bl	8000118 <__gnu_thumb1_case_shi>
 800d244:	001f0016 	.word	0x001f0016
 800d248:	fff6fff6 	.word	0xfff6fff6
 800d24c:	fff6fff6 	.word	0xfff6fff6
 800d250:	fff6001f 	.word	0xfff6001f
 800d254:	fff6fff6 	.word	0xfff6fff6
 800d258:	00a8fff6 	.word	0x00a8fff6
 800d25c:	009a0036 	.word	0x009a0036
 800d260:	fff6fff6 	.word	0xfff6fff6
 800d264:	fff600b9 	.word	0xfff600b9
 800d268:	fff60036 	.word	0xfff60036
 800d26c:	009efff6 	.word	0x009efff6
 800d270:	0026      	movs	r6, r4
 800d272:	681a      	ldr	r2, [r3, #0]
 800d274:	3642      	adds	r6, #66	; 0x42
 800d276:	1d11      	adds	r1, r2, #4
 800d278:	6019      	str	r1, [r3, #0]
 800d27a:	6813      	ldr	r3, [r2, #0]
 800d27c:	7033      	strb	r3, [r6, #0]
 800d27e:	2301      	movs	r3, #1
 800d280:	e0a7      	b.n	800d3d2 <_printf_i+0x1ca>
 800d282:	6808      	ldr	r0, [r1, #0]
 800d284:	6819      	ldr	r1, [r3, #0]
 800d286:	1d0a      	adds	r2, r1, #4
 800d288:	0605      	lsls	r5, r0, #24
 800d28a:	d50b      	bpl.n	800d2a4 <_printf_i+0x9c>
 800d28c:	680d      	ldr	r5, [r1, #0]
 800d28e:	601a      	str	r2, [r3, #0]
 800d290:	2d00      	cmp	r5, #0
 800d292:	da03      	bge.n	800d29c <_printf_i+0x94>
 800d294:	232d      	movs	r3, #45	; 0x2d
 800d296:	9a04      	ldr	r2, [sp, #16]
 800d298:	426d      	negs	r5, r5
 800d29a:	7013      	strb	r3, [r2, #0]
 800d29c:	4b61      	ldr	r3, [pc, #388]	; (800d424 <_printf_i+0x21c>)
 800d29e:	270a      	movs	r7, #10
 800d2a0:	9303      	str	r3, [sp, #12]
 800d2a2:	e032      	b.n	800d30a <_printf_i+0x102>
 800d2a4:	680d      	ldr	r5, [r1, #0]
 800d2a6:	601a      	str	r2, [r3, #0]
 800d2a8:	0641      	lsls	r1, r0, #25
 800d2aa:	d5f1      	bpl.n	800d290 <_printf_i+0x88>
 800d2ac:	b22d      	sxth	r5, r5
 800d2ae:	e7ef      	b.n	800d290 <_printf_i+0x88>
 800d2b0:	680d      	ldr	r5, [r1, #0]
 800d2b2:	6819      	ldr	r1, [r3, #0]
 800d2b4:	1d08      	adds	r0, r1, #4
 800d2b6:	6018      	str	r0, [r3, #0]
 800d2b8:	062e      	lsls	r6, r5, #24
 800d2ba:	d501      	bpl.n	800d2c0 <_printf_i+0xb8>
 800d2bc:	680d      	ldr	r5, [r1, #0]
 800d2be:	e003      	b.n	800d2c8 <_printf_i+0xc0>
 800d2c0:	066d      	lsls	r5, r5, #25
 800d2c2:	d5fb      	bpl.n	800d2bc <_printf_i+0xb4>
 800d2c4:	680d      	ldr	r5, [r1, #0]
 800d2c6:	b2ad      	uxth	r5, r5
 800d2c8:	4b56      	ldr	r3, [pc, #344]	; (800d424 <_printf_i+0x21c>)
 800d2ca:	270a      	movs	r7, #10
 800d2cc:	9303      	str	r3, [sp, #12]
 800d2ce:	2a6f      	cmp	r2, #111	; 0x6f
 800d2d0:	d117      	bne.n	800d302 <_printf_i+0xfa>
 800d2d2:	2708      	movs	r7, #8
 800d2d4:	e015      	b.n	800d302 <_printf_i+0xfa>
 800d2d6:	3145      	adds	r1, #69	; 0x45
 800d2d8:	700a      	strb	r2, [r1, #0]
 800d2da:	4a52      	ldr	r2, [pc, #328]	; (800d424 <_printf_i+0x21c>)
 800d2dc:	9203      	str	r2, [sp, #12]
 800d2de:	681a      	ldr	r2, [r3, #0]
 800d2e0:	6821      	ldr	r1, [r4, #0]
 800d2e2:	ca20      	ldmia	r2!, {r5}
 800d2e4:	601a      	str	r2, [r3, #0]
 800d2e6:	0608      	lsls	r0, r1, #24
 800d2e8:	d550      	bpl.n	800d38c <_printf_i+0x184>
 800d2ea:	07cb      	lsls	r3, r1, #31
 800d2ec:	d502      	bpl.n	800d2f4 <_printf_i+0xec>
 800d2ee:	2320      	movs	r3, #32
 800d2f0:	4319      	orrs	r1, r3
 800d2f2:	6021      	str	r1, [r4, #0]
 800d2f4:	2710      	movs	r7, #16
 800d2f6:	2d00      	cmp	r5, #0
 800d2f8:	d103      	bne.n	800d302 <_printf_i+0xfa>
 800d2fa:	2320      	movs	r3, #32
 800d2fc:	6822      	ldr	r2, [r4, #0]
 800d2fe:	439a      	bics	r2, r3
 800d300:	6022      	str	r2, [r4, #0]
 800d302:	0023      	movs	r3, r4
 800d304:	2200      	movs	r2, #0
 800d306:	3343      	adds	r3, #67	; 0x43
 800d308:	701a      	strb	r2, [r3, #0]
 800d30a:	6863      	ldr	r3, [r4, #4]
 800d30c:	60a3      	str	r3, [r4, #8]
 800d30e:	2b00      	cmp	r3, #0
 800d310:	db03      	blt.n	800d31a <_printf_i+0x112>
 800d312:	2204      	movs	r2, #4
 800d314:	6821      	ldr	r1, [r4, #0]
 800d316:	4391      	bics	r1, r2
 800d318:	6021      	str	r1, [r4, #0]
 800d31a:	2d00      	cmp	r5, #0
 800d31c:	d102      	bne.n	800d324 <_printf_i+0x11c>
 800d31e:	9e04      	ldr	r6, [sp, #16]
 800d320:	2b00      	cmp	r3, #0
 800d322:	d00c      	beq.n	800d33e <_printf_i+0x136>
 800d324:	9e04      	ldr	r6, [sp, #16]
 800d326:	0028      	movs	r0, r5
 800d328:	0039      	movs	r1, r7
 800d32a:	f7f2 ff85 	bl	8000238 <__aeabi_uidivmod>
 800d32e:	9b03      	ldr	r3, [sp, #12]
 800d330:	3e01      	subs	r6, #1
 800d332:	5c5b      	ldrb	r3, [r3, r1]
 800d334:	7033      	strb	r3, [r6, #0]
 800d336:	002b      	movs	r3, r5
 800d338:	0005      	movs	r5, r0
 800d33a:	429f      	cmp	r7, r3
 800d33c:	d9f3      	bls.n	800d326 <_printf_i+0x11e>
 800d33e:	2f08      	cmp	r7, #8
 800d340:	d109      	bne.n	800d356 <_printf_i+0x14e>
 800d342:	6823      	ldr	r3, [r4, #0]
 800d344:	07db      	lsls	r3, r3, #31
 800d346:	d506      	bpl.n	800d356 <_printf_i+0x14e>
 800d348:	6863      	ldr	r3, [r4, #4]
 800d34a:	6922      	ldr	r2, [r4, #16]
 800d34c:	4293      	cmp	r3, r2
 800d34e:	dc02      	bgt.n	800d356 <_printf_i+0x14e>
 800d350:	2330      	movs	r3, #48	; 0x30
 800d352:	3e01      	subs	r6, #1
 800d354:	7033      	strb	r3, [r6, #0]
 800d356:	9b04      	ldr	r3, [sp, #16]
 800d358:	1b9b      	subs	r3, r3, r6
 800d35a:	6123      	str	r3, [r4, #16]
 800d35c:	9b07      	ldr	r3, [sp, #28]
 800d35e:	0021      	movs	r1, r4
 800d360:	9300      	str	r3, [sp, #0]
 800d362:	9805      	ldr	r0, [sp, #20]
 800d364:	9b06      	ldr	r3, [sp, #24]
 800d366:	aa09      	add	r2, sp, #36	; 0x24
 800d368:	f7ff fede 	bl	800d128 <_printf_common>
 800d36c:	1c43      	adds	r3, r0, #1
 800d36e:	d135      	bne.n	800d3dc <_printf_i+0x1d4>
 800d370:	2001      	movs	r0, #1
 800d372:	4240      	negs	r0, r0
 800d374:	b00b      	add	sp, #44	; 0x2c
 800d376:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d378:	2220      	movs	r2, #32
 800d37a:	6809      	ldr	r1, [r1, #0]
 800d37c:	430a      	orrs	r2, r1
 800d37e:	6022      	str	r2, [r4, #0]
 800d380:	0022      	movs	r2, r4
 800d382:	2178      	movs	r1, #120	; 0x78
 800d384:	3245      	adds	r2, #69	; 0x45
 800d386:	7011      	strb	r1, [r2, #0]
 800d388:	4a27      	ldr	r2, [pc, #156]	; (800d428 <_printf_i+0x220>)
 800d38a:	e7a7      	b.n	800d2dc <_printf_i+0xd4>
 800d38c:	0648      	lsls	r0, r1, #25
 800d38e:	d5ac      	bpl.n	800d2ea <_printf_i+0xe2>
 800d390:	b2ad      	uxth	r5, r5
 800d392:	e7aa      	b.n	800d2ea <_printf_i+0xe2>
 800d394:	681a      	ldr	r2, [r3, #0]
 800d396:	680d      	ldr	r5, [r1, #0]
 800d398:	1d10      	adds	r0, r2, #4
 800d39a:	6949      	ldr	r1, [r1, #20]
 800d39c:	6018      	str	r0, [r3, #0]
 800d39e:	6813      	ldr	r3, [r2, #0]
 800d3a0:	062e      	lsls	r6, r5, #24
 800d3a2:	d501      	bpl.n	800d3a8 <_printf_i+0x1a0>
 800d3a4:	6019      	str	r1, [r3, #0]
 800d3a6:	e002      	b.n	800d3ae <_printf_i+0x1a6>
 800d3a8:	066d      	lsls	r5, r5, #25
 800d3aa:	d5fb      	bpl.n	800d3a4 <_printf_i+0x19c>
 800d3ac:	8019      	strh	r1, [r3, #0]
 800d3ae:	2300      	movs	r3, #0
 800d3b0:	9e04      	ldr	r6, [sp, #16]
 800d3b2:	6123      	str	r3, [r4, #16]
 800d3b4:	e7d2      	b.n	800d35c <_printf_i+0x154>
 800d3b6:	681a      	ldr	r2, [r3, #0]
 800d3b8:	1d11      	adds	r1, r2, #4
 800d3ba:	6019      	str	r1, [r3, #0]
 800d3bc:	6816      	ldr	r6, [r2, #0]
 800d3be:	2100      	movs	r1, #0
 800d3c0:	0030      	movs	r0, r6
 800d3c2:	6862      	ldr	r2, [r4, #4]
 800d3c4:	f000 f834 	bl	800d430 <memchr>
 800d3c8:	2800      	cmp	r0, #0
 800d3ca:	d001      	beq.n	800d3d0 <_printf_i+0x1c8>
 800d3cc:	1b80      	subs	r0, r0, r6
 800d3ce:	6060      	str	r0, [r4, #4]
 800d3d0:	6863      	ldr	r3, [r4, #4]
 800d3d2:	6123      	str	r3, [r4, #16]
 800d3d4:	2300      	movs	r3, #0
 800d3d6:	9a04      	ldr	r2, [sp, #16]
 800d3d8:	7013      	strb	r3, [r2, #0]
 800d3da:	e7bf      	b.n	800d35c <_printf_i+0x154>
 800d3dc:	6923      	ldr	r3, [r4, #16]
 800d3de:	0032      	movs	r2, r6
 800d3e0:	9906      	ldr	r1, [sp, #24]
 800d3e2:	9805      	ldr	r0, [sp, #20]
 800d3e4:	9d07      	ldr	r5, [sp, #28]
 800d3e6:	47a8      	blx	r5
 800d3e8:	1c43      	adds	r3, r0, #1
 800d3ea:	d0c1      	beq.n	800d370 <_printf_i+0x168>
 800d3ec:	6823      	ldr	r3, [r4, #0]
 800d3ee:	079b      	lsls	r3, r3, #30
 800d3f0:	d415      	bmi.n	800d41e <_printf_i+0x216>
 800d3f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d3f4:	68e0      	ldr	r0, [r4, #12]
 800d3f6:	4298      	cmp	r0, r3
 800d3f8:	dabc      	bge.n	800d374 <_printf_i+0x16c>
 800d3fa:	0018      	movs	r0, r3
 800d3fc:	e7ba      	b.n	800d374 <_printf_i+0x16c>
 800d3fe:	0022      	movs	r2, r4
 800d400:	2301      	movs	r3, #1
 800d402:	9906      	ldr	r1, [sp, #24]
 800d404:	9805      	ldr	r0, [sp, #20]
 800d406:	9e07      	ldr	r6, [sp, #28]
 800d408:	3219      	adds	r2, #25
 800d40a:	47b0      	blx	r6
 800d40c:	1c43      	adds	r3, r0, #1
 800d40e:	d0af      	beq.n	800d370 <_printf_i+0x168>
 800d410:	3501      	adds	r5, #1
 800d412:	68e3      	ldr	r3, [r4, #12]
 800d414:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d416:	1a9b      	subs	r3, r3, r2
 800d418:	42ab      	cmp	r3, r5
 800d41a:	dcf0      	bgt.n	800d3fe <_printf_i+0x1f6>
 800d41c:	e7e9      	b.n	800d3f2 <_printf_i+0x1ea>
 800d41e:	2500      	movs	r5, #0
 800d420:	e7f7      	b.n	800d412 <_printf_i+0x20a>
 800d422:	46c0      	nop			; (mov r8, r8)
 800d424:	0800d72d 	.word	0x0800d72d
 800d428:	0800d73e 	.word	0x0800d73e

0800d42c <__retarget_lock_acquire_recursive>:
 800d42c:	4770      	bx	lr

0800d42e <__retarget_lock_release_recursive>:
 800d42e:	4770      	bx	lr

0800d430 <memchr>:
 800d430:	b2c9      	uxtb	r1, r1
 800d432:	1882      	adds	r2, r0, r2
 800d434:	4290      	cmp	r0, r2
 800d436:	d101      	bne.n	800d43c <memchr+0xc>
 800d438:	2000      	movs	r0, #0
 800d43a:	4770      	bx	lr
 800d43c:	7803      	ldrb	r3, [r0, #0]
 800d43e:	428b      	cmp	r3, r1
 800d440:	d0fb      	beq.n	800d43a <memchr+0xa>
 800d442:	3001      	adds	r0, #1
 800d444:	e7f6      	b.n	800d434 <memchr+0x4>

0800d446 <memmove>:
 800d446:	b510      	push	{r4, lr}
 800d448:	4288      	cmp	r0, r1
 800d44a:	d902      	bls.n	800d452 <memmove+0xc>
 800d44c:	188b      	adds	r3, r1, r2
 800d44e:	4298      	cmp	r0, r3
 800d450:	d303      	bcc.n	800d45a <memmove+0x14>
 800d452:	2300      	movs	r3, #0
 800d454:	e007      	b.n	800d466 <memmove+0x20>
 800d456:	5c8b      	ldrb	r3, [r1, r2]
 800d458:	5483      	strb	r3, [r0, r2]
 800d45a:	3a01      	subs	r2, #1
 800d45c:	d2fb      	bcs.n	800d456 <memmove+0x10>
 800d45e:	bd10      	pop	{r4, pc}
 800d460:	5ccc      	ldrb	r4, [r1, r3]
 800d462:	54c4      	strb	r4, [r0, r3]
 800d464:	3301      	adds	r3, #1
 800d466:	429a      	cmp	r2, r3
 800d468:	d1fa      	bne.n	800d460 <memmove+0x1a>
 800d46a:	e7f8      	b.n	800d45e <memmove+0x18>

0800d46c <_realloc_r>:
 800d46c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d46e:	0007      	movs	r7, r0
 800d470:	000d      	movs	r5, r1
 800d472:	0016      	movs	r6, r2
 800d474:	2900      	cmp	r1, #0
 800d476:	d105      	bne.n	800d484 <_realloc_r+0x18>
 800d478:	0011      	movs	r1, r2
 800d47a:	f7ff fc53 	bl	800cd24 <_malloc_r>
 800d47e:	0004      	movs	r4, r0
 800d480:	0020      	movs	r0, r4
 800d482:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d484:	2a00      	cmp	r2, #0
 800d486:	d103      	bne.n	800d490 <_realloc_r+0x24>
 800d488:	f7ff fc02 	bl	800cc90 <_free_r>
 800d48c:	0034      	movs	r4, r6
 800d48e:	e7f7      	b.n	800d480 <_realloc_r+0x14>
 800d490:	f000 f812 	bl	800d4b8 <_malloc_usable_size_r>
 800d494:	002c      	movs	r4, r5
 800d496:	42b0      	cmp	r0, r6
 800d498:	d2f2      	bcs.n	800d480 <_realloc_r+0x14>
 800d49a:	0031      	movs	r1, r6
 800d49c:	0038      	movs	r0, r7
 800d49e:	f7ff fc41 	bl	800cd24 <_malloc_r>
 800d4a2:	1e04      	subs	r4, r0, #0
 800d4a4:	d0ec      	beq.n	800d480 <_realloc_r+0x14>
 800d4a6:	0029      	movs	r1, r5
 800d4a8:	0032      	movs	r2, r6
 800d4aa:	f7ff fbdf 	bl	800cc6c <memcpy>
 800d4ae:	0029      	movs	r1, r5
 800d4b0:	0038      	movs	r0, r7
 800d4b2:	f7ff fbed 	bl	800cc90 <_free_r>
 800d4b6:	e7e3      	b.n	800d480 <_realloc_r+0x14>

0800d4b8 <_malloc_usable_size_r>:
 800d4b8:	1f0b      	subs	r3, r1, #4
 800d4ba:	681b      	ldr	r3, [r3, #0]
 800d4bc:	1f18      	subs	r0, r3, #4
 800d4be:	2b00      	cmp	r3, #0
 800d4c0:	da01      	bge.n	800d4c6 <_malloc_usable_size_r+0xe>
 800d4c2:	580b      	ldr	r3, [r1, r0]
 800d4c4:	18c0      	adds	r0, r0, r3
 800d4c6:	4770      	bx	lr

0800d4c8 <_init>:
 800d4c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d4ca:	46c0      	nop			; (mov r8, r8)
 800d4cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d4ce:	bc08      	pop	{r3}
 800d4d0:	469e      	mov	lr, r3
 800d4d2:	4770      	bx	lr

0800d4d4 <_fini>:
 800d4d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d4d6:	46c0      	nop			; (mov r8, r8)
 800d4d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d4da:	bc08      	pop	{r3}
 800d4dc:	469e      	mov	lr, r3
 800d4de:	4770      	bx	lr
