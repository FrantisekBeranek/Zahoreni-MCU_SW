
Zahoreni_zdroju.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c374  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001f0  0800c434  0800c434  0001c434  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c624  0800c624  000201e0  2**0
                  CONTENTS
  4 .ARM          00000000  0800c624  0800c624  000201e0  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800c624  0800c624  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c624  0800c624  0001c624  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c628  0800c628  0001c628  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800c62c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000013d0  200001e0  0800c80c  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200015b0  0800c80c  000215b0  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002720b  00000000  00000000  00020208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004875  00000000  00000000  00047413  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000016a0  00000000  00000000  0004bc88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000014e8  00000000  00000000  0004d328  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001f327  00000000  00000000  0004e810  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001dfbf  00000000  00000000  0006db37  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a3c9b  00000000  00000000  0008baf6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0012f791  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000054b8  00000000  00000000  0012f7e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200001e0 	.word	0x200001e0
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800c41c 	.word	0x0800c41c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200001e4 	.word	0x200001e4
 8000104:	0800c41c 	.word	0x0800c41c

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_shi>:
 8000118:	b403      	push	{r0, r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0040      	lsls	r0, r0, #1
 8000120:	0049      	lsls	r1, r1, #1
 8000122:	5e09      	ldrsh	r1, [r1, r0]
 8000124:	0049      	lsls	r1, r1, #1
 8000126:	448e      	add	lr, r1
 8000128:	bc03      	pop	{r0, r1}
 800012a:	4770      	bx	lr

0800012c <__udivsi3>:
 800012c:	2200      	movs	r2, #0
 800012e:	0843      	lsrs	r3, r0, #1
 8000130:	428b      	cmp	r3, r1
 8000132:	d374      	bcc.n	800021e <__udivsi3+0xf2>
 8000134:	0903      	lsrs	r3, r0, #4
 8000136:	428b      	cmp	r3, r1
 8000138:	d35f      	bcc.n	80001fa <__udivsi3+0xce>
 800013a:	0a03      	lsrs	r3, r0, #8
 800013c:	428b      	cmp	r3, r1
 800013e:	d344      	bcc.n	80001ca <__udivsi3+0x9e>
 8000140:	0b03      	lsrs	r3, r0, #12
 8000142:	428b      	cmp	r3, r1
 8000144:	d328      	bcc.n	8000198 <__udivsi3+0x6c>
 8000146:	0c03      	lsrs	r3, r0, #16
 8000148:	428b      	cmp	r3, r1
 800014a:	d30d      	bcc.n	8000168 <__udivsi3+0x3c>
 800014c:	22ff      	movs	r2, #255	; 0xff
 800014e:	0209      	lsls	r1, r1, #8
 8000150:	ba12      	rev	r2, r2
 8000152:	0c03      	lsrs	r3, r0, #16
 8000154:	428b      	cmp	r3, r1
 8000156:	d302      	bcc.n	800015e <__udivsi3+0x32>
 8000158:	1212      	asrs	r2, r2, #8
 800015a:	0209      	lsls	r1, r1, #8
 800015c:	d065      	beq.n	800022a <__udivsi3+0xfe>
 800015e:	0b03      	lsrs	r3, r0, #12
 8000160:	428b      	cmp	r3, r1
 8000162:	d319      	bcc.n	8000198 <__udivsi3+0x6c>
 8000164:	e000      	b.n	8000168 <__udivsi3+0x3c>
 8000166:	0a09      	lsrs	r1, r1, #8
 8000168:	0bc3      	lsrs	r3, r0, #15
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x46>
 800016e:	03cb      	lsls	r3, r1, #15
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b83      	lsrs	r3, r0, #14
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x52>
 800017a:	038b      	lsls	r3, r1, #14
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0b43      	lsrs	r3, r0, #13
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x5e>
 8000186:	034b      	lsls	r3, r1, #13
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b03      	lsrs	r3, r0, #12
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x6a>
 8000192:	030b      	lsls	r3, r1, #12
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0ac3      	lsrs	r3, r0, #11
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x76>
 800019e:	02cb      	lsls	r3, r1, #11
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a83      	lsrs	r3, r0, #10
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x82>
 80001aa:	028b      	lsls	r3, r1, #10
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0a43      	lsrs	r3, r0, #9
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x8e>
 80001b6:	024b      	lsls	r3, r1, #9
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a03      	lsrs	r3, r0, #8
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x9a>
 80001c2:	020b      	lsls	r3, r1, #8
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	d2cd      	bcs.n	8000166 <__udivsi3+0x3a>
 80001ca:	09c3      	lsrs	r3, r0, #7
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xa8>
 80001d0:	01cb      	lsls	r3, r1, #7
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0983      	lsrs	r3, r0, #6
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xb4>
 80001dc:	018b      	lsls	r3, r1, #6
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0943      	lsrs	r3, r0, #5
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xc0>
 80001e8:	014b      	lsls	r3, r1, #5
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0903      	lsrs	r3, r0, #4
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xcc>
 80001f4:	010b      	lsls	r3, r1, #4
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	08c3      	lsrs	r3, r0, #3
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xd8>
 8000200:	00cb      	lsls	r3, r1, #3
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0883      	lsrs	r3, r0, #2
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xe4>
 800020c:	008b      	lsls	r3, r1, #2
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0843      	lsrs	r3, r0, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xf0>
 8000218:	004b      	lsls	r3, r1, #1
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	1a41      	subs	r1, r0, r1
 8000220:	d200      	bcs.n	8000224 <__udivsi3+0xf8>
 8000222:	4601      	mov	r1, r0
 8000224:	4152      	adcs	r2, r2
 8000226:	4610      	mov	r0, r2
 8000228:	4770      	bx	lr
 800022a:	e7ff      	b.n	800022c <__udivsi3+0x100>
 800022c:	b501      	push	{r0, lr}
 800022e:	2000      	movs	r0, #0
 8000230:	f000 f8f0 	bl	8000414 <__aeabi_idiv0>
 8000234:	bd02      	pop	{r1, pc}
 8000236:	46c0      	nop			; (mov r8, r8)

08000238 <__aeabi_uidivmod>:
 8000238:	2900      	cmp	r1, #0
 800023a:	d0f7      	beq.n	800022c <__udivsi3+0x100>
 800023c:	e776      	b.n	800012c <__udivsi3>
 800023e:	4770      	bx	lr

08000240 <__divsi3>:
 8000240:	4603      	mov	r3, r0
 8000242:	430b      	orrs	r3, r1
 8000244:	d47f      	bmi.n	8000346 <__divsi3+0x106>
 8000246:	2200      	movs	r2, #0
 8000248:	0843      	lsrs	r3, r0, #1
 800024a:	428b      	cmp	r3, r1
 800024c:	d374      	bcc.n	8000338 <__divsi3+0xf8>
 800024e:	0903      	lsrs	r3, r0, #4
 8000250:	428b      	cmp	r3, r1
 8000252:	d35f      	bcc.n	8000314 <__divsi3+0xd4>
 8000254:	0a03      	lsrs	r3, r0, #8
 8000256:	428b      	cmp	r3, r1
 8000258:	d344      	bcc.n	80002e4 <__divsi3+0xa4>
 800025a:	0b03      	lsrs	r3, r0, #12
 800025c:	428b      	cmp	r3, r1
 800025e:	d328      	bcc.n	80002b2 <__divsi3+0x72>
 8000260:	0c03      	lsrs	r3, r0, #16
 8000262:	428b      	cmp	r3, r1
 8000264:	d30d      	bcc.n	8000282 <__divsi3+0x42>
 8000266:	22ff      	movs	r2, #255	; 0xff
 8000268:	0209      	lsls	r1, r1, #8
 800026a:	ba12      	rev	r2, r2
 800026c:	0c03      	lsrs	r3, r0, #16
 800026e:	428b      	cmp	r3, r1
 8000270:	d302      	bcc.n	8000278 <__divsi3+0x38>
 8000272:	1212      	asrs	r2, r2, #8
 8000274:	0209      	lsls	r1, r1, #8
 8000276:	d065      	beq.n	8000344 <__divsi3+0x104>
 8000278:	0b03      	lsrs	r3, r0, #12
 800027a:	428b      	cmp	r3, r1
 800027c:	d319      	bcc.n	80002b2 <__divsi3+0x72>
 800027e:	e000      	b.n	8000282 <__divsi3+0x42>
 8000280:	0a09      	lsrs	r1, r1, #8
 8000282:	0bc3      	lsrs	r3, r0, #15
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x4c>
 8000288:	03cb      	lsls	r3, r1, #15
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0b83      	lsrs	r3, r0, #14
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x58>
 8000294:	038b      	lsls	r3, r1, #14
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0b43      	lsrs	r3, r0, #13
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x64>
 80002a0:	034b      	lsls	r3, r1, #13
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0b03      	lsrs	r3, r0, #12
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x70>
 80002ac:	030b      	lsls	r3, r1, #12
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0ac3      	lsrs	r3, r0, #11
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0x7c>
 80002b8:	02cb      	lsls	r3, r1, #11
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	0a83      	lsrs	r3, r0, #10
 80002c0:	428b      	cmp	r3, r1
 80002c2:	d301      	bcc.n	80002c8 <__divsi3+0x88>
 80002c4:	028b      	lsls	r3, r1, #10
 80002c6:	1ac0      	subs	r0, r0, r3
 80002c8:	4152      	adcs	r2, r2
 80002ca:	0a43      	lsrs	r3, r0, #9
 80002cc:	428b      	cmp	r3, r1
 80002ce:	d301      	bcc.n	80002d4 <__divsi3+0x94>
 80002d0:	024b      	lsls	r3, r1, #9
 80002d2:	1ac0      	subs	r0, r0, r3
 80002d4:	4152      	adcs	r2, r2
 80002d6:	0a03      	lsrs	r3, r0, #8
 80002d8:	428b      	cmp	r3, r1
 80002da:	d301      	bcc.n	80002e0 <__divsi3+0xa0>
 80002dc:	020b      	lsls	r3, r1, #8
 80002de:	1ac0      	subs	r0, r0, r3
 80002e0:	4152      	adcs	r2, r2
 80002e2:	d2cd      	bcs.n	8000280 <__divsi3+0x40>
 80002e4:	09c3      	lsrs	r3, r0, #7
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xae>
 80002ea:	01cb      	lsls	r3, r1, #7
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	0983      	lsrs	r3, r0, #6
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xba>
 80002f6:	018b      	lsls	r3, r1, #6
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0943      	lsrs	r3, r0, #5
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xc6>
 8000302:	014b      	lsls	r3, r1, #5
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0903      	lsrs	r3, r0, #4
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xd2>
 800030e:	010b      	lsls	r3, r1, #4
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	08c3      	lsrs	r3, r0, #3
 8000316:	428b      	cmp	r3, r1
 8000318:	d301      	bcc.n	800031e <__divsi3+0xde>
 800031a:	00cb      	lsls	r3, r1, #3
 800031c:	1ac0      	subs	r0, r0, r3
 800031e:	4152      	adcs	r2, r2
 8000320:	0883      	lsrs	r3, r0, #2
 8000322:	428b      	cmp	r3, r1
 8000324:	d301      	bcc.n	800032a <__divsi3+0xea>
 8000326:	008b      	lsls	r3, r1, #2
 8000328:	1ac0      	subs	r0, r0, r3
 800032a:	4152      	adcs	r2, r2
 800032c:	0843      	lsrs	r3, r0, #1
 800032e:	428b      	cmp	r3, r1
 8000330:	d301      	bcc.n	8000336 <__divsi3+0xf6>
 8000332:	004b      	lsls	r3, r1, #1
 8000334:	1ac0      	subs	r0, r0, r3
 8000336:	4152      	adcs	r2, r2
 8000338:	1a41      	subs	r1, r0, r1
 800033a:	d200      	bcs.n	800033e <__divsi3+0xfe>
 800033c:	4601      	mov	r1, r0
 800033e:	4152      	adcs	r2, r2
 8000340:	4610      	mov	r0, r2
 8000342:	4770      	bx	lr
 8000344:	e05d      	b.n	8000402 <__divsi3+0x1c2>
 8000346:	0fca      	lsrs	r2, r1, #31
 8000348:	d000      	beq.n	800034c <__divsi3+0x10c>
 800034a:	4249      	negs	r1, r1
 800034c:	1003      	asrs	r3, r0, #32
 800034e:	d300      	bcc.n	8000352 <__divsi3+0x112>
 8000350:	4240      	negs	r0, r0
 8000352:	4053      	eors	r3, r2
 8000354:	2200      	movs	r2, #0
 8000356:	469c      	mov	ip, r3
 8000358:	0903      	lsrs	r3, r0, #4
 800035a:	428b      	cmp	r3, r1
 800035c:	d32d      	bcc.n	80003ba <__divsi3+0x17a>
 800035e:	0a03      	lsrs	r3, r0, #8
 8000360:	428b      	cmp	r3, r1
 8000362:	d312      	bcc.n	800038a <__divsi3+0x14a>
 8000364:	22fc      	movs	r2, #252	; 0xfc
 8000366:	0189      	lsls	r1, r1, #6
 8000368:	ba12      	rev	r2, r2
 800036a:	0a03      	lsrs	r3, r0, #8
 800036c:	428b      	cmp	r3, r1
 800036e:	d30c      	bcc.n	800038a <__divsi3+0x14a>
 8000370:	0189      	lsls	r1, r1, #6
 8000372:	1192      	asrs	r2, r2, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d308      	bcc.n	800038a <__divsi3+0x14a>
 8000378:	0189      	lsls	r1, r1, #6
 800037a:	1192      	asrs	r2, r2, #6
 800037c:	428b      	cmp	r3, r1
 800037e:	d304      	bcc.n	800038a <__divsi3+0x14a>
 8000380:	0189      	lsls	r1, r1, #6
 8000382:	d03a      	beq.n	80003fa <__divsi3+0x1ba>
 8000384:	1192      	asrs	r2, r2, #6
 8000386:	e000      	b.n	800038a <__divsi3+0x14a>
 8000388:	0989      	lsrs	r1, r1, #6
 800038a:	09c3      	lsrs	r3, r0, #7
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x154>
 8000390:	01cb      	lsls	r3, r1, #7
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	0983      	lsrs	r3, r0, #6
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x160>
 800039c:	018b      	lsls	r3, r1, #6
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0943      	lsrs	r3, r0, #5
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x16c>
 80003a8:	014b      	lsls	r3, r1, #5
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	0903      	lsrs	r3, r0, #4
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d301      	bcc.n	80003b8 <__divsi3+0x178>
 80003b4:	010b      	lsls	r3, r1, #4
 80003b6:	1ac0      	subs	r0, r0, r3
 80003b8:	4152      	adcs	r2, r2
 80003ba:	08c3      	lsrs	r3, r0, #3
 80003bc:	428b      	cmp	r3, r1
 80003be:	d301      	bcc.n	80003c4 <__divsi3+0x184>
 80003c0:	00cb      	lsls	r3, r1, #3
 80003c2:	1ac0      	subs	r0, r0, r3
 80003c4:	4152      	adcs	r2, r2
 80003c6:	0883      	lsrs	r3, r0, #2
 80003c8:	428b      	cmp	r3, r1
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x190>
 80003cc:	008b      	lsls	r3, r1, #2
 80003ce:	1ac0      	subs	r0, r0, r3
 80003d0:	4152      	adcs	r2, r2
 80003d2:	d2d9      	bcs.n	8000388 <__divsi3+0x148>
 80003d4:	0843      	lsrs	r3, r0, #1
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d301      	bcc.n	80003de <__divsi3+0x19e>
 80003da:	004b      	lsls	r3, r1, #1
 80003dc:	1ac0      	subs	r0, r0, r3
 80003de:	4152      	adcs	r2, r2
 80003e0:	1a41      	subs	r1, r0, r1
 80003e2:	d200      	bcs.n	80003e6 <__divsi3+0x1a6>
 80003e4:	4601      	mov	r1, r0
 80003e6:	4663      	mov	r3, ip
 80003e8:	4152      	adcs	r2, r2
 80003ea:	105b      	asrs	r3, r3, #1
 80003ec:	4610      	mov	r0, r2
 80003ee:	d301      	bcc.n	80003f4 <__divsi3+0x1b4>
 80003f0:	4240      	negs	r0, r0
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	d500      	bpl.n	80003f8 <__divsi3+0x1b8>
 80003f6:	4249      	negs	r1, r1
 80003f8:	4770      	bx	lr
 80003fa:	4663      	mov	r3, ip
 80003fc:	105b      	asrs	r3, r3, #1
 80003fe:	d300      	bcc.n	8000402 <__divsi3+0x1c2>
 8000400:	4240      	negs	r0, r0
 8000402:	b501      	push	{r0, lr}
 8000404:	2000      	movs	r0, #0
 8000406:	f000 f805 	bl	8000414 <__aeabi_idiv0>
 800040a:	bd02      	pop	{r1, pc}

0800040c <__aeabi_idivmod>:
 800040c:	2900      	cmp	r1, #0
 800040e:	d0f8      	beq.n	8000402 <__divsi3+0x1c2>
 8000410:	e716      	b.n	8000240 <__divsi3>
 8000412:	4770      	bx	lr

08000414 <__aeabi_idiv0>:
 8000414:	4770      	bx	lr
 8000416:	46c0      	nop			; (mov r8, r8)

08000418 <setColour>:
#include "lcd.h"

//_____Rozvítí podsvícení dané argumentem_____//
//-> argument: Barva podsvícení
void setColour(BACKLIGHT colour)
{
 8000418:	b580      	push	{r7, lr}
 800041a:	b082      	sub	sp, #8
 800041c:	af00      	add	r7, sp, #0
 800041e:	0002      	movs	r2, r0
 8000420:	1dfb      	adds	r3, r7, #7
 8000422:	701a      	strb	r2, [r3, #0]
	switch(colour)
 8000424:	1dfb      	adds	r3, r7, #7
 8000426:	781b      	ldrb	r3, [r3, #0]
 8000428:	2b02      	cmp	r3, #2
 800042a:	d033      	beq.n	8000494 <setColour+0x7c>
 800042c:	dc49      	bgt.n	80004c2 <setColour+0xaa>
 800042e:	2b00      	cmp	r3, #0
 8000430:	d002      	beq.n	8000438 <setColour+0x20>
 8000432:	2b01      	cmp	r3, #1
 8000434:	d017      	beq.n	8000466 <setColour+0x4e>
 8000436:	e044      	b.n	80004c2 <setColour+0xaa>
	{
	case BACKLIGHT_WHITE:
		HAL_GPIO_WritePin(BACKLIGHT_WHITE_GPIO_Port, BACKLIGHT_WHITE_Pin, GPIO_PIN_SET);
 8000438:	2380      	movs	r3, #128	; 0x80
 800043a:	009b      	lsls	r3, r3, #2
 800043c:	482e      	ldr	r0, [pc, #184]	; (80004f8 <setColour+0xe0>)
 800043e:	2201      	movs	r2, #1
 8000440:	0019      	movs	r1, r3
 8000442:	f002 f898 	bl	8002576 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(BACKLIGHT_RED_GPIO_Port, BACKLIGHT_RED_Pin, GPIO_PIN_RESET);
 8000446:	2380      	movs	r3, #128	; 0x80
 8000448:	0219      	lsls	r1, r3, #8
 800044a:	2390      	movs	r3, #144	; 0x90
 800044c:	05db      	lsls	r3, r3, #23
 800044e:	2200      	movs	r2, #0
 8000450:	0018      	movs	r0, r3
 8000452:	f002 f890 	bl	8002576 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(BACKLIGHT_GREEN_GPIO_Port, BACKLIGHT_GREEN_Pin, GPIO_PIN_RESET);
 8000456:	2380      	movs	r3, #128	; 0x80
 8000458:	005b      	lsls	r3, r3, #1
 800045a:	4827      	ldr	r0, [pc, #156]	; (80004f8 <setColour+0xe0>)
 800045c:	2200      	movs	r2, #0
 800045e:	0019      	movs	r1, r3
 8000460:	f002 f889 	bl	8002576 <HAL_GPIO_WritePin>
		break;
 8000464:	e044      	b.n	80004f0 <setColour+0xd8>

	case BACKLIGHT_GREEN:
		HAL_GPIO_WritePin(BACKLIGHT_WHITE_GPIO_Port, BACKLIGHT_WHITE_Pin, GPIO_PIN_RESET);
 8000466:	2380      	movs	r3, #128	; 0x80
 8000468:	009b      	lsls	r3, r3, #2
 800046a:	4823      	ldr	r0, [pc, #140]	; (80004f8 <setColour+0xe0>)
 800046c:	2200      	movs	r2, #0
 800046e:	0019      	movs	r1, r3
 8000470:	f002 f881 	bl	8002576 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(BACKLIGHT_RED_GPIO_Port, BACKLIGHT_RED_Pin, GPIO_PIN_RESET);
 8000474:	2380      	movs	r3, #128	; 0x80
 8000476:	0219      	lsls	r1, r3, #8
 8000478:	2390      	movs	r3, #144	; 0x90
 800047a:	05db      	lsls	r3, r3, #23
 800047c:	2200      	movs	r2, #0
 800047e:	0018      	movs	r0, r3
 8000480:	f002 f879 	bl	8002576 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(BACKLIGHT_GREEN_GPIO_Port, BACKLIGHT_GREEN_Pin, GPIO_PIN_SET);
 8000484:	2380      	movs	r3, #128	; 0x80
 8000486:	005b      	lsls	r3, r3, #1
 8000488:	481b      	ldr	r0, [pc, #108]	; (80004f8 <setColour+0xe0>)
 800048a:	2201      	movs	r2, #1
 800048c:	0019      	movs	r1, r3
 800048e:	f002 f872 	bl	8002576 <HAL_GPIO_WritePin>
		break;
 8000492:	e02d      	b.n	80004f0 <setColour+0xd8>

	case BACKLIGHT_RED:
		HAL_GPIO_WritePin(BACKLIGHT_WHITE_GPIO_Port, BACKLIGHT_WHITE_Pin, GPIO_PIN_RESET);
 8000494:	2380      	movs	r3, #128	; 0x80
 8000496:	009b      	lsls	r3, r3, #2
 8000498:	4817      	ldr	r0, [pc, #92]	; (80004f8 <setColour+0xe0>)
 800049a:	2200      	movs	r2, #0
 800049c:	0019      	movs	r1, r3
 800049e:	f002 f86a 	bl	8002576 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(BACKLIGHT_RED_GPIO_Port, BACKLIGHT_RED_Pin, GPIO_PIN_SET);
 80004a2:	2380      	movs	r3, #128	; 0x80
 80004a4:	0219      	lsls	r1, r3, #8
 80004a6:	2390      	movs	r3, #144	; 0x90
 80004a8:	05db      	lsls	r3, r3, #23
 80004aa:	2201      	movs	r2, #1
 80004ac:	0018      	movs	r0, r3
 80004ae:	f002 f862 	bl	8002576 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(BACKLIGHT_GREEN_GPIO_Port, BACKLIGHT_GREEN_Pin, GPIO_PIN_RESET);
 80004b2:	2380      	movs	r3, #128	; 0x80
 80004b4:	005b      	lsls	r3, r3, #1
 80004b6:	4810      	ldr	r0, [pc, #64]	; (80004f8 <setColour+0xe0>)
 80004b8:	2200      	movs	r2, #0
 80004ba:	0019      	movs	r1, r3
 80004bc:	f002 f85b 	bl	8002576 <HAL_GPIO_WritePin>
		break;
 80004c0:	e016      	b.n	80004f0 <setColour+0xd8>

	default:
		HAL_GPIO_WritePin(BACKLIGHT_WHITE_GPIO_Port, BACKLIGHT_WHITE_Pin, GPIO_PIN_RESET);
 80004c2:	2380      	movs	r3, #128	; 0x80
 80004c4:	009b      	lsls	r3, r3, #2
 80004c6:	480c      	ldr	r0, [pc, #48]	; (80004f8 <setColour+0xe0>)
 80004c8:	2200      	movs	r2, #0
 80004ca:	0019      	movs	r1, r3
 80004cc:	f002 f853 	bl	8002576 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(BACKLIGHT_RED_GPIO_Port, BACKLIGHT_RED_Pin, GPIO_PIN_RESET);
 80004d0:	2380      	movs	r3, #128	; 0x80
 80004d2:	0219      	lsls	r1, r3, #8
 80004d4:	2390      	movs	r3, #144	; 0x90
 80004d6:	05db      	lsls	r3, r3, #23
 80004d8:	2200      	movs	r2, #0
 80004da:	0018      	movs	r0, r3
 80004dc:	f002 f84b 	bl	8002576 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(BACKLIGHT_GREEN_GPIO_Port, BACKLIGHT_GREEN_Pin, GPIO_PIN_RESET);
 80004e0:	2380      	movs	r3, #128	; 0x80
 80004e2:	005b      	lsls	r3, r3, #1
 80004e4:	4804      	ldr	r0, [pc, #16]	; (80004f8 <setColour+0xe0>)
 80004e6:	2200      	movs	r2, #0
 80004e8:	0019      	movs	r1, r3
 80004ea:	f002 f844 	bl	8002576 <HAL_GPIO_WritePin>
		break;
 80004ee:	46c0      	nop			; (mov r8, r8)
	}
}
 80004f0:	46c0      	nop			; (mov r8, r8)
 80004f2:	46bd      	mov	sp, r7
 80004f4:	b002      	add	sp, #8
 80004f6:	bd80      	pop	{r7, pc}
 80004f8:	48000400 	.word	0x48000400

080004fc <readBusy>:

//_____Přečte dostupnost displeje_____//
// !!! Pracuje v blokujícím módu !!!
DISP_STATE readBusy(void)
{
 80004fc:	b580      	push	{r7, lr}
 80004fe:	b082      	sub	sp, #8
 8000500:	af00      	add	r7, sp, #0
	uint8_t data = READ_BUSY_FLAG;
 8000502:	1dfb      	adds	r3, r7, #7
 8000504:	22fc      	movs	r2, #252	; 0xfc
 8000506:	701a      	strb	r2, [r3, #0]
	uint8_t data2;

	DISP_CS_ON;
 8000508:	4b18      	ldr	r3, [pc, #96]	; (800056c <readBusy+0x70>)
 800050a:	2200      	movs	r2, #0
 800050c:	2140      	movs	r1, #64	; 0x40
 800050e:	0018      	movs	r0, r3
 8000510:	f002 f831 	bl	8002576 <HAL_GPIO_WritePin>
	//_____Požadavek na čtení Busy Flag_____//
	HAL_SPI_Transmit(&hspi1, &data, 1, 100);
 8000514:	1df9      	adds	r1, r7, #7
 8000516:	4816      	ldr	r0, [pc, #88]	; (8000570 <readBusy+0x74>)
 8000518:	2364      	movs	r3, #100	; 0x64
 800051a:	2201      	movs	r2, #1
 800051c:	f004 fdaa 	bl	8005074 <HAL_SPI_Transmit>
	//_____Čtení příchozího bytu_____//
	HAL_Delay(1);
 8000520:	2001      	movs	r0, #1
 8000522:	f001 f9bf 	bl	80018a4 <HAL_Delay>

	if(HAL_SPI_Receive(&hspi1, &data2, 1, 100) == HAL_OK)
 8000526:	1db9      	adds	r1, r7, #6
 8000528:	4811      	ldr	r0, [pc, #68]	; (8000570 <readBusy+0x74>)
 800052a:	2364      	movs	r3, #100	; 0x64
 800052c:	2201      	movs	r2, #1
 800052e:	f004 fef9 	bl	8005324 <HAL_SPI_Receive>
 8000532:	1e03      	subs	r3, r0, #0
 8000534:	d10e      	bne.n	8000554 <readBusy+0x58>
	{
		//_____Vrať hodnotu BF_____//
		DISP_CS_OFF;
 8000536:	4b0d      	ldr	r3, [pc, #52]	; (800056c <readBusy+0x70>)
 8000538:	2201      	movs	r2, #1
 800053a:	2140      	movs	r1, #64	; 0x40
 800053c:	0018      	movs	r0, r3
 800053e:	f002 f81a 	bl	8002576 <HAL_GPIO_WritePin>
		return (MaskBit(data2, 7))? SPI_BUSY : SPI_OK;
 8000542:	1dbb      	adds	r3, r7, #6
 8000544:	781b      	ldrb	r3, [r3, #0]
 8000546:	b25b      	sxtb	r3, r3
 8000548:	2b00      	cmp	r3, #0
 800054a:	da01      	bge.n	8000550 <readBusy+0x54>
 800054c:	2303      	movs	r3, #3
 800054e:	e008      	b.n	8000562 <readBusy+0x66>
 8000550:	2301      	movs	r3, #1
 8000552:	e006      	b.n	8000562 <readBusy+0x66>
	}
	else
	{
		//_____Chyba čtení BF_____//
		DISP_CS_OFF;
 8000554:	4b05      	ldr	r3, [pc, #20]	; (800056c <readBusy+0x70>)
 8000556:	2201      	movs	r2, #1
 8000558:	2140      	movs	r1, #64	; 0x40
 800055a:	0018      	movs	r0, r3
 800055c:	f002 f80b 	bl	8002576 <HAL_GPIO_WritePin>
		return SPI_ERR;
 8000560:	2302      	movs	r3, #2
	}
}
 8000562:	0018      	movs	r0, r3
 8000564:	46bd      	mov	sp, r7
 8000566:	b002      	add	sp, #8
 8000568:	bd80      	pop	{r7, pc}
 800056a:	46c0      	nop			; (mov r8, r8)
 800056c:	48000400 	.word	0x48000400
 8000570:	200004e0 	.word	0x200004e0

08000574 <sendByte>:

//_____Pošle byte dat_____//
//-> argumenty: char - posílaný byte, Start_byte definuje zda jde o instrukci nebo data
// !!! Pracuje v blokujícím módu !!!
DISP_STATE sendByte(char byte, START_BYTE type)
{
 8000574:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000576:	b085      	sub	sp, #20
 8000578:	af00      	add	r7, sp, #0
 800057a:	0002      	movs	r2, r0
 800057c:	1dfb      	adds	r3, r7, #7
 800057e:	701a      	strb	r2, [r3, #0]
 8000580:	1dbb      	adds	r3, r7, #6
 8000582:	1c0a      	adds	r2, r1, #0
 8000584:	701a      	strb	r2, [r3, #0]
	while(readBusy() != SPI_OK)
 8000586:	e006      	b.n	8000596 <sendByte+0x22>
	{
		if(readBusy() == SPI_ERR)
 8000588:	f7ff ffb8 	bl	80004fc <readBusy>
 800058c:	0003      	movs	r3, r0
 800058e:	2b02      	cmp	r3, #2
 8000590:	d101      	bne.n	8000596 <sendByte+0x22>
		{
			return SPI_ERR;
 8000592:	2302      	movs	r3, #2
 8000594:	e08d      	b.n	80006b2 <sendByte+0x13e>
	while(readBusy() != SPI_OK)
 8000596:	f7ff ffb1 	bl	80004fc <readBusy>
 800059a:	0003      	movs	r3, r0
 800059c:	2b01      	cmp	r3, #1
 800059e:	d1f3      	bne.n	8000588 <sendByte+0x14>
		}
	}
	uint8_t buffer[3];
	switch(type)
 80005a0:	1dbb      	adds	r3, r7, #6
 80005a2:	781b      	ldrb	r3, [r3, #0]
 80005a4:	2b01      	cmp	r3, #1
 80005a6:	d002      	beq.n	80005ae <sendByte+0x3a>
 80005a8:	2b02      	cmp	r3, #2
 80005aa:	d005      	beq.n	80005b8 <sendByte+0x44>
			break;
		case DATA:
			buffer[0] = 0xFA;
			break;
		default:
			break;
 80005ac:	e009      	b.n	80005c2 <sendByte+0x4e>
			buffer[0] = 0xF8;
 80005ae:	2308      	movs	r3, #8
 80005b0:	18fb      	adds	r3, r7, r3
 80005b2:	22f8      	movs	r2, #248	; 0xf8
 80005b4:	701a      	strb	r2, [r3, #0]
			break;
 80005b6:	e004      	b.n	80005c2 <sendByte+0x4e>
			buffer[0] = 0xFA;
 80005b8:	2308      	movs	r3, #8
 80005ba:	18fb      	adds	r3, r7, r3
 80005bc:	22fa      	movs	r2, #250	; 0xfa
 80005be:	701a      	strb	r2, [r3, #0]
			break;
 80005c0:	46c0      	nop			; (mov r8, r8)
	}
	uint8_t tmp1 = 0U, tmp2 = 0U;
 80005c2:	230f      	movs	r3, #15
 80005c4:	18fb      	adds	r3, r7, r3
 80005c6:	2200      	movs	r2, #0
 80005c8:	701a      	strb	r2, [r3, #0]
 80005ca:	230e      	movs	r3, #14
 80005cc:	18fb      	adds	r3, r7, r3
 80005ce:	2200      	movs	r2, #0
 80005d0:	701a      	strb	r2, [r3, #0]
	for(uint8_t i = 0; i < 4; i++)
 80005d2:	230d      	movs	r3, #13
 80005d4:	18fb      	adds	r3, r7, r3
 80005d6:	2200      	movs	r2, #0
 80005d8:	701a      	strb	r2, [r3, #0]
 80005da:	e03a      	b.n	8000652 <sendByte+0xde>
	{
		if(MaskBit(byte, i))
 80005dc:	1dfb      	adds	r3, r7, #7
 80005de:	781a      	ldrb	r2, [r3, #0]
 80005e0:	210d      	movs	r1, #13
 80005e2:	187b      	adds	r3, r7, r1
 80005e4:	781b      	ldrb	r3, [r3, #0]
 80005e6:	411a      	asrs	r2, r3
 80005e8:	0013      	movs	r3, r2
 80005ea:	2201      	movs	r2, #1
 80005ec:	4013      	ands	r3, r2
 80005ee:	d00f      	beq.n	8000610 <sendByte+0x9c>
		{
			SetBit(tmp1, (7-i));
 80005f0:	187b      	adds	r3, r7, r1
 80005f2:	781b      	ldrb	r3, [r3, #0]
 80005f4:	2207      	movs	r2, #7
 80005f6:	1ad3      	subs	r3, r2, r3
 80005f8:	2201      	movs	r2, #1
 80005fa:	409a      	lsls	r2, r3
 80005fc:	0013      	movs	r3, r2
 80005fe:	b25a      	sxtb	r2, r3
 8000600:	210f      	movs	r1, #15
 8000602:	187b      	adds	r3, r7, r1
 8000604:	781b      	ldrb	r3, [r3, #0]
 8000606:	b25b      	sxtb	r3, r3
 8000608:	4313      	orrs	r3, r2
 800060a:	b25a      	sxtb	r2, r3
 800060c:	187b      	adds	r3, r7, r1
 800060e:	701a      	strb	r2, [r3, #0]
		}
		if(MaskBit(byte, (i+4)))
 8000610:	1dfb      	adds	r3, r7, #7
 8000612:	781a      	ldrb	r2, [r3, #0]
 8000614:	210d      	movs	r1, #13
 8000616:	187b      	adds	r3, r7, r1
 8000618:	781b      	ldrb	r3, [r3, #0]
 800061a:	3304      	adds	r3, #4
 800061c:	411a      	asrs	r2, r3
 800061e:	0013      	movs	r3, r2
 8000620:	2201      	movs	r2, #1
 8000622:	4013      	ands	r3, r2
 8000624:	d00f      	beq.n	8000646 <sendByte+0xd2>
		{
			SetBit(tmp2, (7-i));
 8000626:	187b      	adds	r3, r7, r1
 8000628:	781b      	ldrb	r3, [r3, #0]
 800062a:	2207      	movs	r2, #7
 800062c:	1ad3      	subs	r3, r2, r3
 800062e:	2201      	movs	r2, #1
 8000630:	409a      	lsls	r2, r3
 8000632:	0013      	movs	r3, r2
 8000634:	b25a      	sxtb	r2, r3
 8000636:	210e      	movs	r1, #14
 8000638:	187b      	adds	r3, r7, r1
 800063a:	781b      	ldrb	r3, [r3, #0]
 800063c:	b25b      	sxtb	r3, r3
 800063e:	4313      	orrs	r3, r2
 8000640:	b25a      	sxtb	r2, r3
 8000642:	187b      	adds	r3, r7, r1
 8000644:	701a      	strb	r2, [r3, #0]
	for(uint8_t i = 0; i < 4; i++)
 8000646:	210d      	movs	r1, #13
 8000648:	187b      	adds	r3, r7, r1
 800064a:	781a      	ldrb	r2, [r3, #0]
 800064c:	187b      	adds	r3, r7, r1
 800064e:	3201      	adds	r2, #1
 8000650:	701a      	strb	r2, [r3, #0]
 8000652:	230d      	movs	r3, #13
 8000654:	18fb      	adds	r3, r7, r3
 8000656:	781b      	ldrb	r3, [r3, #0]
 8000658:	2b03      	cmp	r3, #3
 800065a:	d9bf      	bls.n	80005dc <sendByte+0x68>
		}
	}
	buffer[1] = tmp1;
 800065c:	2508      	movs	r5, #8
 800065e:	197b      	adds	r3, r7, r5
 8000660:	220f      	movs	r2, #15
 8000662:	18ba      	adds	r2, r7, r2
 8000664:	7812      	ldrb	r2, [r2, #0]
 8000666:	705a      	strb	r2, [r3, #1]
	buffer[2] = tmp2;
 8000668:	197b      	adds	r3, r7, r5
 800066a:	220e      	movs	r2, #14
 800066c:	18ba      	adds	r2, r7, r2
 800066e:	7812      	ldrb	r2, [r2, #0]
 8000670:	709a      	strb	r2, [r3, #2]

	DISP_CS_ON;
 8000672:	4b12      	ldr	r3, [pc, #72]	; (80006bc <sendByte+0x148>)
 8000674:	2200      	movs	r2, #0
 8000676:	2140      	movs	r1, #64	; 0x40
 8000678:	0018      	movs	r0, r3
 800067a:	f001 ff7c 	bl	8002576 <HAL_GPIO_WritePin>
	HAL_StatusTypeDef ret = HAL_SPI_Transmit(&hspi1, &buffer[0], 3, 100);
 800067e:	260c      	movs	r6, #12
 8000680:	19bc      	adds	r4, r7, r6
 8000682:	1979      	adds	r1, r7, r5
 8000684:	480e      	ldr	r0, [pc, #56]	; (80006c0 <sendByte+0x14c>)
 8000686:	2364      	movs	r3, #100	; 0x64
 8000688:	2203      	movs	r2, #3
 800068a:	f004 fcf3 	bl	8005074 <HAL_SPI_Transmit>
 800068e:	0003      	movs	r3, r0
 8000690:	7023      	strb	r3, [r4, #0]
	DISP_CS_OFF;
 8000692:	4b0a      	ldr	r3, [pc, #40]	; (80006bc <sendByte+0x148>)
 8000694:	2201      	movs	r2, #1
 8000696:	2140      	movs	r1, #64	; 0x40
 8000698:	0018      	movs	r0, r3
 800069a:	f001 ff6c 	bl	8002576 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 800069e:	2001      	movs	r0, #1
 80006a0:	f001 f900 	bl	80018a4 <HAL_Delay>
	if(ret == HAL_OK)
 80006a4:	19bb      	adds	r3, r7, r6
 80006a6:	781b      	ldrb	r3, [r3, #0]
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	d101      	bne.n	80006b0 <sendByte+0x13c>
		return DISP_OK;
 80006ac:	2300      	movs	r3, #0
 80006ae:	e000      	b.n	80006b2 <sendByte+0x13e>
	else
		return SPI_ERR;
 80006b0:	2302      	movs	r3, #2
}
 80006b2:	0018      	movs	r0, r3
 80006b4:	46bd      	mov	sp, r7
 80006b6:	b005      	add	sp, #20
 80006b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80006ba:	46c0      	nop			; (mov r8, r8)
 80006bc:	48000400 	.word	0x48000400
 80006c0:	200004e0 	.word	0x200004e0

080006c4 <dispInit>:
}

//_____Provede reset displeje a defaultní nastavení_____//
// !!! Pracuje v blokujícím módu !!!
void dispInit(void)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	af00      	add	r7, sp, #0
	//_____Reset displeje po startu_____//
	HAL_Delay(10);
 80006c8:	200a      	movs	r0, #10
 80006ca:	f001 f8eb 	bl	80018a4 <HAL_Delay>
	HAL_GPIO_WritePin(DISP_RST_GPIO_Port,DISP_RST_Pin, GPIO_PIN_RESET);
 80006ce:	4b22      	ldr	r3, [pc, #136]	; (8000758 <dispInit+0x94>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	2180      	movs	r1, #128	; 0x80
 80006d4:	0018      	movs	r0, r3
 80006d6:	f001 ff4e 	bl	8002576 <HAL_GPIO_WritePin>
	HAL_Delay(20);
 80006da:	2014      	movs	r0, #20
 80006dc:	f001 f8e2 	bl	80018a4 <HAL_Delay>
	HAL_GPIO_WritePin(DISP_RST_GPIO_Port,DISP_RST_Pin, GPIO_PIN_SET);
 80006e0:	4b1d      	ldr	r3, [pc, #116]	; (8000758 <dispInit+0x94>)
 80006e2:	2201      	movs	r2, #1
 80006e4:	2180      	movs	r1, #128	; 0x80
 80006e6:	0018      	movs	r0, r3
 80006e8:	f001 ff45 	bl	8002576 <HAL_GPIO_WritePin>
	HAL_Delay(5);
 80006ec:	2005      	movs	r0, #5
 80006ee:	f001 f8d9 	bl	80018a4 <HAL_Delay>

	//_____Nastavit parametry_____//
	sendByte(0x3A, INSTRUCTION);	//Function set
 80006f2:	2101      	movs	r1, #1
 80006f4:	203a      	movs	r0, #58	; 0x3a
 80006f6:	f7ff ff3d 	bl	8000574 <sendByte>
	sendByte(0x09, INSTRUCTION);	//Extended function set
 80006fa:	2101      	movs	r1, #1
 80006fc:	2009      	movs	r0, #9
 80006fe:	f7ff ff39 	bl	8000574 <sendByte>
	sendByte(0x06, INSTRUCTION);	//Entry mode set
 8000702:	2101      	movs	r1, #1
 8000704:	2006      	movs	r0, #6
 8000706:	f7ff ff35 	bl	8000574 <sendByte>
	sendByte(0x1E, INSTRUCTION);	//Bias setting
 800070a:	2101      	movs	r1, #1
 800070c:	201e      	movs	r0, #30
 800070e:	f7ff ff31 	bl	8000574 <sendByte>
	sendByte(0x39, INSTRUCTION);	//Function set
 8000712:	2101      	movs	r1, #1
 8000714:	2039      	movs	r0, #57	; 0x39
 8000716:	f7ff ff2d 	bl	8000574 <sendByte>
	sendByte(0x1B, INSTRUCTION);	//Internal OSC
 800071a:	2101      	movs	r1, #1
 800071c:	201b      	movs	r0, #27
 800071e:	f7ff ff29 	bl	8000574 <sendByte>
	sendByte(0x6E, INSTRUCTION);	//Follower control
 8000722:	2101      	movs	r1, #1
 8000724:	206e      	movs	r0, #110	; 0x6e
 8000726:	f7ff ff25 	bl	8000574 <sendByte>
	sendByte(0x57, INSTRUCTION);	//Power control
 800072a:	2101      	movs	r1, #1
 800072c:	2057      	movs	r0, #87	; 0x57
 800072e:	f7ff ff21 	bl	8000574 <sendByte>
	sendByte(0x72, INSTRUCTION);	//Contrast set
 8000732:	2101      	movs	r1, #1
 8000734:	2072      	movs	r0, #114	; 0x72
 8000736:	f7ff ff1d 	bl	8000574 <sendByte>
	sendByte(0x38, INSTRUCTION);	//Function set
 800073a:	2101      	movs	r1, #1
 800073c:	2038      	movs	r0, #56	; 0x38
 800073e:	f7ff ff19 	bl	8000574 <sendByte>
	sendByte(0x0C, INSTRUCTION);	//Display on
 8000742:	2101      	movs	r1, #1
 8000744:	200c      	movs	r0, #12
 8000746:	f7ff ff15 	bl	8000574 <sendByte>

	//_____Zapnout podsvícení_____//
	setColour(BACKLIGHT_WHITE);
 800074a:	2000      	movs	r0, #0
 800074c:	f7ff fe64 	bl	8000418 <setColour>
}
 8000750:	46c0      	nop			; (mov r8, r8)
 8000752:	46bd      	mov	sp, r7
 8000754:	bd80      	pop	{r7, pc}
 8000756:	46c0      	nop			; (mov r8, r8)
 8000758:	48000400 	.word	0x48000400

0800075c <setCursor>:
//_____Nastaví kurzor_____//
//pozice počítána od nuly//
//-> argumenty: řádek, sloupec
// !!! Pracuje v blokujícím módu !!!
DISP_STATE setCursor(uint8_t row, uint8_t col)
{
 800075c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800075e:	b085      	sub	sp, #20
 8000760:	af00      	add	r7, sp, #0
 8000762:	0002      	movs	r2, r0
 8000764:	1dfb      	adds	r3, r7, #7
 8000766:	701a      	strb	r2, [r3, #0]
 8000768:	1dbb      	adds	r3, r7, #6
 800076a:	1c0a      	adds	r2, r1, #0
 800076c:	701a      	strb	r2, [r3, #0]
	uint8_t addres = 0x80;	//DDRAM adresa
 800076e:	230f      	movs	r3, #15
 8000770:	18fb      	adds	r3, r7, r3
 8000772:	2280      	movs	r2, #128	; 0x80
 8000774:	701a      	strb	r2, [r3, #0]
	if(row > 3 || col > 15)	//displej 4x16
 8000776:	1dfb      	adds	r3, r7, #7
 8000778:	781b      	ldrb	r3, [r3, #0]
 800077a:	2b03      	cmp	r3, #3
 800077c:	d803      	bhi.n	8000786 <setCursor+0x2a>
 800077e:	1dbb      	adds	r3, r7, #6
 8000780:	781b      	ldrb	r3, [r3, #0]
 8000782:	2b0f      	cmp	r3, #15
 8000784:	d901      	bls.n	800078a <setCursor+0x2e>
		return DISP_ERR;
 8000786:	2304      	movs	r3, #4
 8000788:	e020      	b.n	80007cc <setCursor+0x70>
	addres += row*0x20;
 800078a:	1dfb      	adds	r3, r7, #7
 800078c:	781b      	ldrb	r3, [r3, #0]
 800078e:	015b      	lsls	r3, r3, #5
 8000790:	b2d9      	uxtb	r1, r3
 8000792:	250f      	movs	r5, #15
 8000794:	197b      	adds	r3, r7, r5
 8000796:	197a      	adds	r2, r7, r5
 8000798:	7812      	ldrb	r2, [r2, #0]
 800079a:	188a      	adds	r2, r1, r2
 800079c:	701a      	strb	r2, [r3, #0]
	addres += col;
 800079e:	197b      	adds	r3, r7, r5
 80007a0:	1979      	adds	r1, r7, r5
 80007a2:	1dba      	adds	r2, r7, #6
 80007a4:	7809      	ldrb	r1, [r1, #0]
 80007a6:	7812      	ldrb	r2, [r2, #0]
 80007a8:	188a      	adds	r2, r1, r2
 80007aa:	701a      	strb	r2, [r3, #0]

	sendByte(0x38, INSTRUCTION);	//Function set RE = 0
 80007ac:	2101      	movs	r1, #1
 80007ae:	2038      	movs	r0, #56	; 0x38
 80007b0:	f7ff fee0 	bl	8000574 <sendByte>
	DISP_STATE ret = sendByte(addres, INSTRUCTION);
 80007b4:	260e      	movs	r6, #14
 80007b6:	19bc      	adds	r4, r7, r6
 80007b8:	197b      	adds	r3, r7, r5
 80007ba:	781b      	ldrb	r3, [r3, #0]
 80007bc:	2101      	movs	r1, #1
 80007be:	0018      	movs	r0, r3
 80007c0:	f7ff fed8 	bl	8000574 <sendByte>
 80007c4:	0003      	movs	r3, r0
 80007c6:	7023      	strb	r3, [r4, #0]
	return ret;
 80007c8:	19bb      	adds	r3, r7, r6
 80007ca:	781b      	ldrb	r3, [r3, #0]
}
 80007cc:	0018      	movs	r0, r3
 80007ce:	46bd      	mov	sp, r7
 80007d0:	b005      	add	sp, #20
 80007d2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080007d4 <writeChar>:

//_____Zapiš znak na dané souřadnice_____//
//-> argumenty: znak k zobrazení, řádek, sloupec
// !!! Pracuje v blokujícím módu !!!
DISP_STATE writeChar(char character, uint8_t row, uint8_t col)
{
 80007d4:	b5b0      	push	{r4, r5, r7, lr}
 80007d6:	b084      	sub	sp, #16
 80007d8:	af00      	add	r7, sp, #0
 80007da:	0004      	movs	r4, r0
 80007dc:	0008      	movs	r0, r1
 80007de:	0011      	movs	r1, r2
 80007e0:	1dfb      	adds	r3, r7, #7
 80007e2:	1c22      	adds	r2, r4, #0
 80007e4:	701a      	strb	r2, [r3, #0]
 80007e6:	1dbb      	adds	r3, r7, #6
 80007e8:	1c02      	adds	r2, r0, #0
 80007ea:	701a      	strb	r2, [r3, #0]
 80007ec:	1d7b      	adds	r3, r7, #5
 80007ee:	1c0a      	adds	r2, r1, #0
 80007f0:	701a      	strb	r2, [r3, #0]
	DISP_STATE ret = setCursor(row, col);
 80007f2:	250f      	movs	r5, #15
 80007f4:	197c      	adds	r4, r7, r5
 80007f6:	1d7b      	adds	r3, r7, #5
 80007f8:	781a      	ldrb	r2, [r3, #0]
 80007fa:	1dbb      	adds	r3, r7, #6
 80007fc:	781b      	ldrb	r3, [r3, #0]
 80007fe:	0011      	movs	r1, r2
 8000800:	0018      	movs	r0, r3
 8000802:	f7ff ffab 	bl	800075c <setCursor>
 8000806:	0003      	movs	r3, r0
 8000808:	7023      	strb	r3, [r4, #0]
	if(ret == DISP_OK)
 800080a:	197b      	adds	r3, r7, r5
 800080c:	781b      	ldrb	r3, [r3, #0]
 800080e:	2b00      	cmp	r3, #0
 8000810:	d10b      	bne.n	800082a <writeChar+0x56>
	{
		//doplnit úpravu dat podle převodní tabulky displeje
		ret = sendByte(character, DATA);
 8000812:	197c      	adds	r4, r7, r5
 8000814:	1dfb      	adds	r3, r7, #7
 8000816:	781b      	ldrb	r3, [r3, #0]
 8000818:	2102      	movs	r1, #2
 800081a:	0018      	movs	r0, r3
 800081c:	f7ff feaa 	bl	8000574 <sendByte>
 8000820:	0003      	movs	r3, r0
 8000822:	7023      	strb	r3, [r4, #0]
		return ret;
 8000824:	197b      	adds	r3, r7, r5
 8000826:	781b      	ldrb	r3, [r3, #0]
 8000828:	e002      	b.n	8000830 <writeChar+0x5c>
	}
	else
		return ret;
 800082a:	230f      	movs	r3, #15
 800082c:	18fb      	adds	r3, r7, r3
 800082e:	781b      	ldrb	r3, [r3, #0]
}
 8000830:	0018      	movs	r0, r3
 8000832:	46bd      	mov	sp, r7
 8000834:	b004      	add	sp, #16
 8000836:	bdb0      	pop	{r4, r5, r7, pc}

08000838 <HAL_GPIO_EXTI_Callback>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

//_____Buttons interrupt callback_____//
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	b082      	sub	sp, #8
 800083c:	af00      	add	r7, sp, #0
 800083e:	0002      	movs	r2, r0
 8000840:	1dbb      	adds	r3, r7, #6
 8000842:	801a      	strh	r2, [r3, #0]
	if(GPIO_Pin == BUTTON_0_Pin)
 8000844:	1dbb      	adds	r3, r7, #6
 8000846:	881a      	ldrh	r2, [r3, #0]
 8000848:	2380      	movs	r3, #128	; 0x80
 800084a:	009b      	lsls	r3, r3, #2
 800084c:	429a      	cmp	r2, r3
 800084e:	d106      	bne.n	800085e <HAL_GPIO_EXTI_Callback+0x26>
	{
		SetBit(buttonFlags, 0);
 8000850:	4b0b      	ldr	r3, [pc, #44]	; (8000880 <HAL_GPIO_EXTI_Callback+0x48>)
 8000852:	881b      	ldrh	r3, [r3, #0]
 8000854:	2201      	movs	r2, #1
 8000856:	4313      	orrs	r3, r2
 8000858:	b29a      	uxth	r2, r3
 800085a:	4b09      	ldr	r3, [pc, #36]	; (8000880 <HAL_GPIO_EXTI_Callback+0x48>)
 800085c:	801a      	strh	r2, [r3, #0]
	}
	if(GPIO_Pin == BUTTON_1_Pin)
 800085e:	1dbb      	adds	r3, r7, #6
 8000860:	881a      	ldrh	r2, [r3, #0]
 8000862:	2380      	movs	r3, #128	; 0x80
 8000864:	005b      	lsls	r3, r3, #1
 8000866:	429a      	cmp	r2, r3
 8000868:	d106      	bne.n	8000878 <HAL_GPIO_EXTI_Callback+0x40>
	{
		SetBit(buttonFlags, 2);
 800086a:	4b05      	ldr	r3, [pc, #20]	; (8000880 <HAL_GPIO_EXTI_Callback+0x48>)
 800086c:	881b      	ldrh	r3, [r3, #0]
 800086e:	2204      	movs	r2, #4
 8000870:	4313      	orrs	r3, r2
 8000872:	b29a      	uxth	r2, r3
 8000874:	4b02      	ldr	r3, [pc, #8]	; (8000880 <HAL_GPIO_EXTI_Callback+0x48>)
 8000876:	801a      	strh	r2, [r3, #0]
	}
}
 8000878:	46c0      	nop			; (mov r8, r8)
 800087a:	46bd      	mov	sp, r7
 800087c:	b002      	add	sp, #8
 800087e:	bd80      	pop	{r7, pc}
 8000880:	2000020e 	.word	0x2000020e

08000884 <HAL_TIM_PeriodElapsedCallback>:

//_____Timer interrupt callback_____//
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	b082      	sub	sp, #8
 8000888:	af00      	add	r7, sp, #0
 800088a:	6078      	str	r0, [r7, #4]
	if(htim == &htim14)	//Timer 14 -> každých 10 ms
 800088c:	687a      	ldr	r2, [r7, #4]
 800088e:	4b07      	ldr	r3, [pc, #28]	; (80008ac <HAL_TIM_PeriodElapsedCallback+0x28>)
 8000890:	429a      	cmp	r2, r3
 8000892:	d106      	bne.n	80008a2 <HAL_TIM_PeriodElapsedCallback+0x1e>
	{
		SetBit(timeFlags, 0);
 8000894:	4b06      	ldr	r3, [pc, #24]	; (80008b0 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8000896:	881b      	ldrh	r3, [r3, #0]
 8000898:	2201      	movs	r2, #1
 800089a:	4313      	orrs	r3, r2
 800089c:	b29a      	uxth	r2, r3
 800089e:	4b04      	ldr	r3, [pc, #16]	; (80008b0 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 80008a0:	801a      	strh	r2, [r3, #0]
	}
}
 80008a2:	46c0      	nop			; (mov r8, r8)
 80008a4:	46bd      	mov	sp, r7
 80008a6:	b002      	add	sp, #8
 80008a8:	bd80      	pop	{r7, pc}
 80008aa:	46c0      	nop			; (mov r8, r8)
 80008ac:	20000544 	.word	0x20000544
 80008b0:	2000020c 	.word	0x2000020c

080008b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008b8:	f000 ff90 	bl	80017dc <HAL_Init>

  /* USER CODE BEGIN Init */

  //__Buffery___//
  dispBuffer = createBuffer(100);
 80008bc:	2064      	movs	r0, #100	; 0x64
 80008be:	f000 fcc4 	bl	800124a <createBuffer>
 80008c2:	0002      	movs	r2, r0
 80008c4:	4b18      	ldr	r3, [pc, #96]	; (8000928 <main+0x74>)
 80008c6:	601a      	str	r2, [r3, #0]
  regBuffer = createBuffer(100);
 80008c8:	2064      	movs	r0, #100	; 0x64
 80008ca:	f000 fcbe 	bl	800124a <createBuffer>
 80008ce:	0002      	movs	r2, r0
 80008d0:	4b16      	ldr	r3, [pc, #88]	; (800092c <main+0x78>)
 80008d2:	601a      	str	r2, [r3, #0]
  USB_Rx_Buffer = createBuffer(500);
 80008d4:	23fa      	movs	r3, #250	; 0xfa
 80008d6:	005b      	lsls	r3, r3, #1
 80008d8:	0018      	movs	r0, r3
 80008da:	f000 fcb6 	bl	800124a <createBuffer>
 80008de:	0002      	movs	r2, r0
 80008e0:	4b13      	ldr	r3, [pc, #76]	; (8000930 <main+0x7c>)
 80008e2:	601a      	str	r2, [r3, #0]

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008e4:	f000 f82a 	bl	800093c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008e8:	f000 fa92 	bl	8000e10 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 80008ec:	f00a fbc2 	bl	800b074 <MX_USB_DEVICE_Init>
  MX_DMA_Init();
 80008f0:	f000 fa70 	bl	8000dd4 <MX_DMA_Init>
  MX_ADC_Init();
 80008f4:	f000 f88e 	bl	8000a14 <MX_ADC_Init>
  MX_SPI1_Init();
 80008f8:	f000 f9aa 	bl	8000c50 <MX_SPI1_Init>
  MX_USART3_UART_Init();
 80008fc:	f000 fa3a 	bl	8000d74 <MX_USART3_UART_Init>
  MX_TIM14_Init();
 8000900:	f000 f9ec 	bl	8000cdc <MX_TIM14_Init>
  /* USER CODE BEGIN 2 */
  //___Inicializace displeje___//
  dispInit();
 8000904:	f7ff fede 	bl	80006c4 <dispInit>
  //writeChar('a', 5, 1);
  // Start timer
  HAL_TIM_Base_Start_IT(&htim14);
 8000908:	4b0a      	ldr	r3, [pc, #40]	; (8000934 <main+0x80>)
 800090a:	0018      	movs	r0, r3
 800090c:	f005 fa4c 	bl	8005da8 <HAL_TIM_Base_Start_IT>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  if(MaskBit(timeFlags, 0))	// 10 ms
 8000910:	4b09      	ldr	r3, [pc, #36]	; (8000938 <main+0x84>)
 8000912:	881b      	ldrh	r3, [r3, #0]
 8000914:	001a      	movs	r2, r3
 8000916:	2301      	movs	r3, #1
 8000918:	4013      	ands	r3, r2
 800091a:	d0f9      	beq.n	8000910 <main+0x5c>
	  {
		  clkHandler();
 800091c:	f000 fb64 	bl	8000fe8 <clkHandler>
		  buttonDebounce();
 8000920:	f000 fbfe 	bl	8001120 <buttonDebounce>
	  if(MaskBit(timeFlags, 0))	// 10 ms
 8000924:	e7f4      	b.n	8000910 <main+0x5c>
 8000926:	46c0      	nop			; (mov r8, r8)
 8000928:	2000044c 	.word	0x2000044c
 800092c:	20000454 	.word	0x20000454
 8000930:	200010a8 	.word	0x200010a8
 8000934:	20000544 	.word	0x20000544
 8000938:	2000020c 	.word	0x2000020c

0800093c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800093c:	b590      	push	{r4, r7, lr}
 800093e:	b099      	sub	sp, #100	; 0x64
 8000940:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000942:	242c      	movs	r4, #44	; 0x2c
 8000944:	193b      	adds	r3, r7, r4
 8000946:	0018      	movs	r0, r3
 8000948:	2334      	movs	r3, #52	; 0x34
 800094a:	001a      	movs	r2, r3
 800094c:	2100      	movs	r1, #0
 800094e:	f00b f937 	bl	800bbc0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000952:	231c      	movs	r3, #28
 8000954:	18fb      	adds	r3, r7, r3
 8000956:	0018      	movs	r0, r3
 8000958:	2310      	movs	r3, #16
 800095a:	001a      	movs	r2, r3
 800095c:	2100      	movs	r1, #0
 800095e:	f00b f92f 	bl	800bbc0 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000962:	003b      	movs	r3, r7
 8000964:	0018      	movs	r0, r3
 8000966:	231c      	movs	r3, #28
 8000968:	001a      	movs	r2, r3
 800096a:	2100      	movs	r1, #0
 800096c:	f00b f928 	bl	800bbc0 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI14
 8000970:	0021      	movs	r1, r4
 8000972:	187b      	adds	r3, r7, r1
 8000974:	2232      	movs	r2, #50	; 0x32
 8000976:	601a      	str	r2, [r3, #0]
                              |RCC_OSCILLATORTYPE_HSI48;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000978:	187b      	adds	r3, r7, r1
 800097a:	2201      	movs	r2, #1
 800097c:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 800097e:	187b      	adds	r3, r7, r1
 8000980:	2201      	movs	r2, #1
 8000982:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 8000984:	187b      	adds	r3, r7, r1
 8000986:	2201      	movs	r2, #1
 8000988:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800098a:	187b      	adds	r3, r7, r1
 800098c:	2210      	movs	r2, #16
 800098e:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
 8000990:	187b      	adds	r3, r7, r1
 8000992:	2210      	movs	r2, #16
 8000994:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000996:	187b      	adds	r3, r7, r1
 8000998:	2202      	movs	r2, #2
 800099a:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800099c:	187b      	adds	r3, r7, r1
 800099e:	2280      	movs	r2, #128	; 0x80
 80009a0:	0212      	lsls	r2, r2, #8
 80009a2:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 80009a4:	187b      	adds	r3, r7, r1
 80009a6:	2280      	movs	r2, #128	; 0x80
 80009a8:	0352      	lsls	r2, r2, #13
 80009aa:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 80009ac:	187b      	adds	r3, r7, r1
 80009ae:	2200      	movs	r2, #0
 80009b0:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009b2:	187b      	adds	r3, r7, r1
 80009b4:	0018      	movs	r0, r3
 80009b6:	f003 fca5 	bl	8004304 <HAL_RCC_OscConfig>
 80009ba:	1e03      	subs	r3, r0, #0
 80009bc:	d001      	beq.n	80009c2 <SystemClock_Config+0x86>
  {
    Error_Handler();
 80009be:	f000 fc3f 	bl	8001240 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009c2:	211c      	movs	r1, #28
 80009c4:	187b      	adds	r3, r7, r1
 80009c6:	2207      	movs	r2, #7
 80009c8:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009ca:	187b      	adds	r3, r7, r1
 80009cc:	2202      	movs	r2, #2
 80009ce:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009d0:	187b      	adds	r3, r7, r1
 80009d2:	2200      	movs	r2, #0
 80009d4:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80009d6:	187b      	adds	r3, r7, r1
 80009d8:	2200      	movs	r2, #0
 80009da:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80009dc:	187b      	adds	r3, r7, r1
 80009de:	2101      	movs	r1, #1
 80009e0:	0018      	movs	r0, r3
 80009e2:	f004 f815 	bl	8004a10 <HAL_RCC_ClockConfig>
 80009e6:	1e03      	subs	r3, r0, #0
 80009e8:	d001      	beq.n	80009ee <SystemClock_Config+0xb2>
  {
    Error_Handler();
 80009ea:	f000 fc29 	bl	8001240 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80009ee:	003b      	movs	r3, r7
 80009f0:	2280      	movs	r2, #128	; 0x80
 80009f2:	0292      	lsls	r2, r2, #10
 80009f4:	601a      	str	r2, [r3, #0]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 80009f6:	003b      	movs	r3, r7
 80009f8:	2200      	movs	r2, #0
 80009fa:	619a      	str	r2, [r3, #24]

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80009fc:	003b      	movs	r3, r7
 80009fe:	0018      	movs	r0, r3
 8000a00:	f004 f982 	bl	8004d08 <HAL_RCCEx_PeriphCLKConfig>
 8000a04:	1e03      	subs	r3, r0, #0
 8000a06:	d001      	beq.n	8000a0c <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8000a08:	f000 fc1a 	bl	8001240 <Error_Handler>
  }
}
 8000a0c:	46c0      	nop			; (mov r8, r8)
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	b019      	add	sp, #100	; 0x64
 8000a12:	bd90      	pop	{r4, r7, pc}

08000a14 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b084      	sub	sp, #16
 8000a18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000a1a:	1d3b      	adds	r3, r7, #4
 8000a1c:	0018      	movs	r0, r3
 8000a1e:	230c      	movs	r3, #12
 8000a20:	001a      	movs	r2, r3
 8000a22:	2100      	movs	r1, #0
 8000a24:	f00b f8cc 	bl	800bbc0 <memset>
  /* USER CODE BEGIN ADC_Init 1 */

  /* USER CODE END ADC_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8000a28:	4b87      	ldr	r3, [pc, #540]	; (8000c48 <MX_ADC_Init+0x234>)
 8000a2a:	4a88      	ldr	r2, [pc, #544]	; (8000c4c <MX_ADC_Init+0x238>)
 8000a2c:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000a2e:	4b86      	ldr	r3, [pc, #536]	; (8000c48 <MX_ADC_Init+0x234>)
 8000a30:	2200      	movs	r2, #0
 8000a32:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8000a34:	4b84      	ldr	r3, [pc, #528]	; (8000c48 <MX_ADC_Init+0x234>)
 8000a36:	2200      	movs	r2, #0
 8000a38:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000a3a:	4b83      	ldr	r3, [pc, #524]	; (8000c48 <MX_ADC_Init+0x234>)
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8000a40:	4b81      	ldr	r3, [pc, #516]	; (8000c48 <MX_ADC_Init+0x234>)
 8000a42:	2201      	movs	r2, #1
 8000a44:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000a46:	4b80      	ldr	r3, [pc, #512]	; (8000c48 <MX_ADC_Init+0x234>)
 8000a48:	2204      	movs	r2, #4
 8000a4a:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 8000a4c:	4b7e      	ldr	r3, [pc, #504]	; (8000c48 <MX_ADC_Init+0x234>)
 8000a4e:	2200      	movs	r2, #0
 8000a50:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8000a52:	4b7d      	ldr	r3, [pc, #500]	; (8000c48 <MX_ADC_Init+0x234>)
 8000a54:	2200      	movs	r2, #0
 8000a56:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = DISABLE;
 8000a58:	4b7b      	ldr	r3, [pc, #492]	; (8000c48 <MX_ADC_Init+0x234>)
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	769a      	strb	r2, [r3, #26]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8000a5e:	4b7a      	ldr	r3, [pc, #488]	; (8000c48 <MX_ADC_Init+0x234>)
 8000a60:	2200      	movs	r2, #0
 8000a62:	76da      	strb	r2, [r3, #27]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000a64:	4b78      	ldr	r3, [pc, #480]	; (8000c48 <MX_ADC_Init+0x234>)
 8000a66:	22c2      	movs	r2, #194	; 0xc2
 8000a68:	32ff      	adds	r2, #255	; 0xff
 8000a6a:	61da      	str	r2, [r3, #28]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000a6c:	4b76      	ldr	r3, [pc, #472]	; (8000c48 <MX_ADC_Init+0x234>)
 8000a6e:	2200      	movs	r2, #0
 8000a70:	621a      	str	r2, [r3, #32]
  hadc.Init.DMAContinuousRequests = DISABLE;
 8000a72:	4b75      	ldr	r3, [pc, #468]	; (8000c48 <MX_ADC_Init+0x234>)
 8000a74:	2224      	movs	r2, #36	; 0x24
 8000a76:	2100      	movs	r1, #0
 8000a78:	5499      	strb	r1, [r3, r2]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000a7a:	4b73      	ldr	r3, [pc, #460]	; (8000c48 <MX_ADC_Init+0x234>)
 8000a7c:	2201      	movs	r2, #1
 8000a7e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8000a80:	4b71      	ldr	r3, [pc, #452]	; (8000c48 <MX_ADC_Init+0x234>)
 8000a82:	0018      	movs	r0, r3
 8000a84:	f000 ff32 	bl	80018ec <HAL_ADC_Init>
 8000a88:	1e03      	subs	r3, r0, #0
 8000a8a:	d001      	beq.n	8000a90 <MX_ADC_Init+0x7c>
  {
    Error_Handler();
 8000a8c:	f000 fbd8 	bl	8001240 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000a90:	1d3b      	adds	r3, r7, #4
 8000a92:	2200      	movs	r2, #0
 8000a94:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8000a96:	1d3b      	adds	r3, r7, #4
 8000a98:	2280      	movs	r2, #128	; 0x80
 8000a9a:	0152      	lsls	r2, r2, #5
 8000a9c:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000a9e:	1d3b      	adds	r3, r7, #4
 8000aa0:	2280      	movs	r2, #128	; 0x80
 8000aa2:	0552      	lsls	r2, r2, #21
 8000aa4:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000aa6:	1d3a      	adds	r2, r7, #4
 8000aa8:	4b67      	ldr	r3, [pc, #412]	; (8000c48 <MX_ADC_Init+0x234>)
 8000aaa:	0011      	movs	r1, r2
 8000aac:	0018      	movs	r0, r3
 8000aae:	f001 f85d 	bl	8001b6c <HAL_ADC_ConfigChannel>
 8000ab2:	1e03      	subs	r3, r0, #0
 8000ab4:	d001      	beq.n	8000aba <MX_ADC_Init+0xa6>
  {
    Error_Handler();
 8000ab6:	f000 fbc3 	bl	8001240 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000aba:	1d3b      	adds	r3, r7, #4
 8000abc:	2201      	movs	r2, #1
 8000abe:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000ac0:	1d3a      	adds	r2, r7, #4
 8000ac2:	4b61      	ldr	r3, [pc, #388]	; (8000c48 <MX_ADC_Init+0x234>)
 8000ac4:	0011      	movs	r1, r2
 8000ac6:	0018      	movs	r0, r3
 8000ac8:	f001 f850 	bl	8001b6c <HAL_ADC_ConfigChannel>
 8000acc:	1e03      	subs	r3, r0, #0
 8000ace:	d001      	beq.n	8000ad4 <MX_ADC_Init+0xc0>
  {
    Error_Handler();
 8000ad0:	f000 fbb6 	bl	8001240 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000ad4:	1d3b      	adds	r3, r7, #4
 8000ad6:	2202      	movs	r2, #2
 8000ad8:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000ada:	1d3a      	adds	r2, r7, #4
 8000adc:	4b5a      	ldr	r3, [pc, #360]	; (8000c48 <MX_ADC_Init+0x234>)
 8000ade:	0011      	movs	r1, r2
 8000ae0:	0018      	movs	r0, r3
 8000ae2:	f001 f843 	bl	8001b6c <HAL_ADC_ConfigChannel>
 8000ae6:	1e03      	subs	r3, r0, #0
 8000ae8:	d001      	beq.n	8000aee <MX_ADC_Init+0xda>
  {
    Error_Handler();
 8000aea:	f000 fba9 	bl	8001240 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000aee:	1d3b      	adds	r3, r7, #4
 8000af0:	2203      	movs	r2, #3
 8000af2:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000af4:	1d3a      	adds	r2, r7, #4
 8000af6:	4b54      	ldr	r3, [pc, #336]	; (8000c48 <MX_ADC_Init+0x234>)
 8000af8:	0011      	movs	r1, r2
 8000afa:	0018      	movs	r0, r3
 8000afc:	f001 f836 	bl	8001b6c <HAL_ADC_ConfigChannel>
 8000b00:	1e03      	subs	r3, r0, #0
 8000b02:	d001      	beq.n	8000b08 <MX_ADC_Init+0xf4>
  {
    Error_Handler();
 8000b04:	f000 fb9c 	bl	8001240 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000b08:	1d3b      	adds	r3, r7, #4
 8000b0a:	2204      	movs	r2, #4
 8000b0c:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000b0e:	1d3a      	adds	r2, r7, #4
 8000b10:	4b4d      	ldr	r3, [pc, #308]	; (8000c48 <MX_ADC_Init+0x234>)
 8000b12:	0011      	movs	r1, r2
 8000b14:	0018      	movs	r0, r3
 8000b16:	f001 f829 	bl	8001b6c <HAL_ADC_ConfigChannel>
 8000b1a:	1e03      	subs	r3, r0, #0
 8000b1c:	d001      	beq.n	8000b22 <MX_ADC_Init+0x10e>
  {
    Error_Handler();
 8000b1e:	f000 fb8f 	bl	8001240 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000b22:	1d3b      	adds	r3, r7, #4
 8000b24:	2205      	movs	r2, #5
 8000b26:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000b28:	1d3a      	adds	r2, r7, #4
 8000b2a:	4b47      	ldr	r3, [pc, #284]	; (8000c48 <MX_ADC_Init+0x234>)
 8000b2c:	0011      	movs	r1, r2
 8000b2e:	0018      	movs	r0, r3
 8000b30:	f001 f81c 	bl	8001b6c <HAL_ADC_ConfigChannel>
 8000b34:	1e03      	subs	r3, r0, #0
 8000b36:	d001      	beq.n	8000b3c <MX_ADC_Init+0x128>
  {
    Error_Handler();
 8000b38:	f000 fb82 	bl	8001240 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8000b3c:	1d3b      	adds	r3, r7, #4
 8000b3e:	2206      	movs	r2, #6
 8000b40:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000b42:	1d3a      	adds	r2, r7, #4
 8000b44:	4b40      	ldr	r3, [pc, #256]	; (8000c48 <MX_ADC_Init+0x234>)
 8000b46:	0011      	movs	r1, r2
 8000b48:	0018      	movs	r0, r3
 8000b4a:	f001 f80f 	bl	8001b6c <HAL_ADC_ConfigChannel>
 8000b4e:	1e03      	subs	r3, r0, #0
 8000b50:	d001      	beq.n	8000b56 <MX_ADC_Init+0x142>
  {
    Error_Handler();
 8000b52:	f000 fb75 	bl	8001240 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8000b56:	1d3b      	adds	r3, r7, #4
 8000b58:	2207      	movs	r2, #7
 8000b5a:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000b5c:	1d3a      	adds	r2, r7, #4
 8000b5e:	4b3a      	ldr	r3, [pc, #232]	; (8000c48 <MX_ADC_Init+0x234>)
 8000b60:	0011      	movs	r1, r2
 8000b62:	0018      	movs	r0, r3
 8000b64:	f001 f802 	bl	8001b6c <HAL_ADC_ConfigChannel>
 8000b68:	1e03      	subs	r3, r0, #0
 8000b6a:	d001      	beq.n	8000b70 <MX_ADC_Init+0x15c>
  {
    Error_Handler();
 8000b6c:	f000 fb68 	bl	8001240 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000b70:	1d3b      	adds	r3, r7, #4
 8000b72:	2208      	movs	r2, #8
 8000b74:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000b76:	1d3a      	adds	r2, r7, #4
 8000b78:	4b33      	ldr	r3, [pc, #204]	; (8000c48 <MX_ADC_Init+0x234>)
 8000b7a:	0011      	movs	r1, r2
 8000b7c:	0018      	movs	r0, r3
 8000b7e:	f000 fff5 	bl	8001b6c <HAL_ADC_ConfigChannel>
 8000b82:	1e03      	subs	r3, r0, #0
 8000b84:	d001      	beq.n	8000b8a <MX_ADC_Init+0x176>
  {
    Error_Handler();
 8000b86:	f000 fb5b 	bl	8001240 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000b8a:	1d3b      	adds	r3, r7, #4
 8000b8c:	2209      	movs	r2, #9
 8000b8e:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000b90:	1d3a      	adds	r2, r7, #4
 8000b92:	4b2d      	ldr	r3, [pc, #180]	; (8000c48 <MX_ADC_Init+0x234>)
 8000b94:	0011      	movs	r1, r2
 8000b96:	0018      	movs	r0, r3
 8000b98:	f000 ffe8 	bl	8001b6c <HAL_ADC_ConfigChannel>
 8000b9c:	1e03      	subs	r3, r0, #0
 8000b9e:	d001      	beq.n	8000ba4 <MX_ADC_Init+0x190>
  {
    Error_Handler();
 8000ba0:	f000 fb4e 	bl	8001240 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000ba4:	1d3b      	adds	r3, r7, #4
 8000ba6:	220a      	movs	r2, #10
 8000ba8:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000baa:	1d3a      	adds	r2, r7, #4
 8000bac:	4b26      	ldr	r3, [pc, #152]	; (8000c48 <MX_ADC_Init+0x234>)
 8000bae:	0011      	movs	r1, r2
 8000bb0:	0018      	movs	r0, r3
 8000bb2:	f000 ffdb 	bl	8001b6c <HAL_ADC_ConfigChannel>
 8000bb6:	1e03      	subs	r3, r0, #0
 8000bb8:	d001      	beq.n	8000bbe <MX_ADC_Init+0x1aa>
  {
    Error_Handler();
 8000bba:	f000 fb41 	bl	8001240 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8000bbe:	1d3b      	adds	r3, r7, #4
 8000bc0:	220b      	movs	r2, #11
 8000bc2:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000bc4:	1d3a      	adds	r2, r7, #4
 8000bc6:	4b20      	ldr	r3, [pc, #128]	; (8000c48 <MX_ADC_Init+0x234>)
 8000bc8:	0011      	movs	r1, r2
 8000bca:	0018      	movs	r0, r3
 8000bcc:	f000 ffce 	bl	8001b6c <HAL_ADC_ConfigChannel>
 8000bd0:	1e03      	subs	r3, r0, #0
 8000bd2:	d001      	beq.n	8000bd8 <MX_ADC_Init+0x1c4>
  {
    Error_Handler();
 8000bd4:	f000 fb34 	bl	8001240 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8000bd8:	1d3b      	adds	r3, r7, #4
 8000bda:	220c      	movs	r2, #12
 8000bdc:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000bde:	1d3a      	adds	r2, r7, #4
 8000be0:	4b19      	ldr	r3, [pc, #100]	; (8000c48 <MX_ADC_Init+0x234>)
 8000be2:	0011      	movs	r1, r2
 8000be4:	0018      	movs	r0, r3
 8000be6:	f000 ffc1 	bl	8001b6c <HAL_ADC_ConfigChannel>
 8000bea:	1e03      	subs	r3, r0, #0
 8000bec:	d001      	beq.n	8000bf2 <MX_ADC_Init+0x1de>
  {
    Error_Handler();
 8000bee:	f000 fb27 	bl	8001240 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8000bf2:	1d3b      	adds	r3, r7, #4
 8000bf4:	220d      	movs	r2, #13
 8000bf6:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000bf8:	1d3a      	adds	r2, r7, #4
 8000bfa:	4b13      	ldr	r3, [pc, #76]	; (8000c48 <MX_ADC_Init+0x234>)
 8000bfc:	0011      	movs	r1, r2
 8000bfe:	0018      	movs	r0, r3
 8000c00:	f000 ffb4 	bl	8001b6c <HAL_ADC_ConfigChannel>
 8000c04:	1e03      	subs	r3, r0, #0
 8000c06:	d001      	beq.n	8000c0c <MX_ADC_Init+0x1f8>
  {
    Error_Handler();
 8000c08:	f000 fb1a 	bl	8001240 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8000c0c:	1d3b      	adds	r3, r7, #4
 8000c0e:	220e      	movs	r2, #14
 8000c10:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000c12:	1d3a      	adds	r2, r7, #4
 8000c14:	4b0c      	ldr	r3, [pc, #48]	; (8000c48 <MX_ADC_Init+0x234>)
 8000c16:	0011      	movs	r1, r2
 8000c18:	0018      	movs	r0, r3
 8000c1a:	f000 ffa7 	bl	8001b6c <HAL_ADC_ConfigChannel>
 8000c1e:	1e03      	subs	r3, r0, #0
 8000c20:	d001      	beq.n	8000c26 <MX_ADC_Init+0x212>
  {
    Error_Handler();
 8000c22:	f000 fb0d 	bl	8001240 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8000c26:	1d3b      	adds	r3, r7, #4
 8000c28:	220f      	movs	r2, #15
 8000c2a:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000c2c:	1d3a      	adds	r2, r7, #4
 8000c2e:	4b06      	ldr	r3, [pc, #24]	; (8000c48 <MX_ADC_Init+0x234>)
 8000c30:	0011      	movs	r1, r2
 8000c32:	0018      	movs	r0, r3
 8000c34:	f000 ff9a 	bl	8001b6c <HAL_ADC_ConfigChannel>
 8000c38:	1e03      	subs	r3, r0, #0
 8000c3a:	d001      	beq.n	8000c40 <MX_ADC_Init+0x22c>
  {
    Error_Handler();
 8000c3c:	f000 fb00 	bl	8001240 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8000c40:	46c0      	nop			; (mov r8, r8)
 8000c42:	46bd      	mov	sp, r7
 8000c44:	b004      	add	sp, #16
 8000c46:	bd80      	pop	{r7, pc}
 8000c48:	200005d0 	.word	0x200005d0
 8000c4c:	40012400 	.word	0x40012400

08000c50 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000c54:	4b1e      	ldr	r3, [pc, #120]	; (8000cd0 <MX_SPI1_Init+0x80>)
 8000c56:	4a1f      	ldr	r2, [pc, #124]	; (8000cd4 <MX_SPI1_Init+0x84>)
 8000c58:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000c5a:	4b1d      	ldr	r3, [pc, #116]	; (8000cd0 <MX_SPI1_Init+0x80>)
 8000c5c:	2282      	movs	r2, #130	; 0x82
 8000c5e:	0052      	lsls	r2, r2, #1
 8000c60:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000c62:	4b1b      	ldr	r3, [pc, #108]	; (8000cd0 <MX_SPI1_Init+0x80>)
 8000c64:	2200      	movs	r2, #0
 8000c66:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000c68:	4b19      	ldr	r3, [pc, #100]	; (8000cd0 <MX_SPI1_Init+0x80>)
 8000c6a:	22e0      	movs	r2, #224	; 0xe0
 8000c6c:	00d2      	lsls	r2, r2, #3
 8000c6e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000c70:	4b17      	ldr	r3, [pc, #92]	; (8000cd0 <MX_SPI1_Init+0x80>)
 8000c72:	2200      	movs	r2, #0
 8000c74:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000c76:	4b16      	ldr	r3, [pc, #88]	; (8000cd0 <MX_SPI1_Init+0x80>)
 8000c78:	2200      	movs	r2, #0
 8000c7a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000c7c:	4b14      	ldr	r3, [pc, #80]	; (8000cd0 <MX_SPI1_Init+0x80>)
 8000c7e:	2280      	movs	r2, #128	; 0x80
 8000c80:	0092      	lsls	r2, r2, #2
 8000c82:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8000c84:	4b12      	ldr	r3, [pc, #72]	; (8000cd0 <MX_SPI1_Init+0x80>)
 8000c86:	2238      	movs	r2, #56	; 0x38
 8000c88:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000c8a:	4b11      	ldr	r3, [pc, #68]	; (8000cd0 <MX_SPI1_Init+0x80>)
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000c90:	4b0f      	ldr	r3, [pc, #60]	; (8000cd0 <MX_SPI1_Init+0x80>)
 8000c92:	2200      	movs	r2, #0
 8000c94:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000c96:	4b0e      	ldr	r3, [pc, #56]	; (8000cd0 <MX_SPI1_Init+0x80>)
 8000c98:	2200      	movs	r2, #0
 8000c9a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000c9c:	4b0c      	ldr	r3, [pc, #48]	; (8000cd0 <MX_SPI1_Init+0x80>)
 8000c9e:	2207      	movs	r2, #7
 8000ca0:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000ca2:	4b0b      	ldr	r3, [pc, #44]	; (8000cd0 <MX_SPI1_Init+0x80>)
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000ca8:	4b09      	ldr	r3, [pc, #36]	; (8000cd0 <MX_SPI1_Init+0x80>)
 8000caa:	2208      	movs	r2, #8
 8000cac:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000cae:	4b08      	ldr	r3, [pc, #32]	; (8000cd0 <MX_SPI1_Init+0x80>)
 8000cb0:	0018      	movs	r0, r3
 8000cb2:	f004 f927 	bl	8004f04 <HAL_SPI_Init>
 8000cb6:	1e03      	subs	r3, r0, #0
 8000cb8:	d001      	beq.n	8000cbe <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000cba:	f000 fac1 	bl	8001240 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */
  DISP_CS_OFF;
 8000cbe:	4b06      	ldr	r3, [pc, #24]	; (8000cd8 <MX_SPI1_Init+0x88>)
 8000cc0:	2201      	movs	r2, #1
 8000cc2:	2140      	movs	r1, #64	; 0x40
 8000cc4:	0018      	movs	r0, r3
 8000cc6:	f001 fc56 	bl	8002576 <HAL_GPIO_WritePin>
  /* USER CODE END SPI1_Init 2 */

}
 8000cca:	46c0      	nop			; (mov r8, r8)
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	bd80      	pop	{r7, pc}
 8000cd0:	200004e0 	.word	0x200004e0
 8000cd4:	40013000 	.word	0x40013000
 8000cd8:	48000400 	.word	0x48000400

08000cdc <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b088      	sub	sp, #32
 8000ce0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM14_Init 0 */

  /* USER CODE END TIM14_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8000ce2:	1d3b      	adds	r3, r7, #4
 8000ce4:	0018      	movs	r0, r3
 8000ce6:	231c      	movs	r3, #28
 8000ce8:	001a      	movs	r2, r3
 8000cea:	2100      	movs	r1, #0
 8000cec:	f00a ff68 	bl	800bbc0 <memset>

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8000cf0:	4b1d      	ldr	r3, [pc, #116]	; (8000d68 <MX_TIM14_Init+0x8c>)
 8000cf2:	4a1e      	ldr	r2, [pc, #120]	; (8000d6c <MX_TIM14_Init+0x90>)
 8000cf4:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 48-1;
 8000cf6:	4b1c      	ldr	r3, [pc, #112]	; (8000d68 <MX_TIM14_Init+0x8c>)
 8000cf8:	222f      	movs	r2, #47	; 0x2f
 8000cfa:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cfc:	4b1a      	ldr	r3, [pc, #104]	; (8000d68 <MX_TIM14_Init+0x8c>)
 8000cfe:	2200      	movs	r2, #0
 8000d00:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 10000-1;
 8000d02:	4b19      	ldr	r3, [pc, #100]	; (8000d68 <MX_TIM14_Init+0x8c>)
 8000d04:	4a1a      	ldr	r2, [pc, #104]	; (8000d70 <MX_TIM14_Init+0x94>)
 8000d06:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d08:	4b17      	ldr	r3, [pc, #92]	; (8000d68 <MX_TIM14_Init+0x8c>)
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d0e:	4b16      	ldr	r3, [pc, #88]	; (8000d68 <MX_TIM14_Init+0x8c>)
 8000d10:	2200      	movs	r2, #0
 8000d12:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8000d14:	4b14      	ldr	r3, [pc, #80]	; (8000d68 <MX_TIM14_Init+0x8c>)
 8000d16:	0018      	movs	r0, r3
 8000d18:	f004 fff6 	bl	8005d08 <HAL_TIM_Base_Init>
 8000d1c:	1e03      	subs	r3, r0, #0
 8000d1e:	d001      	beq.n	8000d24 <MX_TIM14_Init+0x48>
  {
    Error_Handler();
 8000d20:	f000 fa8e 	bl	8001240 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim14) != HAL_OK)
 8000d24:	4b10      	ldr	r3, [pc, #64]	; (8000d68 <MX_TIM14_Init+0x8c>)
 8000d26:	0018      	movs	r0, r3
 8000d28:	f005 f890 	bl	8005e4c <HAL_TIM_OC_Init>
 8000d2c:	1e03      	subs	r3, r0, #0
 8000d2e:	d001      	beq.n	8000d34 <MX_TIM14_Init+0x58>
  {
    Error_Handler();
 8000d30:	f000 fa86 	bl	8001240 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8000d34:	1d3b      	adds	r3, r7, #4
 8000d36:	2200      	movs	r2, #0
 8000d38:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8000d3a:	1d3b      	adds	r3, r7, #4
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000d40:	1d3b      	adds	r3, r7, #4
 8000d42:	2200      	movs	r2, #0
 8000d44:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000d46:	1d3b      	adds	r3, r7, #4
 8000d48:	2200      	movs	r2, #0
 8000d4a:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_OC_ConfigChannel(&htim14, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000d4c:	1d39      	adds	r1, r7, #4
 8000d4e:	4b06      	ldr	r3, [pc, #24]	; (8000d68 <MX_TIM14_Init+0x8c>)
 8000d50:	2200      	movs	r2, #0
 8000d52:	0018      	movs	r0, r3
 8000d54:	f005 f9e8 	bl	8006128 <HAL_TIM_OC_ConfigChannel>
 8000d58:	1e03      	subs	r3, r0, #0
 8000d5a:	d001      	beq.n	8000d60 <MX_TIM14_Init+0x84>
  {
    Error_Handler();
 8000d5c:	f000 fa70 	bl	8001240 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 8000d60:	46c0      	nop			; (mov r8, r8)
 8000d62:	46bd      	mov	sp, r7
 8000d64:	b008      	add	sp, #32
 8000d66:	bd80      	pop	{r7, pc}
 8000d68:	20000544 	.word	0x20000544
 8000d6c:	40002000 	.word	0x40002000
 8000d70:	0000270f 	.word	0x0000270f

08000d74 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000d78:	4b14      	ldr	r3, [pc, #80]	; (8000dcc <MX_USART3_UART_Init+0x58>)
 8000d7a:	4a15      	ldr	r2, [pc, #84]	; (8000dd0 <MX_USART3_UART_Init+0x5c>)
 8000d7c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 38400;
 8000d7e:	4b13      	ldr	r3, [pc, #76]	; (8000dcc <MX_USART3_UART_Init+0x58>)
 8000d80:	2296      	movs	r2, #150	; 0x96
 8000d82:	0212      	lsls	r2, r2, #8
 8000d84:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000d86:	4b11      	ldr	r3, [pc, #68]	; (8000dcc <MX_USART3_UART_Init+0x58>)
 8000d88:	2200      	movs	r2, #0
 8000d8a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000d8c:	4b0f      	ldr	r3, [pc, #60]	; (8000dcc <MX_USART3_UART_Init+0x58>)
 8000d8e:	2200      	movs	r2, #0
 8000d90:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000d92:	4b0e      	ldr	r3, [pc, #56]	; (8000dcc <MX_USART3_UART_Init+0x58>)
 8000d94:	2200      	movs	r2, #0
 8000d96:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000d98:	4b0c      	ldr	r3, [pc, #48]	; (8000dcc <MX_USART3_UART_Init+0x58>)
 8000d9a:	220c      	movs	r2, #12
 8000d9c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d9e:	4b0b      	ldr	r3, [pc, #44]	; (8000dcc <MX_USART3_UART_Init+0x58>)
 8000da0:	2200      	movs	r2, #0
 8000da2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000da4:	4b09      	ldr	r3, [pc, #36]	; (8000dcc <MX_USART3_UART_Init+0x58>)
 8000da6:	2200      	movs	r2, #0
 8000da8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000daa:	4b08      	ldr	r3, [pc, #32]	; (8000dcc <MX_USART3_UART_Init+0x58>)
 8000dac:	2200      	movs	r2, #0
 8000dae:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000db0:	4b06      	ldr	r3, [pc, #24]	; (8000dcc <MX_USART3_UART_Init+0x58>)
 8000db2:	2200      	movs	r2, #0
 8000db4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000db6:	4b05      	ldr	r3, [pc, #20]	; (8000dcc <MX_USART3_UART_Init+0x58>)
 8000db8:	0018      	movs	r0, r3
 8000dba:	f005 fcb9 	bl	8006730 <HAL_UART_Init>
 8000dbe:	1e03      	subs	r3, r0, #0
 8000dc0:	d001      	beq.n	8000dc6 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000dc2:	f000 fa3d 	bl	8001240 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000dc6:	46c0      	nop			; (mov r8, r8)
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	bd80      	pop	{r7, pc}
 8000dcc:	2000045c 	.word	0x2000045c
 8000dd0:	40004800 	.word	0x40004800

08000dd4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b082      	sub	sp, #8
 8000dd8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000dda:	4b0c      	ldr	r3, [pc, #48]	; (8000e0c <MX_DMA_Init+0x38>)
 8000ddc:	695a      	ldr	r2, [r3, #20]
 8000dde:	4b0b      	ldr	r3, [pc, #44]	; (8000e0c <MX_DMA_Init+0x38>)
 8000de0:	2101      	movs	r1, #1
 8000de2:	430a      	orrs	r2, r1
 8000de4:	615a      	str	r2, [r3, #20]
 8000de6:	4b09      	ldr	r3, [pc, #36]	; (8000e0c <MX_DMA_Init+0x38>)
 8000de8:	695b      	ldr	r3, [r3, #20]
 8000dea:	2201      	movs	r2, #1
 8000dec:	4013      	ands	r3, r2
 8000dee:	607b      	str	r3, [r7, #4]
 8000df0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000df2:	2200      	movs	r2, #0
 8000df4:	2100      	movs	r1, #0
 8000df6:	2009      	movs	r0, #9
 8000df8:	f001 f872 	bl	8001ee0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000dfc:	2009      	movs	r0, #9
 8000dfe:	f001 f884 	bl	8001f0a <HAL_NVIC_EnableIRQ>

}
 8000e02:	46c0      	nop			; (mov r8, r8)
 8000e04:	46bd      	mov	sp, r7
 8000e06:	b002      	add	sp, #8
 8000e08:	bd80      	pop	{r7, pc}
 8000e0a:	46c0      	nop			; (mov r8, r8)
 8000e0c:	40021000 	.word	0x40021000

08000e10 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e10:	b590      	push	{r4, r7, lr}
 8000e12:	b08b      	sub	sp, #44	; 0x2c
 8000e14:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e16:	2414      	movs	r4, #20
 8000e18:	193b      	adds	r3, r7, r4
 8000e1a:	0018      	movs	r0, r3
 8000e1c:	2314      	movs	r3, #20
 8000e1e:	001a      	movs	r2, r3
 8000e20:	2100      	movs	r1, #0
 8000e22:	f00a fecd 	bl	800bbc0 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000e26:	4b6b      	ldr	r3, [pc, #428]	; (8000fd4 <MX_GPIO_Init+0x1c4>)
 8000e28:	695a      	ldr	r2, [r3, #20]
 8000e2a:	4b6a      	ldr	r3, [pc, #424]	; (8000fd4 <MX_GPIO_Init+0x1c4>)
 8000e2c:	2180      	movs	r1, #128	; 0x80
 8000e2e:	03c9      	lsls	r1, r1, #15
 8000e30:	430a      	orrs	r2, r1
 8000e32:	615a      	str	r2, [r3, #20]
 8000e34:	4b67      	ldr	r3, [pc, #412]	; (8000fd4 <MX_GPIO_Init+0x1c4>)
 8000e36:	695a      	ldr	r2, [r3, #20]
 8000e38:	2380      	movs	r3, #128	; 0x80
 8000e3a:	03db      	lsls	r3, r3, #15
 8000e3c:	4013      	ands	r3, r2
 8000e3e:	613b      	str	r3, [r7, #16]
 8000e40:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e42:	4b64      	ldr	r3, [pc, #400]	; (8000fd4 <MX_GPIO_Init+0x1c4>)
 8000e44:	695a      	ldr	r2, [r3, #20]
 8000e46:	4b63      	ldr	r3, [pc, #396]	; (8000fd4 <MX_GPIO_Init+0x1c4>)
 8000e48:	2180      	movs	r1, #128	; 0x80
 8000e4a:	0309      	lsls	r1, r1, #12
 8000e4c:	430a      	orrs	r2, r1
 8000e4e:	615a      	str	r2, [r3, #20]
 8000e50:	4b60      	ldr	r3, [pc, #384]	; (8000fd4 <MX_GPIO_Init+0x1c4>)
 8000e52:	695a      	ldr	r2, [r3, #20]
 8000e54:	2380      	movs	r3, #128	; 0x80
 8000e56:	031b      	lsls	r3, r3, #12
 8000e58:	4013      	ands	r3, r2
 8000e5a:	60fb      	str	r3, [r7, #12]
 8000e5c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e5e:	4b5d      	ldr	r3, [pc, #372]	; (8000fd4 <MX_GPIO_Init+0x1c4>)
 8000e60:	695a      	ldr	r2, [r3, #20]
 8000e62:	4b5c      	ldr	r3, [pc, #368]	; (8000fd4 <MX_GPIO_Init+0x1c4>)
 8000e64:	2180      	movs	r1, #128	; 0x80
 8000e66:	0289      	lsls	r1, r1, #10
 8000e68:	430a      	orrs	r2, r1
 8000e6a:	615a      	str	r2, [r3, #20]
 8000e6c:	4b59      	ldr	r3, [pc, #356]	; (8000fd4 <MX_GPIO_Init+0x1c4>)
 8000e6e:	695a      	ldr	r2, [r3, #20]
 8000e70:	2380      	movs	r3, #128	; 0x80
 8000e72:	029b      	lsls	r3, r3, #10
 8000e74:	4013      	ands	r3, r2
 8000e76:	60bb      	str	r3, [r7, #8]
 8000e78:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e7a:	4b56      	ldr	r3, [pc, #344]	; (8000fd4 <MX_GPIO_Init+0x1c4>)
 8000e7c:	695a      	ldr	r2, [r3, #20]
 8000e7e:	4b55      	ldr	r3, [pc, #340]	; (8000fd4 <MX_GPIO_Init+0x1c4>)
 8000e80:	2180      	movs	r1, #128	; 0x80
 8000e82:	02c9      	lsls	r1, r1, #11
 8000e84:	430a      	orrs	r2, r1
 8000e86:	615a      	str	r2, [r3, #20]
 8000e88:	4b52      	ldr	r3, [pc, #328]	; (8000fd4 <MX_GPIO_Init+0x1c4>)
 8000e8a:	695a      	ldr	r2, [r3, #20]
 8000e8c:	2380      	movs	r3, #128	; 0x80
 8000e8e:	02db      	lsls	r3, r3, #11
 8000e90:	4013      	ands	r3, r2
 8000e92:	607b      	str	r3, [r7, #4]
 8000e94:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e96:	4b4f      	ldr	r3, [pc, #316]	; (8000fd4 <MX_GPIO_Init+0x1c4>)
 8000e98:	695a      	ldr	r2, [r3, #20]
 8000e9a:	4b4e      	ldr	r3, [pc, #312]	; (8000fd4 <MX_GPIO_Init+0x1c4>)
 8000e9c:	2180      	movs	r1, #128	; 0x80
 8000e9e:	0349      	lsls	r1, r1, #13
 8000ea0:	430a      	orrs	r2, r1
 8000ea2:	615a      	str	r2, [r3, #20]
 8000ea4:	4b4b      	ldr	r3, [pc, #300]	; (8000fd4 <MX_GPIO_Init+0x1c4>)
 8000ea6:	695a      	ldr	r2, [r3, #20]
 8000ea8:	2380      	movs	r3, #128	; 0x80
 8000eaa:	035b      	lsls	r3, r3, #13
 8000eac:	4013      	ands	r3, r2
 8000eae:	603b      	str	r3, [r7, #0]
 8000eb0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, _5V_BAT_OFF_Pin|DEBUG_Pin|SR_CLR_Pin|SR_RCLK_Pin
 8000eb2:	4949      	ldr	r1, [pc, #292]	; (8000fd8 <MX_GPIO_Init+0x1c8>)
 8000eb4:	4b49      	ldr	r3, [pc, #292]	; (8000fdc <MX_GPIO_Init+0x1cc>)
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	0018      	movs	r0, r3
 8000eba:	f001 fb5c 	bl	8002576 <HAL_GPIO_WritePin>
                          |SR_OE_Pin|DISP_CS_Pin|DISP_RST_Pin|BACKLIGHT_GREEN_Pin
                          |BACKLIGHT_WHITE_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LOAD_MAX_Pin|LOAD_MIN_Pin|EM_HEATER_CTRL_Pin|HEATER_CTRL_Pin
 8000ebe:	239e      	movs	r3, #158	; 0x9e
 8000ec0:	015b      	lsls	r3, r3, #5
 8000ec2:	4847      	ldr	r0, [pc, #284]	; (8000fe0 <MX_GPIO_Init+0x1d0>)
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	0019      	movs	r1, r3
 8000ec8:	f001 fb55 	bl	8002576 <HAL_GPIO_WritePin>
                          |BUZZER_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BACKLIGHT_RED_GPIO_Port, BACKLIGHT_RED_Pin, GPIO_PIN_RESET);
 8000ecc:	2380      	movs	r3, #128	; 0x80
 8000ece:	0219      	lsls	r1, r3, #8
 8000ed0:	2390      	movs	r3, #144	; 0x90
 8000ed2:	05db      	lsls	r3, r3, #23
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	0018      	movs	r0, r3
 8000ed8:	f001 fb4d 	bl	8002576 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : _5V_BAT_OFF_Pin DEBUG_Pin SR_CLR_Pin SR_RCLK_Pin
                           SR_OE_Pin DISP_CS_Pin DISP_RST_Pin BACKLIGHT_GREEN_Pin
                           BACKLIGHT_WHITE_Pin */
  GPIO_InitStruct.Pin = _5V_BAT_OFF_Pin|DEBUG_Pin|SR_CLR_Pin|SR_RCLK_Pin
 8000edc:	193b      	adds	r3, r7, r4
 8000ede:	4a3e      	ldr	r2, [pc, #248]	; (8000fd8 <MX_GPIO_Init+0x1c8>)
 8000ee0:	601a      	str	r2, [r3, #0]
                          |SR_OE_Pin|DISP_CS_Pin|DISP_RST_Pin|BACKLIGHT_GREEN_Pin
                          |BACKLIGHT_WHITE_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ee2:	193b      	adds	r3, r7, r4
 8000ee4:	2201      	movs	r2, #1
 8000ee6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ee8:	193b      	adds	r3, r7, r4
 8000eea:	2200      	movs	r2, #0
 8000eec:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eee:	193b      	adds	r3, r7, r4
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ef4:	193b      	adds	r3, r7, r4
 8000ef6:	4a39      	ldr	r2, [pc, #228]	; (8000fdc <MX_GPIO_Init+0x1cc>)
 8000ef8:	0019      	movs	r1, r3
 8000efa:	0010      	movs	r0, r2
 8000efc:	f001 f9a6 	bl	800224c <HAL_GPIO_Init>

  /*Configure GPIO pins : LOAD_MAX_Pin LOAD_MIN_Pin EM_HEATER_CTRL_Pin HEATER_CTRL_Pin
                           BUZZER_Pin */
  GPIO_InitStruct.Pin = LOAD_MAX_Pin|LOAD_MIN_Pin|EM_HEATER_CTRL_Pin|HEATER_CTRL_Pin
 8000f00:	0021      	movs	r1, r4
 8000f02:	187b      	adds	r3, r7, r1
 8000f04:	229e      	movs	r2, #158	; 0x9e
 8000f06:	0152      	lsls	r2, r2, #5
 8000f08:	601a      	str	r2, [r3, #0]
                          |BUZZER_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f0a:	000c      	movs	r4, r1
 8000f0c:	193b      	adds	r3, r7, r4
 8000f0e:	2201      	movs	r2, #1
 8000f10:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f12:	193b      	adds	r3, r7, r4
 8000f14:	2200      	movs	r2, #0
 8000f16:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f18:	193b      	adds	r3, r7, r4
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f1e:	193b      	adds	r3, r7, r4
 8000f20:	4a2f      	ldr	r2, [pc, #188]	; (8000fe0 <MX_GPIO_Init+0x1d0>)
 8000f22:	0019      	movs	r1, r3
 8000f24:	0010      	movs	r0, r2
 8000f26:	f001 f991 	bl	800224c <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON_1_Pin BUTTON_0_Pin */
  GPIO_InitStruct.Pin = BUTTON_1_Pin|BUTTON_0_Pin;
 8000f2a:	193b      	adds	r3, r7, r4
 8000f2c:	22c0      	movs	r2, #192	; 0xc0
 8000f2e:	0092      	lsls	r2, r2, #2
 8000f30:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000f32:	193b      	adds	r3, r7, r4
 8000f34:	2288      	movs	r2, #136	; 0x88
 8000f36:	0352      	lsls	r2, r2, #13
 8000f38:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000f3a:	193b      	adds	r3, r7, r4
 8000f3c:	2202      	movs	r2, #2
 8000f3e:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f40:	193a      	adds	r2, r7, r4
 8000f42:	2390      	movs	r3, #144	; 0x90
 8000f44:	05db      	lsls	r3, r3, #23
 8000f46:	0011      	movs	r1, r2
 8000f48:	0018      	movs	r0, r3
 8000f4a:	f001 f97f 	bl	800224c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000f4e:	193b      	adds	r3, r7, r4
 8000f50:	2280      	movs	r2, #128	; 0x80
 8000f52:	00d2      	lsls	r2, r2, #3
 8000f54:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f56:	193b      	adds	r3, r7, r4
 8000f58:	2200      	movs	r2, #0
 8000f5a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f5c:	193b      	adds	r3, r7, r4
 8000f5e:	2200      	movs	r2, #0
 8000f60:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000f62:	193a      	adds	r2, r7, r4
 8000f64:	2390      	movs	r3, #144	; 0x90
 8000f66:	05db      	lsls	r3, r3, #23
 8000f68:	0011      	movs	r1, r2
 8000f6a:	0018      	movs	r0, r3
 8000f6c:	f001 f96e 	bl	800224c <HAL_GPIO_Init>

  /*Configure GPIO pin : BACKLIGHT_RED_Pin */
  GPIO_InitStruct.Pin = BACKLIGHT_RED_Pin;
 8000f70:	0021      	movs	r1, r4
 8000f72:	187b      	adds	r3, r7, r1
 8000f74:	2280      	movs	r2, #128	; 0x80
 8000f76:	0212      	lsls	r2, r2, #8
 8000f78:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f7a:	000c      	movs	r4, r1
 8000f7c:	193b      	adds	r3, r7, r4
 8000f7e:	2201      	movs	r2, #1
 8000f80:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f82:	193b      	adds	r3, r7, r4
 8000f84:	2200      	movs	r2, #0
 8000f86:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f88:	193b      	adds	r3, r7, r4
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(BACKLIGHT_RED_GPIO_Port, &GPIO_InitStruct);
 8000f8e:	193a      	adds	r2, r7, r4
 8000f90:	2390      	movs	r3, #144	; 0x90
 8000f92:	05db      	lsls	r3, r3, #23
 8000f94:	0011      	movs	r1, r2
 8000f96:	0018      	movs	r0, r3
 8000f98:	f001 f958 	bl	800224c <HAL_GPIO_Init>

  /*Configure GPIO pin : CONNECTION_ERR_Pin */
  GPIO_InitStruct.Pin = CONNECTION_ERR_Pin;
 8000f9c:	193b      	adds	r3, r7, r4
 8000f9e:	2204      	movs	r2, #4
 8000fa0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fa2:	193b      	adds	r3, r7, r4
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fa8:	193b      	adds	r3, r7, r4
 8000faa:	2200      	movs	r2, #0
 8000fac:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(CONNECTION_ERR_GPIO_Port, &GPIO_InitStruct);
 8000fae:	193b      	adds	r3, r7, r4
 8000fb0:	4a0c      	ldr	r2, [pc, #48]	; (8000fe4 <MX_GPIO_Init+0x1d4>)
 8000fb2:	0019      	movs	r1, r3
 8000fb4:	0010      	movs	r0, r2
 8000fb6:	f001 f949 	bl	800224c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 8000fba:	2200      	movs	r2, #0
 8000fbc:	2100      	movs	r1, #0
 8000fbe:	2007      	movs	r0, #7
 8000fc0:	f000 ff8e 	bl	8001ee0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8000fc4:	2007      	movs	r0, #7
 8000fc6:	f000 ffa0 	bl	8001f0a <HAL_NVIC_EnableIRQ>

}
 8000fca:	46c0      	nop			; (mov r8, r8)
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	b00b      	add	sp, #44	; 0x2c
 8000fd0:	bd90      	pop	{r4, r7, pc}
 8000fd2:	46c0      	nop			; (mov r8, r8)
 8000fd4:	40021000 	.word	0x40021000
 8000fd8:	0000f3c4 	.word	0x0000f3c4
 8000fdc:	48000400 	.word	0x48000400
 8000fe0:	48000800 	.word	0x48000800
 8000fe4:	48000c00 	.word	0x48000c00

08000fe8 <clkHandler>:

/* USER CODE BEGIN 4 */

void clkHandler(void)
{
 8000fe8:	b590      	push	{r4, r7, lr}
 8000fea:	b08b      	sub	sp, #44	; 0x2c
 8000fec:	af02      	add	r7, sp, #8
	timeFlags &= ~(15);
 8000fee:	4b46      	ldr	r3, [pc, #280]	; (8001108 <clkHandler+0x120>)
 8000ff0:	881b      	ldrh	r3, [r3, #0]
 8000ff2:	220f      	movs	r2, #15
 8000ff4:	4393      	bics	r3, r2
 8000ff6:	b29a      	uxth	r2, r3
 8000ff8:	4b43      	ldr	r3, [pc, #268]	; (8001108 <clkHandler+0x120>)
 8000ffa:	801a      	strh	r2, [r3, #0]
	sysTime++;
 8000ffc:	4b43      	ldr	r3, [pc, #268]	; (800110c <clkHandler+0x124>)
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	1c5a      	adds	r2, r3, #1
 8001002:	4b42      	ldr	r3, [pc, #264]	; (800110c <clkHandler+0x124>)
 8001004:	601a      	str	r2, [r3, #0]
	if((sysTime % 100) == 0)	//1 s
 8001006:	4b41      	ldr	r3, [pc, #260]	; (800110c <clkHandler+0x124>)
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	2164      	movs	r1, #100	; 0x64
 800100c:	0018      	movs	r0, r3
 800100e:	f7ff f913 	bl	8000238 <__aeabi_uidivmod>
 8001012:	1e0b      	subs	r3, r1, #0
 8001014:	d10b      	bne.n	800102e <clkHandler+0x46>
	{
		sysTime_sec++;
 8001016:	4b3e      	ldr	r3, [pc, #248]	; (8001110 <clkHandler+0x128>)
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	1c5a      	adds	r2, r3, #1
 800101c:	4b3c      	ldr	r3, [pc, #240]	; (8001110 <clkHandler+0x128>)
 800101e:	601a      	str	r2, [r3, #0]
		SetBit(timeFlags, 1);
 8001020:	4b39      	ldr	r3, [pc, #228]	; (8001108 <clkHandler+0x120>)
 8001022:	881b      	ldrh	r3, [r3, #0]
 8001024:	2202      	movs	r2, #2
 8001026:	4313      	orrs	r3, r2
 8001028:	b29a      	uxth	r2, r3
 800102a:	4b37      	ldr	r3, [pc, #220]	; (8001108 <clkHandler+0x120>)
 800102c:	801a      	strh	r2, [r3, #0]
	}

	if(MaskBit(timeFlags, 1))
 800102e:	4b36      	ldr	r3, [pc, #216]	; (8001108 <clkHandler+0x120>)
 8001030:	881b      	ldrh	r3, [r3, #0]
 8001032:	001a      	movs	r2, r3
 8001034:	2302      	movs	r3, #2
 8001036:	4013      	ands	r3, r2
 8001038:	d045      	beq.n	80010c6 <clkHandler+0xde>
	{
		if((sysTime_sec % 60) == 0 && sysTime_sec != 0)	//1 min
 800103a:	4b35      	ldr	r3, [pc, #212]	; (8001110 <clkHandler+0x128>)
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	213c      	movs	r1, #60	; 0x3c
 8001040:	0018      	movs	r0, r3
 8001042:	f7ff f8f9 	bl	8000238 <__aeabi_uidivmod>
 8001046:	1e0b      	subs	r3, r1, #0
 8001048:	d112      	bne.n	8001070 <clkHandler+0x88>
 800104a:	4b31      	ldr	r3, [pc, #196]	; (8001110 <clkHandler+0x128>)
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	2b00      	cmp	r3, #0
 8001050:	d00e      	beq.n	8001070 <clkHandler+0x88>
		{
			sysTime_sec = 0;
 8001052:	4b2f      	ldr	r3, [pc, #188]	; (8001110 <clkHandler+0x128>)
 8001054:	2200      	movs	r2, #0
 8001056:	601a      	str	r2, [r3, #0]
			sysTime_min++;
 8001058:	4b2e      	ldr	r3, [pc, #184]	; (8001114 <clkHandler+0x12c>)
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	1c5a      	adds	r2, r3, #1
 800105e:	4b2d      	ldr	r3, [pc, #180]	; (8001114 <clkHandler+0x12c>)
 8001060:	601a      	str	r2, [r3, #0]
			SetBit(timeFlags, 2);
 8001062:	4b29      	ldr	r3, [pc, #164]	; (8001108 <clkHandler+0x120>)
 8001064:	881b      	ldrh	r3, [r3, #0]
 8001066:	2204      	movs	r2, #4
 8001068:	4313      	orrs	r3, r2
 800106a:	b29a      	uxth	r2, r3
 800106c:	4b26      	ldr	r3, [pc, #152]	; (8001108 <clkHandler+0x120>)
 800106e:	801a      	strh	r2, [r3, #0]
		}

		if(MaskBit(timeFlags, 2))
 8001070:	4b25      	ldr	r3, [pc, #148]	; (8001108 <clkHandler+0x120>)
 8001072:	881b      	ldrh	r3, [r3, #0]
 8001074:	001a      	movs	r2, r3
 8001076:	2304      	movs	r3, #4
 8001078:	4013      	ands	r3, r2
 800107a:	d024      	beq.n	80010c6 <clkHandler+0xde>
		{
			if((sysTime_min % 60) == 0 && sysTime_min != 0)	//1 min
 800107c:	4b25      	ldr	r3, [pc, #148]	; (8001114 <clkHandler+0x12c>)
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	213c      	movs	r1, #60	; 0x3c
 8001082:	0018      	movs	r0, r3
 8001084:	f7ff f8d8 	bl	8000238 <__aeabi_uidivmod>
 8001088:	1e0b      	subs	r3, r1, #0
 800108a:	d11c      	bne.n	80010c6 <clkHandler+0xde>
 800108c:	4b21      	ldr	r3, [pc, #132]	; (8001114 <clkHandler+0x12c>)
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	2b00      	cmp	r3, #0
 8001092:	d018      	beq.n	80010c6 <clkHandler+0xde>
			{

				sysTime_sec = 0;
 8001094:	4b1e      	ldr	r3, [pc, #120]	; (8001110 <clkHandler+0x128>)
 8001096:	2200      	movs	r2, #0
 8001098:	601a      	str	r2, [r3, #0]
				sysTime_min = 0;
 800109a:	4b1e      	ldr	r3, [pc, #120]	; (8001114 <clkHandler+0x12c>)
 800109c:	2200      	movs	r2, #0
 800109e:	601a      	str	r2, [r3, #0]
				sysTime_hour++;
 80010a0:	4b1d      	ldr	r3, [pc, #116]	; (8001118 <clkHandler+0x130>)
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	1c5a      	adds	r2, r3, #1
 80010a6:	4b1c      	ldr	r3, [pc, #112]	; (8001118 <clkHandler+0x130>)
 80010a8:	601a      	str	r2, [r3, #0]
				SetBit(timeFlags, 3);
 80010aa:	4b17      	ldr	r3, [pc, #92]	; (8001108 <clkHandler+0x120>)
 80010ac:	881b      	ldrh	r3, [r3, #0]
 80010ae:	2208      	movs	r2, #8
 80010b0:	4313      	orrs	r3, r2
 80010b2:	b29a      	uxth	r2, r3
 80010b4:	4b14      	ldr	r3, [pc, #80]	; (8001108 <clkHandler+0x120>)
 80010b6:	801a      	strh	r2, [r3, #0]
				if(sysTime_hour >= 23)
 80010b8:	4b17      	ldr	r3, [pc, #92]	; (8001118 <clkHandler+0x130>)
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	2b16      	cmp	r3, #22
 80010be:	d902      	bls.n	80010c6 <clkHandler+0xde>
					sysTime_hour = 0;
 80010c0:	4b15      	ldr	r3, [pc, #84]	; (8001118 <clkHandler+0x130>)
 80010c2:	2200      	movs	r2, #0
 80010c4:	601a      	str	r2, [r3, #0]
			}
		}
	}

#ifdef __DEBUG_TIME__
	if(MaskBit(timeFlags, 1))
 80010c6:	4b10      	ldr	r3, [pc, #64]	; (8001108 <clkHandler+0x120>)
 80010c8:	881b      	ldrh	r3, [r3, #0]
 80010ca:	001a      	movs	r2, r3
 80010cc:	2302      	movs	r3, #2
 80010ce:	4013      	ands	r3, r2
 80010d0:	d016      	beq.n	8001100 <clkHandler+0x118>
	{
		char timeStamp[30];
		sprintf(timeStamp, "%d : %d : %d\n", sysTime_hour, sysTime_min, sysTime_sec);
 80010d2:	4b11      	ldr	r3, [pc, #68]	; (8001118 <clkHandler+0x130>)
 80010d4:	681a      	ldr	r2, [r3, #0]
 80010d6:	4b0f      	ldr	r3, [pc, #60]	; (8001114 <clkHandler+0x12c>)
 80010d8:	681c      	ldr	r4, [r3, #0]
 80010da:	4b0d      	ldr	r3, [pc, #52]	; (8001110 <clkHandler+0x128>)
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	490f      	ldr	r1, [pc, #60]	; (800111c <clkHandler+0x134>)
 80010e0:	0038      	movs	r0, r7
 80010e2:	9300      	str	r3, [sp, #0]
 80010e4:	0023      	movs	r3, r4
 80010e6:	f00a fe2d 	bl	800bd44 <siprintf>
		CDC_Transmit_FS(timeStamp, strlen(timeStamp));	//odešli čas
 80010ea:	003b      	movs	r3, r7
 80010ec:	0018      	movs	r0, r3
 80010ee:	f7ff f80b 	bl	8000108 <strlen>
 80010f2:	0003      	movs	r3, r0
 80010f4:	b29a      	uxth	r2, r3
 80010f6:	003b      	movs	r3, r7
 80010f8:	0011      	movs	r1, r2
 80010fa:	0018      	movs	r0, r3
 80010fc:	f00a f866 	bl	800b1cc <CDC_Transmit_FS>
	}
#endif
}
 8001100:	46c0      	nop			; (mov r8, r8)
 8001102:	46bd      	mov	sp, r7
 8001104:	b009      	add	sp, #36	; 0x24
 8001106:	bd90      	pop	{r4, r7, pc}
 8001108:	2000020c 	.word	0x2000020c
 800110c:	200001fc 	.word	0x200001fc
 8001110:	20000200 	.word	0x20000200
 8001114:	20000204 	.word	0x20000204
 8001118:	20000208 	.word	0x20000208
 800111c:	0800c434 	.word	0x0800c434

08001120 <buttonDebounce>:

void buttonDebounce()
{
 8001120:	b580      	push	{r7, lr}
 8001122:	af00      	add	r7, sp, #0
	if(MaskBit(buttonFlags, 0))
 8001124:	4b42      	ldr	r3, [pc, #264]	; (8001230 <buttonDebounce+0x110>)
 8001126:	881b      	ldrh	r3, [r3, #0]
 8001128:	001a      	movs	r2, r3
 800112a:	2301      	movs	r3, #1
 800112c:	4013      	ands	r3, r2
 800112e:	d03c      	beq.n	80011aa <buttonDebounce+0x8a>
	{
		if(HAL_GPIO_ReadPin(BUTTON_0_GPIO_Port,BUTTON_0_Pin) == GPIO_PIN_SET)
 8001130:	2380      	movs	r3, #128	; 0x80
 8001132:	009a      	lsls	r2, r3, #2
 8001134:	2390      	movs	r3, #144	; 0x90
 8001136:	05db      	lsls	r3, r3, #23
 8001138:	0011      	movs	r1, r2
 800113a:	0018      	movs	r0, r3
 800113c:	f001 f9fe 	bl	800253c <HAL_GPIO_ReadPin>
 8001140:	0003      	movs	r3, r0
 8001142:	2b01      	cmp	r3, #1
 8001144:	d106      	bne.n	8001154 <buttonDebounce+0x34>
		{
			button0_Debounce++;
 8001146:	4b3b      	ldr	r3, [pc, #236]	; (8001234 <buttonDebounce+0x114>)
 8001148:	781b      	ldrb	r3, [r3, #0]
 800114a:	3301      	adds	r3, #1
 800114c:	b2da      	uxtb	r2, r3
 800114e:	4b39      	ldr	r3, [pc, #228]	; (8001234 <buttonDebounce+0x114>)
 8001150:	701a      	strb	r2, [r3, #0]
 8001152:	e009      	b.n	8001168 <buttonDebounce+0x48>
		}
		else
		{
			button0_Debounce = 0;
 8001154:	4b37      	ldr	r3, [pc, #220]	; (8001234 <buttonDebounce+0x114>)
 8001156:	2200      	movs	r2, #0
 8001158:	701a      	strb	r2, [r3, #0]
			ClearBit(buttonFlags,0);
 800115a:	4b35      	ldr	r3, [pc, #212]	; (8001230 <buttonDebounce+0x110>)
 800115c:	881b      	ldrh	r3, [r3, #0]
 800115e:	2201      	movs	r2, #1
 8001160:	4393      	bics	r3, r2
 8001162:	b29a      	uxth	r2, r3
 8001164:	4b32      	ldr	r3, [pc, #200]	; (8001230 <buttonDebounce+0x110>)
 8001166:	801a      	strh	r2, [r3, #0]
		}
		if(button0_Debounce >= 5)
 8001168:	4b32      	ldr	r3, [pc, #200]	; (8001234 <buttonDebounce+0x114>)
 800116a:	781b      	ldrb	r3, [r3, #0]
 800116c:	2b04      	cmp	r3, #4
 800116e:	d91c      	bls.n	80011aa <buttonDebounce+0x8a>
		{
			SetBit(buttonFlags, 1);
 8001170:	4b2f      	ldr	r3, [pc, #188]	; (8001230 <buttonDebounce+0x110>)
 8001172:	881b      	ldrh	r3, [r3, #0]
 8001174:	2202      	movs	r2, #2
 8001176:	4313      	orrs	r3, r2
 8001178:	b29a      	uxth	r2, r3
 800117a:	4b2d      	ldr	r3, [pc, #180]	; (8001230 <buttonDebounce+0x110>)
 800117c:	801a      	strh	r2, [r3, #0]
			ClearBit(buttonFlags, 0);
 800117e:	4b2c      	ldr	r3, [pc, #176]	; (8001230 <buttonDebounce+0x110>)
 8001180:	881b      	ldrh	r3, [r3, #0]
 8001182:	2201      	movs	r2, #1
 8001184:	4393      	bics	r3, r2
 8001186:	b29a      	uxth	r2, r3
 8001188:	4b29      	ldr	r3, [pc, #164]	; (8001230 <buttonDebounce+0x110>)
 800118a:	801a      	strh	r2, [r3, #0]
			button0_Debounce = 0;
 800118c:	4b29      	ldr	r3, [pc, #164]	; (8001234 <buttonDebounce+0x114>)
 800118e:	2200      	movs	r2, #0
 8001190:	701a      	strb	r2, [r3, #0]

#ifdef __DEBUG_BUTT__
			HAL_GPIO_TogglePin(BACKLIGHT_GREEN_GPIO_Port, BACKLIGHT_GREEN_Pin);
 8001192:	2380      	movs	r3, #128	; 0x80
 8001194:	005b      	lsls	r3, r3, #1
 8001196:	4a28      	ldr	r2, [pc, #160]	; (8001238 <buttonDebounce+0x118>)
 8001198:	0019      	movs	r1, r3
 800119a:	0010      	movs	r0, r2
 800119c:	f001 fa08 	bl	80025b0 <HAL_GPIO_TogglePin>
			writeChar('a', 1, 5);
 80011a0:	2205      	movs	r2, #5
 80011a2:	2101      	movs	r1, #1
 80011a4:	2061      	movs	r0, #97	; 0x61
 80011a6:	f7ff fb15 	bl	80007d4 <writeChar>
#endif
		}
	}

	if(MaskBit(buttonFlags, 2))
 80011aa:	4b21      	ldr	r3, [pc, #132]	; (8001230 <buttonDebounce+0x110>)
 80011ac:	881b      	ldrh	r3, [r3, #0]
 80011ae:	001a      	movs	r2, r3
 80011b0:	2304      	movs	r3, #4
 80011b2:	4013      	ands	r3, r2
 80011b4:	d038      	beq.n	8001228 <buttonDebounce+0x108>
	{
		if(HAL_GPIO_ReadPin(BUTTON_1_GPIO_Port,BUTTON_1_Pin) == GPIO_PIN_SET)
 80011b6:	2380      	movs	r3, #128	; 0x80
 80011b8:	005a      	lsls	r2, r3, #1
 80011ba:	2390      	movs	r3, #144	; 0x90
 80011bc:	05db      	lsls	r3, r3, #23
 80011be:	0011      	movs	r1, r2
 80011c0:	0018      	movs	r0, r3
 80011c2:	f001 f9bb 	bl	800253c <HAL_GPIO_ReadPin>
 80011c6:	0003      	movs	r3, r0
 80011c8:	2b01      	cmp	r3, #1
 80011ca:	d106      	bne.n	80011da <buttonDebounce+0xba>
		{
			button1_Debounce++;
 80011cc:	4b1b      	ldr	r3, [pc, #108]	; (800123c <buttonDebounce+0x11c>)
 80011ce:	781b      	ldrb	r3, [r3, #0]
 80011d0:	3301      	adds	r3, #1
 80011d2:	b2da      	uxtb	r2, r3
 80011d4:	4b19      	ldr	r3, [pc, #100]	; (800123c <buttonDebounce+0x11c>)
 80011d6:	701a      	strb	r2, [r3, #0]
 80011d8:	e009      	b.n	80011ee <buttonDebounce+0xce>
		}
		else
		{
			button1_Debounce = 0;
 80011da:	4b18      	ldr	r3, [pc, #96]	; (800123c <buttonDebounce+0x11c>)
 80011dc:	2200      	movs	r2, #0
 80011de:	701a      	strb	r2, [r3, #0]
			ClearBit(buttonFlags,2);
 80011e0:	4b13      	ldr	r3, [pc, #76]	; (8001230 <buttonDebounce+0x110>)
 80011e2:	881b      	ldrh	r3, [r3, #0]
 80011e4:	2204      	movs	r2, #4
 80011e6:	4393      	bics	r3, r2
 80011e8:	b29a      	uxth	r2, r3
 80011ea:	4b11      	ldr	r3, [pc, #68]	; (8001230 <buttonDebounce+0x110>)
 80011ec:	801a      	strh	r2, [r3, #0]
		}
		if(button1_Debounce >= 5)
 80011ee:	4b13      	ldr	r3, [pc, #76]	; (800123c <buttonDebounce+0x11c>)
 80011f0:	781b      	ldrb	r3, [r3, #0]
 80011f2:	2b04      	cmp	r3, #4
 80011f4:	d918      	bls.n	8001228 <buttonDebounce+0x108>
		{
			SetBit(buttonFlags, 3);
 80011f6:	4b0e      	ldr	r3, [pc, #56]	; (8001230 <buttonDebounce+0x110>)
 80011f8:	881b      	ldrh	r3, [r3, #0]
 80011fa:	2208      	movs	r2, #8
 80011fc:	4313      	orrs	r3, r2
 80011fe:	b29a      	uxth	r2, r3
 8001200:	4b0b      	ldr	r3, [pc, #44]	; (8001230 <buttonDebounce+0x110>)
 8001202:	801a      	strh	r2, [r3, #0]
			ClearBit(buttonFlags, 2);
 8001204:	4b0a      	ldr	r3, [pc, #40]	; (8001230 <buttonDebounce+0x110>)
 8001206:	881b      	ldrh	r3, [r3, #0]
 8001208:	2204      	movs	r2, #4
 800120a:	4393      	bics	r3, r2
 800120c:	b29a      	uxth	r2, r3
 800120e:	4b08      	ldr	r3, [pc, #32]	; (8001230 <buttonDebounce+0x110>)
 8001210:	801a      	strh	r2, [r3, #0]
			button1_Debounce = 0;
 8001212:	4b0a      	ldr	r3, [pc, #40]	; (800123c <buttonDebounce+0x11c>)
 8001214:	2200      	movs	r2, #0
 8001216:	701a      	strb	r2, [r3, #0]

#ifdef __DEBUG_BUTT__
			HAL_GPIO_TogglePin(BACKLIGHT_RED_GPIO_Port, BACKLIGHT_RED_Pin);
 8001218:	2380      	movs	r3, #128	; 0x80
 800121a:	021a      	lsls	r2, r3, #8
 800121c:	2390      	movs	r3, #144	; 0x90
 800121e:	05db      	lsls	r3, r3, #23
 8001220:	0011      	movs	r1, r2
 8001222:	0018      	movs	r0, r3
 8001224:	f001 f9c4 	bl	80025b0 <HAL_GPIO_TogglePin>
#endif
		}
	}
}
 8001228:	46c0      	nop			; (mov r8, r8)
 800122a:	46bd      	mov	sp, r7
 800122c:	bd80      	pop	{r7, pc}
 800122e:	46c0      	nop			; (mov r8, r8)
 8001230:	2000020e 	.word	0x2000020e
 8001234:	20000210 	.word	0x20000210
 8001238:	48000400 	.word	0x48000400
 800123c:	20000211 	.word	0x20000211

08001240 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001244:	b672      	cpsid	i
}
 8001246:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001248:	e7fe      	b.n	8001248 <Error_Handler+0x8>

0800124a <createBuffer>:

//_____Vytvoří buffer v dynamické paměti_____//
//Návratová hodnota - ukazatel na vytvořený buffer (NULL = chyba)
//Argument - velikost bufferu
RING_BUFFER* createBuffer(int size)
{
 800124a:	b580      	push	{r7, lr}
 800124c:	b084      	sub	sp, #16
 800124e:	af00      	add	r7, sp, #0
 8001250:	6078      	str	r0, [r7, #4]
	RING_BUFFER* buffer = (RING_BUFFER*) malloc(sizeof(RING_BUFFER));
 8001252:	2018      	movs	r0, #24
 8001254:	f00a fca0 	bl	800bb98 <malloc>
 8001258:	0003      	movs	r3, r0
 800125a:	60fb      	str	r3, [r7, #12]
	if(buffer == NULL)			//Nepodařilo se alokovat paměť
 800125c:	68fb      	ldr	r3, [r7, #12]
 800125e:	2b00      	cmp	r3, #0
 8001260:	d101      	bne.n	8001266 <createBuffer+0x1c>
	{
		return NULL;
 8001262:	2300      	movs	r3, #0
 8001264:	e022      	b.n	80012ac <createBuffer+0x62>
	}
	buffer->buffer = (char*) malloc(size * sizeof(char));
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	0018      	movs	r0, r3
 800126a:	f00a fc95 	bl	800bb98 <malloc>
 800126e:	0003      	movs	r3, r0
 8001270:	001a      	movs	r2, r3
 8001272:	68fb      	ldr	r3, [r7, #12]
 8001274:	601a      	str	r2, [r3, #0]
	if(buffer->buffer == NULL)	//Nepodařilo se alokovat paměť
 8001276:	68fb      	ldr	r3, [r7, #12]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	2b00      	cmp	r3, #0
 800127c:	d105      	bne.n	800128a <createBuffer+0x40>
	{
		free(buffer);
 800127e:	68fb      	ldr	r3, [r7, #12]
 8001280:	0018      	movs	r0, r3
 8001282:	f00a fc93 	bl	800bbac <free>
		return NULL;
 8001286:	2300      	movs	r3, #0
 8001288:	e010      	b.n	80012ac <createBuffer+0x62>
	}

	buffer->bufferSize = size;
 800128a:	68fb      	ldr	r3, [r7, #12]
 800128c:	687a      	ldr	r2, [r7, #4]
 800128e:	605a      	str	r2, [r3, #4]
	buffer->filled = 0;
 8001290:	68fb      	ldr	r3, [r7, #12]
 8001292:	2200      	movs	r2, #0
 8001294:	609a      	str	r2, [r3, #8]
	buffer->first = 0;
 8001296:	68fb      	ldr	r3, [r7, #12]
 8001298:	2200      	movs	r2, #0
 800129a:	60da      	str	r2, [r3, #12]
	buffer->last = size-1;
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	1e5a      	subs	r2, r3, #1
 80012a0:	68fb      	ldr	r3, [r7, #12]
 80012a2:	611a      	str	r2, [r3, #16]
	buffer->status = BUFFER_EMPTY;
 80012a4:	68fb      	ldr	r3, [r7, #12]
 80012a6:	2201      	movs	r2, #1
 80012a8:	751a      	strb	r2, [r3, #20]

	return buffer;
 80012aa:	68fb      	ldr	r3, [r7, #12]
}
 80012ac:	0018      	movs	r0, r3
 80012ae:	46bd      	mov	sp, r7
 80012b0:	b004      	add	sp, #16
 80012b2:	bd80      	pop	{r7, pc}

080012b4 <push>:
	return buffer->status;
}

//_____Uloží znak do bufferu_____//
BUFFER_STATE push(RING_BUFFER* buffer, char character)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b082      	sub	sp, #8
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]
 80012bc:	000a      	movs	r2, r1
 80012be:	1cfb      	adds	r3, r7, #3
 80012c0:	701a      	strb	r2, [r3, #0]
	if(buffer->status == BUFFER_FULL)
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	7d1b      	ldrb	r3, [r3, #20]
 80012c6:	2b02      	cmp	r3, #2
 80012c8:	d101      	bne.n	80012ce <push+0x1a>
		return BUFFER_FULL;
 80012ca:	2302      	movs	r3, #2
 80012cc:	e025      	b.n	800131a <push+0x66>

	buffer->last = (buffer->last + 1) % (buffer->bufferSize);
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	691b      	ldr	r3, [r3, #16]
 80012d2:	1c5a      	adds	r2, r3, #1
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	685b      	ldr	r3, [r3, #4]
 80012d8:	0019      	movs	r1, r3
 80012da:	0010      	movs	r0, r2
 80012dc:	f7ff f896 	bl	800040c <__aeabi_idivmod>
 80012e0:	000b      	movs	r3, r1
 80012e2:	001a      	movs	r2, r3
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	611a      	str	r2, [r3, #16]
	buffer->filled++;
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	689b      	ldr	r3, [r3, #8]
 80012ec:	1c5a      	adds	r2, r3, #1
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	609a      	str	r2, [r3, #8]
	buffer->buffer[buffer->last] = character;
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	681a      	ldr	r2, [r3, #0]
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	691b      	ldr	r3, [r3, #16]
 80012fa:	18d3      	adds	r3, r2, r3
 80012fc:	1cfa      	adds	r2, r7, #3
 80012fe:	7812      	ldrb	r2, [r2, #0]
 8001300:	701a      	strb	r2, [r3, #0]
	buffer->status = (buffer->filled >= buffer->bufferSize)? BUFFER_FULL : BUFFER_OK;
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	689a      	ldr	r2, [r3, #8]
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	685b      	ldr	r3, [r3, #4]
 800130a:	429a      	cmp	r2, r3
 800130c:	db01      	blt.n	8001312 <push+0x5e>
 800130e:	2202      	movs	r2, #2
 8001310:	e000      	b.n	8001314 <push+0x60>
 8001312:	2200      	movs	r2, #0
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	751a      	strb	r2, [r3, #20]

	return BUFFER_OK;
 8001318:	2300      	movs	r3, #0
}
 800131a:	0018      	movs	r0, r3
 800131c:	46bd      	mov	sp, r7
 800131e:	b002      	add	sp, #8
 8001320:	bd80      	pop	{r7, pc}
	...

08001324 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	b082      	sub	sp, #8
 8001328:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800132a:	4b0f      	ldr	r3, [pc, #60]	; (8001368 <HAL_MspInit+0x44>)
 800132c:	699a      	ldr	r2, [r3, #24]
 800132e:	4b0e      	ldr	r3, [pc, #56]	; (8001368 <HAL_MspInit+0x44>)
 8001330:	2101      	movs	r1, #1
 8001332:	430a      	orrs	r2, r1
 8001334:	619a      	str	r2, [r3, #24]
 8001336:	4b0c      	ldr	r3, [pc, #48]	; (8001368 <HAL_MspInit+0x44>)
 8001338:	699b      	ldr	r3, [r3, #24]
 800133a:	2201      	movs	r2, #1
 800133c:	4013      	ands	r3, r2
 800133e:	607b      	str	r3, [r7, #4]
 8001340:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001342:	4b09      	ldr	r3, [pc, #36]	; (8001368 <HAL_MspInit+0x44>)
 8001344:	69da      	ldr	r2, [r3, #28]
 8001346:	4b08      	ldr	r3, [pc, #32]	; (8001368 <HAL_MspInit+0x44>)
 8001348:	2180      	movs	r1, #128	; 0x80
 800134a:	0549      	lsls	r1, r1, #21
 800134c:	430a      	orrs	r2, r1
 800134e:	61da      	str	r2, [r3, #28]
 8001350:	4b05      	ldr	r3, [pc, #20]	; (8001368 <HAL_MspInit+0x44>)
 8001352:	69da      	ldr	r2, [r3, #28]
 8001354:	2380      	movs	r3, #128	; 0x80
 8001356:	055b      	lsls	r3, r3, #21
 8001358:	4013      	ands	r3, r2
 800135a:	603b      	str	r3, [r7, #0]
 800135c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800135e:	46c0      	nop			; (mov r8, r8)
 8001360:	46bd      	mov	sp, r7
 8001362:	b002      	add	sp, #8
 8001364:	bd80      	pop	{r7, pc}
 8001366:	46c0      	nop			; (mov r8, r8)
 8001368:	40021000 	.word	0x40021000

0800136c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800136c:	b590      	push	{r4, r7, lr}
 800136e:	b08d      	sub	sp, #52	; 0x34
 8001370:	af00      	add	r7, sp, #0
 8001372:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001374:	241c      	movs	r4, #28
 8001376:	193b      	adds	r3, r7, r4
 8001378:	0018      	movs	r0, r3
 800137a:	2314      	movs	r3, #20
 800137c:	001a      	movs	r2, r3
 800137e:	2100      	movs	r1, #0
 8001380:	f00a fc1e 	bl	800bbc0 <memset>
  if(hadc->Instance==ADC1)
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	4a4a      	ldr	r2, [pc, #296]	; (80014b4 <HAL_ADC_MspInit+0x148>)
 800138a:	4293      	cmp	r3, r2
 800138c:	d000      	beq.n	8001390 <HAL_ADC_MspInit+0x24>
 800138e:	e08d      	b.n	80014ac <HAL_ADC_MspInit+0x140>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001390:	4b49      	ldr	r3, [pc, #292]	; (80014b8 <HAL_ADC_MspInit+0x14c>)
 8001392:	699a      	ldr	r2, [r3, #24]
 8001394:	4b48      	ldr	r3, [pc, #288]	; (80014b8 <HAL_ADC_MspInit+0x14c>)
 8001396:	2180      	movs	r1, #128	; 0x80
 8001398:	0089      	lsls	r1, r1, #2
 800139a:	430a      	orrs	r2, r1
 800139c:	619a      	str	r2, [r3, #24]
 800139e:	4b46      	ldr	r3, [pc, #280]	; (80014b8 <HAL_ADC_MspInit+0x14c>)
 80013a0:	699a      	ldr	r2, [r3, #24]
 80013a2:	2380      	movs	r3, #128	; 0x80
 80013a4:	009b      	lsls	r3, r3, #2
 80013a6:	4013      	ands	r3, r2
 80013a8:	61bb      	str	r3, [r7, #24]
 80013aa:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80013ac:	4b42      	ldr	r3, [pc, #264]	; (80014b8 <HAL_ADC_MspInit+0x14c>)
 80013ae:	695a      	ldr	r2, [r3, #20]
 80013b0:	4b41      	ldr	r3, [pc, #260]	; (80014b8 <HAL_ADC_MspInit+0x14c>)
 80013b2:	2180      	movs	r1, #128	; 0x80
 80013b4:	0309      	lsls	r1, r1, #12
 80013b6:	430a      	orrs	r2, r1
 80013b8:	615a      	str	r2, [r3, #20]
 80013ba:	4b3f      	ldr	r3, [pc, #252]	; (80014b8 <HAL_ADC_MspInit+0x14c>)
 80013bc:	695a      	ldr	r2, [r3, #20]
 80013be:	2380      	movs	r3, #128	; 0x80
 80013c0:	031b      	lsls	r3, r3, #12
 80013c2:	4013      	ands	r3, r2
 80013c4:	617b      	str	r3, [r7, #20]
 80013c6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013c8:	4b3b      	ldr	r3, [pc, #236]	; (80014b8 <HAL_ADC_MspInit+0x14c>)
 80013ca:	695a      	ldr	r2, [r3, #20]
 80013cc:	4b3a      	ldr	r3, [pc, #232]	; (80014b8 <HAL_ADC_MspInit+0x14c>)
 80013ce:	2180      	movs	r1, #128	; 0x80
 80013d0:	0289      	lsls	r1, r1, #10
 80013d2:	430a      	orrs	r2, r1
 80013d4:	615a      	str	r2, [r3, #20]
 80013d6:	4b38      	ldr	r3, [pc, #224]	; (80014b8 <HAL_ADC_MspInit+0x14c>)
 80013d8:	695a      	ldr	r2, [r3, #20]
 80013da:	2380      	movs	r3, #128	; 0x80
 80013dc:	029b      	lsls	r3, r3, #10
 80013de:	4013      	ands	r3, r2
 80013e0:	613b      	str	r3, [r7, #16]
 80013e2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013e4:	4b34      	ldr	r3, [pc, #208]	; (80014b8 <HAL_ADC_MspInit+0x14c>)
 80013e6:	695a      	ldr	r2, [r3, #20]
 80013e8:	4b33      	ldr	r3, [pc, #204]	; (80014b8 <HAL_ADC_MspInit+0x14c>)
 80013ea:	2180      	movs	r1, #128	; 0x80
 80013ec:	02c9      	lsls	r1, r1, #11
 80013ee:	430a      	orrs	r2, r1
 80013f0:	615a      	str	r2, [r3, #20]
 80013f2:	4b31      	ldr	r3, [pc, #196]	; (80014b8 <HAL_ADC_MspInit+0x14c>)
 80013f4:	695a      	ldr	r2, [r3, #20]
 80013f6:	2380      	movs	r3, #128	; 0x80
 80013f8:	02db      	lsls	r3, r3, #11
 80013fa:	4013      	ands	r3, r2
 80013fc:	60fb      	str	r3, [r7, #12]
 80013fe:	68fb      	ldr	r3, [r7, #12]
    PC4     ------> ADC_IN14
    PC5     ------> ADC_IN15
    PB0     ------> ADC_IN8
    PB1     ------> ADC_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8001400:	193b      	adds	r3, r7, r4
 8001402:	223f      	movs	r2, #63	; 0x3f
 8001404:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_4|GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001406:	193b      	adds	r3, r7, r4
 8001408:	2203      	movs	r2, #3
 800140a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800140c:	193b      	adds	r3, r7, r4
 800140e:	2200      	movs	r2, #0
 8001410:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001412:	193b      	adds	r3, r7, r4
 8001414:	4a29      	ldr	r2, [pc, #164]	; (80014bc <HAL_ADC_MspInit+0x150>)
 8001416:	0019      	movs	r1, r3
 8001418:	0010      	movs	r0, r2
 800141a:	f000 ff17 	bl	800224c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 800141e:	193b      	adds	r3, r7, r4
 8001420:	22ff      	movs	r2, #255	; 0xff
 8001422:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001424:	193b      	adds	r3, r7, r4
 8001426:	2203      	movs	r2, #3
 8001428:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800142a:	193b      	adds	r3, r7, r4
 800142c:	2200      	movs	r2, #0
 800142e:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001430:	193a      	adds	r2, r7, r4
 8001432:	2390      	movs	r3, #144	; 0x90
 8001434:	05db      	lsls	r3, r3, #23
 8001436:	0011      	movs	r1, r2
 8001438:	0018      	movs	r0, r3
 800143a:	f000 ff07 	bl	800224c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800143e:	193b      	adds	r3, r7, r4
 8001440:	2203      	movs	r2, #3
 8001442:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001444:	193b      	adds	r3, r7, r4
 8001446:	2203      	movs	r2, #3
 8001448:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800144a:	193b      	adds	r3, r7, r4
 800144c:	2200      	movs	r2, #0
 800144e:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001450:	193b      	adds	r3, r7, r4
 8001452:	4a1b      	ldr	r2, [pc, #108]	; (80014c0 <HAL_ADC_MspInit+0x154>)
 8001454:	0019      	movs	r1, r3
 8001456:	0010      	movs	r0, r2
 8001458:	f000 fef8 	bl	800224c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC Init */
    hdma_adc.Instance = DMA1_Channel1;
 800145c:	4b19      	ldr	r3, [pc, #100]	; (80014c4 <HAL_ADC_MspInit+0x158>)
 800145e:	4a1a      	ldr	r2, [pc, #104]	; (80014c8 <HAL_ADC_MspInit+0x15c>)
 8001460:	601a      	str	r2, [r3, #0]
    hdma_adc.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001462:	4b18      	ldr	r3, [pc, #96]	; (80014c4 <HAL_ADC_MspInit+0x158>)
 8001464:	2200      	movs	r2, #0
 8001466:	605a      	str	r2, [r3, #4]
    hdma_adc.Init.PeriphInc = DMA_PINC_DISABLE;
 8001468:	4b16      	ldr	r3, [pc, #88]	; (80014c4 <HAL_ADC_MspInit+0x158>)
 800146a:	2200      	movs	r2, #0
 800146c:	609a      	str	r2, [r3, #8]
    hdma_adc.Init.MemInc = DMA_MINC_ENABLE;
 800146e:	4b15      	ldr	r3, [pc, #84]	; (80014c4 <HAL_ADC_MspInit+0x158>)
 8001470:	2280      	movs	r2, #128	; 0x80
 8001472:	60da      	str	r2, [r3, #12]
    hdma_adc.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001474:	4b13      	ldr	r3, [pc, #76]	; (80014c4 <HAL_ADC_MspInit+0x158>)
 8001476:	2280      	movs	r2, #128	; 0x80
 8001478:	0052      	lsls	r2, r2, #1
 800147a:	611a      	str	r2, [r3, #16]
    hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800147c:	4b11      	ldr	r3, [pc, #68]	; (80014c4 <HAL_ADC_MspInit+0x158>)
 800147e:	2280      	movs	r2, #128	; 0x80
 8001480:	00d2      	lsls	r2, r2, #3
 8001482:	615a      	str	r2, [r3, #20]
    hdma_adc.Init.Mode = DMA_NORMAL;
 8001484:	4b0f      	ldr	r3, [pc, #60]	; (80014c4 <HAL_ADC_MspInit+0x158>)
 8001486:	2200      	movs	r2, #0
 8001488:	619a      	str	r2, [r3, #24]
    hdma_adc.Init.Priority = DMA_PRIORITY_LOW;
 800148a:	4b0e      	ldr	r3, [pc, #56]	; (80014c4 <HAL_ADC_MspInit+0x158>)
 800148c:	2200      	movs	r2, #0
 800148e:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc) != HAL_OK)
 8001490:	4b0c      	ldr	r3, [pc, #48]	; (80014c4 <HAL_ADC_MspInit+0x158>)
 8001492:	0018      	movs	r0, r3
 8001494:	f000 fd56 	bl	8001f44 <HAL_DMA_Init>
 8001498:	1e03      	subs	r3, r0, #0
 800149a:	d001      	beq.n	80014a0 <HAL_ADC_MspInit+0x134>
    {
      Error_Handler();
 800149c:	f7ff fed0 	bl	8001240 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc);
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	4a08      	ldr	r2, [pc, #32]	; (80014c4 <HAL_ADC_MspInit+0x158>)
 80014a4:	631a      	str	r2, [r3, #48]	; 0x30
 80014a6:	4b07      	ldr	r3, [pc, #28]	; (80014c4 <HAL_ADC_MspInit+0x158>)
 80014a8:	687a      	ldr	r2, [r7, #4]
 80014aa:	625a      	str	r2, [r3, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80014ac:	46c0      	nop			; (mov r8, r8)
 80014ae:	46bd      	mov	sp, r7
 80014b0:	b00d      	add	sp, #52	; 0x34
 80014b2:	bd90      	pop	{r4, r7, pc}
 80014b4:	40012400 	.word	0x40012400
 80014b8:	40021000 	.word	0x40021000
 80014bc:	48000800 	.word	0x48000800
 80014c0:	48000400 	.word	0x48000400
 80014c4:	2000058c 	.word	0x2000058c
 80014c8:	40020008 	.word	0x40020008

080014cc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80014cc:	b590      	push	{r4, r7, lr}
 80014ce:	b08b      	sub	sp, #44	; 0x2c
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014d4:	2414      	movs	r4, #20
 80014d6:	193b      	adds	r3, r7, r4
 80014d8:	0018      	movs	r0, r3
 80014da:	2314      	movs	r3, #20
 80014dc:	001a      	movs	r2, r3
 80014de:	2100      	movs	r1, #0
 80014e0:	f00a fb6e 	bl	800bbc0 <memset>
  if(hspi->Instance==SPI1)
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	4a1c      	ldr	r2, [pc, #112]	; (800155c <HAL_SPI_MspInit+0x90>)
 80014ea:	4293      	cmp	r3, r2
 80014ec:	d131      	bne.n	8001552 <HAL_SPI_MspInit+0x86>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80014ee:	4b1c      	ldr	r3, [pc, #112]	; (8001560 <HAL_SPI_MspInit+0x94>)
 80014f0:	699a      	ldr	r2, [r3, #24]
 80014f2:	4b1b      	ldr	r3, [pc, #108]	; (8001560 <HAL_SPI_MspInit+0x94>)
 80014f4:	2180      	movs	r1, #128	; 0x80
 80014f6:	0149      	lsls	r1, r1, #5
 80014f8:	430a      	orrs	r2, r1
 80014fa:	619a      	str	r2, [r3, #24]
 80014fc:	4b18      	ldr	r3, [pc, #96]	; (8001560 <HAL_SPI_MspInit+0x94>)
 80014fe:	699a      	ldr	r2, [r3, #24]
 8001500:	2380      	movs	r3, #128	; 0x80
 8001502:	015b      	lsls	r3, r3, #5
 8001504:	4013      	ands	r3, r2
 8001506:	613b      	str	r3, [r7, #16]
 8001508:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800150a:	4b15      	ldr	r3, [pc, #84]	; (8001560 <HAL_SPI_MspInit+0x94>)
 800150c:	695a      	ldr	r2, [r3, #20]
 800150e:	4b14      	ldr	r3, [pc, #80]	; (8001560 <HAL_SPI_MspInit+0x94>)
 8001510:	2180      	movs	r1, #128	; 0x80
 8001512:	02c9      	lsls	r1, r1, #11
 8001514:	430a      	orrs	r2, r1
 8001516:	615a      	str	r2, [r3, #20]
 8001518:	4b11      	ldr	r3, [pc, #68]	; (8001560 <HAL_SPI_MspInit+0x94>)
 800151a:	695a      	ldr	r2, [r3, #20]
 800151c:	2380      	movs	r3, #128	; 0x80
 800151e:	02db      	lsls	r3, r3, #11
 8001520:	4013      	ands	r3, r2
 8001522:	60fb      	str	r3, [r7, #12]
 8001524:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8001526:	0021      	movs	r1, r4
 8001528:	187b      	adds	r3, r7, r1
 800152a:	2238      	movs	r2, #56	; 0x38
 800152c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800152e:	187b      	adds	r3, r7, r1
 8001530:	2202      	movs	r2, #2
 8001532:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001534:	187b      	adds	r3, r7, r1
 8001536:	2200      	movs	r2, #0
 8001538:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800153a:	187b      	adds	r3, r7, r1
 800153c:	2203      	movs	r2, #3
 800153e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8001540:	187b      	adds	r3, r7, r1
 8001542:	2200      	movs	r2, #0
 8001544:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001546:	187b      	adds	r3, r7, r1
 8001548:	4a06      	ldr	r2, [pc, #24]	; (8001564 <HAL_SPI_MspInit+0x98>)
 800154a:	0019      	movs	r1, r3
 800154c:	0010      	movs	r0, r2
 800154e:	f000 fe7d 	bl	800224c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001552:	46c0      	nop			; (mov r8, r8)
 8001554:	46bd      	mov	sp, r7
 8001556:	b00b      	add	sp, #44	; 0x2c
 8001558:	bd90      	pop	{r4, r7, pc}
 800155a:	46c0      	nop			; (mov r8, r8)
 800155c:	40013000 	.word	0x40013000
 8001560:	40021000 	.word	0x40021000
 8001564:	48000400 	.word	0x48000400

08001568 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	b084      	sub	sp, #16
 800156c:	af00      	add	r7, sp, #0
 800156e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM14)
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	4a0e      	ldr	r2, [pc, #56]	; (80015b0 <HAL_TIM_Base_MspInit+0x48>)
 8001576:	4293      	cmp	r3, r2
 8001578:	d115      	bne.n	80015a6 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM14_MspInit 0 */

  /* USER CODE END TIM14_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM14_CLK_ENABLE();
 800157a:	4b0e      	ldr	r3, [pc, #56]	; (80015b4 <HAL_TIM_Base_MspInit+0x4c>)
 800157c:	69da      	ldr	r2, [r3, #28]
 800157e:	4b0d      	ldr	r3, [pc, #52]	; (80015b4 <HAL_TIM_Base_MspInit+0x4c>)
 8001580:	2180      	movs	r1, #128	; 0x80
 8001582:	0049      	lsls	r1, r1, #1
 8001584:	430a      	orrs	r2, r1
 8001586:	61da      	str	r2, [r3, #28]
 8001588:	4b0a      	ldr	r3, [pc, #40]	; (80015b4 <HAL_TIM_Base_MspInit+0x4c>)
 800158a:	69da      	ldr	r2, [r3, #28]
 800158c:	2380      	movs	r3, #128	; 0x80
 800158e:	005b      	lsls	r3, r3, #1
 8001590:	4013      	ands	r3, r2
 8001592:	60fb      	str	r3, [r7, #12]
 8001594:	68fb      	ldr	r3, [r7, #12]
    /* TIM14 interrupt Init */
    HAL_NVIC_SetPriority(TIM14_IRQn, 0, 0);
 8001596:	2200      	movs	r2, #0
 8001598:	2100      	movs	r1, #0
 800159a:	2013      	movs	r0, #19
 800159c:	f000 fca0 	bl	8001ee0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM14_IRQn);
 80015a0:	2013      	movs	r0, #19
 80015a2:	f000 fcb2 	bl	8001f0a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }

}
 80015a6:	46c0      	nop			; (mov r8, r8)
 80015a8:	46bd      	mov	sp, r7
 80015aa:	b004      	add	sp, #16
 80015ac:	bd80      	pop	{r7, pc}
 80015ae:	46c0      	nop			; (mov r8, r8)
 80015b0:	40002000 	.word	0x40002000
 80015b4:	40021000 	.word	0x40021000

080015b8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80015b8:	b590      	push	{r4, r7, lr}
 80015ba:	b08b      	sub	sp, #44	; 0x2c
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015c0:	2414      	movs	r4, #20
 80015c2:	193b      	adds	r3, r7, r4
 80015c4:	0018      	movs	r0, r3
 80015c6:	2314      	movs	r3, #20
 80015c8:	001a      	movs	r2, r3
 80015ca:	2100      	movs	r1, #0
 80015cc:	f00a faf8 	bl	800bbc0 <memset>
  if(huart->Instance==USART3)
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	4a20      	ldr	r2, [pc, #128]	; (8001658 <HAL_UART_MspInit+0xa0>)
 80015d6:	4293      	cmp	r3, r2
 80015d8:	d13a      	bne.n	8001650 <HAL_UART_MspInit+0x98>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80015da:	4b20      	ldr	r3, [pc, #128]	; (800165c <HAL_UART_MspInit+0xa4>)
 80015dc:	69da      	ldr	r2, [r3, #28]
 80015de:	4b1f      	ldr	r3, [pc, #124]	; (800165c <HAL_UART_MspInit+0xa4>)
 80015e0:	2180      	movs	r1, #128	; 0x80
 80015e2:	02c9      	lsls	r1, r1, #11
 80015e4:	430a      	orrs	r2, r1
 80015e6:	61da      	str	r2, [r3, #28]
 80015e8:	4b1c      	ldr	r3, [pc, #112]	; (800165c <HAL_UART_MspInit+0xa4>)
 80015ea:	69da      	ldr	r2, [r3, #28]
 80015ec:	2380      	movs	r3, #128	; 0x80
 80015ee:	02db      	lsls	r3, r3, #11
 80015f0:	4013      	ands	r3, r2
 80015f2:	613b      	str	r3, [r7, #16]
 80015f4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80015f6:	4b19      	ldr	r3, [pc, #100]	; (800165c <HAL_UART_MspInit+0xa4>)
 80015f8:	695a      	ldr	r2, [r3, #20]
 80015fa:	4b18      	ldr	r3, [pc, #96]	; (800165c <HAL_UART_MspInit+0xa4>)
 80015fc:	2180      	movs	r1, #128	; 0x80
 80015fe:	0309      	lsls	r1, r1, #12
 8001600:	430a      	orrs	r2, r1
 8001602:	615a      	str	r2, [r3, #20]
 8001604:	4b15      	ldr	r3, [pc, #84]	; (800165c <HAL_UART_MspInit+0xa4>)
 8001606:	695a      	ldr	r2, [r3, #20]
 8001608:	2380      	movs	r3, #128	; 0x80
 800160a:	031b      	lsls	r3, r3, #12
 800160c:	4013      	ands	r3, r2
 800160e:	60fb      	str	r3, [r7, #12]
 8001610:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PC10     ------> USART3_TX
    PC11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001612:	193b      	adds	r3, r7, r4
 8001614:	22c0      	movs	r2, #192	; 0xc0
 8001616:	0112      	lsls	r2, r2, #4
 8001618:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800161a:	0021      	movs	r1, r4
 800161c:	187b      	adds	r3, r7, r1
 800161e:	2202      	movs	r2, #2
 8001620:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001622:	187b      	adds	r3, r7, r1
 8001624:	2200      	movs	r2, #0
 8001626:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001628:	187b      	adds	r3, r7, r1
 800162a:	2203      	movs	r2, #3
 800162c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART3;
 800162e:	187b      	adds	r3, r7, r1
 8001630:	2201      	movs	r2, #1
 8001632:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001634:	187b      	adds	r3, r7, r1
 8001636:	4a0a      	ldr	r2, [pc, #40]	; (8001660 <HAL_UART_MspInit+0xa8>)
 8001638:	0019      	movs	r1, r3
 800163a:	0010      	movs	r0, r2
 800163c:	f000 fe06 	bl	800224c <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_4_IRQn, 0, 0);
 8001640:	2200      	movs	r2, #0
 8001642:	2100      	movs	r1, #0
 8001644:	201d      	movs	r0, #29
 8001646:	f000 fc4b 	bl	8001ee0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_4_IRQn);
 800164a:	201d      	movs	r0, #29
 800164c:	f000 fc5d 	bl	8001f0a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001650:	46c0      	nop			; (mov r8, r8)
 8001652:	46bd      	mov	sp, r7
 8001654:	b00b      	add	sp, #44	; 0x2c
 8001656:	bd90      	pop	{r4, r7, pc}
 8001658:	40004800 	.word	0x40004800
 800165c:	40021000 	.word	0x40021000
 8001660:	48000800 	.word	0x48000800

08001664 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001668:	e7fe      	b.n	8001668 <NMI_Handler+0x4>

0800166a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800166a:	b580      	push	{r7, lr}
 800166c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800166e:	e7fe      	b.n	800166e <HardFault_Handler+0x4>

08001670 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001674:	46c0      	nop			; (mov r8, r8)
 8001676:	46bd      	mov	sp, r7
 8001678:	bd80      	pop	{r7, pc}

0800167a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800167a:	b580      	push	{r7, lr}
 800167c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800167e:	46c0      	nop			; (mov r8, r8)
 8001680:	46bd      	mov	sp, r7
 8001682:	bd80      	pop	{r7, pc}

08001684 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001688:	f000 f8f0 	bl	800186c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800168c:	46c0      	nop			; (mov r8, r8)
 800168e:	46bd      	mov	sp, r7
 8001690:	bd80      	pop	{r7, pc}

08001692 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 8001692:	b580      	push	{r7, lr}
 8001694:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8001696:	2380      	movs	r3, #128	; 0x80
 8001698:	005b      	lsls	r3, r3, #1
 800169a:	0018      	movs	r0, r3
 800169c:	f000 ffa4 	bl	80025e8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 80016a0:	2380      	movs	r3, #128	; 0x80
 80016a2:	009b      	lsls	r3, r3, #2
 80016a4:	0018      	movs	r0, r3
 80016a6:	f000 ff9f 	bl	80025e8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 80016aa:	46c0      	nop			; (mov r8, r8)
 80016ac:	46bd      	mov	sp, r7
 80016ae:	bd80      	pop	{r7, pc}

080016b0 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc);
 80016b4:	4b03      	ldr	r3, [pc, #12]	; (80016c4 <DMA1_Channel1_IRQHandler+0x14>)
 80016b6:	0018      	movs	r0, r3
 80016b8:	f000 fd09 	bl	80020ce <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80016bc:	46c0      	nop			; (mov r8, r8)
 80016be:	46bd      	mov	sp, r7
 80016c0:	bd80      	pop	{r7, pc}
 80016c2:	46c0      	nop			; (mov r8, r8)
 80016c4:	2000058c 	.word	0x2000058c

080016c8 <TIM14_IRQHandler>:

/**
  * @brief This function handles TIM14 global interrupt.
  */
void TIM14_IRQHandler(void)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM14_IRQn 0 */

  /* USER CODE END TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 80016cc:	4b03      	ldr	r3, [pc, #12]	; (80016dc <TIM14_IRQHandler+0x14>)
 80016ce:	0018      	movs	r0, r3
 80016d0:	f004 fc14 	bl	8005efc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM14_IRQn 1 */

  /* USER CODE END TIM14_IRQn 1 */
}
 80016d4:	46c0      	nop			; (mov r8, r8)
 80016d6:	46bd      	mov	sp, r7
 80016d8:	bd80      	pop	{r7, pc}
 80016da:	46c0      	nop			; (mov r8, r8)
 80016dc:	20000544 	.word	0x20000544

080016e0 <USART3_4_IRQHandler>:

/**
  * @brief This function handles USART3 and USART4 global interrupts.
  */
void USART3_4_IRQHandler(void)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_4_IRQn 0 */

  /* USER CODE END USART3_4_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80016e4:	4b03      	ldr	r3, [pc, #12]	; (80016f4 <USART3_4_IRQHandler+0x14>)
 80016e6:	0018      	movs	r0, r3
 80016e8:	f005 f876 	bl	80067d8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_4_IRQn 1 */

  /* USER CODE END USART3_4_IRQn 1 */
}
 80016ec:	46c0      	nop			; (mov r8, r8)
 80016ee:	46bd      	mov	sp, r7
 80016f0:	bd80      	pop	{r7, pc}
 80016f2:	46c0      	nop			; (mov r8, r8)
 80016f4:	2000045c 	.word	0x2000045c

080016f8 <USB_IRQHandler>:

/**
  * @brief This function handles USB global interrupt / USB wake-up interrupt through EXTI line 18.
  */
void USB_IRQHandler(void)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_IRQn 0 */

  /* USER CODE END USB_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80016fc:	4b03      	ldr	r3, [pc, #12]	; (800170c <USB_IRQHandler+0x14>)
 80016fe:	0018      	movs	r0, r3
 8001700:	f001 f8c4 	bl	800288c <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_IRQn 1 */

  /* USER CODE END USB_IRQn 1 */
}
 8001704:	46c0      	nop			; (mov r8, r8)
 8001706:	46bd      	mov	sp, r7
 8001708:	bd80      	pop	{r7, pc}
 800170a:	46c0      	nop			; (mov r8, r8)
 800170c:	200012ac 	.word	0x200012ac

08001710 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	b086      	sub	sp, #24
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001718:	4a14      	ldr	r2, [pc, #80]	; (800176c <_sbrk+0x5c>)
 800171a:	4b15      	ldr	r3, [pc, #84]	; (8001770 <_sbrk+0x60>)
 800171c:	1ad3      	subs	r3, r2, r3
 800171e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001720:	697b      	ldr	r3, [r7, #20]
 8001722:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001724:	4b13      	ldr	r3, [pc, #76]	; (8001774 <_sbrk+0x64>)
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	2b00      	cmp	r3, #0
 800172a:	d102      	bne.n	8001732 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800172c:	4b11      	ldr	r3, [pc, #68]	; (8001774 <_sbrk+0x64>)
 800172e:	4a12      	ldr	r2, [pc, #72]	; (8001778 <_sbrk+0x68>)
 8001730:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001732:	4b10      	ldr	r3, [pc, #64]	; (8001774 <_sbrk+0x64>)
 8001734:	681a      	ldr	r2, [r3, #0]
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	18d3      	adds	r3, r2, r3
 800173a:	693a      	ldr	r2, [r7, #16]
 800173c:	429a      	cmp	r2, r3
 800173e:	d207      	bcs.n	8001750 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001740:	f00a fa00 	bl	800bb44 <__errno>
 8001744:	0003      	movs	r3, r0
 8001746:	220c      	movs	r2, #12
 8001748:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800174a:	2301      	movs	r3, #1
 800174c:	425b      	negs	r3, r3
 800174e:	e009      	b.n	8001764 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001750:	4b08      	ldr	r3, [pc, #32]	; (8001774 <_sbrk+0x64>)
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001756:	4b07      	ldr	r3, [pc, #28]	; (8001774 <_sbrk+0x64>)
 8001758:	681a      	ldr	r2, [r3, #0]
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	18d2      	adds	r2, r2, r3
 800175e:	4b05      	ldr	r3, [pc, #20]	; (8001774 <_sbrk+0x64>)
 8001760:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8001762:	68fb      	ldr	r3, [r7, #12]
}
 8001764:	0018      	movs	r0, r3
 8001766:	46bd      	mov	sp, r7
 8001768:	b006      	add	sp, #24
 800176a:	bd80      	pop	{r7, pc}
 800176c:	20004000 	.word	0x20004000
 8001770:	00000400 	.word	0x00000400
 8001774:	20000214 	.word	0x20000214
 8001778:	200015b0 	.word	0x200015b0

0800177c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8001780:	46c0      	nop			; (mov r8, r8)
 8001782:	46bd      	mov	sp, r7
 8001784:	bd80      	pop	{r7, pc}
	...

08001788 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001788:	480d      	ldr	r0, [pc, #52]	; (80017c0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800178a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800178c:	480d      	ldr	r0, [pc, #52]	; (80017c4 <LoopForever+0x6>)
  ldr r1, =_edata
 800178e:	490e      	ldr	r1, [pc, #56]	; (80017c8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001790:	4a0e      	ldr	r2, [pc, #56]	; (80017cc <LoopForever+0xe>)
  movs r3, #0
 8001792:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001794:	e002      	b.n	800179c <LoopCopyDataInit>

08001796 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001796:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001798:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800179a:	3304      	adds	r3, #4

0800179c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800179c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800179e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80017a0:	d3f9      	bcc.n	8001796 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80017a2:	4a0b      	ldr	r2, [pc, #44]	; (80017d0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80017a4:	4c0b      	ldr	r4, [pc, #44]	; (80017d4 <LoopForever+0x16>)
  movs r3, #0
 80017a6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80017a8:	e001      	b.n	80017ae <LoopFillZerobss>

080017aa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80017aa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80017ac:	3204      	adds	r2, #4

080017ae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80017ae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80017b0:	d3fb      	bcc.n	80017aa <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80017b2:	f7ff ffe3 	bl	800177c <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 80017b6:	f00a f9cb 	bl	800bb50 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80017ba:	f7ff f87b 	bl	80008b4 <main>

080017be <LoopForever>:

LoopForever:
    b LoopForever
 80017be:	e7fe      	b.n	80017be <LoopForever>
  ldr   r0, =_estack
 80017c0:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 80017c4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80017c8:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 80017cc:	0800c62c 	.word	0x0800c62c
  ldr r2, =_sbss
 80017d0:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 80017d4:	200015b0 	.word	0x200015b0

080017d8 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80017d8:	e7fe      	b.n	80017d8 <ADC1_COMP_IRQHandler>
	...

080017dc <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80017e0:	4b07      	ldr	r3, [pc, #28]	; (8001800 <HAL_Init+0x24>)
 80017e2:	681a      	ldr	r2, [r3, #0]
 80017e4:	4b06      	ldr	r3, [pc, #24]	; (8001800 <HAL_Init+0x24>)
 80017e6:	2110      	movs	r1, #16
 80017e8:	430a      	orrs	r2, r1
 80017ea:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 80017ec:	2003      	movs	r0, #3
 80017ee:	f000 f809 	bl	8001804 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80017f2:	f7ff fd97 	bl	8001324 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80017f6:	2300      	movs	r3, #0
}
 80017f8:	0018      	movs	r0, r3
 80017fa:	46bd      	mov	sp, r7
 80017fc:	bd80      	pop	{r7, pc}
 80017fe:	46c0      	nop			; (mov r8, r8)
 8001800:	40022000 	.word	0x40022000

08001804 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001804:	b590      	push	{r4, r7, lr}
 8001806:	b083      	sub	sp, #12
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800180c:	4b14      	ldr	r3, [pc, #80]	; (8001860 <HAL_InitTick+0x5c>)
 800180e:	681c      	ldr	r4, [r3, #0]
 8001810:	4b14      	ldr	r3, [pc, #80]	; (8001864 <HAL_InitTick+0x60>)
 8001812:	781b      	ldrb	r3, [r3, #0]
 8001814:	0019      	movs	r1, r3
 8001816:	23fa      	movs	r3, #250	; 0xfa
 8001818:	0098      	lsls	r0, r3, #2
 800181a:	f7fe fc87 	bl	800012c <__udivsi3>
 800181e:	0003      	movs	r3, r0
 8001820:	0019      	movs	r1, r3
 8001822:	0020      	movs	r0, r4
 8001824:	f7fe fc82 	bl	800012c <__udivsi3>
 8001828:	0003      	movs	r3, r0
 800182a:	0018      	movs	r0, r3
 800182c:	f000 fb7d 	bl	8001f2a <HAL_SYSTICK_Config>
 8001830:	1e03      	subs	r3, r0, #0
 8001832:	d001      	beq.n	8001838 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8001834:	2301      	movs	r3, #1
 8001836:	e00f      	b.n	8001858 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	2b03      	cmp	r3, #3
 800183c:	d80b      	bhi.n	8001856 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800183e:	6879      	ldr	r1, [r7, #4]
 8001840:	2301      	movs	r3, #1
 8001842:	425b      	negs	r3, r3
 8001844:	2200      	movs	r2, #0
 8001846:	0018      	movs	r0, r3
 8001848:	f000 fb4a 	bl	8001ee0 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800184c:	4b06      	ldr	r3, [pc, #24]	; (8001868 <HAL_InitTick+0x64>)
 800184e:	687a      	ldr	r2, [r7, #4]
 8001850:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8001852:	2300      	movs	r3, #0
 8001854:	e000      	b.n	8001858 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8001856:	2301      	movs	r3, #1
}
 8001858:	0018      	movs	r0, r3
 800185a:	46bd      	mov	sp, r7
 800185c:	b003      	add	sp, #12
 800185e:	bd90      	pop	{r4, r7, pc}
 8001860:	20000000 	.word	0x20000000
 8001864:	20000008 	.word	0x20000008
 8001868:	20000004 	.word	0x20000004

0800186c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800186c:	b580      	push	{r7, lr}
 800186e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001870:	4b05      	ldr	r3, [pc, #20]	; (8001888 <HAL_IncTick+0x1c>)
 8001872:	781b      	ldrb	r3, [r3, #0]
 8001874:	001a      	movs	r2, r3
 8001876:	4b05      	ldr	r3, [pc, #20]	; (800188c <HAL_IncTick+0x20>)
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	18d2      	adds	r2, r2, r3
 800187c:	4b03      	ldr	r3, [pc, #12]	; (800188c <HAL_IncTick+0x20>)
 800187e:	601a      	str	r2, [r3, #0]
}
 8001880:	46c0      	nop			; (mov r8, r8)
 8001882:	46bd      	mov	sp, r7
 8001884:	bd80      	pop	{r7, pc}
 8001886:	46c0      	nop			; (mov r8, r8)
 8001888:	20000008 	.word	0x20000008
 800188c:	20000610 	.word	0x20000610

08001890 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	af00      	add	r7, sp, #0
  return uwTick;
 8001894:	4b02      	ldr	r3, [pc, #8]	; (80018a0 <HAL_GetTick+0x10>)
 8001896:	681b      	ldr	r3, [r3, #0]
}
 8001898:	0018      	movs	r0, r3
 800189a:	46bd      	mov	sp, r7
 800189c:	bd80      	pop	{r7, pc}
 800189e:	46c0      	nop			; (mov r8, r8)
 80018a0:	20000610 	.word	0x20000610

080018a4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b084      	sub	sp, #16
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80018ac:	f7ff fff0 	bl	8001890 <HAL_GetTick>
 80018b0:	0003      	movs	r3, r0
 80018b2:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	3301      	adds	r3, #1
 80018bc:	d005      	beq.n	80018ca <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80018be:	4b0a      	ldr	r3, [pc, #40]	; (80018e8 <HAL_Delay+0x44>)
 80018c0:	781b      	ldrb	r3, [r3, #0]
 80018c2:	001a      	movs	r2, r3
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	189b      	adds	r3, r3, r2
 80018c8:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80018ca:	46c0      	nop			; (mov r8, r8)
 80018cc:	f7ff ffe0 	bl	8001890 <HAL_GetTick>
 80018d0:	0002      	movs	r2, r0
 80018d2:	68bb      	ldr	r3, [r7, #8]
 80018d4:	1ad3      	subs	r3, r2, r3
 80018d6:	68fa      	ldr	r2, [r7, #12]
 80018d8:	429a      	cmp	r2, r3
 80018da:	d8f7      	bhi.n	80018cc <HAL_Delay+0x28>
  {
  }
}
 80018dc:	46c0      	nop			; (mov r8, r8)
 80018de:	46c0      	nop			; (mov r8, r8)
 80018e0:	46bd      	mov	sp, r7
 80018e2:	b004      	add	sp, #16
 80018e4:	bd80      	pop	{r7, pc}
 80018e6:	46c0      	nop			; (mov r8, r8)
 80018e8:	20000008 	.word	0x20000008

080018ec <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b084      	sub	sp, #16
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80018f4:	230f      	movs	r3, #15
 80018f6:	18fb      	adds	r3, r7, r3
 80018f8:	2200      	movs	r2, #0
 80018fa:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0U;
 80018fc:	2300      	movs	r3, #0
 80018fe:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if(hadc == NULL)
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	2b00      	cmp	r3, #0
 8001904:	d101      	bne.n	800190a <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 8001906:	2301      	movs	r3, #1
 8001908:	e125      	b.n	8001b56 <HAL_ADC_Init+0x26a>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800190e:	2b00      	cmp	r3, #0
 8001910:	d10a      	bne.n	8001928 <HAL_ADC_Init+0x3c>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	2200      	movs	r2, #0
 8001916:	63da      	str	r2, [r3, #60]	; 0x3c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	2234      	movs	r2, #52	; 0x34
 800191c:	2100      	movs	r1, #0
 800191e:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	0018      	movs	r0, r3
 8001924:	f7ff fd22 	bl	800136c <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */ 
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800192c:	2210      	movs	r2, #16
 800192e:	4013      	ands	r3, r2
 8001930:	d000      	beq.n	8001934 <HAL_ADC_Init+0x48>
 8001932:	e103      	b.n	8001b3c <HAL_ADC_Init+0x250>
 8001934:	230f      	movs	r3, #15
 8001936:	18fb      	adds	r3, r7, r3
 8001938:	781b      	ldrb	r3, [r3, #0]
 800193a:	2b00      	cmp	r3, #0
 800193c:	d000      	beq.n	8001940 <HAL_ADC_Init+0x54>
 800193e:	e0fd      	b.n	8001b3c <HAL_ADC_Init+0x250>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	689b      	ldr	r3, [r3, #8]
 8001946:	2204      	movs	r2, #4
 8001948:	4013      	ands	r3, r2
      (tmp_hal_status == HAL_OK)                                &&
 800194a:	d000      	beq.n	800194e <HAL_ADC_Init+0x62>
 800194c:	e0f6      	b.n	8001b3c <HAL_ADC_Init+0x250>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001952:	4a83      	ldr	r2, [pc, #524]	; (8001b60 <HAL_ADC_Init+0x274>)
 8001954:	4013      	ands	r3, r2
 8001956:	2202      	movs	r2, #2
 8001958:	431a      	orrs	r2, r3
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	639a      	str	r2, [r3, #56]	; 0x38
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - ADC clock mode                                                      */
    /*  - ADC clock prescaler                                                 */
    /*  - ADC resolution                                                      */
    if (ADC_IS_ENABLE(hadc) == RESET)
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	689b      	ldr	r3, [r3, #8]
 8001964:	2203      	movs	r2, #3
 8001966:	4013      	ands	r3, r2
 8001968:	2b01      	cmp	r3, #1
 800196a:	d112      	bne.n	8001992 <HAL_ADC_Init+0xa6>
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	2201      	movs	r2, #1
 8001974:	4013      	ands	r3, r2
 8001976:	2b01      	cmp	r3, #1
 8001978:	d009      	beq.n	800198e <HAL_ADC_Init+0xa2>
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	68da      	ldr	r2, [r3, #12]
 8001980:	2380      	movs	r3, #128	; 0x80
 8001982:	021b      	lsls	r3, r3, #8
 8001984:	401a      	ands	r2, r3
 8001986:	2380      	movs	r3, #128	; 0x80
 8001988:	021b      	lsls	r3, r3, #8
 800198a:	429a      	cmp	r2, r3
 800198c:	d101      	bne.n	8001992 <HAL_ADC_Init+0xa6>
 800198e:	2301      	movs	r3, #1
 8001990:	e000      	b.n	8001994 <HAL_ADC_Init+0xa8>
 8001992:	2300      	movs	r3, #0
 8001994:	2b00      	cmp	r3, #0
 8001996:	d116      	bne.n	80019c6 <HAL_ADC_Init+0xda>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
     
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	68db      	ldr	r3, [r3, #12]
 800199e:	2218      	movs	r2, #24
 80019a0:	4393      	bics	r3, r2
 80019a2:	0019      	movs	r1, r3
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	689a      	ldr	r2, [r3, #8]
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	430a      	orrs	r2, r1
 80019ae:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler                                                 */
      MODIFY_REG(hadc->Instance->CFGR2    ,
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	691b      	ldr	r3, [r3, #16]
 80019b6:	009b      	lsls	r3, r3, #2
 80019b8:	0899      	lsrs	r1, r3, #2
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	685a      	ldr	r2, [r3, #4]
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	430a      	orrs	r2, r1
 80019c4:	611a      	str	r2, [r3, #16]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	68da      	ldr	r2, [r3, #12]
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	4964      	ldr	r1, [pc, #400]	; (8001b64 <HAL_ADC_Init+0x278>)
 80019d2:	400a      	ands	r2, r1
 80019d4:	60da      	str	r2, [r3, #12]
                                ADC_CFGR1_EXTEN   |
                                ADC_CFGR1_ALIGN   |
                                ADC_CFGR1_SCANDIR |
                                ADC_CFGR1_DMACFG   );

    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	7e1b      	ldrb	r3, [r3, #24]
 80019da:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	7e5b      	ldrb	r3, [r3, #25]
 80019e0:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80019e2:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	7e9b      	ldrb	r3, [r3, #26]
 80019e8:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 80019ea:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019f0:	2b01      	cmp	r3, #1
 80019f2:	d002      	beq.n	80019fa <HAL_ADC_Init+0x10e>
 80019f4:	2380      	movs	r3, #128	; 0x80
 80019f6:	015b      	lsls	r3, r3, #5
 80019f8:	e000      	b.n	80019fc <HAL_ADC_Init+0x110>
 80019fa:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 80019fc:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                             |
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8001a02:	431a      	orrs	r2, r3
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	691b      	ldr	r3, [r3, #16]
 8001a08:	2b02      	cmp	r3, #2
 8001a0a:	d101      	bne.n	8001a10 <HAL_ADC_Init+0x124>
 8001a0c:	2304      	movs	r3, #4
 8001a0e:	e000      	b.n	8001a12 <HAL_ADC_Init+0x126>
 8001a10:	2300      	movs	r3, #0
                 hadc->Init.DataAlign                                             |
 8001a12:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	2124      	movs	r1, #36	; 0x24
 8001a18:	5c5b      	ldrb	r3, [r3, r1]
 8001a1a:	005b      	lsls	r3, r3, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8001a1c:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001a1e:	68ba      	ldr	r2, [r7, #8]
 8001a20:	4313      	orrs	r3, r2
 8001a22:	60bb      	str	r3, [r7, #8]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	7edb      	ldrb	r3, [r3, #27]
 8001a28:	2b01      	cmp	r3, #1
 8001a2a:	d115      	bne.n	8001a58 <HAL_ADC_Init+0x16c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	7e9b      	ldrb	r3, [r3, #26]
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d105      	bne.n	8001a40 <HAL_ADC_Init+0x154>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8001a34:	68bb      	ldr	r3, [r7, #8]
 8001a36:	2280      	movs	r2, #128	; 0x80
 8001a38:	0252      	lsls	r2, r2, #9
 8001a3a:	4313      	orrs	r3, r2
 8001a3c:	60bb      	str	r3, [r7, #8]
 8001a3e:	e00b      	b.n	8001a58 <HAL_ADC_Init+0x16c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a44:	2220      	movs	r2, #32
 8001a46:	431a      	orrs	r2, r3
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	639a      	str	r2, [r3, #56]	; 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a50:	2201      	movs	r2, #1
 8001a52:	431a      	orrs	r2, r3
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	63da      	str	r2, [r3, #60]	; 0x3c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	69da      	ldr	r2, [r3, #28]
 8001a5c:	23c2      	movs	r3, #194	; 0xc2
 8001a5e:	33ff      	adds	r3, #255	; 0xff
 8001a60:	429a      	cmp	r2, r3
 8001a62:	d007      	beq.n	8001a74 <HAL_ADC_Init+0x188>
    {
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	69da      	ldr	r2, [r3, #28]
                    hadc->Init.ExternalTrigConvEdge );
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	6a1b      	ldr	r3, [r3, #32]
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8001a6c:	4313      	orrs	r3, r2
 8001a6e:	68ba      	ldr	r2, [r7, #8]
 8001a70:	4313      	orrs	r3, r2
 8001a72:	60bb      	str	r3, [r7, #8]
    }
    
    /* Update ADC configuration register with previous settings */
    hadc->Instance->CFGR1 |= tmpCFGR1;
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	68d9      	ldr	r1, [r3, #12]
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	68ba      	ldr	r2, [r7, #8]
 8001a80:	430a      	orrs	r2, r1
 8001a82:	60da      	str	r2, [r3, #12]
    /* Management of parameters "SamplingTimeCommon" and "SamplingTime"       */
    /* (obsolete): sampling time set in this function if parameter            */
    /*  "SamplingTimeCommon" has been set to a valid sampling time.           */
    /* Otherwise, sampling time is set into ADC channel initialization        */
    /* structure with parameter "SamplingTime" (obsolete).                    */
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001a88:	2380      	movs	r3, #128	; 0x80
 8001a8a:	055b      	lsls	r3, r3, #21
 8001a8c:	429a      	cmp	r2, r3
 8001a8e:	d01b      	beq.n	8001ac8 <HAL_ADC_Init+0x1dc>
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a94:	2b01      	cmp	r3, #1
 8001a96:	d017      	beq.n	8001ac8 <HAL_ADC_Init+0x1dc>
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a9c:	2b02      	cmp	r3, #2
 8001a9e:	d013      	beq.n	8001ac8 <HAL_ADC_Init+0x1dc>
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001aa4:	2b03      	cmp	r3, #3
 8001aa6:	d00f      	beq.n	8001ac8 <HAL_ADC_Init+0x1dc>
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001aac:	2b04      	cmp	r3, #4
 8001aae:	d00b      	beq.n	8001ac8 <HAL_ADC_Init+0x1dc>
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ab4:	2b05      	cmp	r3, #5
 8001ab6:	d007      	beq.n	8001ac8 <HAL_ADC_Init+0x1dc>
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001abc:	2b06      	cmp	r3, #6
 8001abe:	d003      	beq.n	8001ac8 <HAL_ADC_Init+0x1dc>
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ac4:	2b07      	cmp	r3, #7
 8001ac6:	d112      	bne.n	8001aee <HAL_ADC_Init+0x202>
    {
      /* Channel sampling time configuration */
      /* Clear the old sample time */
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	695a      	ldr	r2, [r3, #20]
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	2107      	movs	r1, #7
 8001ad4:	438a      	bics	r2, r1
 8001ad6:	615a      	str	r2, [r3, #20]
      
      /* Set the new sample time */
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	6959      	ldr	r1, [r3, #20]
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ae2:	2207      	movs	r2, #7
 8001ae4:	401a      	ands	r2, r3
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	430a      	orrs	r2, r1
 8001aec:	615a      	str	r2, [r3, #20]
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	68db      	ldr	r3, [r3, #12]
 8001af4:	4a1c      	ldr	r2, [pc, #112]	; (8001b68 <HAL_ADC_Init+0x27c>)
 8001af6:	4013      	ands	r3, r2
 8001af8:	68ba      	ldr	r2, [r7, #8]
 8001afa:	429a      	cmp	r2, r3
 8001afc:	d10b      	bne.n	8001b16 <HAL_ADC_Init+0x22a>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	2200      	movs	r2, #0
 8001b02:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b08:	2203      	movs	r2, #3
 8001b0a:	4393      	bics	r3, r2
 8001b0c:	2201      	movs	r2, #1
 8001b0e:	431a      	orrs	r2, r3
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	639a      	str	r2, [r3, #56]	; 0x38
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8001b14:	e01c      	b.n	8001b50 <HAL_ADC_Init+0x264>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b1a:	2212      	movs	r2, #18
 8001b1c:	4393      	bics	r3, r2
 8001b1e:	2210      	movs	r2, #16
 8001b20:	431a      	orrs	r2, r3
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b2a:	2201      	movs	r2, #1
 8001b2c:	431a      	orrs	r2, r3
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	63da      	str	r2, [r3, #60]	; 0x3c
      
      tmp_hal_status = HAL_ERROR;
 8001b32:	230f      	movs	r3, #15
 8001b34:	18fb      	adds	r3, r7, r3
 8001b36:	2201      	movs	r2, #1
 8001b38:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8001b3a:	e009      	b.n	8001b50 <HAL_ADC_Init+0x264>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b40:	2210      	movs	r2, #16
 8001b42:	431a      	orrs	r2, r3
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	639a      	str	r2, [r3, #56]	; 0x38
        
    tmp_hal_status = HAL_ERROR;
 8001b48:	230f      	movs	r3, #15
 8001b4a:	18fb      	adds	r3, r7, r3
 8001b4c:	2201      	movs	r2, #1
 8001b4e:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001b50:	230f      	movs	r3, #15
 8001b52:	18fb      	adds	r3, r7, r3
 8001b54:	781b      	ldrb	r3, [r3, #0]
}
 8001b56:	0018      	movs	r0, r3
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	b004      	add	sp, #16
 8001b5c:	bd80      	pop	{r7, pc}
 8001b5e:	46c0      	nop			; (mov r8, r8)
 8001b60:	fffffefd 	.word	0xfffffefd
 8001b64:	fffe0219 	.word	0xfffe0219
 8001b68:	833fffe7 	.word	0x833fffe7

08001b6c <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b084      	sub	sp, #16
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]
 8001b74:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001b76:	230f      	movs	r3, #15
 8001b78:	18fb      	adds	r3, r7, r3
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	701a      	strb	r2, [r3, #0]
  __IO uint32_t wait_loop_index = 0U;
 8001b7e:	2300      	movs	r3, #0
 8001b80:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001b86:	2380      	movs	r3, #128	; 0x80
 8001b88:	055b      	lsls	r3, r3, #21
 8001b8a:	429a      	cmp	r2, r3
 8001b8c:	d011      	beq.n	8001bb2 <HAL_ADC_ConfigChannel+0x46>
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b92:	2b01      	cmp	r3, #1
 8001b94:	d00d      	beq.n	8001bb2 <HAL_ADC_ConfigChannel+0x46>
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b9a:	2b02      	cmp	r3, #2
 8001b9c:	d009      	beq.n	8001bb2 <HAL_ADC_ConfigChannel+0x46>
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ba2:	2b03      	cmp	r3, #3
 8001ba4:	d005      	beq.n	8001bb2 <HAL_ADC_ConfigChannel+0x46>
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001baa:	2b04      	cmp	r3, #4
 8001bac:	d001      	beq.n	8001bb2 <HAL_ADC_ConfigChannel+0x46>
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  {
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	2234      	movs	r2, #52	; 0x34
 8001bb6:	5c9b      	ldrb	r3, [r3, r2]
 8001bb8:	2b01      	cmp	r3, #1
 8001bba:	d101      	bne.n	8001bc0 <HAL_ADC_ConfigChannel+0x54>
 8001bbc:	2302      	movs	r3, #2
 8001bbe:	e0d0      	b.n	8001d62 <HAL_ADC_ConfigChannel+0x1f6>
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	2234      	movs	r2, #52	; 0x34
 8001bc4:	2101      	movs	r1, #1
 8001bc6:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	689b      	ldr	r3, [r3, #8]
 8001bce:	2204      	movs	r2, #4
 8001bd0:	4013      	ands	r3, r2
 8001bd2:	d000      	beq.n	8001bd6 <HAL_ADC_ConfigChannel+0x6a>
 8001bd4:	e0b4      	b.n	8001d40 <HAL_ADC_ConfigChannel+0x1d4>
  {
    /* Configure channel: depending on rank setting, add it or remove it from */
    /* ADC conversion sequencer.                                              */
    if (sConfig->Rank != ADC_RANK_NONE)
 8001bd6:	683b      	ldr	r3, [r7, #0]
 8001bd8:	685b      	ldr	r3, [r3, #4]
 8001bda:	4a64      	ldr	r2, [pc, #400]	; (8001d6c <HAL_ADC_ConfigChannel+0x200>)
 8001bdc:	4293      	cmp	r3, r2
 8001bde:	d100      	bne.n	8001be2 <HAL_ADC_ConfigChannel+0x76>
 8001be0:	e082      	b.n	8001ce8 <HAL_ADC_ConfigChannel+0x17c>
    {
      /* Regular sequence configuration */
      /* Set the channel selection register from the selected channel */
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8001be8:	683b      	ldr	r3, [r7, #0]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	2201      	movs	r2, #1
 8001bee:	409a      	lsls	r2, r3
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	430a      	orrs	r2, r1
 8001bf6:	629a      	str	r2, [r3, #40]	; 0x28
      /* Channel sampling time configuration */
      /* Management of parameters "SamplingTimeCommon" and "SamplingTime"     */
      /* (obsolete): sampling time set in this function with                  */
      /* parameter "SamplingTime" (obsolete) only if not already set into     */
      /* ADC initialization structure with parameter "SamplingTimeCommon".    */
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001bfc:	2380      	movs	r3, #128	; 0x80
 8001bfe:	055b      	lsls	r3, r3, #21
 8001c00:	429a      	cmp	r2, r3
 8001c02:	d037      	beq.n	8001c74 <HAL_ADC_ConfigChannel+0x108>
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c08:	2b01      	cmp	r3, #1
 8001c0a:	d033      	beq.n	8001c74 <HAL_ADC_ConfigChannel+0x108>
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c10:	2b02      	cmp	r3, #2
 8001c12:	d02f      	beq.n	8001c74 <HAL_ADC_ConfigChannel+0x108>
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c18:	2b03      	cmp	r3, #3
 8001c1a:	d02b      	beq.n	8001c74 <HAL_ADC_ConfigChannel+0x108>
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c20:	2b04      	cmp	r3, #4
 8001c22:	d027      	beq.n	8001c74 <HAL_ADC_ConfigChannel+0x108>
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c28:	2b05      	cmp	r3, #5
 8001c2a:	d023      	beq.n	8001c74 <HAL_ADC_ConfigChannel+0x108>
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c30:	2b06      	cmp	r3, #6
 8001c32:	d01f      	beq.n	8001c74 <HAL_ADC_ConfigChannel+0x108>
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c38:	2b07      	cmp	r3, #7
 8001c3a:	d01b      	beq.n	8001c74 <HAL_ADC_ConfigChannel+0x108>
      {
        /* Modify sampling time if needed (not needed in case of reoccurrence */
        /* for several channels programmed consecutively into the sequencer)  */
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 8001c3c:	683b      	ldr	r3, [r7, #0]
 8001c3e:	689a      	ldr	r2, [r3, #8]
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	695b      	ldr	r3, [r3, #20]
 8001c46:	2107      	movs	r1, #7
 8001c48:	400b      	ands	r3, r1
 8001c4a:	429a      	cmp	r2, r3
 8001c4c:	d012      	beq.n	8001c74 <HAL_ADC_ConfigChannel+0x108>
        {
          /* Channel sampling time configuration */
          /* Clear the old sample time */
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	695a      	ldr	r2, [r3, #20]
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	2107      	movs	r1, #7
 8001c5a:	438a      	bics	r2, r1
 8001c5c:	615a      	str	r2, [r3, #20]
          
          /* Set the new sample time */
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	6959      	ldr	r1, [r3, #20]
 8001c64:	683b      	ldr	r3, [r7, #0]
 8001c66:	689b      	ldr	r3, [r3, #8]
 8001c68:	2207      	movs	r2, #7
 8001c6a:	401a      	ands	r2, r3
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	430a      	orrs	r2, r1
 8001c72:	615a      	str	r2, [r3, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001c74:	683b      	ldr	r3, [r7, #0]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	2b10      	cmp	r3, #16
 8001c7a:	d007      	beq.n	8001c8c <HAL_ADC_ConfigChannel+0x120>
 8001c7c:	683b      	ldr	r3, [r7, #0]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	2b11      	cmp	r3, #17
 8001c82:	d003      	beq.n	8001c8c <HAL_ADC_ConfigChannel+0x120>
 8001c84:	683b      	ldr	r3, [r7, #0]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	2b12      	cmp	r3, #18
 8001c8a:	d163      	bne.n	8001d54 <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path. */
        /* If Channel_17 is selected, enable VREFINT measurement path. */
        /* If Channel_18 is selected, enable VBAT measurement path. */
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8001c8c:	4b38      	ldr	r3, [pc, #224]	; (8001d70 <HAL_ADC_ConfigChannel+0x204>)
 8001c8e:	6819      	ldr	r1, [r3, #0]
 8001c90:	683b      	ldr	r3, [r7, #0]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	2b10      	cmp	r3, #16
 8001c96:	d009      	beq.n	8001cac <HAL_ADC_ConfigChannel+0x140>
 8001c98:	683b      	ldr	r3, [r7, #0]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	2b11      	cmp	r3, #17
 8001c9e:	d102      	bne.n	8001ca6 <HAL_ADC_ConfigChannel+0x13a>
 8001ca0:	2380      	movs	r3, #128	; 0x80
 8001ca2:	03db      	lsls	r3, r3, #15
 8001ca4:	e004      	b.n	8001cb0 <HAL_ADC_ConfigChannel+0x144>
 8001ca6:	2380      	movs	r3, #128	; 0x80
 8001ca8:	045b      	lsls	r3, r3, #17
 8001caa:	e001      	b.n	8001cb0 <HAL_ADC_ConfigChannel+0x144>
 8001cac:	2380      	movs	r3, #128	; 0x80
 8001cae:	041b      	lsls	r3, r3, #16
 8001cb0:	4a2f      	ldr	r2, [pc, #188]	; (8001d70 <HAL_ADC_ConfigChannel+0x204>)
 8001cb2:	430b      	orrs	r3, r1
 8001cb4:	6013      	str	r3, [r2, #0]
        
        /* If Temp. sensor is selected, wait for stabilization delay */
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001cb6:	683b      	ldr	r3, [r7, #0]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	2b10      	cmp	r3, #16
 8001cbc:	d14a      	bne.n	8001d54 <HAL_ADC_ConfigChannel+0x1e8>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001cbe:	4b2d      	ldr	r3, [pc, #180]	; (8001d74 <HAL_ADC_ConfigChannel+0x208>)
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	492d      	ldr	r1, [pc, #180]	; (8001d78 <HAL_ADC_ConfigChannel+0x20c>)
 8001cc4:	0018      	movs	r0, r3
 8001cc6:	f7fe fa31 	bl	800012c <__udivsi3>
 8001cca:	0003      	movs	r3, r0
 8001ccc:	001a      	movs	r2, r3
 8001cce:	0013      	movs	r3, r2
 8001cd0:	009b      	lsls	r3, r3, #2
 8001cd2:	189b      	adds	r3, r3, r2
 8001cd4:	005b      	lsls	r3, r3, #1
 8001cd6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001cd8:	e002      	b.n	8001ce0 <HAL_ADC_ConfigChannel+0x174>
          {
            wait_loop_index--;
 8001cda:	68bb      	ldr	r3, [r7, #8]
 8001cdc:	3b01      	subs	r3, #1
 8001cde:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001ce0:	68bb      	ldr	r3, [r7, #8]
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d1f9      	bne.n	8001cda <HAL_ADC_ConfigChannel+0x16e>
 8001ce6:	e035      	b.n	8001d54 <HAL_ADC_ConfigChannel+0x1e8>
    }
    else
    {
      /* Regular sequence configuration */
      /* Reset the channel selection register from the selected channel */
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001cee:	683b      	ldr	r3, [r7, #0]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	2101      	movs	r1, #1
 8001cf4:	4099      	lsls	r1, r3
 8001cf6:	000b      	movs	r3, r1
 8001cf8:	43d9      	mvns	r1, r3
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	400a      	ands	r2, r1
 8001d00:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
      /* internal measurement paths disable: If internal channel selected,    */
      /* disable dedicated internal buffers and path.                         */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001d02:	683b      	ldr	r3, [r7, #0]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	2b10      	cmp	r3, #16
 8001d08:	d007      	beq.n	8001d1a <HAL_ADC_ConfigChannel+0x1ae>
 8001d0a:	683b      	ldr	r3, [r7, #0]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	2b11      	cmp	r3, #17
 8001d10:	d003      	beq.n	8001d1a <HAL_ADC_ConfigChannel+0x1ae>
 8001d12:	683b      	ldr	r3, [r7, #0]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	2b12      	cmp	r3, #18
 8001d18:	d11c      	bne.n	8001d54 <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, disable Temp. sensor measurement path. */
        /* If Channel_17 is selected, disable VREFINT measurement path. */
        /* If Channel_18 is selected, disable VBAT measurement path. */
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8001d1a:	4b15      	ldr	r3, [pc, #84]	; (8001d70 <HAL_ADC_ConfigChannel+0x204>)
 8001d1c:	6819      	ldr	r1, [r3, #0]
 8001d1e:	683b      	ldr	r3, [r7, #0]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	2b10      	cmp	r3, #16
 8001d24:	d007      	beq.n	8001d36 <HAL_ADC_ConfigChannel+0x1ca>
 8001d26:	683b      	ldr	r3, [r7, #0]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	2b11      	cmp	r3, #17
 8001d2c:	d101      	bne.n	8001d32 <HAL_ADC_ConfigChannel+0x1c6>
 8001d2e:	4b13      	ldr	r3, [pc, #76]	; (8001d7c <HAL_ADC_ConfigChannel+0x210>)
 8001d30:	e002      	b.n	8001d38 <HAL_ADC_ConfigChannel+0x1cc>
 8001d32:	4b13      	ldr	r3, [pc, #76]	; (8001d80 <HAL_ADC_ConfigChannel+0x214>)
 8001d34:	e000      	b.n	8001d38 <HAL_ADC_ConfigChannel+0x1cc>
 8001d36:	4b13      	ldr	r3, [pc, #76]	; (8001d84 <HAL_ADC_ConfigChannel+0x218>)
 8001d38:	4a0d      	ldr	r2, [pc, #52]	; (8001d70 <HAL_ADC_ConfigChannel+0x204>)
 8001d3a:	400b      	ands	r3, r1
 8001d3c:	6013      	str	r3, [r2, #0]
 8001d3e:	e009      	b.n	8001d54 <HAL_ADC_ConfigChannel+0x1e8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d44:	2220      	movs	r2, #32
 8001d46:	431a      	orrs	r2, r3
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	639a      	str	r2, [r3, #56]	; 0x38
    
    tmp_hal_status = HAL_ERROR;
 8001d4c:	230f      	movs	r3, #15
 8001d4e:	18fb      	adds	r3, r7, r3
 8001d50:	2201      	movs	r2, #1
 8001d52:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	2234      	movs	r2, #52	; 0x34
 8001d58:	2100      	movs	r1, #0
 8001d5a:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8001d5c:	230f      	movs	r3, #15
 8001d5e:	18fb      	adds	r3, r7, r3
 8001d60:	781b      	ldrb	r3, [r3, #0]
}
 8001d62:	0018      	movs	r0, r3
 8001d64:	46bd      	mov	sp, r7
 8001d66:	b004      	add	sp, #16
 8001d68:	bd80      	pop	{r7, pc}
 8001d6a:	46c0      	nop			; (mov r8, r8)
 8001d6c:	00001001 	.word	0x00001001
 8001d70:	40012708 	.word	0x40012708
 8001d74:	20000000 	.word	0x20000000
 8001d78:	000f4240 	.word	0x000f4240
 8001d7c:	ffbfffff 	.word	0xffbfffff
 8001d80:	feffffff 	.word	0xfeffffff
 8001d84:	ff7fffff 	.word	0xff7fffff

08001d88 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	b082      	sub	sp, #8
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	0002      	movs	r2, r0
 8001d90:	1dfb      	adds	r3, r7, #7
 8001d92:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001d94:	1dfb      	adds	r3, r7, #7
 8001d96:	781b      	ldrb	r3, [r3, #0]
 8001d98:	2b7f      	cmp	r3, #127	; 0x7f
 8001d9a:	d809      	bhi.n	8001db0 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d9c:	1dfb      	adds	r3, r7, #7
 8001d9e:	781b      	ldrb	r3, [r3, #0]
 8001da0:	001a      	movs	r2, r3
 8001da2:	231f      	movs	r3, #31
 8001da4:	401a      	ands	r2, r3
 8001da6:	4b04      	ldr	r3, [pc, #16]	; (8001db8 <__NVIC_EnableIRQ+0x30>)
 8001da8:	2101      	movs	r1, #1
 8001daa:	4091      	lsls	r1, r2
 8001dac:	000a      	movs	r2, r1
 8001dae:	601a      	str	r2, [r3, #0]
  }
}
 8001db0:	46c0      	nop			; (mov r8, r8)
 8001db2:	46bd      	mov	sp, r7
 8001db4:	b002      	add	sp, #8
 8001db6:	bd80      	pop	{r7, pc}
 8001db8:	e000e100 	.word	0xe000e100

08001dbc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001dbc:	b590      	push	{r4, r7, lr}
 8001dbe:	b083      	sub	sp, #12
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	0002      	movs	r2, r0
 8001dc4:	6039      	str	r1, [r7, #0]
 8001dc6:	1dfb      	adds	r3, r7, #7
 8001dc8:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001dca:	1dfb      	adds	r3, r7, #7
 8001dcc:	781b      	ldrb	r3, [r3, #0]
 8001dce:	2b7f      	cmp	r3, #127	; 0x7f
 8001dd0:	d828      	bhi.n	8001e24 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001dd2:	4a2f      	ldr	r2, [pc, #188]	; (8001e90 <__NVIC_SetPriority+0xd4>)
 8001dd4:	1dfb      	adds	r3, r7, #7
 8001dd6:	781b      	ldrb	r3, [r3, #0]
 8001dd8:	b25b      	sxtb	r3, r3
 8001dda:	089b      	lsrs	r3, r3, #2
 8001ddc:	33c0      	adds	r3, #192	; 0xc0
 8001dde:	009b      	lsls	r3, r3, #2
 8001de0:	589b      	ldr	r3, [r3, r2]
 8001de2:	1dfa      	adds	r2, r7, #7
 8001de4:	7812      	ldrb	r2, [r2, #0]
 8001de6:	0011      	movs	r1, r2
 8001de8:	2203      	movs	r2, #3
 8001dea:	400a      	ands	r2, r1
 8001dec:	00d2      	lsls	r2, r2, #3
 8001dee:	21ff      	movs	r1, #255	; 0xff
 8001df0:	4091      	lsls	r1, r2
 8001df2:	000a      	movs	r2, r1
 8001df4:	43d2      	mvns	r2, r2
 8001df6:	401a      	ands	r2, r3
 8001df8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001dfa:	683b      	ldr	r3, [r7, #0]
 8001dfc:	019b      	lsls	r3, r3, #6
 8001dfe:	22ff      	movs	r2, #255	; 0xff
 8001e00:	401a      	ands	r2, r3
 8001e02:	1dfb      	adds	r3, r7, #7
 8001e04:	781b      	ldrb	r3, [r3, #0]
 8001e06:	0018      	movs	r0, r3
 8001e08:	2303      	movs	r3, #3
 8001e0a:	4003      	ands	r3, r0
 8001e0c:	00db      	lsls	r3, r3, #3
 8001e0e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001e10:	481f      	ldr	r0, [pc, #124]	; (8001e90 <__NVIC_SetPriority+0xd4>)
 8001e12:	1dfb      	adds	r3, r7, #7
 8001e14:	781b      	ldrb	r3, [r3, #0]
 8001e16:	b25b      	sxtb	r3, r3
 8001e18:	089b      	lsrs	r3, r3, #2
 8001e1a:	430a      	orrs	r2, r1
 8001e1c:	33c0      	adds	r3, #192	; 0xc0
 8001e1e:	009b      	lsls	r3, r3, #2
 8001e20:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001e22:	e031      	b.n	8001e88 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001e24:	4a1b      	ldr	r2, [pc, #108]	; (8001e94 <__NVIC_SetPriority+0xd8>)
 8001e26:	1dfb      	adds	r3, r7, #7
 8001e28:	781b      	ldrb	r3, [r3, #0]
 8001e2a:	0019      	movs	r1, r3
 8001e2c:	230f      	movs	r3, #15
 8001e2e:	400b      	ands	r3, r1
 8001e30:	3b08      	subs	r3, #8
 8001e32:	089b      	lsrs	r3, r3, #2
 8001e34:	3306      	adds	r3, #6
 8001e36:	009b      	lsls	r3, r3, #2
 8001e38:	18d3      	adds	r3, r2, r3
 8001e3a:	3304      	adds	r3, #4
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	1dfa      	adds	r2, r7, #7
 8001e40:	7812      	ldrb	r2, [r2, #0]
 8001e42:	0011      	movs	r1, r2
 8001e44:	2203      	movs	r2, #3
 8001e46:	400a      	ands	r2, r1
 8001e48:	00d2      	lsls	r2, r2, #3
 8001e4a:	21ff      	movs	r1, #255	; 0xff
 8001e4c:	4091      	lsls	r1, r2
 8001e4e:	000a      	movs	r2, r1
 8001e50:	43d2      	mvns	r2, r2
 8001e52:	401a      	ands	r2, r3
 8001e54:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001e56:	683b      	ldr	r3, [r7, #0]
 8001e58:	019b      	lsls	r3, r3, #6
 8001e5a:	22ff      	movs	r2, #255	; 0xff
 8001e5c:	401a      	ands	r2, r3
 8001e5e:	1dfb      	adds	r3, r7, #7
 8001e60:	781b      	ldrb	r3, [r3, #0]
 8001e62:	0018      	movs	r0, r3
 8001e64:	2303      	movs	r3, #3
 8001e66:	4003      	ands	r3, r0
 8001e68:	00db      	lsls	r3, r3, #3
 8001e6a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001e6c:	4809      	ldr	r0, [pc, #36]	; (8001e94 <__NVIC_SetPriority+0xd8>)
 8001e6e:	1dfb      	adds	r3, r7, #7
 8001e70:	781b      	ldrb	r3, [r3, #0]
 8001e72:	001c      	movs	r4, r3
 8001e74:	230f      	movs	r3, #15
 8001e76:	4023      	ands	r3, r4
 8001e78:	3b08      	subs	r3, #8
 8001e7a:	089b      	lsrs	r3, r3, #2
 8001e7c:	430a      	orrs	r2, r1
 8001e7e:	3306      	adds	r3, #6
 8001e80:	009b      	lsls	r3, r3, #2
 8001e82:	18c3      	adds	r3, r0, r3
 8001e84:	3304      	adds	r3, #4
 8001e86:	601a      	str	r2, [r3, #0]
}
 8001e88:	46c0      	nop			; (mov r8, r8)
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	b003      	add	sp, #12
 8001e8e:	bd90      	pop	{r4, r7, pc}
 8001e90:	e000e100 	.word	0xe000e100
 8001e94:	e000ed00 	.word	0xe000ed00

08001e98 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	b082      	sub	sp, #8
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	1e5a      	subs	r2, r3, #1
 8001ea4:	2380      	movs	r3, #128	; 0x80
 8001ea6:	045b      	lsls	r3, r3, #17
 8001ea8:	429a      	cmp	r2, r3
 8001eaa:	d301      	bcc.n	8001eb0 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001eac:	2301      	movs	r3, #1
 8001eae:	e010      	b.n	8001ed2 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001eb0:	4b0a      	ldr	r3, [pc, #40]	; (8001edc <SysTick_Config+0x44>)
 8001eb2:	687a      	ldr	r2, [r7, #4]
 8001eb4:	3a01      	subs	r2, #1
 8001eb6:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001eb8:	2301      	movs	r3, #1
 8001eba:	425b      	negs	r3, r3
 8001ebc:	2103      	movs	r1, #3
 8001ebe:	0018      	movs	r0, r3
 8001ec0:	f7ff ff7c 	bl	8001dbc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ec4:	4b05      	ldr	r3, [pc, #20]	; (8001edc <SysTick_Config+0x44>)
 8001ec6:	2200      	movs	r2, #0
 8001ec8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001eca:	4b04      	ldr	r3, [pc, #16]	; (8001edc <SysTick_Config+0x44>)
 8001ecc:	2207      	movs	r2, #7
 8001ece:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ed0:	2300      	movs	r3, #0
}
 8001ed2:	0018      	movs	r0, r3
 8001ed4:	46bd      	mov	sp, r7
 8001ed6:	b002      	add	sp, #8
 8001ed8:	bd80      	pop	{r7, pc}
 8001eda:	46c0      	nop			; (mov r8, r8)
 8001edc:	e000e010 	.word	0xe000e010

08001ee0 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	b084      	sub	sp, #16
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	60b9      	str	r1, [r7, #8]
 8001ee8:	607a      	str	r2, [r7, #4]
 8001eea:	210f      	movs	r1, #15
 8001eec:	187b      	adds	r3, r7, r1
 8001eee:	1c02      	adds	r2, r0, #0
 8001ef0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8001ef2:	68ba      	ldr	r2, [r7, #8]
 8001ef4:	187b      	adds	r3, r7, r1
 8001ef6:	781b      	ldrb	r3, [r3, #0]
 8001ef8:	b25b      	sxtb	r3, r3
 8001efa:	0011      	movs	r1, r2
 8001efc:	0018      	movs	r0, r3
 8001efe:	f7ff ff5d 	bl	8001dbc <__NVIC_SetPriority>
}
 8001f02:	46c0      	nop			; (mov r8, r8)
 8001f04:	46bd      	mov	sp, r7
 8001f06:	b004      	add	sp, #16
 8001f08:	bd80      	pop	{r7, pc}

08001f0a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f0a:	b580      	push	{r7, lr}
 8001f0c:	b082      	sub	sp, #8
 8001f0e:	af00      	add	r7, sp, #0
 8001f10:	0002      	movs	r2, r0
 8001f12:	1dfb      	adds	r3, r7, #7
 8001f14:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001f16:	1dfb      	adds	r3, r7, #7
 8001f18:	781b      	ldrb	r3, [r3, #0]
 8001f1a:	b25b      	sxtb	r3, r3
 8001f1c:	0018      	movs	r0, r3
 8001f1e:	f7ff ff33 	bl	8001d88 <__NVIC_EnableIRQ>
}
 8001f22:	46c0      	nop			; (mov r8, r8)
 8001f24:	46bd      	mov	sp, r7
 8001f26:	b002      	add	sp, #8
 8001f28:	bd80      	pop	{r7, pc}

08001f2a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f2a:	b580      	push	{r7, lr}
 8001f2c:	b082      	sub	sp, #8
 8001f2e:	af00      	add	r7, sp, #0
 8001f30:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	0018      	movs	r0, r3
 8001f36:	f7ff ffaf 	bl	8001e98 <SysTick_Config>
 8001f3a:	0003      	movs	r3, r0
}
 8001f3c:	0018      	movs	r0, r3
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	b002      	add	sp, #8
 8001f42:	bd80      	pop	{r7, pc}

08001f44 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8001f44:	b580      	push	{r7, lr}
 8001f46:	b084      	sub	sp, #16
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001f4c:	2300      	movs	r3, #0
 8001f4e:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d101      	bne.n	8001f5a <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8001f56:	2301      	movs	r3, #1
 8001f58:	e036      	b.n	8001fc8 <HAL_DMA_Init+0x84>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	2221      	movs	r2, #33	; 0x21
 8001f5e:	2102      	movs	r1, #2
 8001f60:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	4a18      	ldr	r2, [pc, #96]	; (8001fd0 <HAL_DMA_Init+0x8c>)
 8001f6e:	4013      	ands	r3, r2
 8001f70:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001f7a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	68db      	ldr	r3, [r3, #12]
 8001f80:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001f86:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	695b      	ldr	r3, [r3, #20]
 8001f8c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001f92:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	69db      	ldr	r3, [r3, #28]
 8001f98:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001f9a:	68fa      	ldr	r2, [r7, #12]
 8001f9c:	4313      	orrs	r3, r2
 8001f9e:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	68fa      	ldr	r2, [r7, #12]
 8001fa6:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	0018      	movs	r0, r3
 8001fac:	f000 f932 	bl	8002214 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	2221      	movs	r2, #33	; 0x21
 8001fba:	2101      	movs	r1, #1
 8001fbc:	5499      	strb	r1, [r3, r2]
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	2220      	movs	r2, #32
 8001fc2:	2100      	movs	r1, #0
 8001fc4:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 8001fc6:	2300      	movs	r3, #0
}  
 8001fc8:	0018      	movs	r0, r3
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	b004      	add	sp, #16
 8001fce:	bd80      	pop	{r7, pc}
 8001fd0:	ffffc00f 	.word	0xffffc00f

08001fd4 <HAL_DMA_Abort>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	b082      	sub	sp, #8
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	2221      	movs	r2, #33	; 0x21
 8001fe0:	5c9b      	ldrb	r3, [r3, r2]
 8001fe2:	b2db      	uxtb	r3, r3
 8001fe4:	2b02      	cmp	r3, #2
 8001fe6:	d008      	beq.n	8001ffa <HAL_DMA_Abort+0x26>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	2204      	movs	r2, #4
 8001fec:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	2220      	movs	r2, #32
 8001ff2:	2100      	movs	r1, #0
 8001ff4:	5499      	strb	r1, [r3, r2]
    
    return HAL_ERROR;
 8001ff6:	2301      	movs	r3, #1
 8001ff8:	e020      	b.n	800203c <HAL_DMA_Abort+0x68>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	681a      	ldr	r2, [r3, #0]
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	210e      	movs	r1, #14
 8002006:	438a      	bics	r2, r1
 8002008:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	681a      	ldr	r2, [r3, #0]
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	2101      	movs	r1, #1
 8002016:	438a      	bics	r2, r1
 8002018:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002022:	2101      	movs	r1, #1
 8002024:	4091      	lsls	r1, r2
 8002026:	000a      	movs	r2, r1
 8002028:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	2221      	movs	r2, #33	; 0x21
 800202e:	2101      	movs	r1, #1
 8002030:	5499      	strb	r1, [r3, r2]
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	2220      	movs	r2, #32
 8002036:	2100      	movs	r1, #0
 8002038:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 800203a:	2300      	movs	r3, #0
}
 800203c:	0018      	movs	r0, r3
 800203e:	46bd      	mov	sp, r7
 8002040:	b002      	add	sp, #8
 8002042:	bd80      	pop	{r7, pc}

08002044 <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002044:	b580      	push	{r7, lr}
 8002046:	b084      	sub	sp, #16
 8002048:	af00      	add	r7, sp, #0
 800204a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800204c:	210f      	movs	r1, #15
 800204e:	187b      	adds	r3, r7, r1
 8002050:	2200      	movs	r2, #0
 8002052:	701a      	strb	r2, [r3, #0]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	2221      	movs	r2, #33	; 0x21
 8002058:	5c9b      	ldrb	r3, [r3, r2]
 800205a:	b2db      	uxtb	r3, r3
 800205c:	2b02      	cmp	r3, #2
 800205e:	d006      	beq.n	800206e <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	2204      	movs	r2, #4
 8002064:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8002066:	187b      	adds	r3, r7, r1
 8002068:	2201      	movs	r2, #1
 800206a:	701a      	strb	r2, [r3, #0]
 800206c:	e028      	b.n	80020c0 <HAL_DMA_Abort_IT+0x7c>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	681a      	ldr	r2, [r3, #0]
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	210e      	movs	r1, #14
 800207a:	438a      	bics	r2, r1
 800207c:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	681a      	ldr	r2, [r3, #0]
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	2101      	movs	r1, #1
 800208a:	438a      	bics	r2, r1
 800208c:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002096:	2101      	movs	r1, #1
 8002098:	4091      	lsls	r1, r2
 800209a:	000a      	movs	r2, r1
 800209c:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	2221      	movs	r2, #33	; 0x21
 80020a2:	2101      	movs	r1, #1
 80020a4:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	2220      	movs	r2, #32
 80020aa:	2100      	movs	r1, #0
 80020ac:	5499      	strb	r1, [r3, r2]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d004      	beq.n	80020c0 <HAL_DMA_Abort_IT+0x7c>
    {
      hdma->XferAbortCallback(hdma);
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80020ba:	687a      	ldr	r2, [r7, #4]
 80020bc:	0010      	movs	r0, r2
 80020be:	4798      	blx	r3
    } 
  }
  return status;
 80020c0:	230f      	movs	r3, #15
 80020c2:	18fb      	adds	r3, r7, r3
 80020c4:	781b      	ldrb	r3, [r3, #0]
}
 80020c6:	0018      	movs	r0, r3
 80020c8:	46bd      	mov	sp, r7
 80020ca:	b004      	add	sp, #16
 80020cc:	bd80      	pop	{r7, pc}

080020ce <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80020ce:	b580      	push	{r7, lr}
 80020d0:	b084      	sub	sp, #16
 80020d2:	af00      	add	r7, sp, #0
 80020d4:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ea:	2204      	movs	r2, #4
 80020ec:	409a      	lsls	r2, r3
 80020ee:	0013      	movs	r3, r2
 80020f0:	68fa      	ldr	r2, [r7, #12]
 80020f2:	4013      	ands	r3, r2
 80020f4:	d024      	beq.n	8002140 <HAL_DMA_IRQHandler+0x72>
 80020f6:	68bb      	ldr	r3, [r7, #8]
 80020f8:	2204      	movs	r2, #4
 80020fa:	4013      	ands	r3, r2
 80020fc:	d020      	beq.n	8002140 <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	2220      	movs	r2, #32
 8002106:	4013      	ands	r3, r2
 8002108:	d107      	bne.n	800211a <HAL_DMA_IRQHandler+0x4c>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	681a      	ldr	r2, [r3, #0]
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	2104      	movs	r1, #4
 8002116:	438a      	bics	r2, r1
 8002118:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002122:	2104      	movs	r1, #4
 8002124:	4091      	lsls	r1, r2
 8002126:	000a      	movs	r2, r1
 8002128:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800212e:	2b00      	cmp	r3, #0
 8002130:	d100      	bne.n	8002134 <HAL_DMA_IRQHandler+0x66>
 8002132:	e06a      	b.n	800220a <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002138:	687a      	ldr	r2, [r7, #4]
 800213a:	0010      	movs	r0, r2
 800213c:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 800213e:	e064      	b.n	800220a <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002144:	2202      	movs	r2, #2
 8002146:	409a      	lsls	r2, r3
 8002148:	0013      	movs	r3, r2
 800214a:	68fa      	ldr	r2, [r7, #12]
 800214c:	4013      	ands	r3, r2
 800214e:	d02b      	beq.n	80021a8 <HAL_DMA_IRQHandler+0xda>
 8002150:	68bb      	ldr	r3, [r7, #8]
 8002152:	2202      	movs	r2, #2
 8002154:	4013      	ands	r3, r2
 8002156:	d027      	beq.n	80021a8 <HAL_DMA_IRQHandler+0xda>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	2220      	movs	r2, #32
 8002160:	4013      	ands	r3, r2
 8002162:	d10b      	bne.n	800217c <HAL_DMA_IRQHandler+0xae>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	681a      	ldr	r2, [r3, #0]
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	210a      	movs	r1, #10
 8002170:	438a      	bics	r2, r1
 8002172:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	2221      	movs	r2, #33	; 0x21
 8002178:	2101      	movs	r1, #1
 800217a:	5499      	strb	r1, [r3, r2]
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002184:	2102      	movs	r1, #2
 8002186:	4091      	lsls	r1, r2
 8002188:	000a      	movs	r2, r1
 800218a:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	2220      	movs	r2, #32
 8002190:	2100      	movs	r1, #0
 8002192:	5499      	strb	r1, [r3, r2]
  	
  	if(hdma->XferCpltCallback != NULL)
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002198:	2b00      	cmp	r3, #0
 800219a:	d036      	beq.n	800220a <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021a0:	687a      	ldr	r2, [r7, #4]
 80021a2:	0010      	movs	r0, r2
 80021a4:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 80021a6:	e030      	b.n	800220a <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021ac:	2208      	movs	r2, #8
 80021ae:	409a      	lsls	r2, r3
 80021b0:	0013      	movs	r3, r2
 80021b2:	68fa      	ldr	r2, [r7, #12]
 80021b4:	4013      	ands	r3, r2
 80021b6:	d028      	beq.n	800220a <HAL_DMA_IRQHandler+0x13c>
 80021b8:	68bb      	ldr	r3, [r7, #8]
 80021ba:	2208      	movs	r2, #8
 80021bc:	4013      	ands	r3, r2
 80021be:	d024      	beq.n	800220a <HAL_DMA_IRQHandler+0x13c>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	681a      	ldr	r2, [r3, #0]
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	210e      	movs	r1, #14
 80021cc:	438a      	bics	r2, r1
 80021ce:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021d8:	2101      	movs	r1, #1
 80021da:	4091      	lsls	r1, r2
 80021dc:	000a      	movs	r2, r1
 80021de:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	2201      	movs	r2, #1
 80021e4:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	2221      	movs	r2, #33	; 0x21
 80021ea:	2101      	movs	r1, #1
 80021ec:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	2220      	movs	r2, #32
 80021f2:	2100      	movs	r1, #0
 80021f4:	5499      	strb	r1, [r3, r2]
    
    if(hdma->XferErrorCallback != NULL)
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d005      	beq.n	800220a <HAL_DMA_IRQHandler+0x13c>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002202:	687a      	ldr	r2, [r7, #4]
 8002204:	0010      	movs	r0, r2
 8002206:	4798      	blx	r3
    }
   }
}  
 8002208:	e7ff      	b.n	800220a <HAL_DMA_IRQHandler+0x13c>
 800220a:	46c0      	nop			; (mov r8, r8)
 800220c:	46bd      	mov	sp, r7
 800220e:	b004      	add	sp, #16
 8002210:	bd80      	pop	{r7, pc}
	...

08002214 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002214:	b580      	push	{r7, lr}
 8002216:	b082      	sub	sp, #8
 8002218:	af00      	add	r7, sp, #0
 800221a:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	4a08      	ldr	r2, [pc, #32]	; (8002244 <DMA_CalcBaseAndBitshift+0x30>)
 8002222:	4694      	mov	ip, r2
 8002224:	4463      	add	r3, ip
 8002226:	2114      	movs	r1, #20
 8002228:	0018      	movs	r0, r3
 800222a:	f7fd ff7f 	bl	800012c <__udivsi3>
 800222e:	0003      	movs	r3, r0
 8002230:	009a      	lsls	r2, r3, #2
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	4a03      	ldr	r2, [pc, #12]	; (8002248 <DMA_CalcBaseAndBitshift+0x34>)
 800223a:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 800223c:	46c0      	nop			; (mov r8, r8)
 800223e:	46bd      	mov	sp, r7
 8002240:	b002      	add	sp, #8
 8002242:	bd80      	pop	{r7, pc}
 8002244:	bffdfff8 	.word	0xbffdfff8
 8002248:	40020000 	.word	0x40020000

0800224c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800224c:	b580      	push	{r7, lr}
 800224e:	b086      	sub	sp, #24
 8002250:	af00      	add	r7, sp, #0
 8002252:	6078      	str	r0, [r7, #4]
 8002254:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002256:	2300      	movs	r3, #0
 8002258:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800225a:	e155      	b.n	8002508 <HAL_GPIO_Init+0x2bc>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800225c:	683b      	ldr	r3, [r7, #0]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	2101      	movs	r1, #1
 8002262:	697a      	ldr	r2, [r7, #20]
 8002264:	4091      	lsls	r1, r2
 8002266:	000a      	movs	r2, r1
 8002268:	4013      	ands	r3, r2
 800226a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	2b00      	cmp	r3, #0
 8002270:	d100      	bne.n	8002274 <HAL_GPIO_Init+0x28>
 8002272:	e146      	b.n	8002502 <HAL_GPIO_Init+0x2b6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002274:	683b      	ldr	r3, [r7, #0]
 8002276:	685b      	ldr	r3, [r3, #4]
 8002278:	2203      	movs	r2, #3
 800227a:	4013      	ands	r3, r2
 800227c:	2b01      	cmp	r3, #1
 800227e:	d005      	beq.n	800228c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002280:	683b      	ldr	r3, [r7, #0]
 8002282:	685b      	ldr	r3, [r3, #4]
 8002284:	2203      	movs	r2, #3
 8002286:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002288:	2b02      	cmp	r3, #2
 800228a:	d130      	bne.n	80022ee <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	689b      	ldr	r3, [r3, #8]
 8002290:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8002292:	697b      	ldr	r3, [r7, #20]
 8002294:	005b      	lsls	r3, r3, #1
 8002296:	2203      	movs	r2, #3
 8002298:	409a      	lsls	r2, r3
 800229a:	0013      	movs	r3, r2
 800229c:	43da      	mvns	r2, r3
 800229e:	693b      	ldr	r3, [r7, #16]
 80022a0:	4013      	ands	r3, r2
 80022a2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80022a4:	683b      	ldr	r3, [r7, #0]
 80022a6:	68da      	ldr	r2, [r3, #12]
 80022a8:	697b      	ldr	r3, [r7, #20]
 80022aa:	005b      	lsls	r3, r3, #1
 80022ac:	409a      	lsls	r2, r3
 80022ae:	0013      	movs	r3, r2
 80022b0:	693a      	ldr	r2, [r7, #16]
 80022b2:	4313      	orrs	r3, r2
 80022b4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	693a      	ldr	r2, [r7, #16]
 80022ba:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	685b      	ldr	r3, [r3, #4]
 80022c0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80022c2:	2201      	movs	r2, #1
 80022c4:	697b      	ldr	r3, [r7, #20]
 80022c6:	409a      	lsls	r2, r3
 80022c8:	0013      	movs	r3, r2
 80022ca:	43da      	mvns	r2, r3
 80022cc:	693b      	ldr	r3, [r7, #16]
 80022ce:	4013      	ands	r3, r2
 80022d0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80022d2:	683b      	ldr	r3, [r7, #0]
 80022d4:	685b      	ldr	r3, [r3, #4]
 80022d6:	091b      	lsrs	r3, r3, #4
 80022d8:	2201      	movs	r2, #1
 80022da:	401a      	ands	r2, r3
 80022dc:	697b      	ldr	r3, [r7, #20]
 80022de:	409a      	lsls	r2, r3
 80022e0:	0013      	movs	r3, r2
 80022e2:	693a      	ldr	r2, [r7, #16]
 80022e4:	4313      	orrs	r3, r2
 80022e6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	693a      	ldr	r2, [r7, #16]
 80022ec:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80022ee:	683b      	ldr	r3, [r7, #0]
 80022f0:	685b      	ldr	r3, [r3, #4]
 80022f2:	2203      	movs	r2, #3
 80022f4:	4013      	ands	r3, r2
 80022f6:	2b03      	cmp	r3, #3
 80022f8:	d017      	beq.n	800232a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	68db      	ldr	r3, [r3, #12]
 80022fe:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002300:	697b      	ldr	r3, [r7, #20]
 8002302:	005b      	lsls	r3, r3, #1
 8002304:	2203      	movs	r2, #3
 8002306:	409a      	lsls	r2, r3
 8002308:	0013      	movs	r3, r2
 800230a:	43da      	mvns	r2, r3
 800230c:	693b      	ldr	r3, [r7, #16]
 800230e:	4013      	ands	r3, r2
 8002310:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002312:	683b      	ldr	r3, [r7, #0]
 8002314:	689a      	ldr	r2, [r3, #8]
 8002316:	697b      	ldr	r3, [r7, #20]
 8002318:	005b      	lsls	r3, r3, #1
 800231a:	409a      	lsls	r2, r3
 800231c:	0013      	movs	r3, r2
 800231e:	693a      	ldr	r2, [r7, #16]
 8002320:	4313      	orrs	r3, r2
 8002322:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	693a      	ldr	r2, [r7, #16]
 8002328:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800232a:	683b      	ldr	r3, [r7, #0]
 800232c:	685b      	ldr	r3, [r3, #4]
 800232e:	2203      	movs	r2, #3
 8002330:	4013      	ands	r3, r2
 8002332:	2b02      	cmp	r3, #2
 8002334:	d123      	bne.n	800237e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002336:	697b      	ldr	r3, [r7, #20]
 8002338:	08da      	lsrs	r2, r3, #3
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	3208      	adds	r2, #8
 800233e:	0092      	lsls	r2, r2, #2
 8002340:	58d3      	ldr	r3, [r2, r3]
 8002342:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002344:	697b      	ldr	r3, [r7, #20]
 8002346:	2207      	movs	r2, #7
 8002348:	4013      	ands	r3, r2
 800234a:	009b      	lsls	r3, r3, #2
 800234c:	220f      	movs	r2, #15
 800234e:	409a      	lsls	r2, r3
 8002350:	0013      	movs	r3, r2
 8002352:	43da      	mvns	r2, r3
 8002354:	693b      	ldr	r3, [r7, #16]
 8002356:	4013      	ands	r3, r2
 8002358:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800235a:	683b      	ldr	r3, [r7, #0]
 800235c:	691a      	ldr	r2, [r3, #16]
 800235e:	697b      	ldr	r3, [r7, #20]
 8002360:	2107      	movs	r1, #7
 8002362:	400b      	ands	r3, r1
 8002364:	009b      	lsls	r3, r3, #2
 8002366:	409a      	lsls	r2, r3
 8002368:	0013      	movs	r3, r2
 800236a:	693a      	ldr	r2, [r7, #16]
 800236c:	4313      	orrs	r3, r2
 800236e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002370:	697b      	ldr	r3, [r7, #20]
 8002372:	08da      	lsrs	r2, r3, #3
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	3208      	adds	r2, #8
 8002378:	0092      	lsls	r2, r2, #2
 800237a:	6939      	ldr	r1, [r7, #16]
 800237c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002384:	697b      	ldr	r3, [r7, #20]
 8002386:	005b      	lsls	r3, r3, #1
 8002388:	2203      	movs	r2, #3
 800238a:	409a      	lsls	r2, r3
 800238c:	0013      	movs	r3, r2
 800238e:	43da      	mvns	r2, r3
 8002390:	693b      	ldr	r3, [r7, #16]
 8002392:	4013      	ands	r3, r2
 8002394:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002396:	683b      	ldr	r3, [r7, #0]
 8002398:	685b      	ldr	r3, [r3, #4]
 800239a:	2203      	movs	r2, #3
 800239c:	401a      	ands	r2, r3
 800239e:	697b      	ldr	r3, [r7, #20]
 80023a0:	005b      	lsls	r3, r3, #1
 80023a2:	409a      	lsls	r2, r3
 80023a4:	0013      	movs	r3, r2
 80023a6:	693a      	ldr	r2, [r7, #16]
 80023a8:	4313      	orrs	r3, r2
 80023aa:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	693a      	ldr	r2, [r7, #16]
 80023b0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80023b2:	683b      	ldr	r3, [r7, #0]
 80023b4:	685a      	ldr	r2, [r3, #4]
 80023b6:	23c0      	movs	r3, #192	; 0xc0
 80023b8:	029b      	lsls	r3, r3, #10
 80023ba:	4013      	ands	r3, r2
 80023bc:	d100      	bne.n	80023c0 <HAL_GPIO_Init+0x174>
 80023be:	e0a0      	b.n	8002502 <HAL_GPIO_Init+0x2b6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80023c0:	4b57      	ldr	r3, [pc, #348]	; (8002520 <HAL_GPIO_Init+0x2d4>)
 80023c2:	699a      	ldr	r2, [r3, #24]
 80023c4:	4b56      	ldr	r3, [pc, #344]	; (8002520 <HAL_GPIO_Init+0x2d4>)
 80023c6:	2101      	movs	r1, #1
 80023c8:	430a      	orrs	r2, r1
 80023ca:	619a      	str	r2, [r3, #24]
 80023cc:	4b54      	ldr	r3, [pc, #336]	; (8002520 <HAL_GPIO_Init+0x2d4>)
 80023ce:	699b      	ldr	r3, [r3, #24]
 80023d0:	2201      	movs	r2, #1
 80023d2:	4013      	ands	r3, r2
 80023d4:	60bb      	str	r3, [r7, #8]
 80023d6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80023d8:	4a52      	ldr	r2, [pc, #328]	; (8002524 <HAL_GPIO_Init+0x2d8>)
 80023da:	697b      	ldr	r3, [r7, #20]
 80023dc:	089b      	lsrs	r3, r3, #2
 80023de:	3302      	adds	r3, #2
 80023e0:	009b      	lsls	r3, r3, #2
 80023e2:	589b      	ldr	r3, [r3, r2]
 80023e4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80023e6:	697b      	ldr	r3, [r7, #20]
 80023e8:	2203      	movs	r2, #3
 80023ea:	4013      	ands	r3, r2
 80023ec:	009b      	lsls	r3, r3, #2
 80023ee:	220f      	movs	r2, #15
 80023f0:	409a      	lsls	r2, r3
 80023f2:	0013      	movs	r3, r2
 80023f4:	43da      	mvns	r2, r3
 80023f6:	693b      	ldr	r3, [r7, #16]
 80023f8:	4013      	ands	r3, r2
 80023fa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80023fc:	687a      	ldr	r2, [r7, #4]
 80023fe:	2390      	movs	r3, #144	; 0x90
 8002400:	05db      	lsls	r3, r3, #23
 8002402:	429a      	cmp	r2, r3
 8002404:	d019      	beq.n	800243a <HAL_GPIO_Init+0x1ee>
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	4a47      	ldr	r2, [pc, #284]	; (8002528 <HAL_GPIO_Init+0x2dc>)
 800240a:	4293      	cmp	r3, r2
 800240c:	d013      	beq.n	8002436 <HAL_GPIO_Init+0x1ea>
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	4a46      	ldr	r2, [pc, #280]	; (800252c <HAL_GPIO_Init+0x2e0>)
 8002412:	4293      	cmp	r3, r2
 8002414:	d00d      	beq.n	8002432 <HAL_GPIO_Init+0x1e6>
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	4a45      	ldr	r2, [pc, #276]	; (8002530 <HAL_GPIO_Init+0x2e4>)
 800241a:	4293      	cmp	r3, r2
 800241c:	d007      	beq.n	800242e <HAL_GPIO_Init+0x1e2>
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	4a44      	ldr	r2, [pc, #272]	; (8002534 <HAL_GPIO_Init+0x2e8>)
 8002422:	4293      	cmp	r3, r2
 8002424:	d101      	bne.n	800242a <HAL_GPIO_Init+0x1de>
 8002426:	2304      	movs	r3, #4
 8002428:	e008      	b.n	800243c <HAL_GPIO_Init+0x1f0>
 800242a:	2305      	movs	r3, #5
 800242c:	e006      	b.n	800243c <HAL_GPIO_Init+0x1f0>
 800242e:	2303      	movs	r3, #3
 8002430:	e004      	b.n	800243c <HAL_GPIO_Init+0x1f0>
 8002432:	2302      	movs	r3, #2
 8002434:	e002      	b.n	800243c <HAL_GPIO_Init+0x1f0>
 8002436:	2301      	movs	r3, #1
 8002438:	e000      	b.n	800243c <HAL_GPIO_Init+0x1f0>
 800243a:	2300      	movs	r3, #0
 800243c:	697a      	ldr	r2, [r7, #20]
 800243e:	2103      	movs	r1, #3
 8002440:	400a      	ands	r2, r1
 8002442:	0092      	lsls	r2, r2, #2
 8002444:	4093      	lsls	r3, r2
 8002446:	693a      	ldr	r2, [r7, #16]
 8002448:	4313      	orrs	r3, r2
 800244a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800244c:	4935      	ldr	r1, [pc, #212]	; (8002524 <HAL_GPIO_Init+0x2d8>)
 800244e:	697b      	ldr	r3, [r7, #20]
 8002450:	089b      	lsrs	r3, r3, #2
 8002452:	3302      	adds	r3, #2
 8002454:	009b      	lsls	r3, r3, #2
 8002456:	693a      	ldr	r2, [r7, #16]
 8002458:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800245a:	4b37      	ldr	r3, [pc, #220]	; (8002538 <HAL_GPIO_Init+0x2ec>)
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	43da      	mvns	r2, r3
 8002464:	693b      	ldr	r3, [r7, #16]
 8002466:	4013      	ands	r3, r2
 8002468:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800246a:	683b      	ldr	r3, [r7, #0]
 800246c:	685a      	ldr	r2, [r3, #4]
 800246e:	2380      	movs	r3, #128	; 0x80
 8002470:	025b      	lsls	r3, r3, #9
 8002472:	4013      	ands	r3, r2
 8002474:	d003      	beq.n	800247e <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 8002476:	693a      	ldr	r2, [r7, #16]
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	4313      	orrs	r3, r2
 800247c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800247e:	4b2e      	ldr	r3, [pc, #184]	; (8002538 <HAL_GPIO_Init+0x2ec>)
 8002480:	693a      	ldr	r2, [r7, #16]
 8002482:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8002484:	4b2c      	ldr	r3, [pc, #176]	; (8002538 <HAL_GPIO_Init+0x2ec>)
 8002486:	685b      	ldr	r3, [r3, #4]
 8002488:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	43da      	mvns	r2, r3
 800248e:	693b      	ldr	r3, [r7, #16]
 8002490:	4013      	ands	r3, r2
 8002492:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002494:	683b      	ldr	r3, [r7, #0]
 8002496:	685a      	ldr	r2, [r3, #4]
 8002498:	2380      	movs	r3, #128	; 0x80
 800249a:	029b      	lsls	r3, r3, #10
 800249c:	4013      	ands	r3, r2
 800249e:	d003      	beq.n	80024a8 <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 80024a0:	693a      	ldr	r2, [r7, #16]
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	4313      	orrs	r3, r2
 80024a6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80024a8:	4b23      	ldr	r3, [pc, #140]	; (8002538 <HAL_GPIO_Init+0x2ec>)
 80024aa:	693a      	ldr	r2, [r7, #16]
 80024ac:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80024ae:	4b22      	ldr	r3, [pc, #136]	; (8002538 <HAL_GPIO_Init+0x2ec>)
 80024b0:	689b      	ldr	r3, [r3, #8]
 80024b2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	43da      	mvns	r2, r3
 80024b8:	693b      	ldr	r3, [r7, #16]
 80024ba:	4013      	ands	r3, r2
 80024bc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80024be:	683b      	ldr	r3, [r7, #0]
 80024c0:	685a      	ldr	r2, [r3, #4]
 80024c2:	2380      	movs	r3, #128	; 0x80
 80024c4:	035b      	lsls	r3, r3, #13
 80024c6:	4013      	ands	r3, r2
 80024c8:	d003      	beq.n	80024d2 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80024ca:	693a      	ldr	r2, [r7, #16]
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	4313      	orrs	r3, r2
 80024d0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80024d2:	4b19      	ldr	r3, [pc, #100]	; (8002538 <HAL_GPIO_Init+0x2ec>)
 80024d4:	693a      	ldr	r2, [r7, #16]
 80024d6:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80024d8:	4b17      	ldr	r3, [pc, #92]	; (8002538 <HAL_GPIO_Init+0x2ec>)
 80024da:	68db      	ldr	r3, [r3, #12]
 80024dc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	43da      	mvns	r2, r3
 80024e2:	693b      	ldr	r3, [r7, #16]
 80024e4:	4013      	ands	r3, r2
 80024e6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80024e8:	683b      	ldr	r3, [r7, #0]
 80024ea:	685a      	ldr	r2, [r3, #4]
 80024ec:	2380      	movs	r3, #128	; 0x80
 80024ee:	039b      	lsls	r3, r3, #14
 80024f0:	4013      	ands	r3, r2
 80024f2:	d003      	beq.n	80024fc <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80024f4:	693a      	ldr	r2, [r7, #16]
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	4313      	orrs	r3, r2
 80024fa:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80024fc:	4b0e      	ldr	r3, [pc, #56]	; (8002538 <HAL_GPIO_Init+0x2ec>)
 80024fe:	693a      	ldr	r2, [r7, #16]
 8002500:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 8002502:	697b      	ldr	r3, [r7, #20]
 8002504:	3301      	adds	r3, #1
 8002506:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002508:	683b      	ldr	r3, [r7, #0]
 800250a:	681a      	ldr	r2, [r3, #0]
 800250c:	697b      	ldr	r3, [r7, #20]
 800250e:	40da      	lsrs	r2, r3
 8002510:	1e13      	subs	r3, r2, #0
 8002512:	d000      	beq.n	8002516 <HAL_GPIO_Init+0x2ca>
 8002514:	e6a2      	b.n	800225c <HAL_GPIO_Init+0x10>
  } 
}
 8002516:	46c0      	nop			; (mov r8, r8)
 8002518:	46c0      	nop			; (mov r8, r8)
 800251a:	46bd      	mov	sp, r7
 800251c:	b006      	add	sp, #24
 800251e:	bd80      	pop	{r7, pc}
 8002520:	40021000 	.word	0x40021000
 8002524:	40010000 	.word	0x40010000
 8002528:	48000400 	.word	0x48000400
 800252c:	48000800 	.word	0x48000800
 8002530:	48000c00 	.word	0x48000c00
 8002534:	48001000 	.word	0x48001000
 8002538:	40010400 	.word	0x40010400

0800253c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800253c:	b580      	push	{r7, lr}
 800253e:	b084      	sub	sp, #16
 8002540:	af00      	add	r7, sp, #0
 8002542:	6078      	str	r0, [r7, #4]
 8002544:	000a      	movs	r2, r1
 8002546:	1cbb      	adds	r3, r7, #2
 8002548:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	691b      	ldr	r3, [r3, #16]
 800254e:	1cba      	adds	r2, r7, #2
 8002550:	8812      	ldrh	r2, [r2, #0]
 8002552:	4013      	ands	r3, r2
 8002554:	d004      	beq.n	8002560 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8002556:	230f      	movs	r3, #15
 8002558:	18fb      	adds	r3, r7, r3
 800255a:	2201      	movs	r2, #1
 800255c:	701a      	strb	r2, [r3, #0]
 800255e:	e003      	b.n	8002568 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002560:	230f      	movs	r3, #15
 8002562:	18fb      	adds	r3, r7, r3
 8002564:	2200      	movs	r2, #0
 8002566:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8002568:	230f      	movs	r3, #15
 800256a:	18fb      	adds	r3, r7, r3
 800256c:	781b      	ldrb	r3, [r3, #0]
  }
 800256e:	0018      	movs	r0, r3
 8002570:	46bd      	mov	sp, r7
 8002572:	b004      	add	sp, #16
 8002574:	bd80      	pop	{r7, pc}

08002576 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002576:	b580      	push	{r7, lr}
 8002578:	b082      	sub	sp, #8
 800257a:	af00      	add	r7, sp, #0
 800257c:	6078      	str	r0, [r7, #4]
 800257e:	0008      	movs	r0, r1
 8002580:	0011      	movs	r1, r2
 8002582:	1cbb      	adds	r3, r7, #2
 8002584:	1c02      	adds	r2, r0, #0
 8002586:	801a      	strh	r2, [r3, #0]
 8002588:	1c7b      	adds	r3, r7, #1
 800258a:	1c0a      	adds	r2, r1, #0
 800258c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800258e:	1c7b      	adds	r3, r7, #1
 8002590:	781b      	ldrb	r3, [r3, #0]
 8002592:	2b00      	cmp	r3, #0
 8002594:	d004      	beq.n	80025a0 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002596:	1cbb      	adds	r3, r7, #2
 8002598:	881a      	ldrh	r2, [r3, #0]
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800259e:	e003      	b.n	80025a8 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80025a0:	1cbb      	adds	r3, r7, #2
 80025a2:	881a      	ldrh	r2, [r3, #0]
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80025a8:	46c0      	nop			; (mov r8, r8)
 80025aa:	46bd      	mov	sp, r7
 80025ac:	b002      	add	sp, #8
 80025ae:	bd80      	pop	{r7, pc}

080025b0 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F0 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80025b0:	b580      	push	{r7, lr}
 80025b2:	b084      	sub	sp, #16
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	6078      	str	r0, [r7, #4]
 80025b8:	000a      	movs	r2, r1
 80025ba:	1cbb      	adds	r3, r7, #2
 80025bc:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	695b      	ldr	r3, [r3, #20]
 80025c2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80025c4:	1cbb      	adds	r3, r7, #2
 80025c6:	881b      	ldrh	r3, [r3, #0]
 80025c8:	68fa      	ldr	r2, [r7, #12]
 80025ca:	4013      	ands	r3, r2
 80025cc:	041a      	lsls	r2, r3, #16
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	43db      	mvns	r3, r3
 80025d2:	1cb9      	adds	r1, r7, #2
 80025d4:	8809      	ldrh	r1, [r1, #0]
 80025d6:	400b      	ands	r3, r1
 80025d8:	431a      	orrs	r2, r3
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	619a      	str	r2, [r3, #24]
}
 80025de:	46c0      	nop			; (mov r8, r8)
 80025e0:	46bd      	mov	sp, r7
 80025e2:	b004      	add	sp, #16
 80025e4:	bd80      	pop	{r7, pc}
	...

080025e8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80025e8:	b580      	push	{r7, lr}
 80025ea:	b082      	sub	sp, #8
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	0002      	movs	r2, r0
 80025f0:	1dbb      	adds	r3, r7, #6
 80025f2:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80025f4:	4b09      	ldr	r3, [pc, #36]	; (800261c <HAL_GPIO_EXTI_IRQHandler+0x34>)
 80025f6:	695b      	ldr	r3, [r3, #20]
 80025f8:	1dba      	adds	r2, r7, #6
 80025fa:	8812      	ldrh	r2, [r2, #0]
 80025fc:	4013      	ands	r3, r2
 80025fe:	d008      	beq.n	8002612 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002600:	4b06      	ldr	r3, [pc, #24]	; (800261c <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8002602:	1dba      	adds	r2, r7, #6
 8002604:	8812      	ldrh	r2, [r2, #0]
 8002606:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002608:	1dbb      	adds	r3, r7, #6
 800260a:	881b      	ldrh	r3, [r3, #0]
 800260c:	0018      	movs	r0, r3
 800260e:	f7fe f913 	bl	8000838 <HAL_GPIO_EXTI_Callback>
  }
}
 8002612:	46c0      	nop			; (mov r8, r8)
 8002614:	46bd      	mov	sp, r7
 8002616:	b002      	add	sp, #8
 8002618:	bd80      	pop	{r7, pc}
 800261a:	46c0      	nop			; (mov r8, r8)
 800261c:	40010400 	.word	0x40010400

08002620 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002620:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002622:	b08b      	sub	sp, #44	; 0x2c
 8002624:	af06      	add	r7, sp, #24
 8002626:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	2b00      	cmp	r3, #0
 800262c:	d101      	bne.n	8002632 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800262e:	2301      	movs	r3, #1
 8002630:	e0ff      	b.n	8002832 <HAL_PCD_Init+0x212>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	4a81      	ldr	r2, [pc, #516]	; (800283c <HAL_PCD_Init+0x21c>)
 8002636:	5c9b      	ldrb	r3, [r3, r2]
 8002638:	b2db      	uxtb	r3, r3
 800263a:	2b00      	cmp	r3, #0
 800263c:	d108      	bne.n	8002650 <HAL_PCD_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800263e:	687a      	ldr	r2, [r7, #4]
 8002640:	23aa      	movs	r3, #170	; 0xaa
 8002642:	009b      	lsls	r3, r3, #2
 8002644:	2100      	movs	r1, #0
 8002646:	54d1      	strb	r1, [r2, r3]

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	0018      	movs	r0, r3
 800264c:	f008 ff1c 	bl	800b488 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	4a7a      	ldr	r2, [pc, #488]	; (800283c <HAL_PCD_Init+0x21c>)
 8002654:	2103      	movs	r1, #3
 8002656:	5499      	strb	r1, [r3, r2]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	0018      	movs	r0, r3
 800265e:	f004 ffb9 	bl	80075d4 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002662:	230f      	movs	r3, #15
 8002664:	18fb      	adds	r3, r7, r3
 8002666:	2200      	movs	r2, #0
 8002668:	701a      	strb	r2, [r3, #0]
 800266a:	e058      	b.n	800271e <HAL_PCD_Init+0xfe>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800266c:	200f      	movs	r0, #15
 800266e:	183b      	adds	r3, r7, r0
 8002670:	781b      	ldrb	r3, [r3, #0]
 8002672:	6879      	ldr	r1, [r7, #4]
 8002674:	1c5a      	adds	r2, r3, #1
 8002676:	0013      	movs	r3, r2
 8002678:	009b      	lsls	r3, r3, #2
 800267a:	189b      	adds	r3, r3, r2
 800267c:	00db      	lsls	r3, r3, #3
 800267e:	18cb      	adds	r3, r1, r3
 8002680:	3301      	adds	r3, #1
 8002682:	2201      	movs	r2, #1
 8002684:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002686:	183b      	adds	r3, r7, r0
 8002688:	781b      	ldrb	r3, [r3, #0]
 800268a:	6879      	ldr	r1, [r7, #4]
 800268c:	1c5a      	adds	r2, r3, #1
 800268e:	0013      	movs	r3, r2
 8002690:	009b      	lsls	r3, r3, #2
 8002692:	189b      	adds	r3, r3, r2
 8002694:	00db      	lsls	r3, r3, #3
 8002696:	183a      	adds	r2, r7, r0
 8002698:	7812      	ldrb	r2, [r2, #0]
 800269a:	545a      	strb	r2, [r3, r1]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800269c:	0004      	movs	r4, r0
 800269e:	183b      	adds	r3, r7, r0
 80026a0:	781a      	ldrb	r2, [r3, #0]
 80026a2:	193b      	adds	r3, r7, r4
 80026a4:	781b      	ldrb	r3, [r3, #0]
 80026a6:	b298      	uxth	r0, r3
 80026a8:	6879      	ldr	r1, [r7, #4]
 80026aa:	0013      	movs	r3, r2
 80026ac:	009b      	lsls	r3, r3, #2
 80026ae:	189b      	adds	r3, r3, r2
 80026b0:	00db      	lsls	r3, r3, #3
 80026b2:	18cb      	adds	r3, r1, r3
 80026b4:	3336      	adds	r3, #54	; 0x36
 80026b6:	1c02      	adds	r2, r0, #0
 80026b8:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80026ba:	193b      	adds	r3, r7, r4
 80026bc:	781b      	ldrb	r3, [r3, #0]
 80026be:	6879      	ldr	r1, [r7, #4]
 80026c0:	1c5a      	adds	r2, r3, #1
 80026c2:	0013      	movs	r3, r2
 80026c4:	009b      	lsls	r3, r3, #2
 80026c6:	189b      	adds	r3, r3, r2
 80026c8:	00db      	lsls	r3, r3, #3
 80026ca:	18cb      	adds	r3, r1, r3
 80026cc:	3303      	adds	r3, #3
 80026ce:	2200      	movs	r2, #0
 80026d0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80026d2:	193b      	adds	r3, r7, r4
 80026d4:	781a      	ldrb	r2, [r3, #0]
 80026d6:	6879      	ldr	r1, [r7, #4]
 80026d8:	0013      	movs	r3, r2
 80026da:	009b      	lsls	r3, r3, #2
 80026dc:	189b      	adds	r3, r3, r2
 80026de:	00db      	lsls	r3, r3, #3
 80026e0:	18cb      	adds	r3, r1, r3
 80026e2:	3338      	adds	r3, #56	; 0x38
 80026e4:	2200      	movs	r2, #0
 80026e6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80026e8:	193b      	adds	r3, r7, r4
 80026ea:	781a      	ldrb	r2, [r3, #0]
 80026ec:	6879      	ldr	r1, [r7, #4]
 80026ee:	0013      	movs	r3, r2
 80026f0:	009b      	lsls	r3, r3, #2
 80026f2:	189b      	adds	r3, r3, r2
 80026f4:	00db      	lsls	r3, r3, #3
 80026f6:	18cb      	adds	r3, r1, r3
 80026f8:	333c      	adds	r3, #60	; 0x3c
 80026fa:	2200      	movs	r2, #0
 80026fc:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80026fe:	193b      	adds	r3, r7, r4
 8002700:	781a      	ldrb	r2, [r3, #0]
 8002702:	6879      	ldr	r1, [r7, #4]
 8002704:	0013      	movs	r3, r2
 8002706:	009b      	lsls	r3, r3, #2
 8002708:	189b      	adds	r3, r3, r2
 800270a:	00db      	lsls	r3, r3, #3
 800270c:	18cb      	adds	r3, r1, r3
 800270e:	3340      	adds	r3, #64	; 0x40
 8002710:	2200      	movs	r2, #0
 8002712:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002714:	193b      	adds	r3, r7, r4
 8002716:	781a      	ldrb	r2, [r3, #0]
 8002718:	193b      	adds	r3, r7, r4
 800271a:	3201      	adds	r2, #1
 800271c:	701a      	strb	r2, [r3, #0]
 800271e:	210f      	movs	r1, #15
 8002720:	187b      	adds	r3, r7, r1
 8002722:	781a      	ldrb	r2, [r3, #0]
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	685b      	ldr	r3, [r3, #4]
 8002728:	429a      	cmp	r2, r3
 800272a:	d39f      	bcc.n	800266c <HAL_PCD_Init+0x4c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800272c:	187b      	adds	r3, r7, r1
 800272e:	2200      	movs	r2, #0
 8002730:	701a      	strb	r2, [r3, #0]
 8002732:	e056      	b.n	80027e2 <HAL_PCD_Init+0x1c2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002734:	240f      	movs	r4, #15
 8002736:	193b      	adds	r3, r7, r4
 8002738:	781a      	ldrb	r2, [r3, #0]
 800273a:	6878      	ldr	r0, [r7, #4]
 800273c:	236a      	movs	r3, #106	; 0x6a
 800273e:	33ff      	adds	r3, #255	; 0xff
 8002740:	0019      	movs	r1, r3
 8002742:	0013      	movs	r3, r2
 8002744:	009b      	lsls	r3, r3, #2
 8002746:	189b      	adds	r3, r3, r2
 8002748:	00db      	lsls	r3, r3, #3
 800274a:	18c3      	adds	r3, r0, r3
 800274c:	185b      	adds	r3, r3, r1
 800274e:	2200      	movs	r2, #0
 8002750:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002752:	193b      	adds	r3, r7, r4
 8002754:	781a      	ldrb	r2, [r3, #0]
 8002756:	6878      	ldr	r0, [r7, #4]
 8002758:	23b4      	movs	r3, #180	; 0xb4
 800275a:	0059      	lsls	r1, r3, #1
 800275c:	0013      	movs	r3, r2
 800275e:	009b      	lsls	r3, r3, #2
 8002760:	189b      	adds	r3, r3, r2
 8002762:	00db      	lsls	r3, r3, #3
 8002764:	18c3      	adds	r3, r0, r3
 8002766:	185b      	adds	r3, r3, r1
 8002768:	193a      	adds	r2, r7, r4
 800276a:	7812      	ldrb	r2, [r2, #0]
 800276c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800276e:	193b      	adds	r3, r7, r4
 8002770:	781a      	ldrb	r2, [r3, #0]
 8002772:	6878      	ldr	r0, [r7, #4]
 8002774:	236c      	movs	r3, #108	; 0x6c
 8002776:	33ff      	adds	r3, #255	; 0xff
 8002778:	0019      	movs	r1, r3
 800277a:	0013      	movs	r3, r2
 800277c:	009b      	lsls	r3, r3, #2
 800277e:	189b      	adds	r3, r3, r2
 8002780:	00db      	lsls	r3, r3, #3
 8002782:	18c3      	adds	r3, r0, r3
 8002784:	185b      	adds	r3, r3, r1
 8002786:	2200      	movs	r2, #0
 8002788:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800278a:	193b      	adds	r3, r7, r4
 800278c:	781a      	ldrb	r2, [r3, #0]
 800278e:	6878      	ldr	r0, [r7, #4]
 8002790:	23bc      	movs	r3, #188	; 0xbc
 8002792:	0059      	lsls	r1, r3, #1
 8002794:	0013      	movs	r3, r2
 8002796:	009b      	lsls	r3, r3, #2
 8002798:	189b      	adds	r3, r3, r2
 800279a:	00db      	lsls	r3, r3, #3
 800279c:	18c3      	adds	r3, r0, r3
 800279e:	185b      	adds	r3, r3, r1
 80027a0:	2200      	movs	r2, #0
 80027a2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80027a4:	193b      	adds	r3, r7, r4
 80027a6:	781a      	ldrb	r2, [r3, #0]
 80027a8:	6878      	ldr	r0, [r7, #4]
 80027aa:	23be      	movs	r3, #190	; 0xbe
 80027ac:	0059      	lsls	r1, r3, #1
 80027ae:	0013      	movs	r3, r2
 80027b0:	009b      	lsls	r3, r3, #2
 80027b2:	189b      	adds	r3, r3, r2
 80027b4:	00db      	lsls	r3, r3, #3
 80027b6:	18c3      	adds	r3, r0, r3
 80027b8:	185b      	adds	r3, r3, r1
 80027ba:	2200      	movs	r2, #0
 80027bc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80027be:	193b      	adds	r3, r7, r4
 80027c0:	781a      	ldrb	r2, [r3, #0]
 80027c2:	6878      	ldr	r0, [r7, #4]
 80027c4:	23c0      	movs	r3, #192	; 0xc0
 80027c6:	0059      	lsls	r1, r3, #1
 80027c8:	0013      	movs	r3, r2
 80027ca:	009b      	lsls	r3, r3, #2
 80027cc:	189b      	adds	r3, r3, r2
 80027ce:	00db      	lsls	r3, r3, #3
 80027d0:	18c3      	adds	r3, r0, r3
 80027d2:	185b      	adds	r3, r3, r1
 80027d4:	2200      	movs	r2, #0
 80027d6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80027d8:	193b      	adds	r3, r7, r4
 80027da:	781a      	ldrb	r2, [r3, #0]
 80027dc:	193b      	adds	r3, r7, r4
 80027de:	3201      	adds	r2, #1
 80027e0:	701a      	strb	r2, [r3, #0]
 80027e2:	230f      	movs	r3, #15
 80027e4:	18fb      	adds	r3, r7, r3
 80027e6:	781a      	ldrb	r2, [r3, #0]
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	685b      	ldr	r3, [r3, #4]
 80027ec:	429a      	cmp	r2, r3
 80027ee:	d3a1      	bcc.n	8002734 <HAL_PCD_Init+0x114>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	6818      	ldr	r0, [r3, #0]
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	466a      	mov	r2, sp
 80027f8:	0011      	movs	r1, r2
 80027fa:	001a      	movs	r2, r3
 80027fc:	3210      	adds	r2, #16
 80027fe:	ca70      	ldmia	r2!, {r4, r5, r6}
 8002800:	c170      	stmia	r1!, {r4, r5, r6}
 8002802:	ca30      	ldmia	r2!, {r4, r5}
 8002804:	c130      	stmia	r1!, {r4, r5}
 8002806:	6859      	ldr	r1, [r3, #4]
 8002808:	689a      	ldr	r2, [r3, #8]
 800280a:	68db      	ldr	r3, [r3, #12]
 800280c:	f004 fefc 	bl	8007608 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	2224      	movs	r2, #36	; 0x24
 8002814:	2100      	movs	r1, #0
 8002816:	5499      	strb	r1, [r3, r2]
  hpcd->State = HAL_PCD_STATE_READY;
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	4a08      	ldr	r2, [pc, #32]	; (800283c <HAL_PCD_Init+0x21c>)
 800281c:	2101      	movs	r1, #1
 800281e:	5499      	strb	r1, [r3, r2]

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	69db      	ldr	r3, [r3, #28]
 8002824:	2b01      	cmp	r3, #1
 8002826:	d103      	bne.n	8002830 <HAL_PCD_Init+0x210>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	0018      	movs	r0, r3
 800282c:	f001 fd34 	bl	8004298 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8002830:	2300      	movs	r3, #0
}
 8002832:	0018      	movs	r0, r3
 8002834:	46bd      	mov	sp, r7
 8002836:	b005      	add	sp, #20
 8002838:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800283a:	46c0      	nop			; (mov r8, r8)
 800283c:	000002a9 	.word	0x000002a9

08002840 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002840:	b580      	push	{r7, lr}
 8002842:	b082      	sub	sp, #8
 8002844:	af00      	add	r7, sp, #0
 8002846:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8002848:	687a      	ldr	r2, [r7, #4]
 800284a:	23aa      	movs	r3, #170	; 0xaa
 800284c:	009b      	lsls	r3, r3, #2
 800284e:	5cd3      	ldrb	r3, [r2, r3]
 8002850:	2b01      	cmp	r3, #1
 8002852:	d101      	bne.n	8002858 <HAL_PCD_Start+0x18>
 8002854:	2302      	movs	r3, #2
 8002856:	e014      	b.n	8002882 <HAL_PCD_Start+0x42>
 8002858:	687a      	ldr	r2, [r7, #4]
 800285a:	23aa      	movs	r3, #170	; 0xaa
 800285c:	009b      	lsls	r3, r3, #2
 800285e:	2101      	movs	r1, #1
 8002860:	54d1      	strb	r1, [r2, r3]
  __HAL_PCD_ENABLE(hpcd);
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	0018      	movs	r0, r3
 8002868:	f004 fe9e 	bl	80075a8 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	0018      	movs	r0, r3
 8002872:	f006 fdf9 	bl	8009468 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002876:	687a      	ldr	r2, [r7, #4]
 8002878:	23aa      	movs	r3, #170	; 0xaa
 800287a:	009b      	lsls	r3, r3, #2
 800287c:	2100      	movs	r1, #0
 800287e:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8002880:	2300      	movs	r3, #0
}
 8002882:	0018      	movs	r0, r3
 8002884:	46bd      	mov	sp, r7
 8002886:	b002      	add	sp, #8
 8002888:	bd80      	pop	{r7, pc}
	...

0800288c <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800288c:	b580      	push	{r7, lr}
 800288e:	b082      	sub	sp, #8
 8002890:	af00      	add	r7, sp, #0
 8002892:	6078      	str	r0, [r7, #4]
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	0018      	movs	r0, r3
 800289a:	f006 fdfb 	bl	8009494 <USB_ReadInterrupts>
 800289e:	0002      	movs	r2, r0
 80028a0:	2380      	movs	r3, #128	; 0x80
 80028a2:	021b      	lsls	r3, r3, #8
 80028a4:	401a      	ands	r2, r3
 80028a6:	2380      	movs	r3, #128	; 0x80
 80028a8:	021b      	lsls	r3, r3, #8
 80028aa:	429a      	cmp	r2, r3
 80028ac:	d103      	bne.n	80028b6 <HAL_PCD_IRQHandler+0x2a>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	0018      	movs	r0, r3
 80028b2:	f000 fbbb 	bl	800302c <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	0018      	movs	r0, r3
 80028bc:	f006 fdea 	bl	8009494 <USB_ReadInterrupts>
 80028c0:	0002      	movs	r2, r0
 80028c2:	2380      	movs	r3, #128	; 0x80
 80028c4:	00db      	lsls	r3, r3, #3
 80028c6:	401a      	ands	r2, r3
 80028c8:	2380      	movs	r3, #128	; 0x80
 80028ca:	00db      	lsls	r3, r3, #3
 80028cc:	429a      	cmp	r2, r3
 80028ce:	d114      	bne.n	80028fa <HAL_PCD_IRQHandler+0x6e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	2244      	movs	r2, #68	; 0x44
 80028d6:	5a9b      	ldrh	r3, [r3, r2]
 80028d8:	b29a      	uxth	r2, r3
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	49a2      	ldr	r1, [pc, #648]	; (8002b68 <HAL_PCD_IRQHandler+0x2dc>)
 80028e0:	400a      	ands	r2, r1
 80028e2:	b291      	uxth	r1, r2
 80028e4:	2244      	movs	r2, #68	; 0x44
 80028e6:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	0018      	movs	r0, r3
 80028ec:	f008 fe57 	bl	800b59e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	2100      	movs	r1, #0
 80028f4:	0018      	movs	r0, r3
 80028f6:	f000 f945 	bl	8002b84 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	0018      	movs	r0, r3
 8002900:	f006 fdc8 	bl	8009494 <USB_ReadInterrupts>
 8002904:	0002      	movs	r2, r0
 8002906:	2380      	movs	r3, #128	; 0x80
 8002908:	01db      	lsls	r3, r3, #7
 800290a:	401a      	ands	r2, r3
 800290c:	2380      	movs	r3, #128	; 0x80
 800290e:	01db      	lsls	r3, r3, #7
 8002910:	429a      	cmp	r2, r3
 8002912:	d10b      	bne.n	800292c <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	2244      	movs	r2, #68	; 0x44
 800291a:	5a9b      	ldrh	r3, [r3, r2]
 800291c:	b29a      	uxth	r2, r3
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	4992      	ldr	r1, [pc, #584]	; (8002b6c <HAL_PCD_IRQHandler+0x2e0>)
 8002924:	400a      	ands	r2, r1
 8002926:	b291      	uxth	r1, r2
 8002928:	2244      	movs	r2, #68	; 0x44
 800292a:	5299      	strh	r1, [r3, r2]
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	0018      	movs	r0, r3
 8002932:	f006 fdaf 	bl	8009494 <USB_ReadInterrupts>
 8002936:	0002      	movs	r2, r0
 8002938:	2380      	movs	r3, #128	; 0x80
 800293a:	019b      	lsls	r3, r3, #6
 800293c:	401a      	ands	r2, r3
 800293e:	2380      	movs	r3, #128	; 0x80
 8002940:	019b      	lsls	r3, r3, #6
 8002942:	429a      	cmp	r2, r3
 8002944:	d10b      	bne.n	800295e <HAL_PCD_IRQHandler+0xd2>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	2244      	movs	r2, #68	; 0x44
 800294c:	5a9b      	ldrh	r3, [r3, r2]
 800294e:	b29a      	uxth	r2, r3
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	4986      	ldr	r1, [pc, #536]	; (8002b70 <HAL_PCD_IRQHandler+0x2e4>)
 8002956:	400a      	ands	r2, r1
 8002958:	b291      	uxth	r1, r2
 800295a:	2244      	movs	r2, #68	; 0x44
 800295c:	5299      	strh	r1, [r3, r2]
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	0018      	movs	r0, r3
 8002964:	f006 fd96 	bl	8009494 <USB_ReadInterrupts>
 8002968:	0002      	movs	r2, r0
 800296a:	2380      	movs	r3, #128	; 0x80
 800296c:	015b      	lsls	r3, r3, #5
 800296e:	401a      	ands	r2, r3
 8002970:	2380      	movs	r3, #128	; 0x80
 8002972:	015b      	lsls	r3, r3, #5
 8002974:	429a      	cmp	r2, r3
 8002976:	d137      	bne.n	80029e8 <HAL_PCD_IRQHandler+0x15c>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	2240      	movs	r2, #64	; 0x40
 800297e:	5a9b      	ldrh	r3, [r3, r2]
 8002980:	b29a      	uxth	r2, r3
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	2104      	movs	r1, #4
 8002988:	438a      	bics	r2, r1
 800298a:	b291      	uxth	r1, r2
 800298c:	2240      	movs	r2, #64	; 0x40
 800298e:	5299      	strh	r1, [r3, r2]
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	2240      	movs	r2, #64	; 0x40
 8002996:	5a9b      	ldrh	r3, [r3, r2]
 8002998:	b29a      	uxth	r2, r3
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	2108      	movs	r1, #8
 80029a0:	438a      	bics	r2, r1
 80029a2:	b291      	uxth	r1, r2
 80029a4:	2240      	movs	r2, #64	; 0x40
 80029a6:	5299      	strh	r1, [r3, r2]

    if (hpcd->LPM_State == LPM_L1)
 80029a8:	687a      	ldr	r2, [r7, #4]
 80029aa:	23b8      	movs	r3, #184	; 0xb8
 80029ac:	009b      	lsls	r3, r3, #2
 80029ae:	5cd3      	ldrb	r3, [r2, r3]
 80029b0:	2b01      	cmp	r3, #1
 80029b2:	d109      	bne.n	80029c8 <HAL_PCD_IRQHandler+0x13c>
    {
      hpcd->LPM_State = LPM_L0;
 80029b4:	687a      	ldr	r2, [r7, #4]
 80029b6:	23b8      	movs	r3, #184	; 0xb8
 80029b8:	009b      	lsls	r3, r3, #2
 80029ba:	2100      	movs	r1, #0
 80029bc:	54d1      	strb	r1, [r2, r3]
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	2100      	movs	r1, #0
 80029c2:	0018      	movs	r0, r3
 80029c4:	f001 fc92 	bl	80042ec <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	0018      	movs	r0, r3
 80029cc:	f008 fe28 	bl	800b620 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	2244      	movs	r2, #68	; 0x44
 80029d6:	5a9b      	ldrh	r3, [r3, r2]
 80029d8:	b29a      	uxth	r2, r3
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	4965      	ldr	r1, [pc, #404]	; (8002b74 <HAL_PCD_IRQHandler+0x2e8>)
 80029e0:	400a      	ands	r2, r1
 80029e2:	b291      	uxth	r1, r2
 80029e4:	2244      	movs	r2, #68	; 0x44
 80029e6:	5299      	strh	r1, [r3, r2]
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	0018      	movs	r0, r3
 80029ee:	f006 fd51 	bl	8009494 <USB_ReadInterrupts>
 80029f2:	0002      	movs	r2, r0
 80029f4:	2380      	movs	r3, #128	; 0x80
 80029f6:	011b      	lsls	r3, r3, #4
 80029f8:	401a      	ands	r2, r3
 80029fa:	2380      	movs	r3, #128	; 0x80
 80029fc:	011b      	lsls	r3, r3, #4
 80029fe:	429a      	cmp	r2, r3
 8002a00:	d127      	bne.n	8002a52 <HAL_PCD_IRQHandler+0x1c6>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	2240      	movs	r2, #64	; 0x40
 8002a08:	5a9b      	ldrh	r3, [r3, r2]
 8002a0a:	b29a      	uxth	r2, r3
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	2108      	movs	r1, #8
 8002a12:	430a      	orrs	r2, r1
 8002a14:	b291      	uxth	r1, r2
 8002a16:	2240      	movs	r2, #64	; 0x40
 8002a18:	5299      	strh	r1, [r3, r2]

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	2244      	movs	r2, #68	; 0x44
 8002a20:	5a9b      	ldrh	r3, [r3, r2]
 8002a22:	b29a      	uxth	r2, r3
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	4953      	ldr	r1, [pc, #332]	; (8002b78 <HAL_PCD_IRQHandler+0x2ec>)
 8002a2a:	400a      	ands	r2, r1
 8002a2c:	b291      	uxth	r1, r2
 8002a2e:	2244      	movs	r2, #68	; 0x44
 8002a30:	5299      	strh	r1, [r3, r2]

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	2240      	movs	r2, #64	; 0x40
 8002a38:	5a9b      	ldrh	r3, [r3, r2]
 8002a3a:	b29a      	uxth	r2, r3
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	2104      	movs	r1, #4
 8002a42:	430a      	orrs	r2, r1
 8002a44:	b291      	uxth	r1, r2
 8002a46:	2240      	movs	r2, #64	; 0x40
 8002a48:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	0018      	movs	r0, r3
 8002a4e:	f008 fdcb 	bl	800b5e8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  /* Handle LPM Interrupt */
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_L1REQ))
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	0018      	movs	r0, r3
 8002a58:	f006 fd1c 	bl	8009494 <USB_ReadInterrupts>
 8002a5c:	0003      	movs	r3, r0
 8002a5e:	2280      	movs	r2, #128	; 0x80
 8002a60:	4013      	ands	r3, r2
 8002a62:	2b80      	cmp	r3, #128	; 0x80
 8002a64:	d145      	bne.n	8002af2 <HAL_PCD_IRQHandler+0x266>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	2244      	movs	r2, #68	; 0x44
 8002a6c:	5a9b      	ldrh	r3, [r3, r2]
 8002a6e:	b29a      	uxth	r2, r3
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	2180      	movs	r1, #128	; 0x80
 8002a76:	438a      	bics	r2, r1
 8002a78:	b291      	uxth	r1, r2
 8002a7a:	2244      	movs	r2, #68	; 0x44
 8002a7c:	5299      	strh	r1, [r3, r2]
    if (hpcd->LPM_State == LPM_L0)
 8002a7e:	687a      	ldr	r2, [r7, #4]
 8002a80:	23b8      	movs	r3, #184	; 0xb8
 8002a82:	009b      	lsls	r3, r3, #2
 8002a84:	5cd3      	ldrb	r3, [r2, r3]
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d12f      	bne.n	8002aea <HAL_PCD_IRQHandler+0x25e>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	2240      	movs	r2, #64	; 0x40
 8002a90:	5a9b      	ldrh	r3, [r3, r2]
 8002a92:	b29a      	uxth	r2, r3
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	2104      	movs	r1, #4
 8002a9a:	430a      	orrs	r2, r1
 8002a9c:	b291      	uxth	r1, r2
 8002a9e:	2240      	movs	r2, #64	; 0x40
 8002aa0:	5299      	strh	r1, [r3, r2]
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	2240      	movs	r2, #64	; 0x40
 8002aa8:	5a9b      	ldrh	r3, [r3, r2]
 8002aaa:	b29a      	uxth	r2, r3
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	2108      	movs	r1, #8
 8002ab2:	430a      	orrs	r2, r1
 8002ab4:	b291      	uxth	r1, r2
 8002ab6:	2240      	movs	r2, #64	; 0x40
 8002ab8:	5299      	strh	r1, [r3, r2]

      hpcd->LPM_State = LPM_L1;
 8002aba:	687a      	ldr	r2, [r7, #4]
 8002abc:	23b8      	movs	r3, #184	; 0xb8
 8002abe:	009b      	lsls	r3, r3, #2
 8002ac0:	2101      	movs	r1, #1
 8002ac2:	54d1      	strb	r1, [r2, r3]
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	2254      	movs	r2, #84	; 0x54
 8002aca:	5a9b      	ldrh	r3, [r3, r2]
 8002acc:	b29b      	uxth	r3, r3
 8002ace:	089b      	lsrs	r3, r3, #2
 8002ad0:	223c      	movs	r2, #60	; 0x3c
 8002ad2:	4013      	ands	r3, r2
 8002ad4:	0019      	movs	r1, r3
 8002ad6:	687a      	ldr	r2, [r7, #4]
 8002ad8:	23b9      	movs	r3, #185	; 0xb9
 8002ada:	009b      	lsls	r3, r3, #2
 8002adc:	50d1      	str	r1, [r2, r3]
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	2101      	movs	r1, #1
 8002ae2:	0018      	movs	r0, r3
 8002ae4:	f001 fc02 	bl	80042ec <HAL_PCDEx_LPM_Callback>
 8002ae8:	e003      	b.n	8002af2 <HAL_PCD_IRQHandler+0x266>
    else
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SuspendCallback(hpcd);
#else
      HAL_PCD_SuspendCallback(hpcd);
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	0018      	movs	r0, r3
 8002aee:	f008 fd7b 	bl	800b5e8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	0018      	movs	r0, r3
 8002af8:	f006 fccc 	bl	8009494 <USB_ReadInterrupts>
 8002afc:	0002      	movs	r2, r0
 8002afe:	2380      	movs	r3, #128	; 0x80
 8002b00:	009b      	lsls	r3, r3, #2
 8002b02:	401a      	ands	r2, r3
 8002b04:	2380      	movs	r3, #128	; 0x80
 8002b06:	009b      	lsls	r3, r3, #2
 8002b08:	429a      	cmp	r2, r3
 8002b0a:	d10f      	bne.n	8002b2c <HAL_PCD_IRQHandler+0x2a0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	2244      	movs	r2, #68	; 0x44
 8002b12:	5a9b      	ldrh	r3, [r3, r2]
 8002b14:	b29a      	uxth	r2, r3
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	4918      	ldr	r1, [pc, #96]	; (8002b7c <HAL_PCD_IRQHandler+0x2f0>)
 8002b1c:	400a      	ands	r2, r1
 8002b1e:	b291      	uxth	r1, r2
 8002b20:	2244      	movs	r2, #68	; 0x44
 8002b22:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	0018      	movs	r0, r3
 8002b28:	f008 fd2a 	bl	800b580 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	0018      	movs	r0, r3
 8002b32:	f006 fcaf 	bl	8009494 <USB_ReadInterrupts>
 8002b36:	0002      	movs	r2, r0
 8002b38:	2380      	movs	r3, #128	; 0x80
 8002b3a:	005b      	lsls	r3, r3, #1
 8002b3c:	401a      	ands	r2, r3
 8002b3e:	2380      	movs	r3, #128	; 0x80
 8002b40:	005b      	lsls	r3, r3, #1
 8002b42:	429a      	cmp	r2, r3
 8002b44:	d10b      	bne.n	8002b5e <HAL_PCD_IRQHandler+0x2d2>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	2244      	movs	r2, #68	; 0x44
 8002b4c:	5a9b      	ldrh	r3, [r3, r2]
 8002b4e:	b29a      	uxth	r2, r3
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	490a      	ldr	r1, [pc, #40]	; (8002b80 <HAL_PCD_IRQHandler+0x2f4>)
 8002b56:	400a      	ands	r2, r1
 8002b58:	b291      	uxth	r1, r2
 8002b5a:	2244      	movs	r2, #68	; 0x44
 8002b5c:	5299      	strh	r1, [r3, r2]
  }
}
 8002b5e:	46c0      	nop			; (mov r8, r8)
 8002b60:	46bd      	mov	sp, r7
 8002b62:	b002      	add	sp, #8
 8002b64:	bd80      	pop	{r7, pc}
 8002b66:	46c0      	nop			; (mov r8, r8)
 8002b68:	fffffbff 	.word	0xfffffbff
 8002b6c:	ffffbfff 	.word	0xffffbfff
 8002b70:	ffffdfff 	.word	0xffffdfff
 8002b74:	ffffefff 	.word	0xffffefff
 8002b78:	fffff7ff 	.word	0xfffff7ff
 8002b7c:	fffffdff 	.word	0xfffffdff
 8002b80:	fffffeff 	.word	0xfffffeff

08002b84 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002b84:	b580      	push	{r7, lr}
 8002b86:	b082      	sub	sp, #8
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	6078      	str	r0, [r7, #4]
 8002b8c:	000a      	movs	r2, r1
 8002b8e:	1cfb      	adds	r3, r7, #3
 8002b90:	701a      	strb	r2, [r3, #0]
  __HAL_LOCK(hpcd);
 8002b92:	687a      	ldr	r2, [r7, #4]
 8002b94:	23aa      	movs	r3, #170	; 0xaa
 8002b96:	009b      	lsls	r3, r3, #2
 8002b98:	5cd3      	ldrb	r3, [r2, r3]
 8002b9a:	2b01      	cmp	r3, #1
 8002b9c:	d101      	bne.n	8002ba2 <HAL_PCD_SetAddress+0x1e>
 8002b9e:	2302      	movs	r3, #2
 8002ba0:	e017      	b.n	8002bd2 <HAL_PCD_SetAddress+0x4e>
 8002ba2:	687a      	ldr	r2, [r7, #4]
 8002ba4:	23aa      	movs	r3, #170	; 0xaa
 8002ba6:	009b      	lsls	r3, r3, #2
 8002ba8:	2101      	movs	r1, #1
 8002baa:	54d1      	strb	r1, [r2, r3]
  hpcd->USB_Address = address;
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	1cfa      	adds	r2, r7, #3
 8002bb0:	2124      	movs	r1, #36	; 0x24
 8002bb2:	7812      	ldrb	r2, [r2, #0]
 8002bb4:	545a      	strb	r2, [r3, r1]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681a      	ldr	r2, [r3, #0]
 8002bba:	1cfb      	adds	r3, r7, #3
 8002bbc:	781b      	ldrb	r3, [r3, #0]
 8002bbe:	0019      	movs	r1, r3
 8002bc0:	0010      	movs	r0, r2
 8002bc2:	f006 fc3d 	bl	8009440 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002bc6:	687a      	ldr	r2, [r7, #4]
 8002bc8:	23aa      	movs	r3, #170	; 0xaa
 8002bca:	009b      	lsls	r3, r3, #2
 8002bcc:	2100      	movs	r1, #0
 8002bce:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8002bd0:	2300      	movs	r3, #0
}
 8002bd2:	0018      	movs	r0, r3
 8002bd4:	46bd      	mov	sp, r7
 8002bd6:	b002      	add	sp, #8
 8002bd8:	bd80      	pop	{r7, pc}

08002bda <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002bda:	b590      	push	{r4, r7, lr}
 8002bdc:	b085      	sub	sp, #20
 8002bde:	af00      	add	r7, sp, #0
 8002be0:	6078      	str	r0, [r7, #4]
 8002be2:	000c      	movs	r4, r1
 8002be4:	0010      	movs	r0, r2
 8002be6:	0019      	movs	r1, r3
 8002be8:	1cfb      	adds	r3, r7, #3
 8002bea:	1c22      	adds	r2, r4, #0
 8002bec:	701a      	strb	r2, [r3, #0]
 8002bee:	003b      	movs	r3, r7
 8002bf0:	1c02      	adds	r2, r0, #0
 8002bf2:	801a      	strh	r2, [r3, #0]
 8002bf4:	1cbb      	adds	r3, r7, #2
 8002bf6:	1c0a      	adds	r2, r1, #0
 8002bf8:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002bfa:	230b      	movs	r3, #11
 8002bfc:	18fb      	adds	r3, r7, r3
 8002bfe:	2200      	movs	r2, #0
 8002c00:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002c02:	1cfb      	adds	r3, r7, #3
 8002c04:	781b      	ldrb	r3, [r3, #0]
 8002c06:	b25b      	sxtb	r3, r3
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	da0f      	bge.n	8002c2c <HAL_PCD_EP_Open+0x52>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002c0c:	1cfb      	adds	r3, r7, #3
 8002c0e:	781b      	ldrb	r3, [r3, #0]
 8002c10:	2207      	movs	r2, #7
 8002c12:	4013      	ands	r3, r2
 8002c14:	1c5a      	adds	r2, r3, #1
 8002c16:	0013      	movs	r3, r2
 8002c18:	009b      	lsls	r3, r3, #2
 8002c1a:	189b      	adds	r3, r3, r2
 8002c1c:	00db      	lsls	r3, r3, #3
 8002c1e:	687a      	ldr	r2, [r7, #4]
 8002c20:	18d3      	adds	r3, r2, r3
 8002c22:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	2201      	movs	r2, #1
 8002c28:	705a      	strb	r2, [r3, #1]
 8002c2a:	e00f      	b.n	8002c4c <HAL_PCD_EP_Open+0x72>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002c2c:	1cfb      	adds	r3, r7, #3
 8002c2e:	781b      	ldrb	r3, [r3, #0]
 8002c30:	2207      	movs	r2, #7
 8002c32:	401a      	ands	r2, r3
 8002c34:	0013      	movs	r3, r2
 8002c36:	009b      	lsls	r3, r3, #2
 8002c38:	189b      	adds	r3, r3, r2
 8002c3a:	00db      	lsls	r3, r3, #3
 8002c3c:	3369      	adds	r3, #105	; 0x69
 8002c3e:	33ff      	adds	r3, #255	; 0xff
 8002c40:	687a      	ldr	r2, [r7, #4]
 8002c42:	18d3      	adds	r3, r2, r3
 8002c44:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	2200      	movs	r2, #0
 8002c4a:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002c4c:	1cfb      	adds	r3, r7, #3
 8002c4e:	781b      	ldrb	r3, [r3, #0]
 8002c50:	2207      	movs	r2, #7
 8002c52:	4013      	ands	r3, r2
 8002c54:	b2da      	uxtb	r2, r3
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002c5a:	003b      	movs	r3, r7
 8002c5c:	881a      	ldrh	r2, [r3, #0]
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	1cba      	adds	r2, r7, #2
 8002c66:	7812      	ldrb	r2, [r2, #0]
 8002c68:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	785b      	ldrb	r3, [r3, #1]
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d004      	beq.n	8002c7c <HAL_PCD_EP_Open+0xa2>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	781b      	ldrb	r3, [r3, #0]
 8002c76:	b29a      	uxth	r2, r3
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002c7c:	1cbb      	adds	r3, r7, #2
 8002c7e:	781b      	ldrb	r3, [r3, #0]
 8002c80:	2b02      	cmp	r3, #2
 8002c82:	d102      	bne.n	8002c8a <HAL_PCD_EP_Open+0xb0>
  {
    ep->data_pid_start = 0U;
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	2200      	movs	r2, #0
 8002c88:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8002c8a:	687a      	ldr	r2, [r7, #4]
 8002c8c:	23aa      	movs	r3, #170	; 0xaa
 8002c8e:	009b      	lsls	r3, r3, #2
 8002c90:	5cd3      	ldrb	r3, [r2, r3]
 8002c92:	2b01      	cmp	r3, #1
 8002c94:	d101      	bne.n	8002c9a <HAL_PCD_EP_Open+0xc0>
 8002c96:	2302      	movs	r3, #2
 8002c98:	e013      	b.n	8002cc2 <HAL_PCD_EP_Open+0xe8>
 8002c9a:	687a      	ldr	r2, [r7, #4]
 8002c9c:	23aa      	movs	r3, #170	; 0xaa
 8002c9e:	009b      	lsls	r3, r3, #2
 8002ca0:	2101      	movs	r1, #1
 8002ca2:	54d1      	strb	r1, [r2, r3]
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	68fa      	ldr	r2, [r7, #12]
 8002caa:	0011      	movs	r1, r2
 8002cac:	0018      	movs	r0, r3
 8002cae:	f004 fcd7 	bl	8007660 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002cb2:	687a      	ldr	r2, [r7, #4]
 8002cb4:	23aa      	movs	r3, #170	; 0xaa
 8002cb6:	009b      	lsls	r3, r3, #2
 8002cb8:	2100      	movs	r1, #0
 8002cba:	54d1      	strb	r1, [r2, r3]

  return ret;
 8002cbc:	230b      	movs	r3, #11
 8002cbe:	18fb      	adds	r3, r7, r3
 8002cc0:	781b      	ldrb	r3, [r3, #0]
}
 8002cc2:	0018      	movs	r0, r3
 8002cc4:	46bd      	mov	sp, r7
 8002cc6:	b005      	add	sp, #20
 8002cc8:	bd90      	pop	{r4, r7, pc}

08002cca <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002cca:	b580      	push	{r7, lr}
 8002ccc:	b084      	sub	sp, #16
 8002cce:	af00      	add	r7, sp, #0
 8002cd0:	6078      	str	r0, [r7, #4]
 8002cd2:	000a      	movs	r2, r1
 8002cd4:	1cfb      	adds	r3, r7, #3
 8002cd6:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002cd8:	1cfb      	adds	r3, r7, #3
 8002cda:	781b      	ldrb	r3, [r3, #0]
 8002cdc:	b25b      	sxtb	r3, r3
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	da0f      	bge.n	8002d02 <HAL_PCD_EP_Close+0x38>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002ce2:	1cfb      	adds	r3, r7, #3
 8002ce4:	781b      	ldrb	r3, [r3, #0]
 8002ce6:	2207      	movs	r2, #7
 8002ce8:	4013      	ands	r3, r2
 8002cea:	1c5a      	adds	r2, r3, #1
 8002cec:	0013      	movs	r3, r2
 8002cee:	009b      	lsls	r3, r3, #2
 8002cf0:	189b      	adds	r3, r3, r2
 8002cf2:	00db      	lsls	r3, r3, #3
 8002cf4:	687a      	ldr	r2, [r7, #4]
 8002cf6:	18d3      	adds	r3, r2, r3
 8002cf8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	2201      	movs	r2, #1
 8002cfe:	705a      	strb	r2, [r3, #1]
 8002d00:	e00f      	b.n	8002d22 <HAL_PCD_EP_Close+0x58>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002d02:	1cfb      	adds	r3, r7, #3
 8002d04:	781b      	ldrb	r3, [r3, #0]
 8002d06:	2207      	movs	r2, #7
 8002d08:	401a      	ands	r2, r3
 8002d0a:	0013      	movs	r3, r2
 8002d0c:	009b      	lsls	r3, r3, #2
 8002d0e:	189b      	adds	r3, r3, r2
 8002d10:	00db      	lsls	r3, r3, #3
 8002d12:	3369      	adds	r3, #105	; 0x69
 8002d14:	33ff      	adds	r3, #255	; 0xff
 8002d16:	687a      	ldr	r2, [r7, #4]
 8002d18:	18d3      	adds	r3, r2, r3
 8002d1a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	2200      	movs	r2, #0
 8002d20:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002d22:	1cfb      	adds	r3, r7, #3
 8002d24:	781b      	ldrb	r3, [r3, #0]
 8002d26:	2207      	movs	r2, #7
 8002d28:	4013      	ands	r3, r2
 8002d2a:	b2da      	uxtb	r2, r3
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002d30:	687a      	ldr	r2, [r7, #4]
 8002d32:	23aa      	movs	r3, #170	; 0xaa
 8002d34:	009b      	lsls	r3, r3, #2
 8002d36:	5cd3      	ldrb	r3, [r2, r3]
 8002d38:	2b01      	cmp	r3, #1
 8002d3a:	d101      	bne.n	8002d40 <HAL_PCD_EP_Close+0x76>
 8002d3c:	2302      	movs	r3, #2
 8002d3e:	e011      	b.n	8002d64 <HAL_PCD_EP_Close+0x9a>
 8002d40:	687a      	ldr	r2, [r7, #4]
 8002d42:	23aa      	movs	r3, #170	; 0xaa
 8002d44:	009b      	lsls	r3, r3, #2
 8002d46:	2101      	movs	r1, #1
 8002d48:	54d1      	strb	r1, [r2, r3]
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	68fa      	ldr	r2, [r7, #12]
 8002d50:	0011      	movs	r1, r2
 8002d52:	0018      	movs	r0, r3
 8002d54:	f004 fff8 	bl	8007d48 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002d58:	687a      	ldr	r2, [r7, #4]
 8002d5a:	23aa      	movs	r3, #170	; 0xaa
 8002d5c:	009b      	lsls	r3, r3, #2
 8002d5e:	2100      	movs	r1, #0
 8002d60:	54d1      	strb	r1, [r2, r3]
  return HAL_OK;
 8002d62:	2300      	movs	r3, #0
}
 8002d64:	0018      	movs	r0, r3
 8002d66:	46bd      	mov	sp, r7
 8002d68:	b004      	add	sp, #16
 8002d6a:	bd80      	pop	{r7, pc}

08002d6c <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002d6c:	b580      	push	{r7, lr}
 8002d6e:	b086      	sub	sp, #24
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	60f8      	str	r0, [r7, #12]
 8002d74:	607a      	str	r2, [r7, #4]
 8002d76:	603b      	str	r3, [r7, #0]
 8002d78:	200b      	movs	r0, #11
 8002d7a:	183b      	adds	r3, r7, r0
 8002d7c:	1c0a      	adds	r2, r1, #0
 8002d7e:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002d80:	0001      	movs	r1, r0
 8002d82:	187b      	adds	r3, r7, r1
 8002d84:	781b      	ldrb	r3, [r3, #0]
 8002d86:	2207      	movs	r2, #7
 8002d88:	401a      	ands	r2, r3
 8002d8a:	0013      	movs	r3, r2
 8002d8c:	009b      	lsls	r3, r3, #2
 8002d8e:	189b      	adds	r3, r3, r2
 8002d90:	00db      	lsls	r3, r3, #3
 8002d92:	3369      	adds	r3, #105	; 0x69
 8002d94:	33ff      	adds	r3, #255	; 0xff
 8002d96:	68fa      	ldr	r2, [r7, #12]
 8002d98:	18d3      	adds	r3, r2, r3
 8002d9a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002d9c:	697b      	ldr	r3, [r7, #20]
 8002d9e:	687a      	ldr	r2, [r7, #4]
 8002da0:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002da2:	697b      	ldr	r3, [r7, #20]
 8002da4:	683a      	ldr	r2, [r7, #0]
 8002da6:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002da8:	697b      	ldr	r3, [r7, #20]
 8002daa:	2200      	movs	r2, #0
 8002dac:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8002dae:	697b      	ldr	r3, [r7, #20]
 8002db0:	2200      	movs	r2, #0
 8002db2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002db4:	187b      	adds	r3, r7, r1
 8002db6:	781b      	ldrb	r3, [r3, #0]
 8002db8:	2207      	movs	r2, #7
 8002dba:	4013      	ands	r3, r2
 8002dbc:	b2da      	uxtb	r2, r3
 8002dbe:	697b      	ldr	r3, [r7, #20]
 8002dc0:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002dc2:	187b      	adds	r3, r7, r1
 8002dc4:	781b      	ldrb	r3, [r3, #0]
 8002dc6:	2207      	movs	r2, #7
 8002dc8:	4013      	ands	r3, r2
 8002dca:	d107      	bne.n	8002ddc <HAL_PCD_EP_Receive+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	697a      	ldr	r2, [r7, #20]
 8002dd2:	0011      	movs	r1, r2
 8002dd4:	0018      	movs	r0, r3
 8002dd6:	f005 f977 	bl	80080c8 <USB_EPStartXfer>
 8002dda:	e006      	b.n	8002dea <HAL_PCD_EP_Receive+0x7e>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	697a      	ldr	r2, [r7, #20]
 8002de2:	0011      	movs	r1, r2
 8002de4:	0018      	movs	r0, r3
 8002de6:	f005 f96f 	bl	80080c8 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002dea:	2300      	movs	r3, #0
}
 8002dec:	0018      	movs	r0, r3
 8002dee:	46bd      	mov	sp, r7
 8002df0:	b006      	add	sp, #24
 8002df2:	bd80      	pop	{r7, pc}

08002df4 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002df4:	b580      	push	{r7, lr}
 8002df6:	b082      	sub	sp, #8
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	6078      	str	r0, [r7, #4]
 8002dfc:	000a      	movs	r2, r1
 8002dfe:	1cfb      	adds	r3, r7, #3
 8002e00:	701a      	strb	r2, [r3, #0]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002e02:	1cfb      	adds	r3, r7, #3
 8002e04:	781b      	ldrb	r3, [r3, #0]
 8002e06:	2207      	movs	r2, #7
 8002e08:	401a      	ands	r2, r3
 8002e0a:	6878      	ldr	r0, [r7, #4]
 8002e0c:	23c2      	movs	r3, #194	; 0xc2
 8002e0e:	0059      	lsls	r1, r3, #1
 8002e10:	0013      	movs	r3, r2
 8002e12:	009b      	lsls	r3, r3, #2
 8002e14:	189b      	adds	r3, r3, r2
 8002e16:	00db      	lsls	r3, r3, #3
 8002e18:	18c3      	adds	r3, r0, r3
 8002e1a:	185b      	adds	r3, r3, r1
 8002e1c:	681b      	ldr	r3, [r3, #0]
}
 8002e1e:	0018      	movs	r0, r3
 8002e20:	46bd      	mov	sp, r7
 8002e22:	b002      	add	sp, #8
 8002e24:	bd80      	pop	{r7, pc}

08002e26 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002e26:	b580      	push	{r7, lr}
 8002e28:	b086      	sub	sp, #24
 8002e2a:	af00      	add	r7, sp, #0
 8002e2c:	60f8      	str	r0, [r7, #12]
 8002e2e:	607a      	str	r2, [r7, #4]
 8002e30:	603b      	str	r3, [r7, #0]
 8002e32:	200b      	movs	r0, #11
 8002e34:	183b      	adds	r3, r7, r0
 8002e36:	1c0a      	adds	r2, r1, #0
 8002e38:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002e3a:	183b      	adds	r3, r7, r0
 8002e3c:	781b      	ldrb	r3, [r3, #0]
 8002e3e:	2207      	movs	r2, #7
 8002e40:	4013      	ands	r3, r2
 8002e42:	1c5a      	adds	r2, r3, #1
 8002e44:	0013      	movs	r3, r2
 8002e46:	009b      	lsls	r3, r3, #2
 8002e48:	189b      	adds	r3, r3, r2
 8002e4a:	00db      	lsls	r3, r3, #3
 8002e4c:	68fa      	ldr	r2, [r7, #12]
 8002e4e:	18d3      	adds	r3, r2, r3
 8002e50:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002e52:	697b      	ldr	r3, [r7, #20]
 8002e54:	687a      	ldr	r2, [r7, #4]
 8002e56:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002e58:	697b      	ldr	r3, [r7, #20]
 8002e5a:	683a      	ldr	r2, [r7, #0]
 8002e5c:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8002e5e:	697b      	ldr	r3, [r7, #20]
 8002e60:	2224      	movs	r2, #36	; 0x24
 8002e62:	2101      	movs	r1, #1
 8002e64:	5499      	strb	r1, [r3, r2]
  ep->xfer_len_db = len;
 8002e66:	697b      	ldr	r3, [r7, #20]
 8002e68:	683a      	ldr	r2, [r7, #0]
 8002e6a:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8002e6c:	697b      	ldr	r3, [r7, #20]
 8002e6e:	2200      	movs	r2, #0
 8002e70:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8002e72:	697b      	ldr	r3, [r7, #20]
 8002e74:	2201      	movs	r2, #1
 8002e76:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002e78:	183b      	adds	r3, r7, r0
 8002e7a:	781b      	ldrb	r3, [r3, #0]
 8002e7c:	2207      	movs	r2, #7
 8002e7e:	4013      	ands	r3, r2
 8002e80:	b2da      	uxtb	r2, r3
 8002e82:	697b      	ldr	r3, [r7, #20]
 8002e84:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002e86:	183b      	adds	r3, r7, r0
 8002e88:	781b      	ldrb	r3, [r3, #0]
 8002e8a:	2207      	movs	r2, #7
 8002e8c:	4013      	ands	r3, r2
 8002e8e:	d107      	bne.n	8002ea0 <HAL_PCD_EP_Transmit+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	697a      	ldr	r2, [r7, #20]
 8002e96:	0011      	movs	r1, r2
 8002e98:	0018      	movs	r0, r3
 8002e9a:	f005 f915 	bl	80080c8 <USB_EPStartXfer>
 8002e9e:	e006      	b.n	8002eae <HAL_PCD_EP_Transmit+0x88>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	697a      	ldr	r2, [r7, #20]
 8002ea6:	0011      	movs	r1, r2
 8002ea8:	0018      	movs	r0, r3
 8002eaa:	f005 f90d 	bl	80080c8 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002eae:	2300      	movs	r3, #0
}
 8002eb0:	0018      	movs	r0, r3
 8002eb2:	46bd      	mov	sp, r7
 8002eb4:	b006      	add	sp, #24
 8002eb6:	bd80      	pop	{r7, pc}

08002eb8 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002eb8:	b580      	push	{r7, lr}
 8002eba:	b084      	sub	sp, #16
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	6078      	str	r0, [r7, #4]
 8002ec0:	000a      	movs	r2, r1
 8002ec2:	1cfb      	adds	r3, r7, #3
 8002ec4:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002ec6:	1cfb      	adds	r3, r7, #3
 8002ec8:	781b      	ldrb	r3, [r3, #0]
 8002eca:	2207      	movs	r2, #7
 8002ecc:	401a      	ands	r2, r3
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	685b      	ldr	r3, [r3, #4]
 8002ed2:	429a      	cmp	r2, r3
 8002ed4:	d901      	bls.n	8002eda <HAL_PCD_EP_SetStall+0x22>
  {
    return HAL_ERROR;
 8002ed6:	2301      	movs	r3, #1
 8002ed8:	e046      	b.n	8002f68 <HAL_PCD_EP_SetStall+0xb0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002eda:	1cfb      	adds	r3, r7, #3
 8002edc:	781b      	ldrb	r3, [r3, #0]
 8002ede:	b25b      	sxtb	r3, r3
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	da0f      	bge.n	8002f04 <HAL_PCD_EP_SetStall+0x4c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002ee4:	1cfb      	adds	r3, r7, #3
 8002ee6:	781b      	ldrb	r3, [r3, #0]
 8002ee8:	2207      	movs	r2, #7
 8002eea:	4013      	ands	r3, r2
 8002eec:	1c5a      	adds	r2, r3, #1
 8002eee:	0013      	movs	r3, r2
 8002ef0:	009b      	lsls	r3, r3, #2
 8002ef2:	189b      	adds	r3, r3, r2
 8002ef4:	00db      	lsls	r3, r3, #3
 8002ef6:	687a      	ldr	r2, [r7, #4]
 8002ef8:	18d3      	adds	r3, r2, r3
 8002efa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	2201      	movs	r2, #1
 8002f00:	705a      	strb	r2, [r3, #1]
 8002f02:	e00d      	b.n	8002f20 <HAL_PCD_EP_SetStall+0x68>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002f04:	1cfb      	adds	r3, r7, #3
 8002f06:	781a      	ldrb	r2, [r3, #0]
 8002f08:	0013      	movs	r3, r2
 8002f0a:	009b      	lsls	r3, r3, #2
 8002f0c:	189b      	adds	r3, r3, r2
 8002f0e:	00db      	lsls	r3, r3, #3
 8002f10:	3369      	adds	r3, #105	; 0x69
 8002f12:	33ff      	adds	r3, #255	; 0xff
 8002f14:	687a      	ldr	r2, [r7, #4]
 8002f16:	18d3      	adds	r3, r2, r3
 8002f18:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	2200      	movs	r2, #0
 8002f1e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	2201      	movs	r2, #1
 8002f24:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002f26:	1cfb      	adds	r3, r7, #3
 8002f28:	781b      	ldrb	r3, [r3, #0]
 8002f2a:	2207      	movs	r2, #7
 8002f2c:	4013      	ands	r3, r2
 8002f2e:	b2da      	uxtb	r2, r3
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002f34:	687a      	ldr	r2, [r7, #4]
 8002f36:	23aa      	movs	r3, #170	; 0xaa
 8002f38:	009b      	lsls	r3, r3, #2
 8002f3a:	5cd3      	ldrb	r3, [r2, r3]
 8002f3c:	2b01      	cmp	r3, #1
 8002f3e:	d101      	bne.n	8002f44 <HAL_PCD_EP_SetStall+0x8c>
 8002f40:	2302      	movs	r3, #2
 8002f42:	e011      	b.n	8002f68 <HAL_PCD_EP_SetStall+0xb0>
 8002f44:	687a      	ldr	r2, [r7, #4]
 8002f46:	23aa      	movs	r3, #170	; 0xaa
 8002f48:	009b      	lsls	r3, r3, #2
 8002f4a:	2101      	movs	r1, #1
 8002f4c:	54d1      	strb	r1, [r2, r3]

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	68fa      	ldr	r2, [r7, #12]
 8002f54:	0011      	movs	r1, r2
 8002f56:	0018      	movs	r0, r3
 8002f58:	f006 f970 	bl	800923c <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 8002f5c:	687a      	ldr	r2, [r7, #4]
 8002f5e:	23aa      	movs	r3, #170	; 0xaa
 8002f60:	009b      	lsls	r3, r3, #2
 8002f62:	2100      	movs	r1, #0
 8002f64:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8002f66:	2300      	movs	r3, #0
}
 8002f68:	0018      	movs	r0, r3
 8002f6a:	46bd      	mov	sp, r7
 8002f6c:	b004      	add	sp, #16
 8002f6e:	bd80      	pop	{r7, pc}

08002f70 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002f70:	b580      	push	{r7, lr}
 8002f72:	b084      	sub	sp, #16
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	6078      	str	r0, [r7, #4]
 8002f78:	000a      	movs	r2, r1
 8002f7a:	1cfb      	adds	r3, r7, #3
 8002f7c:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002f7e:	1cfb      	adds	r3, r7, #3
 8002f80:	781b      	ldrb	r3, [r3, #0]
 8002f82:	220f      	movs	r2, #15
 8002f84:	401a      	ands	r2, r3
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	685b      	ldr	r3, [r3, #4]
 8002f8a:	429a      	cmp	r2, r3
 8002f8c:	d901      	bls.n	8002f92 <HAL_PCD_EP_ClrStall+0x22>
  {
    return HAL_ERROR;
 8002f8e:	2301      	movs	r3, #1
 8002f90:	e048      	b.n	8003024 <HAL_PCD_EP_ClrStall+0xb4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002f92:	1cfb      	adds	r3, r7, #3
 8002f94:	781b      	ldrb	r3, [r3, #0]
 8002f96:	b25b      	sxtb	r3, r3
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	da0f      	bge.n	8002fbc <HAL_PCD_EP_ClrStall+0x4c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002f9c:	1cfb      	adds	r3, r7, #3
 8002f9e:	781b      	ldrb	r3, [r3, #0]
 8002fa0:	2207      	movs	r2, #7
 8002fa2:	4013      	ands	r3, r2
 8002fa4:	1c5a      	adds	r2, r3, #1
 8002fa6:	0013      	movs	r3, r2
 8002fa8:	009b      	lsls	r3, r3, #2
 8002faa:	189b      	adds	r3, r3, r2
 8002fac:	00db      	lsls	r3, r3, #3
 8002fae:	687a      	ldr	r2, [r7, #4]
 8002fb0:	18d3      	adds	r3, r2, r3
 8002fb2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	2201      	movs	r2, #1
 8002fb8:	705a      	strb	r2, [r3, #1]
 8002fba:	e00f      	b.n	8002fdc <HAL_PCD_EP_ClrStall+0x6c>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002fbc:	1cfb      	adds	r3, r7, #3
 8002fbe:	781b      	ldrb	r3, [r3, #0]
 8002fc0:	2207      	movs	r2, #7
 8002fc2:	401a      	ands	r2, r3
 8002fc4:	0013      	movs	r3, r2
 8002fc6:	009b      	lsls	r3, r3, #2
 8002fc8:	189b      	adds	r3, r3, r2
 8002fca:	00db      	lsls	r3, r3, #3
 8002fcc:	3369      	adds	r3, #105	; 0x69
 8002fce:	33ff      	adds	r3, #255	; 0xff
 8002fd0:	687a      	ldr	r2, [r7, #4]
 8002fd2:	18d3      	adds	r3, r2, r3
 8002fd4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	2200      	movs	r2, #0
 8002fda:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	2200      	movs	r2, #0
 8002fe0:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002fe2:	1cfb      	adds	r3, r7, #3
 8002fe4:	781b      	ldrb	r3, [r3, #0]
 8002fe6:	2207      	movs	r2, #7
 8002fe8:	4013      	ands	r3, r2
 8002fea:	b2da      	uxtb	r2, r3
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002ff0:	687a      	ldr	r2, [r7, #4]
 8002ff2:	23aa      	movs	r3, #170	; 0xaa
 8002ff4:	009b      	lsls	r3, r3, #2
 8002ff6:	5cd3      	ldrb	r3, [r2, r3]
 8002ff8:	2b01      	cmp	r3, #1
 8002ffa:	d101      	bne.n	8003000 <HAL_PCD_EP_ClrStall+0x90>
 8002ffc:	2302      	movs	r3, #2
 8002ffe:	e011      	b.n	8003024 <HAL_PCD_EP_ClrStall+0xb4>
 8003000:	687a      	ldr	r2, [r7, #4]
 8003002:	23aa      	movs	r3, #170	; 0xaa
 8003004:	009b      	lsls	r3, r3, #2
 8003006:	2101      	movs	r1, #1
 8003008:	54d1      	strb	r1, [r2, r3]
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	68fa      	ldr	r2, [r7, #12]
 8003010:	0011      	movs	r1, r2
 8003012:	0018      	movs	r0, r3
 8003014:	f006 f962 	bl	80092dc <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003018:	687a      	ldr	r2, [r7, #4]
 800301a:	23aa      	movs	r3, #170	; 0xaa
 800301c:	009b      	lsls	r3, r3, #2
 800301e:	2100      	movs	r1, #0
 8003020:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8003022:	2300      	movs	r3, #0
}
 8003024:	0018      	movs	r0, r3
 8003026:	46bd      	mov	sp, r7
 8003028:	b004      	add	sp, #16
 800302a:	bd80      	pop	{r7, pc}

0800302c <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 800302c:	b5b0      	push	{r4, r5, r7, lr}
 800302e:	b096      	sub	sp, #88	; 0x58
 8003030:	af00      	add	r7, sp, #0
 8003032:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8003034:	f000 fbd8 	bl	80037e8 <PCD_EP_ISR_Handler+0x7bc>
  {
    wIstr = hpcd->Instance->ISTR;
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681a      	ldr	r2, [r3, #0]
 800303c:	2056      	movs	r0, #86	; 0x56
 800303e:	183b      	adds	r3, r7, r0
 8003040:	2144      	movs	r1, #68	; 0x44
 8003042:	5a52      	ldrh	r2, [r2, r1]
 8003044:	801a      	strh	r2, [r3, #0]

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8003046:	183b      	adds	r3, r7, r0
 8003048:	881b      	ldrh	r3, [r3, #0]
 800304a:	b2da      	uxtb	r2, r3
 800304c:	2455      	movs	r4, #85	; 0x55
 800304e:	193b      	adds	r3, r7, r4
 8003050:	210f      	movs	r1, #15
 8003052:	400a      	ands	r2, r1
 8003054:	701a      	strb	r2, [r3, #0]

    if (epindex == 0U)
 8003056:	193b      	adds	r3, r7, r4
 8003058:	781b      	ldrb	r3, [r3, #0]
 800305a:	2b00      	cmp	r3, #0
 800305c:	d000      	beq.n	8003060 <PCD_EP_ISR_Handler+0x34>
 800305e:	e179      	b.n	8003354 <PCD_EP_ISR_Handler+0x328>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8003060:	183b      	adds	r3, r7, r0
 8003062:	881b      	ldrh	r3, [r3, #0]
 8003064:	2210      	movs	r2, #16
 8003066:	4013      	ands	r3, r2
 8003068:	d154      	bne.n	8003114 <PCD_EP_ISR_Handler+0xe8>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	881b      	ldrh	r3, [r3, #0]
 8003070:	b29a      	uxth	r2, r3
 8003072:	200e      	movs	r0, #14
 8003074:	183b      	adds	r3, r7, r0
 8003076:	49af      	ldr	r1, [pc, #700]	; (8003334 <PCD_EP_ISR_Handler+0x308>)
 8003078:	400a      	ands	r2, r1
 800307a:	801a      	strh	r2, [r3, #0]
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	183a      	adds	r2, r7, r0
 8003082:	8812      	ldrh	r2, [r2, #0]
 8003084:	49ac      	ldr	r1, [pc, #688]	; (8003338 <PCD_EP_ISR_Handler+0x30c>)
 8003086:	430a      	orrs	r2, r1
 8003088:	b292      	uxth	r2, r2
 800308a:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->IN_ep[0];
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	3328      	adds	r3, #40	; 0x28
 8003090:	64fb      	str	r3, [r7, #76]	; 0x4c

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	2250      	movs	r2, #80	; 0x50
 8003098:	5a9b      	ldrh	r3, [r3, r2]
 800309a:	b29b      	uxth	r3, r3
 800309c:	001a      	movs	r2, r3
 800309e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80030a0:	781b      	ldrb	r3, [r3, #0]
 80030a2:	00db      	lsls	r3, r3, #3
 80030a4:	18d2      	adds	r2, r2, r3
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	18d3      	adds	r3, r2, r3
 80030ac:	4aa3      	ldr	r2, [pc, #652]	; (800333c <PCD_EP_ISR_Handler+0x310>)
 80030ae:	4694      	mov	ip, r2
 80030b0:	4463      	add	r3, ip
 80030b2:	881b      	ldrh	r3, [r3, #0]
 80030b4:	059b      	lsls	r3, r3, #22
 80030b6:	0d9a      	lsrs	r2, r3, #22
 80030b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80030ba:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80030bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80030be:	695a      	ldr	r2, [r3, #20]
 80030c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80030c2:	69db      	ldr	r3, [r3, #28]
 80030c4:	18d2      	adds	r2, r2, r3
 80030c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80030c8:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	2100      	movs	r1, #0
 80030ce:	0018      	movs	r0, r3
 80030d0:	f008 fa38 	bl	800b544 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	2224      	movs	r2, #36	; 0x24
 80030d8:	5c9b      	ldrb	r3, [r3, r2]
 80030da:	b2db      	uxtb	r3, r3
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d101      	bne.n	80030e4 <PCD_EP_ISR_Handler+0xb8>
 80030e0:	f000 fb82 	bl	80037e8 <PCD_EP_ISR_Handler+0x7bc>
 80030e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80030e6:	699b      	ldr	r3, [r3, #24]
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d001      	beq.n	80030f0 <PCD_EP_ISR_Handler+0xc4>
 80030ec:	f000 fb7c 	bl	80037e8 <PCD_EP_ISR_Handler+0x7bc>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	2224      	movs	r2, #36	; 0x24
 80030f4:	5c9b      	ldrb	r3, [r3, r2]
 80030f6:	b2db      	uxtb	r3, r3
 80030f8:	2280      	movs	r2, #128	; 0x80
 80030fa:	4252      	negs	r2, r2
 80030fc:	4313      	orrs	r3, r2
 80030fe:	b2da      	uxtb	r2, r3
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	b291      	uxth	r1, r2
 8003106:	224c      	movs	r2, #76	; 0x4c
 8003108:	5299      	strh	r1, [r3, r2]
          hpcd->USB_Address = 0U;
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	2224      	movs	r2, #36	; 0x24
 800310e:	2100      	movs	r1, #0
 8003110:	5499      	strb	r1, [r3, r2]
 8003112:	e369      	b.n	80037e8 <PCD_EP_ISR_Handler+0x7bc>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	3369      	adds	r3, #105	; 0x69
 8003118:	33ff      	adds	r3, #255	; 0xff
 800311a:	64fb      	str	r3, [r7, #76]	; 0x4c
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681a      	ldr	r2, [r3, #0]
 8003120:	2152      	movs	r1, #82	; 0x52
 8003122:	187b      	adds	r3, r7, r1
 8003124:	8812      	ldrh	r2, [r2, #0]
 8003126:	801a      	strh	r2, [r3, #0]

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8003128:	187b      	adds	r3, r7, r1
 800312a:	881a      	ldrh	r2, [r3, #0]
 800312c:	2380      	movs	r3, #128	; 0x80
 800312e:	011b      	lsls	r3, r3, #4
 8003130:	4013      	ands	r3, r2
 8003132:	d037      	beq.n	80031a4 <PCD_EP_ISR_Handler+0x178>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	2250      	movs	r2, #80	; 0x50
 800313a:	5a9b      	ldrh	r3, [r3, r2]
 800313c:	b29b      	uxth	r3, r3
 800313e:	001a      	movs	r2, r3
 8003140:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003142:	781b      	ldrb	r3, [r3, #0]
 8003144:	00db      	lsls	r3, r3, #3
 8003146:	18d2      	adds	r2, r2, r3
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	18d3      	adds	r3, r2, r3
 800314e:	4a7c      	ldr	r2, [pc, #496]	; (8003340 <PCD_EP_ISR_Handler+0x314>)
 8003150:	4694      	mov	ip, r2
 8003152:	4463      	add	r3, ip
 8003154:	881b      	ldrh	r3, [r3, #0]
 8003156:	059b      	lsls	r3, r3, #22
 8003158:	0d9a      	lsrs	r2, r3, #22
 800315a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800315c:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	6818      	ldr	r0, [r3, #0]
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	22ac      	movs	r2, #172	; 0xac
 8003166:	0092      	lsls	r2, r2, #2
 8003168:	1899      	adds	r1, r3, r2
 800316a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800316c:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 800316e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003170:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8003172:	b29b      	uxth	r3, r3
 8003174:	f006 f9e0 	bl	8009538 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	881b      	ldrh	r3, [r3, #0]
 800317e:	b29a      	uxth	r2, r3
 8003180:	2010      	movs	r0, #16
 8003182:	183b      	adds	r3, r7, r0
 8003184:	496f      	ldr	r1, [pc, #444]	; (8003344 <PCD_EP_ISR_Handler+0x318>)
 8003186:	400a      	ands	r2, r1
 8003188:	801a      	strh	r2, [r3, #0]
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	183a      	adds	r2, r7, r0
 8003190:	8812      	ldrh	r2, [r2, #0]
 8003192:	2180      	movs	r1, #128	; 0x80
 8003194:	430a      	orrs	r2, r1
 8003196:	b292      	uxth	r2, r2
 8003198:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	0018      	movs	r0, r3
 800319e:	f008 f99b 	bl	800b4d8 <HAL_PCD_SetupStageCallback>
 80031a2:	e321      	b.n	80037e8 <PCD_EP_ISR_Handler+0x7bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80031a4:	2352      	movs	r3, #82	; 0x52
 80031a6:	18fb      	adds	r3, r7, r3
 80031a8:	2200      	movs	r2, #0
 80031aa:	5e9b      	ldrsh	r3, [r3, r2]
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	db00      	blt.n	80031b2 <PCD_EP_ISR_Handler+0x186>
 80031b0:	e31a      	b.n	80037e8 <PCD_EP_ISR_Handler+0x7bc>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	881b      	ldrh	r3, [r3, #0]
 80031b8:	b29a      	uxth	r2, r3
 80031ba:	201e      	movs	r0, #30
 80031bc:	183b      	adds	r3, r7, r0
 80031be:	4961      	ldr	r1, [pc, #388]	; (8003344 <PCD_EP_ISR_Handler+0x318>)
 80031c0:	400a      	ands	r2, r1
 80031c2:	801a      	strh	r2, [r3, #0]
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	183a      	adds	r2, r7, r0
 80031ca:	8812      	ldrh	r2, [r2, #0]
 80031cc:	2180      	movs	r1, #128	; 0x80
 80031ce:	430a      	orrs	r2, r1
 80031d0:	b292      	uxth	r2, r2
 80031d2:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	2250      	movs	r2, #80	; 0x50
 80031da:	5a9b      	ldrh	r3, [r3, r2]
 80031dc:	b29b      	uxth	r3, r3
 80031de:	001a      	movs	r2, r3
 80031e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80031e2:	781b      	ldrb	r3, [r3, #0]
 80031e4:	00db      	lsls	r3, r3, #3
 80031e6:	18d2      	adds	r2, r2, r3
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	18d3      	adds	r3, r2, r3
 80031ee:	4a54      	ldr	r2, [pc, #336]	; (8003340 <PCD_EP_ISR_Handler+0x314>)
 80031f0:	4694      	mov	ip, r2
 80031f2:	4463      	add	r3, ip
 80031f4:	881b      	ldrh	r3, [r3, #0]
 80031f6:	059b      	lsls	r3, r3, #22
 80031f8:	0d9a      	lsrs	r2, r3, #22
 80031fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80031fc:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80031fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003200:	69db      	ldr	r3, [r3, #28]
 8003202:	2b00      	cmp	r3, #0
 8003204:	d01a      	beq.n	800323c <PCD_EP_ISR_Handler+0x210>
 8003206:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003208:	695b      	ldr	r3, [r3, #20]
 800320a:	2b00      	cmp	r3, #0
 800320c:	d016      	beq.n	800323c <PCD_EP_ISR_Handler+0x210>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	6818      	ldr	r0, [r3, #0]
 8003212:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003214:	6959      	ldr	r1, [r3, #20]
 8003216:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003218:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 800321a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800321c:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800321e:	b29b      	uxth	r3, r3
 8003220:	f006 f98a 	bl	8009538 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8003224:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003226:	695a      	ldr	r2, [r3, #20]
 8003228:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800322a:	69db      	ldr	r3, [r3, #28]
 800322c:	18d2      	adds	r2, r2, r3
 800322e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003230:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	2100      	movs	r1, #0
 8003236:	0018      	movs	r0, r3
 8003238:	f008 f963 	bl	800b502 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	881b      	ldrh	r3, [r3, #0]
 8003242:	b29b      	uxth	r3, r3
 8003244:	001a      	movs	r2, r3
 8003246:	2380      	movs	r3, #128	; 0x80
 8003248:	011b      	lsls	r3, r3, #4
 800324a:	4013      	ands	r3, r2
 800324c:	d000      	beq.n	8003250 <PCD_EP_ISR_Handler+0x224>
 800324e:	e2cb      	b.n	80037e8 <PCD_EP_ISR_Handler+0x7bc>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	61bb      	str	r3, [r7, #24]
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	2250      	movs	r2, #80	; 0x50
 800325c:	5a9b      	ldrh	r3, [r3, r2]
 800325e:	b29b      	uxth	r3, r3
 8003260:	001a      	movs	r2, r3
 8003262:	69bb      	ldr	r3, [r7, #24]
 8003264:	189b      	adds	r3, r3, r2
 8003266:	61bb      	str	r3, [r7, #24]
 8003268:	69bb      	ldr	r3, [r7, #24]
 800326a:	4a35      	ldr	r2, [pc, #212]	; (8003340 <PCD_EP_ISR_Handler+0x314>)
 800326c:	4694      	mov	ip, r2
 800326e:	4463      	add	r3, ip
 8003270:	617b      	str	r3, [r7, #20]
 8003272:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003274:	691b      	ldr	r3, [r3, #16]
 8003276:	2b00      	cmp	r3, #0
 8003278:	d110      	bne.n	800329c <PCD_EP_ISR_Handler+0x270>
 800327a:	697b      	ldr	r3, [r7, #20]
 800327c:	881b      	ldrh	r3, [r3, #0]
 800327e:	b29b      	uxth	r3, r3
 8003280:	4a31      	ldr	r2, [pc, #196]	; (8003348 <PCD_EP_ISR_Handler+0x31c>)
 8003282:	4013      	ands	r3, r2
 8003284:	b29a      	uxth	r2, r3
 8003286:	697b      	ldr	r3, [r7, #20]
 8003288:	801a      	strh	r2, [r3, #0]
 800328a:	697b      	ldr	r3, [r7, #20]
 800328c:	881b      	ldrh	r3, [r3, #0]
 800328e:	b29b      	uxth	r3, r3
 8003290:	4a29      	ldr	r2, [pc, #164]	; (8003338 <PCD_EP_ISR_Handler+0x30c>)
 8003292:	4313      	orrs	r3, r2
 8003294:	b29a      	uxth	r2, r3
 8003296:	697b      	ldr	r3, [r7, #20]
 8003298:	801a      	strh	r2, [r3, #0]
 800329a:	e02b      	b.n	80032f4 <PCD_EP_ISR_Handler+0x2c8>
 800329c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800329e:	691b      	ldr	r3, [r3, #16]
 80032a0:	2b3e      	cmp	r3, #62	; 0x3e
 80032a2:	d812      	bhi.n	80032ca <PCD_EP_ISR_Handler+0x29e>
 80032a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80032a6:	691b      	ldr	r3, [r3, #16]
 80032a8:	085b      	lsrs	r3, r3, #1
 80032aa:	647b      	str	r3, [r7, #68]	; 0x44
 80032ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80032ae:	691b      	ldr	r3, [r3, #16]
 80032b0:	2201      	movs	r2, #1
 80032b2:	4013      	ands	r3, r2
 80032b4:	d002      	beq.n	80032bc <PCD_EP_ISR_Handler+0x290>
 80032b6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80032b8:	3301      	adds	r3, #1
 80032ba:	647b      	str	r3, [r7, #68]	; 0x44
 80032bc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80032be:	b29b      	uxth	r3, r3
 80032c0:	029b      	lsls	r3, r3, #10
 80032c2:	b29a      	uxth	r2, r3
 80032c4:	697b      	ldr	r3, [r7, #20]
 80032c6:	801a      	strh	r2, [r3, #0]
 80032c8:	e014      	b.n	80032f4 <PCD_EP_ISR_Handler+0x2c8>
 80032ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80032cc:	691b      	ldr	r3, [r3, #16]
 80032ce:	095b      	lsrs	r3, r3, #5
 80032d0:	647b      	str	r3, [r7, #68]	; 0x44
 80032d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80032d4:	691b      	ldr	r3, [r3, #16]
 80032d6:	221f      	movs	r2, #31
 80032d8:	4013      	ands	r3, r2
 80032da:	d102      	bne.n	80032e2 <PCD_EP_ISR_Handler+0x2b6>
 80032dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80032de:	3b01      	subs	r3, #1
 80032e0:	647b      	str	r3, [r7, #68]	; 0x44
 80032e2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80032e4:	b29b      	uxth	r3, r3
 80032e6:	029b      	lsls	r3, r3, #10
 80032e8:	b29b      	uxth	r3, r3
 80032ea:	4a13      	ldr	r2, [pc, #76]	; (8003338 <PCD_EP_ISR_Handler+0x30c>)
 80032ec:	4313      	orrs	r3, r2
 80032ee:	b29a      	uxth	r2, r3
 80032f0:	697b      	ldr	r3, [r7, #20]
 80032f2:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	881b      	ldrh	r3, [r3, #0]
 80032fa:	b29a      	uxth	r2, r3
 80032fc:	2012      	movs	r0, #18
 80032fe:	183b      	adds	r3, r7, r0
 8003300:	4912      	ldr	r1, [pc, #72]	; (800334c <PCD_EP_ISR_Handler+0x320>)
 8003302:	400a      	ands	r2, r1
 8003304:	801a      	strh	r2, [r3, #0]
 8003306:	183b      	adds	r3, r7, r0
 8003308:	183a      	adds	r2, r7, r0
 800330a:	8812      	ldrh	r2, [r2, #0]
 800330c:	2180      	movs	r1, #128	; 0x80
 800330e:	0149      	lsls	r1, r1, #5
 8003310:	404a      	eors	r2, r1
 8003312:	801a      	strh	r2, [r3, #0]
 8003314:	183b      	adds	r3, r7, r0
 8003316:	183a      	adds	r2, r7, r0
 8003318:	8812      	ldrh	r2, [r2, #0]
 800331a:	2180      	movs	r1, #128	; 0x80
 800331c:	0189      	lsls	r1, r1, #6
 800331e:	404a      	eors	r2, r1
 8003320:	801a      	strh	r2, [r3, #0]
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	183a      	adds	r2, r7, r0
 8003328:	8812      	ldrh	r2, [r2, #0]
 800332a:	4909      	ldr	r1, [pc, #36]	; (8003350 <PCD_EP_ISR_Handler+0x324>)
 800332c:	430a      	orrs	r2, r1
 800332e:	b292      	uxth	r2, r2
 8003330:	801a      	strh	r2, [r3, #0]
 8003332:	e259      	b.n	80037e8 <PCD_EP_ISR_Handler+0x7bc>
 8003334:	ffff8f0f 	.word	0xffff8f0f
 8003338:	ffff8000 	.word	0xffff8000
 800333c:	00000402 	.word	0x00000402
 8003340:	00000406 	.word	0x00000406
 8003344:	00000f8f 	.word	0x00000f8f
 8003348:	ffff83ff 	.word	0xffff83ff
 800334c:	ffffbf8f 	.word	0xffffbf8f
 8003350:	ffff8080 	.word	0xffff8080
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	001a      	movs	r2, r3
 800335a:	2055      	movs	r0, #85	; 0x55
 800335c:	183b      	adds	r3, r7, r0
 800335e:	781b      	ldrb	r3, [r3, #0]
 8003360:	009b      	lsls	r3, r3, #2
 8003362:	18d2      	adds	r2, r2, r3
 8003364:	2152      	movs	r1, #82	; 0x52
 8003366:	187b      	adds	r3, r7, r1
 8003368:	8812      	ldrh	r2, [r2, #0]
 800336a:	801a      	strh	r2, [r3, #0]

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800336c:	187b      	adds	r3, r7, r1
 800336e:	2200      	movs	r2, #0
 8003370:	5e9b      	ldrsh	r3, [r3, r2]
 8003372:	2b00      	cmp	r3, #0
 8003374:	db00      	blt.n	8003378 <PCD_EP_ISR_Handler+0x34c>
 8003376:	e0fa      	b.n	800356e <PCD_EP_ISR_Handler+0x542>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	001a      	movs	r2, r3
 800337e:	183b      	adds	r3, r7, r0
 8003380:	781b      	ldrb	r3, [r3, #0]
 8003382:	009b      	lsls	r3, r3, #2
 8003384:	18d3      	adds	r3, r2, r3
 8003386:	881b      	ldrh	r3, [r3, #0]
 8003388:	b29a      	uxth	r2, r3
 800338a:	2450      	movs	r4, #80	; 0x50
 800338c:	193b      	adds	r3, r7, r4
 800338e:	49cf      	ldr	r1, [pc, #828]	; (80036cc <PCD_EP_ISR_Handler+0x6a0>)
 8003390:	400a      	ands	r2, r1
 8003392:	801a      	strh	r2, [r3, #0]
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	001a      	movs	r2, r3
 800339a:	183b      	adds	r3, r7, r0
 800339c:	781b      	ldrb	r3, [r3, #0]
 800339e:	009b      	lsls	r3, r3, #2
 80033a0:	18d3      	adds	r3, r2, r3
 80033a2:	193a      	adds	r2, r7, r4
 80033a4:	8812      	ldrh	r2, [r2, #0]
 80033a6:	2180      	movs	r1, #128	; 0x80
 80033a8:	430a      	orrs	r2, r1
 80033aa:	b292      	uxth	r2, r2
 80033ac:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 80033ae:	183b      	adds	r3, r7, r0
 80033b0:	781a      	ldrb	r2, [r3, #0]
 80033b2:	0013      	movs	r3, r2
 80033b4:	009b      	lsls	r3, r3, #2
 80033b6:	189b      	adds	r3, r3, r2
 80033b8:	00db      	lsls	r3, r3, #3
 80033ba:	3369      	adds	r3, #105	; 0x69
 80033bc:	33ff      	adds	r3, #255	; 0xff
 80033be:	687a      	ldr	r2, [r7, #4]
 80033c0:	18d3      	adds	r3, r2, r3
 80033c2:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 80033c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80033c6:	7b1b      	ldrb	r3, [r3, #12]
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d125      	bne.n	8003418 <PCD_EP_ISR_Handler+0x3ec>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	2250      	movs	r2, #80	; 0x50
 80033d2:	5a9b      	ldrh	r3, [r3, r2]
 80033d4:	b29b      	uxth	r3, r3
 80033d6:	001a      	movs	r2, r3
 80033d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80033da:	781b      	ldrb	r3, [r3, #0]
 80033dc:	00db      	lsls	r3, r3, #3
 80033de:	18d2      	adds	r2, r2, r3
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	18d3      	adds	r3, r2, r3
 80033e6:	4aba      	ldr	r2, [pc, #744]	; (80036d0 <PCD_EP_ISR_Handler+0x6a4>)
 80033e8:	4694      	mov	ip, r2
 80033ea:	4463      	add	r3, ip
 80033ec:	881a      	ldrh	r2, [r3, #0]
 80033ee:	2448      	movs	r4, #72	; 0x48
 80033f0:	193b      	adds	r3, r7, r4
 80033f2:	0592      	lsls	r2, r2, #22
 80033f4:	0d92      	lsrs	r2, r2, #22
 80033f6:	801a      	strh	r2, [r3, #0]

          if (count != 0U)
 80033f8:	193b      	adds	r3, r7, r4
 80033fa:	881b      	ldrh	r3, [r3, #0]
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d100      	bne.n	8003402 <PCD_EP_ISR_Handler+0x3d6>
 8003400:	e08d      	b.n	800351e <PCD_EP_ISR_Handler+0x4f2>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	6818      	ldr	r0, [r3, #0]
 8003406:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003408:	6959      	ldr	r1, [r3, #20]
 800340a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800340c:	88da      	ldrh	r2, [r3, #6]
 800340e:	193b      	adds	r3, r7, r4
 8003410:	881b      	ldrh	r3, [r3, #0]
 8003412:	f006 f891 	bl	8009538 <USB_ReadPMA>
 8003416:	e082      	b.n	800351e <PCD_EP_ISR_Handler+0x4f2>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8003418:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800341a:	78db      	ldrb	r3, [r3, #3]
 800341c:	2b02      	cmp	r3, #2
 800341e:	d10c      	bne.n	800343a <PCD_EP_ISR_Handler+0x40e>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8003420:	2348      	movs	r3, #72	; 0x48
 8003422:	18fc      	adds	r4, r7, r3
 8003424:	2352      	movs	r3, #82	; 0x52
 8003426:	18fb      	adds	r3, r7, r3
 8003428:	881a      	ldrh	r2, [r3, #0]
 800342a:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	0018      	movs	r0, r3
 8003430:	f000 f9ee 	bl	8003810 <HAL_PCD_EP_DB_Receive>
 8003434:	0003      	movs	r3, r0
 8003436:	8023      	strh	r3, [r4, #0]
 8003438:	e071      	b.n	800351e <PCD_EP_ISR_Handler+0x4f2>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	001a      	movs	r2, r3
 8003440:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003442:	781b      	ldrb	r3, [r3, #0]
 8003444:	009b      	lsls	r3, r3, #2
 8003446:	18d3      	adds	r3, r2, r3
 8003448:	881b      	ldrh	r3, [r3, #0]
 800344a:	b29a      	uxth	r2, r3
 800344c:	204a      	movs	r0, #74	; 0x4a
 800344e:	183b      	adds	r3, r7, r0
 8003450:	49a0      	ldr	r1, [pc, #640]	; (80036d4 <PCD_EP_ISR_Handler+0x6a8>)
 8003452:	400a      	ands	r2, r1
 8003454:	801a      	strh	r2, [r3, #0]
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	001a      	movs	r2, r3
 800345c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800345e:	781b      	ldrb	r3, [r3, #0]
 8003460:	009b      	lsls	r3, r3, #2
 8003462:	18d3      	adds	r3, r2, r3
 8003464:	183a      	adds	r2, r7, r0
 8003466:	8812      	ldrh	r2, [r2, #0]
 8003468:	499b      	ldr	r1, [pc, #620]	; (80036d8 <PCD_EP_ISR_Handler+0x6ac>)
 800346a:	430a      	orrs	r2, r1
 800346c:	b292      	uxth	r2, r2
 800346e:	801a      	strh	r2, [r3, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	001a      	movs	r2, r3
 8003476:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003478:	781b      	ldrb	r3, [r3, #0]
 800347a:	009b      	lsls	r3, r3, #2
 800347c:	18d3      	adds	r3, r2, r3
 800347e:	881b      	ldrh	r3, [r3, #0]
 8003480:	b29b      	uxth	r3, r3
 8003482:	001a      	movs	r2, r3
 8003484:	2380      	movs	r3, #128	; 0x80
 8003486:	01db      	lsls	r3, r3, #7
 8003488:	4013      	ands	r3, r2
 800348a:	d024      	beq.n	80034d6 <PCD_EP_ISR_Handler+0x4aa>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	2250      	movs	r2, #80	; 0x50
 8003492:	5a9b      	ldrh	r3, [r3, r2]
 8003494:	b29b      	uxth	r3, r3
 8003496:	001a      	movs	r2, r3
 8003498:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800349a:	781b      	ldrb	r3, [r3, #0]
 800349c:	00db      	lsls	r3, r3, #3
 800349e:	18d2      	adds	r2, r2, r3
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	18d3      	adds	r3, r2, r3
 80034a6:	4a8d      	ldr	r2, [pc, #564]	; (80036dc <PCD_EP_ISR_Handler+0x6b0>)
 80034a8:	4694      	mov	ip, r2
 80034aa:	4463      	add	r3, ip
 80034ac:	881a      	ldrh	r2, [r3, #0]
 80034ae:	2448      	movs	r4, #72	; 0x48
 80034b0:	193b      	adds	r3, r7, r4
 80034b2:	0592      	lsls	r2, r2, #22
 80034b4:	0d92      	lsrs	r2, r2, #22
 80034b6:	801a      	strh	r2, [r3, #0]

              if (count != 0U)
 80034b8:	193b      	adds	r3, r7, r4
 80034ba:	881b      	ldrh	r3, [r3, #0]
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d02e      	beq.n	800351e <PCD_EP_ISR_Handler+0x4f2>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	6818      	ldr	r0, [r3, #0]
 80034c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80034c6:	6959      	ldr	r1, [r3, #20]
 80034c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80034ca:	891a      	ldrh	r2, [r3, #8]
 80034cc:	193b      	adds	r3, r7, r4
 80034ce:	881b      	ldrh	r3, [r3, #0]
 80034d0:	f006 f832 	bl	8009538 <USB_ReadPMA>
 80034d4:	e023      	b.n	800351e <PCD_EP_ISR_Handler+0x4f2>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	2250      	movs	r2, #80	; 0x50
 80034dc:	5a9b      	ldrh	r3, [r3, r2]
 80034de:	b29b      	uxth	r3, r3
 80034e0:	001a      	movs	r2, r3
 80034e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80034e4:	781b      	ldrb	r3, [r3, #0]
 80034e6:	00db      	lsls	r3, r3, #3
 80034e8:	18d2      	adds	r2, r2, r3
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	18d3      	adds	r3, r2, r3
 80034f0:	4a77      	ldr	r2, [pc, #476]	; (80036d0 <PCD_EP_ISR_Handler+0x6a4>)
 80034f2:	4694      	mov	ip, r2
 80034f4:	4463      	add	r3, ip
 80034f6:	881a      	ldrh	r2, [r3, #0]
 80034f8:	2448      	movs	r4, #72	; 0x48
 80034fa:	193b      	adds	r3, r7, r4
 80034fc:	0592      	lsls	r2, r2, #22
 80034fe:	0d92      	lsrs	r2, r2, #22
 8003500:	801a      	strh	r2, [r3, #0]

              if (count != 0U)
 8003502:	193b      	adds	r3, r7, r4
 8003504:	881b      	ldrh	r3, [r3, #0]
 8003506:	2b00      	cmp	r3, #0
 8003508:	d009      	beq.n	800351e <PCD_EP_ISR_Handler+0x4f2>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	6818      	ldr	r0, [r3, #0]
 800350e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003510:	6959      	ldr	r1, [r3, #20]
 8003512:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003514:	895a      	ldrh	r2, [r3, #10]
 8003516:	193b      	adds	r3, r7, r4
 8003518:	881b      	ldrh	r3, [r3, #0]
 800351a:	f006 f80d 	bl	8009538 <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 800351e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003520:	69da      	ldr	r2, [r3, #28]
 8003522:	2148      	movs	r1, #72	; 0x48
 8003524:	187b      	adds	r3, r7, r1
 8003526:	881b      	ldrh	r3, [r3, #0]
 8003528:	18d2      	adds	r2, r2, r3
 800352a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800352c:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 800352e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003530:	695a      	ldr	r2, [r3, #20]
 8003532:	187b      	adds	r3, r7, r1
 8003534:	881b      	ldrh	r3, [r3, #0]
 8003536:	18d2      	adds	r2, r2, r3
 8003538:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800353a:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 800353c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800353e:	699b      	ldr	r3, [r3, #24]
 8003540:	2b00      	cmp	r3, #0
 8003542:	d005      	beq.n	8003550 <PCD_EP_ISR_Handler+0x524>
 8003544:	187b      	adds	r3, r7, r1
 8003546:	881a      	ldrh	r2, [r3, #0]
 8003548:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800354a:	691b      	ldr	r3, [r3, #16]
 800354c:	429a      	cmp	r2, r3
 800354e:	d207      	bcs.n	8003560 <PCD_EP_ISR_Handler+0x534>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8003550:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003552:	781a      	ldrb	r2, [r3, #0]
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	0011      	movs	r1, r2
 8003558:	0018      	movs	r0, r3
 800355a:	f007 ffd2 	bl	800b502 <HAL_PCD_DataOutStageCallback>
 800355e:	e006      	b.n	800356e <PCD_EP_ISR_Handler+0x542>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003566:	0011      	movs	r1, r2
 8003568:	0018      	movs	r0, r3
 800356a:	f004 fdad 	bl	80080c8 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 800356e:	2452      	movs	r4, #82	; 0x52
 8003570:	193b      	adds	r3, r7, r4
 8003572:	881b      	ldrh	r3, [r3, #0]
 8003574:	2280      	movs	r2, #128	; 0x80
 8003576:	4013      	ands	r3, r2
 8003578:	d100      	bne.n	800357c <PCD_EP_ISR_Handler+0x550>
 800357a:	e135      	b.n	80037e8 <PCD_EP_ISR_Handler+0x7bc>
      {
        ep = &hpcd->IN_ep[epindex];
 800357c:	2055      	movs	r0, #85	; 0x55
 800357e:	183b      	adds	r3, r7, r0
 8003580:	781b      	ldrb	r3, [r3, #0]
 8003582:	1c5a      	adds	r2, r3, #1
 8003584:	0013      	movs	r3, r2
 8003586:	009b      	lsls	r3, r3, #2
 8003588:	189b      	adds	r3, r3, r2
 800358a:	00db      	lsls	r3, r3, #3
 800358c:	687a      	ldr	r2, [r7, #4]
 800358e:	18d3      	adds	r3, r2, r3
 8003590:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	001a      	movs	r2, r3
 8003598:	183b      	adds	r3, r7, r0
 800359a:	781b      	ldrb	r3, [r3, #0]
 800359c:	009b      	lsls	r3, r3, #2
 800359e:	18d3      	adds	r3, r2, r3
 80035a0:	881b      	ldrh	r3, [r3, #0]
 80035a2:	b29a      	uxth	r2, r3
 80035a4:	2542      	movs	r5, #66	; 0x42
 80035a6:	197b      	adds	r3, r7, r5
 80035a8:	494d      	ldr	r1, [pc, #308]	; (80036e0 <PCD_EP_ISR_Handler+0x6b4>)
 80035aa:	400a      	ands	r2, r1
 80035ac:	801a      	strh	r2, [r3, #0]
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	001a      	movs	r2, r3
 80035b4:	183b      	adds	r3, r7, r0
 80035b6:	781b      	ldrb	r3, [r3, #0]
 80035b8:	009b      	lsls	r3, r3, #2
 80035ba:	18d3      	adds	r3, r2, r3
 80035bc:	197a      	adds	r2, r7, r5
 80035be:	8812      	ldrh	r2, [r2, #0]
 80035c0:	4948      	ldr	r1, [pc, #288]	; (80036e4 <PCD_EP_ISR_Handler+0x6b8>)
 80035c2:	430a      	orrs	r2, r1
 80035c4:	b292      	uxth	r2, r2
 80035c6:	801a      	strh	r2, [r3, #0]

        if (ep->type != EP_TYPE_BULK)
 80035c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80035ca:	78db      	ldrb	r3, [r3, #3]
 80035cc:	2b02      	cmp	r3, #2
 80035ce:	d100      	bne.n	80035d2 <PCD_EP_ISR_Handler+0x5a6>
 80035d0:	e0ad      	b.n	800372e <PCD_EP_ISR_Handler+0x702>
        {
          ep->xfer_len = 0U;
 80035d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80035d4:	2200      	movs	r2, #0
 80035d6:	619a      	str	r2, [r3, #24]

          if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80035d8:	193b      	adds	r3, r7, r4
 80035da:	881b      	ldrh	r3, [r3, #0]
 80035dc:	2240      	movs	r2, #64	; 0x40
 80035de:	4013      	ands	r3, r2
 80035e0:	d046      	beq.n	8003670 <PCD_EP_ISR_Handler+0x644>
          {
            PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80035e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80035e4:	785b      	ldrb	r3, [r3, #1]
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d125      	bne.n	8003636 <PCD_EP_ISR_Handler+0x60a>
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	627b      	str	r3, [r7, #36]	; 0x24
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	2250      	movs	r2, #80	; 0x50
 80035f6:	5a9b      	ldrh	r3, [r3, r2]
 80035f8:	b29b      	uxth	r3, r3
 80035fa:	001a      	movs	r2, r3
 80035fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035fe:	189b      	adds	r3, r3, r2
 8003600:	627b      	str	r3, [r7, #36]	; 0x24
 8003602:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003604:	781b      	ldrb	r3, [r3, #0]
 8003606:	00da      	lsls	r2, r3, #3
 8003608:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800360a:	18d3      	adds	r3, r2, r3
 800360c:	4a33      	ldr	r2, [pc, #204]	; (80036dc <PCD_EP_ISR_Handler+0x6b0>)
 800360e:	4694      	mov	ip, r2
 8003610:	4463      	add	r3, ip
 8003612:	623b      	str	r3, [r7, #32]
 8003614:	6a3b      	ldr	r3, [r7, #32]
 8003616:	881b      	ldrh	r3, [r3, #0]
 8003618:	b29b      	uxth	r3, r3
 800361a:	4a33      	ldr	r2, [pc, #204]	; (80036e8 <PCD_EP_ISR_Handler+0x6bc>)
 800361c:	4013      	ands	r3, r2
 800361e:	b29a      	uxth	r2, r3
 8003620:	6a3b      	ldr	r3, [r7, #32]
 8003622:	801a      	strh	r2, [r3, #0]
 8003624:	6a3b      	ldr	r3, [r7, #32]
 8003626:	881b      	ldrh	r3, [r3, #0]
 8003628:	b29b      	uxth	r3, r3
 800362a:	4a2e      	ldr	r2, [pc, #184]	; (80036e4 <PCD_EP_ISR_Handler+0x6b8>)
 800362c:	4313      	orrs	r3, r2
 800362e:	b29a      	uxth	r2, r3
 8003630:	6a3b      	ldr	r3, [r7, #32]
 8003632:	801a      	strh	r2, [r3, #0]
 8003634:	e073      	b.n	800371e <PCD_EP_ISR_Handler+0x6f2>
 8003636:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003638:	785b      	ldrb	r3, [r3, #1]
 800363a:	2b01      	cmp	r3, #1
 800363c:	d16f      	bne.n	800371e <PCD_EP_ISR_Handler+0x6f2>
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	2250      	movs	r2, #80	; 0x50
 800364a:	5a9b      	ldrh	r3, [r3, r2]
 800364c:	b29b      	uxth	r3, r3
 800364e:	001a      	movs	r2, r3
 8003650:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003652:	189b      	adds	r3, r3, r2
 8003654:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003656:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003658:	781b      	ldrb	r3, [r3, #0]
 800365a:	00da      	lsls	r2, r3, #3
 800365c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800365e:	18d3      	adds	r3, r2, r3
 8003660:	4a1e      	ldr	r2, [pc, #120]	; (80036dc <PCD_EP_ISR_Handler+0x6b0>)
 8003662:	4694      	mov	ip, r2
 8003664:	4463      	add	r3, ip
 8003666:	62bb      	str	r3, [r7, #40]	; 0x28
 8003668:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800366a:	2200      	movs	r2, #0
 800366c:	801a      	strh	r2, [r3, #0]
 800366e:	e056      	b.n	800371e <PCD_EP_ISR_Handler+0x6f2>
          }
          else
          {
            PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003676:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003678:	785b      	ldrb	r3, [r3, #1]
 800367a:	2b00      	cmp	r3, #0
 800367c:	d136      	bne.n	80036ec <PCD_EP_ISR_Handler+0x6c0>
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	637b      	str	r3, [r7, #52]	; 0x34
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	2250      	movs	r2, #80	; 0x50
 800368a:	5a9b      	ldrh	r3, [r3, r2]
 800368c:	b29b      	uxth	r3, r3
 800368e:	001a      	movs	r2, r3
 8003690:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003692:	189b      	adds	r3, r3, r2
 8003694:	637b      	str	r3, [r7, #52]	; 0x34
 8003696:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003698:	781b      	ldrb	r3, [r3, #0]
 800369a:	00da      	lsls	r2, r3, #3
 800369c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800369e:	18d3      	adds	r3, r2, r3
 80036a0:	4a0b      	ldr	r2, [pc, #44]	; (80036d0 <PCD_EP_ISR_Handler+0x6a4>)
 80036a2:	4694      	mov	ip, r2
 80036a4:	4463      	add	r3, ip
 80036a6:	633b      	str	r3, [r7, #48]	; 0x30
 80036a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036aa:	881b      	ldrh	r3, [r3, #0]
 80036ac:	b29b      	uxth	r3, r3
 80036ae:	4a0e      	ldr	r2, [pc, #56]	; (80036e8 <PCD_EP_ISR_Handler+0x6bc>)
 80036b0:	4013      	ands	r3, r2
 80036b2:	b29a      	uxth	r2, r3
 80036b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036b6:	801a      	strh	r2, [r3, #0]
 80036b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036ba:	881b      	ldrh	r3, [r3, #0]
 80036bc:	b29b      	uxth	r3, r3
 80036be:	4a09      	ldr	r2, [pc, #36]	; (80036e4 <PCD_EP_ISR_Handler+0x6b8>)
 80036c0:	4313      	orrs	r3, r2
 80036c2:	b29a      	uxth	r2, r3
 80036c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036c6:	801a      	strh	r2, [r3, #0]
 80036c8:	e029      	b.n	800371e <PCD_EP_ISR_Handler+0x6f2>
 80036ca:	46c0      	nop			; (mov r8, r8)
 80036cc:	00000f8f 	.word	0x00000f8f
 80036d0:	00000406 	.word	0x00000406
 80036d4:	ffff8f8f 	.word	0xffff8f8f
 80036d8:	ffff80c0 	.word	0xffff80c0
 80036dc:	00000402 	.word	0x00000402
 80036e0:	ffff8f0f 	.word	0xffff8f0f
 80036e4:	ffff8000 	.word	0xffff8000
 80036e8:	ffff83ff 	.word	0xffff83ff
 80036ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80036ee:	785b      	ldrb	r3, [r3, #1]
 80036f0:	2b01      	cmp	r3, #1
 80036f2:	d114      	bne.n	800371e <PCD_EP_ISR_Handler+0x6f2>
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	2250      	movs	r2, #80	; 0x50
 80036fa:	5a9b      	ldrh	r3, [r3, r2]
 80036fc:	b29b      	uxth	r3, r3
 80036fe:	001a      	movs	r2, r3
 8003700:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003702:	189b      	adds	r3, r3, r2
 8003704:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003706:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003708:	781b      	ldrb	r3, [r3, #0]
 800370a:	00da      	lsls	r2, r3, #3
 800370c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800370e:	18d3      	adds	r3, r2, r3
 8003710:	4a3d      	ldr	r2, [pc, #244]	; (8003808 <PCD_EP_ISR_Handler+0x7dc>)
 8003712:	4694      	mov	ip, r2
 8003714:	4463      	add	r3, ip
 8003716:	63bb      	str	r3, [r7, #56]	; 0x38
 8003718:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800371a:	2200      	movs	r2, #0
 800371c:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800371e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003720:	781a      	ldrb	r2, [r3, #0]
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	0011      	movs	r1, r2
 8003726:	0018      	movs	r0, r3
 8003728:	f007 ff0c 	bl	800b544 <HAL_PCD_DataInStageCallback>
 800372c:	e05c      	b.n	80037e8 <PCD_EP_ISR_Handler+0x7bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        /* Manage Bulk Single Buffer Transaction */
        if ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U))
 800372e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003730:	78db      	ldrb	r3, [r3, #3]
 8003732:	2b02      	cmp	r3, #2
 8003734:	d150      	bne.n	80037d8 <PCD_EP_ISR_Handler+0x7ac>
 8003736:	2352      	movs	r3, #82	; 0x52
 8003738:	18fb      	adds	r3, r7, r3
 800373a:	881a      	ldrh	r2, [r3, #0]
 800373c:	2380      	movs	r3, #128	; 0x80
 800373e:	005b      	lsls	r3, r3, #1
 8003740:	4013      	ands	r3, r2
 8003742:	d149      	bne.n	80037d8 <PCD_EP_ISR_Handler+0x7ac>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	2250      	movs	r2, #80	; 0x50
 800374a:	5a9b      	ldrh	r3, [r3, r2]
 800374c:	b29b      	uxth	r3, r3
 800374e:	001a      	movs	r2, r3
 8003750:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003752:	781b      	ldrb	r3, [r3, #0]
 8003754:	00db      	lsls	r3, r3, #3
 8003756:	18d2      	adds	r2, r2, r3
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	18d3      	adds	r3, r2, r3
 800375e:	4a2b      	ldr	r2, [pc, #172]	; (800380c <PCD_EP_ISR_Handler+0x7e0>)
 8003760:	4694      	mov	ip, r2
 8003762:	4463      	add	r3, ip
 8003764:	881a      	ldrh	r2, [r3, #0]
 8003766:	2140      	movs	r1, #64	; 0x40
 8003768:	187b      	adds	r3, r7, r1
 800376a:	0592      	lsls	r2, r2, #22
 800376c:	0d92      	lsrs	r2, r2, #22
 800376e:	801a      	strh	r2, [r3, #0]

          if (ep->xfer_len > TxByteNbre)
 8003770:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003772:	699a      	ldr	r2, [r3, #24]
 8003774:	187b      	adds	r3, r7, r1
 8003776:	881b      	ldrh	r3, [r3, #0]
 8003778:	429a      	cmp	r2, r3
 800377a:	d907      	bls.n	800378c <PCD_EP_ISR_Handler+0x760>
          {
            ep->xfer_len -= TxByteNbre;
 800377c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800377e:	699a      	ldr	r2, [r3, #24]
 8003780:	187b      	adds	r3, r7, r1
 8003782:	881b      	ldrh	r3, [r3, #0]
 8003784:	1ad2      	subs	r2, r2, r3
 8003786:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003788:	619a      	str	r2, [r3, #24]
 800378a:	e002      	b.n	8003792 <PCD_EP_ISR_Handler+0x766>
          }
          else
          {
            ep->xfer_len = 0U;
 800378c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800378e:	2200      	movs	r2, #0
 8003790:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 8003792:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003794:	699b      	ldr	r3, [r3, #24]
 8003796:	2b00      	cmp	r3, #0
 8003798:	d107      	bne.n	80037aa <PCD_EP_ISR_Handler+0x77e>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800379a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800379c:	781a      	ldrb	r2, [r3, #0]
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	0011      	movs	r1, r2
 80037a2:	0018      	movs	r0, r3
 80037a4:	f007 fece 	bl	800b544 <HAL_PCD_DataInStageCallback>
 80037a8:	e01e      	b.n	80037e8 <PCD_EP_ISR_Handler+0x7bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 80037aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80037ac:	695a      	ldr	r2, [r3, #20]
 80037ae:	2140      	movs	r1, #64	; 0x40
 80037b0:	187b      	adds	r3, r7, r1
 80037b2:	881b      	ldrh	r3, [r3, #0]
 80037b4:	18d2      	adds	r2, r2, r3
 80037b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80037b8:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 80037ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80037bc:	69da      	ldr	r2, [r3, #28]
 80037be:	187b      	adds	r3, r7, r1
 80037c0:	881b      	ldrh	r3, [r3, #0]
 80037c2:	18d2      	adds	r2, r2, r3
 80037c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80037c6:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80037ce:	0011      	movs	r1, r2
 80037d0:	0018      	movs	r0, r3
 80037d2:	f004 fc79 	bl	80080c8 <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 80037d6:	e007      	b.n	80037e8 <PCD_EP_ISR_Handler+0x7bc>
          }
        }
        /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 80037d8:	2352      	movs	r3, #82	; 0x52
 80037da:	18fb      	adds	r3, r7, r3
 80037dc:	881a      	ldrh	r2, [r3, #0]
 80037de:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	0018      	movs	r0, r3
 80037e4:	f000 f930 	bl	8003a48 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	2244      	movs	r2, #68	; 0x44
 80037ee:	5a9b      	ldrh	r3, [r3, r2]
 80037f0:	b29b      	uxth	r3, r3
 80037f2:	b21b      	sxth	r3, r3
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	da01      	bge.n	80037fc <PCD_EP_ISR_Handler+0x7d0>
 80037f8:	f7ff fc1e 	bl	8003038 <PCD_EP_ISR_Handler+0xc>
        }
      }
    }
  }

  return HAL_OK;
 80037fc:	2300      	movs	r3, #0
}
 80037fe:	0018      	movs	r0, r3
 8003800:	46bd      	mov	sp, r7
 8003802:	b016      	add	sp, #88	; 0x58
 8003804:	bdb0      	pop	{r4, r5, r7, pc}
 8003806:	46c0      	nop			; (mov r8, r8)
 8003808:	00000406 	.word	0x00000406
 800380c:	00000402 	.word	0x00000402

08003810 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8003810:	b590      	push	{r4, r7, lr}
 8003812:	b089      	sub	sp, #36	; 0x24
 8003814:	af00      	add	r7, sp, #0
 8003816:	60f8      	str	r0, [r7, #12]
 8003818:	60b9      	str	r1, [r7, #8]
 800381a:	1dbb      	adds	r3, r7, #6
 800381c:	801a      	strh	r2, [r3, #0]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800381e:	1dbb      	adds	r3, r7, #6
 8003820:	881a      	ldrh	r2, [r3, #0]
 8003822:	2380      	movs	r3, #128	; 0x80
 8003824:	01db      	lsls	r3, r3, #7
 8003826:	4013      	ands	r3, r2
 8003828:	d100      	bne.n	800382c <HAL_PCD_EP_DB_Receive+0x1c>
 800382a:	e07d      	b.n	8003928 <HAL_PCD_EP_DB_Receive+0x118>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	2250      	movs	r2, #80	; 0x50
 8003832:	5a9b      	ldrh	r3, [r3, r2]
 8003834:	b29b      	uxth	r3, r3
 8003836:	001a      	movs	r2, r3
 8003838:	68bb      	ldr	r3, [r7, #8]
 800383a:	781b      	ldrb	r3, [r3, #0]
 800383c:	00db      	lsls	r3, r3, #3
 800383e:	18d2      	adds	r2, r2, r3
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	18d3      	adds	r3, r2, r3
 8003846:	4a7a      	ldr	r2, [pc, #488]	; (8003a30 <HAL_PCD_EP_DB_Receive+0x220>)
 8003848:	4694      	mov	ip, r2
 800384a:	4463      	add	r3, ip
 800384c:	881a      	ldrh	r2, [r3, #0]
 800384e:	211a      	movs	r1, #26
 8003850:	187b      	adds	r3, r7, r1
 8003852:	0592      	lsls	r2, r2, #22
 8003854:	0d92      	lsrs	r2, r2, #22
 8003856:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= count)
 8003858:	68bb      	ldr	r3, [r7, #8]
 800385a:	699a      	ldr	r2, [r3, #24]
 800385c:	187b      	adds	r3, r7, r1
 800385e:	881b      	ldrh	r3, [r3, #0]
 8003860:	429a      	cmp	r2, r3
 8003862:	d307      	bcc.n	8003874 <HAL_PCD_EP_DB_Receive+0x64>
    {
      ep->xfer_len -= count;
 8003864:	68bb      	ldr	r3, [r7, #8]
 8003866:	699a      	ldr	r2, [r3, #24]
 8003868:	187b      	adds	r3, r7, r1
 800386a:	881b      	ldrh	r3, [r3, #0]
 800386c:	1ad2      	subs	r2, r2, r3
 800386e:	68bb      	ldr	r3, [r7, #8]
 8003870:	619a      	str	r2, [r3, #24]
 8003872:	e002      	b.n	800387a <HAL_PCD_EP_DB_Receive+0x6a>
    }
    else
    {
      ep->xfer_len = 0U;
 8003874:	68bb      	ldr	r3, [r7, #8]
 8003876:	2200      	movs	r2, #0
 8003878:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800387a:	68bb      	ldr	r3, [r7, #8]
 800387c:	699b      	ldr	r3, [r3, #24]
 800387e:	2b00      	cmp	r3, #0
 8003880:	d121      	bne.n	80038c6 <HAL_PCD_EP_DB_Receive+0xb6>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	001a      	movs	r2, r3
 8003888:	68bb      	ldr	r3, [r7, #8]
 800388a:	781b      	ldrb	r3, [r3, #0]
 800388c:	009b      	lsls	r3, r3, #2
 800388e:	18d3      	adds	r3, r2, r3
 8003890:	881b      	ldrh	r3, [r3, #0]
 8003892:	b29a      	uxth	r2, r3
 8003894:	2018      	movs	r0, #24
 8003896:	183b      	adds	r3, r7, r0
 8003898:	4966      	ldr	r1, [pc, #408]	; (8003a34 <HAL_PCD_EP_DB_Receive+0x224>)
 800389a:	400a      	ands	r2, r1
 800389c:	801a      	strh	r2, [r3, #0]
 800389e:	183b      	adds	r3, r7, r0
 80038a0:	183a      	adds	r2, r7, r0
 80038a2:	8812      	ldrh	r2, [r2, #0]
 80038a4:	2180      	movs	r1, #128	; 0x80
 80038a6:	0189      	lsls	r1, r1, #6
 80038a8:	404a      	eors	r2, r1
 80038aa:	801a      	strh	r2, [r3, #0]
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	001a      	movs	r2, r3
 80038b2:	68bb      	ldr	r3, [r7, #8]
 80038b4:	781b      	ldrb	r3, [r3, #0]
 80038b6:	009b      	lsls	r3, r3, #2
 80038b8:	18d3      	adds	r3, r2, r3
 80038ba:	183a      	adds	r2, r7, r0
 80038bc:	8812      	ldrh	r2, [r2, #0]
 80038be:	495e      	ldr	r1, [pc, #376]	; (8003a38 <HAL_PCD_EP_DB_Receive+0x228>)
 80038c0:	430a      	orrs	r2, r1
 80038c2:	b292      	uxth	r2, r2
 80038c4:	801a      	strh	r2, [r3, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80038c6:	1dbb      	adds	r3, r7, #6
 80038c8:	881b      	ldrh	r3, [r3, #0]
 80038ca:	2240      	movs	r2, #64	; 0x40
 80038cc:	4013      	ands	r3, r2
 80038ce:	d01a      	beq.n	8003906 <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	001a      	movs	r2, r3
 80038d6:	68bb      	ldr	r3, [r7, #8]
 80038d8:	781b      	ldrb	r3, [r3, #0]
 80038da:	009b      	lsls	r3, r3, #2
 80038dc:	18d3      	adds	r3, r2, r3
 80038de:	881b      	ldrh	r3, [r3, #0]
 80038e0:	b29a      	uxth	r2, r3
 80038e2:	2016      	movs	r0, #22
 80038e4:	183b      	adds	r3, r7, r0
 80038e6:	4955      	ldr	r1, [pc, #340]	; (8003a3c <HAL_PCD_EP_DB_Receive+0x22c>)
 80038e8:	400a      	ands	r2, r1
 80038ea:	801a      	strh	r2, [r3, #0]
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	001a      	movs	r2, r3
 80038f2:	68bb      	ldr	r3, [r7, #8]
 80038f4:	781b      	ldrb	r3, [r3, #0]
 80038f6:	009b      	lsls	r3, r3, #2
 80038f8:	18d3      	adds	r3, r2, r3
 80038fa:	183a      	adds	r2, r7, r0
 80038fc:	8812      	ldrh	r2, [r2, #0]
 80038fe:	4950      	ldr	r1, [pc, #320]	; (8003a40 <HAL_PCD_EP_DB_Receive+0x230>)
 8003900:	430a      	orrs	r2, r1
 8003902:	b292      	uxth	r2, r2
 8003904:	801a      	strh	r2, [r3, #0]
    }

    if (count != 0U)
 8003906:	241a      	movs	r4, #26
 8003908:	193b      	adds	r3, r7, r4
 800390a:	881b      	ldrh	r3, [r3, #0]
 800390c:	2b00      	cmp	r3, #0
 800390e:	d100      	bne.n	8003912 <HAL_PCD_EP_DB_Receive+0x102>
 8003910:	e086      	b.n	8003a20 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	6818      	ldr	r0, [r3, #0]
 8003916:	68bb      	ldr	r3, [r7, #8]
 8003918:	6959      	ldr	r1, [r3, #20]
 800391a:	68bb      	ldr	r3, [r7, #8]
 800391c:	891a      	ldrh	r2, [r3, #8]
 800391e:	193b      	adds	r3, r7, r4
 8003920:	881b      	ldrh	r3, [r3, #0]
 8003922:	f005 fe09 	bl	8009538 <USB_ReadPMA>
 8003926:	e07b      	b.n	8003a20 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	2250      	movs	r2, #80	; 0x50
 800392e:	5a9b      	ldrh	r3, [r3, r2]
 8003930:	b29b      	uxth	r3, r3
 8003932:	001a      	movs	r2, r3
 8003934:	68bb      	ldr	r3, [r7, #8]
 8003936:	781b      	ldrb	r3, [r3, #0]
 8003938:	00db      	lsls	r3, r3, #3
 800393a:	18d2      	adds	r2, r2, r3
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	18d3      	adds	r3, r2, r3
 8003942:	4a40      	ldr	r2, [pc, #256]	; (8003a44 <HAL_PCD_EP_DB_Receive+0x234>)
 8003944:	4694      	mov	ip, r2
 8003946:	4463      	add	r3, ip
 8003948:	881a      	ldrh	r2, [r3, #0]
 800394a:	211a      	movs	r1, #26
 800394c:	187b      	adds	r3, r7, r1
 800394e:	0592      	lsls	r2, r2, #22
 8003950:	0d92      	lsrs	r2, r2, #22
 8003952:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= count)
 8003954:	68bb      	ldr	r3, [r7, #8]
 8003956:	699a      	ldr	r2, [r3, #24]
 8003958:	187b      	adds	r3, r7, r1
 800395a:	881b      	ldrh	r3, [r3, #0]
 800395c:	429a      	cmp	r2, r3
 800395e:	d307      	bcc.n	8003970 <HAL_PCD_EP_DB_Receive+0x160>
    {
      ep->xfer_len -= count;
 8003960:	68bb      	ldr	r3, [r7, #8]
 8003962:	699a      	ldr	r2, [r3, #24]
 8003964:	187b      	adds	r3, r7, r1
 8003966:	881b      	ldrh	r3, [r3, #0]
 8003968:	1ad2      	subs	r2, r2, r3
 800396a:	68bb      	ldr	r3, [r7, #8]
 800396c:	619a      	str	r2, [r3, #24]
 800396e:	e002      	b.n	8003976 <HAL_PCD_EP_DB_Receive+0x166>
    }
    else
    {
      ep->xfer_len = 0U;
 8003970:	68bb      	ldr	r3, [r7, #8]
 8003972:	2200      	movs	r2, #0
 8003974:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8003976:	68bb      	ldr	r3, [r7, #8]
 8003978:	699b      	ldr	r3, [r3, #24]
 800397a:	2b00      	cmp	r3, #0
 800397c:	d121      	bne.n	80039c2 <HAL_PCD_EP_DB_Receive+0x1b2>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	001a      	movs	r2, r3
 8003984:	68bb      	ldr	r3, [r7, #8]
 8003986:	781b      	ldrb	r3, [r3, #0]
 8003988:	009b      	lsls	r3, r3, #2
 800398a:	18d3      	adds	r3, r2, r3
 800398c:	881b      	ldrh	r3, [r3, #0]
 800398e:	b29a      	uxth	r2, r3
 8003990:	201e      	movs	r0, #30
 8003992:	183b      	adds	r3, r7, r0
 8003994:	4927      	ldr	r1, [pc, #156]	; (8003a34 <HAL_PCD_EP_DB_Receive+0x224>)
 8003996:	400a      	ands	r2, r1
 8003998:	801a      	strh	r2, [r3, #0]
 800399a:	183b      	adds	r3, r7, r0
 800399c:	183a      	adds	r2, r7, r0
 800399e:	8812      	ldrh	r2, [r2, #0]
 80039a0:	2180      	movs	r1, #128	; 0x80
 80039a2:	0189      	lsls	r1, r1, #6
 80039a4:	404a      	eors	r2, r1
 80039a6:	801a      	strh	r2, [r3, #0]
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	001a      	movs	r2, r3
 80039ae:	68bb      	ldr	r3, [r7, #8]
 80039b0:	781b      	ldrb	r3, [r3, #0]
 80039b2:	009b      	lsls	r3, r3, #2
 80039b4:	18d3      	adds	r3, r2, r3
 80039b6:	183a      	adds	r2, r7, r0
 80039b8:	8812      	ldrh	r2, [r2, #0]
 80039ba:	491f      	ldr	r1, [pc, #124]	; (8003a38 <HAL_PCD_EP_DB_Receive+0x228>)
 80039bc:	430a      	orrs	r2, r1
 80039be:	b292      	uxth	r2, r2
 80039c0:	801a      	strh	r2, [r3, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 80039c2:	1dbb      	adds	r3, r7, #6
 80039c4:	881b      	ldrh	r3, [r3, #0]
 80039c6:	2240      	movs	r2, #64	; 0x40
 80039c8:	4013      	ands	r3, r2
 80039ca:	d11a      	bne.n	8003a02 <HAL_PCD_EP_DB_Receive+0x1f2>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	001a      	movs	r2, r3
 80039d2:	68bb      	ldr	r3, [r7, #8]
 80039d4:	781b      	ldrb	r3, [r3, #0]
 80039d6:	009b      	lsls	r3, r3, #2
 80039d8:	18d3      	adds	r3, r2, r3
 80039da:	881b      	ldrh	r3, [r3, #0]
 80039dc:	b29a      	uxth	r2, r3
 80039de:	201c      	movs	r0, #28
 80039e0:	183b      	adds	r3, r7, r0
 80039e2:	4916      	ldr	r1, [pc, #88]	; (8003a3c <HAL_PCD_EP_DB_Receive+0x22c>)
 80039e4:	400a      	ands	r2, r1
 80039e6:	801a      	strh	r2, [r3, #0]
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	001a      	movs	r2, r3
 80039ee:	68bb      	ldr	r3, [r7, #8]
 80039f0:	781b      	ldrb	r3, [r3, #0]
 80039f2:	009b      	lsls	r3, r3, #2
 80039f4:	18d3      	adds	r3, r2, r3
 80039f6:	183a      	adds	r2, r7, r0
 80039f8:	8812      	ldrh	r2, [r2, #0]
 80039fa:	4911      	ldr	r1, [pc, #68]	; (8003a40 <HAL_PCD_EP_DB_Receive+0x230>)
 80039fc:	430a      	orrs	r2, r1
 80039fe:	b292      	uxth	r2, r2
 8003a00:	801a      	strh	r2, [r3, #0]
    }

    if (count != 0U)
 8003a02:	241a      	movs	r4, #26
 8003a04:	193b      	adds	r3, r7, r4
 8003a06:	881b      	ldrh	r3, [r3, #0]
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d009      	beq.n	8003a20 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	6818      	ldr	r0, [r3, #0]
 8003a10:	68bb      	ldr	r3, [r7, #8]
 8003a12:	6959      	ldr	r1, [r3, #20]
 8003a14:	68bb      	ldr	r3, [r7, #8]
 8003a16:	895a      	ldrh	r2, [r3, #10]
 8003a18:	193b      	adds	r3, r7, r4
 8003a1a:	881b      	ldrh	r3, [r3, #0]
 8003a1c:	f005 fd8c 	bl	8009538 <USB_ReadPMA>
    }
  }

  return count;
 8003a20:	231a      	movs	r3, #26
 8003a22:	18fb      	adds	r3, r7, r3
 8003a24:	881b      	ldrh	r3, [r3, #0]
}
 8003a26:	0018      	movs	r0, r3
 8003a28:	46bd      	mov	sp, r7
 8003a2a:	b009      	add	sp, #36	; 0x24
 8003a2c:	bd90      	pop	{r4, r7, pc}
 8003a2e:	46c0      	nop			; (mov r8, r8)
 8003a30:	00000402 	.word	0x00000402
 8003a34:	ffffbf8f 	.word	0xffffbf8f
 8003a38:	ffff8080 	.word	0xffff8080
 8003a3c:	ffff8f8f 	.word	0xffff8f8f
 8003a40:	ffff80c0 	.word	0xffff80c0
 8003a44:	00000406 	.word	0x00000406

08003a48 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8003a48:	b580      	push	{r7, lr}
 8003a4a:	b0a2      	sub	sp, #136	; 0x88
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	60f8      	str	r0, [r7, #12]
 8003a50:	60b9      	str	r1, [r7, #8]
 8003a52:	1dbb      	adds	r3, r7, #6
 8003a54:	801a      	strh	r2, [r3, #0]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003a56:	1dbb      	adds	r3, r7, #6
 8003a58:	881b      	ldrh	r3, [r3, #0]
 8003a5a:	2240      	movs	r2, #64	; 0x40
 8003a5c:	4013      	ands	r3, r2
 8003a5e:	d100      	bne.n	8003a62 <HAL_PCD_EP_DB_Transmit+0x1a>
 8003a60:	e1c8      	b.n	8003df4 <HAL_PCD_EP_DB_Transmit+0x3ac>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	2250      	movs	r2, #80	; 0x50
 8003a68:	5a9b      	ldrh	r3, [r3, r2]
 8003a6a:	b29b      	uxth	r3, r3
 8003a6c:	001a      	movs	r2, r3
 8003a6e:	68bb      	ldr	r3, [r7, #8]
 8003a70:	781b      	ldrb	r3, [r3, #0]
 8003a72:	00db      	lsls	r3, r3, #3
 8003a74:	18d2      	adds	r2, r2, r3
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	18d3      	adds	r3, r2, r3
 8003a7c:	4ad7      	ldr	r2, [pc, #860]	; (8003ddc <HAL_PCD_EP_DB_Transmit+0x394>)
 8003a7e:	4694      	mov	ip, r2
 8003a80:	4463      	add	r3, ip
 8003a82:	881a      	ldrh	r2, [r3, #0]
 8003a84:	214e      	movs	r1, #78	; 0x4e
 8003a86:	187b      	adds	r3, r7, r1
 8003a88:	0592      	lsls	r2, r2, #22
 8003a8a:	0d92      	lsrs	r2, r2, #22
 8003a8c:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len > TxByteNbre)
 8003a8e:	68bb      	ldr	r3, [r7, #8]
 8003a90:	699a      	ldr	r2, [r3, #24]
 8003a92:	187b      	adds	r3, r7, r1
 8003a94:	881b      	ldrh	r3, [r3, #0]
 8003a96:	429a      	cmp	r2, r3
 8003a98:	d907      	bls.n	8003aaa <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxByteNbre;
 8003a9a:	68bb      	ldr	r3, [r7, #8]
 8003a9c:	699a      	ldr	r2, [r3, #24]
 8003a9e:	187b      	adds	r3, r7, r1
 8003aa0:	881b      	ldrh	r3, [r3, #0]
 8003aa2:	1ad2      	subs	r2, r2, r3
 8003aa4:	68bb      	ldr	r3, [r7, #8]
 8003aa6:	619a      	str	r2, [r3, #24]
 8003aa8:	e002      	b.n	8003ab0 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8003aaa:	68bb      	ldr	r3, [r7, #8]
 8003aac:	2200      	movs	r2, #0
 8003aae:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8003ab0:	68bb      	ldr	r3, [r7, #8]
 8003ab2:	699b      	ldr	r3, [r3, #24]
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d000      	beq.n	8003aba <HAL_PCD_EP_DB_Transmit+0x72>
 8003ab8:	e0b5      	b.n	8003c26 <HAL_PCD_EP_DB_Transmit+0x1de>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003aba:	68bb      	ldr	r3, [r7, #8]
 8003abc:	785b      	ldrb	r3, [r3, #1]
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d125      	bne.n	8003b0e <HAL_PCD_EP_DB_Transmit+0xc6>
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	62bb      	str	r3, [r7, #40]	; 0x28
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	2250      	movs	r2, #80	; 0x50
 8003ace:	5a9b      	ldrh	r3, [r3, r2]
 8003ad0:	b29b      	uxth	r3, r3
 8003ad2:	001a      	movs	r2, r3
 8003ad4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ad6:	189b      	adds	r3, r3, r2
 8003ad8:	62bb      	str	r3, [r7, #40]	; 0x28
 8003ada:	68bb      	ldr	r3, [r7, #8]
 8003adc:	781b      	ldrb	r3, [r3, #0]
 8003ade:	00da      	lsls	r2, r3, #3
 8003ae0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ae2:	18d3      	adds	r3, r2, r3
 8003ae4:	4abd      	ldr	r2, [pc, #756]	; (8003ddc <HAL_PCD_EP_DB_Transmit+0x394>)
 8003ae6:	4694      	mov	ip, r2
 8003ae8:	4463      	add	r3, ip
 8003aea:	627b      	str	r3, [r7, #36]	; 0x24
 8003aec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aee:	881b      	ldrh	r3, [r3, #0]
 8003af0:	b29b      	uxth	r3, r3
 8003af2:	4abb      	ldr	r2, [pc, #748]	; (8003de0 <HAL_PCD_EP_DB_Transmit+0x398>)
 8003af4:	4013      	ands	r3, r2
 8003af6:	b29a      	uxth	r2, r3
 8003af8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003afa:	801a      	strh	r2, [r3, #0]
 8003afc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003afe:	881b      	ldrh	r3, [r3, #0]
 8003b00:	b29b      	uxth	r3, r3
 8003b02:	4ab8      	ldr	r2, [pc, #736]	; (8003de4 <HAL_PCD_EP_DB_Transmit+0x39c>)
 8003b04:	4313      	orrs	r3, r2
 8003b06:	b29a      	uxth	r2, r3
 8003b08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b0a:	801a      	strh	r2, [r3, #0]
 8003b0c:	e01b      	b.n	8003b46 <HAL_PCD_EP_DB_Transmit+0xfe>
 8003b0e:	68bb      	ldr	r3, [r7, #8]
 8003b10:	785b      	ldrb	r3, [r3, #1]
 8003b12:	2b01      	cmp	r3, #1
 8003b14:	d117      	bne.n	8003b46 <HAL_PCD_EP_DB_Transmit+0xfe>
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	633b      	str	r3, [r7, #48]	; 0x30
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	2250      	movs	r2, #80	; 0x50
 8003b22:	5a9b      	ldrh	r3, [r3, r2]
 8003b24:	b29b      	uxth	r3, r3
 8003b26:	001a      	movs	r2, r3
 8003b28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b2a:	189b      	adds	r3, r3, r2
 8003b2c:	633b      	str	r3, [r7, #48]	; 0x30
 8003b2e:	68bb      	ldr	r3, [r7, #8]
 8003b30:	781b      	ldrb	r3, [r3, #0]
 8003b32:	00da      	lsls	r2, r3, #3
 8003b34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b36:	18d3      	adds	r3, r2, r3
 8003b38:	4aa8      	ldr	r2, [pc, #672]	; (8003ddc <HAL_PCD_EP_DB_Transmit+0x394>)
 8003b3a:	4694      	mov	ip, r2
 8003b3c:	4463      	add	r3, ip
 8003b3e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003b40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b42:	2200      	movs	r2, #0
 8003b44:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	623b      	str	r3, [r7, #32]
 8003b4c:	68bb      	ldr	r3, [r7, #8]
 8003b4e:	785b      	ldrb	r3, [r3, #1]
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d125      	bne.n	8003ba0 <HAL_PCD_EP_DB_Transmit+0x158>
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	61bb      	str	r3, [r7, #24]
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	2250      	movs	r2, #80	; 0x50
 8003b60:	5a9b      	ldrh	r3, [r3, r2]
 8003b62:	b29b      	uxth	r3, r3
 8003b64:	001a      	movs	r2, r3
 8003b66:	69bb      	ldr	r3, [r7, #24]
 8003b68:	189b      	adds	r3, r3, r2
 8003b6a:	61bb      	str	r3, [r7, #24]
 8003b6c:	68bb      	ldr	r3, [r7, #8]
 8003b6e:	781b      	ldrb	r3, [r3, #0]
 8003b70:	00da      	lsls	r2, r3, #3
 8003b72:	69bb      	ldr	r3, [r7, #24]
 8003b74:	18d3      	adds	r3, r2, r3
 8003b76:	4a9c      	ldr	r2, [pc, #624]	; (8003de8 <HAL_PCD_EP_DB_Transmit+0x3a0>)
 8003b78:	4694      	mov	ip, r2
 8003b7a:	4463      	add	r3, ip
 8003b7c:	617b      	str	r3, [r7, #20]
 8003b7e:	697b      	ldr	r3, [r7, #20]
 8003b80:	881b      	ldrh	r3, [r3, #0]
 8003b82:	b29b      	uxth	r3, r3
 8003b84:	4a96      	ldr	r2, [pc, #600]	; (8003de0 <HAL_PCD_EP_DB_Transmit+0x398>)
 8003b86:	4013      	ands	r3, r2
 8003b88:	b29a      	uxth	r2, r3
 8003b8a:	697b      	ldr	r3, [r7, #20]
 8003b8c:	801a      	strh	r2, [r3, #0]
 8003b8e:	697b      	ldr	r3, [r7, #20]
 8003b90:	881b      	ldrh	r3, [r3, #0]
 8003b92:	b29b      	uxth	r3, r3
 8003b94:	4a93      	ldr	r2, [pc, #588]	; (8003de4 <HAL_PCD_EP_DB_Transmit+0x39c>)
 8003b96:	4313      	orrs	r3, r2
 8003b98:	b29a      	uxth	r2, r3
 8003b9a:	697b      	ldr	r3, [r7, #20]
 8003b9c:	801a      	strh	r2, [r3, #0]
 8003b9e:	e018      	b.n	8003bd2 <HAL_PCD_EP_DB_Transmit+0x18a>
 8003ba0:	68bb      	ldr	r3, [r7, #8]
 8003ba2:	785b      	ldrb	r3, [r3, #1]
 8003ba4:	2b01      	cmp	r3, #1
 8003ba6:	d114      	bne.n	8003bd2 <HAL_PCD_EP_DB_Transmit+0x18a>
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	2250      	movs	r2, #80	; 0x50
 8003bae:	5a9b      	ldrh	r3, [r3, r2]
 8003bb0:	b29b      	uxth	r3, r3
 8003bb2:	001a      	movs	r2, r3
 8003bb4:	6a3b      	ldr	r3, [r7, #32]
 8003bb6:	189b      	adds	r3, r3, r2
 8003bb8:	623b      	str	r3, [r7, #32]
 8003bba:	68bb      	ldr	r3, [r7, #8]
 8003bbc:	781b      	ldrb	r3, [r3, #0]
 8003bbe:	00da      	lsls	r2, r3, #3
 8003bc0:	6a3b      	ldr	r3, [r7, #32]
 8003bc2:	18d3      	adds	r3, r2, r3
 8003bc4:	4a88      	ldr	r2, [pc, #544]	; (8003de8 <HAL_PCD_EP_DB_Transmit+0x3a0>)
 8003bc6:	4694      	mov	ip, r2
 8003bc8:	4463      	add	r3, ip
 8003bca:	61fb      	str	r3, [r7, #28]
 8003bcc:	69fb      	ldr	r3, [r7, #28]
 8003bce:	2200      	movs	r2, #0
 8003bd0:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003bd2:	68bb      	ldr	r3, [r7, #8]
 8003bd4:	781a      	ldrb	r2, [r3, #0]
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	0011      	movs	r1, r2
 8003bda:	0018      	movs	r0, r3
 8003bdc:	f007 fcb2 	bl	800b544 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003be0:	1dbb      	adds	r3, r7, #6
 8003be2:	881a      	ldrh	r2, [r3, #0]
 8003be4:	2380      	movs	r3, #128	; 0x80
 8003be6:	01db      	lsls	r3, r3, #7
 8003be8:	4013      	ands	r3, r2
 8003bea:	d100      	bne.n	8003bee <HAL_PCD_EP_DB_Transmit+0x1a6>
 8003bec:	e2d4      	b.n	8004198 <HAL_PCD_EP_DB_Transmit+0x750>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	001a      	movs	r2, r3
 8003bf4:	68bb      	ldr	r3, [r7, #8]
 8003bf6:	781b      	ldrb	r3, [r3, #0]
 8003bf8:	009b      	lsls	r3, r3, #2
 8003bfa:	18d3      	adds	r3, r2, r3
 8003bfc:	881b      	ldrh	r3, [r3, #0]
 8003bfe:	b29a      	uxth	r2, r3
 8003c00:	2012      	movs	r0, #18
 8003c02:	183b      	adds	r3, r7, r0
 8003c04:	4979      	ldr	r1, [pc, #484]	; (8003dec <HAL_PCD_EP_DB_Transmit+0x3a4>)
 8003c06:	400a      	ands	r2, r1
 8003c08:	801a      	strh	r2, [r3, #0]
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	001a      	movs	r2, r3
 8003c10:	68bb      	ldr	r3, [r7, #8]
 8003c12:	781b      	ldrb	r3, [r3, #0]
 8003c14:	009b      	lsls	r3, r3, #2
 8003c16:	18d3      	adds	r3, r2, r3
 8003c18:	183a      	adds	r2, r7, r0
 8003c1a:	8812      	ldrh	r2, [r2, #0]
 8003c1c:	4974      	ldr	r1, [pc, #464]	; (8003df0 <HAL_PCD_EP_DB_Transmit+0x3a8>)
 8003c1e:	430a      	orrs	r2, r1
 8003c20:	b292      	uxth	r2, r2
 8003c22:	801a      	strh	r2, [r3, #0]
 8003c24:	e2b8      	b.n	8004198 <HAL_PCD_EP_DB_Transmit+0x750>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003c26:	1dbb      	adds	r3, r7, #6
 8003c28:	881a      	ldrh	r2, [r3, #0]
 8003c2a:	2380      	movs	r3, #128	; 0x80
 8003c2c:	01db      	lsls	r3, r3, #7
 8003c2e:	4013      	ands	r3, r2
 8003c30:	d01a      	beq.n	8003c68 <HAL_PCD_EP_DB_Transmit+0x220>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	001a      	movs	r2, r3
 8003c38:	68bb      	ldr	r3, [r7, #8]
 8003c3a:	781b      	ldrb	r3, [r3, #0]
 8003c3c:	009b      	lsls	r3, r3, #2
 8003c3e:	18d3      	adds	r3, r2, r3
 8003c40:	881b      	ldrh	r3, [r3, #0]
 8003c42:	b29a      	uxth	r2, r3
 8003c44:	2044      	movs	r0, #68	; 0x44
 8003c46:	183b      	adds	r3, r7, r0
 8003c48:	4968      	ldr	r1, [pc, #416]	; (8003dec <HAL_PCD_EP_DB_Transmit+0x3a4>)
 8003c4a:	400a      	ands	r2, r1
 8003c4c:	801a      	strh	r2, [r3, #0]
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	001a      	movs	r2, r3
 8003c54:	68bb      	ldr	r3, [r7, #8]
 8003c56:	781b      	ldrb	r3, [r3, #0]
 8003c58:	009b      	lsls	r3, r3, #2
 8003c5a:	18d3      	adds	r3, r2, r3
 8003c5c:	183a      	adds	r2, r7, r0
 8003c5e:	8812      	ldrh	r2, [r2, #0]
 8003c60:	4963      	ldr	r1, [pc, #396]	; (8003df0 <HAL_PCD_EP_DB_Transmit+0x3a8>)
 8003c62:	430a      	orrs	r2, r1
 8003c64:	b292      	uxth	r2, r2
 8003c66:	801a      	strh	r2, [r3, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8003c68:	68bb      	ldr	r3, [r7, #8]
 8003c6a:	2224      	movs	r2, #36	; 0x24
 8003c6c:	5c9b      	ldrb	r3, [r3, r2]
 8003c6e:	2b01      	cmp	r3, #1
 8003c70:	d000      	beq.n	8003c74 <HAL_PCD_EP_DB_Transmit+0x22c>
 8003c72:	e291      	b.n	8004198 <HAL_PCD_EP_DB_Transmit+0x750>
      {
        ep->xfer_buff += TxByteNbre;
 8003c74:	68bb      	ldr	r3, [r7, #8]
 8003c76:	695a      	ldr	r2, [r3, #20]
 8003c78:	214e      	movs	r1, #78	; 0x4e
 8003c7a:	187b      	adds	r3, r7, r1
 8003c7c:	881b      	ldrh	r3, [r3, #0]
 8003c7e:	18d2      	adds	r2, r2, r3
 8003c80:	68bb      	ldr	r3, [r7, #8]
 8003c82:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8003c84:	68bb      	ldr	r3, [r7, #8]
 8003c86:	69da      	ldr	r2, [r3, #28]
 8003c88:	187b      	adds	r3, r7, r1
 8003c8a:	881b      	ldrh	r3, [r3, #0]
 8003c8c:	18d2      	adds	r2, r2, r3
 8003c8e:	68bb      	ldr	r3, [r7, #8]
 8003c90:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8003c92:	68bb      	ldr	r3, [r7, #8]
 8003c94:	6a1a      	ldr	r2, [r3, #32]
 8003c96:	68bb      	ldr	r3, [r7, #8]
 8003c98:	691b      	ldr	r3, [r3, #16]
 8003c9a:	429a      	cmp	r2, r3
 8003c9c:	d309      	bcc.n	8003cb2 <HAL_PCD_EP_DB_Transmit+0x26a>
        {
          len = ep->maxpacket;
 8003c9e:	68bb      	ldr	r3, [r7, #8]
 8003ca0:	691b      	ldr	r3, [r3, #16]
 8003ca2:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8003ca4:	68bb      	ldr	r3, [r7, #8]
 8003ca6:	6a1a      	ldr	r2, [r3, #32]
 8003ca8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003caa:	1ad2      	subs	r2, r2, r3
 8003cac:	68bb      	ldr	r3, [r7, #8]
 8003cae:	621a      	str	r2, [r3, #32]
 8003cb0:	e016      	b.n	8003ce0 <HAL_PCD_EP_DB_Transmit+0x298>
        }
        else if (ep->xfer_len_db == 0U)
 8003cb2:	68bb      	ldr	r3, [r7, #8]
 8003cb4:	6a1b      	ldr	r3, [r3, #32]
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d108      	bne.n	8003ccc <HAL_PCD_EP_DB_Transmit+0x284>
        {
          len = TxByteNbre;
 8003cba:	234e      	movs	r3, #78	; 0x4e
 8003cbc:	18fb      	adds	r3, r7, r3
 8003cbe:	881b      	ldrh	r3, [r3, #0]
 8003cc0:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8003cc2:	68bb      	ldr	r3, [r7, #8]
 8003cc4:	2224      	movs	r2, #36	; 0x24
 8003cc6:	2100      	movs	r1, #0
 8003cc8:	5499      	strb	r1, [r3, r2]
 8003cca:	e009      	b.n	8003ce0 <HAL_PCD_EP_DB_Transmit+0x298>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8003ccc:	68bb      	ldr	r3, [r7, #8]
 8003cce:	2224      	movs	r2, #36	; 0x24
 8003cd0:	2100      	movs	r1, #0
 8003cd2:	5499      	strb	r1, [r3, r2]
          len = ep->xfer_len_db;
 8003cd4:	68bb      	ldr	r3, [r7, #8]
 8003cd6:	6a1b      	ldr	r3, [r3, #32]
 8003cd8:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8003cda:	68bb      	ldr	r3, [r7, #8]
 8003cdc:	2200      	movs	r2, #0
 8003cde:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003ce0:	68bb      	ldr	r3, [r7, #8]
 8003ce2:	785b      	ldrb	r3, [r3, #1]
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d150      	bne.n	8003d8a <HAL_PCD_EP_DB_Transmit+0x342>
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	63bb      	str	r3, [r7, #56]	; 0x38
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	2250      	movs	r2, #80	; 0x50
 8003cf4:	5a9b      	ldrh	r3, [r3, r2]
 8003cf6:	b29b      	uxth	r3, r3
 8003cf8:	001a      	movs	r2, r3
 8003cfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003cfc:	189b      	adds	r3, r3, r2
 8003cfe:	63bb      	str	r3, [r7, #56]	; 0x38
 8003d00:	68bb      	ldr	r3, [r7, #8]
 8003d02:	781b      	ldrb	r3, [r3, #0]
 8003d04:	00da      	lsls	r2, r3, #3
 8003d06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d08:	18d3      	adds	r3, r2, r3
 8003d0a:	4a34      	ldr	r2, [pc, #208]	; (8003ddc <HAL_PCD_EP_DB_Transmit+0x394>)
 8003d0c:	4694      	mov	ip, r2
 8003d0e:	4463      	add	r3, ip
 8003d10:	637b      	str	r3, [r7, #52]	; 0x34
 8003d12:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d110      	bne.n	8003d3a <HAL_PCD_EP_DB_Transmit+0x2f2>
 8003d18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d1a:	881b      	ldrh	r3, [r3, #0]
 8003d1c:	b29b      	uxth	r3, r3
 8003d1e:	4a30      	ldr	r2, [pc, #192]	; (8003de0 <HAL_PCD_EP_DB_Transmit+0x398>)
 8003d20:	4013      	ands	r3, r2
 8003d22:	b29a      	uxth	r2, r3
 8003d24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d26:	801a      	strh	r2, [r3, #0]
 8003d28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d2a:	881b      	ldrh	r3, [r3, #0]
 8003d2c:	b29b      	uxth	r3, r3
 8003d2e:	4a2d      	ldr	r2, [pc, #180]	; (8003de4 <HAL_PCD_EP_DB_Transmit+0x39c>)
 8003d30:	4313      	orrs	r3, r2
 8003d32:	b29a      	uxth	r2, r3
 8003d34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d36:	801a      	strh	r2, [r3, #0]
 8003d38:	e044      	b.n	8003dc4 <HAL_PCD_EP_DB_Transmit+0x37c>
 8003d3a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003d3c:	2b3e      	cmp	r3, #62	; 0x3e
 8003d3e:	d810      	bhi.n	8003d62 <HAL_PCD_EP_DB_Transmit+0x31a>
 8003d40:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003d42:	085b      	lsrs	r3, r3, #1
 8003d44:	64bb      	str	r3, [r7, #72]	; 0x48
 8003d46:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003d48:	2201      	movs	r2, #1
 8003d4a:	4013      	ands	r3, r2
 8003d4c:	d002      	beq.n	8003d54 <HAL_PCD_EP_DB_Transmit+0x30c>
 8003d4e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003d50:	3301      	adds	r3, #1
 8003d52:	64bb      	str	r3, [r7, #72]	; 0x48
 8003d54:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003d56:	b29b      	uxth	r3, r3
 8003d58:	029b      	lsls	r3, r3, #10
 8003d5a:	b29a      	uxth	r2, r3
 8003d5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d5e:	801a      	strh	r2, [r3, #0]
 8003d60:	e030      	b.n	8003dc4 <HAL_PCD_EP_DB_Transmit+0x37c>
 8003d62:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003d64:	095b      	lsrs	r3, r3, #5
 8003d66:	64bb      	str	r3, [r7, #72]	; 0x48
 8003d68:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003d6a:	221f      	movs	r2, #31
 8003d6c:	4013      	ands	r3, r2
 8003d6e:	d102      	bne.n	8003d76 <HAL_PCD_EP_DB_Transmit+0x32e>
 8003d70:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003d72:	3b01      	subs	r3, #1
 8003d74:	64bb      	str	r3, [r7, #72]	; 0x48
 8003d76:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003d78:	b29b      	uxth	r3, r3
 8003d7a:	029b      	lsls	r3, r3, #10
 8003d7c:	b29b      	uxth	r3, r3
 8003d7e:	4a19      	ldr	r2, [pc, #100]	; (8003de4 <HAL_PCD_EP_DB_Transmit+0x39c>)
 8003d80:	4313      	orrs	r3, r2
 8003d82:	b29a      	uxth	r2, r3
 8003d84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d86:	801a      	strh	r2, [r3, #0]
 8003d88:	e01c      	b.n	8003dc4 <HAL_PCD_EP_DB_Transmit+0x37c>
 8003d8a:	68bb      	ldr	r3, [r7, #8]
 8003d8c:	785b      	ldrb	r3, [r3, #1]
 8003d8e:	2b01      	cmp	r3, #1
 8003d90:	d118      	bne.n	8003dc4 <HAL_PCD_EP_DB_Transmit+0x37c>
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	643b      	str	r3, [r7, #64]	; 0x40
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	2250      	movs	r2, #80	; 0x50
 8003d9e:	5a9b      	ldrh	r3, [r3, r2]
 8003da0:	b29b      	uxth	r3, r3
 8003da2:	001a      	movs	r2, r3
 8003da4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003da6:	189b      	adds	r3, r3, r2
 8003da8:	643b      	str	r3, [r7, #64]	; 0x40
 8003daa:	68bb      	ldr	r3, [r7, #8]
 8003dac:	781b      	ldrb	r3, [r3, #0]
 8003dae:	00da      	lsls	r2, r3, #3
 8003db0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003db2:	18d3      	adds	r3, r2, r3
 8003db4:	4a09      	ldr	r2, [pc, #36]	; (8003ddc <HAL_PCD_EP_DB_Transmit+0x394>)
 8003db6:	4694      	mov	ip, r2
 8003db8:	4463      	add	r3, ip
 8003dba:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003dbc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003dbe:	b29a      	uxth	r2, r3
 8003dc0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003dc2:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	6818      	ldr	r0, [r3, #0]
 8003dc8:	68bb      	ldr	r3, [r7, #8]
 8003dca:	6959      	ldr	r1, [r3, #20]
 8003dcc:	68bb      	ldr	r3, [r7, #8]
 8003dce:	891a      	ldrh	r2, [r3, #8]
 8003dd0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003dd2:	b29b      	uxth	r3, r3
 8003dd4:	f005 fb6c 	bl	80094b0 <USB_WritePMA>
 8003dd8:	e1de      	b.n	8004198 <HAL_PCD_EP_DB_Transmit+0x750>
 8003dda:	46c0      	nop			; (mov r8, r8)
 8003ddc:	00000402 	.word	0x00000402
 8003de0:	ffff83ff 	.word	0xffff83ff
 8003de4:	ffff8000 	.word	0xffff8000
 8003de8:	00000406 	.word	0x00000406
 8003dec:	ffff8f8f 	.word	0xffff8f8f
 8003df0:	ffffc080 	.word	0xffffc080
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	2250      	movs	r2, #80	; 0x50
 8003dfa:	5a9b      	ldrh	r3, [r3, r2]
 8003dfc:	b29b      	uxth	r3, r3
 8003dfe:	001a      	movs	r2, r3
 8003e00:	68bb      	ldr	r3, [r7, #8]
 8003e02:	781b      	ldrb	r3, [r3, #0]
 8003e04:	00db      	lsls	r3, r3, #3
 8003e06:	18d2      	adds	r2, r2, r3
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	18d3      	adds	r3, r2, r3
 8003e0e:	4aca      	ldr	r2, [pc, #808]	; (8004138 <HAL_PCD_EP_DB_Transmit+0x6f0>)
 8003e10:	4694      	mov	ip, r2
 8003e12:	4463      	add	r3, ip
 8003e14:	881a      	ldrh	r2, [r3, #0]
 8003e16:	214e      	movs	r1, #78	; 0x4e
 8003e18:	187b      	adds	r3, r7, r1
 8003e1a:	0592      	lsls	r2, r2, #22
 8003e1c:	0d92      	lsrs	r2, r2, #22
 8003e1e:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= TxByteNbre)
 8003e20:	68bb      	ldr	r3, [r7, #8]
 8003e22:	699a      	ldr	r2, [r3, #24]
 8003e24:	187b      	adds	r3, r7, r1
 8003e26:	881b      	ldrh	r3, [r3, #0]
 8003e28:	429a      	cmp	r2, r3
 8003e2a:	d307      	bcc.n	8003e3c <HAL_PCD_EP_DB_Transmit+0x3f4>
    {
      ep->xfer_len -= TxByteNbre;
 8003e2c:	68bb      	ldr	r3, [r7, #8]
 8003e2e:	699a      	ldr	r2, [r3, #24]
 8003e30:	187b      	adds	r3, r7, r1
 8003e32:	881b      	ldrh	r3, [r3, #0]
 8003e34:	1ad2      	subs	r2, r2, r3
 8003e36:	68bb      	ldr	r3, [r7, #8]
 8003e38:	619a      	str	r2, [r3, #24]
 8003e3a:	e002      	b.n	8003e42 <HAL_PCD_EP_DB_Transmit+0x3fa>
    }
    else
    {
      ep->xfer_len = 0U;
 8003e3c:	68bb      	ldr	r3, [r7, #8]
 8003e3e:	2200      	movs	r2, #0
 8003e40:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8003e42:	68bb      	ldr	r3, [r7, #8]
 8003e44:	699b      	ldr	r3, [r3, #24]
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d000      	beq.n	8003e4c <HAL_PCD_EP_DB_Transmit+0x404>
 8003e4a:	e0c0      	b.n	8003fce <HAL_PCD_EP_DB_Transmit+0x586>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003e4c:	68bb      	ldr	r3, [r7, #8]
 8003e4e:	785b      	ldrb	r3, [r3, #1]
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d125      	bne.n	8003ea0 <HAL_PCD_EP_DB_Transmit+0x458>
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	2250      	movs	r2, #80	; 0x50
 8003e60:	5a9b      	ldrh	r3, [r3, r2]
 8003e62:	b29b      	uxth	r3, r3
 8003e64:	001a      	movs	r2, r3
 8003e66:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e68:	189b      	adds	r3, r3, r2
 8003e6a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003e6c:	68bb      	ldr	r3, [r7, #8]
 8003e6e:	781b      	ldrb	r3, [r3, #0]
 8003e70:	00da      	lsls	r2, r3, #3
 8003e72:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e74:	18d3      	adds	r3, r2, r3
 8003e76:	4ab1      	ldr	r2, [pc, #708]	; (800413c <HAL_PCD_EP_DB_Transmit+0x6f4>)
 8003e78:	4694      	mov	ip, r2
 8003e7a:	4463      	add	r3, ip
 8003e7c:	66bb      	str	r3, [r7, #104]	; 0x68
 8003e7e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003e80:	881b      	ldrh	r3, [r3, #0]
 8003e82:	b29b      	uxth	r3, r3
 8003e84:	4aae      	ldr	r2, [pc, #696]	; (8004140 <HAL_PCD_EP_DB_Transmit+0x6f8>)
 8003e86:	4013      	ands	r3, r2
 8003e88:	b29a      	uxth	r2, r3
 8003e8a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003e8c:	801a      	strh	r2, [r3, #0]
 8003e8e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003e90:	881b      	ldrh	r3, [r3, #0]
 8003e92:	b29b      	uxth	r3, r3
 8003e94:	4aab      	ldr	r2, [pc, #684]	; (8004144 <HAL_PCD_EP_DB_Transmit+0x6fc>)
 8003e96:	4313      	orrs	r3, r2
 8003e98:	b29a      	uxth	r2, r3
 8003e9a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003e9c:	801a      	strh	r2, [r3, #0]
 8003e9e:	e01b      	b.n	8003ed8 <HAL_PCD_EP_DB_Transmit+0x490>
 8003ea0:	68bb      	ldr	r3, [r7, #8]
 8003ea2:	785b      	ldrb	r3, [r3, #1]
 8003ea4:	2b01      	cmp	r3, #1
 8003ea6:	d117      	bne.n	8003ed8 <HAL_PCD_EP_DB_Transmit+0x490>
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	677b      	str	r3, [r7, #116]	; 0x74
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	2250      	movs	r2, #80	; 0x50
 8003eb4:	5a9b      	ldrh	r3, [r3, r2]
 8003eb6:	b29b      	uxth	r3, r3
 8003eb8:	001a      	movs	r2, r3
 8003eba:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003ebc:	189b      	adds	r3, r3, r2
 8003ebe:	677b      	str	r3, [r7, #116]	; 0x74
 8003ec0:	68bb      	ldr	r3, [r7, #8]
 8003ec2:	781b      	ldrb	r3, [r3, #0]
 8003ec4:	00da      	lsls	r2, r3, #3
 8003ec6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003ec8:	18d3      	adds	r3, r2, r3
 8003eca:	4a9c      	ldr	r2, [pc, #624]	; (800413c <HAL_PCD_EP_DB_Transmit+0x6f4>)
 8003ecc:	4694      	mov	ip, r2
 8003ece:	4463      	add	r3, ip
 8003ed0:	673b      	str	r3, [r7, #112]	; 0x70
 8003ed2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003ed4:	2200      	movs	r2, #0
 8003ed6:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	67bb      	str	r3, [r7, #120]	; 0x78
 8003ede:	68bb      	ldr	r3, [r7, #8]
 8003ee0:	785b      	ldrb	r3, [r3, #1]
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d130      	bne.n	8003f48 <HAL_PCD_EP_DB_Transmit+0x500>
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	2180      	movs	r1, #128	; 0x80
 8003eec:	187a      	adds	r2, r7, r1
 8003eee:	6013      	str	r3, [r2, #0]
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	2250      	movs	r2, #80	; 0x50
 8003ef6:	5a9b      	ldrh	r3, [r3, r2]
 8003ef8:	b29b      	uxth	r3, r3
 8003efa:	001a      	movs	r2, r3
 8003efc:	187b      	adds	r3, r7, r1
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	189b      	adds	r3, r3, r2
 8003f02:	187a      	adds	r2, r7, r1
 8003f04:	6013      	str	r3, [r2, #0]
 8003f06:	68bb      	ldr	r3, [r7, #8]
 8003f08:	781b      	ldrb	r3, [r3, #0]
 8003f0a:	00da      	lsls	r2, r3, #3
 8003f0c:	187b      	adds	r3, r7, r1
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	18d3      	adds	r3, r2, r3
 8003f12:	4a89      	ldr	r2, [pc, #548]	; (8004138 <HAL_PCD_EP_DB_Transmit+0x6f0>)
 8003f14:	4694      	mov	ip, r2
 8003f16:	4463      	add	r3, ip
 8003f18:	2184      	movs	r1, #132	; 0x84
 8003f1a:	187a      	adds	r2, r7, r1
 8003f1c:	6013      	str	r3, [r2, #0]
 8003f1e:	187b      	adds	r3, r7, r1
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	881b      	ldrh	r3, [r3, #0]
 8003f24:	b29b      	uxth	r3, r3
 8003f26:	4a86      	ldr	r2, [pc, #536]	; (8004140 <HAL_PCD_EP_DB_Transmit+0x6f8>)
 8003f28:	4013      	ands	r3, r2
 8003f2a:	b29a      	uxth	r2, r3
 8003f2c:	187b      	adds	r3, r7, r1
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	801a      	strh	r2, [r3, #0]
 8003f32:	187b      	adds	r3, r7, r1
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	881b      	ldrh	r3, [r3, #0]
 8003f38:	b29b      	uxth	r3, r3
 8003f3a:	4a82      	ldr	r2, [pc, #520]	; (8004144 <HAL_PCD_EP_DB_Transmit+0x6fc>)
 8003f3c:	4313      	orrs	r3, r2
 8003f3e:	b29a      	uxth	r2, r3
 8003f40:	187b      	adds	r3, r7, r1
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	801a      	strh	r2, [r3, #0]
 8003f46:	e018      	b.n	8003f7a <HAL_PCD_EP_DB_Transmit+0x532>
 8003f48:	68bb      	ldr	r3, [r7, #8]
 8003f4a:	785b      	ldrb	r3, [r3, #1]
 8003f4c:	2b01      	cmp	r3, #1
 8003f4e:	d114      	bne.n	8003f7a <HAL_PCD_EP_DB_Transmit+0x532>
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	2250      	movs	r2, #80	; 0x50
 8003f56:	5a9b      	ldrh	r3, [r3, r2]
 8003f58:	b29b      	uxth	r3, r3
 8003f5a:	001a      	movs	r2, r3
 8003f5c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003f5e:	189b      	adds	r3, r3, r2
 8003f60:	67bb      	str	r3, [r7, #120]	; 0x78
 8003f62:	68bb      	ldr	r3, [r7, #8]
 8003f64:	781b      	ldrb	r3, [r3, #0]
 8003f66:	00da      	lsls	r2, r3, #3
 8003f68:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003f6a:	18d3      	adds	r3, r2, r3
 8003f6c:	4a72      	ldr	r2, [pc, #456]	; (8004138 <HAL_PCD_EP_DB_Transmit+0x6f0>)
 8003f6e:	4694      	mov	ip, r2
 8003f70:	4463      	add	r3, ip
 8003f72:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003f74:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003f76:	2200      	movs	r2, #0
 8003f78:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003f7a:	68bb      	ldr	r3, [r7, #8]
 8003f7c:	781a      	ldrb	r2, [r3, #0]
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	0011      	movs	r1, r2
 8003f82:	0018      	movs	r0, r3
 8003f84:	f007 fade 	bl	800b544 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8003f88:	1dbb      	adds	r3, r7, #6
 8003f8a:	881a      	ldrh	r2, [r3, #0]
 8003f8c:	2380      	movs	r3, #128	; 0x80
 8003f8e:	01db      	lsls	r3, r3, #7
 8003f90:	4013      	ands	r3, r2
 8003f92:	d000      	beq.n	8003f96 <HAL_PCD_EP_DB_Transmit+0x54e>
 8003f94:	e100      	b.n	8004198 <HAL_PCD_EP_DB_Transmit+0x750>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	001a      	movs	r2, r3
 8003f9c:	68bb      	ldr	r3, [r7, #8]
 8003f9e:	781b      	ldrb	r3, [r3, #0]
 8003fa0:	009b      	lsls	r3, r3, #2
 8003fa2:	18d3      	adds	r3, r2, r3
 8003fa4:	881b      	ldrh	r3, [r3, #0]
 8003fa6:	b29a      	uxth	r2, r3
 8003fa8:	2046      	movs	r0, #70	; 0x46
 8003faa:	183b      	adds	r3, r7, r0
 8003fac:	4966      	ldr	r1, [pc, #408]	; (8004148 <HAL_PCD_EP_DB_Transmit+0x700>)
 8003fae:	400a      	ands	r2, r1
 8003fb0:	801a      	strh	r2, [r3, #0]
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	001a      	movs	r2, r3
 8003fb8:	68bb      	ldr	r3, [r7, #8]
 8003fba:	781b      	ldrb	r3, [r3, #0]
 8003fbc:	009b      	lsls	r3, r3, #2
 8003fbe:	18d3      	adds	r3, r2, r3
 8003fc0:	183a      	adds	r2, r7, r0
 8003fc2:	8812      	ldrh	r2, [r2, #0]
 8003fc4:	4961      	ldr	r1, [pc, #388]	; (800414c <HAL_PCD_EP_DB_Transmit+0x704>)
 8003fc6:	430a      	orrs	r2, r1
 8003fc8:	b292      	uxth	r2, r2
 8003fca:	801a      	strh	r2, [r3, #0]
 8003fcc:	e0e4      	b.n	8004198 <HAL_PCD_EP_DB_Transmit+0x750>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8003fce:	1dbb      	adds	r3, r7, #6
 8003fd0:	881a      	ldrh	r2, [r3, #0]
 8003fd2:	2380      	movs	r3, #128	; 0x80
 8003fd4:	01db      	lsls	r3, r3, #7
 8003fd6:	4013      	ands	r3, r2
 8003fd8:	d11a      	bne.n	8004010 <HAL_PCD_EP_DB_Transmit+0x5c8>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	001a      	movs	r2, r3
 8003fe0:	68bb      	ldr	r3, [r7, #8]
 8003fe2:	781b      	ldrb	r3, [r3, #0]
 8003fe4:	009b      	lsls	r3, r3, #2
 8003fe6:	18d3      	adds	r3, r2, r3
 8003fe8:	881b      	ldrh	r3, [r3, #0]
 8003fea:	b29a      	uxth	r2, r3
 8003fec:	204c      	movs	r0, #76	; 0x4c
 8003fee:	183b      	adds	r3, r7, r0
 8003ff0:	4955      	ldr	r1, [pc, #340]	; (8004148 <HAL_PCD_EP_DB_Transmit+0x700>)
 8003ff2:	400a      	ands	r2, r1
 8003ff4:	801a      	strh	r2, [r3, #0]
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	001a      	movs	r2, r3
 8003ffc:	68bb      	ldr	r3, [r7, #8]
 8003ffe:	781b      	ldrb	r3, [r3, #0]
 8004000:	009b      	lsls	r3, r3, #2
 8004002:	18d3      	adds	r3, r2, r3
 8004004:	183a      	adds	r2, r7, r0
 8004006:	8812      	ldrh	r2, [r2, #0]
 8004008:	4950      	ldr	r1, [pc, #320]	; (800414c <HAL_PCD_EP_DB_Transmit+0x704>)
 800400a:	430a      	orrs	r2, r1
 800400c:	b292      	uxth	r2, r2
 800400e:	801a      	strh	r2, [r3, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8004010:	68bb      	ldr	r3, [r7, #8]
 8004012:	2224      	movs	r2, #36	; 0x24
 8004014:	5c9b      	ldrb	r3, [r3, r2]
 8004016:	2b01      	cmp	r3, #1
 8004018:	d000      	beq.n	800401c <HAL_PCD_EP_DB_Transmit+0x5d4>
 800401a:	e0bd      	b.n	8004198 <HAL_PCD_EP_DB_Transmit+0x750>
      {
        ep->xfer_buff += TxByteNbre;
 800401c:	68bb      	ldr	r3, [r7, #8]
 800401e:	695a      	ldr	r2, [r3, #20]
 8004020:	214e      	movs	r1, #78	; 0x4e
 8004022:	187b      	adds	r3, r7, r1
 8004024:	881b      	ldrh	r3, [r3, #0]
 8004026:	18d2      	adds	r2, r2, r3
 8004028:	68bb      	ldr	r3, [r7, #8]
 800402a:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 800402c:	68bb      	ldr	r3, [r7, #8]
 800402e:	69da      	ldr	r2, [r3, #28]
 8004030:	187b      	adds	r3, r7, r1
 8004032:	881b      	ldrh	r3, [r3, #0]
 8004034:	18d2      	adds	r2, r2, r3
 8004036:	68bb      	ldr	r3, [r7, #8]
 8004038:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800403a:	68bb      	ldr	r3, [r7, #8]
 800403c:	6a1a      	ldr	r2, [r3, #32]
 800403e:	68bb      	ldr	r3, [r7, #8]
 8004040:	691b      	ldr	r3, [r3, #16]
 8004042:	429a      	cmp	r2, r3
 8004044:	d309      	bcc.n	800405a <HAL_PCD_EP_DB_Transmit+0x612>
        {
          len = ep->maxpacket;
 8004046:	68bb      	ldr	r3, [r7, #8]
 8004048:	691b      	ldr	r3, [r3, #16]
 800404a:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 800404c:	68bb      	ldr	r3, [r7, #8]
 800404e:	6a1a      	ldr	r2, [r3, #32]
 8004050:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004052:	1ad2      	subs	r2, r2, r3
 8004054:	68bb      	ldr	r3, [r7, #8]
 8004056:	621a      	str	r2, [r3, #32]
 8004058:	e016      	b.n	8004088 <HAL_PCD_EP_DB_Transmit+0x640>
        }
        else if (ep->xfer_len_db == 0U)
 800405a:	68bb      	ldr	r3, [r7, #8]
 800405c:	6a1b      	ldr	r3, [r3, #32]
 800405e:	2b00      	cmp	r3, #0
 8004060:	d108      	bne.n	8004074 <HAL_PCD_EP_DB_Transmit+0x62c>
        {
          len = TxByteNbre;
 8004062:	234e      	movs	r3, #78	; 0x4e
 8004064:	18fb      	adds	r3, r7, r3
 8004066:	881b      	ldrh	r3, [r3, #0]
 8004068:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 800406a:	68bb      	ldr	r3, [r7, #8]
 800406c:	2224      	movs	r2, #36	; 0x24
 800406e:	2100      	movs	r1, #0
 8004070:	5499      	strb	r1, [r3, r2]
 8004072:	e009      	b.n	8004088 <HAL_PCD_EP_DB_Transmit+0x640>
        }
        else
        {
          len = ep->xfer_len_db;
 8004074:	68bb      	ldr	r3, [r7, #8]
 8004076:	6a1b      	ldr	r3, [r3, #32]
 8004078:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 800407a:	68bb      	ldr	r3, [r7, #8]
 800407c:	2200      	movs	r2, #0
 800407e:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8004080:	68bb      	ldr	r3, [r7, #8]
 8004082:	2224      	movs	r2, #36	; 0x24
 8004084:	2100      	movs	r1, #0
 8004086:	5499      	strb	r1, [r3, r2]
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	667b      	str	r3, [r7, #100]	; 0x64
 800408e:	68bb      	ldr	r3, [r7, #8]
 8004090:	785b      	ldrb	r3, [r3, #1]
 8004092:	2b00      	cmp	r3, #0
 8004094:	d15c      	bne.n	8004150 <HAL_PCD_EP_DB_Transmit+0x708>
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	2250      	movs	r2, #80	; 0x50
 80040a2:	5a9b      	ldrh	r3, [r3, r2]
 80040a4:	b29b      	uxth	r3, r3
 80040a6:	001a      	movs	r2, r3
 80040a8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80040aa:	189b      	adds	r3, r3, r2
 80040ac:	65fb      	str	r3, [r7, #92]	; 0x5c
 80040ae:	68bb      	ldr	r3, [r7, #8]
 80040b0:	781b      	ldrb	r3, [r3, #0]
 80040b2:	00da      	lsls	r2, r3, #3
 80040b4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80040b6:	18d3      	adds	r3, r2, r3
 80040b8:	4a1f      	ldr	r2, [pc, #124]	; (8004138 <HAL_PCD_EP_DB_Transmit+0x6f0>)
 80040ba:	4694      	mov	ip, r2
 80040bc:	4463      	add	r3, ip
 80040be:	65bb      	str	r3, [r7, #88]	; 0x58
 80040c0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d110      	bne.n	80040e8 <HAL_PCD_EP_DB_Transmit+0x6a0>
 80040c6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80040c8:	881b      	ldrh	r3, [r3, #0]
 80040ca:	b29b      	uxth	r3, r3
 80040cc:	4a1c      	ldr	r2, [pc, #112]	; (8004140 <HAL_PCD_EP_DB_Transmit+0x6f8>)
 80040ce:	4013      	ands	r3, r2
 80040d0:	b29a      	uxth	r2, r3
 80040d2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80040d4:	801a      	strh	r2, [r3, #0]
 80040d6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80040d8:	881b      	ldrh	r3, [r3, #0]
 80040da:	b29b      	uxth	r3, r3
 80040dc:	4a19      	ldr	r2, [pc, #100]	; (8004144 <HAL_PCD_EP_DB_Transmit+0x6fc>)
 80040de:	4313      	orrs	r3, r2
 80040e0:	b29a      	uxth	r2, r3
 80040e2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80040e4:	801a      	strh	r2, [r3, #0]
 80040e6:	e04d      	b.n	8004184 <HAL_PCD_EP_DB_Transmit+0x73c>
 80040e8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80040ea:	2b3e      	cmp	r3, #62	; 0x3e
 80040ec:	d810      	bhi.n	8004110 <HAL_PCD_EP_DB_Transmit+0x6c8>
 80040ee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80040f0:	085b      	lsrs	r3, r3, #1
 80040f2:	657b      	str	r3, [r7, #84]	; 0x54
 80040f4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80040f6:	2201      	movs	r2, #1
 80040f8:	4013      	ands	r3, r2
 80040fa:	d002      	beq.n	8004102 <HAL_PCD_EP_DB_Transmit+0x6ba>
 80040fc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80040fe:	3301      	adds	r3, #1
 8004100:	657b      	str	r3, [r7, #84]	; 0x54
 8004102:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004104:	b29b      	uxth	r3, r3
 8004106:	029b      	lsls	r3, r3, #10
 8004108:	b29a      	uxth	r2, r3
 800410a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800410c:	801a      	strh	r2, [r3, #0]
 800410e:	e039      	b.n	8004184 <HAL_PCD_EP_DB_Transmit+0x73c>
 8004110:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004112:	095b      	lsrs	r3, r3, #5
 8004114:	657b      	str	r3, [r7, #84]	; 0x54
 8004116:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004118:	221f      	movs	r2, #31
 800411a:	4013      	ands	r3, r2
 800411c:	d102      	bne.n	8004124 <HAL_PCD_EP_DB_Transmit+0x6dc>
 800411e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004120:	3b01      	subs	r3, #1
 8004122:	657b      	str	r3, [r7, #84]	; 0x54
 8004124:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004126:	b29b      	uxth	r3, r3
 8004128:	029b      	lsls	r3, r3, #10
 800412a:	b29b      	uxth	r3, r3
 800412c:	4a05      	ldr	r2, [pc, #20]	; (8004144 <HAL_PCD_EP_DB_Transmit+0x6fc>)
 800412e:	4313      	orrs	r3, r2
 8004130:	b29a      	uxth	r2, r3
 8004132:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004134:	801a      	strh	r2, [r3, #0]
 8004136:	e025      	b.n	8004184 <HAL_PCD_EP_DB_Transmit+0x73c>
 8004138:	00000406 	.word	0x00000406
 800413c:	00000402 	.word	0x00000402
 8004140:	ffff83ff 	.word	0xffff83ff
 8004144:	ffff8000 	.word	0xffff8000
 8004148:	ffff8f8f 	.word	0xffff8f8f
 800414c:	ffffc080 	.word	0xffffc080
 8004150:	68bb      	ldr	r3, [r7, #8]
 8004152:	785b      	ldrb	r3, [r3, #1]
 8004154:	2b01      	cmp	r3, #1
 8004156:	d115      	bne.n	8004184 <HAL_PCD_EP_DB_Transmit+0x73c>
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	2250      	movs	r2, #80	; 0x50
 800415e:	5a9b      	ldrh	r3, [r3, r2]
 8004160:	b29b      	uxth	r3, r3
 8004162:	001a      	movs	r2, r3
 8004164:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004166:	189b      	adds	r3, r3, r2
 8004168:	667b      	str	r3, [r7, #100]	; 0x64
 800416a:	68bb      	ldr	r3, [r7, #8]
 800416c:	781b      	ldrb	r3, [r3, #0]
 800416e:	00da      	lsls	r2, r3, #3
 8004170:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004172:	18d3      	adds	r3, r2, r3
 8004174:	4a1e      	ldr	r2, [pc, #120]	; (80041f0 <HAL_PCD_EP_DB_Transmit+0x7a8>)
 8004176:	4694      	mov	ip, r2
 8004178:	4463      	add	r3, ip
 800417a:	663b      	str	r3, [r7, #96]	; 0x60
 800417c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800417e:	b29a      	uxth	r2, r3
 8004180:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004182:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	6818      	ldr	r0, [r3, #0]
 8004188:	68bb      	ldr	r3, [r7, #8]
 800418a:	6959      	ldr	r1, [r3, #20]
 800418c:	68bb      	ldr	r3, [r7, #8]
 800418e:	895a      	ldrh	r2, [r3, #10]
 8004190:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004192:	b29b      	uxth	r3, r3
 8004194:	f005 f98c 	bl	80094b0 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	001a      	movs	r2, r3
 800419e:	68bb      	ldr	r3, [r7, #8]
 80041a0:	781b      	ldrb	r3, [r3, #0]
 80041a2:	009b      	lsls	r3, r3, #2
 80041a4:	18d3      	adds	r3, r2, r3
 80041a6:	881b      	ldrh	r3, [r3, #0]
 80041a8:	b29a      	uxth	r2, r3
 80041aa:	2010      	movs	r0, #16
 80041ac:	183b      	adds	r3, r7, r0
 80041ae:	4911      	ldr	r1, [pc, #68]	; (80041f4 <HAL_PCD_EP_DB_Transmit+0x7ac>)
 80041b0:	400a      	ands	r2, r1
 80041b2:	801a      	strh	r2, [r3, #0]
 80041b4:	183b      	adds	r3, r7, r0
 80041b6:	183a      	adds	r2, r7, r0
 80041b8:	8812      	ldrh	r2, [r2, #0]
 80041ba:	2110      	movs	r1, #16
 80041bc:	404a      	eors	r2, r1
 80041be:	801a      	strh	r2, [r3, #0]
 80041c0:	183b      	adds	r3, r7, r0
 80041c2:	183a      	adds	r2, r7, r0
 80041c4:	8812      	ldrh	r2, [r2, #0]
 80041c6:	2120      	movs	r1, #32
 80041c8:	404a      	eors	r2, r1
 80041ca:	801a      	strh	r2, [r3, #0]
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	001a      	movs	r2, r3
 80041d2:	68bb      	ldr	r3, [r7, #8]
 80041d4:	781b      	ldrb	r3, [r3, #0]
 80041d6:	009b      	lsls	r3, r3, #2
 80041d8:	18d3      	adds	r3, r2, r3
 80041da:	183a      	adds	r2, r7, r0
 80041dc:	8812      	ldrh	r2, [r2, #0]
 80041de:	4906      	ldr	r1, [pc, #24]	; (80041f8 <HAL_PCD_EP_DB_Transmit+0x7b0>)
 80041e0:	430a      	orrs	r2, r1
 80041e2:	b292      	uxth	r2, r2
 80041e4:	801a      	strh	r2, [r3, #0]

  return HAL_OK;
 80041e6:	2300      	movs	r3, #0
}
 80041e8:	0018      	movs	r0, r3
 80041ea:	46bd      	mov	sp, r7
 80041ec:	b022      	add	sp, #136	; 0x88
 80041ee:	bd80      	pop	{r7, pc}
 80041f0:	00000406 	.word	0x00000406
 80041f4:	ffff8fbf 	.word	0xffff8fbf
 80041f8:	ffff8080 	.word	0xffff8080

080041fc <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 80041fc:	b590      	push	{r4, r7, lr}
 80041fe:	b087      	sub	sp, #28
 8004200:	af00      	add	r7, sp, #0
 8004202:	60f8      	str	r0, [r7, #12]
 8004204:	0008      	movs	r0, r1
 8004206:	0011      	movs	r1, r2
 8004208:	607b      	str	r3, [r7, #4]
 800420a:	240a      	movs	r4, #10
 800420c:	193b      	adds	r3, r7, r4
 800420e:	1c02      	adds	r2, r0, #0
 8004210:	801a      	strh	r2, [r3, #0]
 8004212:	2308      	movs	r3, #8
 8004214:	18fb      	adds	r3, r7, r3
 8004216:	1c0a      	adds	r2, r1, #0
 8004218:	801a      	strh	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 800421a:	0021      	movs	r1, r4
 800421c:	187b      	adds	r3, r7, r1
 800421e:	881b      	ldrh	r3, [r3, #0]
 8004220:	2280      	movs	r2, #128	; 0x80
 8004222:	4013      	ands	r3, r2
 8004224:	b29b      	uxth	r3, r3
 8004226:	2b00      	cmp	r3, #0
 8004228:	d00c      	beq.n	8004244 <HAL_PCDEx_PMAConfig+0x48>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800422a:	187b      	adds	r3, r7, r1
 800422c:	881b      	ldrh	r3, [r3, #0]
 800422e:	2207      	movs	r2, #7
 8004230:	4013      	ands	r3, r2
 8004232:	1c5a      	adds	r2, r3, #1
 8004234:	0013      	movs	r3, r2
 8004236:	009b      	lsls	r3, r3, #2
 8004238:	189b      	adds	r3, r3, r2
 800423a:	00db      	lsls	r3, r3, #3
 800423c:	68fa      	ldr	r2, [r7, #12]
 800423e:	18d3      	adds	r3, r2, r3
 8004240:	617b      	str	r3, [r7, #20]
 8004242:	e00b      	b.n	800425c <HAL_PCDEx_PMAConfig+0x60>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004244:	230a      	movs	r3, #10
 8004246:	18fb      	adds	r3, r7, r3
 8004248:	881a      	ldrh	r2, [r3, #0]
 800424a:	0013      	movs	r3, r2
 800424c:	009b      	lsls	r3, r3, #2
 800424e:	189b      	adds	r3, r3, r2
 8004250:	00db      	lsls	r3, r3, #3
 8004252:	3369      	adds	r3, #105	; 0x69
 8004254:	33ff      	adds	r3, #255	; 0xff
 8004256:	68fa      	ldr	r2, [r7, #12]
 8004258:	18d3      	adds	r3, r2, r3
 800425a:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 800425c:	2308      	movs	r3, #8
 800425e:	18fb      	adds	r3, r7, r3
 8004260:	881b      	ldrh	r3, [r3, #0]
 8004262:	2b00      	cmp	r3, #0
 8004264:	d107      	bne.n	8004276 <HAL_PCDEx_PMAConfig+0x7a>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8004266:	697b      	ldr	r3, [r7, #20]
 8004268:	2200      	movs	r2, #0
 800426a:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	b29a      	uxth	r2, r3
 8004270:	697b      	ldr	r3, [r7, #20]
 8004272:	80da      	strh	r2, [r3, #6]
 8004274:	e00b      	b.n	800428e <HAL_PCDEx_PMAConfig+0x92>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8004276:	697b      	ldr	r3, [r7, #20]
 8004278:	2201      	movs	r2, #1
 800427a:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	b29a      	uxth	r2, r3
 8004280:	697b      	ldr	r3, [r7, #20]
 8004282:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	0c1b      	lsrs	r3, r3, #16
 8004288:	b29a      	uxth	r2, r3
 800428a:	697b      	ldr	r3, [r7, #20]
 800428c:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 800428e:	2300      	movs	r3, #0
}
 8004290:	0018      	movs	r0, r3
 8004292:	46bd      	mov	sp, r7
 8004294:	b007      	add	sp, #28
 8004296:	bd90      	pop	{r4, r7, pc}

08004298 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8004298:	b580      	push	{r7, lr}
 800429a:	b084      	sub	sp, #16
 800429c:	af00      	add	r7, sp, #0
 800429e:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 80042a6:	687a      	ldr	r2, [r7, #4]
 80042a8:	23ba      	movs	r3, #186	; 0xba
 80042aa:	009b      	lsls	r3, r3, #2
 80042ac:	2101      	movs	r1, #1
 80042ae:	50d1      	str	r1, [r2, r3]
  hpcd->LPM_State = LPM_L0;
 80042b0:	687a      	ldr	r2, [r7, #4]
 80042b2:	23b8      	movs	r3, #184	; 0xb8
 80042b4:	009b      	lsls	r3, r3, #2
 80042b6:	2100      	movs	r1, #0
 80042b8:	54d1      	strb	r1, [r2, r3]

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	2254      	movs	r2, #84	; 0x54
 80042be:	5a9b      	ldrh	r3, [r3, r2]
 80042c0:	b29b      	uxth	r3, r3
 80042c2:	2201      	movs	r2, #1
 80042c4:	4313      	orrs	r3, r2
 80042c6:	b299      	uxth	r1, r3
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	2254      	movs	r2, #84	; 0x54
 80042cc:	5299      	strh	r1, [r3, r2]
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	2254      	movs	r2, #84	; 0x54
 80042d2:	5a9b      	ldrh	r3, [r3, r2]
 80042d4:	b29b      	uxth	r3, r3
 80042d6:	2202      	movs	r2, #2
 80042d8:	4313      	orrs	r3, r2
 80042da:	b299      	uxth	r1, r3
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	2254      	movs	r2, #84	; 0x54
 80042e0:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 80042e2:	2300      	movs	r3, #0
}
 80042e4:	0018      	movs	r0, r3
 80042e6:	46bd      	mov	sp, r7
 80042e8:	b004      	add	sp, #16
 80042ea:	bd80      	pop	{r7, pc}

080042ec <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80042ec:	b580      	push	{r7, lr}
 80042ee:	b082      	sub	sp, #8
 80042f0:	af00      	add	r7, sp, #0
 80042f2:	6078      	str	r0, [r7, #4]
 80042f4:	000a      	movs	r2, r1
 80042f6:	1cfb      	adds	r3, r7, #3
 80042f8:	701a      	strb	r2, [r3, #0]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80042fa:	46c0      	nop			; (mov r8, r8)
 80042fc:	46bd      	mov	sp, r7
 80042fe:	b002      	add	sp, #8
 8004300:	bd80      	pop	{r7, pc}
	...

08004304 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004304:	b580      	push	{r7, lr}
 8004306:	b088      	sub	sp, #32
 8004308:	af00      	add	r7, sp, #0
 800430a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	2b00      	cmp	r3, #0
 8004310:	d102      	bne.n	8004318 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8004312:	2301      	movs	r3, #1
 8004314:	f000 fb76 	bl	8004a04 <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	2201      	movs	r2, #1
 800431e:	4013      	ands	r3, r2
 8004320:	d100      	bne.n	8004324 <HAL_RCC_OscConfig+0x20>
 8004322:	e08e      	b.n	8004442 <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8004324:	4bc5      	ldr	r3, [pc, #788]	; (800463c <HAL_RCC_OscConfig+0x338>)
 8004326:	685b      	ldr	r3, [r3, #4]
 8004328:	220c      	movs	r2, #12
 800432a:	4013      	ands	r3, r2
 800432c:	2b04      	cmp	r3, #4
 800432e:	d00e      	beq.n	800434e <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004330:	4bc2      	ldr	r3, [pc, #776]	; (800463c <HAL_RCC_OscConfig+0x338>)
 8004332:	685b      	ldr	r3, [r3, #4]
 8004334:	220c      	movs	r2, #12
 8004336:	4013      	ands	r3, r2
 8004338:	2b08      	cmp	r3, #8
 800433a:	d117      	bne.n	800436c <HAL_RCC_OscConfig+0x68>
 800433c:	4bbf      	ldr	r3, [pc, #764]	; (800463c <HAL_RCC_OscConfig+0x338>)
 800433e:	685a      	ldr	r2, [r3, #4]
 8004340:	23c0      	movs	r3, #192	; 0xc0
 8004342:	025b      	lsls	r3, r3, #9
 8004344:	401a      	ands	r2, r3
 8004346:	2380      	movs	r3, #128	; 0x80
 8004348:	025b      	lsls	r3, r3, #9
 800434a:	429a      	cmp	r2, r3
 800434c:	d10e      	bne.n	800436c <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800434e:	4bbb      	ldr	r3, [pc, #748]	; (800463c <HAL_RCC_OscConfig+0x338>)
 8004350:	681a      	ldr	r2, [r3, #0]
 8004352:	2380      	movs	r3, #128	; 0x80
 8004354:	029b      	lsls	r3, r3, #10
 8004356:	4013      	ands	r3, r2
 8004358:	d100      	bne.n	800435c <HAL_RCC_OscConfig+0x58>
 800435a:	e071      	b.n	8004440 <HAL_RCC_OscConfig+0x13c>
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	685b      	ldr	r3, [r3, #4]
 8004360:	2b00      	cmp	r3, #0
 8004362:	d000      	beq.n	8004366 <HAL_RCC_OscConfig+0x62>
 8004364:	e06c      	b.n	8004440 <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 8004366:	2301      	movs	r3, #1
 8004368:	f000 fb4c 	bl	8004a04 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	685b      	ldr	r3, [r3, #4]
 8004370:	2b01      	cmp	r3, #1
 8004372:	d107      	bne.n	8004384 <HAL_RCC_OscConfig+0x80>
 8004374:	4bb1      	ldr	r3, [pc, #708]	; (800463c <HAL_RCC_OscConfig+0x338>)
 8004376:	681a      	ldr	r2, [r3, #0]
 8004378:	4bb0      	ldr	r3, [pc, #704]	; (800463c <HAL_RCC_OscConfig+0x338>)
 800437a:	2180      	movs	r1, #128	; 0x80
 800437c:	0249      	lsls	r1, r1, #9
 800437e:	430a      	orrs	r2, r1
 8004380:	601a      	str	r2, [r3, #0]
 8004382:	e02f      	b.n	80043e4 <HAL_RCC_OscConfig+0xe0>
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	685b      	ldr	r3, [r3, #4]
 8004388:	2b00      	cmp	r3, #0
 800438a:	d10c      	bne.n	80043a6 <HAL_RCC_OscConfig+0xa2>
 800438c:	4bab      	ldr	r3, [pc, #684]	; (800463c <HAL_RCC_OscConfig+0x338>)
 800438e:	681a      	ldr	r2, [r3, #0]
 8004390:	4baa      	ldr	r3, [pc, #680]	; (800463c <HAL_RCC_OscConfig+0x338>)
 8004392:	49ab      	ldr	r1, [pc, #684]	; (8004640 <HAL_RCC_OscConfig+0x33c>)
 8004394:	400a      	ands	r2, r1
 8004396:	601a      	str	r2, [r3, #0]
 8004398:	4ba8      	ldr	r3, [pc, #672]	; (800463c <HAL_RCC_OscConfig+0x338>)
 800439a:	681a      	ldr	r2, [r3, #0]
 800439c:	4ba7      	ldr	r3, [pc, #668]	; (800463c <HAL_RCC_OscConfig+0x338>)
 800439e:	49a9      	ldr	r1, [pc, #676]	; (8004644 <HAL_RCC_OscConfig+0x340>)
 80043a0:	400a      	ands	r2, r1
 80043a2:	601a      	str	r2, [r3, #0]
 80043a4:	e01e      	b.n	80043e4 <HAL_RCC_OscConfig+0xe0>
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	685b      	ldr	r3, [r3, #4]
 80043aa:	2b05      	cmp	r3, #5
 80043ac:	d10e      	bne.n	80043cc <HAL_RCC_OscConfig+0xc8>
 80043ae:	4ba3      	ldr	r3, [pc, #652]	; (800463c <HAL_RCC_OscConfig+0x338>)
 80043b0:	681a      	ldr	r2, [r3, #0]
 80043b2:	4ba2      	ldr	r3, [pc, #648]	; (800463c <HAL_RCC_OscConfig+0x338>)
 80043b4:	2180      	movs	r1, #128	; 0x80
 80043b6:	02c9      	lsls	r1, r1, #11
 80043b8:	430a      	orrs	r2, r1
 80043ba:	601a      	str	r2, [r3, #0]
 80043bc:	4b9f      	ldr	r3, [pc, #636]	; (800463c <HAL_RCC_OscConfig+0x338>)
 80043be:	681a      	ldr	r2, [r3, #0]
 80043c0:	4b9e      	ldr	r3, [pc, #632]	; (800463c <HAL_RCC_OscConfig+0x338>)
 80043c2:	2180      	movs	r1, #128	; 0x80
 80043c4:	0249      	lsls	r1, r1, #9
 80043c6:	430a      	orrs	r2, r1
 80043c8:	601a      	str	r2, [r3, #0]
 80043ca:	e00b      	b.n	80043e4 <HAL_RCC_OscConfig+0xe0>
 80043cc:	4b9b      	ldr	r3, [pc, #620]	; (800463c <HAL_RCC_OscConfig+0x338>)
 80043ce:	681a      	ldr	r2, [r3, #0]
 80043d0:	4b9a      	ldr	r3, [pc, #616]	; (800463c <HAL_RCC_OscConfig+0x338>)
 80043d2:	499b      	ldr	r1, [pc, #620]	; (8004640 <HAL_RCC_OscConfig+0x33c>)
 80043d4:	400a      	ands	r2, r1
 80043d6:	601a      	str	r2, [r3, #0]
 80043d8:	4b98      	ldr	r3, [pc, #608]	; (800463c <HAL_RCC_OscConfig+0x338>)
 80043da:	681a      	ldr	r2, [r3, #0]
 80043dc:	4b97      	ldr	r3, [pc, #604]	; (800463c <HAL_RCC_OscConfig+0x338>)
 80043de:	4999      	ldr	r1, [pc, #612]	; (8004644 <HAL_RCC_OscConfig+0x340>)
 80043e0:	400a      	ands	r2, r1
 80043e2:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	685b      	ldr	r3, [r3, #4]
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d014      	beq.n	8004416 <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043ec:	f7fd fa50 	bl	8001890 <HAL_GetTick>
 80043f0:	0003      	movs	r3, r0
 80043f2:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80043f4:	e008      	b.n	8004408 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80043f6:	f7fd fa4b 	bl	8001890 <HAL_GetTick>
 80043fa:	0002      	movs	r2, r0
 80043fc:	69bb      	ldr	r3, [r7, #24]
 80043fe:	1ad3      	subs	r3, r2, r3
 8004400:	2b64      	cmp	r3, #100	; 0x64
 8004402:	d901      	bls.n	8004408 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 8004404:	2303      	movs	r3, #3
 8004406:	e2fd      	b.n	8004a04 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004408:	4b8c      	ldr	r3, [pc, #560]	; (800463c <HAL_RCC_OscConfig+0x338>)
 800440a:	681a      	ldr	r2, [r3, #0]
 800440c:	2380      	movs	r3, #128	; 0x80
 800440e:	029b      	lsls	r3, r3, #10
 8004410:	4013      	ands	r3, r2
 8004412:	d0f0      	beq.n	80043f6 <HAL_RCC_OscConfig+0xf2>
 8004414:	e015      	b.n	8004442 <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004416:	f7fd fa3b 	bl	8001890 <HAL_GetTick>
 800441a:	0003      	movs	r3, r0
 800441c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800441e:	e008      	b.n	8004432 <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004420:	f7fd fa36 	bl	8001890 <HAL_GetTick>
 8004424:	0002      	movs	r2, r0
 8004426:	69bb      	ldr	r3, [r7, #24]
 8004428:	1ad3      	subs	r3, r2, r3
 800442a:	2b64      	cmp	r3, #100	; 0x64
 800442c:	d901      	bls.n	8004432 <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 800442e:	2303      	movs	r3, #3
 8004430:	e2e8      	b.n	8004a04 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004432:	4b82      	ldr	r3, [pc, #520]	; (800463c <HAL_RCC_OscConfig+0x338>)
 8004434:	681a      	ldr	r2, [r3, #0]
 8004436:	2380      	movs	r3, #128	; 0x80
 8004438:	029b      	lsls	r3, r3, #10
 800443a:	4013      	ands	r3, r2
 800443c:	d1f0      	bne.n	8004420 <HAL_RCC_OscConfig+0x11c>
 800443e:	e000      	b.n	8004442 <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004440:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	2202      	movs	r2, #2
 8004448:	4013      	ands	r3, r2
 800444a:	d100      	bne.n	800444e <HAL_RCC_OscConfig+0x14a>
 800444c:	e06c      	b.n	8004528 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800444e:	4b7b      	ldr	r3, [pc, #492]	; (800463c <HAL_RCC_OscConfig+0x338>)
 8004450:	685b      	ldr	r3, [r3, #4]
 8004452:	220c      	movs	r2, #12
 8004454:	4013      	ands	r3, r2
 8004456:	d00e      	beq.n	8004476 <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8004458:	4b78      	ldr	r3, [pc, #480]	; (800463c <HAL_RCC_OscConfig+0x338>)
 800445a:	685b      	ldr	r3, [r3, #4]
 800445c:	220c      	movs	r2, #12
 800445e:	4013      	ands	r3, r2
 8004460:	2b08      	cmp	r3, #8
 8004462:	d11f      	bne.n	80044a4 <HAL_RCC_OscConfig+0x1a0>
 8004464:	4b75      	ldr	r3, [pc, #468]	; (800463c <HAL_RCC_OscConfig+0x338>)
 8004466:	685a      	ldr	r2, [r3, #4]
 8004468:	23c0      	movs	r3, #192	; 0xc0
 800446a:	025b      	lsls	r3, r3, #9
 800446c:	401a      	ands	r2, r3
 800446e:	2380      	movs	r3, #128	; 0x80
 8004470:	021b      	lsls	r3, r3, #8
 8004472:	429a      	cmp	r2, r3
 8004474:	d116      	bne.n	80044a4 <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004476:	4b71      	ldr	r3, [pc, #452]	; (800463c <HAL_RCC_OscConfig+0x338>)
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	2202      	movs	r2, #2
 800447c:	4013      	ands	r3, r2
 800447e:	d005      	beq.n	800448c <HAL_RCC_OscConfig+0x188>
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	68db      	ldr	r3, [r3, #12]
 8004484:	2b01      	cmp	r3, #1
 8004486:	d001      	beq.n	800448c <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8004488:	2301      	movs	r3, #1
 800448a:	e2bb      	b.n	8004a04 <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800448c:	4b6b      	ldr	r3, [pc, #428]	; (800463c <HAL_RCC_OscConfig+0x338>)
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	22f8      	movs	r2, #248	; 0xf8
 8004492:	4393      	bics	r3, r2
 8004494:	0019      	movs	r1, r3
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	691b      	ldr	r3, [r3, #16]
 800449a:	00da      	lsls	r2, r3, #3
 800449c:	4b67      	ldr	r3, [pc, #412]	; (800463c <HAL_RCC_OscConfig+0x338>)
 800449e:	430a      	orrs	r2, r1
 80044a0:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80044a2:	e041      	b.n	8004528 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	68db      	ldr	r3, [r3, #12]
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d024      	beq.n	80044f6 <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80044ac:	4b63      	ldr	r3, [pc, #396]	; (800463c <HAL_RCC_OscConfig+0x338>)
 80044ae:	681a      	ldr	r2, [r3, #0]
 80044b0:	4b62      	ldr	r3, [pc, #392]	; (800463c <HAL_RCC_OscConfig+0x338>)
 80044b2:	2101      	movs	r1, #1
 80044b4:	430a      	orrs	r2, r1
 80044b6:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044b8:	f7fd f9ea 	bl	8001890 <HAL_GetTick>
 80044bc:	0003      	movs	r3, r0
 80044be:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80044c0:	e008      	b.n	80044d4 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80044c2:	f7fd f9e5 	bl	8001890 <HAL_GetTick>
 80044c6:	0002      	movs	r2, r0
 80044c8:	69bb      	ldr	r3, [r7, #24]
 80044ca:	1ad3      	subs	r3, r2, r3
 80044cc:	2b02      	cmp	r3, #2
 80044ce:	d901      	bls.n	80044d4 <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80044d0:	2303      	movs	r3, #3
 80044d2:	e297      	b.n	8004a04 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80044d4:	4b59      	ldr	r3, [pc, #356]	; (800463c <HAL_RCC_OscConfig+0x338>)
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	2202      	movs	r2, #2
 80044da:	4013      	ands	r3, r2
 80044dc:	d0f1      	beq.n	80044c2 <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80044de:	4b57      	ldr	r3, [pc, #348]	; (800463c <HAL_RCC_OscConfig+0x338>)
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	22f8      	movs	r2, #248	; 0xf8
 80044e4:	4393      	bics	r3, r2
 80044e6:	0019      	movs	r1, r3
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	691b      	ldr	r3, [r3, #16]
 80044ec:	00da      	lsls	r2, r3, #3
 80044ee:	4b53      	ldr	r3, [pc, #332]	; (800463c <HAL_RCC_OscConfig+0x338>)
 80044f0:	430a      	orrs	r2, r1
 80044f2:	601a      	str	r2, [r3, #0]
 80044f4:	e018      	b.n	8004528 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80044f6:	4b51      	ldr	r3, [pc, #324]	; (800463c <HAL_RCC_OscConfig+0x338>)
 80044f8:	681a      	ldr	r2, [r3, #0]
 80044fa:	4b50      	ldr	r3, [pc, #320]	; (800463c <HAL_RCC_OscConfig+0x338>)
 80044fc:	2101      	movs	r1, #1
 80044fe:	438a      	bics	r2, r1
 8004500:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004502:	f7fd f9c5 	bl	8001890 <HAL_GetTick>
 8004506:	0003      	movs	r3, r0
 8004508:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800450a:	e008      	b.n	800451e <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800450c:	f7fd f9c0 	bl	8001890 <HAL_GetTick>
 8004510:	0002      	movs	r2, r0
 8004512:	69bb      	ldr	r3, [r7, #24]
 8004514:	1ad3      	subs	r3, r2, r3
 8004516:	2b02      	cmp	r3, #2
 8004518:	d901      	bls.n	800451e <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 800451a:	2303      	movs	r3, #3
 800451c:	e272      	b.n	8004a04 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800451e:	4b47      	ldr	r3, [pc, #284]	; (800463c <HAL_RCC_OscConfig+0x338>)
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	2202      	movs	r2, #2
 8004524:	4013      	ands	r3, r2
 8004526:	d1f1      	bne.n	800450c <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	2208      	movs	r2, #8
 800452e:	4013      	ands	r3, r2
 8004530:	d036      	beq.n	80045a0 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	69db      	ldr	r3, [r3, #28]
 8004536:	2b00      	cmp	r3, #0
 8004538:	d019      	beq.n	800456e <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800453a:	4b40      	ldr	r3, [pc, #256]	; (800463c <HAL_RCC_OscConfig+0x338>)
 800453c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800453e:	4b3f      	ldr	r3, [pc, #252]	; (800463c <HAL_RCC_OscConfig+0x338>)
 8004540:	2101      	movs	r1, #1
 8004542:	430a      	orrs	r2, r1
 8004544:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004546:	f7fd f9a3 	bl	8001890 <HAL_GetTick>
 800454a:	0003      	movs	r3, r0
 800454c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800454e:	e008      	b.n	8004562 <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004550:	f7fd f99e 	bl	8001890 <HAL_GetTick>
 8004554:	0002      	movs	r2, r0
 8004556:	69bb      	ldr	r3, [r7, #24]
 8004558:	1ad3      	subs	r3, r2, r3
 800455a:	2b02      	cmp	r3, #2
 800455c:	d901      	bls.n	8004562 <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 800455e:	2303      	movs	r3, #3
 8004560:	e250      	b.n	8004a04 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004562:	4b36      	ldr	r3, [pc, #216]	; (800463c <HAL_RCC_OscConfig+0x338>)
 8004564:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004566:	2202      	movs	r2, #2
 8004568:	4013      	ands	r3, r2
 800456a:	d0f1      	beq.n	8004550 <HAL_RCC_OscConfig+0x24c>
 800456c:	e018      	b.n	80045a0 <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800456e:	4b33      	ldr	r3, [pc, #204]	; (800463c <HAL_RCC_OscConfig+0x338>)
 8004570:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004572:	4b32      	ldr	r3, [pc, #200]	; (800463c <HAL_RCC_OscConfig+0x338>)
 8004574:	2101      	movs	r1, #1
 8004576:	438a      	bics	r2, r1
 8004578:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800457a:	f7fd f989 	bl	8001890 <HAL_GetTick>
 800457e:	0003      	movs	r3, r0
 8004580:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004582:	e008      	b.n	8004596 <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004584:	f7fd f984 	bl	8001890 <HAL_GetTick>
 8004588:	0002      	movs	r2, r0
 800458a:	69bb      	ldr	r3, [r7, #24]
 800458c:	1ad3      	subs	r3, r2, r3
 800458e:	2b02      	cmp	r3, #2
 8004590:	d901      	bls.n	8004596 <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 8004592:	2303      	movs	r3, #3
 8004594:	e236      	b.n	8004a04 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004596:	4b29      	ldr	r3, [pc, #164]	; (800463c <HAL_RCC_OscConfig+0x338>)
 8004598:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800459a:	2202      	movs	r2, #2
 800459c:	4013      	ands	r3, r2
 800459e:	d1f1      	bne.n	8004584 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	2204      	movs	r2, #4
 80045a6:	4013      	ands	r3, r2
 80045a8:	d100      	bne.n	80045ac <HAL_RCC_OscConfig+0x2a8>
 80045aa:	e0b5      	b.n	8004718 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 80045ac:	201f      	movs	r0, #31
 80045ae:	183b      	adds	r3, r7, r0
 80045b0:	2200      	movs	r2, #0
 80045b2:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80045b4:	4b21      	ldr	r3, [pc, #132]	; (800463c <HAL_RCC_OscConfig+0x338>)
 80045b6:	69da      	ldr	r2, [r3, #28]
 80045b8:	2380      	movs	r3, #128	; 0x80
 80045ba:	055b      	lsls	r3, r3, #21
 80045bc:	4013      	ands	r3, r2
 80045be:	d110      	bne.n	80045e2 <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80045c0:	4b1e      	ldr	r3, [pc, #120]	; (800463c <HAL_RCC_OscConfig+0x338>)
 80045c2:	69da      	ldr	r2, [r3, #28]
 80045c4:	4b1d      	ldr	r3, [pc, #116]	; (800463c <HAL_RCC_OscConfig+0x338>)
 80045c6:	2180      	movs	r1, #128	; 0x80
 80045c8:	0549      	lsls	r1, r1, #21
 80045ca:	430a      	orrs	r2, r1
 80045cc:	61da      	str	r2, [r3, #28]
 80045ce:	4b1b      	ldr	r3, [pc, #108]	; (800463c <HAL_RCC_OscConfig+0x338>)
 80045d0:	69da      	ldr	r2, [r3, #28]
 80045d2:	2380      	movs	r3, #128	; 0x80
 80045d4:	055b      	lsls	r3, r3, #21
 80045d6:	4013      	ands	r3, r2
 80045d8:	60fb      	str	r3, [r7, #12]
 80045da:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80045dc:	183b      	adds	r3, r7, r0
 80045de:	2201      	movs	r2, #1
 80045e0:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80045e2:	4b19      	ldr	r3, [pc, #100]	; (8004648 <HAL_RCC_OscConfig+0x344>)
 80045e4:	681a      	ldr	r2, [r3, #0]
 80045e6:	2380      	movs	r3, #128	; 0x80
 80045e8:	005b      	lsls	r3, r3, #1
 80045ea:	4013      	ands	r3, r2
 80045ec:	d11a      	bne.n	8004624 <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80045ee:	4b16      	ldr	r3, [pc, #88]	; (8004648 <HAL_RCC_OscConfig+0x344>)
 80045f0:	681a      	ldr	r2, [r3, #0]
 80045f2:	4b15      	ldr	r3, [pc, #84]	; (8004648 <HAL_RCC_OscConfig+0x344>)
 80045f4:	2180      	movs	r1, #128	; 0x80
 80045f6:	0049      	lsls	r1, r1, #1
 80045f8:	430a      	orrs	r2, r1
 80045fa:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80045fc:	f7fd f948 	bl	8001890 <HAL_GetTick>
 8004600:	0003      	movs	r3, r0
 8004602:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004604:	e008      	b.n	8004618 <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004606:	f7fd f943 	bl	8001890 <HAL_GetTick>
 800460a:	0002      	movs	r2, r0
 800460c:	69bb      	ldr	r3, [r7, #24]
 800460e:	1ad3      	subs	r3, r2, r3
 8004610:	2b64      	cmp	r3, #100	; 0x64
 8004612:	d901      	bls.n	8004618 <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 8004614:	2303      	movs	r3, #3
 8004616:	e1f5      	b.n	8004a04 <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004618:	4b0b      	ldr	r3, [pc, #44]	; (8004648 <HAL_RCC_OscConfig+0x344>)
 800461a:	681a      	ldr	r2, [r3, #0]
 800461c:	2380      	movs	r3, #128	; 0x80
 800461e:	005b      	lsls	r3, r3, #1
 8004620:	4013      	ands	r3, r2
 8004622:	d0f0      	beq.n	8004606 <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	689b      	ldr	r3, [r3, #8]
 8004628:	2b01      	cmp	r3, #1
 800462a:	d10f      	bne.n	800464c <HAL_RCC_OscConfig+0x348>
 800462c:	4b03      	ldr	r3, [pc, #12]	; (800463c <HAL_RCC_OscConfig+0x338>)
 800462e:	6a1a      	ldr	r2, [r3, #32]
 8004630:	4b02      	ldr	r3, [pc, #8]	; (800463c <HAL_RCC_OscConfig+0x338>)
 8004632:	2101      	movs	r1, #1
 8004634:	430a      	orrs	r2, r1
 8004636:	621a      	str	r2, [r3, #32]
 8004638:	e036      	b.n	80046a8 <HAL_RCC_OscConfig+0x3a4>
 800463a:	46c0      	nop			; (mov r8, r8)
 800463c:	40021000 	.word	0x40021000
 8004640:	fffeffff 	.word	0xfffeffff
 8004644:	fffbffff 	.word	0xfffbffff
 8004648:	40007000 	.word	0x40007000
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	689b      	ldr	r3, [r3, #8]
 8004650:	2b00      	cmp	r3, #0
 8004652:	d10c      	bne.n	800466e <HAL_RCC_OscConfig+0x36a>
 8004654:	4bca      	ldr	r3, [pc, #808]	; (8004980 <HAL_RCC_OscConfig+0x67c>)
 8004656:	6a1a      	ldr	r2, [r3, #32]
 8004658:	4bc9      	ldr	r3, [pc, #804]	; (8004980 <HAL_RCC_OscConfig+0x67c>)
 800465a:	2101      	movs	r1, #1
 800465c:	438a      	bics	r2, r1
 800465e:	621a      	str	r2, [r3, #32]
 8004660:	4bc7      	ldr	r3, [pc, #796]	; (8004980 <HAL_RCC_OscConfig+0x67c>)
 8004662:	6a1a      	ldr	r2, [r3, #32]
 8004664:	4bc6      	ldr	r3, [pc, #792]	; (8004980 <HAL_RCC_OscConfig+0x67c>)
 8004666:	2104      	movs	r1, #4
 8004668:	438a      	bics	r2, r1
 800466a:	621a      	str	r2, [r3, #32]
 800466c:	e01c      	b.n	80046a8 <HAL_RCC_OscConfig+0x3a4>
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	689b      	ldr	r3, [r3, #8]
 8004672:	2b05      	cmp	r3, #5
 8004674:	d10c      	bne.n	8004690 <HAL_RCC_OscConfig+0x38c>
 8004676:	4bc2      	ldr	r3, [pc, #776]	; (8004980 <HAL_RCC_OscConfig+0x67c>)
 8004678:	6a1a      	ldr	r2, [r3, #32]
 800467a:	4bc1      	ldr	r3, [pc, #772]	; (8004980 <HAL_RCC_OscConfig+0x67c>)
 800467c:	2104      	movs	r1, #4
 800467e:	430a      	orrs	r2, r1
 8004680:	621a      	str	r2, [r3, #32]
 8004682:	4bbf      	ldr	r3, [pc, #764]	; (8004980 <HAL_RCC_OscConfig+0x67c>)
 8004684:	6a1a      	ldr	r2, [r3, #32]
 8004686:	4bbe      	ldr	r3, [pc, #760]	; (8004980 <HAL_RCC_OscConfig+0x67c>)
 8004688:	2101      	movs	r1, #1
 800468a:	430a      	orrs	r2, r1
 800468c:	621a      	str	r2, [r3, #32]
 800468e:	e00b      	b.n	80046a8 <HAL_RCC_OscConfig+0x3a4>
 8004690:	4bbb      	ldr	r3, [pc, #748]	; (8004980 <HAL_RCC_OscConfig+0x67c>)
 8004692:	6a1a      	ldr	r2, [r3, #32]
 8004694:	4bba      	ldr	r3, [pc, #744]	; (8004980 <HAL_RCC_OscConfig+0x67c>)
 8004696:	2101      	movs	r1, #1
 8004698:	438a      	bics	r2, r1
 800469a:	621a      	str	r2, [r3, #32]
 800469c:	4bb8      	ldr	r3, [pc, #736]	; (8004980 <HAL_RCC_OscConfig+0x67c>)
 800469e:	6a1a      	ldr	r2, [r3, #32]
 80046a0:	4bb7      	ldr	r3, [pc, #732]	; (8004980 <HAL_RCC_OscConfig+0x67c>)
 80046a2:	2104      	movs	r1, #4
 80046a4:	438a      	bics	r2, r1
 80046a6:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	689b      	ldr	r3, [r3, #8]
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d014      	beq.n	80046da <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80046b0:	f7fd f8ee 	bl	8001890 <HAL_GetTick>
 80046b4:	0003      	movs	r3, r0
 80046b6:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80046b8:	e009      	b.n	80046ce <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80046ba:	f7fd f8e9 	bl	8001890 <HAL_GetTick>
 80046be:	0002      	movs	r2, r0
 80046c0:	69bb      	ldr	r3, [r7, #24]
 80046c2:	1ad3      	subs	r3, r2, r3
 80046c4:	4aaf      	ldr	r2, [pc, #700]	; (8004984 <HAL_RCC_OscConfig+0x680>)
 80046c6:	4293      	cmp	r3, r2
 80046c8:	d901      	bls.n	80046ce <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 80046ca:	2303      	movs	r3, #3
 80046cc:	e19a      	b.n	8004a04 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80046ce:	4bac      	ldr	r3, [pc, #688]	; (8004980 <HAL_RCC_OscConfig+0x67c>)
 80046d0:	6a1b      	ldr	r3, [r3, #32]
 80046d2:	2202      	movs	r2, #2
 80046d4:	4013      	ands	r3, r2
 80046d6:	d0f0      	beq.n	80046ba <HAL_RCC_OscConfig+0x3b6>
 80046d8:	e013      	b.n	8004702 <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80046da:	f7fd f8d9 	bl	8001890 <HAL_GetTick>
 80046de:	0003      	movs	r3, r0
 80046e0:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80046e2:	e009      	b.n	80046f8 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80046e4:	f7fd f8d4 	bl	8001890 <HAL_GetTick>
 80046e8:	0002      	movs	r2, r0
 80046ea:	69bb      	ldr	r3, [r7, #24]
 80046ec:	1ad3      	subs	r3, r2, r3
 80046ee:	4aa5      	ldr	r2, [pc, #660]	; (8004984 <HAL_RCC_OscConfig+0x680>)
 80046f0:	4293      	cmp	r3, r2
 80046f2:	d901      	bls.n	80046f8 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 80046f4:	2303      	movs	r3, #3
 80046f6:	e185      	b.n	8004a04 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80046f8:	4ba1      	ldr	r3, [pc, #644]	; (8004980 <HAL_RCC_OscConfig+0x67c>)
 80046fa:	6a1b      	ldr	r3, [r3, #32]
 80046fc:	2202      	movs	r2, #2
 80046fe:	4013      	ands	r3, r2
 8004700:	d1f0      	bne.n	80046e4 <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004702:	231f      	movs	r3, #31
 8004704:	18fb      	adds	r3, r7, r3
 8004706:	781b      	ldrb	r3, [r3, #0]
 8004708:	2b01      	cmp	r3, #1
 800470a:	d105      	bne.n	8004718 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800470c:	4b9c      	ldr	r3, [pc, #624]	; (8004980 <HAL_RCC_OscConfig+0x67c>)
 800470e:	69da      	ldr	r2, [r3, #28]
 8004710:	4b9b      	ldr	r3, [pc, #620]	; (8004980 <HAL_RCC_OscConfig+0x67c>)
 8004712:	499d      	ldr	r1, [pc, #628]	; (8004988 <HAL_RCC_OscConfig+0x684>)
 8004714:	400a      	ands	r2, r1
 8004716:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	2210      	movs	r2, #16
 800471e:	4013      	ands	r3, r2
 8004720:	d063      	beq.n	80047ea <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	695b      	ldr	r3, [r3, #20]
 8004726:	2b01      	cmp	r3, #1
 8004728:	d12a      	bne.n	8004780 <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800472a:	4b95      	ldr	r3, [pc, #596]	; (8004980 <HAL_RCC_OscConfig+0x67c>)
 800472c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800472e:	4b94      	ldr	r3, [pc, #592]	; (8004980 <HAL_RCC_OscConfig+0x67c>)
 8004730:	2104      	movs	r1, #4
 8004732:	430a      	orrs	r2, r1
 8004734:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8004736:	4b92      	ldr	r3, [pc, #584]	; (8004980 <HAL_RCC_OscConfig+0x67c>)
 8004738:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800473a:	4b91      	ldr	r3, [pc, #580]	; (8004980 <HAL_RCC_OscConfig+0x67c>)
 800473c:	2101      	movs	r1, #1
 800473e:	430a      	orrs	r2, r1
 8004740:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004742:	f7fd f8a5 	bl	8001890 <HAL_GetTick>
 8004746:	0003      	movs	r3, r0
 8004748:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800474a:	e008      	b.n	800475e <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800474c:	f7fd f8a0 	bl	8001890 <HAL_GetTick>
 8004750:	0002      	movs	r2, r0
 8004752:	69bb      	ldr	r3, [r7, #24]
 8004754:	1ad3      	subs	r3, r2, r3
 8004756:	2b02      	cmp	r3, #2
 8004758:	d901      	bls.n	800475e <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 800475a:	2303      	movs	r3, #3
 800475c:	e152      	b.n	8004a04 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800475e:	4b88      	ldr	r3, [pc, #544]	; (8004980 <HAL_RCC_OscConfig+0x67c>)
 8004760:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004762:	2202      	movs	r2, #2
 8004764:	4013      	ands	r3, r2
 8004766:	d0f1      	beq.n	800474c <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8004768:	4b85      	ldr	r3, [pc, #532]	; (8004980 <HAL_RCC_OscConfig+0x67c>)
 800476a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800476c:	22f8      	movs	r2, #248	; 0xf8
 800476e:	4393      	bics	r3, r2
 8004770:	0019      	movs	r1, r3
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	699b      	ldr	r3, [r3, #24]
 8004776:	00da      	lsls	r2, r3, #3
 8004778:	4b81      	ldr	r3, [pc, #516]	; (8004980 <HAL_RCC_OscConfig+0x67c>)
 800477a:	430a      	orrs	r2, r1
 800477c:	635a      	str	r2, [r3, #52]	; 0x34
 800477e:	e034      	b.n	80047ea <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	695b      	ldr	r3, [r3, #20]
 8004784:	3305      	adds	r3, #5
 8004786:	d111      	bne.n	80047ac <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8004788:	4b7d      	ldr	r3, [pc, #500]	; (8004980 <HAL_RCC_OscConfig+0x67c>)
 800478a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800478c:	4b7c      	ldr	r3, [pc, #496]	; (8004980 <HAL_RCC_OscConfig+0x67c>)
 800478e:	2104      	movs	r1, #4
 8004790:	438a      	bics	r2, r1
 8004792:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8004794:	4b7a      	ldr	r3, [pc, #488]	; (8004980 <HAL_RCC_OscConfig+0x67c>)
 8004796:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004798:	22f8      	movs	r2, #248	; 0xf8
 800479a:	4393      	bics	r3, r2
 800479c:	0019      	movs	r1, r3
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	699b      	ldr	r3, [r3, #24]
 80047a2:	00da      	lsls	r2, r3, #3
 80047a4:	4b76      	ldr	r3, [pc, #472]	; (8004980 <HAL_RCC_OscConfig+0x67c>)
 80047a6:	430a      	orrs	r2, r1
 80047a8:	635a      	str	r2, [r3, #52]	; 0x34
 80047aa:	e01e      	b.n	80047ea <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80047ac:	4b74      	ldr	r3, [pc, #464]	; (8004980 <HAL_RCC_OscConfig+0x67c>)
 80047ae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80047b0:	4b73      	ldr	r3, [pc, #460]	; (8004980 <HAL_RCC_OscConfig+0x67c>)
 80047b2:	2104      	movs	r1, #4
 80047b4:	430a      	orrs	r2, r1
 80047b6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 80047b8:	4b71      	ldr	r3, [pc, #452]	; (8004980 <HAL_RCC_OscConfig+0x67c>)
 80047ba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80047bc:	4b70      	ldr	r3, [pc, #448]	; (8004980 <HAL_RCC_OscConfig+0x67c>)
 80047be:	2101      	movs	r1, #1
 80047c0:	438a      	bics	r2, r1
 80047c2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80047c4:	f7fd f864 	bl	8001890 <HAL_GetTick>
 80047c8:	0003      	movs	r3, r0
 80047ca:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80047cc:	e008      	b.n	80047e0 <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80047ce:	f7fd f85f 	bl	8001890 <HAL_GetTick>
 80047d2:	0002      	movs	r2, r0
 80047d4:	69bb      	ldr	r3, [r7, #24]
 80047d6:	1ad3      	subs	r3, r2, r3
 80047d8:	2b02      	cmp	r3, #2
 80047da:	d901      	bls.n	80047e0 <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 80047dc:	2303      	movs	r3, #3
 80047de:	e111      	b.n	8004a04 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80047e0:	4b67      	ldr	r3, [pc, #412]	; (8004980 <HAL_RCC_OscConfig+0x67c>)
 80047e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047e4:	2202      	movs	r2, #2
 80047e6:	4013      	ands	r3, r2
 80047e8:	d1f1      	bne.n	80047ce <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	2220      	movs	r2, #32
 80047f0:	4013      	ands	r3, r2
 80047f2:	d05c      	beq.n	80048ae <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 80047f4:	4b62      	ldr	r3, [pc, #392]	; (8004980 <HAL_RCC_OscConfig+0x67c>)
 80047f6:	685b      	ldr	r3, [r3, #4]
 80047f8:	220c      	movs	r2, #12
 80047fa:	4013      	ands	r3, r2
 80047fc:	2b0c      	cmp	r3, #12
 80047fe:	d00e      	beq.n	800481e <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8004800:	4b5f      	ldr	r3, [pc, #380]	; (8004980 <HAL_RCC_OscConfig+0x67c>)
 8004802:	685b      	ldr	r3, [r3, #4]
 8004804:	220c      	movs	r2, #12
 8004806:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8004808:	2b08      	cmp	r3, #8
 800480a:	d114      	bne.n	8004836 <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 800480c:	4b5c      	ldr	r3, [pc, #368]	; (8004980 <HAL_RCC_OscConfig+0x67c>)
 800480e:	685a      	ldr	r2, [r3, #4]
 8004810:	23c0      	movs	r3, #192	; 0xc0
 8004812:	025b      	lsls	r3, r3, #9
 8004814:	401a      	ands	r2, r3
 8004816:	23c0      	movs	r3, #192	; 0xc0
 8004818:	025b      	lsls	r3, r3, #9
 800481a:	429a      	cmp	r2, r3
 800481c:	d10b      	bne.n	8004836 <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 800481e:	4b58      	ldr	r3, [pc, #352]	; (8004980 <HAL_RCC_OscConfig+0x67c>)
 8004820:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004822:	2380      	movs	r3, #128	; 0x80
 8004824:	025b      	lsls	r3, r3, #9
 8004826:	4013      	ands	r3, r2
 8004828:	d040      	beq.n	80048ac <HAL_RCC_OscConfig+0x5a8>
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	6a1b      	ldr	r3, [r3, #32]
 800482e:	2b01      	cmp	r3, #1
 8004830:	d03c      	beq.n	80048ac <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8004832:	2301      	movs	r3, #1
 8004834:	e0e6      	b.n	8004a04 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	6a1b      	ldr	r3, [r3, #32]
 800483a:	2b00      	cmp	r3, #0
 800483c:	d01b      	beq.n	8004876 <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 800483e:	4b50      	ldr	r3, [pc, #320]	; (8004980 <HAL_RCC_OscConfig+0x67c>)
 8004840:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004842:	4b4f      	ldr	r3, [pc, #316]	; (8004980 <HAL_RCC_OscConfig+0x67c>)
 8004844:	2180      	movs	r1, #128	; 0x80
 8004846:	0249      	lsls	r1, r1, #9
 8004848:	430a      	orrs	r2, r1
 800484a:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800484c:	f7fd f820 	bl	8001890 <HAL_GetTick>
 8004850:	0003      	movs	r3, r0
 8004852:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8004854:	e008      	b.n	8004868 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004856:	f7fd f81b 	bl	8001890 <HAL_GetTick>
 800485a:	0002      	movs	r2, r0
 800485c:	69bb      	ldr	r3, [r7, #24]
 800485e:	1ad3      	subs	r3, r2, r3
 8004860:	2b02      	cmp	r3, #2
 8004862:	d901      	bls.n	8004868 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 8004864:	2303      	movs	r3, #3
 8004866:	e0cd      	b.n	8004a04 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8004868:	4b45      	ldr	r3, [pc, #276]	; (8004980 <HAL_RCC_OscConfig+0x67c>)
 800486a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800486c:	2380      	movs	r3, #128	; 0x80
 800486e:	025b      	lsls	r3, r3, #9
 8004870:	4013      	ands	r3, r2
 8004872:	d0f0      	beq.n	8004856 <HAL_RCC_OscConfig+0x552>
 8004874:	e01b      	b.n	80048ae <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8004876:	4b42      	ldr	r3, [pc, #264]	; (8004980 <HAL_RCC_OscConfig+0x67c>)
 8004878:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800487a:	4b41      	ldr	r3, [pc, #260]	; (8004980 <HAL_RCC_OscConfig+0x67c>)
 800487c:	4943      	ldr	r1, [pc, #268]	; (800498c <HAL_RCC_OscConfig+0x688>)
 800487e:	400a      	ands	r2, r1
 8004880:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004882:	f7fd f805 	bl	8001890 <HAL_GetTick>
 8004886:	0003      	movs	r3, r0
 8004888:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 800488a:	e008      	b.n	800489e <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800488c:	f7fd f800 	bl	8001890 <HAL_GetTick>
 8004890:	0002      	movs	r2, r0
 8004892:	69bb      	ldr	r3, [r7, #24]
 8004894:	1ad3      	subs	r3, r2, r3
 8004896:	2b02      	cmp	r3, #2
 8004898:	d901      	bls.n	800489e <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 800489a:	2303      	movs	r3, #3
 800489c:	e0b2      	b.n	8004a04 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 800489e:	4b38      	ldr	r3, [pc, #224]	; (8004980 <HAL_RCC_OscConfig+0x67c>)
 80048a0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80048a2:	2380      	movs	r3, #128	; 0x80
 80048a4:	025b      	lsls	r3, r3, #9
 80048a6:	4013      	ands	r3, r2
 80048a8:	d1f0      	bne.n	800488c <HAL_RCC_OscConfig+0x588>
 80048aa:	e000      	b.n	80048ae <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 80048ac:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d100      	bne.n	80048b8 <HAL_RCC_OscConfig+0x5b4>
 80048b6:	e0a4      	b.n	8004a02 <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80048b8:	4b31      	ldr	r3, [pc, #196]	; (8004980 <HAL_RCC_OscConfig+0x67c>)
 80048ba:	685b      	ldr	r3, [r3, #4]
 80048bc:	220c      	movs	r2, #12
 80048be:	4013      	ands	r3, r2
 80048c0:	2b08      	cmp	r3, #8
 80048c2:	d100      	bne.n	80048c6 <HAL_RCC_OscConfig+0x5c2>
 80048c4:	e078      	b.n	80049b8 <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048ca:	2b02      	cmp	r3, #2
 80048cc:	d14c      	bne.n	8004968 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80048ce:	4b2c      	ldr	r3, [pc, #176]	; (8004980 <HAL_RCC_OscConfig+0x67c>)
 80048d0:	681a      	ldr	r2, [r3, #0]
 80048d2:	4b2b      	ldr	r3, [pc, #172]	; (8004980 <HAL_RCC_OscConfig+0x67c>)
 80048d4:	492e      	ldr	r1, [pc, #184]	; (8004990 <HAL_RCC_OscConfig+0x68c>)
 80048d6:	400a      	ands	r2, r1
 80048d8:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048da:	f7fc ffd9 	bl	8001890 <HAL_GetTick>
 80048de:	0003      	movs	r3, r0
 80048e0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80048e2:	e008      	b.n	80048f6 <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80048e4:	f7fc ffd4 	bl	8001890 <HAL_GetTick>
 80048e8:	0002      	movs	r2, r0
 80048ea:	69bb      	ldr	r3, [r7, #24]
 80048ec:	1ad3      	subs	r3, r2, r3
 80048ee:	2b02      	cmp	r3, #2
 80048f0:	d901      	bls.n	80048f6 <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 80048f2:	2303      	movs	r3, #3
 80048f4:	e086      	b.n	8004a04 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80048f6:	4b22      	ldr	r3, [pc, #136]	; (8004980 <HAL_RCC_OscConfig+0x67c>)
 80048f8:	681a      	ldr	r2, [r3, #0]
 80048fa:	2380      	movs	r3, #128	; 0x80
 80048fc:	049b      	lsls	r3, r3, #18
 80048fe:	4013      	ands	r3, r2
 8004900:	d1f0      	bne.n	80048e4 <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004902:	4b1f      	ldr	r3, [pc, #124]	; (8004980 <HAL_RCC_OscConfig+0x67c>)
 8004904:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004906:	220f      	movs	r2, #15
 8004908:	4393      	bics	r3, r2
 800490a:	0019      	movs	r1, r3
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004910:	4b1b      	ldr	r3, [pc, #108]	; (8004980 <HAL_RCC_OscConfig+0x67c>)
 8004912:	430a      	orrs	r2, r1
 8004914:	62da      	str	r2, [r3, #44]	; 0x2c
 8004916:	4b1a      	ldr	r3, [pc, #104]	; (8004980 <HAL_RCC_OscConfig+0x67c>)
 8004918:	685b      	ldr	r3, [r3, #4]
 800491a:	4a1e      	ldr	r2, [pc, #120]	; (8004994 <HAL_RCC_OscConfig+0x690>)
 800491c:	4013      	ands	r3, r2
 800491e:	0019      	movs	r1, r3
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004928:	431a      	orrs	r2, r3
 800492a:	4b15      	ldr	r3, [pc, #84]	; (8004980 <HAL_RCC_OscConfig+0x67c>)
 800492c:	430a      	orrs	r2, r1
 800492e:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004930:	4b13      	ldr	r3, [pc, #76]	; (8004980 <HAL_RCC_OscConfig+0x67c>)
 8004932:	681a      	ldr	r2, [r3, #0]
 8004934:	4b12      	ldr	r3, [pc, #72]	; (8004980 <HAL_RCC_OscConfig+0x67c>)
 8004936:	2180      	movs	r1, #128	; 0x80
 8004938:	0449      	lsls	r1, r1, #17
 800493a:	430a      	orrs	r2, r1
 800493c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800493e:	f7fc ffa7 	bl	8001890 <HAL_GetTick>
 8004942:	0003      	movs	r3, r0
 8004944:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004946:	e008      	b.n	800495a <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004948:	f7fc ffa2 	bl	8001890 <HAL_GetTick>
 800494c:	0002      	movs	r2, r0
 800494e:	69bb      	ldr	r3, [r7, #24]
 8004950:	1ad3      	subs	r3, r2, r3
 8004952:	2b02      	cmp	r3, #2
 8004954:	d901      	bls.n	800495a <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 8004956:	2303      	movs	r3, #3
 8004958:	e054      	b.n	8004a04 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800495a:	4b09      	ldr	r3, [pc, #36]	; (8004980 <HAL_RCC_OscConfig+0x67c>)
 800495c:	681a      	ldr	r2, [r3, #0]
 800495e:	2380      	movs	r3, #128	; 0x80
 8004960:	049b      	lsls	r3, r3, #18
 8004962:	4013      	ands	r3, r2
 8004964:	d0f0      	beq.n	8004948 <HAL_RCC_OscConfig+0x644>
 8004966:	e04c      	b.n	8004a02 <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004968:	4b05      	ldr	r3, [pc, #20]	; (8004980 <HAL_RCC_OscConfig+0x67c>)
 800496a:	681a      	ldr	r2, [r3, #0]
 800496c:	4b04      	ldr	r3, [pc, #16]	; (8004980 <HAL_RCC_OscConfig+0x67c>)
 800496e:	4908      	ldr	r1, [pc, #32]	; (8004990 <HAL_RCC_OscConfig+0x68c>)
 8004970:	400a      	ands	r2, r1
 8004972:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004974:	f7fc ff8c 	bl	8001890 <HAL_GetTick>
 8004978:	0003      	movs	r3, r0
 800497a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800497c:	e015      	b.n	80049aa <HAL_RCC_OscConfig+0x6a6>
 800497e:	46c0      	nop			; (mov r8, r8)
 8004980:	40021000 	.word	0x40021000
 8004984:	00001388 	.word	0x00001388
 8004988:	efffffff 	.word	0xefffffff
 800498c:	fffeffff 	.word	0xfffeffff
 8004990:	feffffff 	.word	0xfeffffff
 8004994:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004998:	f7fc ff7a 	bl	8001890 <HAL_GetTick>
 800499c:	0002      	movs	r2, r0
 800499e:	69bb      	ldr	r3, [r7, #24]
 80049a0:	1ad3      	subs	r3, r2, r3
 80049a2:	2b02      	cmp	r3, #2
 80049a4:	d901      	bls.n	80049aa <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 80049a6:	2303      	movs	r3, #3
 80049a8:	e02c      	b.n	8004a04 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80049aa:	4b18      	ldr	r3, [pc, #96]	; (8004a0c <HAL_RCC_OscConfig+0x708>)
 80049ac:	681a      	ldr	r2, [r3, #0]
 80049ae:	2380      	movs	r3, #128	; 0x80
 80049b0:	049b      	lsls	r3, r3, #18
 80049b2:	4013      	ands	r3, r2
 80049b4:	d1f0      	bne.n	8004998 <HAL_RCC_OscConfig+0x694>
 80049b6:	e024      	b.n	8004a02 <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049bc:	2b01      	cmp	r3, #1
 80049be:	d101      	bne.n	80049c4 <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 80049c0:	2301      	movs	r3, #1
 80049c2:	e01f      	b.n	8004a04 <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 80049c4:	4b11      	ldr	r3, [pc, #68]	; (8004a0c <HAL_RCC_OscConfig+0x708>)
 80049c6:	685b      	ldr	r3, [r3, #4]
 80049c8:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 80049ca:	4b10      	ldr	r3, [pc, #64]	; (8004a0c <HAL_RCC_OscConfig+0x708>)
 80049cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049ce:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80049d0:	697a      	ldr	r2, [r7, #20]
 80049d2:	23c0      	movs	r3, #192	; 0xc0
 80049d4:	025b      	lsls	r3, r3, #9
 80049d6:	401a      	ands	r2, r3
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049dc:	429a      	cmp	r2, r3
 80049de:	d10e      	bne.n	80049fe <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80049e0:	693b      	ldr	r3, [r7, #16]
 80049e2:	220f      	movs	r2, #15
 80049e4:	401a      	ands	r2, r3
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80049ea:	429a      	cmp	r2, r3
 80049ec:	d107      	bne.n	80049fe <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 80049ee:	697a      	ldr	r2, [r7, #20]
 80049f0:	23f0      	movs	r3, #240	; 0xf0
 80049f2:	039b      	lsls	r3, r3, #14
 80049f4:	401a      	ands	r2, r3
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80049fa:	429a      	cmp	r2, r3
 80049fc:	d001      	beq.n	8004a02 <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 80049fe:	2301      	movs	r3, #1
 8004a00:	e000      	b.n	8004a04 <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 8004a02:	2300      	movs	r3, #0
}
 8004a04:	0018      	movs	r0, r3
 8004a06:	46bd      	mov	sp, r7
 8004a08:	b008      	add	sp, #32
 8004a0a:	bd80      	pop	{r7, pc}
 8004a0c:	40021000 	.word	0x40021000

08004a10 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004a10:	b580      	push	{r7, lr}
 8004a12:	b084      	sub	sp, #16
 8004a14:	af00      	add	r7, sp, #0
 8004a16:	6078      	str	r0, [r7, #4]
 8004a18:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d101      	bne.n	8004a24 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004a20:	2301      	movs	r3, #1
 8004a22:	e0bf      	b.n	8004ba4 <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004a24:	4b61      	ldr	r3, [pc, #388]	; (8004bac <HAL_RCC_ClockConfig+0x19c>)
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	2201      	movs	r2, #1
 8004a2a:	4013      	ands	r3, r2
 8004a2c:	683a      	ldr	r2, [r7, #0]
 8004a2e:	429a      	cmp	r2, r3
 8004a30:	d911      	bls.n	8004a56 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a32:	4b5e      	ldr	r3, [pc, #376]	; (8004bac <HAL_RCC_ClockConfig+0x19c>)
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	2201      	movs	r2, #1
 8004a38:	4393      	bics	r3, r2
 8004a3a:	0019      	movs	r1, r3
 8004a3c:	4b5b      	ldr	r3, [pc, #364]	; (8004bac <HAL_RCC_ClockConfig+0x19c>)
 8004a3e:	683a      	ldr	r2, [r7, #0]
 8004a40:	430a      	orrs	r2, r1
 8004a42:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a44:	4b59      	ldr	r3, [pc, #356]	; (8004bac <HAL_RCC_ClockConfig+0x19c>)
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	2201      	movs	r2, #1
 8004a4a:	4013      	ands	r3, r2
 8004a4c:	683a      	ldr	r2, [r7, #0]
 8004a4e:	429a      	cmp	r2, r3
 8004a50:	d001      	beq.n	8004a56 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8004a52:	2301      	movs	r3, #1
 8004a54:	e0a6      	b.n	8004ba4 <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	2202      	movs	r2, #2
 8004a5c:	4013      	ands	r3, r2
 8004a5e:	d015      	beq.n	8004a8c <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	2204      	movs	r2, #4
 8004a66:	4013      	ands	r3, r2
 8004a68:	d006      	beq.n	8004a78 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8004a6a:	4b51      	ldr	r3, [pc, #324]	; (8004bb0 <HAL_RCC_ClockConfig+0x1a0>)
 8004a6c:	685a      	ldr	r2, [r3, #4]
 8004a6e:	4b50      	ldr	r3, [pc, #320]	; (8004bb0 <HAL_RCC_ClockConfig+0x1a0>)
 8004a70:	21e0      	movs	r1, #224	; 0xe0
 8004a72:	00c9      	lsls	r1, r1, #3
 8004a74:	430a      	orrs	r2, r1
 8004a76:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004a78:	4b4d      	ldr	r3, [pc, #308]	; (8004bb0 <HAL_RCC_ClockConfig+0x1a0>)
 8004a7a:	685b      	ldr	r3, [r3, #4]
 8004a7c:	22f0      	movs	r2, #240	; 0xf0
 8004a7e:	4393      	bics	r3, r2
 8004a80:	0019      	movs	r1, r3
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	689a      	ldr	r2, [r3, #8]
 8004a86:	4b4a      	ldr	r3, [pc, #296]	; (8004bb0 <HAL_RCC_ClockConfig+0x1a0>)
 8004a88:	430a      	orrs	r2, r1
 8004a8a:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	2201      	movs	r2, #1
 8004a92:	4013      	ands	r3, r2
 8004a94:	d04c      	beq.n	8004b30 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	685b      	ldr	r3, [r3, #4]
 8004a9a:	2b01      	cmp	r3, #1
 8004a9c:	d107      	bne.n	8004aae <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004a9e:	4b44      	ldr	r3, [pc, #272]	; (8004bb0 <HAL_RCC_ClockConfig+0x1a0>)
 8004aa0:	681a      	ldr	r2, [r3, #0]
 8004aa2:	2380      	movs	r3, #128	; 0x80
 8004aa4:	029b      	lsls	r3, r3, #10
 8004aa6:	4013      	ands	r3, r2
 8004aa8:	d120      	bne.n	8004aec <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8004aaa:	2301      	movs	r3, #1
 8004aac:	e07a      	b.n	8004ba4 <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	685b      	ldr	r3, [r3, #4]
 8004ab2:	2b02      	cmp	r3, #2
 8004ab4:	d107      	bne.n	8004ac6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004ab6:	4b3e      	ldr	r3, [pc, #248]	; (8004bb0 <HAL_RCC_ClockConfig+0x1a0>)
 8004ab8:	681a      	ldr	r2, [r3, #0]
 8004aba:	2380      	movs	r3, #128	; 0x80
 8004abc:	049b      	lsls	r3, r3, #18
 8004abe:	4013      	ands	r3, r2
 8004ac0:	d114      	bne.n	8004aec <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8004ac2:	2301      	movs	r3, #1
 8004ac4:	e06e      	b.n	8004ba4 <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	685b      	ldr	r3, [r3, #4]
 8004aca:	2b03      	cmp	r3, #3
 8004acc:	d107      	bne.n	8004ade <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8004ace:	4b38      	ldr	r3, [pc, #224]	; (8004bb0 <HAL_RCC_ClockConfig+0x1a0>)
 8004ad0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004ad2:	2380      	movs	r3, #128	; 0x80
 8004ad4:	025b      	lsls	r3, r3, #9
 8004ad6:	4013      	ands	r3, r2
 8004ad8:	d108      	bne.n	8004aec <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8004ada:	2301      	movs	r3, #1
 8004adc:	e062      	b.n	8004ba4 <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004ade:	4b34      	ldr	r3, [pc, #208]	; (8004bb0 <HAL_RCC_ClockConfig+0x1a0>)
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	2202      	movs	r2, #2
 8004ae4:	4013      	ands	r3, r2
 8004ae6:	d101      	bne.n	8004aec <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8004ae8:	2301      	movs	r3, #1
 8004aea:	e05b      	b.n	8004ba4 <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004aec:	4b30      	ldr	r3, [pc, #192]	; (8004bb0 <HAL_RCC_ClockConfig+0x1a0>)
 8004aee:	685b      	ldr	r3, [r3, #4]
 8004af0:	2203      	movs	r2, #3
 8004af2:	4393      	bics	r3, r2
 8004af4:	0019      	movs	r1, r3
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	685a      	ldr	r2, [r3, #4]
 8004afa:	4b2d      	ldr	r3, [pc, #180]	; (8004bb0 <HAL_RCC_ClockConfig+0x1a0>)
 8004afc:	430a      	orrs	r2, r1
 8004afe:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004b00:	f7fc fec6 	bl	8001890 <HAL_GetTick>
 8004b04:	0003      	movs	r3, r0
 8004b06:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b08:	e009      	b.n	8004b1e <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004b0a:	f7fc fec1 	bl	8001890 <HAL_GetTick>
 8004b0e:	0002      	movs	r2, r0
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	1ad3      	subs	r3, r2, r3
 8004b14:	4a27      	ldr	r2, [pc, #156]	; (8004bb4 <HAL_RCC_ClockConfig+0x1a4>)
 8004b16:	4293      	cmp	r3, r2
 8004b18:	d901      	bls.n	8004b1e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004b1a:	2303      	movs	r3, #3
 8004b1c:	e042      	b.n	8004ba4 <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b1e:	4b24      	ldr	r3, [pc, #144]	; (8004bb0 <HAL_RCC_ClockConfig+0x1a0>)
 8004b20:	685b      	ldr	r3, [r3, #4]
 8004b22:	220c      	movs	r2, #12
 8004b24:	401a      	ands	r2, r3
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	685b      	ldr	r3, [r3, #4]
 8004b2a:	009b      	lsls	r3, r3, #2
 8004b2c:	429a      	cmp	r2, r3
 8004b2e:	d1ec      	bne.n	8004b0a <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004b30:	4b1e      	ldr	r3, [pc, #120]	; (8004bac <HAL_RCC_ClockConfig+0x19c>)
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	2201      	movs	r2, #1
 8004b36:	4013      	ands	r3, r2
 8004b38:	683a      	ldr	r2, [r7, #0]
 8004b3a:	429a      	cmp	r2, r3
 8004b3c:	d211      	bcs.n	8004b62 <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b3e:	4b1b      	ldr	r3, [pc, #108]	; (8004bac <HAL_RCC_ClockConfig+0x19c>)
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	2201      	movs	r2, #1
 8004b44:	4393      	bics	r3, r2
 8004b46:	0019      	movs	r1, r3
 8004b48:	4b18      	ldr	r3, [pc, #96]	; (8004bac <HAL_RCC_ClockConfig+0x19c>)
 8004b4a:	683a      	ldr	r2, [r7, #0]
 8004b4c:	430a      	orrs	r2, r1
 8004b4e:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b50:	4b16      	ldr	r3, [pc, #88]	; (8004bac <HAL_RCC_ClockConfig+0x19c>)
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	2201      	movs	r2, #1
 8004b56:	4013      	ands	r3, r2
 8004b58:	683a      	ldr	r2, [r7, #0]
 8004b5a:	429a      	cmp	r2, r3
 8004b5c:	d001      	beq.n	8004b62 <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 8004b5e:	2301      	movs	r3, #1
 8004b60:	e020      	b.n	8004ba4 <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	2204      	movs	r2, #4
 8004b68:	4013      	ands	r3, r2
 8004b6a:	d009      	beq.n	8004b80 <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8004b6c:	4b10      	ldr	r3, [pc, #64]	; (8004bb0 <HAL_RCC_ClockConfig+0x1a0>)
 8004b6e:	685b      	ldr	r3, [r3, #4]
 8004b70:	4a11      	ldr	r2, [pc, #68]	; (8004bb8 <HAL_RCC_ClockConfig+0x1a8>)
 8004b72:	4013      	ands	r3, r2
 8004b74:	0019      	movs	r1, r3
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	68da      	ldr	r2, [r3, #12]
 8004b7a:	4b0d      	ldr	r3, [pc, #52]	; (8004bb0 <HAL_RCC_ClockConfig+0x1a0>)
 8004b7c:	430a      	orrs	r2, r1
 8004b7e:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8004b80:	f000 f820 	bl	8004bc4 <HAL_RCC_GetSysClockFreq>
 8004b84:	0001      	movs	r1, r0
 8004b86:	4b0a      	ldr	r3, [pc, #40]	; (8004bb0 <HAL_RCC_ClockConfig+0x1a0>)
 8004b88:	685b      	ldr	r3, [r3, #4]
 8004b8a:	091b      	lsrs	r3, r3, #4
 8004b8c:	220f      	movs	r2, #15
 8004b8e:	4013      	ands	r3, r2
 8004b90:	4a0a      	ldr	r2, [pc, #40]	; (8004bbc <HAL_RCC_ClockConfig+0x1ac>)
 8004b92:	5cd3      	ldrb	r3, [r2, r3]
 8004b94:	000a      	movs	r2, r1
 8004b96:	40da      	lsrs	r2, r3
 8004b98:	4b09      	ldr	r3, [pc, #36]	; (8004bc0 <HAL_RCC_ClockConfig+0x1b0>)
 8004b9a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8004b9c:	2003      	movs	r0, #3
 8004b9e:	f7fc fe31 	bl	8001804 <HAL_InitTick>
  
  return HAL_OK;
 8004ba2:	2300      	movs	r3, #0
}
 8004ba4:	0018      	movs	r0, r3
 8004ba6:	46bd      	mov	sp, r7
 8004ba8:	b004      	add	sp, #16
 8004baa:	bd80      	pop	{r7, pc}
 8004bac:	40022000 	.word	0x40022000
 8004bb0:	40021000 	.word	0x40021000
 8004bb4:	00001388 	.word	0x00001388
 8004bb8:	fffff8ff 	.word	0xfffff8ff
 8004bbc:	0800c4e8 	.word	0x0800c4e8
 8004bc0:	20000000 	.word	0x20000000

08004bc4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004bc4:	b590      	push	{r4, r7, lr}
 8004bc6:	b08f      	sub	sp, #60	; 0x3c
 8004bc8:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8004bca:	2314      	movs	r3, #20
 8004bcc:	18fb      	adds	r3, r7, r3
 8004bce:	4a38      	ldr	r2, [pc, #224]	; (8004cb0 <HAL_RCC_GetSysClockFreq+0xec>)
 8004bd0:	ca13      	ldmia	r2!, {r0, r1, r4}
 8004bd2:	c313      	stmia	r3!, {r0, r1, r4}
 8004bd4:	6812      	ldr	r2, [r2, #0]
 8004bd6:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8004bd8:	1d3b      	adds	r3, r7, #4
 8004bda:	4a36      	ldr	r2, [pc, #216]	; (8004cb4 <HAL_RCC_GetSysClockFreq+0xf0>)
 8004bdc:	ca13      	ldmia	r2!, {r0, r1, r4}
 8004bde:	c313      	stmia	r3!, {r0, r1, r4}
 8004be0:	6812      	ldr	r2, [r2, #0]
 8004be2:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004be4:	2300      	movs	r3, #0
 8004be6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004be8:	2300      	movs	r3, #0
 8004bea:	62bb      	str	r3, [r7, #40]	; 0x28
 8004bec:	2300      	movs	r3, #0
 8004bee:	637b      	str	r3, [r7, #52]	; 0x34
 8004bf0:	2300      	movs	r3, #0
 8004bf2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8004bf4:	2300      	movs	r3, #0
 8004bf6:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8004bf8:	4b2f      	ldr	r3, [pc, #188]	; (8004cb8 <HAL_RCC_GetSysClockFreq+0xf4>)
 8004bfa:	685b      	ldr	r3, [r3, #4]
 8004bfc:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004bfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c00:	220c      	movs	r2, #12
 8004c02:	4013      	ands	r3, r2
 8004c04:	2b0c      	cmp	r3, #12
 8004c06:	d047      	beq.n	8004c98 <HAL_RCC_GetSysClockFreq+0xd4>
 8004c08:	d849      	bhi.n	8004c9e <HAL_RCC_GetSysClockFreq+0xda>
 8004c0a:	2b04      	cmp	r3, #4
 8004c0c:	d002      	beq.n	8004c14 <HAL_RCC_GetSysClockFreq+0x50>
 8004c0e:	2b08      	cmp	r3, #8
 8004c10:	d003      	beq.n	8004c1a <HAL_RCC_GetSysClockFreq+0x56>
 8004c12:	e044      	b.n	8004c9e <HAL_RCC_GetSysClockFreq+0xda>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004c14:	4b29      	ldr	r3, [pc, #164]	; (8004cbc <HAL_RCC_GetSysClockFreq+0xf8>)
 8004c16:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8004c18:	e044      	b.n	8004ca4 <HAL_RCC_GetSysClockFreq+0xe0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8004c1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c1c:	0c9b      	lsrs	r3, r3, #18
 8004c1e:	220f      	movs	r2, #15
 8004c20:	4013      	ands	r3, r2
 8004c22:	2214      	movs	r2, #20
 8004c24:	18ba      	adds	r2, r7, r2
 8004c26:	5cd3      	ldrb	r3, [r2, r3]
 8004c28:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8004c2a:	4b23      	ldr	r3, [pc, #140]	; (8004cb8 <HAL_RCC_GetSysClockFreq+0xf4>)
 8004c2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c2e:	220f      	movs	r2, #15
 8004c30:	4013      	ands	r3, r2
 8004c32:	1d3a      	adds	r2, r7, #4
 8004c34:	5cd3      	ldrb	r3, [r2, r3]
 8004c36:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004c38:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004c3a:	23c0      	movs	r3, #192	; 0xc0
 8004c3c:	025b      	lsls	r3, r3, #9
 8004c3e:	401a      	ands	r2, r3
 8004c40:	2380      	movs	r3, #128	; 0x80
 8004c42:	025b      	lsls	r3, r3, #9
 8004c44:	429a      	cmp	r2, r3
 8004c46:	d109      	bne.n	8004c5c <HAL_RCC_GetSysClockFreq+0x98>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004c48:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004c4a:	481c      	ldr	r0, [pc, #112]	; (8004cbc <HAL_RCC_GetSysClockFreq+0xf8>)
 8004c4c:	f7fb fa6e 	bl	800012c <__udivsi3>
 8004c50:	0003      	movs	r3, r0
 8004c52:	001a      	movs	r2, r3
 8004c54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c56:	4353      	muls	r3, r2
 8004c58:	637b      	str	r3, [r7, #52]	; 0x34
 8004c5a:	e01a      	b.n	8004c92 <HAL_RCC_GetSysClockFreq+0xce>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8004c5c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004c5e:	23c0      	movs	r3, #192	; 0xc0
 8004c60:	025b      	lsls	r3, r3, #9
 8004c62:	401a      	ands	r2, r3
 8004c64:	23c0      	movs	r3, #192	; 0xc0
 8004c66:	025b      	lsls	r3, r3, #9
 8004c68:	429a      	cmp	r2, r3
 8004c6a:	d109      	bne.n	8004c80 <HAL_RCC_GetSysClockFreq+0xbc>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004c6c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004c6e:	4814      	ldr	r0, [pc, #80]	; (8004cc0 <HAL_RCC_GetSysClockFreq+0xfc>)
 8004c70:	f7fb fa5c 	bl	800012c <__udivsi3>
 8004c74:	0003      	movs	r3, r0
 8004c76:	001a      	movs	r2, r3
 8004c78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c7a:	4353      	muls	r3, r2
 8004c7c:	637b      	str	r3, [r7, #52]	; 0x34
 8004c7e:	e008      	b.n	8004c92 <HAL_RCC_GetSysClockFreq+0xce>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004c80:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004c82:	4810      	ldr	r0, [pc, #64]	; (8004cc4 <HAL_RCC_GetSysClockFreq+0x100>)
 8004c84:	f7fb fa52 	bl	800012c <__udivsi3>
 8004c88:	0003      	movs	r3, r0
 8004c8a:	001a      	movs	r2, r3
 8004c8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c8e:	4353      	muls	r3, r2
 8004c90:	637b      	str	r3, [r7, #52]	; 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 8004c92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c94:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8004c96:	e005      	b.n	8004ca4 <HAL_RCC_GetSysClockFreq+0xe0>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 8004c98:	4b09      	ldr	r3, [pc, #36]	; (8004cc0 <HAL_RCC_GetSysClockFreq+0xfc>)
 8004c9a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8004c9c:	e002      	b.n	8004ca4 <HAL_RCC_GetSysClockFreq+0xe0>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004c9e:	4b09      	ldr	r3, [pc, #36]	; (8004cc4 <HAL_RCC_GetSysClockFreq+0x100>)
 8004ca0:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8004ca2:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8004ca4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8004ca6:	0018      	movs	r0, r3
 8004ca8:	46bd      	mov	sp, r7
 8004caa:	b00f      	add	sp, #60	; 0x3c
 8004cac:	bd90      	pop	{r4, r7, pc}
 8004cae:	46c0      	nop			; (mov r8, r8)
 8004cb0:	0800c480 	.word	0x0800c480
 8004cb4:	0800c490 	.word	0x0800c490
 8004cb8:	40021000 	.word	0x40021000
 8004cbc:	00f42400 	.word	0x00f42400
 8004cc0:	02dc6c00 	.word	0x02dc6c00
 8004cc4:	007a1200 	.word	0x007a1200

08004cc8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004cc8:	b580      	push	{r7, lr}
 8004cca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004ccc:	4b02      	ldr	r3, [pc, #8]	; (8004cd8 <HAL_RCC_GetHCLKFreq+0x10>)
 8004cce:	681b      	ldr	r3, [r3, #0]
}
 8004cd0:	0018      	movs	r0, r3
 8004cd2:	46bd      	mov	sp, r7
 8004cd4:	bd80      	pop	{r7, pc}
 8004cd6:	46c0      	nop			; (mov r8, r8)
 8004cd8:	20000000 	.word	0x20000000

08004cdc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004cdc:	b580      	push	{r7, lr}
 8004cde:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8004ce0:	f7ff fff2 	bl	8004cc8 <HAL_RCC_GetHCLKFreq>
 8004ce4:	0001      	movs	r1, r0
 8004ce6:	4b06      	ldr	r3, [pc, #24]	; (8004d00 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004ce8:	685b      	ldr	r3, [r3, #4]
 8004cea:	0a1b      	lsrs	r3, r3, #8
 8004cec:	2207      	movs	r2, #7
 8004cee:	4013      	ands	r3, r2
 8004cf0:	4a04      	ldr	r2, [pc, #16]	; (8004d04 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004cf2:	5cd3      	ldrb	r3, [r2, r3]
 8004cf4:	40d9      	lsrs	r1, r3
 8004cf6:	000b      	movs	r3, r1
}    
 8004cf8:	0018      	movs	r0, r3
 8004cfa:	46bd      	mov	sp, r7
 8004cfc:	bd80      	pop	{r7, pc}
 8004cfe:	46c0      	nop			; (mov r8, r8)
 8004d00:	40021000 	.word	0x40021000
 8004d04:	0800c4f8 	.word	0x0800c4f8

08004d08 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004d08:	b580      	push	{r7, lr}
 8004d0a:	b086      	sub	sp, #24
 8004d0c:	af00      	add	r7, sp, #0
 8004d0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004d10:	2300      	movs	r3, #0
 8004d12:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8004d14:	2300      	movs	r3, #0
 8004d16:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681a      	ldr	r2, [r3, #0]
 8004d1c:	2380      	movs	r3, #128	; 0x80
 8004d1e:	025b      	lsls	r3, r3, #9
 8004d20:	4013      	ands	r3, r2
 8004d22:	d100      	bne.n	8004d26 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8004d24:	e08e      	b.n	8004e44 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8004d26:	2017      	movs	r0, #23
 8004d28:	183b      	adds	r3, r7, r0
 8004d2a:	2200      	movs	r2, #0
 8004d2c:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004d2e:	4b6e      	ldr	r3, [pc, #440]	; (8004ee8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004d30:	69da      	ldr	r2, [r3, #28]
 8004d32:	2380      	movs	r3, #128	; 0x80
 8004d34:	055b      	lsls	r3, r3, #21
 8004d36:	4013      	ands	r3, r2
 8004d38:	d110      	bne.n	8004d5c <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004d3a:	4b6b      	ldr	r3, [pc, #428]	; (8004ee8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004d3c:	69da      	ldr	r2, [r3, #28]
 8004d3e:	4b6a      	ldr	r3, [pc, #424]	; (8004ee8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004d40:	2180      	movs	r1, #128	; 0x80
 8004d42:	0549      	lsls	r1, r1, #21
 8004d44:	430a      	orrs	r2, r1
 8004d46:	61da      	str	r2, [r3, #28]
 8004d48:	4b67      	ldr	r3, [pc, #412]	; (8004ee8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004d4a:	69da      	ldr	r2, [r3, #28]
 8004d4c:	2380      	movs	r3, #128	; 0x80
 8004d4e:	055b      	lsls	r3, r3, #21
 8004d50:	4013      	ands	r3, r2
 8004d52:	60bb      	str	r3, [r7, #8]
 8004d54:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004d56:	183b      	adds	r3, r7, r0
 8004d58:	2201      	movs	r2, #1
 8004d5a:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d5c:	4b63      	ldr	r3, [pc, #396]	; (8004eec <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8004d5e:	681a      	ldr	r2, [r3, #0]
 8004d60:	2380      	movs	r3, #128	; 0x80
 8004d62:	005b      	lsls	r3, r3, #1
 8004d64:	4013      	ands	r3, r2
 8004d66:	d11a      	bne.n	8004d9e <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004d68:	4b60      	ldr	r3, [pc, #384]	; (8004eec <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8004d6a:	681a      	ldr	r2, [r3, #0]
 8004d6c:	4b5f      	ldr	r3, [pc, #380]	; (8004eec <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8004d6e:	2180      	movs	r1, #128	; 0x80
 8004d70:	0049      	lsls	r1, r1, #1
 8004d72:	430a      	orrs	r2, r1
 8004d74:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004d76:	f7fc fd8b 	bl	8001890 <HAL_GetTick>
 8004d7a:	0003      	movs	r3, r0
 8004d7c:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d7e:	e008      	b.n	8004d92 <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004d80:	f7fc fd86 	bl	8001890 <HAL_GetTick>
 8004d84:	0002      	movs	r2, r0
 8004d86:	693b      	ldr	r3, [r7, #16]
 8004d88:	1ad3      	subs	r3, r2, r3
 8004d8a:	2b64      	cmp	r3, #100	; 0x64
 8004d8c:	d901      	bls.n	8004d92 <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 8004d8e:	2303      	movs	r3, #3
 8004d90:	e0a6      	b.n	8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d92:	4b56      	ldr	r3, [pc, #344]	; (8004eec <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8004d94:	681a      	ldr	r2, [r3, #0]
 8004d96:	2380      	movs	r3, #128	; 0x80
 8004d98:	005b      	lsls	r3, r3, #1
 8004d9a:	4013      	ands	r3, r2
 8004d9c:	d0f0      	beq.n	8004d80 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004d9e:	4b52      	ldr	r3, [pc, #328]	; (8004ee8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004da0:	6a1a      	ldr	r2, [r3, #32]
 8004da2:	23c0      	movs	r3, #192	; 0xc0
 8004da4:	009b      	lsls	r3, r3, #2
 8004da6:	4013      	ands	r3, r2
 8004da8:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d034      	beq.n	8004e1a <HAL_RCCEx_PeriphCLKConfig+0x112>
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	685a      	ldr	r2, [r3, #4]
 8004db4:	23c0      	movs	r3, #192	; 0xc0
 8004db6:	009b      	lsls	r3, r3, #2
 8004db8:	4013      	ands	r3, r2
 8004dba:	68fa      	ldr	r2, [r7, #12]
 8004dbc:	429a      	cmp	r2, r3
 8004dbe:	d02c      	beq.n	8004e1a <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004dc0:	4b49      	ldr	r3, [pc, #292]	; (8004ee8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004dc2:	6a1b      	ldr	r3, [r3, #32]
 8004dc4:	4a4a      	ldr	r2, [pc, #296]	; (8004ef0 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8004dc6:	4013      	ands	r3, r2
 8004dc8:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004dca:	4b47      	ldr	r3, [pc, #284]	; (8004ee8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004dcc:	6a1a      	ldr	r2, [r3, #32]
 8004dce:	4b46      	ldr	r3, [pc, #280]	; (8004ee8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004dd0:	2180      	movs	r1, #128	; 0x80
 8004dd2:	0249      	lsls	r1, r1, #9
 8004dd4:	430a      	orrs	r2, r1
 8004dd6:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004dd8:	4b43      	ldr	r3, [pc, #268]	; (8004ee8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004dda:	6a1a      	ldr	r2, [r3, #32]
 8004ddc:	4b42      	ldr	r3, [pc, #264]	; (8004ee8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004dde:	4945      	ldr	r1, [pc, #276]	; (8004ef4 <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 8004de0:	400a      	ands	r2, r1
 8004de2:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004de4:	4b40      	ldr	r3, [pc, #256]	; (8004ee8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004de6:	68fa      	ldr	r2, [r7, #12]
 8004de8:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	2201      	movs	r2, #1
 8004dee:	4013      	ands	r3, r2
 8004df0:	d013      	beq.n	8004e1a <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004df2:	f7fc fd4d 	bl	8001890 <HAL_GetTick>
 8004df6:	0003      	movs	r3, r0
 8004df8:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004dfa:	e009      	b.n	8004e10 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004dfc:	f7fc fd48 	bl	8001890 <HAL_GetTick>
 8004e00:	0002      	movs	r2, r0
 8004e02:	693b      	ldr	r3, [r7, #16]
 8004e04:	1ad3      	subs	r3, r2, r3
 8004e06:	4a3c      	ldr	r2, [pc, #240]	; (8004ef8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 8004e08:	4293      	cmp	r3, r2
 8004e0a:	d901      	bls.n	8004e10 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8004e0c:	2303      	movs	r3, #3
 8004e0e:	e067      	b.n	8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004e10:	4b35      	ldr	r3, [pc, #212]	; (8004ee8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004e12:	6a1b      	ldr	r3, [r3, #32]
 8004e14:	2202      	movs	r2, #2
 8004e16:	4013      	ands	r3, r2
 8004e18:	d0f0      	beq.n	8004dfc <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004e1a:	4b33      	ldr	r3, [pc, #204]	; (8004ee8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004e1c:	6a1b      	ldr	r3, [r3, #32]
 8004e1e:	4a34      	ldr	r2, [pc, #208]	; (8004ef0 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8004e20:	4013      	ands	r3, r2
 8004e22:	0019      	movs	r1, r3
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	685a      	ldr	r2, [r3, #4]
 8004e28:	4b2f      	ldr	r3, [pc, #188]	; (8004ee8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004e2a:	430a      	orrs	r2, r1
 8004e2c:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004e2e:	2317      	movs	r3, #23
 8004e30:	18fb      	adds	r3, r7, r3
 8004e32:	781b      	ldrb	r3, [r3, #0]
 8004e34:	2b01      	cmp	r3, #1
 8004e36:	d105      	bne.n	8004e44 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004e38:	4b2b      	ldr	r3, [pc, #172]	; (8004ee8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004e3a:	69da      	ldr	r2, [r3, #28]
 8004e3c:	4b2a      	ldr	r3, [pc, #168]	; (8004ee8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004e3e:	492f      	ldr	r1, [pc, #188]	; (8004efc <HAL_RCCEx_PeriphCLKConfig+0x1f4>)
 8004e40:	400a      	ands	r2, r1
 8004e42:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	2201      	movs	r2, #1
 8004e4a:	4013      	ands	r3, r2
 8004e4c:	d009      	beq.n	8004e62 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004e4e:	4b26      	ldr	r3, [pc, #152]	; (8004ee8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004e50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e52:	2203      	movs	r2, #3
 8004e54:	4393      	bics	r3, r2
 8004e56:	0019      	movs	r1, r3
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	689a      	ldr	r2, [r3, #8]
 8004e5c:	4b22      	ldr	r3, [pc, #136]	; (8004ee8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004e5e:	430a      	orrs	r2, r1
 8004e60:	631a      	str	r2, [r3, #48]	; 0x30
  }
  
#if defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	2202      	movs	r2, #2
 8004e68:	4013      	ands	r3, r2
 8004e6a:	d009      	beq.n	8004e80 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004e6c:	4b1e      	ldr	r3, [pc, #120]	; (8004ee8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004e6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e70:	4a23      	ldr	r2, [pc, #140]	; (8004f00 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004e72:	4013      	ands	r3, r2
 8004e74:	0019      	movs	r1, r3
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	68da      	ldr	r2, [r3, #12]
 8004e7a:	4b1b      	ldr	r3, [pc, #108]	; (8004ee8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004e7c:	430a      	orrs	r2, r1
 8004e7e:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	2220      	movs	r2, #32
 8004e86:	4013      	ands	r3, r2
 8004e88:	d009      	beq.n	8004e9e <HAL_RCCEx_PeriphCLKConfig+0x196>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004e8a:	4b17      	ldr	r3, [pc, #92]	; (8004ee8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004e8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e8e:	2210      	movs	r2, #16
 8004e90:	4393      	bics	r3, r2
 8004e92:	0019      	movs	r1, r3
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	691a      	ldr	r2, [r3, #16]
 8004e98:	4b13      	ldr	r3, [pc, #76]	; (8004ee8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004e9a:	430a      	orrs	r2, r1
 8004e9c:	631a      	str	r2, [r3, #48]	; 0x30
  }

#if defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F070x6)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681a      	ldr	r2, [r3, #0]
 8004ea2:	2380      	movs	r3, #128	; 0x80
 8004ea4:	029b      	lsls	r3, r3, #10
 8004ea6:	4013      	ands	r3, r2
 8004ea8:	d009      	beq.n	8004ebe <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004eaa:	4b0f      	ldr	r3, [pc, #60]	; (8004ee8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004eac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004eae:	2280      	movs	r2, #128	; 0x80
 8004eb0:	4393      	bics	r3, r2
 8004eb2:	0019      	movs	r1, r3
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	699a      	ldr	r2, [r3, #24]
 8004eb8:	4b0b      	ldr	r3, [pc, #44]	; (8004ee8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004eba:	430a      	orrs	r2, r1
 8004ebc:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681a      	ldr	r2, [r3, #0]
 8004ec2:	2380      	movs	r3, #128	; 0x80
 8004ec4:	00db      	lsls	r3, r3, #3
 8004ec6:	4013      	ands	r3, r2
 8004ec8:	d009      	beq.n	8004ede <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004eca:	4b07      	ldr	r3, [pc, #28]	; (8004ee8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004ecc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ece:	2240      	movs	r2, #64	; 0x40
 8004ed0:	4393      	bics	r3, r2
 8004ed2:	0019      	movs	r1, r3
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	695a      	ldr	r2, [r3, #20]
 8004ed8:	4b03      	ldr	r3, [pc, #12]	; (8004ee8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004eda:	430a      	orrs	r2, r1
 8004edc:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8004ede:	2300      	movs	r3, #0
}
 8004ee0:	0018      	movs	r0, r3
 8004ee2:	46bd      	mov	sp, r7
 8004ee4:	b006      	add	sp, #24
 8004ee6:	bd80      	pop	{r7, pc}
 8004ee8:	40021000 	.word	0x40021000
 8004eec:	40007000 	.word	0x40007000
 8004ef0:	fffffcff 	.word	0xfffffcff
 8004ef4:	fffeffff 	.word	0xfffeffff
 8004ef8:	00001388 	.word	0x00001388
 8004efc:	efffffff 	.word	0xefffffff
 8004f00:	fffcffff 	.word	0xfffcffff

08004f04 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004f04:	b580      	push	{r7, lr}
 8004f06:	b084      	sub	sp, #16
 8004f08:	af00      	add	r7, sp, #0
 8004f0a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d101      	bne.n	8004f16 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004f12:	2301      	movs	r3, #1
 8004f14:	e0a8      	b.n	8005068 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d109      	bne.n	8004f32 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	685a      	ldr	r2, [r3, #4]
 8004f22:	2382      	movs	r3, #130	; 0x82
 8004f24:	005b      	lsls	r3, r3, #1
 8004f26:	429a      	cmp	r2, r3
 8004f28:	d009      	beq.n	8004f3e <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	2200      	movs	r2, #0
 8004f2e:	61da      	str	r2, [r3, #28]
 8004f30:	e005      	b.n	8004f3e <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	2200      	movs	r2, #0
 8004f36:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	2200      	movs	r2, #0
 8004f3c:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	2200      	movs	r2, #0
 8004f42:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	225d      	movs	r2, #93	; 0x5d
 8004f48:	5c9b      	ldrb	r3, [r3, r2]
 8004f4a:	b2db      	uxtb	r3, r3
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d107      	bne.n	8004f60 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	225c      	movs	r2, #92	; 0x5c
 8004f54:	2100      	movs	r1, #0
 8004f56:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	0018      	movs	r0, r3
 8004f5c:	f7fc fab6 	bl	80014cc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	225d      	movs	r2, #93	; 0x5d
 8004f64:	2102      	movs	r1, #2
 8004f66:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	681a      	ldr	r2, [r3, #0]
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	2140      	movs	r1, #64	; 0x40
 8004f74:	438a      	bics	r2, r1
 8004f76:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	68da      	ldr	r2, [r3, #12]
 8004f7c:	23e0      	movs	r3, #224	; 0xe0
 8004f7e:	00db      	lsls	r3, r3, #3
 8004f80:	429a      	cmp	r2, r3
 8004f82:	d902      	bls.n	8004f8a <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004f84:	2300      	movs	r3, #0
 8004f86:	60fb      	str	r3, [r7, #12]
 8004f88:	e002      	b.n	8004f90 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004f8a:	2380      	movs	r3, #128	; 0x80
 8004f8c:	015b      	lsls	r3, r3, #5
 8004f8e:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	68da      	ldr	r2, [r3, #12]
 8004f94:	23f0      	movs	r3, #240	; 0xf0
 8004f96:	011b      	lsls	r3, r3, #4
 8004f98:	429a      	cmp	r2, r3
 8004f9a:	d008      	beq.n	8004fae <HAL_SPI_Init+0xaa>
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	68da      	ldr	r2, [r3, #12]
 8004fa0:	23e0      	movs	r3, #224	; 0xe0
 8004fa2:	00db      	lsls	r3, r3, #3
 8004fa4:	429a      	cmp	r2, r3
 8004fa6:	d002      	beq.n	8004fae <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	2200      	movs	r2, #0
 8004fac:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	685a      	ldr	r2, [r3, #4]
 8004fb2:	2382      	movs	r3, #130	; 0x82
 8004fb4:	005b      	lsls	r3, r3, #1
 8004fb6:	401a      	ands	r2, r3
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	6899      	ldr	r1, [r3, #8]
 8004fbc:	2384      	movs	r3, #132	; 0x84
 8004fbe:	021b      	lsls	r3, r3, #8
 8004fc0:	400b      	ands	r3, r1
 8004fc2:	431a      	orrs	r2, r3
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	691b      	ldr	r3, [r3, #16]
 8004fc8:	2102      	movs	r1, #2
 8004fca:	400b      	ands	r3, r1
 8004fcc:	431a      	orrs	r2, r3
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	695b      	ldr	r3, [r3, #20]
 8004fd2:	2101      	movs	r1, #1
 8004fd4:	400b      	ands	r3, r1
 8004fd6:	431a      	orrs	r2, r3
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	6999      	ldr	r1, [r3, #24]
 8004fdc:	2380      	movs	r3, #128	; 0x80
 8004fde:	009b      	lsls	r3, r3, #2
 8004fe0:	400b      	ands	r3, r1
 8004fe2:	431a      	orrs	r2, r3
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	69db      	ldr	r3, [r3, #28]
 8004fe8:	2138      	movs	r1, #56	; 0x38
 8004fea:	400b      	ands	r3, r1
 8004fec:	431a      	orrs	r2, r3
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	6a1b      	ldr	r3, [r3, #32]
 8004ff2:	2180      	movs	r1, #128	; 0x80
 8004ff4:	400b      	ands	r3, r1
 8004ff6:	431a      	orrs	r2, r3
 8004ff8:	0011      	movs	r1, r2
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004ffe:	2380      	movs	r3, #128	; 0x80
 8005000:	019b      	lsls	r3, r3, #6
 8005002:	401a      	ands	r2, r3
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	430a      	orrs	r2, r1
 800500a:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	699b      	ldr	r3, [r3, #24]
 8005010:	0c1b      	lsrs	r3, r3, #16
 8005012:	2204      	movs	r2, #4
 8005014:	401a      	ands	r2, r3
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800501a:	2110      	movs	r1, #16
 800501c:	400b      	ands	r3, r1
 800501e:	431a      	orrs	r2, r3
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005024:	2108      	movs	r1, #8
 8005026:	400b      	ands	r3, r1
 8005028:	431a      	orrs	r2, r3
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	68d9      	ldr	r1, [r3, #12]
 800502e:	23f0      	movs	r3, #240	; 0xf0
 8005030:	011b      	lsls	r3, r3, #4
 8005032:	400b      	ands	r3, r1
 8005034:	431a      	orrs	r2, r3
 8005036:	0011      	movs	r1, r2
 8005038:	68fa      	ldr	r2, [r7, #12]
 800503a:	2380      	movs	r3, #128	; 0x80
 800503c:	015b      	lsls	r3, r3, #5
 800503e:	401a      	ands	r2, r3
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	430a      	orrs	r2, r1
 8005046:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	69da      	ldr	r2, [r3, #28]
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	4907      	ldr	r1, [pc, #28]	; (8005070 <HAL_SPI_Init+0x16c>)
 8005054:	400a      	ands	r2, r1
 8005056:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	2200      	movs	r2, #0
 800505c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	225d      	movs	r2, #93	; 0x5d
 8005062:	2101      	movs	r1, #1
 8005064:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005066:	2300      	movs	r3, #0
}
 8005068:	0018      	movs	r0, r3
 800506a:	46bd      	mov	sp, r7
 800506c:	b004      	add	sp, #16
 800506e:	bd80      	pop	{r7, pc}
 8005070:	fffff7ff 	.word	0xfffff7ff

08005074 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005074:	b580      	push	{r7, lr}
 8005076:	b088      	sub	sp, #32
 8005078:	af00      	add	r7, sp, #0
 800507a:	60f8      	str	r0, [r7, #12]
 800507c:	60b9      	str	r1, [r7, #8]
 800507e:	603b      	str	r3, [r7, #0]
 8005080:	1dbb      	adds	r3, r7, #6
 8005082:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005084:	231f      	movs	r3, #31
 8005086:	18fb      	adds	r3, r7, r3
 8005088:	2200      	movs	r2, #0
 800508a:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	225c      	movs	r2, #92	; 0x5c
 8005090:	5c9b      	ldrb	r3, [r3, r2]
 8005092:	2b01      	cmp	r3, #1
 8005094:	d101      	bne.n	800509a <HAL_SPI_Transmit+0x26>
 8005096:	2302      	movs	r3, #2
 8005098:	e140      	b.n	800531c <HAL_SPI_Transmit+0x2a8>
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	225c      	movs	r2, #92	; 0x5c
 800509e:	2101      	movs	r1, #1
 80050a0:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80050a2:	f7fc fbf5 	bl	8001890 <HAL_GetTick>
 80050a6:	0003      	movs	r3, r0
 80050a8:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 80050aa:	2316      	movs	r3, #22
 80050ac:	18fb      	adds	r3, r7, r3
 80050ae:	1dba      	adds	r2, r7, #6
 80050b0:	8812      	ldrh	r2, [r2, #0]
 80050b2:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	225d      	movs	r2, #93	; 0x5d
 80050b8:	5c9b      	ldrb	r3, [r3, r2]
 80050ba:	b2db      	uxtb	r3, r3
 80050bc:	2b01      	cmp	r3, #1
 80050be:	d004      	beq.n	80050ca <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 80050c0:	231f      	movs	r3, #31
 80050c2:	18fb      	adds	r3, r7, r3
 80050c4:	2202      	movs	r2, #2
 80050c6:	701a      	strb	r2, [r3, #0]
    goto error;
 80050c8:	e11d      	b.n	8005306 <HAL_SPI_Transmit+0x292>
  }

  if ((pData == NULL) || (Size == 0U))
 80050ca:	68bb      	ldr	r3, [r7, #8]
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d003      	beq.n	80050d8 <HAL_SPI_Transmit+0x64>
 80050d0:	1dbb      	adds	r3, r7, #6
 80050d2:	881b      	ldrh	r3, [r3, #0]
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d104      	bne.n	80050e2 <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 80050d8:	231f      	movs	r3, #31
 80050da:	18fb      	adds	r3, r7, r3
 80050dc:	2201      	movs	r2, #1
 80050de:	701a      	strb	r2, [r3, #0]
    goto error;
 80050e0:	e111      	b.n	8005306 <HAL_SPI_Transmit+0x292>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	225d      	movs	r2, #93	; 0x5d
 80050e6:	2103      	movs	r1, #3
 80050e8:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	2200      	movs	r2, #0
 80050ee:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	68ba      	ldr	r2, [r7, #8]
 80050f4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	1dba      	adds	r2, r7, #6
 80050fa:	8812      	ldrh	r2, [r2, #0]
 80050fc:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	1dba      	adds	r2, r7, #6
 8005102:	8812      	ldrh	r2, [r2, #0]
 8005104:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	2200      	movs	r2, #0
 800510a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	2244      	movs	r2, #68	; 0x44
 8005110:	2100      	movs	r1, #0
 8005112:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	2246      	movs	r2, #70	; 0x46
 8005118:	2100      	movs	r1, #0
 800511a:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	2200      	movs	r2, #0
 8005120:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	2200      	movs	r2, #0
 8005126:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	689a      	ldr	r2, [r3, #8]
 800512c:	2380      	movs	r3, #128	; 0x80
 800512e:	021b      	lsls	r3, r3, #8
 8005130:	429a      	cmp	r2, r3
 8005132:	d110      	bne.n	8005156 <HAL_SPI_Transmit+0xe2>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	681a      	ldr	r2, [r3, #0]
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	2140      	movs	r1, #64	; 0x40
 8005140:	438a      	bics	r2, r1
 8005142:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	681a      	ldr	r2, [r3, #0]
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	2180      	movs	r1, #128	; 0x80
 8005150:	01c9      	lsls	r1, r1, #7
 8005152:	430a      	orrs	r2, r1
 8005154:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	2240      	movs	r2, #64	; 0x40
 800515e:	4013      	ands	r3, r2
 8005160:	2b40      	cmp	r3, #64	; 0x40
 8005162:	d007      	beq.n	8005174 <HAL_SPI_Transmit+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	681a      	ldr	r2, [r3, #0]
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	2140      	movs	r1, #64	; 0x40
 8005170:	430a      	orrs	r2, r1
 8005172:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	68da      	ldr	r2, [r3, #12]
 8005178:	23e0      	movs	r3, #224	; 0xe0
 800517a:	00db      	lsls	r3, r3, #3
 800517c:	429a      	cmp	r2, r3
 800517e:	d94e      	bls.n	800521e <HAL_SPI_Transmit+0x1aa>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	685b      	ldr	r3, [r3, #4]
 8005184:	2b00      	cmp	r3, #0
 8005186:	d004      	beq.n	8005192 <HAL_SPI_Transmit+0x11e>
 8005188:	2316      	movs	r3, #22
 800518a:	18fb      	adds	r3, r7, r3
 800518c:	881b      	ldrh	r3, [r3, #0]
 800518e:	2b01      	cmp	r3, #1
 8005190:	d13f      	bne.n	8005212 <HAL_SPI_Transmit+0x19e>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005196:	881a      	ldrh	r2, [r3, #0]
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051a2:	1c9a      	adds	r2, r3, #2
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80051ac:	b29b      	uxth	r3, r3
 80051ae:	3b01      	subs	r3, #1
 80051b0:	b29a      	uxth	r2, r3
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80051b6:	e02c      	b.n	8005212 <HAL_SPI_Transmit+0x19e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	689b      	ldr	r3, [r3, #8]
 80051be:	2202      	movs	r2, #2
 80051c0:	4013      	ands	r3, r2
 80051c2:	2b02      	cmp	r3, #2
 80051c4:	d112      	bne.n	80051ec <HAL_SPI_Transmit+0x178>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051ca:	881a      	ldrh	r2, [r3, #0]
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051d6:	1c9a      	adds	r2, r3, #2
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80051e0:	b29b      	uxth	r3, r3
 80051e2:	3b01      	subs	r3, #1
 80051e4:	b29a      	uxth	r2, r3
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	87da      	strh	r2, [r3, #62]	; 0x3e
 80051ea:	e012      	b.n	8005212 <HAL_SPI_Transmit+0x19e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80051ec:	f7fc fb50 	bl	8001890 <HAL_GetTick>
 80051f0:	0002      	movs	r2, r0
 80051f2:	69bb      	ldr	r3, [r7, #24]
 80051f4:	1ad3      	subs	r3, r2, r3
 80051f6:	683a      	ldr	r2, [r7, #0]
 80051f8:	429a      	cmp	r2, r3
 80051fa:	d802      	bhi.n	8005202 <HAL_SPI_Transmit+0x18e>
 80051fc:	683b      	ldr	r3, [r7, #0]
 80051fe:	3301      	adds	r3, #1
 8005200:	d102      	bne.n	8005208 <HAL_SPI_Transmit+0x194>
 8005202:	683b      	ldr	r3, [r7, #0]
 8005204:	2b00      	cmp	r3, #0
 8005206:	d104      	bne.n	8005212 <HAL_SPI_Transmit+0x19e>
        {
          errorcode = HAL_TIMEOUT;
 8005208:	231f      	movs	r3, #31
 800520a:	18fb      	adds	r3, r7, r3
 800520c:	2203      	movs	r2, #3
 800520e:	701a      	strb	r2, [r3, #0]
          goto error;
 8005210:	e079      	b.n	8005306 <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005216:	b29b      	uxth	r3, r3
 8005218:	2b00      	cmp	r3, #0
 800521a:	d1cd      	bne.n	80051b8 <HAL_SPI_Transmit+0x144>
 800521c:	e04f      	b.n	80052be <HAL_SPI_Transmit+0x24a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	685b      	ldr	r3, [r3, #4]
 8005222:	2b00      	cmp	r3, #0
 8005224:	d004      	beq.n	8005230 <HAL_SPI_Transmit+0x1bc>
 8005226:	2316      	movs	r3, #22
 8005228:	18fb      	adds	r3, r7, r3
 800522a:	881b      	ldrh	r3, [r3, #0]
 800522c:	2b01      	cmp	r3, #1
 800522e:	d141      	bne.n	80052b4 <HAL_SPI_Transmit+0x240>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	330c      	adds	r3, #12
 800523a:	7812      	ldrb	r2, [r2, #0]
 800523c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005242:	1c5a      	adds	r2, r3, #1
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800524c:	b29b      	uxth	r3, r3
 800524e:	3b01      	subs	r3, #1
 8005250:	b29a      	uxth	r2, r3
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while (hspi->TxXferCount > 0U)
 8005256:	e02d      	b.n	80052b4 <HAL_SPI_Transmit+0x240>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	689b      	ldr	r3, [r3, #8]
 800525e:	2202      	movs	r2, #2
 8005260:	4013      	ands	r3, r2
 8005262:	2b02      	cmp	r3, #2
 8005264:	d113      	bne.n	800528e <HAL_SPI_Transmit+0x21a>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	330c      	adds	r3, #12
 8005270:	7812      	ldrb	r2, [r2, #0]
 8005272:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005278:	1c5a      	adds	r2, r3, #1
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005282:	b29b      	uxth	r3, r3
 8005284:	3b01      	subs	r3, #1
 8005286:	b29a      	uxth	r2, r3
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800528c:	e012      	b.n	80052b4 <HAL_SPI_Transmit+0x240>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800528e:	f7fc faff 	bl	8001890 <HAL_GetTick>
 8005292:	0002      	movs	r2, r0
 8005294:	69bb      	ldr	r3, [r7, #24]
 8005296:	1ad3      	subs	r3, r2, r3
 8005298:	683a      	ldr	r2, [r7, #0]
 800529a:	429a      	cmp	r2, r3
 800529c:	d802      	bhi.n	80052a4 <HAL_SPI_Transmit+0x230>
 800529e:	683b      	ldr	r3, [r7, #0]
 80052a0:	3301      	adds	r3, #1
 80052a2:	d102      	bne.n	80052aa <HAL_SPI_Transmit+0x236>
 80052a4:	683b      	ldr	r3, [r7, #0]
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d104      	bne.n	80052b4 <HAL_SPI_Transmit+0x240>
        {
          errorcode = HAL_TIMEOUT;
 80052aa:	231f      	movs	r3, #31
 80052ac:	18fb      	adds	r3, r7, r3
 80052ae:	2203      	movs	r2, #3
 80052b0:	701a      	strb	r2, [r3, #0]
          goto error;
 80052b2:	e028      	b.n	8005306 <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80052b8:	b29b      	uxth	r3, r3
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d1cc      	bne.n	8005258 <HAL_SPI_Transmit+0x1e4>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80052be:	69ba      	ldr	r2, [r7, #24]
 80052c0:	6839      	ldr	r1, [r7, #0]
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	0018      	movs	r0, r3
 80052c6:	f000 fcd9 	bl	8005c7c <SPI_EndRxTxTransaction>
 80052ca:	1e03      	subs	r3, r0, #0
 80052cc:	d002      	beq.n	80052d4 <HAL_SPI_Transmit+0x260>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	2220      	movs	r2, #32
 80052d2:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	689b      	ldr	r3, [r3, #8]
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d10a      	bne.n	80052f2 <HAL_SPI_Transmit+0x27e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80052dc:	2300      	movs	r3, #0
 80052de:	613b      	str	r3, [r7, #16]
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	68db      	ldr	r3, [r3, #12]
 80052e6:	613b      	str	r3, [r7, #16]
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	689b      	ldr	r3, [r3, #8]
 80052ee:	613b      	str	r3, [r7, #16]
 80052f0:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d004      	beq.n	8005304 <HAL_SPI_Transmit+0x290>
  {
    errorcode = HAL_ERROR;
 80052fa:	231f      	movs	r3, #31
 80052fc:	18fb      	adds	r3, r7, r3
 80052fe:	2201      	movs	r2, #1
 8005300:	701a      	strb	r2, [r3, #0]
 8005302:	e000      	b.n	8005306 <HAL_SPI_Transmit+0x292>
  }

error:
 8005304:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	225d      	movs	r2, #93	; 0x5d
 800530a:	2101      	movs	r1, #1
 800530c:	5499      	strb	r1, [r3, r2]
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	225c      	movs	r2, #92	; 0x5c
 8005312:	2100      	movs	r1, #0
 8005314:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8005316:	231f      	movs	r3, #31
 8005318:	18fb      	adds	r3, r7, r3
 800531a:	781b      	ldrb	r3, [r3, #0]
}
 800531c:	0018      	movs	r0, r3
 800531e:	46bd      	mov	sp, r7
 8005320:	b008      	add	sp, #32
 8005322:	bd80      	pop	{r7, pc}

08005324 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005324:	b590      	push	{r4, r7, lr}
 8005326:	b089      	sub	sp, #36	; 0x24
 8005328:	af02      	add	r7, sp, #8
 800532a:	60f8      	str	r0, [r7, #12]
 800532c:	60b9      	str	r1, [r7, #8]
 800532e:	603b      	str	r3, [r7, #0]
 8005330:	1dbb      	adds	r3, r7, #6
 8005332:	801a      	strh	r2, [r3, #0]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005334:	2317      	movs	r3, #23
 8005336:	18fb      	adds	r3, r7, r3
 8005338:	2200      	movs	r2, #0
 800533a:	701a      	strb	r2, [r3, #0]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	685a      	ldr	r2, [r3, #4]
 8005340:	2382      	movs	r3, #130	; 0x82
 8005342:	005b      	lsls	r3, r3, #1
 8005344:	429a      	cmp	r2, r3
 8005346:	d113      	bne.n	8005370 <HAL_SPI_Receive+0x4c>
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	689b      	ldr	r3, [r3, #8]
 800534c:	2b00      	cmp	r3, #0
 800534e:	d10f      	bne.n	8005370 <HAL_SPI_Receive+0x4c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	225d      	movs	r2, #93	; 0x5d
 8005354:	2104      	movs	r1, #4
 8005356:	5499      	strb	r1, [r3, r2]
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8005358:	1dbb      	adds	r3, r7, #6
 800535a:	881c      	ldrh	r4, [r3, #0]
 800535c:	68ba      	ldr	r2, [r7, #8]
 800535e:	68b9      	ldr	r1, [r7, #8]
 8005360:	68f8      	ldr	r0, [r7, #12]
 8005362:	683b      	ldr	r3, [r7, #0]
 8005364:	9300      	str	r3, [sp, #0]
 8005366:	0023      	movs	r3, r4
 8005368:	f000 f928 	bl	80055bc <HAL_SPI_TransmitReceive>
 800536c:	0003      	movs	r3, r0
 800536e:	e11c      	b.n	80055aa <HAL_SPI_Receive+0x286>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	225c      	movs	r2, #92	; 0x5c
 8005374:	5c9b      	ldrb	r3, [r3, r2]
 8005376:	2b01      	cmp	r3, #1
 8005378:	d101      	bne.n	800537e <HAL_SPI_Receive+0x5a>
 800537a:	2302      	movs	r3, #2
 800537c:	e115      	b.n	80055aa <HAL_SPI_Receive+0x286>
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	225c      	movs	r2, #92	; 0x5c
 8005382:	2101      	movs	r1, #1
 8005384:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005386:	f7fc fa83 	bl	8001890 <HAL_GetTick>
 800538a:	0003      	movs	r3, r0
 800538c:	613b      	str	r3, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	225d      	movs	r2, #93	; 0x5d
 8005392:	5c9b      	ldrb	r3, [r3, r2]
 8005394:	b2db      	uxtb	r3, r3
 8005396:	2b01      	cmp	r3, #1
 8005398:	d004      	beq.n	80053a4 <HAL_SPI_Receive+0x80>
  {
    errorcode = HAL_BUSY;
 800539a:	2317      	movs	r3, #23
 800539c:	18fb      	adds	r3, r7, r3
 800539e:	2202      	movs	r2, #2
 80053a0:	701a      	strb	r2, [r3, #0]
    goto error;
 80053a2:	e0f7      	b.n	8005594 <HAL_SPI_Receive+0x270>
  }

  if ((pData == NULL) || (Size == 0U))
 80053a4:	68bb      	ldr	r3, [r7, #8]
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d003      	beq.n	80053b2 <HAL_SPI_Receive+0x8e>
 80053aa:	1dbb      	adds	r3, r7, #6
 80053ac:	881b      	ldrh	r3, [r3, #0]
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d104      	bne.n	80053bc <HAL_SPI_Receive+0x98>
  {
    errorcode = HAL_ERROR;
 80053b2:	2317      	movs	r3, #23
 80053b4:	18fb      	adds	r3, r7, r3
 80053b6:	2201      	movs	r2, #1
 80053b8:	701a      	strb	r2, [r3, #0]
    goto error;
 80053ba:	e0eb      	b.n	8005594 <HAL_SPI_Receive+0x270>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	225d      	movs	r2, #93	; 0x5d
 80053c0:	2104      	movs	r1, #4
 80053c2:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	2200      	movs	r2, #0
 80053c8:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	68ba      	ldr	r2, [r7, #8]
 80053ce:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	1dba      	adds	r2, r7, #6
 80053d4:	2144      	movs	r1, #68	; 0x44
 80053d6:	8812      	ldrh	r2, [r2, #0]
 80053d8:	525a      	strh	r2, [r3, r1]
  hspi->RxXferCount = Size;
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	1dba      	adds	r2, r7, #6
 80053de:	2146      	movs	r1, #70	; 0x46
 80053e0:	8812      	ldrh	r2, [r2, #0]
 80053e2:	525a      	strh	r2, [r3, r1]

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	2200      	movs	r2, #0
 80053e8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	2200      	movs	r2, #0
 80053ee:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	2200      	movs	r2, #0
 80053f4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	2200      	movs	r2, #0
 80053fa:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	2200      	movs	r2, #0
 8005400:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	68da      	ldr	r2, [r3, #12]
 8005406:	23e0      	movs	r3, #224	; 0xe0
 8005408:	00db      	lsls	r3, r3, #3
 800540a:	429a      	cmp	r2, r3
 800540c:	d908      	bls.n	8005420 <HAL_SPI_Receive+0xfc>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	685a      	ldr	r2, [r3, #4]
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	4966      	ldr	r1, [pc, #408]	; (80055b4 <HAL_SPI_Receive+0x290>)
 800541a:	400a      	ands	r2, r1
 800541c:	605a      	str	r2, [r3, #4]
 800541e:	e008      	b.n	8005432 <HAL_SPI_Receive+0x10e>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	685a      	ldr	r2, [r3, #4]
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	2180      	movs	r1, #128	; 0x80
 800542c:	0149      	lsls	r1, r1, #5
 800542e:	430a      	orrs	r2, r1
 8005430:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	689a      	ldr	r2, [r3, #8]
 8005436:	2380      	movs	r3, #128	; 0x80
 8005438:	021b      	lsls	r3, r3, #8
 800543a:	429a      	cmp	r2, r3
 800543c:	d10f      	bne.n	800545e <HAL_SPI_Receive+0x13a>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	681a      	ldr	r2, [r3, #0]
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	2140      	movs	r1, #64	; 0x40
 800544a:	438a      	bics	r2, r1
 800544c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	681a      	ldr	r2, [r3, #0]
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	4957      	ldr	r1, [pc, #348]	; (80055b8 <HAL_SPI_Receive+0x294>)
 800545a:	400a      	ands	r2, r1
 800545c:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	2240      	movs	r2, #64	; 0x40
 8005466:	4013      	ands	r3, r2
 8005468:	2b40      	cmp	r3, #64	; 0x40
 800546a:	d007      	beq.n	800547c <HAL_SPI_Receive+0x158>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	681a      	ldr	r2, [r3, #0]
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	2140      	movs	r1, #64	; 0x40
 8005478:	430a      	orrs	r2, r1
 800547a:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	68da      	ldr	r2, [r3, #12]
 8005480:	23e0      	movs	r3, #224	; 0xe0
 8005482:	00db      	lsls	r3, r3, #3
 8005484:	429a      	cmp	r2, r3
 8005486:	d900      	bls.n	800548a <HAL_SPI_Receive+0x166>
 8005488:	e069      	b.n	800555e <HAL_SPI_Receive+0x23a>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800548a:	e031      	b.n	80054f0 <HAL_SPI_Receive+0x1cc>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	689b      	ldr	r3, [r3, #8]
 8005492:	2201      	movs	r2, #1
 8005494:	4013      	ands	r3, r2
 8005496:	2b01      	cmp	r3, #1
 8005498:	d117      	bne.n	80054ca <HAL_SPI_Receive+0x1a6>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	330c      	adds	r3, #12
 80054a0:	001a      	movs	r2, r3
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054a6:	7812      	ldrb	r2, [r2, #0]
 80054a8:	b2d2      	uxtb	r2, r2
 80054aa:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054b0:	1c5a      	adds	r2, r3, #1
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	2246      	movs	r2, #70	; 0x46
 80054ba:	5a9b      	ldrh	r3, [r3, r2]
 80054bc:	b29b      	uxth	r3, r3
 80054be:	3b01      	subs	r3, #1
 80054c0:	b299      	uxth	r1, r3
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	2246      	movs	r2, #70	; 0x46
 80054c6:	5299      	strh	r1, [r3, r2]
 80054c8:	e012      	b.n	80054f0 <HAL_SPI_Receive+0x1cc>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80054ca:	f7fc f9e1 	bl	8001890 <HAL_GetTick>
 80054ce:	0002      	movs	r2, r0
 80054d0:	693b      	ldr	r3, [r7, #16]
 80054d2:	1ad3      	subs	r3, r2, r3
 80054d4:	683a      	ldr	r2, [r7, #0]
 80054d6:	429a      	cmp	r2, r3
 80054d8:	d802      	bhi.n	80054e0 <HAL_SPI_Receive+0x1bc>
 80054da:	683b      	ldr	r3, [r7, #0]
 80054dc:	3301      	adds	r3, #1
 80054de:	d102      	bne.n	80054e6 <HAL_SPI_Receive+0x1c2>
 80054e0:	683b      	ldr	r3, [r7, #0]
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d104      	bne.n	80054f0 <HAL_SPI_Receive+0x1cc>
        {
          errorcode = HAL_TIMEOUT;
 80054e6:	2317      	movs	r3, #23
 80054e8:	18fb      	adds	r3, r7, r3
 80054ea:	2203      	movs	r2, #3
 80054ec:	701a      	strb	r2, [r3, #0]
          goto error;
 80054ee:	e051      	b.n	8005594 <HAL_SPI_Receive+0x270>
    while (hspi->RxXferCount > 0U)
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	2246      	movs	r2, #70	; 0x46
 80054f4:	5a9b      	ldrh	r3, [r3, r2]
 80054f6:	b29b      	uxth	r3, r3
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d1c7      	bne.n	800548c <HAL_SPI_Receive+0x168>
 80054fc:	e035      	b.n	800556a <HAL_SPI_Receive+0x246>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	689b      	ldr	r3, [r3, #8]
 8005504:	2201      	movs	r2, #1
 8005506:	4013      	ands	r3, r2
 8005508:	2b01      	cmp	r3, #1
 800550a:	d115      	bne.n	8005538 <HAL_SPI_Receive+0x214>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	68da      	ldr	r2, [r3, #12]
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005516:	b292      	uxth	r2, r2
 8005518:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800551e:	1c9a      	adds	r2, r3, #2
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	2246      	movs	r2, #70	; 0x46
 8005528:	5a9b      	ldrh	r3, [r3, r2]
 800552a:	b29b      	uxth	r3, r3
 800552c:	3b01      	subs	r3, #1
 800552e:	b299      	uxth	r1, r3
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	2246      	movs	r2, #70	; 0x46
 8005534:	5299      	strh	r1, [r3, r2]
 8005536:	e012      	b.n	800555e <HAL_SPI_Receive+0x23a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005538:	f7fc f9aa 	bl	8001890 <HAL_GetTick>
 800553c:	0002      	movs	r2, r0
 800553e:	693b      	ldr	r3, [r7, #16]
 8005540:	1ad3      	subs	r3, r2, r3
 8005542:	683a      	ldr	r2, [r7, #0]
 8005544:	429a      	cmp	r2, r3
 8005546:	d802      	bhi.n	800554e <HAL_SPI_Receive+0x22a>
 8005548:	683b      	ldr	r3, [r7, #0]
 800554a:	3301      	adds	r3, #1
 800554c:	d102      	bne.n	8005554 <HAL_SPI_Receive+0x230>
 800554e:	683b      	ldr	r3, [r7, #0]
 8005550:	2b00      	cmp	r3, #0
 8005552:	d104      	bne.n	800555e <HAL_SPI_Receive+0x23a>
        {
          errorcode = HAL_TIMEOUT;
 8005554:	2317      	movs	r3, #23
 8005556:	18fb      	adds	r3, r7, r3
 8005558:	2203      	movs	r2, #3
 800555a:	701a      	strb	r2, [r3, #0]
          goto error;
 800555c:	e01a      	b.n	8005594 <HAL_SPI_Receive+0x270>
    while (hspi->RxXferCount > 0U)
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	2246      	movs	r2, #70	; 0x46
 8005562:	5a9b      	ldrh	r3, [r3, r2]
 8005564:	b29b      	uxth	r3, r3
 8005566:	2b00      	cmp	r3, #0
 8005568:	d1c9      	bne.n	80054fe <HAL_SPI_Receive+0x1da>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800556a:	693a      	ldr	r2, [r7, #16]
 800556c:	6839      	ldr	r1, [r7, #0]
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	0018      	movs	r0, r3
 8005572:	f000 fb25 	bl	8005bc0 <SPI_EndRxTransaction>
 8005576:	1e03      	subs	r3, r0, #0
 8005578:	d002      	beq.n	8005580 <HAL_SPI_Receive+0x25c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	2220      	movs	r2, #32
 800557e:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005584:	2b00      	cmp	r3, #0
 8005586:	d004      	beq.n	8005592 <HAL_SPI_Receive+0x26e>
  {
    errorcode = HAL_ERROR;
 8005588:	2317      	movs	r3, #23
 800558a:	18fb      	adds	r3, r7, r3
 800558c:	2201      	movs	r2, #1
 800558e:	701a      	strb	r2, [r3, #0]
 8005590:	e000      	b.n	8005594 <HAL_SPI_Receive+0x270>
  }

error :
 8005592:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	225d      	movs	r2, #93	; 0x5d
 8005598:	2101      	movs	r1, #1
 800559a:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	225c      	movs	r2, #92	; 0x5c
 80055a0:	2100      	movs	r1, #0
 80055a2:	5499      	strb	r1, [r3, r2]
  return errorcode;
 80055a4:	2317      	movs	r3, #23
 80055a6:	18fb      	adds	r3, r7, r3
 80055a8:	781b      	ldrb	r3, [r3, #0]
}
 80055aa:	0018      	movs	r0, r3
 80055ac:	46bd      	mov	sp, r7
 80055ae:	b007      	add	sp, #28
 80055b0:	bd90      	pop	{r4, r7, pc}
 80055b2:	46c0      	nop			; (mov r8, r8)
 80055b4:	ffffefff 	.word	0xffffefff
 80055b8:	ffffbfff 	.word	0xffffbfff

080055bc <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80055bc:	b580      	push	{r7, lr}
 80055be:	b08a      	sub	sp, #40	; 0x28
 80055c0:	af00      	add	r7, sp, #0
 80055c2:	60f8      	str	r0, [r7, #12]
 80055c4:	60b9      	str	r1, [r7, #8]
 80055c6:	607a      	str	r2, [r7, #4]
 80055c8:	001a      	movs	r2, r3
 80055ca:	1cbb      	adds	r3, r7, #2
 80055cc:	801a      	strh	r2, [r3, #0]
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80055ce:	2301      	movs	r3, #1
 80055d0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80055d2:	2323      	movs	r3, #35	; 0x23
 80055d4:	18fb      	adds	r3, r7, r3
 80055d6:	2200      	movs	r2, #0
 80055d8:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	225c      	movs	r2, #92	; 0x5c
 80055de:	5c9b      	ldrb	r3, [r3, r2]
 80055e0:	2b01      	cmp	r3, #1
 80055e2:	d101      	bne.n	80055e8 <HAL_SPI_TransmitReceive+0x2c>
 80055e4:	2302      	movs	r3, #2
 80055e6:	e1b5      	b.n	8005954 <HAL_SPI_TransmitReceive+0x398>
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	225c      	movs	r2, #92	; 0x5c
 80055ec:	2101      	movs	r1, #1
 80055ee:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80055f0:	f7fc f94e 	bl	8001890 <HAL_GetTick>
 80055f4:	0003      	movs	r3, r0
 80055f6:	61fb      	str	r3, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80055f8:	201b      	movs	r0, #27
 80055fa:	183b      	adds	r3, r7, r0
 80055fc:	68fa      	ldr	r2, [r7, #12]
 80055fe:	215d      	movs	r1, #93	; 0x5d
 8005600:	5c52      	ldrb	r2, [r2, r1]
 8005602:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	685b      	ldr	r3, [r3, #4]
 8005608:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 800560a:	2312      	movs	r3, #18
 800560c:	18fb      	adds	r3, r7, r3
 800560e:	1cba      	adds	r2, r7, #2
 8005610:	8812      	ldrh	r2, [r2, #0]
 8005612:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005614:	183b      	adds	r3, r7, r0
 8005616:	781b      	ldrb	r3, [r3, #0]
 8005618:	2b01      	cmp	r3, #1
 800561a:	d011      	beq.n	8005640 <HAL_SPI_TransmitReceive+0x84>
 800561c:	697a      	ldr	r2, [r7, #20]
 800561e:	2382      	movs	r3, #130	; 0x82
 8005620:	005b      	lsls	r3, r3, #1
 8005622:	429a      	cmp	r2, r3
 8005624:	d107      	bne.n	8005636 <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	689b      	ldr	r3, [r3, #8]
 800562a:	2b00      	cmp	r3, #0
 800562c:	d103      	bne.n	8005636 <HAL_SPI_TransmitReceive+0x7a>
 800562e:	183b      	adds	r3, r7, r0
 8005630:	781b      	ldrb	r3, [r3, #0]
 8005632:	2b04      	cmp	r3, #4
 8005634:	d004      	beq.n	8005640 <HAL_SPI_TransmitReceive+0x84>
  {
    errorcode = HAL_BUSY;
 8005636:	2323      	movs	r3, #35	; 0x23
 8005638:	18fb      	adds	r3, r7, r3
 800563a:	2202      	movs	r2, #2
 800563c:	701a      	strb	r2, [r3, #0]
    goto error;
 800563e:	e17e      	b.n	800593e <HAL_SPI_TransmitReceive+0x382>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005640:	68bb      	ldr	r3, [r7, #8]
 8005642:	2b00      	cmp	r3, #0
 8005644:	d006      	beq.n	8005654 <HAL_SPI_TransmitReceive+0x98>
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	2b00      	cmp	r3, #0
 800564a:	d003      	beq.n	8005654 <HAL_SPI_TransmitReceive+0x98>
 800564c:	1cbb      	adds	r3, r7, #2
 800564e:	881b      	ldrh	r3, [r3, #0]
 8005650:	2b00      	cmp	r3, #0
 8005652:	d104      	bne.n	800565e <HAL_SPI_TransmitReceive+0xa2>
  {
    errorcode = HAL_ERROR;
 8005654:	2323      	movs	r3, #35	; 0x23
 8005656:	18fb      	adds	r3, r7, r3
 8005658:	2201      	movs	r2, #1
 800565a:	701a      	strb	r2, [r3, #0]
    goto error;
 800565c:	e16f      	b.n	800593e <HAL_SPI_TransmitReceive+0x382>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	225d      	movs	r2, #93	; 0x5d
 8005662:	5c9b      	ldrb	r3, [r3, r2]
 8005664:	b2db      	uxtb	r3, r3
 8005666:	2b04      	cmp	r3, #4
 8005668:	d003      	beq.n	8005672 <HAL_SPI_TransmitReceive+0xb6>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	225d      	movs	r2, #93	; 0x5d
 800566e:	2105      	movs	r1, #5
 8005670:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	2200      	movs	r2, #0
 8005676:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	687a      	ldr	r2, [r7, #4]
 800567c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	1cba      	adds	r2, r7, #2
 8005682:	2146      	movs	r1, #70	; 0x46
 8005684:	8812      	ldrh	r2, [r2, #0]
 8005686:	525a      	strh	r2, [r3, r1]
  hspi->RxXferSize  = Size;
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	1cba      	adds	r2, r7, #2
 800568c:	2144      	movs	r1, #68	; 0x44
 800568e:	8812      	ldrh	r2, [r2, #0]
 8005690:	525a      	strh	r2, [r3, r1]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	68ba      	ldr	r2, [r7, #8]
 8005696:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	1cba      	adds	r2, r7, #2
 800569c:	8812      	ldrh	r2, [r2, #0]
 800569e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	1cba      	adds	r2, r7, #2
 80056a4:	8812      	ldrh	r2, [r2, #0]
 80056a6:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	2200      	movs	r2, #0
 80056ac:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	2200      	movs	r2, #0
 80056b2:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	68da      	ldr	r2, [r3, #12]
 80056b8:	23e0      	movs	r3, #224	; 0xe0
 80056ba:	00db      	lsls	r3, r3, #3
 80056bc:	429a      	cmp	r2, r3
 80056be:	d908      	bls.n	80056d2 <HAL_SPI_TransmitReceive+0x116>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	685a      	ldr	r2, [r3, #4]
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	49a4      	ldr	r1, [pc, #656]	; (800595c <HAL_SPI_TransmitReceive+0x3a0>)
 80056cc:	400a      	ands	r2, r1
 80056ce:	605a      	str	r2, [r3, #4]
 80056d0:	e008      	b.n	80056e4 <HAL_SPI_TransmitReceive+0x128>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	685a      	ldr	r2, [r3, #4]
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	2180      	movs	r1, #128	; 0x80
 80056de:	0149      	lsls	r1, r1, #5
 80056e0:	430a      	orrs	r2, r1
 80056e2:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	2240      	movs	r2, #64	; 0x40
 80056ec:	4013      	ands	r3, r2
 80056ee:	2b40      	cmp	r3, #64	; 0x40
 80056f0:	d007      	beq.n	8005702 <HAL_SPI_TransmitReceive+0x146>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	681a      	ldr	r2, [r3, #0]
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	2140      	movs	r1, #64	; 0x40
 80056fe:	430a      	orrs	r2, r1
 8005700:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	68da      	ldr	r2, [r3, #12]
 8005706:	23e0      	movs	r3, #224	; 0xe0
 8005708:	00db      	lsls	r3, r3, #3
 800570a:	429a      	cmp	r2, r3
 800570c:	d800      	bhi.n	8005710 <HAL_SPI_TransmitReceive+0x154>
 800570e:	e07f      	b.n	8005810 <HAL_SPI_TransmitReceive+0x254>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	685b      	ldr	r3, [r3, #4]
 8005714:	2b00      	cmp	r3, #0
 8005716:	d005      	beq.n	8005724 <HAL_SPI_TransmitReceive+0x168>
 8005718:	2312      	movs	r3, #18
 800571a:	18fb      	adds	r3, r7, r3
 800571c:	881b      	ldrh	r3, [r3, #0]
 800571e:	2b01      	cmp	r3, #1
 8005720:	d000      	beq.n	8005724 <HAL_SPI_TransmitReceive+0x168>
 8005722:	e069      	b.n	80057f8 <HAL_SPI_TransmitReceive+0x23c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005728:	881a      	ldrh	r2, [r3, #0]
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005734:	1c9a      	adds	r2, r3, #2
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800573e:	b29b      	uxth	r3, r3
 8005740:	3b01      	subs	r3, #1
 8005742:	b29a      	uxth	r2, r3
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005748:	e056      	b.n	80057f8 <HAL_SPI_TransmitReceive+0x23c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	689b      	ldr	r3, [r3, #8]
 8005750:	2202      	movs	r2, #2
 8005752:	4013      	ands	r3, r2
 8005754:	2b02      	cmp	r3, #2
 8005756:	d11b      	bne.n	8005790 <HAL_SPI_TransmitReceive+0x1d4>
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800575c:	b29b      	uxth	r3, r3
 800575e:	2b00      	cmp	r3, #0
 8005760:	d016      	beq.n	8005790 <HAL_SPI_TransmitReceive+0x1d4>
 8005762:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005764:	2b01      	cmp	r3, #1
 8005766:	d113      	bne.n	8005790 <HAL_SPI_TransmitReceive+0x1d4>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800576c:	881a      	ldrh	r2, [r3, #0]
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005778:	1c9a      	adds	r2, r3, #2
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005782:	b29b      	uxth	r3, r3
 8005784:	3b01      	subs	r3, #1
 8005786:	b29a      	uxth	r2, r3
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800578c:	2300      	movs	r3, #0
 800578e:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	689b      	ldr	r3, [r3, #8]
 8005796:	2201      	movs	r2, #1
 8005798:	4013      	ands	r3, r2
 800579a:	2b01      	cmp	r3, #1
 800579c:	d11c      	bne.n	80057d8 <HAL_SPI_TransmitReceive+0x21c>
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	2246      	movs	r2, #70	; 0x46
 80057a2:	5a9b      	ldrh	r3, [r3, r2]
 80057a4:	b29b      	uxth	r3, r3
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d016      	beq.n	80057d8 <HAL_SPI_TransmitReceive+0x21c>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	68da      	ldr	r2, [r3, #12]
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057b4:	b292      	uxth	r2, r2
 80057b6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057bc:	1c9a      	adds	r2, r3, #2
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	2246      	movs	r2, #70	; 0x46
 80057c6:	5a9b      	ldrh	r3, [r3, r2]
 80057c8:	b29b      	uxth	r3, r3
 80057ca:	3b01      	subs	r3, #1
 80057cc:	b299      	uxth	r1, r3
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	2246      	movs	r2, #70	; 0x46
 80057d2:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80057d4:	2301      	movs	r3, #1
 80057d6:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80057d8:	f7fc f85a 	bl	8001890 <HAL_GetTick>
 80057dc:	0002      	movs	r2, r0
 80057de:	69fb      	ldr	r3, [r7, #28]
 80057e0:	1ad3      	subs	r3, r2, r3
 80057e2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80057e4:	429a      	cmp	r2, r3
 80057e6:	d807      	bhi.n	80057f8 <HAL_SPI_TransmitReceive+0x23c>
 80057e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057ea:	3301      	adds	r3, #1
 80057ec:	d004      	beq.n	80057f8 <HAL_SPI_TransmitReceive+0x23c>
      {
        errorcode = HAL_TIMEOUT;
 80057ee:	2323      	movs	r3, #35	; 0x23
 80057f0:	18fb      	adds	r3, r7, r3
 80057f2:	2203      	movs	r2, #3
 80057f4:	701a      	strb	r2, [r3, #0]
        goto error;
 80057f6:	e0a2      	b.n	800593e <HAL_SPI_TransmitReceive+0x382>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80057fc:	b29b      	uxth	r3, r3
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d1a3      	bne.n	800574a <HAL_SPI_TransmitReceive+0x18e>
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	2246      	movs	r2, #70	; 0x46
 8005806:	5a9b      	ldrh	r3, [r3, r2]
 8005808:	b29b      	uxth	r3, r3
 800580a:	2b00      	cmp	r3, #0
 800580c:	d19d      	bne.n	800574a <HAL_SPI_TransmitReceive+0x18e>
 800580e:	e085      	b.n	800591c <HAL_SPI_TransmitReceive+0x360>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	685b      	ldr	r3, [r3, #4]
 8005814:	2b00      	cmp	r3, #0
 8005816:	d005      	beq.n	8005824 <HAL_SPI_TransmitReceive+0x268>
 8005818:	2312      	movs	r3, #18
 800581a:	18fb      	adds	r3, r7, r3
 800581c:	881b      	ldrh	r3, [r3, #0]
 800581e:	2b01      	cmp	r3, #1
 8005820:	d000      	beq.n	8005824 <HAL_SPI_TransmitReceive+0x268>
 8005822:	e070      	b.n	8005906 <HAL_SPI_TransmitReceive+0x34a>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	330c      	adds	r3, #12
 800582e:	7812      	ldrb	r2, [r2, #0]
 8005830:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005836:	1c5a      	adds	r2, r3, #1
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005840:	b29b      	uxth	r3, r3
 8005842:	3b01      	subs	r3, #1
 8005844:	b29a      	uxth	r2, r3
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800584a:	e05c      	b.n	8005906 <HAL_SPI_TransmitReceive+0x34a>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	689b      	ldr	r3, [r3, #8]
 8005852:	2202      	movs	r2, #2
 8005854:	4013      	ands	r3, r2
 8005856:	2b02      	cmp	r3, #2
 8005858:	d11c      	bne.n	8005894 <HAL_SPI_TransmitReceive+0x2d8>
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800585e:	b29b      	uxth	r3, r3
 8005860:	2b00      	cmp	r3, #0
 8005862:	d017      	beq.n	8005894 <HAL_SPI_TransmitReceive+0x2d8>
 8005864:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005866:	2b01      	cmp	r3, #1
 8005868:	d114      	bne.n	8005894 <HAL_SPI_TransmitReceive+0x2d8>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	330c      	adds	r3, #12
 8005874:	7812      	ldrb	r2, [r2, #0]
 8005876:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800587c:	1c5a      	adds	r2, r3, #1
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005886:	b29b      	uxth	r3, r3
 8005888:	3b01      	subs	r3, #1
 800588a:	b29a      	uxth	r2, r3
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005890:	2300      	movs	r3, #0
 8005892:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	689b      	ldr	r3, [r3, #8]
 800589a:	2201      	movs	r2, #1
 800589c:	4013      	ands	r3, r2
 800589e:	2b01      	cmp	r3, #1
 80058a0:	d11e      	bne.n	80058e0 <HAL_SPI_TransmitReceive+0x324>
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	2246      	movs	r2, #70	; 0x46
 80058a6:	5a9b      	ldrh	r3, [r3, r2]
 80058a8:	b29b      	uxth	r3, r3
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d018      	beq.n	80058e0 <HAL_SPI_TransmitReceive+0x324>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	330c      	adds	r3, #12
 80058b4:	001a      	movs	r2, r3
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058ba:	7812      	ldrb	r2, [r2, #0]
 80058bc:	b2d2      	uxtb	r2, r2
 80058be:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058c4:	1c5a      	adds	r2, r3, #1
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	2246      	movs	r2, #70	; 0x46
 80058ce:	5a9b      	ldrh	r3, [r3, r2]
 80058d0:	b29b      	uxth	r3, r3
 80058d2:	3b01      	subs	r3, #1
 80058d4:	b299      	uxth	r1, r3
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	2246      	movs	r2, #70	; 0x46
 80058da:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80058dc:	2301      	movs	r3, #1
 80058de:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80058e0:	f7fb ffd6 	bl	8001890 <HAL_GetTick>
 80058e4:	0002      	movs	r2, r0
 80058e6:	69fb      	ldr	r3, [r7, #28]
 80058e8:	1ad3      	subs	r3, r2, r3
 80058ea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80058ec:	429a      	cmp	r2, r3
 80058ee:	d802      	bhi.n	80058f6 <HAL_SPI_TransmitReceive+0x33a>
 80058f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058f2:	3301      	adds	r3, #1
 80058f4:	d102      	bne.n	80058fc <HAL_SPI_TransmitReceive+0x340>
 80058f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d104      	bne.n	8005906 <HAL_SPI_TransmitReceive+0x34a>
      {
        errorcode = HAL_TIMEOUT;
 80058fc:	2323      	movs	r3, #35	; 0x23
 80058fe:	18fb      	adds	r3, r7, r3
 8005900:	2203      	movs	r2, #3
 8005902:	701a      	strb	r2, [r3, #0]
        goto error;
 8005904:	e01b      	b.n	800593e <HAL_SPI_TransmitReceive+0x382>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800590a:	b29b      	uxth	r3, r3
 800590c:	2b00      	cmp	r3, #0
 800590e:	d19d      	bne.n	800584c <HAL_SPI_TransmitReceive+0x290>
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	2246      	movs	r2, #70	; 0x46
 8005914:	5a9b      	ldrh	r3, [r3, r2]
 8005916:	b29b      	uxth	r3, r3
 8005918:	2b00      	cmp	r3, #0
 800591a:	d197      	bne.n	800584c <HAL_SPI_TransmitReceive+0x290>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800591c:	69fa      	ldr	r2, [r7, #28]
 800591e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	0018      	movs	r0, r3
 8005924:	f000 f9aa 	bl	8005c7c <SPI_EndRxTxTransaction>
 8005928:	1e03      	subs	r3, r0, #0
 800592a:	d007      	beq.n	800593c <HAL_SPI_TransmitReceive+0x380>
  {
    errorcode = HAL_ERROR;
 800592c:	2323      	movs	r3, #35	; 0x23
 800592e:	18fb      	adds	r3, r7, r3
 8005930:	2201      	movs	r2, #1
 8005932:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	2220      	movs	r2, #32
 8005938:	661a      	str	r2, [r3, #96]	; 0x60
 800593a:	e000      	b.n	800593e <HAL_SPI_TransmitReceive+0x382>
  }

error :
 800593c:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	225d      	movs	r2, #93	; 0x5d
 8005942:	2101      	movs	r1, #1
 8005944:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	225c      	movs	r2, #92	; 0x5c
 800594a:	2100      	movs	r1, #0
 800594c:	5499      	strb	r1, [r3, r2]
  return errorcode;
 800594e:	2323      	movs	r3, #35	; 0x23
 8005950:	18fb      	adds	r3, r7, r3
 8005952:	781b      	ldrb	r3, [r3, #0]
}
 8005954:	0018      	movs	r0, r3
 8005956:	46bd      	mov	sp, r7
 8005958:	b00a      	add	sp, #40	; 0x28
 800595a:	bd80      	pop	{r7, pc}
 800595c:	ffffefff 	.word	0xffffefff

08005960 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005960:	b580      	push	{r7, lr}
 8005962:	b088      	sub	sp, #32
 8005964:	af00      	add	r7, sp, #0
 8005966:	60f8      	str	r0, [r7, #12]
 8005968:	60b9      	str	r1, [r7, #8]
 800596a:	603b      	str	r3, [r7, #0]
 800596c:	1dfb      	adds	r3, r7, #7
 800596e:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005970:	f7fb ff8e 	bl	8001890 <HAL_GetTick>
 8005974:	0002      	movs	r2, r0
 8005976:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005978:	1a9b      	subs	r3, r3, r2
 800597a:	683a      	ldr	r2, [r7, #0]
 800597c:	18d3      	adds	r3, r2, r3
 800597e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005980:	f7fb ff86 	bl	8001890 <HAL_GetTick>
 8005984:	0003      	movs	r3, r0
 8005986:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005988:	4b3a      	ldr	r3, [pc, #232]	; (8005a74 <SPI_WaitFlagStateUntilTimeout+0x114>)
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	015b      	lsls	r3, r3, #5
 800598e:	0d1b      	lsrs	r3, r3, #20
 8005990:	69fa      	ldr	r2, [r7, #28]
 8005992:	4353      	muls	r3, r2
 8005994:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005996:	e058      	b.n	8005a4a <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005998:	683b      	ldr	r3, [r7, #0]
 800599a:	3301      	adds	r3, #1
 800599c:	d055      	beq.n	8005a4a <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800599e:	f7fb ff77 	bl	8001890 <HAL_GetTick>
 80059a2:	0002      	movs	r2, r0
 80059a4:	69bb      	ldr	r3, [r7, #24]
 80059a6:	1ad3      	subs	r3, r2, r3
 80059a8:	69fa      	ldr	r2, [r7, #28]
 80059aa:	429a      	cmp	r2, r3
 80059ac:	d902      	bls.n	80059b4 <SPI_WaitFlagStateUntilTimeout+0x54>
 80059ae:	69fb      	ldr	r3, [r7, #28]
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d142      	bne.n	8005a3a <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	685a      	ldr	r2, [r3, #4]
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	21e0      	movs	r1, #224	; 0xe0
 80059c0:	438a      	bics	r2, r1
 80059c2:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	685a      	ldr	r2, [r3, #4]
 80059c8:	2382      	movs	r3, #130	; 0x82
 80059ca:	005b      	lsls	r3, r3, #1
 80059cc:	429a      	cmp	r2, r3
 80059ce:	d113      	bne.n	80059f8 <SPI_WaitFlagStateUntilTimeout+0x98>
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	689a      	ldr	r2, [r3, #8]
 80059d4:	2380      	movs	r3, #128	; 0x80
 80059d6:	021b      	lsls	r3, r3, #8
 80059d8:	429a      	cmp	r2, r3
 80059da:	d005      	beq.n	80059e8 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	689a      	ldr	r2, [r3, #8]
 80059e0:	2380      	movs	r3, #128	; 0x80
 80059e2:	00db      	lsls	r3, r3, #3
 80059e4:	429a      	cmp	r2, r3
 80059e6:	d107      	bne.n	80059f8 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	681a      	ldr	r2, [r3, #0]
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	2140      	movs	r1, #64	; 0x40
 80059f4:	438a      	bics	r2, r1
 80059f6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80059fc:	2380      	movs	r3, #128	; 0x80
 80059fe:	019b      	lsls	r3, r3, #6
 8005a00:	429a      	cmp	r2, r3
 8005a02:	d110      	bne.n	8005a26 <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	681a      	ldr	r2, [r3, #0]
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	491a      	ldr	r1, [pc, #104]	; (8005a78 <SPI_WaitFlagStateUntilTimeout+0x118>)
 8005a10:	400a      	ands	r2, r1
 8005a12:	601a      	str	r2, [r3, #0]
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	681a      	ldr	r2, [r3, #0]
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	2180      	movs	r1, #128	; 0x80
 8005a20:	0189      	lsls	r1, r1, #6
 8005a22:	430a      	orrs	r2, r1
 8005a24:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	225d      	movs	r2, #93	; 0x5d
 8005a2a:	2101      	movs	r1, #1
 8005a2c:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	225c      	movs	r2, #92	; 0x5c
 8005a32:	2100      	movs	r1, #0
 8005a34:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8005a36:	2303      	movs	r3, #3
 8005a38:	e017      	b.n	8005a6a <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8005a3a:	697b      	ldr	r3, [r7, #20]
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d101      	bne.n	8005a44 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 8005a40:	2300      	movs	r3, #0
 8005a42:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005a44:	697b      	ldr	r3, [r7, #20]
 8005a46:	3b01      	subs	r3, #1
 8005a48:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	689b      	ldr	r3, [r3, #8]
 8005a50:	68ba      	ldr	r2, [r7, #8]
 8005a52:	4013      	ands	r3, r2
 8005a54:	68ba      	ldr	r2, [r7, #8]
 8005a56:	1ad3      	subs	r3, r2, r3
 8005a58:	425a      	negs	r2, r3
 8005a5a:	4153      	adcs	r3, r2
 8005a5c:	b2db      	uxtb	r3, r3
 8005a5e:	001a      	movs	r2, r3
 8005a60:	1dfb      	adds	r3, r7, #7
 8005a62:	781b      	ldrb	r3, [r3, #0]
 8005a64:	429a      	cmp	r2, r3
 8005a66:	d197      	bne.n	8005998 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005a68:	2300      	movs	r3, #0
}
 8005a6a:	0018      	movs	r0, r3
 8005a6c:	46bd      	mov	sp, r7
 8005a6e:	b008      	add	sp, #32
 8005a70:	bd80      	pop	{r7, pc}
 8005a72:	46c0      	nop			; (mov r8, r8)
 8005a74:	20000000 	.word	0x20000000
 8005a78:	ffffdfff 	.word	0xffffdfff

08005a7c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005a7c:	b580      	push	{r7, lr}
 8005a7e:	b08a      	sub	sp, #40	; 0x28
 8005a80:	af00      	add	r7, sp, #0
 8005a82:	60f8      	str	r0, [r7, #12]
 8005a84:	60b9      	str	r1, [r7, #8]
 8005a86:	607a      	str	r2, [r7, #4]
 8005a88:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8005a8a:	2317      	movs	r3, #23
 8005a8c:	18fb      	adds	r3, r7, r3
 8005a8e:	2200      	movs	r2, #0
 8005a90:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8005a92:	f7fb fefd 	bl	8001890 <HAL_GetTick>
 8005a96:	0002      	movs	r2, r0
 8005a98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a9a:	1a9b      	subs	r3, r3, r2
 8005a9c:	683a      	ldr	r2, [r7, #0]
 8005a9e:	18d3      	adds	r3, r2, r3
 8005aa0:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8005aa2:	f7fb fef5 	bl	8001890 <HAL_GetTick>
 8005aa6:	0003      	movs	r3, r0
 8005aa8:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	330c      	adds	r3, #12
 8005ab0:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8005ab2:	4b41      	ldr	r3, [pc, #260]	; (8005bb8 <SPI_WaitFifoStateUntilTimeout+0x13c>)
 8005ab4:	681a      	ldr	r2, [r3, #0]
 8005ab6:	0013      	movs	r3, r2
 8005ab8:	009b      	lsls	r3, r3, #2
 8005aba:	189b      	adds	r3, r3, r2
 8005abc:	00da      	lsls	r2, r3, #3
 8005abe:	1ad3      	subs	r3, r2, r3
 8005ac0:	0d1b      	lsrs	r3, r3, #20
 8005ac2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005ac4:	4353      	muls	r3, r2
 8005ac6:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8005ac8:	e068      	b.n	8005b9c <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8005aca:	68ba      	ldr	r2, [r7, #8]
 8005acc:	23c0      	movs	r3, #192	; 0xc0
 8005ace:	00db      	lsls	r3, r3, #3
 8005ad0:	429a      	cmp	r2, r3
 8005ad2:	d10a      	bne.n	8005aea <SPI_WaitFifoStateUntilTimeout+0x6e>
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d107      	bne.n	8005aea <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8005ada:	69fb      	ldr	r3, [r7, #28]
 8005adc:	781b      	ldrb	r3, [r3, #0]
 8005ade:	b2da      	uxtb	r2, r3
 8005ae0:	2117      	movs	r1, #23
 8005ae2:	187b      	adds	r3, r7, r1
 8005ae4:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8005ae6:	187b      	adds	r3, r7, r1
 8005ae8:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8005aea:	683b      	ldr	r3, [r7, #0]
 8005aec:	3301      	adds	r3, #1
 8005aee:	d055      	beq.n	8005b9c <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005af0:	f7fb fece 	bl	8001890 <HAL_GetTick>
 8005af4:	0002      	movs	r2, r0
 8005af6:	6a3b      	ldr	r3, [r7, #32]
 8005af8:	1ad3      	subs	r3, r2, r3
 8005afa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005afc:	429a      	cmp	r2, r3
 8005afe:	d902      	bls.n	8005b06 <SPI_WaitFifoStateUntilTimeout+0x8a>
 8005b00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d142      	bne.n	8005b8c <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	685a      	ldr	r2, [r3, #4]
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	21e0      	movs	r1, #224	; 0xe0
 8005b12:	438a      	bics	r2, r1
 8005b14:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	685a      	ldr	r2, [r3, #4]
 8005b1a:	2382      	movs	r3, #130	; 0x82
 8005b1c:	005b      	lsls	r3, r3, #1
 8005b1e:	429a      	cmp	r2, r3
 8005b20:	d113      	bne.n	8005b4a <SPI_WaitFifoStateUntilTimeout+0xce>
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	689a      	ldr	r2, [r3, #8]
 8005b26:	2380      	movs	r3, #128	; 0x80
 8005b28:	021b      	lsls	r3, r3, #8
 8005b2a:	429a      	cmp	r2, r3
 8005b2c:	d005      	beq.n	8005b3a <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	689a      	ldr	r2, [r3, #8]
 8005b32:	2380      	movs	r3, #128	; 0x80
 8005b34:	00db      	lsls	r3, r3, #3
 8005b36:	429a      	cmp	r2, r3
 8005b38:	d107      	bne.n	8005b4a <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	681a      	ldr	r2, [r3, #0]
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	2140      	movs	r1, #64	; 0x40
 8005b46:	438a      	bics	r2, r1
 8005b48:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005b4e:	2380      	movs	r3, #128	; 0x80
 8005b50:	019b      	lsls	r3, r3, #6
 8005b52:	429a      	cmp	r2, r3
 8005b54:	d110      	bne.n	8005b78 <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	681a      	ldr	r2, [r3, #0]
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	4916      	ldr	r1, [pc, #88]	; (8005bbc <SPI_WaitFifoStateUntilTimeout+0x140>)
 8005b62:	400a      	ands	r2, r1
 8005b64:	601a      	str	r2, [r3, #0]
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	681a      	ldr	r2, [r3, #0]
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	2180      	movs	r1, #128	; 0x80
 8005b72:	0189      	lsls	r1, r1, #6
 8005b74:	430a      	orrs	r2, r1
 8005b76:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	225d      	movs	r2, #93	; 0x5d
 8005b7c:	2101      	movs	r1, #1
 8005b7e:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	225c      	movs	r2, #92	; 0x5c
 8005b84:	2100      	movs	r1, #0
 8005b86:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8005b88:	2303      	movs	r3, #3
 8005b8a:	e010      	b.n	8005bae <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8005b8c:	69bb      	ldr	r3, [r7, #24]
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d101      	bne.n	8005b96 <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 8005b92:	2300      	movs	r3, #0
 8005b94:	627b      	str	r3, [r7, #36]	; 0x24
      }      
      count--;
 8005b96:	69bb      	ldr	r3, [r7, #24]
 8005b98:	3b01      	subs	r3, #1
 8005b9a:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	689b      	ldr	r3, [r3, #8]
 8005ba2:	68ba      	ldr	r2, [r7, #8]
 8005ba4:	4013      	ands	r3, r2
 8005ba6:	687a      	ldr	r2, [r7, #4]
 8005ba8:	429a      	cmp	r2, r3
 8005baa:	d18e      	bne.n	8005aca <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 8005bac:	2300      	movs	r3, #0
}
 8005bae:	0018      	movs	r0, r3
 8005bb0:	46bd      	mov	sp, r7
 8005bb2:	b00a      	add	sp, #40	; 0x28
 8005bb4:	bd80      	pop	{r7, pc}
 8005bb6:	46c0      	nop			; (mov r8, r8)
 8005bb8:	20000000 	.word	0x20000000
 8005bbc:	ffffdfff 	.word	0xffffdfff

08005bc0 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8005bc0:	b580      	push	{r7, lr}
 8005bc2:	b086      	sub	sp, #24
 8005bc4:	af02      	add	r7, sp, #8
 8005bc6:	60f8      	str	r0, [r7, #12]
 8005bc8:	60b9      	str	r1, [r7, #8]
 8005bca:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	685a      	ldr	r2, [r3, #4]
 8005bd0:	2382      	movs	r3, #130	; 0x82
 8005bd2:	005b      	lsls	r3, r3, #1
 8005bd4:	429a      	cmp	r2, r3
 8005bd6:	d113      	bne.n	8005c00 <SPI_EndRxTransaction+0x40>
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	689a      	ldr	r2, [r3, #8]
 8005bdc:	2380      	movs	r3, #128	; 0x80
 8005bde:	021b      	lsls	r3, r3, #8
 8005be0:	429a      	cmp	r2, r3
 8005be2:	d005      	beq.n	8005bf0 <SPI_EndRxTransaction+0x30>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	689a      	ldr	r2, [r3, #8]
 8005be8:	2380      	movs	r3, #128	; 0x80
 8005bea:	00db      	lsls	r3, r3, #3
 8005bec:	429a      	cmp	r2, r3
 8005bee:	d107      	bne.n	8005c00 <SPI_EndRxTransaction+0x40>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	681a      	ldr	r2, [r3, #0]
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	2140      	movs	r1, #64	; 0x40
 8005bfc:	438a      	bics	r2, r1
 8005bfe:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005c00:	68ba      	ldr	r2, [r7, #8]
 8005c02:	68f8      	ldr	r0, [r7, #12]
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	9300      	str	r3, [sp, #0]
 8005c08:	0013      	movs	r3, r2
 8005c0a:	2200      	movs	r2, #0
 8005c0c:	2180      	movs	r1, #128	; 0x80
 8005c0e:	f7ff fea7 	bl	8005960 <SPI_WaitFlagStateUntilTimeout>
 8005c12:	1e03      	subs	r3, r0, #0
 8005c14:	d007      	beq.n	8005c26 <SPI_EndRxTransaction+0x66>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005c1a:	2220      	movs	r2, #32
 8005c1c:	431a      	orrs	r2, r3
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005c22:	2303      	movs	r3, #3
 8005c24:	e026      	b.n	8005c74 <SPI_EndRxTransaction+0xb4>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	685a      	ldr	r2, [r3, #4]
 8005c2a:	2382      	movs	r3, #130	; 0x82
 8005c2c:	005b      	lsls	r3, r3, #1
 8005c2e:	429a      	cmp	r2, r3
 8005c30:	d11f      	bne.n	8005c72 <SPI_EndRxTransaction+0xb2>
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	689a      	ldr	r2, [r3, #8]
 8005c36:	2380      	movs	r3, #128	; 0x80
 8005c38:	021b      	lsls	r3, r3, #8
 8005c3a:	429a      	cmp	r2, r3
 8005c3c:	d005      	beq.n	8005c4a <SPI_EndRxTransaction+0x8a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	689a      	ldr	r2, [r3, #8]
 8005c42:	2380      	movs	r3, #128	; 0x80
 8005c44:	00db      	lsls	r3, r3, #3
 8005c46:	429a      	cmp	r2, r3
 8005c48:	d113      	bne.n	8005c72 <SPI_EndRxTransaction+0xb2>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005c4a:	68ba      	ldr	r2, [r7, #8]
 8005c4c:	23c0      	movs	r3, #192	; 0xc0
 8005c4e:	00d9      	lsls	r1, r3, #3
 8005c50:	68f8      	ldr	r0, [r7, #12]
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	9300      	str	r3, [sp, #0]
 8005c56:	0013      	movs	r3, r2
 8005c58:	2200      	movs	r2, #0
 8005c5a:	f7ff ff0f 	bl	8005a7c <SPI_WaitFifoStateUntilTimeout>
 8005c5e:	1e03      	subs	r3, r0, #0
 8005c60:	d007      	beq.n	8005c72 <SPI_EndRxTransaction+0xb2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005c66:	2220      	movs	r2, #32
 8005c68:	431a      	orrs	r2, r3
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8005c6e:	2303      	movs	r3, #3
 8005c70:	e000      	b.n	8005c74 <SPI_EndRxTransaction+0xb4>
    }
  }
  return HAL_OK;
 8005c72:	2300      	movs	r3, #0
}
 8005c74:	0018      	movs	r0, r3
 8005c76:	46bd      	mov	sp, r7
 8005c78:	b004      	add	sp, #16
 8005c7a:	bd80      	pop	{r7, pc}

08005c7c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005c7c:	b580      	push	{r7, lr}
 8005c7e:	b086      	sub	sp, #24
 8005c80:	af02      	add	r7, sp, #8
 8005c82:	60f8      	str	r0, [r7, #12]
 8005c84:	60b9      	str	r1, [r7, #8]
 8005c86:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005c88:	68ba      	ldr	r2, [r7, #8]
 8005c8a:	23c0      	movs	r3, #192	; 0xc0
 8005c8c:	0159      	lsls	r1, r3, #5
 8005c8e:	68f8      	ldr	r0, [r7, #12]
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	9300      	str	r3, [sp, #0]
 8005c94:	0013      	movs	r3, r2
 8005c96:	2200      	movs	r2, #0
 8005c98:	f7ff fef0 	bl	8005a7c <SPI_WaitFifoStateUntilTimeout>
 8005c9c:	1e03      	subs	r3, r0, #0
 8005c9e:	d007      	beq.n	8005cb0 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005ca4:	2220      	movs	r2, #32
 8005ca6:	431a      	orrs	r2, r3
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005cac:	2303      	movs	r3, #3
 8005cae:	e027      	b.n	8005d00 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005cb0:	68ba      	ldr	r2, [r7, #8]
 8005cb2:	68f8      	ldr	r0, [r7, #12]
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	9300      	str	r3, [sp, #0]
 8005cb8:	0013      	movs	r3, r2
 8005cba:	2200      	movs	r2, #0
 8005cbc:	2180      	movs	r1, #128	; 0x80
 8005cbe:	f7ff fe4f 	bl	8005960 <SPI_WaitFlagStateUntilTimeout>
 8005cc2:	1e03      	subs	r3, r0, #0
 8005cc4:	d007      	beq.n	8005cd6 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005cca:	2220      	movs	r2, #32
 8005ccc:	431a      	orrs	r2, r3
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005cd2:	2303      	movs	r3, #3
 8005cd4:	e014      	b.n	8005d00 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005cd6:	68ba      	ldr	r2, [r7, #8]
 8005cd8:	23c0      	movs	r3, #192	; 0xc0
 8005cda:	00d9      	lsls	r1, r3, #3
 8005cdc:	68f8      	ldr	r0, [r7, #12]
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	9300      	str	r3, [sp, #0]
 8005ce2:	0013      	movs	r3, r2
 8005ce4:	2200      	movs	r2, #0
 8005ce6:	f7ff fec9 	bl	8005a7c <SPI_WaitFifoStateUntilTimeout>
 8005cea:	1e03      	subs	r3, r0, #0
 8005cec:	d007      	beq.n	8005cfe <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005cf2:	2220      	movs	r2, #32
 8005cf4:	431a      	orrs	r2, r3
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005cfa:	2303      	movs	r3, #3
 8005cfc:	e000      	b.n	8005d00 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8005cfe:	2300      	movs	r3, #0
}
 8005d00:	0018      	movs	r0, r3
 8005d02:	46bd      	mov	sp, r7
 8005d04:	b004      	add	sp, #16
 8005d06:	bd80      	pop	{r7, pc}

08005d08 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005d08:	b580      	push	{r7, lr}
 8005d0a:	b082      	sub	sp, #8
 8005d0c:	af00      	add	r7, sp, #0
 8005d0e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d101      	bne.n	8005d1a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005d16:	2301      	movs	r3, #1
 8005d18:	e042      	b.n	8005da0 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	223d      	movs	r2, #61	; 0x3d
 8005d1e:	5c9b      	ldrb	r3, [r3, r2]
 8005d20:	b2db      	uxtb	r3, r3
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d107      	bne.n	8005d36 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	223c      	movs	r2, #60	; 0x3c
 8005d2a:	2100      	movs	r1, #0
 8005d2c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	0018      	movs	r0, r3
 8005d32:	f7fb fc19 	bl	8001568 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	223d      	movs	r2, #61	; 0x3d
 8005d3a:	2102      	movs	r1, #2
 8005d3c:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681a      	ldr	r2, [r3, #0]
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	3304      	adds	r3, #4
 8005d46:	0019      	movs	r1, r3
 8005d48:	0010      	movs	r0, r2
 8005d4a:	f000 fa65 	bl	8006218 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	2246      	movs	r2, #70	; 0x46
 8005d52:	2101      	movs	r1, #1
 8005d54:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	223e      	movs	r2, #62	; 0x3e
 8005d5a:	2101      	movs	r1, #1
 8005d5c:	5499      	strb	r1, [r3, r2]
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	223f      	movs	r2, #63	; 0x3f
 8005d62:	2101      	movs	r1, #1
 8005d64:	5499      	strb	r1, [r3, r2]
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	2240      	movs	r2, #64	; 0x40
 8005d6a:	2101      	movs	r1, #1
 8005d6c:	5499      	strb	r1, [r3, r2]
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	2241      	movs	r2, #65	; 0x41
 8005d72:	2101      	movs	r1, #1
 8005d74:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	2242      	movs	r2, #66	; 0x42
 8005d7a:	2101      	movs	r1, #1
 8005d7c:	5499      	strb	r1, [r3, r2]
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	2243      	movs	r2, #67	; 0x43
 8005d82:	2101      	movs	r1, #1
 8005d84:	5499      	strb	r1, [r3, r2]
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	2244      	movs	r2, #68	; 0x44
 8005d8a:	2101      	movs	r1, #1
 8005d8c:	5499      	strb	r1, [r3, r2]
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	2245      	movs	r2, #69	; 0x45
 8005d92:	2101      	movs	r1, #1
 8005d94:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	223d      	movs	r2, #61	; 0x3d
 8005d9a:	2101      	movs	r1, #1
 8005d9c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005d9e:	2300      	movs	r3, #0
}
 8005da0:	0018      	movs	r0, r3
 8005da2:	46bd      	mov	sp, r7
 8005da4:	b002      	add	sp, #8
 8005da6:	bd80      	pop	{r7, pc}

08005da8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005da8:	b580      	push	{r7, lr}
 8005daa:	b084      	sub	sp, #16
 8005dac:	af00      	add	r7, sp, #0
 8005dae:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	223d      	movs	r2, #61	; 0x3d
 8005db4:	5c9b      	ldrb	r3, [r3, r2]
 8005db6:	b2db      	uxtb	r3, r3
 8005db8:	2b01      	cmp	r3, #1
 8005dba:	d001      	beq.n	8005dc0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005dbc:	2301      	movs	r3, #1
 8005dbe:	e03b      	b.n	8005e38 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	223d      	movs	r2, #61	; 0x3d
 8005dc4:	2102      	movs	r1, #2
 8005dc6:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	68da      	ldr	r2, [r3, #12]
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	2101      	movs	r1, #1
 8005dd4:	430a      	orrs	r2, r1
 8005dd6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	4a18      	ldr	r2, [pc, #96]	; (8005e40 <HAL_TIM_Base_Start_IT+0x98>)
 8005dde:	4293      	cmp	r3, r2
 8005de0:	d00f      	beq.n	8005e02 <HAL_TIM_Base_Start_IT+0x5a>
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	681a      	ldr	r2, [r3, #0]
 8005de6:	2380      	movs	r3, #128	; 0x80
 8005de8:	05db      	lsls	r3, r3, #23
 8005dea:	429a      	cmp	r2, r3
 8005dec:	d009      	beq.n	8005e02 <HAL_TIM_Base_Start_IT+0x5a>
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	4a14      	ldr	r2, [pc, #80]	; (8005e44 <HAL_TIM_Base_Start_IT+0x9c>)
 8005df4:	4293      	cmp	r3, r2
 8005df6:	d004      	beq.n	8005e02 <HAL_TIM_Base_Start_IT+0x5a>
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	4a12      	ldr	r2, [pc, #72]	; (8005e48 <HAL_TIM_Base_Start_IT+0xa0>)
 8005dfe:	4293      	cmp	r3, r2
 8005e00:	d111      	bne.n	8005e26 <HAL_TIM_Base_Start_IT+0x7e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	689b      	ldr	r3, [r3, #8]
 8005e08:	2207      	movs	r2, #7
 8005e0a:	4013      	ands	r3, r2
 8005e0c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	2b06      	cmp	r3, #6
 8005e12:	d010      	beq.n	8005e36 <HAL_TIM_Base_Start_IT+0x8e>
    {
      __HAL_TIM_ENABLE(htim);
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	681a      	ldr	r2, [r3, #0]
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	2101      	movs	r1, #1
 8005e20:	430a      	orrs	r2, r1
 8005e22:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005e24:	e007      	b.n	8005e36 <HAL_TIM_Base_Start_IT+0x8e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	681a      	ldr	r2, [r3, #0]
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	2101      	movs	r1, #1
 8005e32:	430a      	orrs	r2, r1
 8005e34:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005e36:	2300      	movs	r3, #0
}
 8005e38:	0018      	movs	r0, r3
 8005e3a:	46bd      	mov	sp, r7
 8005e3c:	b004      	add	sp, #16
 8005e3e:	bd80      	pop	{r7, pc}
 8005e40:	40012c00 	.word	0x40012c00
 8005e44:	40000400 	.word	0x40000400
 8005e48:	40014000 	.word	0x40014000

08005e4c <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8005e4c:	b580      	push	{r7, lr}
 8005e4e:	b082      	sub	sp, #8
 8005e50:	af00      	add	r7, sp, #0
 8005e52:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d101      	bne.n	8005e5e <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8005e5a:	2301      	movs	r3, #1
 8005e5c:	e042      	b.n	8005ee4 <HAL_TIM_OC_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	223d      	movs	r2, #61	; 0x3d
 8005e62:	5c9b      	ldrb	r3, [r3, r2]
 8005e64:	b2db      	uxtb	r3, r3
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d107      	bne.n	8005e7a <HAL_TIM_OC_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	223c      	movs	r2, #60	; 0x3c
 8005e6e:	2100      	movs	r1, #0
 8005e70:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	0018      	movs	r0, r3
 8005e76:	f000 f839 	bl	8005eec <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	223d      	movs	r2, #61	; 0x3d
 8005e7e:	2102      	movs	r1, #2
 8005e80:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	681a      	ldr	r2, [r3, #0]
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	3304      	adds	r3, #4
 8005e8a:	0019      	movs	r1, r3
 8005e8c:	0010      	movs	r0, r2
 8005e8e:	f000 f9c3 	bl	8006218 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	2246      	movs	r2, #70	; 0x46
 8005e96:	2101      	movs	r1, #1
 8005e98:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	223e      	movs	r2, #62	; 0x3e
 8005e9e:	2101      	movs	r1, #1
 8005ea0:	5499      	strb	r1, [r3, r2]
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	223f      	movs	r2, #63	; 0x3f
 8005ea6:	2101      	movs	r1, #1
 8005ea8:	5499      	strb	r1, [r3, r2]
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	2240      	movs	r2, #64	; 0x40
 8005eae:	2101      	movs	r1, #1
 8005eb0:	5499      	strb	r1, [r3, r2]
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	2241      	movs	r2, #65	; 0x41
 8005eb6:	2101      	movs	r1, #1
 8005eb8:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	2242      	movs	r2, #66	; 0x42
 8005ebe:	2101      	movs	r1, #1
 8005ec0:	5499      	strb	r1, [r3, r2]
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	2243      	movs	r2, #67	; 0x43
 8005ec6:	2101      	movs	r1, #1
 8005ec8:	5499      	strb	r1, [r3, r2]
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	2244      	movs	r2, #68	; 0x44
 8005ece:	2101      	movs	r1, #1
 8005ed0:	5499      	strb	r1, [r3, r2]
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	2245      	movs	r2, #69	; 0x45
 8005ed6:	2101      	movs	r1, #1
 8005ed8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	223d      	movs	r2, #61	; 0x3d
 8005ede:	2101      	movs	r1, #1
 8005ee0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005ee2:	2300      	movs	r3, #0
}
 8005ee4:	0018      	movs	r0, r3
 8005ee6:	46bd      	mov	sp, r7
 8005ee8:	b002      	add	sp, #8
 8005eea:	bd80      	pop	{r7, pc}

08005eec <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8005eec:	b580      	push	{r7, lr}
 8005eee:	b082      	sub	sp, #8
 8005ef0:	af00      	add	r7, sp, #0
 8005ef2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8005ef4:	46c0      	nop			; (mov r8, r8)
 8005ef6:	46bd      	mov	sp, r7
 8005ef8:	b002      	add	sp, #8
 8005efa:	bd80      	pop	{r7, pc}

08005efc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005efc:	b580      	push	{r7, lr}
 8005efe:	b082      	sub	sp, #8
 8005f00:	af00      	add	r7, sp, #0
 8005f02:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	691b      	ldr	r3, [r3, #16]
 8005f0a:	2202      	movs	r2, #2
 8005f0c:	4013      	ands	r3, r2
 8005f0e:	2b02      	cmp	r3, #2
 8005f10:	d124      	bne.n	8005f5c <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	68db      	ldr	r3, [r3, #12]
 8005f18:	2202      	movs	r2, #2
 8005f1a:	4013      	ands	r3, r2
 8005f1c:	2b02      	cmp	r3, #2
 8005f1e:	d11d      	bne.n	8005f5c <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	2203      	movs	r2, #3
 8005f26:	4252      	negs	r2, r2
 8005f28:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	2201      	movs	r2, #1
 8005f2e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	699b      	ldr	r3, [r3, #24]
 8005f36:	2203      	movs	r2, #3
 8005f38:	4013      	ands	r3, r2
 8005f3a:	d004      	beq.n	8005f46 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	0018      	movs	r0, r3
 8005f40:	f000 f952 	bl	80061e8 <HAL_TIM_IC_CaptureCallback>
 8005f44:	e007      	b.n	8005f56 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	0018      	movs	r0, r3
 8005f4a:	f000 f945 	bl	80061d8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	0018      	movs	r0, r3
 8005f52:	f000 f951 	bl	80061f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	2200      	movs	r2, #0
 8005f5a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	691b      	ldr	r3, [r3, #16]
 8005f62:	2204      	movs	r2, #4
 8005f64:	4013      	ands	r3, r2
 8005f66:	2b04      	cmp	r3, #4
 8005f68:	d125      	bne.n	8005fb6 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	68db      	ldr	r3, [r3, #12]
 8005f70:	2204      	movs	r2, #4
 8005f72:	4013      	ands	r3, r2
 8005f74:	2b04      	cmp	r3, #4
 8005f76:	d11e      	bne.n	8005fb6 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	2205      	movs	r2, #5
 8005f7e:	4252      	negs	r2, r2
 8005f80:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	2202      	movs	r2, #2
 8005f86:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	699a      	ldr	r2, [r3, #24]
 8005f8e:	23c0      	movs	r3, #192	; 0xc0
 8005f90:	009b      	lsls	r3, r3, #2
 8005f92:	4013      	ands	r3, r2
 8005f94:	d004      	beq.n	8005fa0 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	0018      	movs	r0, r3
 8005f9a:	f000 f925 	bl	80061e8 <HAL_TIM_IC_CaptureCallback>
 8005f9e:	e007      	b.n	8005fb0 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	0018      	movs	r0, r3
 8005fa4:	f000 f918 	bl	80061d8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	0018      	movs	r0, r3
 8005fac:	f000 f924 	bl	80061f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	2200      	movs	r2, #0
 8005fb4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	691b      	ldr	r3, [r3, #16]
 8005fbc:	2208      	movs	r2, #8
 8005fbe:	4013      	ands	r3, r2
 8005fc0:	2b08      	cmp	r3, #8
 8005fc2:	d124      	bne.n	800600e <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	68db      	ldr	r3, [r3, #12]
 8005fca:	2208      	movs	r2, #8
 8005fcc:	4013      	ands	r3, r2
 8005fce:	2b08      	cmp	r3, #8
 8005fd0:	d11d      	bne.n	800600e <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	2209      	movs	r2, #9
 8005fd8:	4252      	negs	r2, r2
 8005fda:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	2204      	movs	r2, #4
 8005fe0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	69db      	ldr	r3, [r3, #28]
 8005fe8:	2203      	movs	r2, #3
 8005fea:	4013      	ands	r3, r2
 8005fec:	d004      	beq.n	8005ff8 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	0018      	movs	r0, r3
 8005ff2:	f000 f8f9 	bl	80061e8 <HAL_TIM_IC_CaptureCallback>
 8005ff6:	e007      	b.n	8006008 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	0018      	movs	r0, r3
 8005ffc:	f000 f8ec 	bl	80061d8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	0018      	movs	r0, r3
 8006004:	f000 f8f8 	bl	80061f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	2200      	movs	r2, #0
 800600c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	691b      	ldr	r3, [r3, #16]
 8006014:	2210      	movs	r2, #16
 8006016:	4013      	ands	r3, r2
 8006018:	2b10      	cmp	r3, #16
 800601a:	d125      	bne.n	8006068 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	68db      	ldr	r3, [r3, #12]
 8006022:	2210      	movs	r2, #16
 8006024:	4013      	ands	r3, r2
 8006026:	2b10      	cmp	r3, #16
 8006028:	d11e      	bne.n	8006068 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	2211      	movs	r2, #17
 8006030:	4252      	negs	r2, r2
 8006032:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	2208      	movs	r2, #8
 8006038:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	69da      	ldr	r2, [r3, #28]
 8006040:	23c0      	movs	r3, #192	; 0xc0
 8006042:	009b      	lsls	r3, r3, #2
 8006044:	4013      	ands	r3, r2
 8006046:	d004      	beq.n	8006052 <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	0018      	movs	r0, r3
 800604c:	f000 f8cc 	bl	80061e8 <HAL_TIM_IC_CaptureCallback>
 8006050:	e007      	b.n	8006062 <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	0018      	movs	r0, r3
 8006056:	f000 f8bf 	bl	80061d8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	0018      	movs	r0, r3
 800605e:	f000 f8cb 	bl	80061f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	2200      	movs	r2, #0
 8006066:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	691b      	ldr	r3, [r3, #16]
 800606e:	2201      	movs	r2, #1
 8006070:	4013      	ands	r3, r2
 8006072:	2b01      	cmp	r3, #1
 8006074:	d10f      	bne.n	8006096 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	68db      	ldr	r3, [r3, #12]
 800607c:	2201      	movs	r2, #1
 800607e:	4013      	ands	r3, r2
 8006080:	2b01      	cmp	r3, #1
 8006082:	d108      	bne.n	8006096 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	2202      	movs	r2, #2
 800608a:	4252      	negs	r2, r2
 800608c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	0018      	movs	r0, r3
 8006092:	f7fa fbf7 	bl	8000884 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	691b      	ldr	r3, [r3, #16]
 800609c:	2280      	movs	r2, #128	; 0x80
 800609e:	4013      	ands	r3, r2
 80060a0:	2b80      	cmp	r3, #128	; 0x80
 80060a2:	d10f      	bne.n	80060c4 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	68db      	ldr	r3, [r3, #12]
 80060aa:	2280      	movs	r2, #128	; 0x80
 80060ac:	4013      	ands	r3, r2
 80060ae:	2b80      	cmp	r3, #128	; 0x80
 80060b0:	d108      	bne.n	80060c4 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	2281      	movs	r2, #129	; 0x81
 80060b8:	4252      	negs	r2, r2
 80060ba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	0018      	movs	r0, r3
 80060c0:	f000 fb2e 	bl	8006720 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	691b      	ldr	r3, [r3, #16]
 80060ca:	2240      	movs	r2, #64	; 0x40
 80060cc:	4013      	ands	r3, r2
 80060ce:	2b40      	cmp	r3, #64	; 0x40
 80060d0:	d10f      	bne.n	80060f2 <HAL_TIM_IRQHandler+0x1f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	68db      	ldr	r3, [r3, #12]
 80060d8:	2240      	movs	r2, #64	; 0x40
 80060da:	4013      	ands	r3, r2
 80060dc:	2b40      	cmp	r3, #64	; 0x40
 80060de:	d108      	bne.n	80060f2 <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	2241      	movs	r2, #65	; 0x41
 80060e6:	4252      	negs	r2, r2
 80060e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	0018      	movs	r0, r3
 80060ee:	f000 f88b 	bl	8006208 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	691b      	ldr	r3, [r3, #16]
 80060f8:	2220      	movs	r2, #32
 80060fa:	4013      	ands	r3, r2
 80060fc:	2b20      	cmp	r3, #32
 80060fe:	d10f      	bne.n	8006120 <HAL_TIM_IRQHandler+0x224>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	68db      	ldr	r3, [r3, #12]
 8006106:	2220      	movs	r2, #32
 8006108:	4013      	ands	r3, r2
 800610a:	2b20      	cmp	r3, #32
 800610c:	d108      	bne.n	8006120 <HAL_TIM_IRQHandler+0x224>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	2221      	movs	r2, #33	; 0x21
 8006114:	4252      	negs	r2, r2
 8006116:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	0018      	movs	r0, r3
 800611c:	f000 faf8 	bl	8006710 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006120:	46c0      	nop			; (mov r8, r8)
 8006122:	46bd      	mov	sp, r7
 8006124:	b002      	add	sp, #8
 8006126:	bd80      	pop	{r7, pc}

08006128 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8006128:	b580      	push	{r7, lr}
 800612a:	b086      	sub	sp, #24
 800612c:	af00      	add	r7, sp, #0
 800612e:	60f8      	str	r0, [r7, #12]
 8006130:	60b9      	str	r1, [r7, #8]
 8006132:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006134:	2317      	movs	r3, #23
 8006136:	18fb      	adds	r3, r7, r3
 8006138:	2200      	movs	r2, #0
 800613a:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	223c      	movs	r2, #60	; 0x3c
 8006140:	5c9b      	ldrb	r3, [r3, r2]
 8006142:	2b01      	cmp	r3, #1
 8006144:	d101      	bne.n	800614a <HAL_TIM_OC_ConfigChannel+0x22>
 8006146:	2302      	movs	r3, #2
 8006148:	e042      	b.n	80061d0 <HAL_TIM_OC_ConfigChannel+0xa8>
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	223c      	movs	r2, #60	; 0x3c
 800614e:	2101      	movs	r1, #1
 8006150:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	2b0c      	cmp	r3, #12
 8006156:	d027      	beq.n	80061a8 <HAL_TIM_OC_ConfigChannel+0x80>
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	2b0c      	cmp	r3, #12
 800615c:	d82c      	bhi.n	80061b8 <HAL_TIM_OC_ConfigChannel+0x90>
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	2b08      	cmp	r3, #8
 8006162:	d019      	beq.n	8006198 <HAL_TIM_OC_ConfigChannel+0x70>
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	2b08      	cmp	r3, #8
 8006168:	d826      	bhi.n	80061b8 <HAL_TIM_OC_ConfigChannel+0x90>
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	2b00      	cmp	r3, #0
 800616e:	d003      	beq.n	8006178 <HAL_TIM_OC_ConfigChannel+0x50>
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	2b04      	cmp	r3, #4
 8006174:	d008      	beq.n	8006188 <HAL_TIM_OC_ConfigChannel+0x60>
 8006176:	e01f      	b.n	80061b8 <HAL_TIM_OC_ConfigChannel+0x90>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	68ba      	ldr	r2, [r7, #8]
 800617e:	0011      	movs	r1, r2
 8006180:	0018      	movs	r0, r3
 8006182:	f000 f8c9 	bl	8006318 <TIM_OC1_SetConfig>
      break;
 8006186:	e01c      	b.n	80061c2 <HAL_TIM_OC_ConfigChannel+0x9a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	68ba      	ldr	r2, [r7, #8]
 800618e:	0011      	movs	r1, r2
 8006190:	0018      	movs	r0, r3
 8006192:	f000 f949 	bl	8006428 <TIM_OC2_SetConfig>
      break;
 8006196:	e014      	b.n	80061c2 <HAL_TIM_OC_ConfigChannel+0x9a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	68ba      	ldr	r2, [r7, #8]
 800619e:	0011      	movs	r1, r2
 80061a0:	0018      	movs	r0, r3
 80061a2:	f000 f9c5 	bl	8006530 <TIM_OC3_SetConfig>
      break;
 80061a6:	e00c      	b.n	80061c2 <HAL_TIM_OC_ConfigChannel+0x9a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	68ba      	ldr	r2, [r7, #8]
 80061ae:	0011      	movs	r1, r2
 80061b0:	0018      	movs	r0, r3
 80061b2:	f000 fa43 	bl	800663c <TIM_OC4_SetConfig>
      break;
 80061b6:	e004      	b.n	80061c2 <HAL_TIM_OC_ConfigChannel+0x9a>
    }

    default:
      status = HAL_ERROR;
 80061b8:	2317      	movs	r3, #23
 80061ba:	18fb      	adds	r3, r7, r3
 80061bc:	2201      	movs	r2, #1
 80061be:	701a      	strb	r2, [r3, #0]
      break;
 80061c0:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	223c      	movs	r2, #60	; 0x3c
 80061c6:	2100      	movs	r1, #0
 80061c8:	5499      	strb	r1, [r3, r2]

  return status;
 80061ca:	2317      	movs	r3, #23
 80061cc:	18fb      	adds	r3, r7, r3
 80061ce:	781b      	ldrb	r3, [r3, #0]
}
 80061d0:	0018      	movs	r0, r3
 80061d2:	46bd      	mov	sp, r7
 80061d4:	b006      	add	sp, #24
 80061d6:	bd80      	pop	{r7, pc}

080061d8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80061d8:	b580      	push	{r7, lr}
 80061da:	b082      	sub	sp, #8
 80061dc:	af00      	add	r7, sp, #0
 80061de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80061e0:	46c0      	nop			; (mov r8, r8)
 80061e2:	46bd      	mov	sp, r7
 80061e4:	b002      	add	sp, #8
 80061e6:	bd80      	pop	{r7, pc}

080061e8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80061e8:	b580      	push	{r7, lr}
 80061ea:	b082      	sub	sp, #8
 80061ec:	af00      	add	r7, sp, #0
 80061ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80061f0:	46c0      	nop			; (mov r8, r8)
 80061f2:	46bd      	mov	sp, r7
 80061f4:	b002      	add	sp, #8
 80061f6:	bd80      	pop	{r7, pc}

080061f8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80061f8:	b580      	push	{r7, lr}
 80061fa:	b082      	sub	sp, #8
 80061fc:	af00      	add	r7, sp, #0
 80061fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006200:	46c0      	nop			; (mov r8, r8)
 8006202:	46bd      	mov	sp, r7
 8006204:	b002      	add	sp, #8
 8006206:	bd80      	pop	{r7, pc}

08006208 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006208:	b580      	push	{r7, lr}
 800620a:	b082      	sub	sp, #8
 800620c:	af00      	add	r7, sp, #0
 800620e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006210:	46c0      	nop			; (mov r8, r8)
 8006212:	46bd      	mov	sp, r7
 8006214:	b002      	add	sp, #8
 8006216:	bd80      	pop	{r7, pc}

08006218 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006218:	b580      	push	{r7, lr}
 800621a:	b084      	sub	sp, #16
 800621c:	af00      	add	r7, sp, #0
 800621e:	6078      	str	r0, [r7, #4]
 8006220:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	4a34      	ldr	r2, [pc, #208]	; (80062fc <TIM_Base_SetConfig+0xe4>)
 800622c:	4293      	cmp	r3, r2
 800622e:	d008      	beq.n	8006242 <TIM_Base_SetConfig+0x2a>
 8006230:	687a      	ldr	r2, [r7, #4]
 8006232:	2380      	movs	r3, #128	; 0x80
 8006234:	05db      	lsls	r3, r3, #23
 8006236:	429a      	cmp	r2, r3
 8006238:	d003      	beq.n	8006242 <TIM_Base_SetConfig+0x2a>
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	4a30      	ldr	r2, [pc, #192]	; (8006300 <TIM_Base_SetConfig+0xe8>)
 800623e:	4293      	cmp	r3, r2
 8006240:	d108      	bne.n	8006254 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	2270      	movs	r2, #112	; 0x70
 8006246:	4393      	bics	r3, r2
 8006248:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800624a:	683b      	ldr	r3, [r7, #0]
 800624c:	685b      	ldr	r3, [r3, #4]
 800624e:	68fa      	ldr	r2, [r7, #12]
 8006250:	4313      	orrs	r3, r2
 8006252:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	4a29      	ldr	r2, [pc, #164]	; (80062fc <TIM_Base_SetConfig+0xe4>)
 8006258:	4293      	cmp	r3, r2
 800625a:	d018      	beq.n	800628e <TIM_Base_SetConfig+0x76>
 800625c:	687a      	ldr	r2, [r7, #4]
 800625e:	2380      	movs	r3, #128	; 0x80
 8006260:	05db      	lsls	r3, r3, #23
 8006262:	429a      	cmp	r2, r3
 8006264:	d013      	beq.n	800628e <TIM_Base_SetConfig+0x76>
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	4a25      	ldr	r2, [pc, #148]	; (8006300 <TIM_Base_SetConfig+0xe8>)
 800626a:	4293      	cmp	r3, r2
 800626c:	d00f      	beq.n	800628e <TIM_Base_SetConfig+0x76>
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	4a24      	ldr	r2, [pc, #144]	; (8006304 <TIM_Base_SetConfig+0xec>)
 8006272:	4293      	cmp	r3, r2
 8006274:	d00b      	beq.n	800628e <TIM_Base_SetConfig+0x76>
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	4a23      	ldr	r2, [pc, #140]	; (8006308 <TIM_Base_SetConfig+0xf0>)
 800627a:	4293      	cmp	r3, r2
 800627c:	d007      	beq.n	800628e <TIM_Base_SetConfig+0x76>
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	4a22      	ldr	r2, [pc, #136]	; (800630c <TIM_Base_SetConfig+0xf4>)
 8006282:	4293      	cmp	r3, r2
 8006284:	d003      	beq.n	800628e <TIM_Base_SetConfig+0x76>
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	4a21      	ldr	r2, [pc, #132]	; (8006310 <TIM_Base_SetConfig+0xf8>)
 800628a:	4293      	cmp	r3, r2
 800628c:	d108      	bne.n	80062a0 <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	4a20      	ldr	r2, [pc, #128]	; (8006314 <TIM_Base_SetConfig+0xfc>)
 8006292:	4013      	ands	r3, r2
 8006294:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006296:	683b      	ldr	r3, [r7, #0]
 8006298:	68db      	ldr	r3, [r3, #12]
 800629a:	68fa      	ldr	r2, [r7, #12]
 800629c:	4313      	orrs	r3, r2
 800629e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	2280      	movs	r2, #128	; 0x80
 80062a4:	4393      	bics	r3, r2
 80062a6:	001a      	movs	r2, r3
 80062a8:	683b      	ldr	r3, [r7, #0]
 80062aa:	695b      	ldr	r3, [r3, #20]
 80062ac:	4313      	orrs	r3, r2
 80062ae:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	68fa      	ldr	r2, [r7, #12]
 80062b4:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80062b6:	683b      	ldr	r3, [r7, #0]
 80062b8:	689a      	ldr	r2, [r3, #8]
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80062be:	683b      	ldr	r3, [r7, #0]
 80062c0:	681a      	ldr	r2, [r3, #0]
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	4a0c      	ldr	r2, [pc, #48]	; (80062fc <TIM_Base_SetConfig+0xe4>)
 80062ca:	4293      	cmp	r3, r2
 80062cc:	d00b      	beq.n	80062e6 <TIM_Base_SetConfig+0xce>
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	4a0d      	ldr	r2, [pc, #52]	; (8006308 <TIM_Base_SetConfig+0xf0>)
 80062d2:	4293      	cmp	r3, r2
 80062d4:	d007      	beq.n	80062e6 <TIM_Base_SetConfig+0xce>
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	4a0c      	ldr	r2, [pc, #48]	; (800630c <TIM_Base_SetConfig+0xf4>)
 80062da:	4293      	cmp	r3, r2
 80062dc:	d003      	beq.n	80062e6 <TIM_Base_SetConfig+0xce>
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	4a0b      	ldr	r2, [pc, #44]	; (8006310 <TIM_Base_SetConfig+0xf8>)
 80062e2:	4293      	cmp	r3, r2
 80062e4:	d103      	bne.n	80062ee <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80062e6:	683b      	ldr	r3, [r7, #0]
 80062e8:	691a      	ldr	r2, [r3, #16]
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	2201      	movs	r2, #1
 80062f2:	615a      	str	r2, [r3, #20]
}
 80062f4:	46c0      	nop			; (mov r8, r8)
 80062f6:	46bd      	mov	sp, r7
 80062f8:	b004      	add	sp, #16
 80062fa:	bd80      	pop	{r7, pc}
 80062fc:	40012c00 	.word	0x40012c00
 8006300:	40000400 	.word	0x40000400
 8006304:	40002000 	.word	0x40002000
 8006308:	40014000 	.word	0x40014000
 800630c:	40014400 	.word	0x40014400
 8006310:	40014800 	.word	0x40014800
 8006314:	fffffcff 	.word	0xfffffcff

08006318 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006318:	b580      	push	{r7, lr}
 800631a:	b086      	sub	sp, #24
 800631c:	af00      	add	r7, sp, #0
 800631e:	6078      	str	r0, [r7, #4]
 8006320:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	6a1b      	ldr	r3, [r3, #32]
 8006326:	2201      	movs	r2, #1
 8006328:	4393      	bics	r3, r2
 800632a:	001a      	movs	r2, r3
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	6a1b      	ldr	r3, [r3, #32]
 8006334:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	685b      	ldr	r3, [r3, #4]
 800633a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	699b      	ldr	r3, [r3, #24]
 8006340:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	2270      	movs	r2, #112	; 0x70
 8006346:	4393      	bics	r3, r2
 8006348:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	2203      	movs	r2, #3
 800634e:	4393      	bics	r3, r2
 8006350:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006352:	683b      	ldr	r3, [r7, #0]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	68fa      	ldr	r2, [r7, #12]
 8006358:	4313      	orrs	r3, r2
 800635a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800635c:	697b      	ldr	r3, [r7, #20]
 800635e:	2202      	movs	r2, #2
 8006360:	4393      	bics	r3, r2
 8006362:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006364:	683b      	ldr	r3, [r7, #0]
 8006366:	689b      	ldr	r3, [r3, #8]
 8006368:	697a      	ldr	r2, [r7, #20]
 800636a:	4313      	orrs	r3, r2
 800636c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	4a27      	ldr	r2, [pc, #156]	; (8006410 <TIM_OC1_SetConfig+0xf8>)
 8006372:	4293      	cmp	r3, r2
 8006374:	d00b      	beq.n	800638e <TIM_OC1_SetConfig+0x76>
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	4a26      	ldr	r2, [pc, #152]	; (8006414 <TIM_OC1_SetConfig+0xfc>)
 800637a:	4293      	cmp	r3, r2
 800637c:	d007      	beq.n	800638e <TIM_OC1_SetConfig+0x76>
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	4a25      	ldr	r2, [pc, #148]	; (8006418 <TIM_OC1_SetConfig+0x100>)
 8006382:	4293      	cmp	r3, r2
 8006384:	d003      	beq.n	800638e <TIM_OC1_SetConfig+0x76>
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	4a24      	ldr	r2, [pc, #144]	; (800641c <TIM_OC1_SetConfig+0x104>)
 800638a:	4293      	cmp	r3, r2
 800638c:	d10c      	bne.n	80063a8 <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800638e:	697b      	ldr	r3, [r7, #20]
 8006390:	2208      	movs	r2, #8
 8006392:	4393      	bics	r3, r2
 8006394:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006396:	683b      	ldr	r3, [r7, #0]
 8006398:	68db      	ldr	r3, [r3, #12]
 800639a:	697a      	ldr	r2, [r7, #20]
 800639c:	4313      	orrs	r3, r2
 800639e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80063a0:	697b      	ldr	r3, [r7, #20]
 80063a2:	2204      	movs	r2, #4
 80063a4:	4393      	bics	r3, r2
 80063a6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	4a19      	ldr	r2, [pc, #100]	; (8006410 <TIM_OC1_SetConfig+0xf8>)
 80063ac:	4293      	cmp	r3, r2
 80063ae:	d00b      	beq.n	80063c8 <TIM_OC1_SetConfig+0xb0>
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	4a18      	ldr	r2, [pc, #96]	; (8006414 <TIM_OC1_SetConfig+0xfc>)
 80063b4:	4293      	cmp	r3, r2
 80063b6:	d007      	beq.n	80063c8 <TIM_OC1_SetConfig+0xb0>
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	4a17      	ldr	r2, [pc, #92]	; (8006418 <TIM_OC1_SetConfig+0x100>)
 80063bc:	4293      	cmp	r3, r2
 80063be:	d003      	beq.n	80063c8 <TIM_OC1_SetConfig+0xb0>
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	4a16      	ldr	r2, [pc, #88]	; (800641c <TIM_OC1_SetConfig+0x104>)
 80063c4:	4293      	cmp	r3, r2
 80063c6:	d111      	bne.n	80063ec <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80063c8:	693b      	ldr	r3, [r7, #16]
 80063ca:	4a15      	ldr	r2, [pc, #84]	; (8006420 <TIM_OC1_SetConfig+0x108>)
 80063cc:	4013      	ands	r3, r2
 80063ce:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80063d0:	693b      	ldr	r3, [r7, #16]
 80063d2:	4a14      	ldr	r2, [pc, #80]	; (8006424 <TIM_OC1_SetConfig+0x10c>)
 80063d4:	4013      	ands	r3, r2
 80063d6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80063d8:	683b      	ldr	r3, [r7, #0]
 80063da:	695b      	ldr	r3, [r3, #20]
 80063dc:	693a      	ldr	r2, [r7, #16]
 80063de:	4313      	orrs	r3, r2
 80063e0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80063e2:	683b      	ldr	r3, [r7, #0]
 80063e4:	699b      	ldr	r3, [r3, #24]
 80063e6:	693a      	ldr	r2, [r7, #16]
 80063e8:	4313      	orrs	r3, r2
 80063ea:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	693a      	ldr	r2, [r7, #16]
 80063f0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	68fa      	ldr	r2, [r7, #12]
 80063f6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80063f8:	683b      	ldr	r3, [r7, #0]
 80063fa:	685a      	ldr	r2, [r3, #4]
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	697a      	ldr	r2, [r7, #20]
 8006404:	621a      	str	r2, [r3, #32]
}
 8006406:	46c0      	nop			; (mov r8, r8)
 8006408:	46bd      	mov	sp, r7
 800640a:	b006      	add	sp, #24
 800640c:	bd80      	pop	{r7, pc}
 800640e:	46c0      	nop			; (mov r8, r8)
 8006410:	40012c00 	.word	0x40012c00
 8006414:	40014000 	.word	0x40014000
 8006418:	40014400 	.word	0x40014400
 800641c:	40014800 	.word	0x40014800
 8006420:	fffffeff 	.word	0xfffffeff
 8006424:	fffffdff 	.word	0xfffffdff

08006428 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006428:	b580      	push	{r7, lr}
 800642a:	b086      	sub	sp, #24
 800642c:	af00      	add	r7, sp, #0
 800642e:	6078      	str	r0, [r7, #4]
 8006430:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	6a1b      	ldr	r3, [r3, #32]
 8006436:	2210      	movs	r2, #16
 8006438:	4393      	bics	r3, r2
 800643a:	001a      	movs	r2, r3
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	6a1b      	ldr	r3, [r3, #32]
 8006444:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	685b      	ldr	r3, [r3, #4]
 800644a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	699b      	ldr	r3, [r3, #24]
 8006450:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	4a2e      	ldr	r2, [pc, #184]	; (8006510 <TIM_OC2_SetConfig+0xe8>)
 8006456:	4013      	ands	r3, r2
 8006458:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	4a2d      	ldr	r2, [pc, #180]	; (8006514 <TIM_OC2_SetConfig+0xec>)
 800645e:	4013      	ands	r3, r2
 8006460:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006462:	683b      	ldr	r3, [r7, #0]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	021b      	lsls	r3, r3, #8
 8006468:	68fa      	ldr	r2, [r7, #12]
 800646a:	4313      	orrs	r3, r2
 800646c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800646e:	697b      	ldr	r3, [r7, #20]
 8006470:	2220      	movs	r2, #32
 8006472:	4393      	bics	r3, r2
 8006474:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006476:	683b      	ldr	r3, [r7, #0]
 8006478:	689b      	ldr	r3, [r3, #8]
 800647a:	011b      	lsls	r3, r3, #4
 800647c:	697a      	ldr	r2, [r7, #20]
 800647e:	4313      	orrs	r3, r2
 8006480:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	4a24      	ldr	r2, [pc, #144]	; (8006518 <TIM_OC2_SetConfig+0xf0>)
 8006486:	4293      	cmp	r3, r2
 8006488:	d10d      	bne.n	80064a6 <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800648a:	697b      	ldr	r3, [r7, #20]
 800648c:	2280      	movs	r2, #128	; 0x80
 800648e:	4393      	bics	r3, r2
 8006490:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006492:	683b      	ldr	r3, [r7, #0]
 8006494:	68db      	ldr	r3, [r3, #12]
 8006496:	011b      	lsls	r3, r3, #4
 8006498:	697a      	ldr	r2, [r7, #20]
 800649a:	4313      	orrs	r3, r2
 800649c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800649e:	697b      	ldr	r3, [r7, #20]
 80064a0:	2240      	movs	r2, #64	; 0x40
 80064a2:	4393      	bics	r3, r2
 80064a4:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	4a1b      	ldr	r2, [pc, #108]	; (8006518 <TIM_OC2_SetConfig+0xf0>)
 80064aa:	4293      	cmp	r3, r2
 80064ac:	d00b      	beq.n	80064c6 <TIM_OC2_SetConfig+0x9e>
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	4a1a      	ldr	r2, [pc, #104]	; (800651c <TIM_OC2_SetConfig+0xf4>)
 80064b2:	4293      	cmp	r3, r2
 80064b4:	d007      	beq.n	80064c6 <TIM_OC2_SetConfig+0x9e>
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	4a19      	ldr	r2, [pc, #100]	; (8006520 <TIM_OC2_SetConfig+0xf8>)
 80064ba:	4293      	cmp	r3, r2
 80064bc:	d003      	beq.n	80064c6 <TIM_OC2_SetConfig+0x9e>
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	4a18      	ldr	r2, [pc, #96]	; (8006524 <TIM_OC2_SetConfig+0xfc>)
 80064c2:	4293      	cmp	r3, r2
 80064c4:	d113      	bne.n	80064ee <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80064c6:	693b      	ldr	r3, [r7, #16]
 80064c8:	4a17      	ldr	r2, [pc, #92]	; (8006528 <TIM_OC2_SetConfig+0x100>)
 80064ca:	4013      	ands	r3, r2
 80064cc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80064ce:	693b      	ldr	r3, [r7, #16]
 80064d0:	4a16      	ldr	r2, [pc, #88]	; (800652c <TIM_OC2_SetConfig+0x104>)
 80064d2:	4013      	ands	r3, r2
 80064d4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80064d6:	683b      	ldr	r3, [r7, #0]
 80064d8:	695b      	ldr	r3, [r3, #20]
 80064da:	009b      	lsls	r3, r3, #2
 80064dc:	693a      	ldr	r2, [r7, #16]
 80064de:	4313      	orrs	r3, r2
 80064e0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80064e2:	683b      	ldr	r3, [r7, #0]
 80064e4:	699b      	ldr	r3, [r3, #24]
 80064e6:	009b      	lsls	r3, r3, #2
 80064e8:	693a      	ldr	r2, [r7, #16]
 80064ea:	4313      	orrs	r3, r2
 80064ec:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	693a      	ldr	r2, [r7, #16]
 80064f2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	68fa      	ldr	r2, [r7, #12]
 80064f8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80064fa:	683b      	ldr	r3, [r7, #0]
 80064fc:	685a      	ldr	r2, [r3, #4]
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	697a      	ldr	r2, [r7, #20]
 8006506:	621a      	str	r2, [r3, #32]
}
 8006508:	46c0      	nop			; (mov r8, r8)
 800650a:	46bd      	mov	sp, r7
 800650c:	b006      	add	sp, #24
 800650e:	bd80      	pop	{r7, pc}
 8006510:	ffff8fff 	.word	0xffff8fff
 8006514:	fffffcff 	.word	0xfffffcff
 8006518:	40012c00 	.word	0x40012c00
 800651c:	40014000 	.word	0x40014000
 8006520:	40014400 	.word	0x40014400
 8006524:	40014800 	.word	0x40014800
 8006528:	fffffbff 	.word	0xfffffbff
 800652c:	fffff7ff 	.word	0xfffff7ff

08006530 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006530:	b580      	push	{r7, lr}
 8006532:	b086      	sub	sp, #24
 8006534:	af00      	add	r7, sp, #0
 8006536:	6078      	str	r0, [r7, #4]
 8006538:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	6a1b      	ldr	r3, [r3, #32]
 800653e:	4a35      	ldr	r2, [pc, #212]	; (8006614 <TIM_OC3_SetConfig+0xe4>)
 8006540:	401a      	ands	r2, r3
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	6a1b      	ldr	r3, [r3, #32]
 800654a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	685b      	ldr	r3, [r3, #4]
 8006550:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	69db      	ldr	r3, [r3, #28]
 8006556:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	2270      	movs	r2, #112	; 0x70
 800655c:	4393      	bics	r3, r2
 800655e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	2203      	movs	r2, #3
 8006564:	4393      	bics	r3, r2
 8006566:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006568:	683b      	ldr	r3, [r7, #0]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	68fa      	ldr	r2, [r7, #12]
 800656e:	4313      	orrs	r3, r2
 8006570:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006572:	697b      	ldr	r3, [r7, #20]
 8006574:	4a28      	ldr	r2, [pc, #160]	; (8006618 <TIM_OC3_SetConfig+0xe8>)
 8006576:	4013      	ands	r3, r2
 8006578:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800657a:	683b      	ldr	r3, [r7, #0]
 800657c:	689b      	ldr	r3, [r3, #8]
 800657e:	021b      	lsls	r3, r3, #8
 8006580:	697a      	ldr	r2, [r7, #20]
 8006582:	4313      	orrs	r3, r2
 8006584:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	4a24      	ldr	r2, [pc, #144]	; (800661c <TIM_OC3_SetConfig+0xec>)
 800658a:	4293      	cmp	r3, r2
 800658c:	d10d      	bne.n	80065aa <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800658e:	697b      	ldr	r3, [r7, #20]
 8006590:	4a23      	ldr	r2, [pc, #140]	; (8006620 <TIM_OC3_SetConfig+0xf0>)
 8006592:	4013      	ands	r3, r2
 8006594:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006596:	683b      	ldr	r3, [r7, #0]
 8006598:	68db      	ldr	r3, [r3, #12]
 800659a:	021b      	lsls	r3, r3, #8
 800659c:	697a      	ldr	r2, [r7, #20]
 800659e:	4313      	orrs	r3, r2
 80065a0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80065a2:	697b      	ldr	r3, [r7, #20]
 80065a4:	4a1f      	ldr	r2, [pc, #124]	; (8006624 <TIM_OC3_SetConfig+0xf4>)
 80065a6:	4013      	ands	r3, r2
 80065a8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	4a1b      	ldr	r2, [pc, #108]	; (800661c <TIM_OC3_SetConfig+0xec>)
 80065ae:	4293      	cmp	r3, r2
 80065b0:	d00b      	beq.n	80065ca <TIM_OC3_SetConfig+0x9a>
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	4a1c      	ldr	r2, [pc, #112]	; (8006628 <TIM_OC3_SetConfig+0xf8>)
 80065b6:	4293      	cmp	r3, r2
 80065b8:	d007      	beq.n	80065ca <TIM_OC3_SetConfig+0x9a>
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	4a1b      	ldr	r2, [pc, #108]	; (800662c <TIM_OC3_SetConfig+0xfc>)
 80065be:	4293      	cmp	r3, r2
 80065c0:	d003      	beq.n	80065ca <TIM_OC3_SetConfig+0x9a>
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	4a1a      	ldr	r2, [pc, #104]	; (8006630 <TIM_OC3_SetConfig+0x100>)
 80065c6:	4293      	cmp	r3, r2
 80065c8:	d113      	bne.n	80065f2 <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80065ca:	693b      	ldr	r3, [r7, #16]
 80065cc:	4a19      	ldr	r2, [pc, #100]	; (8006634 <TIM_OC3_SetConfig+0x104>)
 80065ce:	4013      	ands	r3, r2
 80065d0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80065d2:	693b      	ldr	r3, [r7, #16]
 80065d4:	4a18      	ldr	r2, [pc, #96]	; (8006638 <TIM_OC3_SetConfig+0x108>)
 80065d6:	4013      	ands	r3, r2
 80065d8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80065da:	683b      	ldr	r3, [r7, #0]
 80065dc:	695b      	ldr	r3, [r3, #20]
 80065de:	011b      	lsls	r3, r3, #4
 80065e0:	693a      	ldr	r2, [r7, #16]
 80065e2:	4313      	orrs	r3, r2
 80065e4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80065e6:	683b      	ldr	r3, [r7, #0]
 80065e8:	699b      	ldr	r3, [r3, #24]
 80065ea:	011b      	lsls	r3, r3, #4
 80065ec:	693a      	ldr	r2, [r7, #16]
 80065ee:	4313      	orrs	r3, r2
 80065f0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	693a      	ldr	r2, [r7, #16]
 80065f6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	68fa      	ldr	r2, [r7, #12]
 80065fc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80065fe:	683b      	ldr	r3, [r7, #0]
 8006600:	685a      	ldr	r2, [r3, #4]
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	697a      	ldr	r2, [r7, #20]
 800660a:	621a      	str	r2, [r3, #32]
}
 800660c:	46c0      	nop			; (mov r8, r8)
 800660e:	46bd      	mov	sp, r7
 8006610:	b006      	add	sp, #24
 8006612:	bd80      	pop	{r7, pc}
 8006614:	fffffeff 	.word	0xfffffeff
 8006618:	fffffdff 	.word	0xfffffdff
 800661c:	40012c00 	.word	0x40012c00
 8006620:	fffff7ff 	.word	0xfffff7ff
 8006624:	fffffbff 	.word	0xfffffbff
 8006628:	40014000 	.word	0x40014000
 800662c:	40014400 	.word	0x40014400
 8006630:	40014800 	.word	0x40014800
 8006634:	ffffefff 	.word	0xffffefff
 8006638:	ffffdfff 	.word	0xffffdfff

0800663c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800663c:	b580      	push	{r7, lr}
 800663e:	b086      	sub	sp, #24
 8006640:	af00      	add	r7, sp, #0
 8006642:	6078      	str	r0, [r7, #4]
 8006644:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	6a1b      	ldr	r3, [r3, #32]
 800664a:	4a28      	ldr	r2, [pc, #160]	; (80066ec <TIM_OC4_SetConfig+0xb0>)
 800664c:	401a      	ands	r2, r3
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	6a1b      	ldr	r3, [r3, #32]
 8006656:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	685b      	ldr	r3, [r3, #4]
 800665c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	69db      	ldr	r3, [r3, #28]
 8006662:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	4a22      	ldr	r2, [pc, #136]	; (80066f0 <TIM_OC4_SetConfig+0xb4>)
 8006668:	4013      	ands	r3, r2
 800666a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	4a21      	ldr	r2, [pc, #132]	; (80066f4 <TIM_OC4_SetConfig+0xb8>)
 8006670:	4013      	ands	r3, r2
 8006672:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006674:	683b      	ldr	r3, [r7, #0]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	021b      	lsls	r3, r3, #8
 800667a:	68fa      	ldr	r2, [r7, #12]
 800667c:	4313      	orrs	r3, r2
 800667e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006680:	693b      	ldr	r3, [r7, #16]
 8006682:	4a1d      	ldr	r2, [pc, #116]	; (80066f8 <TIM_OC4_SetConfig+0xbc>)
 8006684:	4013      	ands	r3, r2
 8006686:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006688:	683b      	ldr	r3, [r7, #0]
 800668a:	689b      	ldr	r3, [r3, #8]
 800668c:	031b      	lsls	r3, r3, #12
 800668e:	693a      	ldr	r2, [r7, #16]
 8006690:	4313      	orrs	r3, r2
 8006692:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	4a19      	ldr	r2, [pc, #100]	; (80066fc <TIM_OC4_SetConfig+0xc0>)
 8006698:	4293      	cmp	r3, r2
 800669a:	d00b      	beq.n	80066b4 <TIM_OC4_SetConfig+0x78>
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	4a18      	ldr	r2, [pc, #96]	; (8006700 <TIM_OC4_SetConfig+0xc4>)
 80066a0:	4293      	cmp	r3, r2
 80066a2:	d007      	beq.n	80066b4 <TIM_OC4_SetConfig+0x78>
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	4a17      	ldr	r2, [pc, #92]	; (8006704 <TIM_OC4_SetConfig+0xc8>)
 80066a8:	4293      	cmp	r3, r2
 80066aa:	d003      	beq.n	80066b4 <TIM_OC4_SetConfig+0x78>
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	4a16      	ldr	r2, [pc, #88]	; (8006708 <TIM_OC4_SetConfig+0xcc>)
 80066b0:	4293      	cmp	r3, r2
 80066b2:	d109      	bne.n	80066c8 <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80066b4:	697b      	ldr	r3, [r7, #20]
 80066b6:	4a15      	ldr	r2, [pc, #84]	; (800670c <TIM_OC4_SetConfig+0xd0>)
 80066b8:	4013      	ands	r3, r2
 80066ba:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80066bc:	683b      	ldr	r3, [r7, #0]
 80066be:	695b      	ldr	r3, [r3, #20]
 80066c0:	019b      	lsls	r3, r3, #6
 80066c2:	697a      	ldr	r2, [r7, #20]
 80066c4:	4313      	orrs	r3, r2
 80066c6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	697a      	ldr	r2, [r7, #20]
 80066cc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	68fa      	ldr	r2, [r7, #12]
 80066d2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80066d4:	683b      	ldr	r3, [r7, #0]
 80066d6:	685a      	ldr	r2, [r3, #4]
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	693a      	ldr	r2, [r7, #16]
 80066e0:	621a      	str	r2, [r3, #32]
}
 80066e2:	46c0      	nop			; (mov r8, r8)
 80066e4:	46bd      	mov	sp, r7
 80066e6:	b006      	add	sp, #24
 80066e8:	bd80      	pop	{r7, pc}
 80066ea:	46c0      	nop			; (mov r8, r8)
 80066ec:	ffffefff 	.word	0xffffefff
 80066f0:	ffff8fff 	.word	0xffff8fff
 80066f4:	fffffcff 	.word	0xfffffcff
 80066f8:	ffffdfff 	.word	0xffffdfff
 80066fc:	40012c00 	.word	0x40012c00
 8006700:	40014000 	.word	0x40014000
 8006704:	40014400 	.word	0x40014400
 8006708:	40014800 	.word	0x40014800
 800670c:	ffffbfff 	.word	0xffffbfff

08006710 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006710:	b580      	push	{r7, lr}
 8006712:	b082      	sub	sp, #8
 8006714:	af00      	add	r7, sp, #0
 8006716:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006718:	46c0      	nop			; (mov r8, r8)
 800671a:	46bd      	mov	sp, r7
 800671c:	b002      	add	sp, #8
 800671e:	bd80      	pop	{r7, pc}

08006720 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006720:	b580      	push	{r7, lr}
 8006722:	b082      	sub	sp, #8
 8006724:	af00      	add	r7, sp, #0
 8006726:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006728:	46c0      	nop			; (mov r8, r8)
 800672a:	46bd      	mov	sp, r7
 800672c:	b002      	add	sp, #8
 800672e:	bd80      	pop	{r7, pc}

08006730 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006730:	b580      	push	{r7, lr}
 8006732:	b082      	sub	sp, #8
 8006734:	af00      	add	r7, sp, #0
 8006736:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	2b00      	cmp	r3, #0
 800673c:	d101      	bne.n	8006742 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800673e:	2301      	movs	r3, #1
 8006740:	e044      	b.n	80067cc <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006746:	2b00      	cmp	r3, #0
 8006748:	d107      	bne.n	800675a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	2274      	movs	r2, #116	; 0x74
 800674e:	2100      	movs	r1, #0
 8006750:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	0018      	movs	r0, r3
 8006756:	f7fa ff2f 	bl	80015b8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	2224      	movs	r2, #36	; 0x24
 800675e:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	681a      	ldr	r2, [r3, #0]
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	2101      	movs	r1, #1
 800676c:	438a      	bics	r2, r1
 800676e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	0018      	movs	r0, r3
 8006774:	f000 fb24 	bl	8006dc0 <UART_SetConfig>
 8006778:	0003      	movs	r3, r0
 800677a:	2b01      	cmp	r3, #1
 800677c:	d101      	bne.n	8006782 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800677e:	2301      	movs	r3, #1
 8006780:	e024      	b.n	80067cc <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006786:	2b00      	cmp	r3, #0
 8006788:	d003      	beq.n	8006792 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	0018      	movs	r0, r3
 800678e:	f000 fc9f 	bl	80070d0 <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	685a      	ldr	r2, [r3, #4]
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	490d      	ldr	r1, [pc, #52]	; (80067d4 <HAL_UART_Init+0xa4>)
 800679e:	400a      	ands	r2, r1
 80067a0:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	689a      	ldr	r2, [r3, #8]
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	212a      	movs	r1, #42	; 0x2a
 80067ae:	438a      	bics	r2, r1
 80067b0:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	681a      	ldr	r2, [r3, #0]
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	2101      	movs	r1, #1
 80067be:	430a      	orrs	r2, r1
 80067c0:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	0018      	movs	r0, r3
 80067c6:	f000 fd37 	bl	8007238 <UART_CheckIdleState>
 80067ca:	0003      	movs	r3, r0
}
 80067cc:	0018      	movs	r0, r3
 80067ce:	46bd      	mov	sp, r7
 80067d0:	b002      	add	sp, #8
 80067d2:	bd80      	pop	{r7, pc}
 80067d4:	ffffb7ff 	.word	0xffffb7ff

080067d8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80067d8:	b590      	push	{r4, r7, lr}
 80067da:	b0ab      	sub	sp, #172	; 0xac
 80067dc:	af00      	add	r7, sp, #0
 80067de:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	69db      	ldr	r3, [r3, #28]
 80067e6:	22a4      	movs	r2, #164	; 0xa4
 80067e8:	18b9      	adds	r1, r7, r2
 80067ea:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	20a0      	movs	r0, #160	; 0xa0
 80067f4:	1839      	adds	r1, r7, r0
 80067f6:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	689b      	ldr	r3, [r3, #8]
 80067fe:	219c      	movs	r1, #156	; 0x9c
 8006800:	1879      	adds	r1, r7, r1
 8006802:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006804:	0011      	movs	r1, r2
 8006806:	18bb      	adds	r3, r7, r2
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	4a99      	ldr	r2, [pc, #612]	; (8006a70 <HAL_UART_IRQHandler+0x298>)
 800680c:	4013      	ands	r3, r2
 800680e:	2298      	movs	r2, #152	; 0x98
 8006810:	18bc      	adds	r4, r7, r2
 8006812:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 8006814:	18bb      	adds	r3, r7, r2
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	2b00      	cmp	r3, #0
 800681a:	d114      	bne.n	8006846 <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800681c:	187b      	adds	r3, r7, r1
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	2220      	movs	r2, #32
 8006822:	4013      	ands	r3, r2
 8006824:	d00f      	beq.n	8006846 <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006826:	183b      	adds	r3, r7, r0
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	2220      	movs	r2, #32
 800682c:	4013      	ands	r3, r2
 800682e:	d00a      	beq.n	8006846 <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006834:	2b00      	cmp	r3, #0
 8006836:	d100      	bne.n	800683a <HAL_UART_IRQHandler+0x62>
 8006838:	e296      	b.n	8006d68 <HAL_UART_IRQHandler+0x590>
      {
        huart->RxISR(huart);
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800683e:	687a      	ldr	r2, [r7, #4]
 8006840:	0010      	movs	r0, r2
 8006842:	4798      	blx	r3
      }
      return;
 8006844:	e290      	b.n	8006d68 <HAL_UART_IRQHandler+0x590>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8006846:	2398      	movs	r3, #152	; 0x98
 8006848:	18fb      	adds	r3, r7, r3
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	2b00      	cmp	r3, #0
 800684e:	d100      	bne.n	8006852 <HAL_UART_IRQHandler+0x7a>
 8006850:	e114      	b.n	8006a7c <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8006852:	239c      	movs	r3, #156	; 0x9c
 8006854:	18fb      	adds	r3, r7, r3
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	2201      	movs	r2, #1
 800685a:	4013      	ands	r3, r2
 800685c:	d106      	bne.n	800686c <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800685e:	23a0      	movs	r3, #160	; 0xa0
 8006860:	18fb      	adds	r3, r7, r3
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	4a83      	ldr	r2, [pc, #524]	; (8006a74 <HAL_UART_IRQHandler+0x29c>)
 8006866:	4013      	ands	r3, r2
 8006868:	d100      	bne.n	800686c <HAL_UART_IRQHandler+0x94>
 800686a:	e107      	b.n	8006a7c <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800686c:	23a4      	movs	r3, #164	; 0xa4
 800686e:	18fb      	adds	r3, r7, r3
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	2201      	movs	r2, #1
 8006874:	4013      	ands	r3, r2
 8006876:	d012      	beq.n	800689e <HAL_UART_IRQHandler+0xc6>
 8006878:	23a0      	movs	r3, #160	; 0xa0
 800687a:	18fb      	adds	r3, r7, r3
 800687c:	681a      	ldr	r2, [r3, #0]
 800687e:	2380      	movs	r3, #128	; 0x80
 8006880:	005b      	lsls	r3, r3, #1
 8006882:	4013      	ands	r3, r2
 8006884:	d00b      	beq.n	800689e <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	2201      	movs	r2, #1
 800688c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	2280      	movs	r2, #128	; 0x80
 8006892:	589b      	ldr	r3, [r3, r2]
 8006894:	2201      	movs	r2, #1
 8006896:	431a      	orrs	r2, r3
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	2180      	movs	r1, #128	; 0x80
 800689c:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800689e:	23a4      	movs	r3, #164	; 0xa4
 80068a0:	18fb      	adds	r3, r7, r3
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	2202      	movs	r2, #2
 80068a6:	4013      	ands	r3, r2
 80068a8:	d011      	beq.n	80068ce <HAL_UART_IRQHandler+0xf6>
 80068aa:	239c      	movs	r3, #156	; 0x9c
 80068ac:	18fb      	adds	r3, r7, r3
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	2201      	movs	r2, #1
 80068b2:	4013      	ands	r3, r2
 80068b4:	d00b      	beq.n	80068ce <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	2202      	movs	r2, #2
 80068bc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	2280      	movs	r2, #128	; 0x80
 80068c2:	589b      	ldr	r3, [r3, r2]
 80068c4:	2204      	movs	r2, #4
 80068c6:	431a      	orrs	r2, r3
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	2180      	movs	r1, #128	; 0x80
 80068cc:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80068ce:	23a4      	movs	r3, #164	; 0xa4
 80068d0:	18fb      	adds	r3, r7, r3
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	2204      	movs	r2, #4
 80068d6:	4013      	ands	r3, r2
 80068d8:	d011      	beq.n	80068fe <HAL_UART_IRQHandler+0x126>
 80068da:	239c      	movs	r3, #156	; 0x9c
 80068dc:	18fb      	adds	r3, r7, r3
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	2201      	movs	r2, #1
 80068e2:	4013      	ands	r3, r2
 80068e4:	d00b      	beq.n	80068fe <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	2204      	movs	r2, #4
 80068ec:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	2280      	movs	r2, #128	; 0x80
 80068f2:	589b      	ldr	r3, [r3, r2]
 80068f4:	2202      	movs	r2, #2
 80068f6:	431a      	orrs	r2, r3
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	2180      	movs	r1, #128	; 0x80
 80068fc:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80068fe:	23a4      	movs	r3, #164	; 0xa4
 8006900:	18fb      	adds	r3, r7, r3
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	2208      	movs	r2, #8
 8006906:	4013      	ands	r3, r2
 8006908:	d017      	beq.n	800693a <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800690a:	23a0      	movs	r3, #160	; 0xa0
 800690c:	18fb      	adds	r3, r7, r3
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	2220      	movs	r2, #32
 8006912:	4013      	ands	r3, r2
 8006914:	d105      	bne.n	8006922 <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8006916:	239c      	movs	r3, #156	; 0x9c
 8006918:	18fb      	adds	r3, r7, r3
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	2201      	movs	r2, #1
 800691e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006920:	d00b      	beq.n	800693a <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	2208      	movs	r2, #8
 8006928:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	2280      	movs	r2, #128	; 0x80
 800692e:	589b      	ldr	r3, [r3, r2]
 8006930:	2208      	movs	r2, #8
 8006932:	431a      	orrs	r2, r3
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	2180      	movs	r1, #128	; 0x80
 8006938:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800693a:	23a4      	movs	r3, #164	; 0xa4
 800693c:	18fb      	adds	r3, r7, r3
 800693e:	681a      	ldr	r2, [r3, #0]
 8006940:	2380      	movs	r3, #128	; 0x80
 8006942:	011b      	lsls	r3, r3, #4
 8006944:	4013      	ands	r3, r2
 8006946:	d013      	beq.n	8006970 <HAL_UART_IRQHandler+0x198>
 8006948:	23a0      	movs	r3, #160	; 0xa0
 800694a:	18fb      	adds	r3, r7, r3
 800694c:	681a      	ldr	r2, [r3, #0]
 800694e:	2380      	movs	r3, #128	; 0x80
 8006950:	04db      	lsls	r3, r3, #19
 8006952:	4013      	ands	r3, r2
 8006954:	d00c      	beq.n	8006970 <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	2280      	movs	r2, #128	; 0x80
 800695c:	0112      	lsls	r2, r2, #4
 800695e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	2280      	movs	r2, #128	; 0x80
 8006964:	589b      	ldr	r3, [r3, r2]
 8006966:	2220      	movs	r2, #32
 8006968:	431a      	orrs	r2, r3
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	2180      	movs	r1, #128	; 0x80
 800696e:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	2280      	movs	r2, #128	; 0x80
 8006974:	589b      	ldr	r3, [r3, r2]
 8006976:	2b00      	cmp	r3, #0
 8006978:	d100      	bne.n	800697c <HAL_UART_IRQHandler+0x1a4>
 800697a:	e1f7      	b.n	8006d6c <HAL_UART_IRQHandler+0x594>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800697c:	23a4      	movs	r3, #164	; 0xa4
 800697e:	18fb      	adds	r3, r7, r3
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	2220      	movs	r2, #32
 8006984:	4013      	ands	r3, r2
 8006986:	d00e      	beq.n	80069a6 <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006988:	23a0      	movs	r3, #160	; 0xa0
 800698a:	18fb      	adds	r3, r7, r3
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	2220      	movs	r2, #32
 8006990:	4013      	ands	r3, r2
 8006992:	d008      	beq.n	80069a6 <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006998:	2b00      	cmp	r3, #0
 800699a:	d004      	beq.n	80069a6 <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80069a0:	687a      	ldr	r2, [r7, #4]
 80069a2:	0010      	movs	r0, r2
 80069a4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	2280      	movs	r2, #128	; 0x80
 80069aa:	589b      	ldr	r3, [r3, r2]
 80069ac:	2194      	movs	r1, #148	; 0x94
 80069ae:	187a      	adds	r2, r7, r1
 80069b0:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	689b      	ldr	r3, [r3, #8]
 80069b8:	2240      	movs	r2, #64	; 0x40
 80069ba:	4013      	ands	r3, r2
 80069bc:	2b40      	cmp	r3, #64	; 0x40
 80069be:	d004      	beq.n	80069ca <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80069c0:	187b      	adds	r3, r7, r1
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	2228      	movs	r2, #40	; 0x28
 80069c6:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80069c8:	d047      	beq.n	8006a5a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	0018      	movs	r0, r3
 80069ce:	f000 fd3f 	bl	8007450 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	689b      	ldr	r3, [r3, #8]
 80069d8:	2240      	movs	r2, #64	; 0x40
 80069da:	4013      	ands	r3, r2
 80069dc:	2b40      	cmp	r3, #64	; 0x40
 80069de:	d137      	bne.n	8006a50 <HAL_UART_IRQHandler+0x278>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80069e0:	f3ef 8310 	mrs	r3, PRIMASK
 80069e4:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 80069e6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80069e8:	2090      	movs	r0, #144	; 0x90
 80069ea:	183a      	adds	r2, r7, r0
 80069ec:	6013      	str	r3, [r2, #0]
 80069ee:	2301      	movs	r3, #1
 80069f0:	667b      	str	r3, [r7, #100]	; 0x64
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80069f2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80069f4:	f383 8810 	msr	PRIMASK, r3
}
 80069f8:	46c0      	nop			; (mov r8, r8)
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	689a      	ldr	r2, [r3, #8]
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	2140      	movs	r1, #64	; 0x40
 8006a06:	438a      	bics	r2, r1
 8006a08:	609a      	str	r2, [r3, #8]
 8006a0a:	183b      	adds	r3, r7, r0
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006a10:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006a12:	f383 8810 	msr	PRIMASK, r3
}
 8006a16:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d012      	beq.n	8006a46 <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a24:	4a14      	ldr	r2, [pc, #80]	; (8006a78 <HAL_UART_IRQHandler+0x2a0>)
 8006a26:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a2c:	0018      	movs	r0, r3
 8006a2e:	f7fb fb09 	bl	8002044 <HAL_DMA_Abort_IT>
 8006a32:	1e03      	subs	r3, r0, #0
 8006a34:	d01a      	beq.n	8006a6c <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a3a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a40:	0018      	movs	r0, r3
 8006a42:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006a44:	e012      	b.n	8006a6c <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	0018      	movs	r0, r3
 8006a4a:	f000 f9a5 	bl	8006d98 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006a4e:	e00d      	b.n	8006a6c <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	0018      	movs	r0, r3
 8006a54:	f000 f9a0 	bl	8006d98 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006a58:	e008      	b.n	8006a6c <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	0018      	movs	r0, r3
 8006a5e:	f000 f99b 	bl	8006d98 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	2280      	movs	r2, #128	; 0x80
 8006a66:	2100      	movs	r1, #0
 8006a68:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8006a6a:	e17f      	b.n	8006d6c <HAL_UART_IRQHandler+0x594>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006a6c:	46c0      	nop			; (mov r8, r8)
    return;
 8006a6e:	e17d      	b.n	8006d6c <HAL_UART_IRQHandler+0x594>
 8006a70:	0000080f 	.word	0x0000080f
 8006a74:	04000120 	.word	0x04000120
 8006a78:	08007515 	.word	0x08007515

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006a80:	2b01      	cmp	r3, #1
 8006a82:	d000      	beq.n	8006a86 <HAL_UART_IRQHandler+0x2ae>
 8006a84:	e131      	b.n	8006cea <HAL_UART_IRQHandler+0x512>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8006a86:	23a4      	movs	r3, #164	; 0xa4
 8006a88:	18fb      	adds	r3, r7, r3
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	2210      	movs	r2, #16
 8006a8e:	4013      	ands	r3, r2
 8006a90:	d100      	bne.n	8006a94 <HAL_UART_IRQHandler+0x2bc>
 8006a92:	e12a      	b.n	8006cea <HAL_UART_IRQHandler+0x512>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006a94:	23a0      	movs	r3, #160	; 0xa0
 8006a96:	18fb      	adds	r3, r7, r3
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	2210      	movs	r2, #16
 8006a9c:	4013      	ands	r3, r2
 8006a9e:	d100      	bne.n	8006aa2 <HAL_UART_IRQHandler+0x2ca>
 8006aa0:	e123      	b.n	8006cea <HAL_UART_IRQHandler+0x512>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	2210      	movs	r2, #16
 8006aa8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	689b      	ldr	r3, [r3, #8]
 8006ab0:	2240      	movs	r2, #64	; 0x40
 8006ab2:	4013      	ands	r3, r2
 8006ab4:	2b40      	cmp	r3, #64	; 0x40
 8006ab6:	d000      	beq.n	8006aba <HAL_UART_IRQHandler+0x2e2>
 8006ab8:	e09b      	b.n	8006bf2 <HAL_UART_IRQHandler+0x41a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	685a      	ldr	r2, [r3, #4]
 8006ac2:	217e      	movs	r1, #126	; 0x7e
 8006ac4:	187b      	adds	r3, r7, r1
 8006ac6:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8006ac8:	187b      	adds	r3, r7, r1
 8006aca:	881b      	ldrh	r3, [r3, #0]
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d100      	bne.n	8006ad2 <HAL_UART_IRQHandler+0x2fa>
 8006ad0:	e14e      	b.n	8006d70 <HAL_UART_IRQHandler+0x598>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	2258      	movs	r2, #88	; 0x58
 8006ad6:	5a9b      	ldrh	r3, [r3, r2]
 8006ad8:	187a      	adds	r2, r7, r1
 8006ada:	8812      	ldrh	r2, [r2, #0]
 8006adc:	429a      	cmp	r2, r3
 8006ade:	d300      	bcc.n	8006ae2 <HAL_UART_IRQHandler+0x30a>
 8006ae0:	e146      	b.n	8006d70 <HAL_UART_IRQHandler+0x598>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	187a      	adds	r2, r7, r1
 8006ae6:	215a      	movs	r1, #90	; 0x5a
 8006ae8:	8812      	ldrh	r2, [r2, #0]
 8006aea:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006af0:	699b      	ldr	r3, [r3, #24]
 8006af2:	2b20      	cmp	r3, #32
 8006af4:	d06e      	beq.n	8006bd4 <HAL_UART_IRQHandler+0x3fc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006af6:	f3ef 8310 	mrs	r3, PRIMASK
 8006afa:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8006afc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006afe:	67bb      	str	r3, [r7, #120]	; 0x78
 8006b00:	2301      	movs	r3, #1
 8006b02:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006b04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b06:	f383 8810 	msr	PRIMASK, r3
}
 8006b0a:	46c0      	nop			; (mov r8, r8)
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	681a      	ldr	r2, [r3, #0]
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	499a      	ldr	r1, [pc, #616]	; (8006d80 <HAL_UART_IRQHandler+0x5a8>)
 8006b18:	400a      	ands	r2, r1
 8006b1a:	601a      	str	r2, [r3, #0]
 8006b1c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006b1e:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006b20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b22:	f383 8810 	msr	PRIMASK, r3
}
 8006b26:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006b28:	f3ef 8310 	mrs	r3, PRIMASK
 8006b2c:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 8006b2e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b30:	677b      	str	r3, [r7, #116]	; 0x74
 8006b32:	2301      	movs	r3, #1
 8006b34:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006b36:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006b38:	f383 8810 	msr	PRIMASK, r3
}
 8006b3c:	46c0      	nop			; (mov r8, r8)
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	689a      	ldr	r2, [r3, #8]
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	2101      	movs	r1, #1
 8006b4a:	438a      	bics	r2, r1
 8006b4c:	609a      	str	r2, [r3, #8]
 8006b4e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006b50:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006b52:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006b54:	f383 8810 	msr	PRIMASK, r3
}
 8006b58:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006b5a:	f3ef 8310 	mrs	r3, PRIMASK
 8006b5e:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 8006b60:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006b62:	673b      	str	r3, [r7, #112]	; 0x70
 8006b64:	2301      	movs	r3, #1
 8006b66:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006b68:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006b6a:	f383 8810 	msr	PRIMASK, r3
}
 8006b6e:	46c0      	nop			; (mov r8, r8)
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	689a      	ldr	r2, [r3, #8]
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	2140      	movs	r1, #64	; 0x40
 8006b7c:	438a      	bics	r2, r1
 8006b7e:	609a      	str	r2, [r3, #8]
 8006b80:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006b82:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006b84:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006b86:	f383 8810 	msr	PRIMASK, r3
}
 8006b8a:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	2220      	movs	r2, #32
 8006b90:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	2200      	movs	r2, #0
 8006b96:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006b98:	f3ef 8310 	mrs	r3, PRIMASK
 8006b9c:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 8006b9e:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006ba0:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006ba2:	2301      	movs	r3, #1
 8006ba4:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006ba6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006ba8:	f383 8810 	msr	PRIMASK, r3
}
 8006bac:	46c0      	nop			; (mov r8, r8)
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	681a      	ldr	r2, [r3, #0]
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	2110      	movs	r1, #16
 8006bba:	438a      	bics	r2, r1
 8006bbc:	601a      	str	r2, [r3, #0]
 8006bbe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006bc0:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006bc2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006bc4:	f383 8810 	msr	PRIMASK, r3
}
 8006bc8:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006bce:	0018      	movs	r0, r3
 8006bd0:	f7fb fa00 	bl	8001fd4 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	2258      	movs	r2, #88	; 0x58
 8006bd8:	5a9a      	ldrh	r2, [r3, r2]
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	215a      	movs	r1, #90	; 0x5a
 8006bde:	5a5b      	ldrh	r3, [r3, r1]
 8006be0:	b29b      	uxth	r3, r3
 8006be2:	1ad3      	subs	r3, r2, r3
 8006be4:	b29a      	uxth	r2, r3
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	0011      	movs	r1, r2
 8006bea:	0018      	movs	r0, r3
 8006bec:	f000 f8dc 	bl	8006da8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006bf0:	e0be      	b.n	8006d70 <HAL_UART_IRQHandler+0x598>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	2258      	movs	r2, #88	; 0x58
 8006bf6:	5a99      	ldrh	r1, [r3, r2]
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	225a      	movs	r2, #90	; 0x5a
 8006bfc:	5a9b      	ldrh	r3, [r3, r2]
 8006bfe:	b29a      	uxth	r2, r3
 8006c00:	208e      	movs	r0, #142	; 0x8e
 8006c02:	183b      	adds	r3, r7, r0
 8006c04:	1a8a      	subs	r2, r1, r2
 8006c06:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	225a      	movs	r2, #90	; 0x5a
 8006c0c:	5a9b      	ldrh	r3, [r3, r2]
 8006c0e:	b29b      	uxth	r3, r3
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d100      	bne.n	8006c16 <HAL_UART_IRQHandler+0x43e>
 8006c14:	e0ae      	b.n	8006d74 <HAL_UART_IRQHandler+0x59c>
          && (nb_rx_data > 0U))
 8006c16:	183b      	adds	r3, r7, r0
 8006c18:	881b      	ldrh	r3, [r3, #0]
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d100      	bne.n	8006c20 <HAL_UART_IRQHandler+0x448>
 8006c1e:	e0a9      	b.n	8006d74 <HAL_UART_IRQHandler+0x59c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006c20:	f3ef 8310 	mrs	r3, PRIMASK
 8006c24:	60fb      	str	r3, [r7, #12]
  return(result);
 8006c26:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006c28:	2488      	movs	r4, #136	; 0x88
 8006c2a:	193a      	adds	r2, r7, r4
 8006c2c:	6013      	str	r3, [r2, #0]
 8006c2e:	2301      	movs	r3, #1
 8006c30:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006c32:	693b      	ldr	r3, [r7, #16]
 8006c34:	f383 8810 	msr	PRIMASK, r3
}
 8006c38:	46c0      	nop			; (mov r8, r8)
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	681a      	ldr	r2, [r3, #0]
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	494f      	ldr	r1, [pc, #316]	; (8006d84 <HAL_UART_IRQHandler+0x5ac>)
 8006c46:	400a      	ands	r2, r1
 8006c48:	601a      	str	r2, [r3, #0]
 8006c4a:	193b      	adds	r3, r7, r4
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006c50:	697b      	ldr	r3, [r7, #20]
 8006c52:	f383 8810 	msr	PRIMASK, r3
}
 8006c56:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006c58:	f3ef 8310 	mrs	r3, PRIMASK
 8006c5c:	61bb      	str	r3, [r7, #24]
  return(result);
 8006c5e:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006c60:	2484      	movs	r4, #132	; 0x84
 8006c62:	193a      	adds	r2, r7, r4
 8006c64:	6013      	str	r3, [r2, #0]
 8006c66:	2301      	movs	r3, #1
 8006c68:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006c6a:	69fb      	ldr	r3, [r7, #28]
 8006c6c:	f383 8810 	msr	PRIMASK, r3
}
 8006c70:	46c0      	nop			; (mov r8, r8)
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	689a      	ldr	r2, [r3, #8]
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	2101      	movs	r1, #1
 8006c7e:	438a      	bics	r2, r1
 8006c80:	609a      	str	r2, [r3, #8]
 8006c82:	193b      	adds	r3, r7, r4
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006c88:	6a3b      	ldr	r3, [r7, #32]
 8006c8a:	f383 8810 	msr	PRIMASK, r3
}
 8006c8e:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	2220      	movs	r2, #32
 8006c94:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	2200      	movs	r2, #0
 8006c9a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	2200      	movs	r2, #0
 8006ca0:	665a      	str	r2, [r3, #100]	; 0x64
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006ca2:	f3ef 8310 	mrs	r3, PRIMASK
 8006ca6:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8006ca8:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006caa:	2480      	movs	r4, #128	; 0x80
 8006cac:	193a      	adds	r2, r7, r4
 8006cae:	6013      	str	r3, [r2, #0]
 8006cb0:	2301      	movs	r3, #1
 8006cb2:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006cb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cb6:	f383 8810 	msr	PRIMASK, r3
}
 8006cba:	46c0      	nop			; (mov r8, r8)
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	681a      	ldr	r2, [r3, #0]
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	2110      	movs	r1, #16
 8006cc8:	438a      	bics	r2, r1
 8006cca:	601a      	str	r2, [r3, #0]
 8006ccc:	193b      	adds	r3, r7, r4
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006cd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cd4:	f383 8810 	msr	PRIMASK, r3
}
 8006cd8:	46c0      	nop			; (mov r8, r8)
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006cda:	183b      	adds	r3, r7, r0
 8006cdc:	881a      	ldrh	r2, [r3, #0]
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	0011      	movs	r1, r2
 8006ce2:	0018      	movs	r0, r3
 8006ce4:	f000 f860 	bl	8006da8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006ce8:	e044      	b.n	8006d74 <HAL_UART_IRQHandler+0x59c>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006cea:	23a4      	movs	r3, #164	; 0xa4
 8006cec:	18fb      	adds	r3, r7, r3
 8006cee:	681a      	ldr	r2, [r3, #0]
 8006cf0:	2380      	movs	r3, #128	; 0x80
 8006cf2:	035b      	lsls	r3, r3, #13
 8006cf4:	4013      	ands	r3, r2
 8006cf6:	d010      	beq.n	8006d1a <HAL_UART_IRQHandler+0x542>
 8006cf8:	239c      	movs	r3, #156	; 0x9c
 8006cfa:	18fb      	adds	r3, r7, r3
 8006cfc:	681a      	ldr	r2, [r3, #0]
 8006cfe:	2380      	movs	r3, #128	; 0x80
 8006d00:	03db      	lsls	r3, r3, #15
 8006d02:	4013      	ands	r3, r2
 8006d04:	d009      	beq.n	8006d1a <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	2280      	movs	r2, #128	; 0x80
 8006d0c:	0352      	lsls	r2, r2, #13
 8006d0e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	0018      	movs	r0, r3
 8006d14:	f000 fc40 	bl	8007598 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006d18:	e02f      	b.n	8006d7a <HAL_UART_IRQHandler+0x5a2>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8006d1a:	23a4      	movs	r3, #164	; 0xa4
 8006d1c:	18fb      	adds	r3, r7, r3
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	2280      	movs	r2, #128	; 0x80
 8006d22:	4013      	ands	r3, r2
 8006d24:	d00f      	beq.n	8006d46 <HAL_UART_IRQHandler+0x56e>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8006d26:	23a0      	movs	r3, #160	; 0xa0
 8006d28:	18fb      	adds	r3, r7, r3
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	2280      	movs	r2, #128	; 0x80
 8006d2e:	4013      	ands	r3, r2
 8006d30:	d009      	beq.n	8006d46 <HAL_UART_IRQHandler+0x56e>
  {
    if (huart->TxISR != NULL)
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d01e      	beq.n	8006d78 <HAL_UART_IRQHandler+0x5a0>
    {
      huart->TxISR(huart);
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006d3e:	687a      	ldr	r2, [r7, #4]
 8006d40:	0010      	movs	r0, r2
 8006d42:	4798      	blx	r3
    }
    return;
 8006d44:	e018      	b.n	8006d78 <HAL_UART_IRQHandler+0x5a0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006d46:	23a4      	movs	r3, #164	; 0xa4
 8006d48:	18fb      	adds	r3, r7, r3
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	2240      	movs	r2, #64	; 0x40
 8006d4e:	4013      	ands	r3, r2
 8006d50:	d013      	beq.n	8006d7a <HAL_UART_IRQHandler+0x5a2>
 8006d52:	23a0      	movs	r3, #160	; 0xa0
 8006d54:	18fb      	adds	r3, r7, r3
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	2240      	movs	r2, #64	; 0x40
 8006d5a:	4013      	ands	r3, r2
 8006d5c:	d00d      	beq.n	8006d7a <HAL_UART_IRQHandler+0x5a2>
  {
    UART_EndTransmit_IT(huart);
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	0018      	movs	r0, r3
 8006d62:	f000 fbee 	bl	8007542 <UART_EndTransmit_IT>
    return;
 8006d66:	e008      	b.n	8006d7a <HAL_UART_IRQHandler+0x5a2>
      return;
 8006d68:	46c0      	nop			; (mov r8, r8)
 8006d6a:	e006      	b.n	8006d7a <HAL_UART_IRQHandler+0x5a2>
    return;
 8006d6c:	46c0      	nop			; (mov r8, r8)
 8006d6e:	e004      	b.n	8006d7a <HAL_UART_IRQHandler+0x5a2>
      return;
 8006d70:	46c0      	nop			; (mov r8, r8)
 8006d72:	e002      	b.n	8006d7a <HAL_UART_IRQHandler+0x5a2>
      return;
 8006d74:	46c0      	nop			; (mov r8, r8)
 8006d76:	e000      	b.n	8006d7a <HAL_UART_IRQHandler+0x5a2>
    return;
 8006d78:	46c0      	nop			; (mov r8, r8)
  }

}
 8006d7a:	46bd      	mov	sp, r7
 8006d7c:	b02b      	add	sp, #172	; 0xac
 8006d7e:	bd90      	pop	{r4, r7, pc}
 8006d80:	fffffeff 	.word	0xfffffeff
 8006d84:	fffffedf 	.word	0xfffffedf

08006d88 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006d88:	b580      	push	{r7, lr}
 8006d8a:	b082      	sub	sp, #8
 8006d8c:	af00      	add	r7, sp, #0
 8006d8e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006d90:	46c0      	nop			; (mov r8, r8)
 8006d92:	46bd      	mov	sp, r7
 8006d94:	b002      	add	sp, #8
 8006d96:	bd80      	pop	{r7, pc}

08006d98 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006d98:	b580      	push	{r7, lr}
 8006d9a:	b082      	sub	sp, #8
 8006d9c:	af00      	add	r7, sp, #0
 8006d9e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006da0:	46c0      	nop			; (mov r8, r8)
 8006da2:	46bd      	mov	sp, r7
 8006da4:	b002      	add	sp, #8
 8006da6:	bd80      	pop	{r7, pc}

08006da8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006da8:	b580      	push	{r7, lr}
 8006daa:	b082      	sub	sp, #8
 8006dac:	af00      	add	r7, sp, #0
 8006dae:	6078      	str	r0, [r7, #4]
 8006db0:	000a      	movs	r2, r1
 8006db2:	1cbb      	adds	r3, r7, #2
 8006db4:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006db6:	46c0      	nop			; (mov r8, r8)
 8006db8:	46bd      	mov	sp, r7
 8006dba:	b002      	add	sp, #8
 8006dbc:	bd80      	pop	{r7, pc}
	...

08006dc0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006dc0:	b580      	push	{r7, lr}
 8006dc2:	b088      	sub	sp, #32
 8006dc4:	af00      	add	r7, sp, #0
 8006dc6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006dc8:	231e      	movs	r3, #30
 8006dca:	18fb      	adds	r3, r7, r3
 8006dcc:	2200      	movs	r2, #0
 8006dce:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	689a      	ldr	r2, [r3, #8]
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	691b      	ldr	r3, [r3, #16]
 8006dd8:	431a      	orrs	r2, r3
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	695b      	ldr	r3, [r3, #20]
 8006dde:	431a      	orrs	r2, r3
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	69db      	ldr	r3, [r3, #28]
 8006de4:	4313      	orrs	r3, r2
 8006de6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	4aaf      	ldr	r2, [pc, #700]	; (80070ac <UART_SetConfig+0x2ec>)
 8006df0:	4013      	ands	r3, r2
 8006df2:	0019      	movs	r1, r3
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	697a      	ldr	r2, [r7, #20]
 8006dfa:	430a      	orrs	r2, r1
 8006dfc:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	685b      	ldr	r3, [r3, #4]
 8006e04:	4aaa      	ldr	r2, [pc, #680]	; (80070b0 <UART_SetConfig+0x2f0>)
 8006e06:	4013      	ands	r3, r2
 8006e08:	0019      	movs	r1, r3
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	68da      	ldr	r2, [r3, #12]
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	430a      	orrs	r2, r1
 8006e14:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	699b      	ldr	r3, [r3, #24]
 8006e1a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	6a1b      	ldr	r3, [r3, #32]
 8006e20:	697a      	ldr	r2, [r7, #20]
 8006e22:	4313      	orrs	r3, r2
 8006e24:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	689b      	ldr	r3, [r3, #8]
 8006e2c:	4aa1      	ldr	r2, [pc, #644]	; (80070b4 <UART_SetConfig+0x2f4>)
 8006e2e:	4013      	ands	r3, r2
 8006e30:	0019      	movs	r1, r3
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	697a      	ldr	r2, [r7, #20]
 8006e38:	430a      	orrs	r2, r1
 8006e3a:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	4a9d      	ldr	r2, [pc, #628]	; (80070b8 <UART_SetConfig+0x2f8>)
 8006e42:	4293      	cmp	r3, r2
 8006e44:	d127      	bne.n	8006e96 <UART_SetConfig+0xd6>
 8006e46:	4b9d      	ldr	r3, [pc, #628]	; (80070bc <UART_SetConfig+0x2fc>)
 8006e48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e4a:	2203      	movs	r2, #3
 8006e4c:	4013      	ands	r3, r2
 8006e4e:	2b03      	cmp	r3, #3
 8006e50:	d00d      	beq.n	8006e6e <UART_SetConfig+0xae>
 8006e52:	d81b      	bhi.n	8006e8c <UART_SetConfig+0xcc>
 8006e54:	2b02      	cmp	r3, #2
 8006e56:	d014      	beq.n	8006e82 <UART_SetConfig+0xc2>
 8006e58:	d818      	bhi.n	8006e8c <UART_SetConfig+0xcc>
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d002      	beq.n	8006e64 <UART_SetConfig+0xa4>
 8006e5e:	2b01      	cmp	r3, #1
 8006e60:	d00a      	beq.n	8006e78 <UART_SetConfig+0xb8>
 8006e62:	e013      	b.n	8006e8c <UART_SetConfig+0xcc>
 8006e64:	231f      	movs	r3, #31
 8006e66:	18fb      	adds	r3, r7, r3
 8006e68:	2200      	movs	r2, #0
 8006e6a:	701a      	strb	r2, [r3, #0]
 8006e6c:	e065      	b.n	8006f3a <UART_SetConfig+0x17a>
 8006e6e:	231f      	movs	r3, #31
 8006e70:	18fb      	adds	r3, r7, r3
 8006e72:	2202      	movs	r2, #2
 8006e74:	701a      	strb	r2, [r3, #0]
 8006e76:	e060      	b.n	8006f3a <UART_SetConfig+0x17a>
 8006e78:	231f      	movs	r3, #31
 8006e7a:	18fb      	adds	r3, r7, r3
 8006e7c:	2204      	movs	r2, #4
 8006e7e:	701a      	strb	r2, [r3, #0]
 8006e80:	e05b      	b.n	8006f3a <UART_SetConfig+0x17a>
 8006e82:	231f      	movs	r3, #31
 8006e84:	18fb      	adds	r3, r7, r3
 8006e86:	2208      	movs	r2, #8
 8006e88:	701a      	strb	r2, [r3, #0]
 8006e8a:	e056      	b.n	8006f3a <UART_SetConfig+0x17a>
 8006e8c:	231f      	movs	r3, #31
 8006e8e:	18fb      	adds	r3, r7, r3
 8006e90:	2210      	movs	r2, #16
 8006e92:	701a      	strb	r2, [r3, #0]
 8006e94:	e051      	b.n	8006f3a <UART_SetConfig+0x17a>
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	4a89      	ldr	r2, [pc, #548]	; (80070c0 <UART_SetConfig+0x300>)
 8006e9c:	4293      	cmp	r3, r2
 8006e9e:	d134      	bne.n	8006f0a <UART_SetConfig+0x14a>
 8006ea0:	4b86      	ldr	r3, [pc, #536]	; (80070bc <UART_SetConfig+0x2fc>)
 8006ea2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006ea4:	23c0      	movs	r3, #192	; 0xc0
 8006ea6:	029b      	lsls	r3, r3, #10
 8006ea8:	4013      	ands	r3, r2
 8006eaa:	22c0      	movs	r2, #192	; 0xc0
 8006eac:	0292      	lsls	r2, r2, #10
 8006eae:	4293      	cmp	r3, r2
 8006eb0:	d017      	beq.n	8006ee2 <UART_SetConfig+0x122>
 8006eb2:	22c0      	movs	r2, #192	; 0xc0
 8006eb4:	0292      	lsls	r2, r2, #10
 8006eb6:	4293      	cmp	r3, r2
 8006eb8:	d822      	bhi.n	8006f00 <UART_SetConfig+0x140>
 8006eba:	2280      	movs	r2, #128	; 0x80
 8006ebc:	0292      	lsls	r2, r2, #10
 8006ebe:	4293      	cmp	r3, r2
 8006ec0:	d019      	beq.n	8006ef6 <UART_SetConfig+0x136>
 8006ec2:	2280      	movs	r2, #128	; 0x80
 8006ec4:	0292      	lsls	r2, r2, #10
 8006ec6:	4293      	cmp	r3, r2
 8006ec8:	d81a      	bhi.n	8006f00 <UART_SetConfig+0x140>
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d004      	beq.n	8006ed8 <UART_SetConfig+0x118>
 8006ece:	2280      	movs	r2, #128	; 0x80
 8006ed0:	0252      	lsls	r2, r2, #9
 8006ed2:	4293      	cmp	r3, r2
 8006ed4:	d00a      	beq.n	8006eec <UART_SetConfig+0x12c>
 8006ed6:	e013      	b.n	8006f00 <UART_SetConfig+0x140>
 8006ed8:	231f      	movs	r3, #31
 8006eda:	18fb      	adds	r3, r7, r3
 8006edc:	2200      	movs	r2, #0
 8006ede:	701a      	strb	r2, [r3, #0]
 8006ee0:	e02b      	b.n	8006f3a <UART_SetConfig+0x17a>
 8006ee2:	231f      	movs	r3, #31
 8006ee4:	18fb      	adds	r3, r7, r3
 8006ee6:	2202      	movs	r2, #2
 8006ee8:	701a      	strb	r2, [r3, #0]
 8006eea:	e026      	b.n	8006f3a <UART_SetConfig+0x17a>
 8006eec:	231f      	movs	r3, #31
 8006eee:	18fb      	adds	r3, r7, r3
 8006ef0:	2204      	movs	r2, #4
 8006ef2:	701a      	strb	r2, [r3, #0]
 8006ef4:	e021      	b.n	8006f3a <UART_SetConfig+0x17a>
 8006ef6:	231f      	movs	r3, #31
 8006ef8:	18fb      	adds	r3, r7, r3
 8006efa:	2208      	movs	r2, #8
 8006efc:	701a      	strb	r2, [r3, #0]
 8006efe:	e01c      	b.n	8006f3a <UART_SetConfig+0x17a>
 8006f00:	231f      	movs	r3, #31
 8006f02:	18fb      	adds	r3, r7, r3
 8006f04:	2210      	movs	r2, #16
 8006f06:	701a      	strb	r2, [r3, #0]
 8006f08:	e017      	b.n	8006f3a <UART_SetConfig+0x17a>
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	4a6d      	ldr	r2, [pc, #436]	; (80070c4 <UART_SetConfig+0x304>)
 8006f10:	4293      	cmp	r3, r2
 8006f12:	d104      	bne.n	8006f1e <UART_SetConfig+0x15e>
 8006f14:	231f      	movs	r3, #31
 8006f16:	18fb      	adds	r3, r7, r3
 8006f18:	2200      	movs	r2, #0
 8006f1a:	701a      	strb	r2, [r3, #0]
 8006f1c:	e00d      	b.n	8006f3a <UART_SetConfig+0x17a>
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	4a69      	ldr	r2, [pc, #420]	; (80070c8 <UART_SetConfig+0x308>)
 8006f24:	4293      	cmp	r3, r2
 8006f26:	d104      	bne.n	8006f32 <UART_SetConfig+0x172>
 8006f28:	231f      	movs	r3, #31
 8006f2a:	18fb      	adds	r3, r7, r3
 8006f2c:	2200      	movs	r2, #0
 8006f2e:	701a      	strb	r2, [r3, #0]
 8006f30:	e003      	b.n	8006f3a <UART_SetConfig+0x17a>
 8006f32:	231f      	movs	r3, #31
 8006f34:	18fb      	adds	r3, r7, r3
 8006f36:	2210      	movs	r2, #16
 8006f38:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	69da      	ldr	r2, [r3, #28]
 8006f3e:	2380      	movs	r3, #128	; 0x80
 8006f40:	021b      	lsls	r3, r3, #8
 8006f42:	429a      	cmp	r2, r3
 8006f44:	d15d      	bne.n	8007002 <UART_SetConfig+0x242>
  {
    switch (clocksource)
 8006f46:	231f      	movs	r3, #31
 8006f48:	18fb      	adds	r3, r7, r3
 8006f4a:	781b      	ldrb	r3, [r3, #0]
 8006f4c:	2b08      	cmp	r3, #8
 8006f4e:	d015      	beq.n	8006f7c <UART_SetConfig+0x1bc>
 8006f50:	dc18      	bgt.n	8006f84 <UART_SetConfig+0x1c4>
 8006f52:	2b04      	cmp	r3, #4
 8006f54:	d00d      	beq.n	8006f72 <UART_SetConfig+0x1b2>
 8006f56:	dc15      	bgt.n	8006f84 <UART_SetConfig+0x1c4>
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d002      	beq.n	8006f62 <UART_SetConfig+0x1a2>
 8006f5c:	2b02      	cmp	r3, #2
 8006f5e:	d005      	beq.n	8006f6c <UART_SetConfig+0x1ac>
 8006f60:	e010      	b.n	8006f84 <UART_SetConfig+0x1c4>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006f62:	f7fd febb 	bl	8004cdc <HAL_RCC_GetPCLK1Freq>
 8006f66:	0003      	movs	r3, r0
 8006f68:	61bb      	str	r3, [r7, #24]
        break;
 8006f6a:	e012      	b.n	8006f92 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006f6c:	4b57      	ldr	r3, [pc, #348]	; (80070cc <UART_SetConfig+0x30c>)
 8006f6e:	61bb      	str	r3, [r7, #24]
        break;
 8006f70:	e00f      	b.n	8006f92 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006f72:	f7fd fe27 	bl	8004bc4 <HAL_RCC_GetSysClockFreq>
 8006f76:	0003      	movs	r3, r0
 8006f78:	61bb      	str	r3, [r7, #24]
        break;
 8006f7a:	e00a      	b.n	8006f92 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006f7c:	2380      	movs	r3, #128	; 0x80
 8006f7e:	021b      	lsls	r3, r3, #8
 8006f80:	61bb      	str	r3, [r7, #24]
        break;
 8006f82:	e006      	b.n	8006f92 <UART_SetConfig+0x1d2>
      default:
        pclk = 0U;
 8006f84:	2300      	movs	r3, #0
 8006f86:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006f88:	231e      	movs	r3, #30
 8006f8a:	18fb      	adds	r3, r7, r3
 8006f8c:	2201      	movs	r2, #1
 8006f8e:	701a      	strb	r2, [r3, #0]
        break;
 8006f90:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006f92:	69bb      	ldr	r3, [r7, #24]
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	d100      	bne.n	8006f9a <UART_SetConfig+0x1da>
 8006f98:	e07b      	b.n	8007092 <UART_SetConfig+0x2d2>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006f9a:	69bb      	ldr	r3, [r7, #24]
 8006f9c:	005a      	lsls	r2, r3, #1
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	685b      	ldr	r3, [r3, #4]
 8006fa2:	085b      	lsrs	r3, r3, #1
 8006fa4:	18d2      	adds	r2, r2, r3
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	685b      	ldr	r3, [r3, #4]
 8006faa:	0019      	movs	r1, r3
 8006fac:	0010      	movs	r0, r2
 8006fae:	f7f9 f8bd 	bl	800012c <__udivsi3>
 8006fb2:	0003      	movs	r3, r0
 8006fb4:	b29b      	uxth	r3, r3
 8006fb6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006fb8:	693b      	ldr	r3, [r7, #16]
 8006fba:	2b0f      	cmp	r3, #15
 8006fbc:	d91c      	bls.n	8006ff8 <UART_SetConfig+0x238>
 8006fbe:	693a      	ldr	r2, [r7, #16]
 8006fc0:	2380      	movs	r3, #128	; 0x80
 8006fc2:	025b      	lsls	r3, r3, #9
 8006fc4:	429a      	cmp	r2, r3
 8006fc6:	d217      	bcs.n	8006ff8 <UART_SetConfig+0x238>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006fc8:	693b      	ldr	r3, [r7, #16]
 8006fca:	b29a      	uxth	r2, r3
 8006fcc:	200e      	movs	r0, #14
 8006fce:	183b      	adds	r3, r7, r0
 8006fd0:	210f      	movs	r1, #15
 8006fd2:	438a      	bics	r2, r1
 8006fd4:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006fd6:	693b      	ldr	r3, [r7, #16]
 8006fd8:	085b      	lsrs	r3, r3, #1
 8006fda:	b29b      	uxth	r3, r3
 8006fdc:	2207      	movs	r2, #7
 8006fde:	4013      	ands	r3, r2
 8006fe0:	b299      	uxth	r1, r3
 8006fe2:	183b      	adds	r3, r7, r0
 8006fe4:	183a      	adds	r2, r7, r0
 8006fe6:	8812      	ldrh	r2, [r2, #0]
 8006fe8:	430a      	orrs	r2, r1
 8006fea:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	183a      	adds	r2, r7, r0
 8006ff2:	8812      	ldrh	r2, [r2, #0]
 8006ff4:	60da      	str	r2, [r3, #12]
 8006ff6:	e04c      	b.n	8007092 <UART_SetConfig+0x2d2>
      }
      else
      {
        ret = HAL_ERROR;
 8006ff8:	231e      	movs	r3, #30
 8006ffa:	18fb      	adds	r3, r7, r3
 8006ffc:	2201      	movs	r2, #1
 8006ffe:	701a      	strb	r2, [r3, #0]
 8007000:	e047      	b.n	8007092 <UART_SetConfig+0x2d2>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007002:	231f      	movs	r3, #31
 8007004:	18fb      	adds	r3, r7, r3
 8007006:	781b      	ldrb	r3, [r3, #0]
 8007008:	2b08      	cmp	r3, #8
 800700a:	d015      	beq.n	8007038 <UART_SetConfig+0x278>
 800700c:	dc18      	bgt.n	8007040 <UART_SetConfig+0x280>
 800700e:	2b04      	cmp	r3, #4
 8007010:	d00d      	beq.n	800702e <UART_SetConfig+0x26e>
 8007012:	dc15      	bgt.n	8007040 <UART_SetConfig+0x280>
 8007014:	2b00      	cmp	r3, #0
 8007016:	d002      	beq.n	800701e <UART_SetConfig+0x25e>
 8007018:	2b02      	cmp	r3, #2
 800701a:	d005      	beq.n	8007028 <UART_SetConfig+0x268>
 800701c:	e010      	b.n	8007040 <UART_SetConfig+0x280>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800701e:	f7fd fe5d 	bl	8004cdc <HAL_RCC_GetPCLK1Freq>
 8007022:	0003      	movs	r3, r0
 8007024:	61bb      	str	r3, [r7, #24]
        break;
 8007026:	e012      	b.n	800704e <UART_SetConfig+0x28e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007028:	4b28      	ldr	r3, [pc, #160]	; (80070cc <UART_SetConfig+0x30c>)
 800702a:	61bb      	str	r3, [r7, #24]
        break;
 800702c:	e00f      	b.n	800704e <UART_SetConfig+0x28e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800702e:	f7fd fdc9 	bl	8004bc4 <HAL_RCC_GetSysClockFreq>
 8007032:	0003      	movs	r3, r0
 8007034:	61bb      	str	r3, [r7, #24]
        break;
 8007036:	e00a      	b.n	800704e <UART_SetConfig+0x28e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007038:	2380      	movs	r3, #128	; 0x80
 800703a:	021b      	lsls	r3, r3, #8
 800703c:	61bb      	str	r3, [r7, #24]
        break;
 800703e:	e006      	b.n	800704e <UART_SetConfig+0x28e>
      default:
        pclk = 0U;
 8007040:	2300      	movs	r3, #0
 8007042:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8007044:	231e      	movs	r3, #30
 8007046:	18fb      	adds	r3, r7, r3
 8007048:	2201      	movs	r2, #1
 800704a:	701a      	strb	r2, [r3, #0]
        break;
 800704c:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 800704e:	69bb      	ldr	r3, [r7, #24]
 8007050:	2b00      	cmp	r3, #0
 8007052:	d01e      	beq.n	8007092 <UART_SetConfig+0x2d2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	685b      	ldr	r3, [r3, #4]
 8007058:	085a      	lsrs	r2, r3, #1
 800705a:	69bb      	ldr	r3, [r7, #24]
 800705c:	18d2      	adds	r2, r2, r3
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	685b      	ldr	r3, [r3, #4]
 8007062:	0019      	movs	r1, r3
 8007064:	0010      	movs	r0, r2
 8007066:	f7f9 f861 	bl	800012c <__udivsi3>
 800706a:	0003      	movs	r3, r0
 800706c:	b29b      	uxth	r3, r3
 800706e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007070:	693b      	ldr	r3, [r7, #16]
 8007072:	2b0f      	cmp	r3, #15
 8007074:	d909      	bls.n	800708a <UART_SetConfig+0x2ca>
 8007076:	693a      	ldr	r2, [r7, #16]
 8007078:	2380      	movs	r3, #128	; 0x80
 800707a:	025b      	lsls	r3, r3, #9
 800707c:	429a      	cmp	r2, r3
 800707e:	d204      	bcs.n	800708a <UART_SetConfig+0x2ca>
      {
        huart->Instance->BRR = usartdiv;
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	693a      	ldr	r2, [r7, #16]
 8007086:	60da      	str	r2, [r3, #12]
 8007088:	e003      	b.n	8007092 <UART_SetConfig+0x2d2>
      }
      else
      {
        ret = HAL_ERROR;
 800708a:	231e      	movs	r3, #30
 800708c:	18fb      	adds	r3, r7, r3
 800708e:	2201      	movs	r2, #1
 8007090:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	2200      	movs	r2, #0
 8007096:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	2200      	movs	r2, #0
 800709c:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800709e:	231e      	movs	r3, #30
 80070a0:	18fb      	adds	r3, r7, r3
 80070a2:	781b      	ldrb	r3, [r3, #0]
}
 80070a4:	0018      	movs	r0, r3
 80070a6:	46bd      	mov	sp, r7
 80070a8:	b008      	add	sp, #32
 80070aa:	bd80      	pop	{r7, pc}
 80070ac:	efff69f3 	.word	0xefff69f3
 80070b0:	ffffcfff 	.word	0xffffcfff
 80070b4:	fffff4ff 	.word	0xfffff4ff
 80070b8:	40013800 	.word	0x40013800
 80070bc:	40021000 	.word	0x40021000
 80070c0:	40004400 	.word	0x40004400
 80070c4:	40004800 	.word	0x40004800
 80070c8:	40004c00 	.word	0x40004c00
 80070cc:	007a1200 	.word	0x007a1200

080070d0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80070d0:	b580      	push	{r7, lr}
 80070d2:	b082      	sub	sp, #8
 80070d4:	af00      	add	r7, sp, #0
 80070d6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070dc:	2201      	movs	r2, #1
 80070de:	4013      	ands	r3, r2
 80070e0:	d00b      	beq.n	80070fa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	685b      	ldr	r3, [r3, #4]
 80070e8:	4a4a      	ldr	r2, [pc, #296]	; (8007214 <UART_AdvFeatureConfig+0x144>)
 80070ea:	4013      	ands	r3, r2
 80070ec:	0019      	movs	r1, r3
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	430a      	orrs	r2, r1
 80070f8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070fe:	2202      	movs	r2, #2
 8007100:	4013      	ands	r3, r2
 8007102:	d00b      	beq.n	800711c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	685b      	ldr	r3, [r3, #4]
 800710a:	4a43      	ldr	r2, [pc, #268]	; (8007218 <UART_AdvFeatureConfig+0x148>)
 800710c:	4013      	ands	r3, r2
 800710e:	0019      	movs	r1, r3
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	430a      	orrs	r2, r1
 800711a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007120:	2204      	movs	r2, #4
 8007122:	4013      	ands	r3, r2
 8007124:	d00b      	beq.n	800713e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	685b      	ldr	r3, [r3, #4]
 800712c:	4a3b      	ldr	r2, [pc, #236]	; (800721c <UART_AdvFeatureConfig+0x14c>)
 800712e:	4013      	ands	r3, r2
 8007130:	0019      	movs	r1, r3
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	430a      	orrs	r2, r1
 800713c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007142:	2208      	movs	r2, #8
 8007144:	4013      	ands	r3, r2
 8007146:	d00b      	beq.n	8007160 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	685b      	ldr	r3, [r3, #4]
 800714e:	4a34      	ldr	r2, [pc, #208]	; (8007220 <UART_AdvFeatureConfig+0x150>)
 8007150:	4013      	ands	r3, r2
 8007152:	0019      	movs	r1, r3
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	430a      	orrs	r2, r1
 800715e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007164:	2210      	movs	r2, #16
 8007166:	4013      	ands	r3, r2
 8007168:	d00b      	beq.n	8007182 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	689b      	ldr	r3, [r3, #8]
 8007170:	4a2c      	ldr	r2, [pc, #176]	; (8007224 <UART_AdvFeatureConfig+0x154>)
 8007172:	4013      	ands	r3, r2
 8007174:	0019      	movs	r1, r3
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	430a      	orrs	r2, r1
 8007180:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007186:	2220      	movs	r2, #32
 8007188:	4013      	ands	r3, r2
 800718a:	d00b      	beq.n	80071a4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	689b      	ldr	r3, [r3, #8]
 8007192:	4a25      	ldr	r2, [pc, #148]	; (8007228 <UART_AdvFeatureConfig+0x158>)
 8007194:	4013      	ands	r3, r2
 8007196:	0019      	movs	r1, r3
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	430a      	orrs	r2, r1
 80071a2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071a8:	2240      	movs	r2, #64	; 0x40
 80071aa:	4013      	ands	r3, r2
 80071ac:	d01d      	beq.n	80071ea <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	685b      	ldr	r3, [r3, #4]
 80071b4:	4a1d      	ldr	r2, [pc, #116]	; (800722c <UART_AdvFeatureConfig+0x15c>)
 80071b6:	4013      	ands	r3, r2
 80071b8:	0019      	movs	r1, r3
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	430a      	orrs	r2, r1
 80071c4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80071ca:	2380      	movs	r3, #128	; 0x80
 80071cc:	035b      	lsls	r3, r3, #13
 80071ce:	429a      	cmp	r2, r3
 80071d0:	d10b      	bne.n	80071ea <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	685b      	ldr	r3, [r3, #4]
 80071d8:	4a15      	ldr	r2, [pc, #84]	; (8007230 <UART_AdvFeatureConfig+0x160>)
 80071da:	4013      	ands	r3, r2
 80071dc:	0019      	movs	r1, r3
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	430a      	orrs	r2, r1
 80071e8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071ee:	2280      	movs	r2, #128	; 0x80
 80071f0:	4013      	ands	r3, r2
 80071f2:	d00b      	beq.n	800720c <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	685b      	ldr	r3, [r3, #4]
 80071fa:	4a0e      	ldr	r2, [pc, #56]	; (8007234 <UART_AdvFeatureConfig+0x164>)
 80071fc:	4013      	ands	r3, r2
 80071fe:	0019      	movs	r1, r3
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	430a      	orrs	r2, r1
 800720a:	605a      	str	r2, [r3, #4]
  }
}
 800720c:	46c0      	nop			; (mov r8, r8)
 800720e:	46bd      	mov	sp, r7
 8007210:	b002      	add	sp, #8
 8007212:	bd80      	pop	{r7, pc}
 8007214:	fffdffff 	.word	0xfffdffff
 8007218:	fffeffff 	.word	0xfffeffff
 800721c:	fffbffff 	.word	0xfffbffff
 8007220:	ffff7fff 	.word	0xffff7fff
 8007224:	ffffefff 	.word	0xffffefff
 8007228:	ffffdfff 	.word	0xffffdfff
 800722c:	ffefffff 	.word	0xffefffff
 8007230:	ff9fffff 	.word	0xff9fffff
 8007234:	fff7ffff 	.word	0xfff7ffff

08007238 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007238:	b580      	push	{r7, lr}
 800723a:	b086      	sub	sp, #24
 800723c:	af02      	add	r7, sp, #8
 800723e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	2280      	movs	r2, #128	; 0x80
 8007244:	2100      	movs	r1, #0
 8007246:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007248:	f7fa fb22 	bl	8001890 <HAL_GetTick>
 800724c:	0003      	movs	r3, r0
 800724e:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	2208      	movs	r2, #8
 8007258:	4013      	ands	r3, r2
 800725a:	2b08      	cmp	r3, #8
 800725c:	d10c      	bne.n	8007278 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	2280      	movs	r2, #128	; 0x80
 8007262:	0391      	lsls	r1, r2, #14
 8007264:	6878      	ldr	r0, [r7, #4]
 8007266:	4a17      	ldr	r2, [pc, #92]	; (80072c4 <UART_CheckIdleState+0x8c>)
 8007268:	9200      	str	r2, [sp, #0]
 800726a:	2200      	movs	r2, #0
 800726c:	f000 f82c 	bl	80072c8 <UART_WaitOnFlagUntilTimeout>
 8007270:	1e03      	subs	r3, r0, #0
 8007272:	d001      	beq.n	8007278 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007274:	2303      	movs	r3, #3
 8007276:	e021      	b.n	80072bc <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	2204      	movs	r2, #4
 8007280:	4013      	ands	r3, r2
 8007282:	2b04      	cmp	r3, #4
 8007284:	d10c      	bne.n	80072a0 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	2280      	movs	r2, #128	; 0x80
 800728a:	03d1      	lsls	r1, r2, #15
 800728c:	6878      	ldr	r0, [r7, #4]
 800728e:	4a0d      	ldr	r2, [pc, #52]	; (80072c4 <UART_CheckIdleState+0x8c>)
 8007290:	9200      	str	r2, [sp, #0]
 8007292:	2200      	movs	r2, #0
 8007294:	f000 f818 	bl	80072c8 <UART_WaitOnFlagUntilTimeout>
 8007298:	1e03      	subs	r3, r0, #0
 800729a:	d001      	beq.n	80072a0 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800729c:	2303      	movs	r3, #3
 800729e:	e00d      	b.n	80072bc <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	2220      	movs	r2, #32
 80072a4:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	2220      	movs	r2, #32
 80072aa:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	2200      	movs	r2, #0
 80072b0:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	2274      	movs	r2, #116	; 0x74
 80072b6:	2100      	movs	r1, #0
 80072b8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80072ba:	2300      	movs	r3, #0
}
 80072bc:	0018      	movs	r0, r3
 80072be:	46bd      	mov	sp, r7
 80072c0:	b004      	add	sp, #16
 80072c2:	bd80      	pop	{r7, pc}
 80072c4:	01ffffff 	.word	0x01ffffff

080072c8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80072c8:	b580      	push	{r7, lr}
 80072ca:	b094      	sub	sp, #80	; 0x50
 80072cc:	af00      	add	r7, sp, #0
 80072ce:	60f8      	str	r0, [r7, #12]
 80072d0:	60b9      	str	r1, [r7, #8]
 80072d2:	603b      	str	r3, [r7, #0]
 80072d4:	1dfb      	adds	r3, r7, #7
 80072d6:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80072d8:	e0a3      	b.n	8007422 <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80072da:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80072dc:	3301      	adds	r3, #1
 80072de:	d100      	bne.n	80072e2 <UART_WaitOnFlagUntilTimeout+0x1a>
 80072e0:	e09f      	b.n	8007422 <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80072e2:	f7fa fad5 	bl	8001890 <HAL_GetTick>
 80072e6:	0002      	movs	r2, r0
 80072e8:	683b      	ldr	r3, [r7, #0]
 80072ea:	1ad3      	subs	r3, r2, r3
 80072ec:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80072ee:	429a      	cmp	r2, r3
 80072f0:	d302      	bcc.n	80072f8 <UART_WaitOnFlagUntilTimeout+0x30>
 80072f2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	d13d      	bne.n	8007374 <UART_WaitOnFlagUntilTimeout+0xac>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80072f8:	f3ef 8310 	mrs	r3, PRIMASK
 80072fc:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 80072fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007300:	647b      	str	r3, [r7, #68]	; 0x44
 8007302:	2301      	movs	r3, #1
 8007304:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007306:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007308:	f383 8810 	msr	PRIMASK, r3
}
 800730c:	46c0      	nop			; (mov r8, r8)
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	681a      	ldr	r2, [r3, #0]
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	494c      	ldr	r1, [pc, #304]	; (800744c <UART_WaitOnFlagUntilTimeout+0x184>)
 800731a:	400a      	ands	r2, r1
 800731c:	601a      	str	r2, [r3, #0]
 800731e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007320:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007322:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007324:	f383 8810 	msr	PRIMASK, r3
}
 8007328:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800732a:	f3ef 8310 	mrs	r3, PRIMASK
 800732e:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8007330:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007332:	643b      	str	r3, [r7, #64]	; 0x40
 8007334:	2301      	movs	r3, #1
 8007336:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007338:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800733a:	f383 8810 	msr	PRIMASK, r3
}
 800733e:	46c0      	nop			; (mov r8, r8)
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	689a      	ldr	r2, [r3, #8]
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	2101      	movs	r1, #1
 800734c:	438a      	bics	r2, r1
 800734e:	609a      	str	r2, [r3, #8]
 8007350:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007352:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007354:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007356:	f383 8810 	msr	PRIMASK, r3
}
 800735a:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	2220      	movs	r2, #32
 8007360:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	2220      	movs	r2, #32
 8007366:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	2274      	movs	r2, #116	; 0x74
 800736c:	2100      	movs	r1, #0
 800736e:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8007370:	2303      	movs	r3, #3
 8007372:	e067      	b.n	8007444 <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	2204      	movs	r2, #4
 800737c:	4013      	ands	r3, r2
 800737e:	d050      	beq.n	8007422 <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	69da      	ldr	r2, [r3, #28]
 8007386:	2380      	movs	r3, #128	; 0x80
 8007388:	011b      	lsls	r3, r3, #4
 800738a:	401a      	ands	r2, r3
 800738c:	2380      	movs	r3, #128	; 0x80
 800738e:	011b      	lsls	r3, r3, #4
 8007390:	429a      	cmp	r2, r3
 8007392:	d146      	bne.n	8007422 <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	2280      	movs	r2, #128	; 0x80
 800739a:	0112      	lsls	r2, r2, #4
 800739c:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800739e:	f3ef 8310 	mrs	r3, PRIMASK
 80073a2:	613b      	str	r3, [r7, #16]
  return(result);
 80073a4:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80073a6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80073a8:	2301      	movs	r3, #1
 80073aa:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80073ac:	697b      	ldr	r3, [r7, #20]
 80073ae:	f383 8810 	msr	PRIMASK, r3
}
 80073b2:	46c0      	nop			; (mov r8, r8)
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	681a      	ldr	r2, [r3, #0]
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	4923      	ldr	r1, [pc, #140]	; (800744c <UART_WaitOnFlagUntilTimeout+0x184>)
 80073c0:	400a      	ands	r2, r1
 80073c2:	601a      	str	r2, [r3, #0]
 80073c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80073c6:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80073c8:	69bb      	ldr	r3, [r7, #24]
 80073ca:	f383 8810 	msr	PRIMASK, r3
}
 80073ce:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80073d0:	f3ef 8310 	mrs	r3, PRIMASK
 80073d4:	61fb      	str	r3, [r7, #28]
  return(result);
 80073d6:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80073d8:	64bb      	str	r3, [r7, #72]	; 0x48
 80073da:	2301      	movs	r3, #1
 80073dc:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80073de:	6a3b      	ldr	r3, [r7, #32]
 80073e0:	f383 8810 	msr	PRIMASK, r3
}
 80073e4:	46c0      	nop			; (mov r8, r8)
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	689a      	ldr	r2, [r3, #8]
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	2101      	movs	r1, #1
 80073f2:	438a      	bics	r2, r1
 80073f4:	609a      	str	r2, [r3, #8]
 80073f6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80073f8:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80073fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073fc:	f383 8810 	msr	PRIMASK, r3
}
 8007400:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	2220      	movs	r2, #32
 8007406:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	2220      	movs	r2, #32
 800740c:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	2280      	movs	r2, #128	; 0x80
 8007412:	2120      	movs	r1, #32
 8007414:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	2274      	movs	r2, #116	; 0x74
 800741a:	2100      	movs	r1, #0
 800741c:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800741e:	2303      	movs	r3, #3
 8007420:	e010      	b.n	8007444 <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	69db      	ldr	r3, [r3, #28]
 8007428:	68ba      	ldr	r2, [r7, #8]
 800742a:	4013      	ands	r3, r2
 800742c:	68ba      	ldr	r2, [r7, #8]
 800742e:	1ad3      	subs	r3, r2, r3
 8007430:	425a      	negs	r2, r3
 8007432:	4153      	adcs	r3, r2
 8007434:	b2db      	uxtb	r3, r3
 8007436:	001a      	movs	r2, r3
 8007438:	1dfb      	adds	r3, r7, #7
 800743a:	781b      	ldrb	r3, [r3, #0]
 800743c:	429a      	cmp	r2, r3
 800743e:	d100      	bne.n	8007442 <UART_WaitOnFlagUntilTimeout+0x17a>
 8007440:	e74b      	b.n	80072da <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007442:	2300      	movs	r3, #0
}
 8007444:	0018      	movs	r0, r3
 8007446:	46bd      	mov	sp, r7
 8007448:	b014      	add	sp, #80	; 0x50
 800744a:	bd80      	pop	{r7, pc}
 800744c:	fffffe5f 	.word	0xfffffe5f

08007450 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007450:	b580      	push	{r7, lr}
 8007452:	b08e      	sub	sp, #56	; 0x38
 8007454:	af00      	add	r7, sp, #0
 8007456:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007458:	f3ef 8310 	mrs	r3, PRIMASK
 800745c:	617b      	str	r3, [r7, #20]
  return(result);
 800745e:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007460:	637b      	str	r3, [r7, #52]	; 0x34
 8007462:	2301      	movs	r3, #1
 8007464:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007466:	69bb      	ldr	r3, [r7, #24]
 8007468:	f383 8810 	msr	PRIMASK, r3
}
 800746c:	46c0      	nop			; (mov r8, r8)
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	681a      	ldr	r2, [r3, #0]
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	4925      	ldr	r1, [pc, #148]	; (8007510 <UART_EndRxTransfer+0xc0>)
 800747a:	400a      	ands	r2, r1
 800747c:	601a      	str	r2, [r3, #0]
 800747e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007480:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007482:	69fb      	ldr	r3, [r7, #28]
 8007484:	f383 8810 	msr	PRIMASK, r3
}
 8007488:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800748a:	f3ef 8310 	mrs	r3, PRIMASK
 800748e:	623b      	str	r3, [r7, #32]
  return(result);
 8007490:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007492:	633b      	str	r3, [r7, #48]	; 0x30
 8007494:	2301      	movs	r3, #1
 8007496:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007498:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800749a:	f383 8810 	msr	PRIMASK, r3
}
 800749e:	46c0      	nop			; (mov r8, r8)
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	689a      	ldr	r2, [r3, #8]
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	2101      	movs	r1, #1
 80074ac:	438a      	bics	r2, r1
 80074ae:	609a      	str	r2, [r3, #8]
 80074b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074b2:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80074b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074b6:	f383 8810 	msr	PRIMASK, r3
}
 80074ba:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80074c0:	2b01      	cmp	r3, #1
 80074c2:	d118      	bne.n	80074f6 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80074c4:	f3ef 8310 	mrs	r3, PRIMASK
 80074c8:	60bb      	str	r3, [r7, #8]
  return(result);
 80074ca:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80074cc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80074ce:	2301      	movs	r3, #1
 80074d0:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	f383 8810 	msr	PRIMASK, r3
}
 80074d8:	46c0      	nop			; (mov r8, r8)
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	681a      	ldr	r2, [r3, #0]
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	2110      	movs	r1, #16
 80074e6:	438a      	bics	r2, r1
 80074e8:	601a      	str	r2, [r3, #0]
 80074ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074ec:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80074ee:	693b      	ldr	r3, [r7, #16]
 80074f0:	f383 8810 	msr	PRIMASK, r3
}
 80074f4:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	2220      	movs	r2, #32
 80074fa:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	2200      	movs	r2, #0
 8007500:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	2200      	movs	r2, #0
 8007506:	665a      	str	r2, [r3, #100]	; 0x64
}
 8007508:	46c0      	nop			; (mov r8, r8)
 800750a:	46bd      	mov	sp, r7
 800750c:	b00e      	add	sp, #56	; 0x38
 800750e:	bd80      	pop	{r7, pc}
 8007510:	fffffedf 	.word	0xfffffedf

08007514 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007514:	b580      	push	{r7, lr}
 8007516:	b084      	sub	sp, #16
 8007518:	af00      	add	r7, sp, #0
 800751a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007520:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	225a      	movs	r2, #90	; 0x5a
 8007526:	2100      	movs	r1, #0
 8007528:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	2252      	movs	r2, #82	; 0x52
 800752e:	2100      	movs	r1, #0
 8007530:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	0018      	movs	r0, r3
 8007536:	f7ff fc2f 	bl	8006d98 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800753a:	46c0      	nop			; (mov r8, r8)
 800753c:	46bd      	mov	sp, r7
 800753e:	b004      	add	sp, #16
 8007540:	bd80      	pop	{r7, pc}

08007542 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007542:	b580      	push	{r7, lr}
 8007544:	b086      	sub	sp, #24
 8007546:	af00      	add	r7, sp, #0
 8007548:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800754a:	f3ef 8310 	mrs	r3, PRIMASK
 800754e:	60bb      	str	r3, [r7, #8]
  return(result);
 8007550:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007552:	617b      	str	r3, [r7, #20]
 8007554:	2301      	movs	r3, #1
 8007556:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	f383 8810 	msr	PRIMASK, r3
}
 800755e:	46c0      	nop			; (mov r8, r8)
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	681a      	ldr	r2, [r3, #0]
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	2140      	movs	r1, #64	; 0x40
 800756c:	438a      	bics	r2, r1
 800756e:	601a      	str	r2, [r3, #0]
 8007570:	697b      	ldr	r3, [r7, #20]
 8007572:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007574:	693b      	ldr	r3, [r7, #16]
 8007576:	f383 8810 	msr	PRIMASK, r3
}
 800757a:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	2220      	movs	r2, #32
 8007580:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	2200      	movs	r2, #0
 8007586:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	0018      	movs	r0, r3
 800758c:	f7ff fbfc 	bl	8006d88 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007590:	46c0      	nop			; (mov r8, r8)
 8007592:	46bd      	mov	sp, r7
 8007594:	b006      	add	sp, #24
 8007596:	bd80      	pop	{r7, pc}

08007598 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8007598:	b580      	push	{r7, lr}
 800759a:	b082      	sub	sp, #8
 800759c:	af00      	add	r7, sp, #0
 800759e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80075a0:	46c0      	nop			; (mov r8, r8)
 80075a2:	46bd      	mov	sp, r7
 80075a4:	b002      	add	sp, #8
 80075a6:	bd80      	pop	{r7, pc}

080075a8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 80075a8:	b580      	push	{r7, lr}
 80075aa:	b084      	sub	sp, #16
 80075ac:	af00      	add	r7, sp, #0
 80075ae:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	2244      	movs	r2, #68	; 0x44
 80075b4:	2100      	movs	r1, #0
 80075b6:	5299      	strh	r1, [r3, r2]

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80075b8:	4b05      	ldr	r3, [pc, #20]	; (80075d0 <USB_EnableGlobalInt+0x28>)
 80075ba:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	b299      	uxth	r1, r3
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	2240      	movs	r2, #64	; 0x40
 80075c4:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 80075c6:	2300      	movs	r3, #0
}
 80075c8:	0018      	movs	r0, r3
 80075ca:	46bd      	mov	sp, r7
 80075cc:	b004      	add	sp, #16
 80075ce:	bd80      	pop	{r7, pc}
 80075d0:	0000bf80 	.word	0x0000bf80

080075d4 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80075d4:	b580      	push	{r7, lr}
 80075d6:	b084      	sub	sp, #16
 80075d8:	af00      	add	r7, sp, #0
 80075da:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80075dc:	4b09      	ldr	r3, [pc, #36]	; (8007604 <USB_DisableGlobalInt+0x30>)
 80075de:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	2240      	movs	r2, #64	; 0x40
 80075e4:	5a9b      	ldrh	r3, [r3, r2]
 80075e6:	b29b      	uxth	r3, r3
 80075e8:	68fa      	ldr	r2, [r7, #12]
 80075ea:	b292      	uxth	r2, r2
 80075ec:	43d2      	mvns	r2, r2
 80075ee:	b292      	uxth	r2, r2
 80075f0:	4013      	ands	r3, r2
 80075f2:	b299      	uxth	r1, r3
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	2240      	movs	r2, #64	; 0x40
 80075f8:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 80075fa:	2300      	movs	r3, #0
}
 80075fc:	0018      	movs	r0, r3
 80075fe:	46bd      	mov	sp, r7
 8007600:	b004      	add	sp, #16
 8007602:	bd80      	pop	{r7, pc}
 8007604:	0000bf80 	.word	0x0000bf80

08007608 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8007608:	b084      	sub	sp, #16
 800760a:	b590      	push	{r4, r7, lr}
 800760c:	46c6      	mov	lr, r8
 800760e:	b500      	push	{lr}
 8007610:	b082      	sub	sp, #8
 8007612:	af00      	add	r7, sp, #0
 8007614:	6078      	str	r0, [r7, #4]
 8007616:	2004      	movs	r0, #4
 8007618:	2410      	movs	r4, #16
 800761a:	46a4      	mov	ip, r4
 800761c:	2408      	movs	r4, #8
 800761e:	46a0      	mov	r8, r4
 8007620:	44b8      	add	r8, r7
 8007622:	44c4      	add	ip, r8
 8007624:	4460      	add	r0, ip
 8007626:	6001      	str	r1, [r0, #0]
 8007628:	6042      	str	r2, [r0, #4]
 800762a:	6083      	str	r3, [r0, #8]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	2240      	movs	r2, #64	; 0x40
 8007630:	2101      	movs	r1, #1
 8007632:	5299      	strh	r1, [r3, r2]

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	2240      	movs	r2, #64	; 0x40
 8007638:	2100      	movs	r1, #0
 800763a:	5299      	strh	r1, [r3, r2]

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	2244      	movs	r2, #68	; 0x44
 8007640:	2100      	movs	r1, #0
 8007642:	5299      	strh	r1, [r3, r2]

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	2250      	movs	r2, #80	; 0x50
 8007648:	2100      	movs	r1, #0
 800764a:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 800764c:	2300      	movs	r3, #0
}
 800764e:	0018      	movs	r0, r3
 8007650:	46bd      	mov	sp, r7
 8007652:	b002      	add	sp, #8
 8007654:	bc80      	pop	{r7}
 8007656:	46b8      	mov	r8, r7
 8007658:	bc90      	pop	{r4, r7}
 800765a:	bc08      	pop	{r3}
 800765c:	b004      	add	sp, #16
 800765e:	4718      	bx	r3

08007660 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007660:	b580      	push	{r7, lr}
 8007662:	b09c      	sub	sp, #112	; 0x70
 8007664:	af00      	add	r7, sp, #0
 8007666:	6078      	str	r0, [r7, #4]
 8007668:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800766a:	236f      	movs	r3, #111	; 0x6f
 800766c:	18fb      	adds	r3, r7, r3
 800766e:	2200      	movs	r2, #0
 8007670:	701a      	strb	r2, [r3, #0]
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8007672:	687a      	ldr	r2, [r7, #4]
 8007674:	683b      	ldr	r3, [r7, #0]
 8007676:	781b      	ldrb	r3, [r3, #0]
 8007678:	009b      	lsls	r3, r3, #2
 800767a:	18d3      	adds	r3, r2, r3
 800767c:	881b      	ldrh	r3, [r3, #0]
 800767e:	b29a      	uxth	r2, r3
 8007680:	236c      	movs	r3, #108	; 0x6c
 8007682:	18fb      	adds	r3, r7, r3
 8007684:	49cf      	ldr	r1, [pc, #828]	; (80079c4 <USB_ActivateEndpoint+0x364>)
 8007686:	400a      	ands	r2, r1
 8007688:	801a      	strh	r2, [r3, #0]

  /* initialize Endpoint */
  switch (ep->type)
 800768a:	683b      	ldr	r3, [r7, #0]
 800768c:	78db      	ldrb	r3, [r3, #3]
 800768e:	2b03      	cmp	r3, #3
 8007690:	d017      	beq.n	80076c2 <USB_ActivateEndpoint+0x62>
 8007692:	dc28      	bgt.n	80076e6 <USB_ActivateEndpoint+0x86>
 8007694:	2b02      	cmp	r3, #2
 8007696:	d00e      	beq.n	80076b6 <USB_ActivateEndpoint+0x56>
 8007698:	dc25      	bgt.n	80076e6 <USB_ActivateEndpoint+0x86>
 800769a:	2b00      	cmp	r3, #0
 800769c:	d002      	beq.n	80076a4 <USB_ActivateEndpoint+0x44>
 800769e:	2b01      	cmp	r3, #1
 80076a0:	d018      	beq.n	80076d4 <USB_ActivateEndpoint+0x74>
 80076a2:	e020      	b.n	80076e6 <USB_ActivateEndpoint+0x86>
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 80076a4:	226c      	movs	r2, #108	; 0x6c
 80076a6:	18bb      	adds	r3, r7, r2
 80076a8:	18ba      	adds	r2, r7, r2
 80076aa:	8812      	ldrh	r2, [r2, #0]
 80076ac:	2180      	movs	r1, #128	; 0x80
 80076ae:	0089      	lsls	r1, r1, #2
 80076b0:	430a      	orrs	r2, r1
 80076b2:	801a      	strh	r2, [r3, #0]
      break;
 80076b4:	e01c      	b.n	80076f0 <USB_ActivateEndpoint+0x90>

    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
 80076b6:	226c      	movs	r2, #108	; 0x6c
 80076b8:	18bb      	adds	r3, r7, r2
 80076ba:	18ba      	adds	r2, r7, r2
 80076bc:	8812      	ldrh	r2, [r2, #0]
 80076be:	801a      	strh	r2, [r3, #0]
      break;
 80076c0:	e016      	b.n	80076f0 <USB_ActivateEndpoint+0x90>

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 80076c2:	226c      	movs	r2, #108	; 0x6c
 80076c4:	18bb      	adds	r3, r7, r2
 80076c6:	18ba      	adds	r2, r7, r2
 80076c8:	8812      	ldrh	r2, [r2, #0]
 80076ca:	21c0      	movs	r1, #192	; 0xc0
 80076cc:	00c9      	lsls	r1, r1, #3
 80076ce:	430a      	orrs	r2, r1
 80076d0:	801a      	strh	r2, [r3, #0]
      break;
 80076d2:	e00d      	b.n	80076f0 <USB_ActivateEndpoint+0x90>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 80076d4:	226c      	movs	r2, #108	; 0x6c
 80076d6:	18bb      	adds	r3, r7, r2
 80076d8:	18ba      	adds	r2, r7, r2
 80076da:	8812      	ldrh	r2, [r2, #0]
 80076dc:	2180      	movs	r1, #128	; 0x80
 80076de:	00c9      	lsls	r1, r1, #3
 80076e0:	430a      	orrs	r2, r1
 80076e2:	801a      	strh	r2, [r3, #0]
      break;
 80076e4:	e004      	b.n	80076f0 <USB_ActivateEndpoint+0x90>

    default:
      ret = HAL_ERROR;
 80076e6:	236f      	movs	r3, #111	; 0x6f
 80076e8:	18fb      	adds	r3, r7, r3
 80076ea:	2201      	movs	r2, #1
 80076ec:	701a      	strb	r2, [r3, #0]
      break;
 80076ee:	46c0      	nop			; (mov r8, r8)
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 80076f0:	687a      	ldr	r2, [r7, #4]
 80076f2:	683b      	ldr	r3, [r7, #0]
 80076f4:	781b      	ldrb	r3, [r3, #0]
 80076f6:	009b      	lsls	r3, r3, #2
 80076f8:	18d3      	adds	r3, r2, r3
 80076fa:	226c      	movs	r2, #108	; 0x6c
 80076fc:	18ba      	adds	r2, r7, r2
 80076fe:	8812      	ldrh	r2, [r2, #0]
 8007700:	49b1      	ldr	r1, [pc, #708]	; (80079c8 <USB_ActivateEndpoint+0x368>)
 8007702:	430a      	orrs	r2, r1
 8007704:	b292      	uxth	r2, r2
 8007706:	801a      	strh	r2, [r3, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8007708:	687a      	ldr	r2, [r7, #4]
 800770a:	683b      	ldr	r3, [r7, #0]
 800770c:	781b      	ldrb	r3, [r3, #0]
 800770e:	009b      	lsls	r3, r3, #2
 8007710:	18d3      	adds	r3, r2, r3
 8007712:	881b      	ldrh	r3, [r3, #0]
 8007714:	b29b      	uxth	r3, r3
 8007716:	b21b      	sxth	r3, r3
 8007718:	4aac      	ldr	r2, [pc, #688]	; (80079cc <USB_ActivateEndpoint+0x36c>)
 800771a:	4013      	ands	r3, r2
 800771c:	b21a      	sxth	r2, r3
 800771e:	683b      	ldr	r3, [r7, #0]
 8007720:	781b      	ldrb	r3, [r3, #0]
 8007722:	b21b      	sxth	r3, r3
 8007724:	4313      	orrs	r3, r2
 8007726:	b21a      	sxth	r2, r3
 8007728:	2166      	movs	r1, #102	; 0x66
 800772a:	187b      	adds	r3, r7, r1
 800772c:	801a      	strh	r2, [r3, #0]
 800772e:	687a      	ldr	r2, [r7, #4]
 8007730:	683b      	ldr	r3, [r7, #0]
 8007732:	781b      	ldrb	r3, [r3, #0]
 8007734:	009b      	lsls	r3, r3, #2
 8007736:	18d3      	adds	r3, r2, r3
 8007738:	187a      	adds	r2, r7, r1
 800773a:	8812      	ldrh	r2, [r2, #0]
 800773c:	49a2      	ldr	r1, [pc, #648]	; (80079c8 <USB_ActivateEndpoint+0x368>)
 800773e:	430a      	orrs	r2, r1
 8007740:	b292      	uxth	r2, r2
 8007742:	801a      	strh	r2, [r3, #0]

  if (ep->doublebuffer == 0U)
 8007744:	683b      	ldr	r3, [r7, #0]
 8007746:	7b1b      	ldrb	r3, [r3, #12]
 8007748:	2b00      	cmp	r3, #0
 800774a:	d000      	beq.n	800774e <USB_ActivateEndpoint+0xee>
 800774c:	e150      	b.n	80079f0 <USB_ActivateEndpoint+0x390>
  {
    if (ep->is_in != 0U)
 800774e:	683b      	ldr	r3, [r7, #0]
 8007750:	785b      	ldrb	r3, [r3, #1]
 8007752:	2b00      	cmp	r3, #0
 8007754:	d100      	bne.n	8007758 <USB_ActivateEndpoint+0xf8>
 8007756:	e07a      	b.n	800784e <USB_ActivateEndpoint+0x1ee>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	61bb      	str	r3, [r7, #24]
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	2250      	movs	r2, #80	; 0x50
 8007760:	5a9b      	ldrh	r3, [r3, r2]
 8007762:	b29b      	uxth	r3, r3
 8007764:	001a      	movs	r2, r3
 8007766:	69bb      	ldr	r3, [r7, #24]
 8007768:	189b      	adds	r3, r3, r2
 800776a:	61bb      	str	r3, [r7, #24]
 800776c:	683b      	ldr	r3, [r7, #0]
 800776e:	781b      	ldrb	r3, [r3, #0]
 8007770:	00da      	lsls	r2, r3, #3
 8007772:	69bb      	ldr	r3, [r7, #24]
 8007774:	18d3      	adds	r3, r2, r3
 8007776:	2280      	movs	r2, #128	; 0x80
 8007778:	00d2      	lsls	r2, r2, #3
 800777a:	4694      	mov	ip, r2
 800777c:	4463      	add	r3, ip
 800777e:	617b      	str	r3, [r7, #20]
 8007780:	683b      	ldr	r3, [r7, #0]
 8007782:	88db      	ldrh	r3, [r3, #6]
 8007784:	085b      	lsrs	r3, r3, #1
 8007786:	b29b      	uxth	r3, r3
 8007788:	18db      	adds	r3, r3, r3
 800778a:	b29a      	uxth	r2, r3
 800778c:	697b      	ldr	r3, [r7, #20]
 800778e:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007790:	687a      	ldr	r2, [r7, #4]
 8007792:	683b      	ldr	r3, [r7, #0]
 8007794:	781b      	ldrb	r3, [r3, #0]
 8007796:	009b      	lsls	r3, r3, #2
 8007798:	18d2      	adds	r2, r2, r3
 800779a:	2112      	movs	r1, #18
 800779c:	187b      	adds	r3, r7, r1
 800779e:	8812      	ldrh	r2, [r2, #0]
 80077a0:	801a      	strh	r2, [r3, #0]
 80077a2:	187b      	adds	r3, r7, r1
 80077a4:	881b      	ldrh	r3, [r3, #0]
 80077a6:	2240      	movs	r2, #64	; 0x40
 80077a8:	4013      	ands	r3, r2
 80077aa:	d016      	beq.n	80077da <USB_ActivateEndpoint+0x17a>
 80077ac:	687a      	ldr	r2, [r7, #4]
 80077ae:	683b      	ldr	r3, [r7, #0]
 80077b0:	781b      	ldrb	r3, [r3, #0]
 80077b2:	009b      	lsls	r3, r3, #2
 80077b4:	18d3      	adds	r3, r2, r3
 80077b6:	881b      	ldrh	r3, [r3, #0]
 80077b8:	b29a      	uxth	r2, r3
 80077ba:	2010      	movs	r0, #16
 80077bc:	183b      	adds	r3, r7, r0
 80077be:	4983      	ldr	r1, [pc, #524]	; (80079cc <USB_ActivateEndpoint+0x36c>)
 80077c0:	400a      	ands	r2, r1
 80077c2:	801a      	strh	r2, [r3, #0]
 80077c4:	687a      	ldr	r2, [r7, #4]
 80077c6:	683b      	ldr	r3, [r7, #0]
 80077c8:	781b      	ldrb	r3, [r3, #0]
 80077ca:	009b      	lsls	r3, r3, #2
 80077cc:	18d3      	adds	r3, r2, r3
 80077ce:	183a      	adds	r2, r7, r0
 80077d0:	8812      	ldrh	r2, [r2, #0]
 80077d2:	497f      	ldr	r1, [pc, #508]	; (80079d0 <USB_ActivateEndpoint+0x370>)
 80077d4:	430a      	orrs	r2, r1
 80077d6:	b292      	uxth	r2, r2
 80077d8:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 80077da:	683b      	ldr	r3, [r7, #0]
 80077dc:	78db      	ldrb	r3, [r3, #3]
 80077de:	2b01      	cmp	r3, #1
 80077e0:	d01d      	beq.n	800781e <USB_ActivateEndpoint+0x1be>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80077e2:	687a      	ldr	r2, [r7, #4]
 80077e4:	683b      	ldr	r3, [r7, #0]
 80077e6:	781b      	ldrb	r3, [r3, #0]
 80077e8:	009b      	lsls	r3, r3, #2
 80077ea:	18d3      	adds	r3, r2, r3
 80077ec:	881b      	ldrh	r3, [r3, #0]
 80077ee:	b29a      	uxth	r2, r3
 80077f0:	200c      	movs	r0, #12
 80077f2:	183b      	adds	r3, r7, r0
 80077f4:	4977      	ldr	r1, [pc, #476]	; (80079d4 <USB_ActivateEndpoint+0x374>)
 80077f6:	400a      	ands	r2, r1
 80077f8:	801a      	strh	r2, [r3, #0]
 80077fa:	183b      	adds	r3, r7, r0
 80077fc:	183a      	adds	r2, r7, r0
 80077fe:	8812      	ldrh	r2, [r2, #0]
 8007800:	2120      	movs	r1, #32
 8007802:	404a      	eors	r2, r1
 8007804:	801a      	strh	r2, [r3, #0]
 8007806:	687a      	ldr	r2, [r7, #4]
 8007808:	683b      	ldr	r3, [r7, #0]
 800780a:	781b      	ldrb	r3, [r3, #0]
 800780c:	009b      	lsls	r3, r3, #2
 800780e:	18d3      	adds	r3, r2, r3
 8007810:	183a      	adds	r2, r7, r0
 8007812:	8812      	ldrh	r2, [r2, #0]
 8007814:	496c      	ldr	r1, [pc, #432]	; (80079c8 <USB_ActivateEndpoint+0x368>)
 8007816:	430a      	orrs	r2, r1
 8007818:	b292      	uxth	r2, r2
 800781a:	801a      	strh	r2, [r3, #0]
 800781c:	e27a      	b.n	8007d14 <USB_ActivateEndpoint+0x6b4>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800781e:	687a      	ldr	r2, [r7, #4]
 8007820:	683b      	ldr	r3, [r7, #0]
 8007822:	781b      	ldrb	r3, [r3, #0]
 8007824:	009b      	lsls	r3, r3, #2
 8007826:	18d3      	adds	r3, r2, r3
 8007828:	881b      	ldrh	r3, [r3, #0]
 800782a:	b29a      	uxth	r2, r3
 800782c:	200e      	movs	r0, #14
 800782e:	183b      	adds	r3, r7, r0
 8007830:	4968      	ldr	r1, [pc, #416]	; (80079d4 <USB_ActivateEndpoint+0x374>)
 8007832:	400a      	ands	r2, r1
 8007834:	801a      	strh	r2, [r3, #0]
 8007836:	687a      	ldr	r2, [r7, #4]
 8007838:	683b      	ldr	r3, [r7, #0]
 800783a:	781b      	ldrb	r3, [r3, #0]
 800783c:	009b      	lsls	r3, r3, #2
 800783e:	18d3      	adds	r3, r2, r3
 8007840:	183a      	adds	r2, r7, r0
 8007842:	8812      	ldrh	r2, [r2, #0]
 8007844:	4960      	ldr	r1, [pc, #384]	; (80079c8 <USB_ActivateEndpoint+0x368>)
 8007846:	430a      	orrs	r2, r1
 8007848:	b292      	uxth	r2, r2
 800784a:	801a      	strh	r2, [r3, #0]
 800784c:	e262      	b.n	8007d14 <USB_ActivateEndpoint+0x6b4>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	633b      	str	r3, [r7, #48]	; 0x30
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	2250      	movs	r2, #80	; 0x50
 8007856:	5a9b      	ldrh	r3, [r3, r2]
 8007858:	b29b      	uxth	r3, r3
 800785a:	001a      	movs	r2, r3
 800785c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800785e:	189b      	adds	r3, r3, r2
 8007860:	633b      	str	r3, [r7, #48]	; 0x30
 8007862:	683b      	ldr	r3, [r7, #0]
 8007864:	781b      	ldrb	r3, [r3, #0]
 8007866:	00da      	lsls	r2, r3, #3
 8007868:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800786a:	18d3      	adds	r3, r2, r3
 800786c:	4a5a      	ldr	r2, [pc, #360]	; (80079d8 <USB_ActivateEndpoint+0x378>)
 800786e:	4694      	mov	ip, r2
 8007870:	4463      	add	r3, ip
 8007872:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007874:	683b      	ldr	r3, [r7, #0]
 8007876:	88db      	ldrh	r3, [r3, #6]
 8007878:	085b      	lsrs	r3, r3, #1
 800787a:	b29b      	uxth	r3, r3
 800787c:	18db      	adds	r3, r3, r3
 800787e:	b29a      	uxth	r2, r3
 8007880:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007882:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	62bb      	str	r3, [r7, #40]	; 0x28
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	2250      	movs	r2, #80	; 0x50
 800788c:	5a9b      	ldrh	r3, [r3, r2]
 800788e:	b29b      	uxth	r3, r3
 8007890:	001a      	movs	r2, r3
 8007892:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007894:	189b      	adds	r3, r3, r2
 8007896:	62bb      	str	r3, [r7, #40]	; 0x28
 8007898:	683b      	ldr	r3, [r7, #0]
 800789a:	781b      	ldrb	r3, [r3, #0]
 800789c:	00da      	lsls	r2, r3, #3
 800789e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078a0:	18d3      	adds	r3, r2, r3
 80078a2:	4a4e      	ldr	r2, [pc, #312]	; (80079dc <USB_ActivateEndpoint+0x37c>)
 80078a4:	4694      	mov	ip, r2
 80078a6:	4463      	add	r3, ip
 80078a8:	627b      	str	r3, [r7, #36]	; 0x24
 80078aa:	683b      	ldr	r3, [r7, #0]
 80078ac:	691b      	ldr	r3, [r3, #16]
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	d110      	bne.n	80078d4 <USB_ActivateEndpoint+0x274>
 80078b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078b4:	881b      	ldrh	r3, [r3, #0]
 80078b6:	b29b      	uxth	r3, r3
 80078b8:	4a49      	ldr	r2, [pc, #292]	; (80079e0 <USB_ActivateEndpoint+0x380>)
 80078ba:	4013      	ands	r3, r2
 80078bc:	b29a      	uxth	r2, r3
 80078be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078c0:	801a      	strh	r2, [r3, #0]
 80078c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078c4:	881b      	ldrh	r3, [r3, #0]
 80078c6:	b29b      	uxth	r3, r3
 80078c8:	4a46      	ldr	r2, [pc, #280]	; (80079e4 <USB_ActivateEndpoint+0x384>)
 80078ca:	4313      	orrs	r3, r2
 80078cc:	b29a      	uxth	r2, r3
 80078ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078d0:	801a      	strh	r2, [r3, #0]
 80078d2:	e02b      	b.n	800792c <USB_ActivateEndpoint+0x2cc>
 80078d4:	683b      	ldr	r3, [r7, #0]
 80078d6:	691b      	ldr	r3, [r3, #16]
 80078d8:	2b3e      	cmp	r3, #62	; 0x3e
 80078da:	d812      	bhi.n	8007902 <USB_ActivateEndpoint+0x2a2>
 80078dc:	683b      	ldr	r3, [r7, #0]
 80078de:	691b      	ldr	r3, [r3, #16]
 80078e0:	085b      	lsrs	r3, r3, #1
 80078e2:	66bb      	str	r3, [r7, #104]	; 0x68
 80078e4:	683b      	ldr	r3, [r7, #0]
 80078e6:	691b      	ldr	r3, [r3, #16]
 80078e8:	2201      	movs	r2, #1
 80078ea:	4013      	ands	r3, r2
 80078ec:	d002      	beq.n	80078f4 <USB_ActivateEndpoint+0x294>
 80078ee:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80078f0:	3301      	adds	r3, #1
 80078f2:	66bb      	str	r3, [r7, #104]	; 0x68
 80078f4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80078f6:	b29b      	uxth	r3, r3
 80078f8:	029b      	lsls	r3, r3, #10
 80078fa:	b29a      	uxth	r2, r3
 80078fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078fe:	801a      	strh	r2, [r3, #0]
 8007900:	e014      	b.n	800792c <USB_ActivateEndpoint+0x2cc>
 8007902:	683b      	ldr	r3, [r7, #0]
 8007904:	691b      	ldr	r3, [r3, #16]
 8007906:	095b      	lsrs	r3, r3, #5
 8007908:	66bb      	str	r3, [r7, #104]	; 0x68
 800790a:	683b      	ldr	r3, [r7, #0]
 800790c:	691b      	ldr	r3, [r3, #16]
 800790e:	221f      	movs	r2, #31
 8007910:	4013      	ands	r3, r2
 8007912:	d102      	bne.n	800791a <USB_ActivateEndpoint+0x2ba>
 8007914:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007916:	3b01      	subs	r3, #1
 8007918:	66bb      	str	r3, [r7, #104]	; 0x68
 800791a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800791c:	b29b      	uxth	r3, r3
 800791e:	029b      	lsls	r3, r3, #10
 8007920:	b29b      	uxth	r3, r3
 8007922:	4a30      	ldr	r2, [pc, #192]	; (80079e4 <USB_ActivateEndpoint+0x384>)
 8007924:	4313      	orrs	r3, r2
 8007926:	b29a      	uxth	r2, r3
 8007928:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800792a:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800792c:	687a      	ldr	r2, [r7, #4]
 800792e:	683b      	ldr	r3, [r7, #0]
 8007930:	781b      	ldrb	r3, [r3, #0]
 8007932:	009b      	lsls	r3, r3, #2
 8007934:	18d2      	adds	r2, r2, r3
 8007936:	2122      	movs	r1, #34	; 0x22
 8007938:	187b      	adds	r3, r7, r1
 800793a:	8812      	ldrh	r2, [r2, #0]
 800793c:	801a      	strh	r2, [r3, #0]
 800793e:	187b      	adds	r3, r7, r1
 8007940:	881a      	ldrh	r2, [r3, #0]
 8007942:	2380      	movs	r3, #128	; 0x80
 8007944:	01db      	lsls	r3, r3, #7
 8007946:	4013      	ands	r3, r2
 8007948:	d016      	beq.n	8007978 <USB_ActivateEndpoint+0x318>
 800794a:	687a      	ldr	r2, [r7, #4]
 800794c:	683b      	ldr	r3, [r7, #0]
 800794e:	781b      	ldrb	r3, [r3, #0]
 8007950:	009b      	lsls	r3, r3, #2
 8007952:	18d3      	adds	r3, r2, r3
 8007954:	881b      	ldrh	r3, [r3, #0]
 8007956:	b29a      	uxth	r2, r3
 8007958:	2020      	movs	r0, #32
 800795a:	183b      	adds	r3, r7, r0
 800795c:	491b      	ldr	r1, [pc, #108]	; (80079cc <USB_ActivateEndpoint+0x36c>)
 800795e:	400a      	ands	r2, r1
 8007960:	801a      	strh	r2, [r3, #0]
 8007962:	687a      	ldr	r2, [r7, #4]
 8007964:	683b      	ldr	r3, [r7, #0]
 8007966:	781b      	ldrb	r3, [r3, #0]
 8007968:	009b      	lsls	r3, r3, #2
 800796a:	18d3      	adds	r3, r2, r3
 800796c:	183a      	adds	r2, r7, r0
 800796e:	8812      	ldrh	r2, [r2, #0]
 8007970:	491d      	ldr	r1, [pc, #116]	; (80079e8 <USB_ActivateEndpoint+0x388>)
 8007972:	430a      	orrs	r2, r1
 8007974:	b292      	uxth	r2, r2
 8007976:	801a      	strh	r2, [r3, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007978:	687a      	ldr	r2, [r7, #4]
 800797a:	683b      	ldr	r3, [r7, #0]
 800797c:	781b      	ldrb	r3, [r3, #0]
 800797e:	009b      	lsls	r3, r3, #2
 8007980:	18d3      	adds	r3, r2, r3
 8007982:	881b      	ldrh	r3, [r3, #0]
 8007984:	b29a      	uxth	r2, r3
 8007986:	201e      	movs	r0, #30
 8007988:	183b      	adds	r3, r7, r0
 800798a:	4918      	ldr	r1, [pc, #96]	; (80079ec <USB_ActivateEndpoint+0x38c>)
 800798c:	400a      	ands	r2, r1
 800798e:	801a      	strh	r2, [r3, #0]
 8007990:	183b      	adds	r3, r7, r0
 8007992:	183a      	adds	r2, r7, r0
 8007994:	8812      	ldrh	r2, [r2, #0]
 8007996:	2180      	movs	r1, #128	; 0x80
 8007998:	0149      	lsls	r1, r1, #5
 800799a:	404a      	eors	r2, r1
 800799c:	801a      	strh	r2, [r3, #0]
 800799e:	183b      	adds	r3, r7, r0
 80079a0:	183a      	adds	r2, r7, r0
 80079a2:	8812      	ldrh	r2, [r2, #0]
 80079a4:	2180      	movs	r1, #128	; 0x80
 80079a6:	0189      	lsls	r1, r1, #6
 80079a8:	404a      	eors	r2, r1
 80079aa:	801a      	strh	r2, [r3, #0]
 80079ac:	687a      	ldr	r2, [r7, #4]
 80079ae:	683b      	ldr	r3, [r7, #0]
 80079b0:	781b      	ldrb	r3, [r3, #0]
 80079b2:	009b      	lsls	r3, r3, #2
 80079b4:	18d3      	adds	r3, r2, r3
 80079b6:	183a      	adds	r2, r7, r0
 80079b8:	8812      	ldrh	r2, [r2, #0]
 80079ba:	4903      	ldr	r1, [pc, #12]	; (80079c8 <USB_ActivateEndpoint+0x368>)
 80079bc:	430a      	orrs	r2, r1
 80079be:	b292      	uxth	r2, r2
 80079c0:	801a      	strh	r2, [r3, #0]
 80079c2:	e1a7      	b.n	8007d14 <USB_ActivateEndpoint+0x6b4>
 80079c4:	ffff898f 	.word	0xffff898f
 80079c8:	ffff8080 	.word	0xffff8080
 80079cc:	ffff8f8f 	.word	0xffff8f8f
 80079d0:	ffff80c0 	.word	0xffff80c0
 80079d4:	ffff8fbf 	.word	0xffff8fbf
 80079d8:	00000404 	.word	0x00000404
 80079dc:	00000406 	.word	0x00000406
 80079e0:	ffff83ff 	.word	0xffff83ff
 80079e4:	ffff8000 	.word	0xffff8000
 80079e8:	ffffc080 	.word	0xffffc080
 80079ec:	ffffbf8f 	.word	0xffffbf8f
    }
  }
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 80079f0:	683b      	ldr	r3, [r7, #0]
 80079f2:	78db      	ldrb	r3, [r3, #3]
 80079f4:	2b02      	cmp	r3, #2
 80079f6:	d117      	bne.n	8007a28 <USB_ActivateEndpoint+0x3c8>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80079f8:	687a      	ldr	r2, [r7, #4]
 80079fa:	683b      	ldr	r3, [r7, #0]
 80079fc:	781b      	ldrb	r3, [r3, #0]
 80079fe:	009b      	lsls	r3, r3, #2
 8007a00:	18d3      	adds	r3, r2, r3
 8007a02:	881b      	ldrh	r3, [r3, #0]
 8007a04:	b29a      	uxth	r2, r3
 8007a06:	2062      	movs	r0, #98	; 0x62
 8007a08:	183b      	adds	r3, r7, r0
 8007a0a:	49c6      	ldr	r1, [pc, #792]	; (8007d24 <USB_ActivateEndpoint+0x6c4>)
 8007a0c:	400a      	ands	r2, r1
 8007a0e:	801a      	strh	r2, [r3, #0]
 8007a10:	687a      	ldr	r2, [r7, #4]
 8007a12:	683b      	ldr	r3, [r7, #0]
 8007a14:	781b      	ldrb	r3, [r3, #0]
 8007a16:	009b      	lsls	r3, r3, #2
 8007a18:	18d3      	adds	r3, r2, r3
 8007a1a:	183a      	adds	r2, r7, r0
 8007a1c:	8812      	ldrh	r2, [r2, #0]
 8007a1e:	49c2      	ldr	r1, [pc, #776]	; (8007d28 <USB_ActivateEndpoint+0x6c8>)
 8007a20:	430a      	orrs	r2, r1
 8007a22:	b292      	uxth	r2, r2
 8007a24:	801a      	strh	r2, [r3, #0]
 8007a26:	e016      	b.n	8007a56 <USB_ActivateEndpoint+0x3f6>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8007a28:	687a      	ldr	r2, [r7, #4]
 8007a2a:	683b      	ldr	r3, [r7, #0]
 8007a2c:	781b      	ldrb	r3, [r3, #0]
 8007a2e:	009b      	lsls	r3, r3, #2
 8007a30:	18d3      	adds	r3, r2, r3
 8007a32:	881b      	ldrh	r3, [r3, #0]
 8007a34:	b29a      	uxth	r2, r3
 8007a36:	2064      	movs	r0, #100	; 0x64
 8007a38:	183b      	adds	r3, r7, r0
 8007a3a:	49bc      	ldr	r1, [pc, #752]	; (8007d2c <USB_ActivateEndpoint+0x6cc>)
 8007a3c:	400a      	ands	r2, r1
 8007a3e:	801a      	strh	r2, [r3, #0]
 8007a40:	687a      	ldr	r2, [r7, #4]
 8007a42:	683b      	ldr	r3, [r7, #0]
 8007a44:	781b      	ldrb	r3, [r3, #0]
 8007a46:	009b      	lsls	r3, r3, #2
 8007a48:	18d3      	adds	r3, r2, r3
 8007a4a:	183a      	adds	r2, r7, r0
 8007a4c:	8812      	ldrh	r2, [r2, #0]
 8007a4e:	49b8      	ldr	r1, [pc, #736]	; (8007d30 <USB_ActivateEndpoint+0x6d0>)
 8007a50:	430a      	orrs	r2, r1
 8007a52:	b292      	uxth	r2, r2
 8007a54:	801a      	strh	r2, [r3, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	2250      	movs	r2, #80	; 0x50
 8007a5e:	5a9b      	ldrh	r3, [r3, r2]
 8007a60:	b29b      	uxth	r3, r3
 8007a62:	001a      	movs	r2, r3
 8007a64:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007a66:	189b      	adds	r3, r3, r2
 8007a68:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007a6a:	683b      	ldr	r3, [r7, #0]
 8007a6c:	781b      	ldrb	r3, [r3, #0]
 8007a6e:	00da      	lsls	r2, r3, #3
 8007a70:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007a72:	18d3      	adds	r3, r2, r3
 8007a74:	2280      	movs	r2, #128	; 0x80
 8007a76:	00d2      	lsls	r2, r2, #3
 8007a78:	4694      	mov	ip, r2
 8007a7a:	4463      	add	r3, ip
 8007a7c:	65bb      	str	r3, [r7, #88]	; 0x58
 8007a7e:	683b      	ldr	r3, [r7, #0]
 8007a80:	891b      	ldrh	r3, [r3, #8]
 8007a82:	085b      	lsrs	r3, r3, #1
 8007a84:	b29b      	uxth	r3, r3
 8007a86:	18db      	adds	r3, r3, r3
 8007a88:	b29a      	uxth	r2, r3
 8007a8a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007a8c:	801a      	strh	r2, [r3, #0]
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	657b      	str	r3, [r7, #84]	; 0x54
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	2250      	movs	r2, #80	; 0x50
 8007a96:	5a9b      	ldrh	r3, [r3, r2]
 8007a98:	b29b      	uxth	r3, r3
 8007a9a:	001a      	movs	r2, r3
 8007a9c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007a9e:	189b      	adds	r3, r3, r2
 8007aa0:	657b      	str	r3, [r7, #84]	; 0x54
 8007aa2:	683b      	ldr	r3, [r7, #0]
 8007aa4:	781b      	ldrb	r3, [r3, #0]
 8007aa6:	00da      	lsls	r2, r3, #3
 8007aa8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007aaa:	18d3      	adds	r3, r2, r3
 8007aac:	4aa1      	ldr	r2, [pc, #644]	; (8007d34 <USB_ActivateEndpoint+0x6d4>)
 8007aae:	4694      	mov	ip, r2
 8007ab0:	4463      	add	r3, ip
 8007ab2:	653b      	str	r3, [r7, #80]	; 0x50
 8007ab4:	683b      	ldr	r3, [r7, #0]
 8007ab6:	895b      	ldrh	r3, [r3, #10]
 8007ab8:	085b      	lsrs	r3, r3, #1
 8007aba:	b29b      	uxth	r3, r3
 8007abc:	18db      	adds	r3, r3, r3
 8007abe:	b29a      	uxth	r2, r3
 8007ac0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007ac2:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8007ac4:	683b      	ldr	r3, [r7, #0]
 8007ac6:	785b      	ldrb	r3, [r3, #1]
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	d000      	beq.n	8007ace <USB_ActivateEndpoint+0x46e>
 8007acc:	e087      	b.n	8007bde <USB_ActivateEndpoint+0x57e>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007ace:	687a      	ldr	r2, [r7, #4]
 8007ad0:	683b      	ldr	r3, [r7, #0]
 8007ad2:	781b      	ldrb	r3, [r3, #0]
 8007ad4:	009b      	lsls	r3, r3, #2
 8007ad6:	18d2      	adds	r2, r2, r3
 8007ad8:	2140      	movs	r1, #64	; 0x40
 8007ada:	187b      	adds	r3, r7, r1
 8007adc:	8812      	ldrh	r2, [r2, #0]
 8007ade:	801a      	strh	r2, [r3, #0]
 8007ae0:	187b      	adds	r3, r7, r1
 8007ae2:	881a      	ldrh	r2, [r3, #0]
 8007ae4:	2380      	movs	r3, #128	; 0x80
 8007ae6:	01db      	lsls	r3, r3, #7
 8007ae8:	4013      	ands	r3, r2
 8007aea:	d016      	beq.n	8007b1a <USB_ActivateEndpoint+0x4ba>
 8007aec:	687a      	ldr	r2, [r7, #4]
 8007aee:	683b      	ldr	r3, [r7, #0]
 8007af0:	781b      	ldrb	r3, [r3, #0]
 8007af2:	009b      	lsls	r3, r3, #2
 8007af4:	18d3      	adds	r3, r2, r3
 8007af6:	881b      	ldrh	r3, [r3, #0]
 8007af8:	b29a      	uxth	r2, r3
 8007afa:	203e      	movs	r0, #62	; 0x3e
 8007afc:	183b      	adds	r3, r7, r0
 8007afe:	4989      	ldr	r1, [pc, #548]	; (8007d24 <USB_ActivateEndpoint+0x6c4>)
 8007b00:	400a      	ands	r2, r1
 8007b02:	801a      	strh	r2, [r3, #0]
 8007b04:	687a      	ldr	r2, [r7, #4]
 8007b06:	683b      	ldr	r3, [r7, #0]
 8007b08:	781b      	ldrb	r3, [r3, #0]
 8007b0a:	009b      	lsls	r3, r3, #2
 8007b0c:	18d3      	adds	r3, r2, r3
 8007b0e:	183a      	adds	r2, r7, r0
 8007b10:	8812      	ldrh	r2, [r2, #0]
 8007b12:	4989      	ldr	r1, [pc, #548]	; (8007d38 <USB_ActivateEndpoint+0x6d8>)
 8007b14:	430a      	orrs	r2, r1
 8007b16:	b292      	uxth	r2, r2
 8007b18:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007b1a:	687a      	ldr	r2, [r7, #4]
 8007b1c:	683b      	ldr	r3, [r7, #0]
 8007b1e:	781b      	ldrb	r3, [r3, #0]
 8007b20:	009b      	lsls	r3, r3, #2
 8007b22:	18d2      	adds	r2, r2, r3
 8007b24:	213c      	movs	r1, #60	; 0x3c
 8007b26:	187b      	adds	r3, r7, r1
 8007b28:	8812      	ldrh	r2, [r2, #0]
 8007b2a:	801a      	strh	r2, [r3, #0]
 8007b2c:	187b      	adds	r3, r7, r1
 8007b2e:	881b      	ldrh	r3, [r3, #0]
 8007b30:	2240      	movs	r2, #64	; 0x40
 8007b32:	4013      	ands	r3, r2
 8007b34:	d016      	beq.n	8007b64 <USB_ActivateEndpoint+0x504>
 8007b36:	687a      	ldr	r2, [r7, #4]
 8007b38:	683b      	ldr	r3, [r7, #0]
 8007b3a:	781b      	ldrb	r3, [r3, #0]
 8007b3c:	009b      	lsls	r3, r3, #2
 8007b3e:	18d3      	adds	r3, r2, r3
 8007b40:	881b      	ldrh	r3, [r3, #0]
 8007b42:	b29a      	uxth	r2, r3
 8007b44:	203a      	movs	r0, #58	; 0x3a
 8007b46:	183b      	adds	r3, r7, r0
 8007b48:	4976      	ldr	r1, [pc, #472]	; (8007d24 <USB_ActivateEndpoint+0x6c4>)
 8007b4a:	400a      	ands	r2, r1
 8007b4c:	801a      	strh	r2, [r3, #0]
 8007b4e:	687a      	ldr	r2, [r7, #4]
 8007b50:	683b      	ldr	r3, [r7, #0]
 8007b52:	781b      	ldrb	r3, [r3, #0]
 8007b54:	009b      	lsls	r3, r3, #2
 8007b56:	18d3      	adds	r3, r2, r3
 8007b58:	183a      	adds	r2, r7, r0
 8007b5a:	8812      	ldrh	r2, [r2, #0]
 8007b5c:	4977      	ldr	r1, [pc, #476]	; (8007d3c <USB_ActivateEndpoint+0x6dc>)
 8007b5e:	430a      	orrs	r2, r1
 8007b60:	b292      	uxth	r2, r2
 8007b62:	801a      	strh	r2, [r3, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007b64:	687a      	ldr	r2, [r7, #4]
 8007b66:	683b      	ldr	r3, [r7, #0]
 8007b68:	781b      	ldrb	r3, [r3, #0]
 8007b6a:	009b      	lsls	r3, r3, #2
 8007b6c:	18d3      	adds	r3, r2, r3
 8007b6e:	881b      	ldrh	r3, [r3, #0]
 8007b70:	b29a      	uxth	r2, r3
 8007b72:	2038      	movs	r0, #56	; 0x38
 8007b74:	183b      	adds	r3, r7, r0
 8007b76:	4972      	ldr	r1, [pc, #456]	; (8007d40 <USB_ActivateEndpoint+0x6e0>)
 8007b78:	400a      	ands	r2, r1
 8007b7a:	801a      	strh	r2, [r3, #0]
 8007b7c:	183b      	adds	r3, r7, r0
 8007b7e:	183a      	adds	r2, r7, r0
 8007b80:	8812      	ldrh	r2, [r2, #0]
 8007b82:	2180      	movs	r1, #128	; 0x80
 8007b84:	0149      	lsls	r1, r1, #5
 8007b86:	404a      	eors	r2, r1
 8007b88:	801a      	strh	r2, [r3, #0]
 8007b8a:	183b      	adds	r3, r7, r0
 8007b8c:	183a      	adds	r2, r7, r0
 8007b8e:	8812      	ldrh	r2, [r2, #0]
 8007b90:	2180      	movs	r1, #128	; 0x80
 8007b92:	0189      	lsls	r1, r1, #6
 8007b94:	404a      	eors	r2, r1
 8007b96:	801a      	strh	r2, [r3, #0]
 8007b98:	687a      	ldr	r2, [r7, #4]
 8007b9a:	683b      	ldr	r3, [r7, #0]
 8007b9c:	781b      	ldrb	r3, [r3, #0]
 8007b9e:	009b      	lsls	r3, r3, #2
 8007ba0:	18d3      	adds	r3, r2, r3
 8007ba2:	183a      	adds	r2, r7, r0
 8007ba4:	8812      	ldrh	r2, [r2, #0]
 8007ba6:	4962      	ldr	r1, [pc, #392]	; (8007d30 <USB_ActivateEndpoint+0x6d0>)
 8007ba8:	430a      	orrs	r2, r1
 8007baa:	b292      	uxth	r2, r2
 8007bac:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007bae:	687a      	ldr	r2, [r7, #4]
 8007bb0:	683b      	ldr	r3, [r7, #0]
 8007bb2:	781b      	ldrb	r3, [r3, #0]
 8007bb4:	009b      	lsls	r3, r3, #2
 8007bb6:	18d3      	adds	r3, r2, r3
 8007bb8:	881b      	ldrh	r3, [r3, #0]
 8007bba:	b29a      	uxth	r2, r3
 8007bbc:	2036      	movs	r0, #54	; 0x36
 8007bbe:	183b      	adds	r3, r7, r0
 8007bc0:	4960      	ldr	r1, [pc, #384]	; (8007d44 <USB_ActivateEndpoint+0x6e4>)
 8007bc2:	400a      	ands	r2, r1
 8007bc4:	801a      	strh	r2, [r3, #0]
 8007bc6:	687a      	ldr	r2, [r7, #4]
 8007bc8:	683b      	ldr	r3, [r7, #0]
 8007bca:	781b      	ldrb	r3, [r3, #0]
 8007bcc:	009b      	lsls	r3, r3, #2
 8007bce:	18d3      	adds	r3, r2, r3
 8007bd0:	183a      	adds	r2, r7, r0
 8007bd2:	8812      	ldrh	r2, [r2, #0]
 8007bd4:	4956      	ldr	r1, [pc, #344]	; (8007d30 <USB_ActivateEndpoint+0x6d0>)
 8007bd6:	430a      	orrs	r2, r1
 8007bd8:	b292      	uxth	r2, r2
 8007bda:	801a      	strh	r2, [r3, #0]
 8007bdc:	e09a      	b.n	8007d14 <USB_ActivateEndpoint+0x6b4>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007bde:	687a      	ldr	r2, [r7, #4]
 8007be0:	683b      	ldr	r3, [r7, #0]
 8007be2:	781b      	ldrb	r3, [r3, #0]
 8007be4:	009b      	lsls	r3, r3, #2
 8007be6:	18d2      	adds	r2, r2, r3
 8007be8:	214e      	movs	r1, #78	; 0x4e
 8007bea:	187b      	adds	r3, r7, r1
 8007bec:	8812      	ldrh	r2, [r2, #0]
 8007bee:	801a      	strh	r2, [r3, #0]
 8007bf0:	187b      	adds	r3, r7, r1
 8007bf2:	881a      	ldrh	r2, [r3, #0]
 8007bf4:	2380      	movs	r3, #128	; 0x80
 8007bf6:	01db      	lsls	r3, r3, #7
 8007bf8:	4013      	ands	r3, r2
 8007bfa:	d016      	beq.n	8007c2a <USB_ActivateEndpoint+0x5ca>
 8007bfc:	687a      	ldr	r2, [r7, #4]
 8007bfe:	683b      	ldr	r3, [r7, #0]
 8007c00:	781b      	ldrb	r3, [r3, #0]
 8007c02:	009b      	lsls	r3, r3, #2
 8007c04:	18d3      	adds	r3, r2, r3
 8007c06:	881b      	ldrh	r3, [r3, #0]
 8007c08:	b29a      	uxth	r2, r3
 8007c0a:	204c      	movs	r0, #76	; 0x4c
 8007c0c:	183b      	adds	r3, r7, r0
 8007c0e:	4945      	ldr	r1, [pc, #276]	; (8007d24 <USB_ActivateEndpoint+0x6c4>)
 8007c10:	400a      	ands	r2, r1
 8007c12:	801a      	strh	r2, [r3, #0]
 8007c14:	687a      	ldr	r2, [r7, #4]
 8007c16:	683b      	ldr	r3, [r7, #0]
 8007c18:	781b      	ldrb	r3, [r3, #0]
 8007c1a:	009b      	lsls	r3, r3, #2
 8007c1c:	18d3      	adds	r3, r2, r3
 8007c1e:	183a      	adds	r2, r7, r0
 8007c20:	8812      	ldrh	r2, [r2, #0]
 8007c22:	4945      	ldr	r1, [pc, #276]	; (8007d38 <USB_ActivateEndpoint+0x6d8>)
 8007c24:	430a      	orrs	r2, r1
 8007c26:	b292      	uxth	r2, r2
 8007c28:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007c2a:	687a      	ldr	r2, [r7, #4]
 8007c2c:	683b      	ldr	r3, [r7, #0]
 8007c2e:	781b      	ldrb	r3, [r3, #0]
 8007c30:	009b      	lsls	r3, r3, #2
 8007c32:	18d2      	adds	r2, r2, r3
 8007c34:	214a      	movs	r1, #74	; 0x4a
 8007c36:	187b      	adds	r3, r7, r1
 8007c38:	8812      	ldrh	r2, [r2, #0]
 8007c3a:	801a      	strh	r2, [r3, #0]
 8007c3c:	187b      	adds	r3, r7, r1
 8007c3e:	881b      	ldrh	r3, [r3, #0]
 8007c40:	2240      	movs	r2, #64	; 0x40
 8007c42:	4013      	ands	r3, r2
 8007c44:	d016      	beq.n	8007c74 <USB_ActivateEndpoint+0x614>
 8007c46:	687a      	ldr	r2, [r7, #4]
 8007c48:	683b      	ldr	r3, [r7, #0]
 8007c4a:	781b      	ldrb	r3, [r3, #0]
 8007c4c:	009b      	lsls	r3, r3, #2
 8007c4e:	18d3      	adds	r3, r2, r3
 8007c50:	881b      	ldrh	r3, [r3, #0]
 8007c52:	b29a      	uxth	r2, r3
 8007c54:	2048      	movs	r0, #72	; 0x48
 8007c56:	183b      	adds	r3, r7, r0
 8007c58:	4932      	ldr	r1, [pc, #200]	; (8007d24 <USB_ActivateEndpoint+0x6c4>)
 8007c5a:	400a      	ands	r2, r1
 8007c5c:	801a      	strh	r2, [r3, #0]
 8007c5e:	687a      	ldr	r2, [r7, #4]
 8007c60:	683b      	ldr	r3, [r7, #0]
 8007c62:	781b      	ldrb	r3, [r3, #0]
 8007c64:	009b      	lsls	r3, r3, #2
 8007c66:	18d3      	adds	r3, r2, r3
 8007c68:	183a      	adds	r2, r7, r0
 8007c6a:	8812      	ldrh	r2, [r2, #0]
 8007c6c:	4933      	ldr	r1, [pc, #204]	; (8007d3c <USB_ActivateEndpoint+0x6dc>)
 8007c6e:	430a      	orrs	r2, r1
 8007c70:	b292      	uxth	r2, r2
 8007c72:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007c74:	683b      	ldr	r3, [r7, #0]
 8007c76:	78db      	ldrb	r3, [r3, #3]
 8007c78:	2b01      	cmp	r3, #1
 8007c7a:	d01d      	beq.n	8007cb8 <USB_ActivateEndpoint+0x658>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8007c7c:	687a      	ldr	r2, [r7, #4]
 8007c7e:	683b      	ldr	r3, [r7, #0]
 8007c80:	781b      	ldrb	r3, [r3, #0]
 8007c82:	009b      	lsls	r3, r3, #2
 8007c84:	18d3      	adds	r3, r2, r3
 8007c86:	881b      	ldrh	r3, [r3, #0]
 8007c88:	b29a      	uxth	r2, r3
 8007c8a:	2044      	movs	r0, #68	; 0x44
 8007c8c:	183b      	adds	r3, r7, r0
 8007c8e:	492d      	ldr	r1, [pc, #180]	; (8007d44 <USB_ActivateEndpoint+0x6e4>)
 8007c90:	400a      	ands	r2, r1
 8007c92:	801a      	strh	r2, [r3, #0]
 8007c94:	183b      	adds	r3, r7, r0
 8007c96:	183a      	adds	r2, r7, r0
 8007c98:	8812      	ldrh	r2, [r2, #0]
 8007c9a:	2120      	movs	r1, #32
 8007c9c:	404a      	eors	r2, r1
 8007c9e:	801a      	strh	r2, [r3, #0]
 8007ca0:	687a      	ldr	r2, [r7, #4]
 8007ca2:	683b      	ldr	r3, [r7, #0]
 8007ca4:	781b      	ldrb	r3, [r3, #0]
 8007ca6:	009b      	lsls	r3, r3, #2
 8007ca8:	18d3      	adds	r3, r2, r3
 8007caa:	183a      	adds	r2, r7, r0
 8007cac:	8812      	ldrh	r2, [r2, #0]
 8007cae:	4920      	ldr	r1, [pc, #128]	; (8007d30 <USB_ActivateEndpoint+0x6d0>)
 8007cb0:	430a      	orrs	r2, r1
 8007cb2:	b292      	uxth	r2, r2
 8007cb4:	801a      	strh	r2, [r3, #0]
 8007cb6:	e016      	b.n	8007ce6 <USB_ActivateEndpoint+0x686>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007cb8:	687a      	ldr	r2, [r7, #4]
 8007cba:	683b      	ldr	r3, [r7, #0]
 8007cbc:	781b      	ldrb	r3, [r3, #0]
 8007cbe:	009b      	lsls	r3, r3, #2
 8007cc0:	18d3      	adds	r3, r2, r3
 8007cc2:	881b      	ldrh	r3, [r3, #0]
 8007cc4:	b29a      	uxth	r2, r3
 8007cc6:	2046      	movs	r0, #70	; 0x46
 8007cc8:	183b      	adds	r3, r7, r0
 8007cca:	491e      	ldr	r1, [pc, #120]	; (8007d44 <USB_ActivateEndpoint+0x6e4>)
 8007ccc:	400a      	ands	r2, r1
 8007cce:	801a      	strh	r2, [r3, #0]
 8007cd0:	687a      	ldr	r2, [r7, #4]
 8007cd2:	683b      	ldr	r3, [r7, #0]
 8007cd4:	781b      	ldrb	r3, [r3, #0]
 8007cd6:	009b      	lsls	r3, r3, #2
 8007cd8:	18d3      	adds	r3, r2, r3
 8007cda:	183a      	adds	r2, r7, r0
 8007cdc:	8812      	ldrh	r2, [r2, #0]
 8007cde:	4914      	ldr	r1, [pc, #80]	; (8007d30 <USB_ActivateEndpoint+0x6d0>)
 8007ce0:	430a      	orrs	r2, r1
 8007ce2:	b292      	uxth	r2, r2
 8007ce4:	801a      	strh	r2, [r3, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8007ce6:	687a      	ldr	r2, [r7, #4]
 8007ce8:	683b      	ldr	r3, [r7, #0]
 8007cea:	781b      	ldrb	r3, [r3, #0]
 8007cec:	009b      	lsls	r3, r3, #2
 8007cee:	18d3      	adds	r3, r2, r3
 8007cf0:	881b      	ldrh	r3, [r3, #0]
 8007cf2:	b29a      	uxth	r2, r3
 8007cf4:	2042      	movs	r0, #66	; 0x42
 8007cf6:	183b      	adds	r3, r7, r0
 8007cf8:	4911      	ldr	r1, [pc, #68]	; (8007d40 <USB_ActivateEndpoint+0x6e0>)
 8007cfa:	400a      	ands	r2, r1
 8007cfc:	801a      	strh	r2, [r3, #0]
 8007cfe:	687a      	ldr	r2, [r7, #4]
 8007d00:	683b      	ldr	r3, [r7, #0]
 8007d02:	781b      	ldrb	r3, [r3, #0]
 8007d04:	009b      	lsls	r3, r3, #2
 8007d06:	18d3      	adds	r3, r2, r3
 8007d08:	183a      	adds	r2, r7, r0
 8007d0a:	8812      	ldrh	r2, [r2, #0]
 8007d0c:	4908      	ldr	r1, [pc, #32]	; (8007d30 <USB_ActivateEndpoint+0x6d0>)
 8007d0e:	430a      	orrs	r2, r1
 8007d10:	b292      	uxth	r2, r2
 8007d12:	801a      	strh	r2, [r3, #0]
    }
  }

  return ret;
 8007d14:	236f      	movs	r3, #111	; 0x6f
 8007d16:	18fb      	adds	r3, r7, r3
 8007d18:	781b      	ldrb	r3, [r3, #0]
}
 8007d1a:	0018      	movs	r0, r3
 8007d1c:	46bd      	mov	sp, r7
 8007d1e:	b01c      	add	sp, #112	; 0x70
 8007d20:	bd80      	pop	{r7, pc}
 8007d22:	46c0      	nop			; (mov r8, r8)
 8007d24:	ffff8f8f 	.word	0xffff8f8f
 8007d28:	ffff8180 	.word	0xffff8180
 8007d2c:	ffff8e8f 	.word	0xffff8e8f
 8007d30:	ffff8080 	.word	0xffff8080
 8007d34:	00000404 	.word	0x00000404
 8007d38:	ffffc080 	.word	0xffffc080
 8007d3c:	ffff80c0 	.word	0xffff80c0
 8007d40:	ffffbf8f 	.word	0xffffbf8f
 8007d44:	ffff8fbf 	.word	0xffff8fbf

08007d48 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007d48:	b580      	push	{r7, lr}
 8007d4a:	b08c      	sub	sp, #48	; 0x30
 8007d4c:	af00      	add	r7, sp, #0
 8007d4e:	6078      	str	r0, [r7, #4]
 8007d50:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8007d52:	683b      	ldr	r3, [r7, #0]
 8007d54:	7b1b      	ldrb	r3, [r3, #12]
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	d000      	beq.n	8007d5c <USB_DeactivateEndpoint+0x14>
 8007d5a:	e07e      	b.n	8007e5a <USB_DeactivateEndpoint+0x112>
  {
    if (ep->is_in != 0U)
 8007d5c:	683b      	ldr	r3, [r7, #0]
 8007d5e:	785b      	ldrb	r3, [r3, #1]
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	d03c      	beq.n	8007dde <USB_DeactivateEndpoint+0x96>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007d64:	687a      	ldr	r2, [r7, #4]
 8007d66:	683b      	ldr	r3, [r7, #0]
 8007d68:	781b      	ldrb	r3, [r3, #0]
 8007d6a:	009b      	lsls	r3, r3, #2
 8007d6c:	18d2      	adds	r2, r2, r3
 8007d6e:	210c      	movs	r1, #12
 8007d70:	187b      	adds	r3, r7, r1
 8007d72:	8812      	ldrh	r2, [r2, #0]
 8007d74:	801a      	strh	r2, [r3, #0]
 8007d76:	187b      	adds	r3, r7, r1
 8007d78:	881b      	ldrh	r3, [r3, #0]
 8007d7a:	2240      	movs	r2, #64	; 0x40
 8007d7c:	4013      	ands	r3, r2
 8007d7e:	d016      	beq.n	8007dae <USB_DeactivateEndpoint+0x66>
 8007d80:	687a      	ldr	r2, [r7, #4]
 8007d82:	683b      	ldr	r3, [r7, #0]
 8007d84:	781b      	ldrb	r3, [r3, #0]
 8007d86:	009b      	lsls	r3, r3, #2
 8007d88:	18d3      	adds	r3, r2, r3
 8007d8a:	881b      	ldrh	r3, [r3, #0]
 8007d8c:	b29a      	uxth	r2, r3
 8007d8e:	200a      	movs	r0, #10
 8007d90:	183b      	adds	r3, r7, r0
 8007d92:	49c7      	ldr	r1, [pc, #796]	; (80080b0 <USB_DeactivateEndpoint+0x368>)
 8007d94:	400a      	ands	r2, r1
 8007d96:	801a      	strh	r2, [r3, #0]
 8007d98:	687a      	ldr	r2, [r7, #4]
 8007d9a:	683b      	ldr	r3, [r7, #0]
 8007d9c:	781b      	ldrb	r3, [r3, #0]
 8007d9e:	009b      	lsls	r3, r3, #2
 8007da0:	18d3      	adds	r3, r2, r3
 8007da2:	183a      	adds	r2, r7, r0
 8007da4:	8812      	ldrh	r2, [r2, #0]
 8007da6:	49c3      	ldr	r1, [pc, #780]	; (80080b4 <USB_DeactivateEndpoint+0x36c>)
 8007da8:	430a      	orrs	r2, r1
 8007daa:	b292      	uxth	r2, r2
 8007dac:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007dae:	687a      	ldr	r2, [r7, #4]
 8007db0:	683b      	ldr	r3, [r7, #0]
 8007db2:	781b      	ldrb	r3, [r3, #0]
 8007db4:	009b      	lsls	r3, r3, #2
 8007db6:	18d3      	adds	r3, r2, r3
 8007db8:	881b      	ldrh	r3, [r3, #0]
 8007dba:	b29a      	uxth	r2, r3
 8007dbc:	2008      	movs	r0, #8
 8007dbe:	183b      	adds	r3, r7, r0
 8007dc0:	49bd      	ldr	r1, [pc, #756]	; (80080b8 <USB_DeactivateEndpoint+0x370>)
 8007dc2:	400a      	ands	r2, r1
 8007dc4:	801a      	strh	r2, [r3, #0]
 8007dc6:	687a      	ldr	r2, [r7, #4]
 8007dc8:	683b      	ldr	r3, [r7, #0]
 8007dca:	781b      	ldrb	r3, [r3, #0]
 8007dcc:	009b      	lsls	r3, r3, #2
 8007dce:	18d3      	adds	r3, r2, r3
 8007dd0:	183a      	adds	r2, r7, r0
 8007dd2:	8812      	ldrh	r2, [r2, #0]
 8007dd4:	49b9      	ldr	r1, [pc, #740]	; (80080bc <USB_DeactivateEndpoint+0x374>)
 8007dd6:	430a      	orrs	r2, r1
 8007dd8:	b292      	uxth	r2, r2
 8007dda:	801a      	strh	r2, [r3, #0]
 8007ddc:	e163      	b.n	80080a6 <USB_DeactivateEndpoint+0x35e>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007dde:	687a      	ldr	r2, [r7, #4]
 8007de0:	683b      	ldr	r3, [r7, #0]
 8007de2:	781b      	ldrb	r3, [r3, #0]
 8007de4:	009b      	lsls	r3, r3, #2
 8007de6:	18d2      	adds	r2, r2, r3
 8007de8:	2112      	movs	r1, #18
 8007dea:	187b      	adds	r3, r7, r1
 8007dec:	8812      	ldrh	r2, [r2, #0]
 8007dee:	801a      	strh	r2, [r3, #0]
 8007df0:	187b      	adds	r3, r7, r1
 8007df2:	881a      	ldrh	r2, [r3, #0]
 8007df4:	2380      	movs	r3, #128	; 0x80
 8007df6:	01db      	lsls	r3, r3, #7
 8007df8:	4013      	ands	r3, r2
 8007dfa:	d016      	beq.n	8007e2a <USB_DeactivateEndpoint+0xe2>
 8007dfc:	687a      	ldr	r2, [r7, #4]
 8007dfe:	683b      	ldr	r3, [r7, #0]
 8007e00:	781b      	ldrb	r3, [r3, #0]
 8007e02:	009b      	lsls	r3, r3, #2
 8007e04:	18d3      	adds	r3, r2, r3
 8007e06:	881b      	ldrh	r3, [r3, #0]
 8007e08:	b29a      	uxth	r2, r3
 8007e0a:	2010      	movs	r0, #16
 8007e0c:	183b      	adds	r3, r7, r0
 8007e0e:	49a8      	ldr	r1, [pc, #672]	; (80080b0 <USB_DeactivateEndpoint+0x368>)
 8007e10:	400a      	ands	r2, r1
 8007e12:	801a      	strh	r2, [r3, #0]
 8007e14:	687a      	ldr	r2, [r7, #4]
 8007e16:	683b      	ldr	r3, [r7, #0]
 8007e18:	781b      	ldrb	r3, [r3, #0]
 8007e1a:	009b      	lsls	r3, r3, #2
 8007e1c:	18d3      	adds	r3, r2, r3
 8007e1e:	183a      	adds	r2, r7, r0
 8007e20:	8812      	ldrh	r2, [r2, #0]
 8007e22:	49a7      	ldr	r1, [pc, #668]	; (80080c0 <USB_DeactivateEndpoint+0x378>)
 8007e24:	430a      	orrs	r2, r1
 8007e26:	b292      	uxth	r2, r2
 8007e28:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8007e2a:	687a      	ldr	r2, [r7, #4]
 8007e2c:	683b      	ldr	r3, [r7, #0]
 8007e2e:	781b      	ldrb	r3, [r3, #0]
 8007e30:	009b      	lsls	r3, r3, #2
 8007e32:	18d3      	adds	r3, r2, r3
 8007e34:	881b      	ldrh	r3, [r3, #0]
 8007e36:	b29a      	uxth	r2, r3
 8007e38:	200e      	movs	r0, #14
 8007e3a:	183b      	adds	r3, r7, r0
 8007e3c:	49a1      	ldr	r1, [pc, #644]	; (80080c4 <USB_DeactivateEndpoint+0x37c>)
 8007e3e:	400a      	ands	r2, r1
 8007e40:	801a      	strh	r2, [r3, #0]
 8007e42:	687a      	ldr	r2, [r7, #4]
 8007e44:	683b      	ldr	r3, [r7, #0]
 8007e46:	781b      	ldrb	r3, [r3, #0]
 8007e48:	009b      	lsls	r3, r3, #2
 8007e4a:	18d3      	adds	r3, r2, r3
 8007e4c:	183a      	adds	r2, r7, r0
 8007e4e:	8812      	ldrh	r2, [r2, #0]
 8007e50:	499a      	ldr	r1, [pc, #616]	; (80080bc <USB_DeactivateEndpoint+0x374>)
 8007e52:	430a      	orrs	r2, r1
 8007e54:	b292      	uxth	r2, r2
 8007e56:	801a      	strh	r2, [r3, #0]
 8007e58:	e125      	b.n	80080a6 <USB_DeactivateEndpoint+0x35e>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8007e5a:	683b      	ldr	r3, [r7, #0]
 8007e5c:	785b      	ldrb	r3, [r3, #1]
 8007e5e:	2b00      	cmp	r3, #0
 8007e60:	d000      	beq.n	8007e64 <USB_DeactivateEndpoint+0x11c>
 8007e62:	e090      	b.n	8007f86 <USB_DeactivateEndpoint+0x23e>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007e64:	687a      	ldr	r2, [r7, #4]
 8007e66:	683b      	ldr	r3, [r7, #0]
 8007e68:	781b      	ldrb	r3, [r3, #0]
 8007e6a:	009b      	lsls	r3, r3, #2
 8007e6c:	18d2      	adds	r2, r2, r3
 8007e6e:	2120      	movs	r1, #32
 8007e70:	187b      	adds	r3, r7, r1
 8007e72:	8812      	ldrh	r2, [r2, #0]
 8007e74:	801a      	strh	r2, [r3, #0]
 8007e76:	187b      	adds	r3, r7, r1
 8007e78:	881a      	ldrh	r2, [r3, #0]
 8007e7a:	2380      	movs	r3, #128	; 0x80
 8007e7c:	01db      	lsls	r3, r3, #7
 8007e7e:	4013      	ands	r3, r2
 8007e80:	d016      	beq.n	8007eb0 <USB_DeactivateEndpoint+0x168>
 8007e82:	687a      	ldr	r2, [r7, #4]
 8007e84:	683b      	ldr	r3, [r7, #0]
 8007e86:	781b      	ldrb	r3, [r3, #0]
 8007e88:	009b      	lsls	r3, r3, #2
 8007e8a:	18d3      	adds	r3, r2, r3
 8007e8c:	881b      	ldrh	r3, [r3, #0]
 8007e8e:	b29a      	uxth	r2, r3
 8007e90:	201e      	movs	r0, #30
 8007e92:	183b      	adds	r3, r7, r0
 8007e94:	4986      	ldr	r1, [pc, #536]	; (80080b0 <USB_DeactivateEndpoint+0x368>)
 8007e96:	400a      	ands	r2, r1
 8007e98:	801a      	strh	r2, [r3, #0]
 8007e9a:	687a      	ldr	r2, [r7, #4]
 8007e9c:	683b      	ldr	r3, [r7, #0]
 8007e9e:	781b      	ldrb	r3, [r3, #0]
 8007ea0:	009b      	lsls	r3, r3, #2
 8007ea2:	18d3      	adds	r3, r2, r3
 8007ea4:	183a      	adds	r2, r7, r0
 8007ea6:	8812      	ldrh	r2, [r2, #0]
 8007ea8:	4985      	ldr	r1, [pc, #532]	; (80080c0 <USB_DeactivateEndpoint+0x378>)
 8007eaa:	430a      	orrs	r2, r1
 8007eac:	b292      	uxth	r2, r2
 8007eae:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007eb0:	687a      	ldr	r2, [r7, #4]
 8007eb2:	683b      	ldr	r3, [r7, #0]
 8007eb4:	781b      	ldrb	r3, [r3, #0]
 8007eb6:	009b      	lsls	r3, r3, #2
 8007eb8:	18d2      	adds	r2, r2, r3
 8007eba:	211c      	movs	r1, #28
 8007ebc:	187b      	adds	r3, r7, r1
 8007ebe:	8812      	ldrh	r2, [r2, #0]
 8007ec0:	801a      	strh	r2, [r3, #0]
 8007ec2:	187b      	adds	r3, r7, r1
 8007ec4:	881b      	ldrh	r3, [r3, #0]
 8007ec6:	2240      	movs	r2, #64	; 0x40
 8007ec8:	4013      	ands	r3, r2
 8007eca:	d016      	beq.n	8007efa <USB_DeactivateEndpoint+0x1b2>
 8007ecc:	687a      	ldr	r2, [r7, #4]
 8007ece:	683b      	ldr	r3, [r7, #0]
 8007ed0:	781b      	ldrb	r3, [r3, #0]
 8007ed2:	009b      	lsls	r3, r3, #2
 8007ed4:	18d3      	adds	r3, r2, r3
 8007ed6:	881b      	ldrh	r3, [r3, #0]
 8007ed8:	b29a      	uxth	r2, r3
 8007eda:	201a      	movs	r0, #26
 8007edc:	183b      	adds	r3, r7, r0
 8007ede:	4974      	ldr	r1, [pc, #464]	; (80080b0 <USB_DeactivateEndpoint+0x368>)
 8007ee0:	400a      	ands	r2, r1
 8007ee2:	801a      	strh	r2, [r3, #0]
 8007ee4:	687a      	ldr	r2, [r7, #4]
 8007ee6:	683b      	ldr	r3, [r7, #0]
 8007ee8:	781b      	ldrb	r3, [r3, #0]
 8007eea:	009b      	lsls	r3, r3, #2
 8007eec:	18d3      	adds	r3, r2, r3
 8007eee:	183a      	adds	r2, r7, r0
 8007ef0:	8812      	ldrh	r2, [r2, #0]
 8007ef2:	4970      	ldr	r1, [pc, #448]	; (80080b4 <USB_DeactivateEndpoint+0x36c>)
 8007ef4:	430a      	orrs	r2, r1
 8007ef6:	b292      	uxth	r2, r2
 8007ef8:	801a      	strh	r2, [r3, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8007efa:	687a      	ldr	r2, [r7, #4]
 8007efc:	683b      	ldr	r3, [r7, #0]
 8007efe:	781b      	ldrb	r3, [r3, #0]
 8007f00:	009b      	lsls	r3, r3, #2
 8007f02:	18d3      	adds	r3, r2, r3
 8007f04:	881b      	ldrh	r3, [r3, #0]
 8007f06:	b29a      	uxth	r2, r3
 8007f08:	2018      	movs	r0, #24
 8007f0a:	183b      	adds	r3, r7, r0
 8007f0c:	4968      	ldr	r1, [pc, #416]	; (80080b0 <USB_DeactivateEndpoint+0x368>)
 8007f0e:	400a      	ands	r2, r1
 8007f10:	801a      	strh	r2, [r3, #0]
 8007f12:	687a      	ldr	r2, [r7, #4]
 8007f14:	683b      	ldr	r3, [r7, #0]
 8007f16:	781b      	ldrb	r3, [r3, #0]
 8007f18:	009b      	lsls	r3, r3, #2
 8007f1a:	18d3      	adds	r3, r2, r3
 8007f1c:	183a      	adds	r2, r7, r0
 8007f1e:	8812      	ldrh	r2, [r2, #0]
 8007f20:	4964      	ldr	r1, [pc, #400]	; (80080b4 <USB_DeactivateEndpoint+0x36c>)
 8007f22:	430a      	orrs	r2, r1
 8007f24:	b292      	uxth	r2, r2
 8007f26:	801a      	strh	r2, [r3, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8007f28:	687a      	ldr	r2, [r7, #4]
 8007f2a:	683b      	ldr	r3, [r7, #0]
 8007f2c:	781b      	ldrb	r3, [r3, #0]
 8007f2e:	009b      	lsls	r3, r3, #2
 8007f30:	18d3      	adds	r3, r2, r3
 8007f32:	881b      	ldrh	r3, [r3, #0]
 8007f34:	b29a      	uxth	r2, r3
 8007f36:	2016      	movs	r0, #22
 8007f38:	183b      	adds	r3, r7, r0
 8007f3a:	4962      	ldr	r1, [pc, #392]	; (80080c4 <USB_DeactivateEndpoint+0x37c>)
 8007f3c:	400a      	ands	r2, r1
 8007f3e:	801a      	strh	r2, [r3, #0]
 8007f40:	687a      	ldr	r2, [r7, #4]
 8007f42:	683b      	ldr	r3, [r7, #0]
 8007f44:	781b      	ldrb	r3, [r3, #0]
 8007f46:	009b      	lsls	r3, r3, #2
 8007f48:	18d3      	adds	r3, r2, r3
 8007f4a:	183a      	adds	r2, r7, r0
 8007f4c:	8812      	ldrh	r2, [r2, #0]
 8007f4e:	495b      	ldr	r1, [pc, #364]	; (80080bc <USB_DeactivateEndpoint+0x374>)
 8007f50:	430a      	orrs	r2, r1
 8007f52:	b292      	uxth	r2, r2
 8007f54:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007f56:	687a      	ldr	r2, [r7, #4]
 8007f58:	683b      	ldr	r3, [r7, #0]
 8007f5a:	781b      	ldrb	r3, [r3, #0]
 8007f5c:	009b      	lsls	r3, r3, #2
 8007f5e:	18d3      	adds	r3, r2, r3
 8007f60:	881b      	ldrh	r3, [r3, #0]
 8007f62:	b29a      	uxth	r2, r3
 8007f64:	2014      	movs	r0, #20
 8007f66:	183b      	adds	r3, r7, r0
 8007f68:	4953      	ldr	r1, [pc, #332]	; (80080b8 <USB_DeactivateEndpoint+0x370>)
 8007f6a:	400a      	ands	r2, r1
 8007f6c:	801a      	strh	r2, [r3, #0]
 8007f6e:	687a      	ldr	r2, [r7, #4]
 8007f70:	683b      	ldr	r3, [r7, #0]
 8007f72:	781b      	ldrb	r3, [r3, #0]
 8007f74:	009b      	lsls	r3, r3, #2
 8007f76:	18d3      	adds	r3, r2, r3
 8007f78:	183a      	adds	r2, r7, r0
 8007f7a:	8812      	ldrh	r2, [r2, #0]
 8007f7c:	494f      	ldr	r1, [pc, #316]	; (80080bc <USB_DeactivateEndpoint+0x374>)
 8007f7e:	430a      	orrs	r2, r1
 8007f80:	b292      	uxth	r2, r2
 8007f82:	801a      	strh	r2, [r3, #0]
 8007f84:	e08f      	b.n	80080a6 <USB_DeactivateEndpoint+0x35e>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007f86:	687a      	ldr	r2, [r7, #4]
 8007f88:	683b      	ldr	r3, [r7, #0]
 8007f8a:	781b      	ldrb	r3, [r3, #0]
 8007f8c:	009b      	lsls	r3, r3, #2
 8007f8e:	18d2      	adds	r2, r2, r3
 8007f90:	212e      	movs	r1, #46	; 0x2e
 8007f92:	187b      	adds	r3, r7, r1
 8007f94:	8812      	ldrh	r2, [r2, #0]
 8007f96:	801a      	strh	r2, [r3, #0]
 8007f98:	187b      	adds	r3, r7, r1
 8007f9a:	881a      	ldrh	r2, [r3, #0]
 8007f9c:	2380      	movs	r3, #128	; 0x80
 8007f9e:	01db      	lsls	r3, r3, #7
 8007fa0:	4013      	ands	r3, r2
 8007fa2:	d016      	beq.n	8007fd2 <USB_DeactivateEndpoint+0x28a>
 8007fa4:	687a      	ldr	r2, [r7, #4]
 8007fa6:	683b      	ldr	r3, [r7, #0]
 8007fa8:	781b      	ldrb	r3, [r3, #0]
 8007faa:	009b      	lsls	r3, r3, #2
 8007fac:	18d3      	adds	r3, r2, r3
 8007fae:	881b      	ldrh	r3, [r3, #0]
 8007fb0:	b29a      	uxth	r2, r3
 8007fb2:	202c      	movs	r0, #44	; 0x2c
 8007fb4:	183b      	adds	r3, r7, r0
 8007fb6:	493e      	ldr	r1, [pc, #248]	; (80080b0 <USB_DeactivateEndpoint+0x368>)
 8007fb8:	400a      	ands	r2, r1
 8007fba:	801a      	strh	r2, [r3, #0]
 8007fbc:	687a      	ldr	r2, [r7, #4]
 8007fbe:	683b      	ldr	r3, [r7, #0]
 8007fc0:	781b      	ldrb	r3, [r3, #0]
 8007fc2:	009b      	lsls	r3, r3, #2
 8007fc4:	18d3      	adds	r3, r2, r3
 8007fc6:	183a      	adds	r2, r7, r0
 8007fc8:	8812      	ldrh	r2, [r2, #0]
 8007fca:	493d      	ldr	r1, [pc, #244]	; (80080c0 <USB_DeactivateEndpoint+0x378>)
 8007fcc:	430a      	orrs	r2, r1
 8007fce:	b292      	uxth	r2, r2
 8007fd0:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007fd2:	687a      	ldr	r2, [r7, #4]
 8007fd4:	683b      	ldr	r3, [r7, #0]
 8007fd6:	781b      	ldrb	r3, [r3, #0]
 8007fd8:	009b      	lsls	r3, r3, #2
 8007fda:	18d2      	adds	r2, r2, r3
 8007fdc:	212a      	movs	r1, #42	; 0x2a
 8007fde:	187b      	adds	r3, r7, r1
 8007fe0:	8812      	ldrh	r2, [r2, #0]
 8007fe2:	801a      	strh	r2, [r3, #0]
 8007fe4:	187b      	adds	r3, r7, r1
 8007fe6:	881b      	ldrh	r3, [r3, #0]
 8007fe8:	2240      	movs	r2, #64	; 0x40
 8007fea:	4013      	ands	r3, r2
 8007fec:	d016      	beq.n	800801c <USB_DeactivateEndpoint+0x2d4>
 8007fee:	687a      	ldr	r2, [r7, #4]
 8007ff0:	683b      	ldr	r3, [r7, #0]
 8007ff2:	781b      	ldrb	r3, [r3, #0]
 8007ff4:	009b      	lsls	r3, r3, #2
 8007ff6:	18d3      	adds	r3, r2, r3
 8007ff8:	881b      	ldrh	r3, [r3, #0]
 8007ffa:	b29a      	uxth	r2, r3
 8007ffc:	2028      	movs	r0, #40	; 0x28
 8007ffe:	183b      	adds	r3, r7, r0
 8008000:	492b      	ldr	r1, [pc, #172]	; (80080b0 <USB_DeactivateEndpoint+0x368>)
 8008002:	400a      	ands	r2, r1
 8008004:	801a      	strh	r2, [r3, #0]
 8008006:	687a      	ldr	r2, [r7, #4]
 8008008:	683b      	ldr	r3, [r7, #0]
 800800a:	781b      	ldrb	r3, [r3, #0]
 800800c:	009b      	lsls	r3, r3, #2
 800800e:	18d3      	adds	r3, r2, r3
 8008010:	183a      	adds	r2, r7, r0
 8008012:	8812      	ldrh	r2, [r2, #0]
 8008014:	4927      	ldr	r1, [pc, #156]	; (80080b4 <USB_DeactivateEndpoint+0x36c>)
 8008016:	430a      	orrs	r2, r1
 8008018:	b292      	uxth	r2, r2
 800801a:	801a      	strh	r2, [r3, #0]
      PCD_RX_DTOG(USBx, ep->num);
 800801c:	687a      	ldr	r2, [r7, #4]
 800801e:	683b      	ldr	r3, [r7, #0]
 8008020:	781b      	ldrb	r3, [r3, #0]
 8008022:	009b      	lsls	r3, r3, #2
 8008024:	18d3      	adds	r3, r2, r3
 8008026:	881b      	ldrh	r3, [r3, #0]
 8008028:	b29a      	uxth	r2, r3
 800802a:	2026      	movs	r0, #38	; 0x26
 800802c:	183b      	adds	r3, r7, r0
 800802e:	4920      	ldr	r1, [pc, #128]	; (80080b0 <USB_DeactivateEndpoint+0x368>)
 8008030:	400a      	ands	r2, r1
 8008032:	801a      	strh	r2, [r3, #0]
 8008034:	687a      	ldr	r2, [r7, #4]
 8008036:	683b      	ldr	r3, [r7, #0]
 8008038:	781b      	ldrb	r3, [r3, #0]
 800803a:	009b      	lsls	r3, r3, #2
 800803c:	18d3      	adds	r3, r2, r3
 800803e:	183a      	adds	r2, r7, r0
 8008040:	8812      	ldrh	r2, [r2, #0]
 8008042:	491f      	ldr	r1, [pc, #124]	; (80080c0 <USB_DeactivateEndpoint+0x378>)
 8008044:	430a      	orrs	r2, r1
 8008046:	b292      	uxth	r2, r2
 8008048:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800804a:	687a      	ldr	r2, [r7, #4]
 800804c:	683b      	ldr	r3, [r7, #0]
 800804e:	781b      	ldrb	r3, [r3, #0]
 8008050:	009b      	lsls	r3, r3, #2
 8008052:	18d3      	adds	r3, r2, r3
 8008054:	881b      	ldrh	r3, [r3, #0]
 8008056:	b29a      	uxth	r2, r3
 8008058:	2024      	movs	r0, #36	; 0x24
 800805a:	183b      	adds	r3, r7, r0
 800805c:	4916      	ldr	r1, [pc, #88]	; (80080b8 <USB_DeactivateEndpoint+0x370>)
 800805e:	400a      	ands	r2, r1
 8008060:	801a      	strh	r2, [r3, #0]
 8008062:	687a      	ldr	r2, [r7, #4]
 8008064:	683b      	ldr	r3, [r7, #0]
 8008066:	781b      	ldrb	r3, [r3, #0]
 8008068:	009b      	lsls	r3, r3, #2
 800806a:	18d3      	adds	r3, r2, r3
 800806c:	183a      	adds	r2, r7, r0
 800806e:	8812      	ldrh	r2, [r2, #0]
 8008070:	4912      	ldr	r1, [pc, #72]	; (80080bc <USB_DeactivateEndpoint+0x374>)
 8008072:	430a      	orrs	r2, r1
 8008074:	b292      	uxth	r2, r2
 8008076:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8008078:	687a      	ldr	r2, [r7, #4]
 800807a:	683b      	ldr	r3, [r7, #0]
 800807c:	781b      	ldrb	r3, [r3, #0]
 800807e:	009b      	lsls	r3, r3, #2
 8008080:	18d3      	adds	r3, r2, r3
 8008082:	881b      	ldrh	r3, [r3, #0]
 8008084:	b29a      	uxth	r2, r3
 8008086:	2022      	movs	r0, #34	; 0x22
 8008088:	183b      	adds	r3, r7, r0
 800808a:	490e      	ldr	r1, [pc, #56]	; (80080c4 <USB_DeactivateEndpoint+0x37c>)
 800808c:	400a      	ands	r2, r1
 800808e:	801a      	strh	r2, [r3, #0]
 8008090:	687a      	ldr	r2, [r7, #4]
 8008092:	683b      	ldr	r3, [r7, #0]
 8008094:	781b      	ldrb	r3, [r3, #0]
 8008096:	009b      	lsls	r3, r3, #2
 8008098:	18d3      	adds	r3, r2, r3
 800809a:	183a      	adds	r2, r7, r0
 800809c:	8812      	ldrh	r2, [r2, #0]
 800809e:	4907      	ldr	r1, [pc, #28]	; (80080bc <USB_DeactivateEndpoint+0x374>)
 80080a0:	430a      	orrs	r2, r1
 80080a2:	b292      	uxth	r2, r2
 80080a4:	801a      	strh	r2, [r3, #0]
    }
  }

  return HAL_OK;
 80080a6:	2300      	movs	r3, #0
}
 80080a8:	0018      	movs	r0, r3
 80080aa:	46bd      	mov	sp, r7
 80080ac:	b00c      	add	sp, #48	; 0x30
 80080ae:	bd80      	pop	{r7, pc}
 80080b0:	ffff8f8f 	.word	0xffff8f8f
 80080b4:	ffff80c0 	.word	0xffff80c0
 80080b8:	ffff8fbf 	.word	0xffff8fbf
 80080bc:	ffff8080 	.word	0xffff8080
 80080c0:	ffffc080 	.word	0xffffc080
 80080c4:	ffffbf8f 	.word	0xffffbf8f

080080c8 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80080c8:	b590      	push	{r4, r7, lr}
 80080ca:	b0c3      	sub	sp, #268	; 0x10c
 80080cc:	af00      	add	r7, sp, #0
 80080ce:	6078      	str	r0, [r7, #4]
 80080d0:	6039      	str	r1, [r7, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80080d2:	683b      	ldr	r3, [r7, #0]
 80080d4:	785b      	ldrb	r3, [r3, #1]
 80080d6:	2b01      	cmp	r3, #1
 80080d8:	d001      	beq.n	80080de <USB_EPStartXfer+0x16>
 80080da:	f000 fcef 	bl	8008abc <USB_EPStartXfer+0x9f4>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 80080de:	683b      	ldr	r3, [r7, #0]
 80080e0:	699a      	ldr	r2, [r3, #24]
 80080e2:	683b      	ldr	r3, [r7, #0]
 80080e4:	691b      	ldr	r3, [r3, #16]
 80080e6:	429a      	cmp	r2, r3
 80080e8:	d905      	bls.n	80080f6 <USB_EPStartXfer+0x2e>
    {
      len = ep->maxpacket;
 80080ea:	683b      	ldr	r3, [r7, #0]
 80080ec:	691b      	ldr	r3, [r3, #16]
 80080ee:	1d7a      	adds	r2, r7, #5
 80080f0:	32ff      	adds	r2, #255	; 0xff
 80080f2:	6013      	str	r3, [r2, #0]
 80080f4:	e004      	b.n	8008100 <USB_EPStartXfer+0x38>
    }
    else
    {
      len = ep->xfer_len;
 80080f6:	683b      	ldr	r3, [r7, #0]
 80080f8:	699b      	ldr	r3, [r3, #24]
 80080fa:	1d7a      	adds	r2, r7, #5
 80080fc:	32ff      	adds	r2, #255	; 0xff
 80080fe:	6013      	str	r3, [r2, #0]
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8008100:	683b      	ldr	r3, [r7, #0]
 8008102:	7b1b      	ldrb	r3, [r3, #12]
 8008104:	2b00      	cmp	r3, #0
 8008106:	d125      	bne.n	8008154 <USB_EPStartXfer+0x8c>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8008108:	683b      	ldr	r3, [r7, #0]
 800810a:	6959      	ldr	r1, [r3, #20]
 800810c:	683b      	ldr	r3, [r7, #0]
 800810e:	88da      	ldrh	r2, [r3, #6]
 8008110:	1d7b      	adds	r3, r7, #5
 8008112:	33ff      	adds	r3, #255	; 0xff
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	b29b      	uxth	r3, r3
 8008118:	6878      	ldr	r0, [r7, #4]
 800811a:	f001 f9c9 	bl	80094b0 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	613b      	str	r3, [r7, #16]
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	2250      	movs	r2, #80	; 0x50
 8008126:	5a9b      	ldrh	r3, [r3, r2]
 8008128:	b29b      	uxth	r3, r3
 800812a:	001a      	movs	r2, r3
 800812c:	693b      	ldr	r3, [r7, #16]
 800812e:	189b      	adds	r3, r3, r2
 8008130:	613b      	str	r3, [r7, #16]
 8008132:	683b      	ldr	r3, [r7, #0]
 8008134:	781b      	ldrb	r3, [r3, #0]
 8008136:	00da      	lsls	r2, r3, #3
 8008138:	693b      	ldr	r3, [r7, #16]
 800813a:	18d3      	adds	r3, r2, r3
 800813c:	4acc      	ldr	r2, [pc, #816]	; (8008470 <USB_EPStartXfer+0x3a8>)
 800813e:	4694      	mov	ip, r2
 8008140:	4463      	add	r3, ip
 8008142:	60fb      	str	r3, [r7, #12]
 8008144:	1d7b      	adds	r3, r7, #5
 8008146:	33ff      	adds	r3, #255	; 0xff
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	b29a      	uxth	r2, r3
 800814c:	68fb      	ldr	r3, [r7, #12]
 800814e:	801a      	strh	r2, [r3, #0]
 8008150:	f000 fc8f 	bl	8008a72 <USB_EPStartXfer+0x9aa>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8008154:	683b      	ldr	r3, [r7, #0]
 8008156:	78db      	ldrb	r3, [r3, #3]
 8008158:	2b02      	cmp	r3, #2
 800815a:	d000      	beq.n	800815e <USB_EPStartXfer+0x96>
 800815c:	e33a      	b.n	80087d4 <USB_EPStartXfer+0x70c>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800815e:	683b      	ldr	r3, [r7, #0]
 8008160:	6a1a      	ldr	r2, [r3, #32]
 8008162:	683b      	ldr	r3, [r7, #0]
 8008164:	691b      	ldr	r3, [r3, #16]
 8008166:	429a      	cmp	r2, r3
 8008168:	d800      	bhi.n	800816c <USB_EPStartXfer+0xa4>
 800816a:	e2df      	b.n	800872c <USB_EPStartXfer+0x664>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800816c:	687a      	ldr	r2, [r7, #4]
 800816e:	683b      	ldr	r3, [r7, #0]
 8008170:	781b      	ldrb	r3, [r3, #0]
 8008172:	009b      	lsls	r3, r3, #2
 8008174:	18d3      	adds	r3, r2, r3
 8008176:	881b      	ldrh	r3, [r3, #0]
 8008178:	b29a      	uxth	r2, r3
 800817a:	2056      	movs	r0, #86	; 0x56
 800817c:	183b      	adds	r3, r7, r0
 800817e:	49bd      	ldr	r1, [pc, #756]	; (8008474 <USB_EPStartXfer+0x3ac>)
 8008180:	400a      	ands	r2, r1
 8008182:	801a      	strh	r2, [r3, #0]
 8008184:	687a      	ldr	r2, [r7, #4]
 8008186:	683b      	ldr	r3, [r7, #0]
 8008188:	781b      	ldrb	r3, [r3, #0]
 800818a:	009b      	lsls	r3, r3, #2
 800818c:	18d3      	adds	r3, r2, r3
 800818e:	183a      	adds	r2, r7, r0
 8008190:	8812      	ldrh	r2, [r2, #0]
 8008192:	49b9      	ldr	r1, [pc, #740]	; (8008478 <USB_EPStartXfer+0x3b0>)
 8008194:	430a      	orrs	r2, r1
 8008196:	b292      	uxth	r2, r2
 8008198:	801a      	strh	r2, [r3, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 800819a:	683b      	ldr	r3, [r7, #0]
 800819c:	6a1a      	ldr	r2, [r3, #32]
 800819e:	1d7b      	adds	r3, r7, #5
 80081a0:	33ff      	adds	r3, #255	; 0xff
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	1ad2      	subs	r2, r2, r3
 80081a6:	683b      	ldr	r3, [r7, #0]
 80081a8:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80081aa:	687a      	ldr	r2, [r7, #4]
 80081ac:	683b      	ldr	r3, [r7, #0]
 80081ae:	781b      	ldrb	r3, [r3, #0]
 80081b0:	009b      	lsls	r3, r3, #2
 80081b2:	18d3      	adds	r3, r2, r3
 80081b4:	881b      	ldrh	r3, [r3, #0]
 80081b6:	b29b      	uxth	r3, r3
 80081b8:	001a      	movs	r2, r3
 80081ba:	2340      	movs	r3, #64	; 0x40
 80081bc:	4013      	ands	r3, r2
 80081be:	d100      	bne.n	80081c2 <USB_EPStartXfer+0xfa>
 80081c0:	e162      	b.n	8008488 <USB_EPStartXfer+0x3c0>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	633b      	str	r3, [r7, #48]	; 0x30
 80081c6:	683b      	ldr	r3, [r7, #0]
 80081c8:	785b      	ldrb	r3, [r3, #1]
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	d16a      	bne.n	80082a4 <USB_EPStartXfer+0x1dc>
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	62bb      	str	r3, [r7, #40]	; 0x28
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	2250      	movs	r2, #80	; 0x50
 80081d6:	5a9b      	ldrh	r3, [r3, r2]
 80081d8:	b29b      	uxth	r3, r3
 80081da:	001a      	movs	r2, r3
 80081dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081de:	189b      	adds	r3, r3, r2
 80081e0:	62bb      	str	r3, [r7, #40]	; 0x28
 80081e2:	683b      	ldr	r3, [r7, #0]
 80081e4:	781b      	ldrb	r3, [r3, #0]
 80081e6:	00da      	lsls	r2, r3, #3
 80081e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081ea:	18d3      	adds	r3, r2, r3
 80081ec:	4aa3      	ldr	r2, [pc, #652]	; (800847c <USB_EPStartXfer+0x3b4>)
 80081ee:	4694      	mov	ip, r2
 80081f0:	4463      	add	r3, ip
 80081f2:	627b      	str	r3, [r7, #36]	; 0x24
 80081f4:	1d7b      	adds	r3, r7, #5
 80081f6:	33ff      	adds	r3, #255	; 0xff
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	d110      	bne.n	8008220 <USB_EPStartXfer+0x158>
 80081fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008200:	881b      	ldrh	r3, [r3, #0]
 8008202:	b29b      	uxth	r3, r3
 8008204:	4a9e      	ldr	r2, [pc, #632]	; (8008480 <USB_EPStartXfer+0x3b8>)
 8008206:	4013      	ands	r3, r2
 8008208:	b29a      	uxth	r2, r3
 800820a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800820c:	801a      	strh	r2, [r3, #0]
 800820e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008210:	881b      	ldrh	r3, [r3, #0]
 8008212:	b29b      	uxth	r3, r3
 8008214:	4a9b      	ldr	r2, [pc, #620]	; (8008484 <USB_EPStartXfer+0x3bc>)
 8008216:	4313      	orrs	r3, r2
 8008218:	b29a      	uxth	r2, r3
 800821a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800821c:	801a      	strh	r2, [r3, #0]
 800821e:	e05c      	b.n	80082da <USB_EPStartXfer+0x212>
 8008220:	1d7b      	adds	r3, r7, #5
 8008222:	33ff      	adds	r3, #255	; 0xff
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	2b3e      	cmp	r3, #62	; 0x3e
 8008228:	d81c      	bhi.n	8008264 <USB_EPStartXfer+0x19c>
 800822a:	1d7b      	adds	r3, r7, #5
 800822c:	33ff      	adds	r3, #255	; 0xff
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	085b      	lsrs	r3, r3, #1
 8008232:	1c7a      	adds	r2, r7, #1
 8008234:	32ff      	adds	r2, #255	; 0xff
 8008236:	6013      	str	r3, [r2, #0]
 8008238:	1d7b      	adds	r3, r7, #5
 800823a:	33ff      	adds	r3, #255	; 0xff
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	2201      	movs	r2, #1
 8008240:	4013      	ands	r3, r2
 8008242:	d006      	beq.n	8008252 <USB_EPStartXfer+0x18a>
 8008244:	1c7b      	adds	r3, r7, #1
 8008246:	33ff      	adds	r3, #255	; 0xff
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	3301      	adds	r3, #1
 800824c:	1c7a      	adds	r2, r7, #1
 800824e:	32ff      	adds	r2, #255	; 0xff
 8008250:	6013      	str	r3, [r2, #0]
 8008252:	1c7b      	adds	r3, r7, #1
 8008254:	33ff      	adds	r3, #255	; 0xff
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	b29b      	uxth	r3, r3
 800825a:	029b      	lsls	r3, r3, #10
 800825c:	b29a      	uxth	r2, r3
 800825e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008260:	801a      	strh	r2, [r3, #0]
 8008262:	e03a      	b.n	80082da <USB_EPStartXfer+0x212>
 8008264:	1d7b      	adds	r3, r7, #5
 8008266:	33ff      	adds	r3, #255	; 0xff
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	095b      	lsrs	r3, r3, #5
 800826c:	1c7a      	adds	r2, r7, #1
 800826e:	32ff      	adds	r2, #255	; 0xff
 8008270:	6013      	str	r3, [r2, #0]
 8008272:	1d7b      	adds	r3, r7, #5
 8008274:	33ff      	adds	r3, #255	; 0xff
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	221f      	movs	r2, #31
 800827a:	4013      	ands	r3, r2
 800827c:	d106      	bne.n	800828c <USB_EPStartXfer+0x1c4>
 800827e:	1c7b      	adds	r3, r7, #1
 8008280:	33ff      	adds	r3, #255	; 0xff
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	3b01      	subs	r3, #1
 8008286:	1c7a      	adds	r2, r7, #1
 8008288:	32ff      	adds	r2, #255	; 0xff
 800828a:	6013      	str	r3, [r2, #0]
 800828c:	1c7b      	adds	r3, r7, #1
 800828e:	33ff      	adds	r3, #255	; 0xff
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	b29b      	uxth	r3, r3
 8008294:	029b      	lsls	r3, r3, #10
 8008296:	b29b      	uxth	r3, r3
 8008298:	4a7a      	ldr	r2, [pc, #488]	; (8008484 <USB_EPStartXfer+0x3bc>)
 800829a:	4313      	orrs	r3, r2
 800829c:	b29a      	uxth	r2, r3
 800829e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082a0:	801a      	strh	r2, [r3, #0]
 80082a2:	e01a      	b.n	80082da <USB_EPStartXfer+0x212>
 80082a4:	683b      	ldr	r3, [r7, #0]
 80082a6:	785b      	ldrb	r3, [r3, #1]
 80082a8:	2b01      	cmp	r3, #1
 80082aa:	d116      	bne.n	80082da <USB_EPStartXfer+0x212>
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	2250      	movs	r2, #80	; 0x50
 80082b0:	5a9b      	ldrh	r3, [r3, r2]
 80082b2:	b29b      	uxth	r3, r3
 80082b4:	001a      	movs	r2, r3
 80082b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082b8:	189b      	adds	r3, r3, r2
 80082ba:	633b      	str	r3, [r7, #48]	; 0x30
 80082bc:	683b      	ldr	r3, [r7, #0]
 80082be:	781b      	ldrb	r3, [r3, #0]
 80082c0:	00da      	lsls	r2, r3, #3
 80082c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082c4:	18d3      	adds	r3, r2, r3
 80082c6:	4a6d      	ldr	r2, [pc, #436]	; (800847c <USB_EPStartXfer+0x3b4>)
 80082c8:	4694      	mov	ip, r2
 80082ca:	4463      	add	r3, ip
 80082cc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80082ce:	1d7b      	adds	r3, r7, #5
 80082d0:	33ff      	adds	r3, #255	; 0xff
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	b29a      	uxth	r2, r3
 80082d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082d8:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80082da:	2076      	movs	r0, #118	; 0x76
 80082dc:	183b      	adds	r3, r7, r0
 80082de:	683a      	ldr	r2, [r7, #0]
 80082e0:	8952      	ldrh	r2, [r2, #10]
 80082e2:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80082e4:	683b      	ldr	r3, [r7, #0]
 80082e6:	6959      	ldr	r1, [r3, #20]
 80082e8:	1d7b      	adds	r3, r7, #5
 80082ea:	33ff      	adds	r3, #255	; 0xff
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	b29c      	uxth	r4, r3
 80082f0:	183b      	adds	r3, r7, r0
 80082f2:	881a      	ldrh	r2, [r3, #0]
 80082f4:	6878      	ldr	r0, [r7, #4]
 80082f6:	0023      	movs	r3, r4
 80082f8:	f001 f8da 	bl	80094b0 <USB_WritePMA>
            ep->xfer_buff += len;
 80082fc:	683b      	ldr	r3, [r7, #0]
 80082fe:	695a      	ldr	r2, [r3, #20]
 8008300:	1d7b      	adds	r3, r7, #5
 8008302:	33ff      	adds	r3, #255	; 0xff
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	18d2      	adds	r2, r2, r3
 8008308:	683b      	ldr	r3, [r7, #0]
 800830a:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800830c:	683b      	ldr	r3, [r7, #0]
 800830e:	6a1a      	ldr	r2, [r3, #32]
 8008310:	683b      	ldr	r3, [r7, #0]
 8008312:	691b      	ldr	r3, [r3, #16]
 8008314:	429a      	cmp	r2, r3
 8008316:	d908      	bls.n	800832a <USB_EPStartXfer+0x262>
            {
              ep->xfer_len_db -= len;
 8008318:	683b      	ldr	r3, [r7, #0]
 800831a:	6a1a      	ldr	r2, [r3, #32]
 800831c:	1d7b      	adds	r3, r7, #5
 800831e:	33ff      	adds	r3, #255	; 0xff
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	1ad2      	subs	r2, r2, r3
 8008324:	683b      	ldr	r3, [r7, #0]
 8008326:	621a      	str	r2, [r3, #32]
 8008328:	e007      	b.n	800833a <USB_EPStartXfer+0x272>
            }
            else
            {
              len = ep->xfer_len_db;
 800832a:	683b      	ldr	r3, [r7, #0]
 800832c:	6a1b      	ldr	r3, [r3, #32]
 800832e:	1d7a      	adds	r2, r7, #5
 8008330:	32ff      	adds	r2, #255	; 0xff
 8008332:	6013      	str	r3, [r2, #0]
              ep->xfer_len_db = 0U;
 8008334:	683b      	ldr	r3, [r7, #0]
 8008336:	2200      	movs	r2, #0
 8008338:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800833a:	683b      	ldr	r3, [r7, #0]
 800833c:	785b      	ldrb	r3, [r3, #1]
 800833e:	2b00      	cmp	r3, #0
 8008340:	d166      	bne.n	8008410 <USB_EPStartXfer+0x348>
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	61bb      	str	r3, [r7, #24]
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	2250      	movs	r2, #80	; 0x50
 800834a:	5a9b      	ldrh	r3, [r3, r2]
 800834c:	b29b      	uxth	r3, r3
 800834e:	001a      	movs	r2, r3
 8008350:	69bb      	ldr	r3, [r7, #24]
 8008352:	189b      	adds	r3, r3, r2
 8008354:	61bb      	str	r3, [r7, #24]
 8008356:	683b      	ldr	r3, [r7, #0]
 8008358:	781b      	ldrb	r3, [r3, #0]
 800835a:	00da      	lsls	r2, r3, #3
 800835c:	69bb      	ldr	r3, [r7, #24]
 800835e:	18d3      	adds	r3, r2, r3
 8008360:	4a43      	ldr	r2, [pc, #268]	; (8008470 <USB_EPStartXfer+0x3a8>)
 8008362:	4694      	mov	ip, r2
 8008364:	4463      	add	r3, ip
 8008366:	617b      	str	r3, [r7, #20]
 8008368:	1d7b      	adds	r3, r7, #5
 800836a:	33ff      	adds	r3, #255	; 0xff
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	2b00      	cmp	r3, #0
 8008370:	d110      	bne.n	8008394 <USB_EPStartXfer+0x2cc>
 8008372:	697b      	ldr	r3, [r7, #20]
 8008374:	881b      	ldrh	r3, [r3, #0]
 8008376:	b29b      	uxth	r3, r3
 8008378:	4a41      	ldr	r2, [pc, #260]	; (8008480 <USB_EPStartXfer+0x3b8>)
 800837a:	4013      	ands	r3, r2
 800837c:	b29a      	uxth	r2, r3
 800837e:	697b      	ldr	r3, [r7, #20]
 8008380:	801a      	strh	r2, [r3, #0]
 8008382:	697b      	ldr	r3, [r7, #20]
 8008384:	881b      	ldrh	r3, [r3, #0]
 8008386:	b29b      	uxth	r3, r3
 8008388:	4a3e      	ldr	r2, [pc, #248]	; (8008484 <USB_EPStartXfer+0x3bc>)
 800838a:	4313      	orrs	r3, r2
 800838c:	b29a      	uxth	r2, r3
 800838e:	697b      	ldr	r3, [r7, #20]
 8008390:	801a      	strh	r2, [r3, #0]
 8008392:	e05a      	b.n	800844a <USB_EPStartXfer+0x382>
 8008394:	1d7b      	adds	r3, r7, #5
 8008396:	33ff      	adds	r3, #255	; 0xff
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	2b3e      	cmp	r3, #62	; 0x3e
 800839c:	d81a      	bhi.n	80083d4 <USB_EPStartXfer+0x30c>
 800839e:	1d7b      	adds	r3, r7, #5
 80083a0:	33ff      	adds	r3, #255	; 0xff
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	085b      	lsrs	r3, r3, #1
 80083a6:	21fc      	movs	r1, #252	; 0xfc
 80083a8:	187a      	adds	r2, r7, r1
 80083aa:	6013      	str	r3, [r2, #0]
 80083ac:	1d7b      	adds	r3, r7, #5
 80083ae:	33ff      	adds	r3, #255	; 0xff
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	2201      	movs	r2, #1
 80083b4:	4013      	ands	r3, r2
 80083b6:	d004      	beq.n	80083c2 <USB_EPStartXfer+0x2fa>
 80083b8:	187b      	adds	r3, r7, r1
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	3301      	adds	r3, #1
 80083be:	187a      	adds	r2, r7, r1
 80083c0:	6013      	str	r3, [r2, #0]
 80083c2:	23fc      	movs	r3, #252	; 0xfc
 80083c4:	18fb      	adds	r3, r7, r3
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	b29b      	uxth	r3, r3
 80083ca:	029b      	lsls	r3, r3, #10
 80083cc:	b29a      	uxth	r2, r3
 80083ce:	697b      	ldr	r3, [r7, #20]
 80083d0:	801a      	strh	r2, [r3, #0]
 80083d2:	e03a      	b.n	800844a <USB_EPStartXfer+0x382>
 80083d4:	1d7b      	adds	r3, r7, #5
 80083d6:	33ff      	adds	r3, #255	; 0xff
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	095b      	lsrs	r3, r3, #5
 80083dc:	21fc      	movs	r1, #252	; 0xfc
 80083de:	187a      	adds	r2, r7, r1
 80083e0:	6013      	str	r3, [r2, #0]
 80083e2:	1d7b      	adds	r3, r7, #5
 80083e4:	33ff      	adds	r3, #255	; 0xff
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	221f      	movs	r2, #31
 80083ea:	4013      	ands	r3, r2
 80083ec:	d104      	bne.n	80083f8 <USB_EPStartXfer+0x330>
 80083ee:	187b      	adds	r3, r7, r1
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	3b01      	subs	r3, #1
 80083f4:	187a      	adds	r2, r7, r1
 80083f6:	6013      	str	r3, [r2, #0]
 80083f8:	23fc      	movs	r3, #252	; 0xfc
 80083fa:	18fb      	adds	r3, r7, r3
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	b29b      	uxth	r3, r3
 8008400:	029b      	lsls	r3, r3, #10
 8008402:	b29b      	uxth	r3, r3
 8008404:	4a1f      	ldr	r2, [pc, #124]	; (8008484 <USB_EPStartXfer+0x3bc>)
 8008406:	4313      	orrs	r3, r2
 8008408:	b29a      	uxth	r2, r3
 800840a:	697b      	ldr	r3, [r7, #20]
 800840c:	801a      	strh	r2, [r3, #0]
 800840e:	e01c      	b.n	800844a <USB_EPStartXfer+0x382>
 8008410:	683b      	ldr	r3, [r7, #0]
 8008412:	785b      	ldrb	r3, [r3, #1]
 8008414:	2b01      	cmp	r3, #1
 8008416:	d118      	bne.n	800844a <USB_EPStartXfer+0x382>
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	623b      	str	r3, [r7, #32]
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	2250      	movs	r2, #80	; 0x50
 8008420:	5a9b      	ldrh	r3, [r3, r2]
 8008422:	b29b      	uxth	r3, r3
 8008424:	001a      	movs	r2, r3
 8008426:	6a3b      	ldr	r3, [r7, #32]
 8008428:	189b      	adds	r3, r3, r2
 800842a:	623b      	str	r3, [r7, #32]
 800842c:	683b      	ldr	r3, [r7, #0]
 800842e:	781b      	ldrb	r3, [r3, #0]
 8008430:	00da      	lsls	r2, r3, #3
 8008432:	6a3b      	ldr	r3, [r7, #32]
 8008434:	18d3      	adds	r3, r2, r3
 8008436:	4a0e      	ldr	r2, [pc, #56]	; (8008470 <USB_EPStartXfer+0x3a8>)
 8008438:	4694      	mov	ip, r2
 800843a:	4463      	add	r3, ip
 800843c:	61fb      	str	r3, [r7, #28]
 800843e:	1d7b      	adds	r3, r7, #5
 8008440:	33ff      	adds	r3, #255	; 0xff
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	b29a      	uxth	r2, r3
 8008446:	69fb      	ldr	r3, [r7, #28]
 8008448:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800844a:	2076      	movs	r0, #118	; 0x76
 800844c:	183b      	adds	r3, r7, r0
 800844e:	683a      	ldr	r2, [r7, #0]
 8008450:	8912      	ldrh	r2, [r2, #8]
 8008452:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008454:	683b      	ldr	r3, [r7, #0]
 8008456:	6959      	ldr	r1, [r3, #20]
 8008458:	1d7b      	adds	r3, r7, #5
 800845a:	33ff      	adds	r3, #255	; 0xff
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	b29c      	uxth	r4, r3
 8008460:	183b      	adds	r3, r7, r0
 8008462:	881a      	ldrh	r2, [r3, #0]
 8008464:	6878      	ldr	r0, [r7, #4]
 8008466:	0023      	movs	r3, r4
 8008468:	f001 f822 	bl	80094b0 <USB_WritePMA>
 800846c:	e301      	b.n	8008a72 <USB_EPStartXfer+0x9aa>
 800846e:	46c0      	nop			; (mov r8, r8)
 8008470:	00000402 	.word	0x00000402
 8008474:	ffff8f8f 	.word	0xffff8f8f
 8008478:	ffff8180 	.word	0xffff8180
 800847c:	00000406 	.word	0x00000406
 8008480:	ffff83ff 	.word	0xffff83ff
 8008484:	ffff8000 	.word	0xffff8000
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8008488:	683b      	ldr	r3, [r7, #0]
 800848a:	785b      	ldrb	r3, [r3, #1]
 800848c:	2b00      	cmp	r3, #0
 800848e:	d166      	bne.n	800855e <USB_EPStartXfer+0x496>
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	64bb      	str	r3, [r7, #72]	; 0x48
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	2250      	movs	r2, #80	; 0x50
 8008498:	5a9b      	ldrh	r3, [r3, r2]
 800849a:	b29b      	uxth	r3, r3
 800849c:	001a      	movs	r2, r3
 800849e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80084a0:	189b      	adds	r3, r3, r2
 80084a2:	64bb      	str	r3, [r7, #72]	; 0x48
 80084a4:	683b      	ldr	r3, [r7, #0]
 80084a6:	781b      	ldrb	r3, [r3, #0]
 80084a8:	00da      	lsls	r2, r3, #3
 80084aa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80084ac:	18d3      	adds	r3, r2, r3
 80084ae:	4ac3      	ldr	r2, [pc, #780]	; (80087bc <USB_EPStartXfer+0x6f4>)
 80084b0:	4694      	mov	ip, r2
 80084b2:	4463      	add	r3, ip
 80084b4:	647b      	str	r3, [r7, #68]	; 0x44
 80084b6:	1d7b      	adds	r3, r7, #5
 80084b8:	33ff      	adds	r3, #255	; 0xff
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	2b00      	cmp	r3, #0
 80084be:	d110      	bne.n	80084e2 <USB_EPStartXfer+0x41a>
 80084c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80084c2:	881b      	ldrh	r3, [r3, #0]
 80084c4:	b29b      	uxth	r3, r3
 80084c6:	4abe      	ldr	r2, [pc, #760]	; (80087c0 <USB_EPStartXfer+0x6f8>)
 80084c8:	4013      	ands	r3, r2
 80084ca:	b29a      	uxth	r2, r3
 80084cc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80084ce:	801a      	strh	r2, [r3, #0]
 80084d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80084d2:	881b      	ldrh	r3, [r3, #0]
 80084d4:	b29b      	uxth	r3, r3
 80084d6:	4abb      	ldr	r2, [pc, #748]	; (80087c4 <USB_EPStartXfer+0x6fc>)
 80084d8:	4313      	orrs	r3, r2
 80084da:	b29a      	uxth	r2, r3
 80084dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80084de:	801a      	strh	r2, [r3, #0]
 80084e0:	e05a      	b.n	8008598 <USB_EPStartXfer+0x4d0>
 80084e2:	1d7b      	adds	r3, r7, #5
 80084e4:	33ff      	adds	r3, #255	; 0xff
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	2b3e      	cmp	r3, #62	; 0x3e
 80084ea:	d81a      	bhi.n	8008522 <USB_EPStartXfer+0x45a>
 80084ec:	1d7b      	adds	r3, r7, #5
 80084ee:	33ff      	adds	r3, #255	; 0xff
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	085b      	lsrs	r3, r3, #1
 80084f4:	21f8      	movs	r1, #248	; 0xf8
 80084f6:	187a      	adds	r2, r7, r1
 80084f8:	6013      	str	r3, [r2, #0]
 80084fa:	1d7b      	adds	r3, r7, #5
 80084fc:	33ff      	adds	r3, #255	; 0xff
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	2201      	movs	r2, #1
 8008502:	4013      	ands	r3, r2
 8008504:	d004      	beq.n	8008510 <USB_EPStartXfer+0x448>
 8008506:	187b      	adds	r3, r7, r1
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	3301      	adds	r3, #1
 800850c:	187a      	adds	r2, r7, r1
 800850e:	6013      	str	r3, [r2, #0]
 8008510:	23f8      	movs	r3, #248	; 0xf8
 8008512:	18fb      	adds	r3, r7, r3
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	b29b      	uxth	r3, r3
 8008518:	029b      	lsls	r3, r3, #10
 800851a:	b29a      	uxth	r2, r3
 800851c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800851e:	801a      	strh	r2, [r3, #0]
 8008520:	e03a      	b.n	8008598 <USB_EPStartXfer+0x4d0>
 8008522:	1d7b      	adds	r3, r7, #5
 8008524:	33ff      	adds	r3, #255	; 0xff
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	095b      	lsrs	r3, r3, #5
 800852a:	21f8      	movs	r1, #248	; 0xf8
 800852c:	187a      	adds	r2, r7, r1
 800852e:	6013      	str	r3, [r2, #0]
 8008530:	1d7b      	adds	r3, r7, #5
 8008532:	33ff      	adds	r3, #255	; 0xff
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	221f      	movs	r2, #31
 8008538:	4013      	ands	r3, r2
 800853a:	d104      	bne.n	8008546 <USB_EPStartXfer+0x47e>
 800853c:	187b      	adds	r3, r7, r1
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	3b01      	subs	r3, #1
 8008542:	187a      	adds	r2, r7, r1
 8008544:	6013      	str	r3, [r2, #0]
 8008546:	23f8      	movs	r3, #248	; 0xf8
 8008548:	18fb      	adds	r3, r7, r3
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	b29b      	uxth	r3, r3
 800854e:	029b      	lsls	r3, r3, #10
 8008550:	b29b      	uxth	r3, r3
 8008552:	4a9c      	ldr	r2, [pc, #624]	; (80087c4 <USB_EPStartXfer+0x6fc>)
 8008554:	4313      	orrs	r3, r2
 8008556:	b29a      	uxth	r2, r3
 8008558:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800855a:	801a      	strh	r2, [r3, #0]
 800855c:	e01c      	b.n	8008598 <USB_EPStartXfer+0x4d0>
 800855e:	683b      	ldr	r3, [r7, #0]
 8008560:	785b      	ldrb	r3, [r3, #1]
 8008562:	2b01      	cmp	r3, #1
 8008564:	d118      	bne.n	8008598 <USB_EPStartXfer+0x4d0>
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	653b      	str	r3, [r7, #80]	; 0x50
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	2250      	movs	r2, #80	; 0x50
 800856e:	5a9b      	ldrh	r3, [r3, r2]
 8008570:	b29b      	uxth	r3, r3
 8008572:	001a      	movs	r2, r3
 8008574:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008576:	189b      	adds	r3, r3, r2
 8008578:	653b      	str	r3, [r7, #80]	; 0x50
 800857a:	683b      	ldr	r3, [r7, #0]
 800857c:	781b      	ldrb	r3, [r3, #0]
 800857e:	00da      	lsls	r2, r3, #3
 8008580:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008582:	18d3      	adds	r3, r2, r3
 8008584:	4a8d      	ldr	r2, [pc, #564]	; (80087bc <USB_EPStartXfer+0x6f4>)
 8008586:	4694      	mov	ip, r2
 8008588:	4463      	add	r3, ip
 800858a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800858c:	1d7b      	adds	r3, r7, #5
 800858e:	33ff      	adds	r3, #255	; 0xff
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	b29a      	uxth	r2, r3
 8008594:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008596:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8008598:	2076      	movs	r0, #118	; 0x76
 800859a:	183b      	adds	r3, r7, r0
 800859c:	683a      	ldr	r2, [r7, #0]
 800859e:	8912      	ldrh	r2, [r2, #8]
 80085a0:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80085a2:	683b      	ldr	r3, [r7, #0]
 80085a4:	6959      	ldr	r1, [r3, #20]
 80085a6:	1d7b      	adds	r3, r7, #5
 80085a8:	33ff      	adds	r3, #255	; 0xff
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	b29c      	uxth	r4, r3
 80085ae:	183b      	adds	r3, r7, r0
 80085b0:	881a      	ldrh	r2, [r3, #0]
 80085b2:	6878      	ldr	r0, [r7, #4]
 80085b4:	0023      	movs	r3, r4
 80085b6:	f000 ff7b 	bl	80094b0 <USB_WritePMA>
            ep->xfer_buff += len;
 80085ba:	683b      	ldr	r3, [r7, #0]
 80085bc:	695a      	ldr	r2, [r3, #20]
 80085be:	1d7b      	adds	r3, r7, #5
 80085c0:	33ff      	adds	r3, #255	; 0xff
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	18d2      	adds	r2, r2, r3
 80085c6:	683b      	ldr	r3, [r7, #0]
 80085c8:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80085ca:	683b      	ldr	r3, [r7, #0]
 80085cc:	6a1a      	ldr	r2, [r3, #32]
 80085ce:	683b      	ldr	r3, [r7, #0]
 80085d0:	691b      	ldr	r3, [r3, #16]
 80085d2:	429a      	cmp	r2, r3
 80085d4:	d908      	bls.n	80085e8 <USB_EPStartXfer+0x520>
            {
              ep->xfer_len_db -= len;
 80085d6:	683b      	ldr	r3, [r7, #0]
 80085d8:	6a1a      	ldr	r2, [r3, #32]
 80085da:	1d7b      	adds	r3, r7, #5
 80085dc:	33ff      	adds	r3, #255	; 0xff
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	1ad2      	subs	r2, r2, r3
 80085e2:	683b      	ldr	r3, [r7, #0]
 80085e4:	621a      	str	r2, [r3, #32]
 80085e6:	e007      	b.n	80085f8 <USB_EPStartXfer+0x530>
            }
            else
            {
              len = ep->xfer_len_db;
 80085e8:	683b      	ldr	r3, [r7, #0]
 80085ea:	6a1b      	ldr	r3, [r3, #32]
 80085ec:	1d7a      	adds	r2, r7, #5
 80085ee:	32ff      	adds	r2, #255	; 0xff
 80085f0:	6013      	str	r3, [r2, #0]
              ep->xfer_len_db = 0U;
 80085f2:	683b      	ldr	r3, [r7, #0]
 80085f4:	2200      	movs	r2, #0
 80085f6:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	643b      	str	r3, [r7, #64]	; 0x40
 80085fc:	683b      	ldr	r3, [r7, #0]
 80085fe:	785b      	ldrb	r3, [r3, #1]
 8008600:	2b00      	cmp	r3, #0
 8008602:	d166      	bne.n	80086d2 <USB_EPStartXfer+0x60a>
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	63bb      	str	r3, [r7, #56]	; 0x38
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	2250      	movs	r2, #80	; 0x50
 800860c:	5a9b      	ldrh	r3, [r3, r2]
 800860e:	b29b      	uxth	r3, r3
 8008610:	001a      	movs	r2, r3
 8008612:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008614:	189b      	adds	r3, r3, r2
 8008616:	63bb      	str	r3, [r7, #56]	; 0x38
 8008618:	683b      	ldr	r3, [r7, #0]
 800861a:	781b      	ldrb	r3, [r3, #0]
 800861c:	00da      	lsls	r2, r3, #3
 800861e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008620:	18d3      	adds	r3, r2, r3
 8008622:	4a69      	ldr	r2, [pc, #420]	; (80087c8 <USB_EPStartXfer+0x700>)
 8008624:	4694      	mov	ip, r2
 8008626:	4463      	add	r3, ip
 8008628:	637b      	str	r3, [r7, #52]	; 0x34
 800862a:	1d7b      	adds	r3, r7, #5
 800862c:	33ff      	adds	r3, #255	; 0xff
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	2b00      	cmp	r3, #0
 8008632:	d110      	bne.n	8008656 <USB_EPStartXfer+0x58e>
 8008634:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008636:	881b      	ldrh	r3, [r3, #0]
 8008638:	b29b      	uxth	r3, r3
 800863a:	4a61      	ldr	r2, [pc, #388]	; (80087c0 <USB_EPStartXfer+0x6f8>)
 800863c:	4013      	ands	r3, r2
 800863e:	b29a      	uxth	r2, r3
 8008640:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008642:	801a      	strh	r2, [r3, #0]
 8008644:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008646:	881b      	ldrh	r3, [r3, #0]
 8008648:	b29b      	uxth	r3, r3
 800864a:	4a5e      	ldr	r2, [pc, #376]	; (80087c4 <USB_EPStartXfer+0x6fc>)
 800864c:	4313      	orrs	r3, r2
 800864e:	b29a      	uxth	r2, r3
 8008650:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008652:	801a      	strh	r2, [r3, #0]
 8008654:	e058      	b.n	8008708 <USB_EPStartXfer+0x640>
 8008656:	1d7b      	adds	r3, r7, #5
 8008658:	33ff      	adds	r3, #255	; 0xff
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	2b3e      	cmp	r3, #62	; 0x3e
 800865e:	d81a      	bhi.n	8008696 <USB_EPStartXfer+0x5ce>
 8008660:	1d7b      	adds	r3, r7, #5
 8008662:	33ff      	adds	r3, #255	; 0xff
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	085b      	lsrs	r3, r3, #1
 8008668:	21f4      	movs	r1, #244	; 0xf4
 800866a:	187a      	adds	r2, r7, r1
 800866c:	6013      	str	r3, [r2, #0]
 800866e:	1d7b      	adds	r3, r7, #5
 8008670:	33ff      	adds	r3, #255	; 0xff
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	2201      	movs	r2, #1
 8008676:	4013      	ands	r3, r2
 8008678:	d004      	beq.n	8008684 <USB_EPStartXfer+0x5bc>
 800867a:	187b      	adds	r3, r7, r1
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	3301      	adds	r3, #1
 8008680:	187a      	adds	r2, r7, r1
 8008682:	6013      	str	r3, [r2, #0]
 8008684:	23f4      	movs	r3, #244	; 0xf4
 8008686:	18fb      	adds	r3, r7, r3
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	b29b      	uxth	r3, r3
 800868c:	029b      	lsls	r3, r3, #10
 800868e:	b29a      	uxth	r2, r3
 8008690:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008692:	801a      	strh	r2, [r3, #0]
 8008694:	e038      	b.n	8008708 <USB_EPStartXfer+0x640>
 8008696:	1d7b      	adds	r3, r7, #5
 8008698:	33ff      	adds	r3, #255	; 0xff
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	095b      	lsrs	r3, r3, #5
 800869e:	21f4      	movs	r1, #244	; 0xf4
 80086a0:	187a      	adds	r2, r7, r1
 80086a2:	6013      	str	r3, [r2, #0]
 80086a4:	1d7b      	adds	r3, r7, #5
 80086a6:	33ff      	adds	r3, #255	; 0xff
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	221f      	movs	r2, #31
 80086ac:	4013      	ands	r3, r2
 80086ae:	d104      	bne.n	80086ba <USB_EPStartXfer+0x5f2>
 80086b0:	187b      	adds	r3, r7, r1
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	3b01      	subs	r3, #1
 80086b6:	187a      	adds	r2, r7, r1
 80086b8:	6013      	str	r3, [r2, #0]
 80086ba:	23f4      	movs	r3, #244	; 0xf4
 80086bc:	18fb      	adds	r3, r7, r3
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	b29b      	uxth	r3, r3
 80086c2:	029b      	lsls	r3, r3, #10
 80086c4:	b29b      	uxth	r3, r3
 80086c6:	4a3f      	ldr	r2, [pc, #252]	; (80087c4 <USB_EPStartXfer+0x6fc>)
 80086c8:	4313      	orrs	r3, r2
 80086ca:	b29a      	uxth	r2, r3
 80086cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80086ce:	801a      	strh	r2, [r3, #0]
 80086d0:	e01a      	b.n	8008708 <USB_EPStartXfer+0x640>
 80086d2:	683b      	ldr	r3, [r7, #0]
 80086d4:	785b      	ldrb	r3, [r3, #1]
 80086d6:	2b01      	cmp	r3, #1
 80086d8:	d116      	bne.n	8008708 <USB_EPStartXfer+0x640>
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	2250      	movs	r2, #80	; 0x50
 80086de:	5a9b      	ldrh	r3, [r3, r2]
 80086e0:	b29b      	uxth	r3, r3
 80086e2:	001a      	movs	r2, r3
 80086e4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80086e6:	189b      	adds	r3, r3, r2
 80086e8:	643b      	str	r3, [r7, #64]	; 0x40
 80086ea:	683b      	ldr	r3, [r7, #0]
 80086ec:	781b      	ldrb	r3, [r3, #0]
 80086ee:	00da      	lsls	r2, r3, #3
 80086f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80086f2:	18d3      	adds	r3, r2, r3
 80086f4:	4a34      	ldr	r2, [pc, #208]	; (80087c8 <USB_EPStartXfer+0x700>)
 80086f6:	4694      	mov	ip, r2
 80086f8:	4463      	add	r3, ip
 80086fa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80086fc:	1d7b      	adds	r3, r7, #5
 80086fe:	33ff      	adds	r3, #255	; 0xff
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	b29a      	uxth	r2, r3
 8008704:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008706:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8008708:	2076      	movs	r0, #118	; 0x76
 800870a:	183b      	adds	r3, r7, r0
 800870c:	683a      	ldr	r2, [r7, #0]
 800870e:	8952      	ldrh	r2, [r2, #10]
 8008710:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008712:	683b      	ldr	r3, [r7, #0]
 8008714:	6959      	ldr	r1, [r3, #20]
 8008716:	1d7b      	adds	r3, r7, #5
 8008718:	33ff      	adds	r3, #255	; 0xff
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	b29c      	uxth	r4, r3
 800871e:	183b      	adds	r3, r7, r0
 8008720:	881a      	ldrh	r2, [r3, #0]
 8008722:	6878      	ldr	r0, [r7, #4]
 8008724:	0023      	movs	r3, r4
 8008726:	f000 fec3 	bl	80094b0 <USB_WritePMA>
 800872a:	e1a2      	b.n	8008a72 <USB_EPStartXfer+0x9aa>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800872c:	683b      	ldr	r3, [r7, #0]
 800872e:	6a1b      	ldr	r3, [r3, #32]
 8008730:	1d7a      	adds	r2, r7, #5
 8008732:	32ff      	adds	r2, #255	; 0xff
 8008734:	6013      	str	r3, [r2, #0]

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8008736:	687a      	ldr	r2, [r7, #4]
 8008738:	683b      	ldr	r3, [r7, #0]
 800873a:	781b      	ldrb	r3, [r3, #0]
 800873c:	009b      	lsls	r3, r3, #2
 800873e:	18d3      	adds	r3, r2, r3
 8008740:	881b      	ldrh	r3, [r3, #0]
 8008742:	b29a      	uxth	r2, r3
 8008744:	2062      	movs	r0, #98	; 0x62
 8008746:	183b      	adds	r3, r7, r0
 8008748:	4920      	ldr	r1, [pc, #128]	; (80087cc <USB_EPStartXfer+0x704>)
 800874a:	400a      	ands	r2, r1
 800874c:	801a      	strh	r2, [r3, #0]
 800874e:	687a      	ldr	r2, [r7, #4]
 8008750:	683b      	ldr	r3, [r7, #0]
 8008752:	781b      	ldrb	r3, [r3, #0]
 8008754:	009b      	lsls	r3, r3, #2
 8008756:	18d3      	adds	r3, r2, r3
 8008758:	183a      	adds	r2, r7, r0
 800875a:	8812      	ldrh	r2, [r2, #0]
 800875c:	491c      	ldr	r1, [pc, #112]	; (80087d0 <USB_EPStartXfer+0x708>)
 800875e:	430a      	orrs	r2, r1
 8008760:	b292      	uxth	r2, r2
 8008762:	801a      	strh	r2, [r3, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	2250      	movs	r2, #80	; 0x50
 800876c:	5a9b      	ldrh	r3, [r3, r2]
 800876e:	b29b      	uxth	r3, r3
 8008770:	001a      	movs	r2, r3
 8008772:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008774:	189b      	adds	r3, r3, r2
 8008776:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008778:	683b      	ldr	r3, [r7, #0]
 800877a:	781b      	ldrb	r3, [r3, #0]
 800877c:	00da      	lsls	r2, r3, #3
 800877e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008780:	18d3      	adds	r3, r2, r3
 8008782:	4a0e      	ldr	r2, [pc, #56]	; (80087bc <USB_EPStartXfer+0x6f4>)
 8008784:	4694      	mov	ip, r2
 8008786:	4463      	add	r3, ip
 8008788:	65bb      	str	r3, [r7, #88]	; 0x58
 800878a:	1d7b      	adds	r3, r7, #5
 800878c:	33ff      	adds	r3, #255	; 0xff
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	b29a      	uxth	r2, r3
 8008792:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008794:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8008796:	2076      	movs	r0, #118	; 0x76
 8008798:	183b      	adds	r3, r7, r0
 800879a:	683a      	ldr	r2, [r7, #0]
 800879c:	8912      	ldrh	r2, [r2, #8]
 800879e:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80087a0:	683b      	ldr	r3, [r7, #0]
 80087a2:	6959      	ldr	r1, [r3, #20]
 80087a4:	1d7b      	adds	r3, r7, #5
 80087a6:	33ff      	adds	r3, #255	; 0xff
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	b29c      	uxth	r4, r3
 80087ac:	183b      	adds	r3, r7, r0
 80087ae:	881a      	ldrh	r2, [r3, #0]
 80087b0:	6878      	ldr	r0, [r7, #4]
 80087b2:	0023      	movs	r3, r4
 80087b4:	f000 fe7c 	bl	80094b0 <USB_WritePMA>
 80087b8:	e15b      	b.n	8008a72 <USB_EPStartXfer+0x9aa>
 80087ba:	46c0      	nop			; (mov r8, r8)
 80087bc:	00000402 	.word	0x00000402
 80087c0:	ffff83ff 	.word	0xffff83ff
 80087c4:	ffff8000 	.word	0xffff8000
 80087c8:	00000406 	.word	0x00000406
 80087cc:	ffff8e8f 	.word	0xffff8e8f
 80087d0:	ffff8080 	.word	0xffff8080
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 80087d4:	683b      	ldr	r3, [r7, #0]
 80087d6:	6a1a      	ldr	r2, [r3, #32]
 80087d8:	1d7b      	adds	r3, r7, #5
 80087da:	33ff      	adds	r3, #255	; 0xff
 80087dc:	681b      	ldr	r3, [r3, #0]
 80087de:	1ad2      	subs	r2, r2, r3
 80087e0:	683b      	ldr	r3, [r7, #0]
 80087e2:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80087e4:	687a      	ldr	r2, [r7, #4]
 80087e6:	683b      	ldr	r3, [r7, #0]
 80087e8:	781b      	ldrb	r3, [r3, #0]
 80087ea:	009b      	lsls	r3, r3, #2
 80087ec:	18d3      	adds	r3, r2, r3
 80087ee:	881b      	ldrh	r3, [r3, #0]
 80087f0:	b29b      	uxth	r3, r3
 80087f2:	001a      	movs	r2, r3
 80087f4:	2340      	movs	r3, #64	; 0x40
 80087f6:	4013      	ands	r3, r2
 80087f8:	d100      	bne.n	80087fc <USB_EPStartXfer+0x734>
 80087fa:	e099      	b.n	8008930 <USB_EPStartXfer+0x868>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	673b      	str	r3, [r7, #112]	; 0x70
 8008800:	683b      	ldr	r3, [r7, #0]
 8008802:	785b      	ldrb	r3, [r3, #1]
 8008804:	2b00      	cmp	r3, #0
 8008806:	d166      	bne.n	80088d6 <USB_EPStartXfer+0x80e>
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	66bb      	str	r3, [r7, #104]	; 0x68
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	2250      	movs	r2, #80	; 0x50
 8008810:	5a9b      	ldrh	r3, [r3, r2]
 8008812:	b29b      	uxth	r3, r3
 8008814:	001a      	movs	r2, r3
 8008816:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008818:	189b      	adds	r3, r3, r2
 800881a:	66bb      	str	r3, [r7, #104]	; 0x68
 800881c:	683b      	ldr	r3, [r7, #0]
 800881e:	781b      	ldrb	r3, [r3, #0]
 8008820:	00da      	lsls	r2, r3, #3
 8008822:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008824:	18d3      	adds	r3, r2, r3
 8008826:	4ad0      	ldr	r2, [pc, #832]	; (8008b68 <USB_EPStartXfer+0xaa0>)
 8008828:	4694      	mov	ip, r2
 800882a:	4463      	add	r3, ip
 800882c:	667b      	str	r3, [r7, #100]	; 0x64
 800882e:	1d7b      	adds	r3, r7, #5
 8008830:	33ff      	adds	r3, #255	; 0xff
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	2b00      	cmp	r3, #0
 8008836:	d110      	bne.n	800885a <USB_EPStartXfer+0x792>
 8008838:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800883a:	881b      	ldrh	r3, [r3, #0]
 800883c:	b29b      	uxth	r3, r3
 800883e:	4acb      	ldr	r2, [pc, #812]	; (8008b6c <USB_EPStartXfer+0xaa4>)
 8008840:	4013      	ands	r3, r2
 8008842:	b29a      	uxth	r2, r3
 8008844:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008846:	801a      	strh	r2, [r3, #0]
 8008848:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800884a:	881b      	ldrh	r3, [r3, #0]
 800884c:	b29b      	uxth	r3, r3
 800884e:	4ac8      	ldr	r2, [pc, #800]	; (8008b70 <USB_EPStartXfer+0xaa8>)
 8008850:	4313      	orrs	r3, r2
 8008852:	b29a      	uxth	r2, r3
 8008854:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008856:	801a      	strh	r2, [r3, #0]
 8008858:	e058      	b.n	800890c <USB_EPStartXfer+0x844>
 800885a:	1d7b      	adds	r3, r7, #5
 800885c:	33ff      	adds	r3, #255	; 0xff
 800885e:	681b      	ldr	r3, [r3, #0]
 8008860:	2b3e      	cmp	r3, #62	; 0x3e
 8008862:	d81a      	bhi.n	800889a <USB_EPStartXfer+0x7d2>
 8008864:	1d7b      	adds	r3, r7, #5
 8008866:	33ff      	adds	r3, #255	; 0xff
 8008868:	681b      	ldr	r3, [r3, #0]
 800886a:	085b      	lsrs	r3, r3, #1
 800886c:	21f0      	movs	r1, #240	; 0xf0
 800886e:	187a      	adds	r2, r7, r1
 8008870:	6013      	str	r3, [r2, #0]
 8008872:	1d7b      	adds	r3, r7, #5
 8008874:	33ff      	adds	r3, #255	; 0xff
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	2201      	movs	r2, #1
 800887a:	4013      	ands	r3, r2
 800887c:	d004      	beq.n	8008888 <USB_EPStartXfer+0x7c0>
 800887e:	187b      	adds	r3, r7, r1
 8008880:	681b      	ldr	r3, [r3, #0]
 8008882:	3301      	adds	r3, #1
 8008884:	187a      	adds	r2, r7, r1
 8008886:	6013      	str	r3, [r2, #0]
 8008888:	23f0      	movs	r3, #240	; 0xf0
 800888a:	18fb      	adds	r3, r7, r3
 800888c:	681b      	ldr	r3, [r3, #0]
 800888e:	b29b      	uxth	r3, r3
 8008890:	029b      	lsls	r3, r3, #10
 8008892:	b29a      	uxth	r2, r3
 8008894:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008896:	801a      	strh	r2, [r3, #0]
 8008898:	e038      	b.n	800890c <USB_EPStartXfer+0x844>
 800889a:	1d7b      	adds	r3, r7, #5
 800889c:	33ff      	adds	r3, #255	; 0xff
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	095b      	lsrs	r3, r3, #5
 80088a2:	21f0      	movs	r1, #240	; 0xf0
 80088a4:	187a      	adds	r2, r7, r1
 80088a6:	6013      	str	r3, [r2, #0]
 80088a8:	1d7b      	adds	r3, r7, #5
 80088aa:	33ff      	adds	r3, #255	; 0xff
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	221f      	movs	r2, #31
 80088b0:	4013      	ands	r3, r2
 80088b2:	d104      	bne.n	80088be <USB_EPStartXfer+0x7f6>
 80088b4:	187b      	adds	r3, r7, r1
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	3b01      	subs	r3, #1
 80088ba:	187a      	adds	r2, r7, r1
 80088bc:	6013      	str	r3, [r2, #0]
 80088be:	23f0      	movs	r3, #240	; 0xf0
 80088c0:	18fb      	adds	r3, r7, r3
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	b29b      	uxth	r3, r3
 80088c6:	029b      	lsls	r3, r3, #10
 80088c8:	b29b      	uxth	r3, r3
 80088ca:	4aa9      	ldr	r2, [pc, #676]	; (8008b70 <USB_EPStartXfer+0xaa8>)
 80088cc:	4313      	orrs	r3, r2
 80088ce:	b29a      	uxth	r2, r3
 80088d0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80088d2:	801a      	strh	r2, [r3, #0]
 80088d4:	e01a      	b.n	800890c <USB_EPStartXfer+0x844>
 80088d6:	683b      	ldr	r3, [r7, #0]
 80088d8:	785b      	ldrb	r3, [r3, #1]
 80088da:	2b01      	cmp	r3, #1
 80088dc:	d116      	bne.n	800890c <USB_EPStartXfer+0x844>
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	2250      	movs	r2, #80	; 0x50
 80088e2:	5a9b      	ldrh	r3, [r3, r2]
 80088e4:	b29b      	uxth	r3, r3
 80088e6:	001a      	movs	r2, r3
 80088e8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80088ea:	189b      	adds	r3, r3, r2
 80088ec:	673b      	str	r3, [r7, #112]	; 0x70
 80088ee:	683b      	ldr	r3, [r7, #0]
 80088f0:	781b      	ldrb	r3, [r3, #0]
 80088f2:	00da      	lsls	r2, r3, #3
 80088f4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80088f6:	18d3      	adds	r3, r2, r3
 80088f8:	4a9b      	ldr	r2, [pc, #620]	; (8008b68 <USB_EPStartXfer+0xaa0>)
 80088fa:	4694      	mov	ip, r2
 80088fc:	4463      	add	r3, ip
 80088fe:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008900:	1d7b      	adds	r3, r7, #5
 8008902:	33ff      	adds	r3, #255	; 0xff
 8008904:	681b      	ldr	r3, [r3, #0]
 8008906:	b29a      	uxth	r2, r3
 8008908:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800890a:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800890c:	2076      	movs	r0, #118	; 0x76
 800890e:	183b      	adds	r3, r7, r0
 8008910:	683a      	ldr	r2, [r7, #0]
 8008912:	8952      	ldrh	r2, [r2, #10]
 8008914:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008916:	683b      	ldr	r3, [r7, #0]
 8008918:	6959      	ldr	r1, [r3, #20]
 800891a:	1d7b      	adds	r3, r7, #5
 800891c:	33ff      	adds	r3, #255	; 0xff
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	b29c      	uxth	r4, r3
 8008922:	183b      	adds	r3, r7, r0
 8008924:	881a      	ldrh	r2, [r3, #0]
 8008926:	6878      	ldr	r0, [r7, #4]
 8008928:	0023      	movs	r3, r4
 800892a:	f000 fdc1 	bl	80094b0 <USB_WritePMA>
 800892e:	e0a0      	b.n	8008a72 <USB_EPStartXfer+0x9aa>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8008930:	683b      	ldr	r3, [r7, #0]
 8008932:	785b      	ldrb	r3, [r3, #1]
 8008934:	2b00      	cmp	r3, #0
 8008936:	d166      	bne.n	8008a06 <USB_EPStartXfer+0x93e>
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	2250      	movs	r2, #80	; 0x50
 8008940:	5a9b      	ldrh	r3, [r3, r2]
 8008942:	b29b      	uxth	r3, r3
 8008944:	001a      	movs	r2, r3
 8008946:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008948:	189b      	adds	r3, r3, r2
 800894a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800894c:	683b      	ldr	r3, [r7, #0]
 800894e:	781b      	ldrb	r3, [r3, #0]
 8008950:	00da      	lsls	r2, r3, #3
 8008952:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008954:	18d3      	adds	r3, r2, r3
 8008956:	4a87      	ldr	r2, [pc, #540]	; (8008b74 <USB_EPStartXfer+0xaac>)
 8008958:	4694      	mov	ip, r2
 800895a:	4463      	add	r3, ip
 800895c:	67bb      	str	r3, [r7, #120]	; 0x78
 800895e:	1d7b      	adds	r3, r7, #5
 8008960:	33ff      	adds	r3, #255	; 0xff
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	2b00      	cmp	r3, #0
 8008966:	d110      	bne.n	800898a <USB_EPStartXfer+0x8c2>
 8008968:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800896a:	881b      	ldrh	r3, [r3, #0]
 800896c:	b29b      	uxth	r3, r3
 800896e:	4a7f      	ldr	r2, [pc, #508]	; (8008b6c <USB_EPStartXfer+0xaa4>)
 8008970:	4013      	ands	r3, r2
 8008972:	b29a      	uxth	r2, r3
 8008974:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008976:	801a      	strh	r2, [r3, #0]
 8008978:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800897a:	881b      	ldrh	r3, [r3, #0]
 800897c:	b29b      	uxth	r3, r3
 800897e:	4a7c      	ldr	r2, [pc, #496]	; (8008b70 <USB_EPStartXfer+0xaa8>)
 8008980:	4313      	orrs	r3, r2
 8008982:	b29a      	uxth	r2, r3
 8008984:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008986:	801a      	strh	r2, [r3, #0]
 8008988:	e062      	b.n	8008a50 <USB_EPStartXfer+0x988>
 800898a:	1d7b      	adds	r3, r7, #5
 800898c:	33ff      	adds	r3, #255	; 0xff
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	2b3e      	cmp	r3, #62	; 0x3e
 8008992:	d81a      	bhi.n	80089ca <USB_EPStartXfer+0x902>
 8008994:	1d7b      	adds	r3, r7, #5
 8008996:	33ff      	adds	r3, #255	; 0xff
 8008998:	681b      	ldr	r3, [r3, #0]
 800899a:	085b      	lsrs	r3, r3, #1
 800899c:	21ec      	movs	r1, #236	; 0xec
 800899e:	187a      	adds	r2, r7, r1
 80089a0:	6013      	str	r3, [r2, #0]
 80089a2:	1d7b      	adds	r3, r7, #5
 80089a4:	33ff      	adds	r3, #255	; 0xff
 80089a6:	681b      	ldr	r3, [r3, #0]
 80089a8:	2201      	movs	r2, #1
 80089aa:	4013      	ands	r3, r2
 80089ac:	d004      	beq.n	80089b8 <USB_EPStartXfer+0x8f0>
 80089ae:	187b      	adds	r3, r7, r1
 80089b0:	681b      	ldr	r3, [r3, #0]
 80089b2:	3301      	adds	r3, #1
 80089b4:	187a      	adds	r2, r7, r1
 80089b6:	6013      	str	r3, [r2, #0]
 80089b8:	23ec      	movs	r3, #236	; 0xec
 80089ba:	18fb      	adds	r3, r7, r3
 80089bc:	681b      	ldr	r3, [r3, #0]
 80089be:	b29b      	uxth	r3, r3
 80089c0:	029b      	lsls	r3, r3, #10
 80089c2:	b29a      	uxth	r2, r3
 80089c4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80089c6:	801a      	strh	r2, [r3, #0]
 80089c8:	e042      	b.n	8008a50 <USB_EPStartXfer+0x988>
 80089ca:	1d7b      	adds	r3, r7, #5
 80089cc:	33ff      	adds	r3, #255	; 0xff
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	095b      	lsrs	r3, r3, #5
 80089d2:	21ec      	movs	r1, #236	; 0xec
 80089d4:	187a      	adds	r2, r7, r1
 80089d6:	6013      	str	r3, [r2, #0]
 80089d8:	1d7b      	adds	r3, r7, #5
 80089da:	33ff      	adds	r3, #255	; 0xff
 80089dc:	681b      	ldr	r3, [r3, #0]
 80089de:	221f      	movs	r2, #31
 80089e0:	4013      	ands	r3, r2
 80089e2:	d104      	bne.n	80089ee <USB_EPStartXfer+0x926>
 80089e4:	187b      	adds	r3, r7, r1
 80089e6:	681b      	ldr	r3, [r3, #0]
 80089e8:	3b01      	subs	r3, #1
 80089ea:	187a      	adds	r2, r7, r1
 80089ec:	6013      	str	r3, [r2, #0]
 80089ee:	23ec      	movs	r3, #236	; 0xec
 80089f0:	18fb      	adds	r3, r7, r3
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	b29b      	uxth	r3, r3
 80089f6:	029b      	lsls	r3, r3, #10
 80089f8:	b29b      	uxth	r3, r3
 80089fa:	4a5d      	ldr	r2, [pc, #372]	; (8008b70 <USB_EPStartXfer+0xaa8>)
 80089fc:	4313      	orrs	r3, r2
 80089fe:	b29a      	uxth	r2, r3
 8008a00:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008a02:	801a      	strh	r2, [r3, #0]
 8008a04:	e024      	b.n	8008a50 <USB_EPStartXfer+0x988>
 8008a06:	683b      	ldr	r3, [r7, #0]
 8008a08:	785b      	ldrb	r3, [r3, #1]
 8008a0a:	2b01      	cmp	r3, #1
 8008a0c:	d120      	bne.n	8008a50 <USB_EPStartXfer+0x988>
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	2184      	movs	r1, #132	; 0x84
 8008a12:	187a      	adds	r2, r7, r1
 8008a14:	6013      	str	r3, [r2, #0]
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	2250      	movs	r2, #80	; 0x50
 8008a1a:	5a9b      	ldrh	r3, [r3, r2]
 8008a1c:	b29b      	uxth	r3, r3
 8008a1e:	001a      	movs	r2, r3
 8008a20:	187b      	adds	r3, r7, r1
 8008a22:	681b      	ldr	r3, [r3, #0]
 8008a24:	189b      	adds	r3, r3, r2
 8008a26:	187a      	adds	r2, r7, r1
 8008a28:	6013      	str	r3, [r2, #0]
 8008a2a:	683b      	ldr	r3, [r7, #0]
 8008a2c:	781b      	ldrb	r3, [r3, #0]
 8008a2e:	00da      	lsls	r2, r3, #3
 8008a30:	187b      	adds	r3, r7, r1
 8008a32:	681b      	ldr	r3, [r3, #0]
 8008a34:	18d3      	adds	r3, r2, r3
 8008a36:	4a4f      	ldr	r2, [pc, #316]	; (8008b74 <USB_EPStartXfer+0xaac>)
 8008a38:	4694      	mov	ip, r2
 8008a3a:	4463      	add	r3, ip
 8008a3c:	2180      	movs	r1, #128	; 0x80
 8008a3e:	187a      	adds	r2, r7, r1
 8008a40:	6013      	str	r3, [r2, #0]
 8008a42:	1d7b      	adds	r3, r7, #5
 8008a44:	33ff      	adds	r3, #255	; 0xff
 8008a46:	681b      	ldr	r3, [r3, #0]
 8008a48:	b29a      	uxth	r2, r3
 8008a4a:	187b      	adds	r3, r7, r1
 8008a4c:	681b      	ldr	r3, [r3, #0]
 8008a4e:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8008a50:	2076      	movs	r0, #118	; 0x76
 8008a52:	183b      	adds	r3, r7, r0
 8008a54:	683a      	ldr	r2, [r7, #0]
 8008a56:	8912      	ldrh	r2, [r2, #8]
 8008a58:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008a5a:	683b      	ldr	r3, [r7, #0]
 8008a5c:	6959      	ldr	r1, [r3, #20]
 8008a5e:	1d7b      	adds	r3, r7, #5
 8008a60:	33ff      	adds	r3, #255	; 0xff
 8008a62:	681b      	ldr	r3, [r3, #0]
 8008a64:	b29c      	uxth	r4, r3
 8008a66:	183b      	adds	r3, r7, r0
 8008a68:	881a      	ldrh	r2, [r3, #0]
 8008a6a:	6878      	ldr	r0, [r7, #4]
 8008a6c:	0023      	movs	r3, r4
 8008a6e:	f000 fd1f 	bl	80094b0 <USB_WritePMA>
        }
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8008a72:	687a      	ldr	r2, [r7, #4]
 8008a74:	683b      	ldr	r3, [r7, #0]
 8008a76:	781b      	ldrb	r3, [r3, #0]
 8008a78:	009b      	lsls	r3, r3, #2
 8008a7a:	18d3      	adds	r3, r2, r3
 8008a7c:	881b      	ldrh	r3, [r3, #0]
 8008a7e:	b29a      	uxth	r2, r3
 8008a80:	200a      	movs	r0, #10
 8008a82:	183b      	adds	r3, r7, r0
 8008a84:	493c      	ldr	r1, [pc, #240]	; (8008b78 <USB_EPStartXfer+0xab0>)
 8008a86:	400a      	ands	r2, r1
 8008a88:	801a      	strh	r2, [r3, #0]
 8008a8a:	183b      	adds	r3, r7, r0
 8008a8c:	183a      	adds	r2, r7, r0
 8008a8e:	8812      	ldrh	r2, [r2, #0]
 8008a90:	2110      	movs	r1, #16
 8008a92:	404a      	eors	r2, r1
 8008a94:	801a      	strh	r2, [r3, #0]
 8008a96:	183b      	adds	r3, r7, r0
 8008a98:	183a      	adds	r2, r7, r0
 8008a9a:	8812      	ldrh	r2, [r2, #0]
 8008a9c:	2120      	movs	r1, #32
 8008a9e:	404a      	eors	r2, r1
 8008aa0:	801a      	strh	r2, [r3, #0]
 8008aa2:	687a      	ldr	r2, [r7, #4]
 8008aa4:	683b      	ldr	r3, [r7, #0]
 8008aa6:	781b      	ldrb	r3, [r3, #0]
 8008aa8:	009b      	lsls	r3, r3, #2
 8008aaa:	18d3      	adds	r3, r2, r3
 8008aac:	183a      	adds	r2, r7, r0
 8008aae:	8812      	ldrh	r2, [r2, #0]
 8008ab0:	4932      	ldr	r1, [pc, #200]	; (8008b7c <USB_EPStartXfer+0xab4>)
 8008ab2:	430a      	orrs	r2, r1
 8008ab4:	b292      	uxth	r2, r2
 8008ab6:	801a      	strh	r2, [r3, #0]
 8008ab8:	f000 fbaf 	bl	800921a <USB_EPStartXfer+0x1152>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8008abc:	683b      	ldr	r3, [r7, #0]
 8008abe:	7b1b      	ldrb	r3, [r3, #12]
 8008ac0:	2b00      	cmp	r3, #0
 8008ac2:	d000      	beq.n	8008ac6 <USB_EPStartXfer+0x9fe>
 8008ac4:	e09e      	b.n	8008c04 <USB_EPStartXfer+0xb3c>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8008ac6:	683b      	ldr	r3, [r7, #0]
 8008ac8:	699a      	ldr	r2, [r3, #24]
 8008aca:	683b      	ldr	r3, [r7, #0]
 8008acc:	691b      	ldr	r3, [r3, #16]
 8008ace:	429a      	cmp	r2, r3
 8008ad0:	d90d      	bls.n	8008aee <USB_EPStartXfer+0xa26>
      {
        len = ep->maxpacket;
 8008ad2:	683b      	ldr	r3, [r7, #0]
 8008ad4:	691b      	ldr	r3, [r3, #16]
 8008ad6:	1d7a      	adds	r2, r7, #5
 8008ad8:	32ff      	adds	r2, #255	; 0xff
 8008ada:	6013      	str	r3, [r2, #0]
        ep->xfer_len -= len;
 8008adc:	683b      	ldr	r3, [r7, #0]
 8008ade:	699a      	ldr	r2, [r3, #24]
 8008ae0:	1d7b      	adds	r3, r7, #5
 8008ae2:	33ff      	adds	r3, #255	; 0xff
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	1ad2      	subs	r2, r2, r3
 8008ae8:	683b      	ldr	r3, [r7, #0]
 8008aea:	619a      	str	r2, [r3, #24]
 8008aec:	e007      	b.n	8008afe <USB_EPStartXfer+0xa36>
      }
      else
      {
        len = ep->xfer_len;
 8008aee:	683b      	ldr	r3, [r7, #0]
 8008af0:	699b      	ldr	r3, [r3, #24]
 8008af2:	1d7a      	adds	r2, r7, #5
 8008af4:	32ff      	adds	r2, #255	; 0xff
 8008af6:	6013      	str	r3, [r2, #0]
        ep->xfer_len = 0U;
 8008af8:	683b      	ldr	r3, [r7, #0]
 8008afa:	2200      	movs	r2, #0
 8008afc:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	2190      	movs	r1, #144	; 0x90
 8008b02:	187a      	adds	r2, r7, r1
 8008b04:	6013      	str	r3, [r2, #0]
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	2250      	movs	r2, #80	; 0x50
 8008b0a:	5a9b      	ldrh	r3, [r3, r2]
 8008b0c:	b29b      	uxth	r3, r3
 8008b0e:	001a      	movs	r2, r3
 8008b10:	187b      	adds	r3, r7, r1
 8008b12:	681b      	ldr	r3, [r3, #0]
 8008b14:	189b      	adds	r3, r3, r2
 8008b16:	187a      	adds	r2, r7, r1
 8008b18:	6013      	str	r3, [r2, #0]
 8008b1a:	683b      	ldr	r3, [r7, #0]
 8008b1c:	781b      	ldrb	r3, [r3, #0]
 8008b1e:	00da      	lsls	r2, r3, #3
 8008b20:	187b      	adds	r3, r7, r1
 8008b22:	681b      	ldr	r3, [r3, #0]
 8008b24:	18d3      	adds	r3, r2, r3
 8008b26:	4a10      	ldr	r2, [pc, #64]	; (8008b68 <USB_EPStartXfer+0xaa0>)
 8008b28:	4694      	mov	ip, r2
 8008b2a:	4463      	add	r3, ip
 8008b2c:	218c      	movs	r1, #140	; 0x8c
 8008b2e:	187a      	adds	r2, r7, r1
 8008b30:	6013      	str	r3, [r2, #0]
 8008b32:	1d7b      	adds	r3, r7, #5
 8008b34:	33ff      	adds	r3, #255	; 0xff
 8008b36:	681b      	ldr	r3, [r3, #0]
 8008b38:	2b00      	cmp	r3, #0
 8008b3a:	d121      	bne.n	8008b80 <USB_EPStartXfer+0xab8>
 8008b3c:	187b      	adds	r3, r7, r1
 8008b3e:	681b      	ldr	r3, [r3, #0]
 8008b40:	881b      	ldrh	r3, [r3, #0]
 8008b42:	b29b      	uxth	r3, r3
 8008b44:	4a09      	ldr	r2, [pc, #36]	; (8008b6c <USB_EPStartXfer+0xaa4>)
 8008b46:	4013      	ands	r3, r2
 8008b48:	b29a      	uxth	r2, r3
 8008b4a:	187b      	adds	r3, r7, r1
 8008b4c:	681b      	ldr	r3, [r3, #0]
 8008b4e:	801a      	strh	r2, [r3, #0]
 8008b50:	187b      	adds	r3, r7, r1
 8008b52:	681b      	ldr	r3, [r3, #0]
 8008b54:	881b      	ldrh	r3, [r3, #0]
 8008b56:	b29b      	uxth	r3, r3
 8008b58:	4a05      	ldr	r2, [pc, #20]	; (8008b70 <USB_EPStartXfer+0xaa8>)
 8008b5a:	4313      	orrs	r3, r2
 8008b5c:	b29a      	uxth	r2, r3
 8008b5e:	187b      	adds	r3, r7, r1
 8008b60:	681b      	ldr	r3, [r3, #0]
 8008b62:	801a      	strh	r2, [r3, #0]
 8008b64:	e334      	b.n	80091d0 <USB_EPStartXfer+0x1108>
 8008b66:	46c0      	nop			; (mov r8, r8)
 8008b68:	00000406 	.word	0x00000406
 8008b6c:	ffff83ff 	.word	0xffff83ff
 8008b70:	ffff8000 	.word	0xffff8000
 8008b74:	00000402 	.word	0x00000402
 8008b78:	ffff8fbf 	.word	0xffff8fbf
 8008b7c:	ffff8080 	.word	0xffff8080
 8008b80:	1d7b      	adds	r3, r7, #5
 8008b82:	33ff      	adds	r3, #255	; 0xff
 8008b84:	681b      	ldr	r3, [r3, #0]
 8008b86:	2b3e      	cmp	r3, #62	; 0x3e
 8008b88:	d81c      	bhi.n	8008bc4 <USB_EPStartXfer+0xafc>
 8008b8a:	1d7b      	adds	r3, r7, #5
 8008b8c:	33ff      	adds	r3, #255	; 0xff
 8008b8e:	681b      	ldr	r3, [r3, #0]
 8008b90:	085b      	lsrs	r3, r3, #1
 8008b92:	21e8      	movs	r1, #232	; 0xe8
 8008b94:	187a      	adds	r2, r7, r1
 8008b96:	6013      	str	r3, [r2, #0]
 8008b98:	1d7b      	adds	r3, r7, #5
 8008b9a:	33ff      	adds	r3, #255	; 0xff
 8008b9c:	681b      	ldr	r3, [r3, #0]
 8008b9e:	2201      	movs	r2, #1
 8008ba0:	4013      	ands	r3, r2
 8008ba2:	d004      	beq.n	8008bae <USB_EPStartXfer+0xae6>
 8008ba4:	187b      	adds	r3, r7, r1
 8008ba6:	681b      	ldr	r3, [r3, #0]
 8008ba8:	3301      	adds	r3, #1
 8008baa:	187a      	adds	r2, r7, r1
 8008bac:	6013      	str	r3, [r2, #0]
 8008bae:	23e8      	movs	r3, #232	; 0xe8
 8008bb0:	18fb      	adds	r3, r7, r3
 8008bb2:	681b      	ldr	r3, [r3, #0]
 8008bb4:	b29b      	uxth	r3, r3
 8008bb6:	029b      	lsls	r3, r3, #10
 8008bb8:	b29a      	uxth	r2, r3
 8008bba:	238c      	movs	r3, #140	; 0x8c
 8008bbc:	18fb      	adds	r3, r7, r3
 8008bbe:	681b      	ldr	r3, [r3, #0]
 8008bc0:	801a      	strh	r2, [r3, #0]
 8008bc2:	e305      	b.n	80091d0 <USB_EPStartXfer+0x1108>
 8008bc4:	1d7b      	adds	r3, r7, #5
 8008bc6:	33ff      	adds	r3, #255	; 0xff
 8008bc8:	681b      	ldr	r3, [r3, #0]
 8008bca:	095b      	lsrs	r3, r3, #5
 8008bcc:	21e8      	movs	r1, #232	; 0xe8
 8008bce:	187a      	adds	r2, r7, r1
 8008bd0:	6013      	str	r3, [r2, #0]
 8008bd2:	1d7b      	adds	r3, r7, #5
 8008bd4:	33ff      	adds	r3, #255	; 0xff
 8008bd6:	681b      	ldr	r3, [r3, #0]
 8008bd8:	221f      	movs	r2, #31
 8008bda:	4013      	ands	r3, r2
 8008bdc:	d104      	bne.n	8008be8 <USB_EPStartXfer+0xb20>
 8008bde:	187b      	adds	r3, r7, r1
 8008be0:	681b      	ldr	r3, [r3, #0]
 8008be2:	3b01      	subs	r3, #1
 8008be4:	187a      	adds	r2, r7, r1
 8008be6:	6013      	str	r3, [r2, #0]
 8008be8:	23e8      	movs	r3, #232	; 0xe8
 8008bea:	18fb      	adds	r3, r7, r3
 8008bec:	681b      	ldr	r3, [r3, #0]
 8008bee:	b29b      	uxth	r3, r3
 8008bf0:	029b      	lsls	r3, r3, #10
 8008bf2:	b29b      	uxth	r3, r3
 8008bf4:	4aca      	ldr	r2, [pc, #808]	; (8008f20 <USB_EPStartXfer+0xe58>)
 8008bf6:	4313      	orrs	r3, r2
 8008bf8:	b29a      	uxth	r2, r3
 8008bfa:	238c      	movs	r3, #140	; 0x8c
 8008bfc:	18fb      	adds	r3, r7, r3
 8008bfe:	681b      	ldr	r3, [r3, #0]
 8008c00:	801a      	strh	r2, [r3, #0]
 8008c02:	e2e5      	b.n	80091d0 <USB_EPStartXfer+0x1108>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8008c04:	683b      	ldr	r3, [r7, #0]
 8008c06:	78db      	ldrb	r3, [r3, #3]
 8008c08:	2b02      	cmp	r3, #2
 8008c0a:	d000      	beq.n	8008c0e <USB_EPStartXfer+0xb46>
 8008c0c:	e16f      	b.n	8008eee <USB_EPStartXfer+0xe26>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8008c0e:	683b      	ldr	r3, [r7, #0]
 8008c10:	785b      	ldrb	r3, [r3, #1]
 8008c12:	2b00      	cmp	r3, #0
 8008c14:	d16f      	bne.n	8008cf6 <USB_EPStartXfer+0xc2e>
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	21ac      	movs	r1, #172	; 0xac
 8008c1a:	187a      	adds	r2, r7, r1
 8008c1c:	6013      	str	r3, [r2, #0]
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	2250      	movs	r2, #80	; 0x50
 8008c22:	5a9b      	ldrh	r3, [r3, r2]
 8008c24:	b29b      	uxth	r3, r3
 8008c26:	001a      	movs	r2, r3
 8008c28:	187b      	adds	r3, r7, r1
 8008c2a:	681b      	ldr	r3, [r3, #0]
 8008c2c:	189b      	adds	r3, r3, r2
 8008c2e:	187a      	adds	r2, r7, r1
 8008c30:	6013      	str	r3, [r2, #0]
 8008c32:	683b      	ldr	r3, [r7, #0]
 8008c34:	781b      	ldrb	r3, [r3, #0]
 8008c36:	00da      	lsls	r2, r3, #3
 8008c38:	187b      	adds	r3, r7, r1
 8008c3a:	681b      	ldr	r3, [r3, #0]
 8008c3c:	18d3      	adds	r3, r2, r3
 8008c3e:	4ab9      	ldr	r2, [pc, #740]	; (8008f24 <USB_EPStartXfer+0xe5c>)
 8008c40:	4694      	mov	ip, r2
 8008c42:	4463      	add	r3, ip
 8008c44:	21a8      	movs	r1, #168	; 0xa8
 8008c46:	187a      	adds	r2, r7, r1
 8008c48:	6013      	str	r3, [r2, #0]
 8008c4a:	683b      	ldr	r3, [r7, #0]
 8008c4c:	691b      	ldr	r3, [r3, #16]
 8008c4e:	2b00      	cmp	r3, #0
 8008c50:	d114      	bne.n	8008c7c <USB_EPStartXfer+0xbb4>
 8008c52:	187b      	adds	r3, r7, r1
 8008c54:	681b      	ldr	r3, [r3, #0]
 8008c56:	881b      	ldrh	r3, [r3, #0]
 8008c58:	b29b      	uxth	r3, r3
 8008c5a:	4ab3      	ldr	r2, [pc, #716]	; (8008f28 <USB_EPStartXfer+0xe60>)
 8008c5c:	4013      	ands	r3, r2
 8008c5e:	b29a      	uxth	r2, r3
 8008c60:	187b      	adds	r3, r7, r1
 8008c62:	681b      	ldr	r3, [r3, #0]
 8008c64:	801a      	strh	r2, [r3, #0]
 8008c66:	187b      	adds	r3, r7, r1
 8008c68:	681b      	ldr	r3, [r3, #0]
 8008c6a:	881b      	ldrh	r3, [r3, #0]
 8008c6c:	b29b      	uxth	r3, r3
 8008c6e:	4aac      	ldr	r2, [pc, #688]	; (8008f20 <USB_EPStartXfer+0xe58>)
 8008c70:	4313      	orrs	r3, r2
 8008c72:	b29a      	uxth	r2, r3
 8008c74:	187b      	adds	r3, r7, r1
 8008c76:	681b      	ldr	r3, [r3, #0]
 8008c78:	801a      	strh	r2, [r3, #0]
 8008c7a:	e060      	b.n	8008d3e <USB_EPStartXfer+0xc76>
 8008c7c:	683b      	ldr	r3, [r7, #0]
 8008c7e:	691b      	ldr	r3, [r3, #16]
 8008c80:	2b3e      	cmp	r3, #62	; 0x3e
 8008c82:	d81a      	bhi.n	8008cba <USB_EPStartXfer+0xbf2>
 8008c84:	683b      	ldr	r3, [r7, #0]
 8008c86:	691b      	ldr	r3, [r3, #16]
 8008c88:	085b      	lsrs	r3, r3, #1
 8008c8a:	21e4      	movs	r1, #228	; 0xe4
 8008c8c:	187a      	adds	r2, r7, r1
 8008c8e:	6013      	str	r3, [r2, #0]
 8008c90:	683b      	ldr	r3, [r7, #0]
 8008c92:	691b      	ldr	r3, [r3, #16]
 8008c94:	2201      	movs	r2, #1
 8008c96:	4013      	ands	r3, r2
 8008c98:	d004      	beq.n	8008ca4 <USB_EPStartXfer+0xbdc>
 8008c9a:	187b      	adds	r3, r7, r1
 8008c9c:	681b      	ldr	r3, [r3, #0]
 8008c9e:	3301      	adds	r3, #1
 8008ca0:	187a      	adds	r2, r7, r1
 8008ca2:	6013      	str	r3, [r2, #0]
 8008ca4:	23e4      	movs	r3, #228	; 0xe4
 8008ca6:	18fb      	adds	r3, r7, r3
 8008ca8:	681b      	ldr	r3, [r3, #0]
 8008caa:	b29b      	uxth	r3, r3
 8008cac:	029b      	lsls	r3, r3, #10
 8008cae:	b29a      	uxth	r2, r3
 8008cb0:	23a8      	movs	r3, #168	; 0xa8
 8008cb2:	18fb      	adds	r3, r7, r3
 8008cb4:	681b      	ldr	r3, [r3, #0]
 8008cb6:	801a      	strh	r2, [r3, #0]
 8008cb8:	e041      	b.n	8008d3e <USB_EPStartXfer+0xc76>
 8008cba:	683b      	ldr	r3, [r7, #0]
 8008cbc:	691b      	ldr	r3, [r3, #16]
 8008cbe:	095b      	lsrs	r3, r3, #5
 8008cc0:	21e4      	movs	r1, #228	; 0xe4
 8008cc2:	187a      	adds	r2, r7, r1
 8008cc4:	6013      	str	r3, [r2, #0]
 8008cc6:	683b      	ldr	r3, [r7, #0]
 8008cc8:	691b      	ldr	r3, [r3, #16]
 8008cca:	221f      	movs	r2, #31
 8008ccc:	4013      	ands	r3, r2
 8008cce:	d104      	bne.n	8008cda <USB_EPStartXfer+0xc12>
 8008cd0:	187b      	adds	r3, r7, r1
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	3b01      	subs	r3, #1
 8008cd6:	187a      	adds	r2, r7, r1
 8008cd8:	6013      	str	r3, [r2, #0]
 8008cda:	23e4      	movs	r3, #228	; 0xe4
 8008cdc:	18fb      	adds	r3, r7, r3
 8008cde:	681b      	ldr	r3, [r3, #0]
 8008ce0:	b29b      	uxth	r3, r3
 8008ce2:	029b      	lsls	r3, r3, #10
 8008ce4:	b29b      	uxth	r3, r3
 8008ce6:	4a8e      	ldr	r2, [pc, #568]	; (8008f20 <USB_EPStartXfer+0xe58>)
 8008ce8:	4313      	orrs	r3, r2
 8008cea:	b29a      	uxth	r2, r3
 8008cec:	23a8      	movs	r3, #168	; 0xa8
 8008cee:	18fb      	adds	r3, r7, r3
 8008cf0:	681b      	ldr	r3, [r3, #0]
 8008cf2:	801a      	strh	r2, [r3, #0]
 8008cf4:	e023      	b.n	8008d3e <USB_EPStartXfer+0xc76>
 8008cf6:	683b      	ldr	r3, [r7, #0]
 8008cf8:	785b      	ldrb	r3, [r3, #1]
 8008cfa:	2b01      	cmp	r3, #1
 8008cfc:	d11f      	bne.n	8008d3e <USB_EPStartXfer+0xc76>
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	21b4      	movs	r1, #180	; 0xb4
 8008d02:	187a      	adds	r2, r7, r1
 8008d04:	6013      	str	r3, [r2, #0]
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	2250      	movs	r2, #80	; 0x50
 8008d0a:	5a9b      	ldrh	r3, [r3, r2]
 8008d0c:	b29b      	uxth	r3, r3
 8008d0e:	001a      	movs	r2, r3
 8008d10:	187b      	adds	r3, r7, r1
 8008d12:	681b      	ldr	r3, [r3, #0]
 8008d14:	189b      	adds	r3, r3, r2
 8008d16:	187a      	adds	r2, r7, r1
 8008d18:	6013      	str	r3, [r2, #0]
 8008d1a:	683b      	ldr	r3, [r7, #0]
 8008d1c:	781b      	ldrb	r3, [r3, #0]
 8008d1e:	00da      	lsls	r2, r3, #3
 8008d20:	187b      	adds	r3, r7, r1
 8008d22:	681b      	ldr	r3, [r3, #0]
 8008d24:	18d3      	adds	r3, r2, r3
 8008d26:	4a7f      	ldr	r2, [pc, #508]	; (8008f24 <USB_EPStartXfer+0xe5c>)
 8008d28:	4694      	mov	ip, r2
 8008d2a:	4463      	add	r3, ip
 8008d2c:	21b0      	movs	r1, #176	; 0xb0
 8008d2e:	187a      	adds	r2, r7, r1
 8008d30:	6013      	str	r3, [r2, #0]
 8008d32:	683b      	ldr	r3, [r7, #0]
 8008d34:	691b      	ldr	r3, [r3, #16]
 8008d36:	b29a      	uxth	r2, r3
 8008d38:	187b      	adds	r3, r7, r1
 8008d3a:	681b      	ldr	r3, [r3, #0]
 8008d3c:	801a      	strh	r2, [r3, #0]
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	22a4      	movs	r2, #164	; 0xa4
 8008d42:	18ba      	adds	r2, r7, r2
 8008d44:	6013      	str	r3, [r2, #0]
 8008d46:	683b      	ldr	r3, [r7, #0]
 8008d48:	785b      	ldrb	r3, [r3, #1]
 8008d4a:	2b00      	cmp	r3, #0
 8008d4c:	d16f      	bne.n	8008e2e <USB_EPStartXfer+0xd66>
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	219c      	movs	r1, #156	; 0x9c
 8008d52:	187a      	adds	r2, r7, r1
 8008d54:	6013      	str	r3, [r2, #0]
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	2250      	movs	r2, #80	; 0x50
 8008d5a:	5a9b      	ldrh	r3, [r3, r2]
 8008d5c:	b29b      	uxth	r3, r3
 8008d5e:	001a      	movs	r2, r3
 8008d60:	187b      	adds	r3, r7, r1
 8008d62:	681b      	ldr	r3, [r3, #0]
 8008d64:	189b      	adds	r3, r3, r2
 8008d66:	187a      	adds	r2, r7, r1
 8008d68:	6013      	str	r3, [r2, #0]
 8008d6a:	683b      	ldr	r3, [r7, #0]
 8008d6c:	781b      	ldrb	r3, [r3, #0]
 8008d6e:	00da      	lsls	r2, r3, #3
 8008d70:	187b      	adds	r3, r7, r1
 8008d72:	681b      	ldr	r3, [r3, #0]
 8008d74:	18d3      	adds	r3, r2, r3
 8008d76:	4a6d      	ldr	r2, [pc, #436]	; (8008f2c <USB_EPStartXfer+0xe64>)
 8008d78:	4694      	mov	ip, r2
 8008d7a:	4463      	add	r3, ip
 8008d7c:	2198      	movs	r1, #152	; 0x98
 8008d7e:	187a      	adds	r2, r7, r1
 8008d80:	6013      	str	r3, [r2, #0]
 8008d82:	683b      	ldr	r3, [r7, #0]
 8008d84:	691b      	ldr	r3, [r3, #16]
 8008d86:	2b00      	cmp	r3, #0
 8008d88:	d114      	bne.n	8008db4 <USB_EPStartXfer+0xcec>
 8008d8a:	187b      	adds	r3, r7, r1
 8008d8c:	681b      	ldr	r3, [r3, #0]
 8008d8e:	881b      	ldrh	r3, [r3, #0]
 8008d90:	b29b      	uxth	r3, r3
 8008d92:	4a65      	ldr	r2, [pc, #404]	; (8008f28 <USB_EPStartXfer+0xe60>)
 8008d94:	4013      	ands	r3, r2
 8008d96:	b29a      	uxth	r2, r3
 8008d98:	187b      	adds	r3, r7, r1
 8008d9a:	681b      	ldr	r3, [r3, #0]
 8008d9c:	801a      	strh	r2, [r3, #0]
 8008d9e:	187b      	adds	r3, r7, r1
 8008da0:	681b      	ldr	r3, [r3, #0]
 8008da2:	881b      	ldrh	r3, [r3, #0]
 8008da4:	b29b      	uxth	r3, r3
 8008da6:	4a5e      	ldr	r2, [pc, #376]	; (8008f20 <USB_EPStartXfer+0xe58>)
 8008da8:	4313      	orrs	r3, r2
 8008daa:	b29a      	uxth	r2, r3
 8008dac:	187b      	adds	r3, r7, r1
 8008dae:	681b      	ldr	r3, [r3, #0]
 8008db0:	801a      	strh	r2, [r3, #0]
 8008db2:	e05d      	b.n	8008e70 <USB_EPStartXfer+0xda8>
 8008db4:	683b      	ldr	r3, [r7, #0]
 8008db6:	691b      	ldr	r3, [r3, #16]
 8008db8:	2b3e      	cmp	r3, #62	; 0x3e
 8008dba:	d81a      	bhi.n	8008df2 <USB_EPStartXfer+0xd2a>
 8008dbc:	683b      	ldr	r3, [r7, #0]
 8008dbe:	691b      	ldr	r3, [r3, #16]
 8008dc0:	085b      	lsrs	r3, r3, #1
 8008dc2:	21e0      	movs	r1, #224	; 0xe0
 8008dc4:	187a      	adds	r2, r7, r1
 8008dc6:	6013      	str	r3, [r2, #0]
 8008dc8:	683b      	ldr	r3, [r7, #0]
 8008dca:	691b      	ldr	r3, [r3, #16]
 8008dcc:	2201      	movs	r2, #1
 8008dce:	4013      	ands	r3, r2
 8008dd0:	d004      	beq.n	8008ddc <USB_EPStartXfer+0xd14>
 8008dd2:	187b      	adds	r3, r7, r1
 8008dd4:	681b      	ldr	r3, [r3, #0]
 8008dd6:	3301      	adds	r3, #1
 8008dd8:	187a      	adds	r2, r7, r1
 8008dda:	6013      	str	r3, [r2, #0]
 8008ddc:	23e0      	movs	r3, #224	; 0xe0
 8008dde:	18fb      	adds	r3, r7, r3
 8008de0:	681b      	ldr	r3, [r3, #0]
 8008de2:	b29b      	uxth	r3, r3
 8008de4:	029b      	lsls	r3, r3, #10
 8008de6:	b29a      	uxth	r2, r3
 8008de8:	2398      	movs	r3, #152	; 0x98
 8008dea:	18fb      	adds	r3, r7, r3
 8008dec:	681b      	ldr	r3, [r3, #0]
 8008dee:	801a      	strh	r2, [r3, #0]
 8008df0:	e03e      	b.n	8008e70 <USB_EPStartXfer+0xda8>
 8008df2:	683b      	ldr	r3, [r7, #0]
 8008df4:	691b      	ldr	r3, [r3, #16]
 8008df6:	095b      	lsrs	r3, r3, #5
 8008df8:	21e0      	movs	r1, #224	; 0xe0
 8008dfa:	187a      	adds	r2, r7, r1
 8008dfc:	6013      	str	r3, [r2, #0]
 8008dfe:	683b      	ldr	r3, [r7, #0]
 8008e00:	691b      	ldr	r3, [r3, #16]
 8008e02:	221f      	movs	r2, #31
 8008e04:	4013      	ands	r3, r2
 8008e06:	d104      	bne.n	8008e12 <USB_EPStartXfer+0xd4a>
 8008e08:	187b      	adds	r3, r7, r1
 8008e0a:	681b      	ldr	r3, [r3, #0]
 8008e0c:	3b01      	subs	r3, #1
 8008e0e:	187a      	adds	r2, r7, r1
 8008e10:	6013      	str	r3, [r2, #0]
 8008e12:	23e0      	movs	r3, #224	; 0xe0
 8008e14:	18fb      	adds	r3, r7, r3
 8008e16:	681b      	ldr	r3, [r3, #0]
 8008e18:	b29b      	uxth	r3, r3
 8008e1a:	029b      	lsls	r3, r3, #10
 8008e1c:	b29b      	uxth	r3, r3
 8008e1e:	4a40      	ldr	r2, [pc, #256]	; (8008f20 <USB_EPStartXfer+0xe58>)
 8008e20:	4313      	orrs	r3, r2
 8008e22:	b29a      	uxth	r2, r3
 8008e24:	2398      	movs	r3, #152	; 0x98
 8008e26:	18fb      	adds	r3, r7, r3
 8008e28:	681b      	ldr	r3, [r3, #0]
 8008e2a:	801a      	strh	r2, [r3, #0]
 8008e2c:	e020      	b.n	8008e70 <USB_EPStartXfer+0xda8>
 8008e2e:	683b      	ldr	r3, [r7, #0]
 8008e30:	785b      	ldrb	r3, [r3, #1]
 8008e32:	2b01      	cmp	r3, #1
 8008e34:	d11c      	bne.n	8008e70 <USB_EPStartXfer+0xda8>
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	2250      	movs	r2, #80	; 0x50
 8008e3a:	5a9b      	ldrh	r3, [r3, r2]
 8008e3c:	b29b      	uxth	r3, r3
 8008e3e:	001a      	movs	r2, r3
 8008e40:	21a4      	movs	r1, #164	; 0xa4
 8008e42:	187b      	adds	r3, r7, r1
 8008e44:	681b      	ldr	r3, [r3, #0]
 8008e46:	189b      	adds	r3, r3, r2
 8008e48:	187a      	adds	r2, r7, r1
 8008e4a:	6013      	str	r3, [r2, #0]
 8008e4c:	683b      	ldr	r3, [r7, #0]
 8008e4e:	781b      	ldrb	r3, [r3, #0]
 8008e50:	00da      	lsls	r2, r3, #3
 8008e52:	187b      	adds	r3, r7, r1
 8008e54:	681b      	ldr	r3, [r3, #0]
 8008e56:	18d3      	adds	r3, r2, r3
 8008e58:	4a34      	ldr	r2, [pc, #208]	; (8008f2c <USB_EPStartXfer+0xe64>)
 8008e5a:	4694      	mov	ip, r2
 8008e5c:	4463      	add	r3, ip
 8008e5e:	21a0      	movs	r1, #160	; 0xa0
 8008e60:	187a      	adds	r2, r7, r1
 8008e62:	6013      	str	r3, [r2, #0]
 8008e64:	683b      	ldr	r3, [r7, #0]
 8008e66:	691b      	ldr	r3, [r3, #16]
 8008e68:	b29a      	uxth	r2, r3
 8008e6a:	187b      	adds	r3, r7, r1
 8008e6c:	681b      	ldr	r3, [r3, #0]
 8008e6e:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8008e70:	683b      	ldr	r3, [r7, #0]
 8008e72:	69db      	ldr	r3, [r3, #28]
 8008e74:	2b00      	cmp	r3, #0
 8008e76:	d100      	bne.n	8008e7a <USB_EPStartXfer+0xdb2>
 8008e78:	e1aa      	b.n	80091d0 <USB_EPStartXfer+0x1108>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8008e7a:	687a      	ldr	r2, [r7, #4]
 8008e7c:	683b      	ldr	r3, [r7, #0]
 8008e7e:	781b      	ldrb	r3, [r3, #0]
 8008e80:	009b      	lsls	r3, r3, #2
 8008e82:	18d2      	adds	r2, r2, r3
 8008e84:	2196      	movs	r1, #150	; 0x96
 8008e86:	187b      	adds	r3, r7, r1
 8008e88:	8812      	ldrh	r2, [r2, #0]
 8008e8a:	801a      	strh	r2, [r3, #0]

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8008e8c:	187b      	adds	r3, r7, r1
 8008e8e:	881a      	ldrh	r2, [r3, #0]
 8008e90:	2380      	movs	r3, #128	; 0x80
 8008e92:	01db      	lsls	r3, r3, #7
 8008e94:	4013      	ands	r3, r2
 8008e96:	d004      	beq.n	8008ea2 <USB_EPStartXfer+0xdda>
 8008e98:	187b      	adds	r3, r7, r1
 8008e9a:	881b      	ldrh	r3, [r3, #0]
 8008e9c:	2240      	movs	r2, #64	; 0x40
 8008e9e:	4013      	ands	r3, r2
 8008ea0:	d10d      	bne.n	8008ebe <USB_EPStartXfer+0xdf6>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8008ea2:	2196      	movs	r1, #150	; 0x96
 8008ea4:	187b      	adds	r3, r7, r1
 8008ea6:	881a      	ldrh	r2, [r3, #0]
 8008ea8:	2380      	movs	r3, #128	; 0x80
 8008eaa:	01db      	lsls	r3, r3, #7
 8008eac:	4013      	ands	r3, r2
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8008eae:	d000      	beq.n	8008eb2 <USB_EPStartXfer+0xdea>
 8008eb0:	e18e      	b.n	80091d0 <USB_EPStartXfer+0x1108>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8008eb2:	187b      	adds	r3, r7, r1
 8008eb4:	881b      	ldrh	r3, [r3, #0]
 8008eb6:	2240      	movs	r2, #64	; 0x40
 8008eb8:	4013      	ands	r3, r2
 8008eba:	d000      	beq.n	8008ebe <USB_EPStartXfer+0xdf6>
 8008ebc:	e188      	b.n	80091d0 <USB_EPStartXfer+0x1108>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 8008ebe:	687a      	ldr	r2, [r7, #4]
 8008ec0:	683b      	ldr	r3, [r7, #0]
 8008ec2:	781b      	ldrb	r3, [r3, #0]
 8008ec4:	009b      	lsls	r3, r3, #2
 8008ec6:	18d3      	adds	r3, r2, r3
 8008ec8:	881b      	ldrh	r3, [r3, #0]
 8008eca:	b29a      	uxth	r2, r3
 8008ecc:	2094      	movs	r0, #148	; 0x94
 8008ece:	183b      	adds	r3, r7, r0
 8008ed0:	4917      	ldr	r1, [pc, #92]	; (8008f30 <USB_EPStartXfer+0xe68>)
 8008ed2:	400a      	ands	r2, r1
 8008ed4:	801a      	strh	r2, [r3, #0]
 8008ed6:	687a      	ldr	r2, [r7, #4]
 8008ed8:	683b      	ldr	r3, [r7, #0]
 8008eda:	781b      	ldrb	r3, [r3, #0]
 8008edc:	009b      	lsls	r3, r3, #2
 8008ede:	18d3      	adds	r3, r2, r3
 8008ee0:	183a      	adds	r2, r7, r0
 8008ee2:	8812      	ldrh	r2, [r2, #0]
 8008ee4:	4913      	ldr	r1, [pc, #76]	; (8008f34 <USB_EPStartXfer+0xe6c>)
 8008ee6:	430a      	orrs	r2, r1
 8008ee8:	b292      	uxth	r2, r2
 8008eea:	801a      	strh	r2, [r3, #0]
 8008eec:	e170      	b.n	80091d0 <USB_EPStartXfer+0x1108>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8008eee:	683b      	ldr	r3, [r7, #0]
 8008ef0:	78db      	ldrb	r3, [r3, #3]
 8008ef2:	2b01      	cmp	r3, #1
 8008ef4:	d000      	beq.n	8008ef8 <USB_EPStartXfer+0xe30>
 8008ef6:	e169      	b.n	80091cc <USB_EPStartXfer+0x1104>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8008ef8:	683b      	ldr	r3, [r7, #0]
 8008efa:	699a      	ldr	r2, [r3, #24]
 8008efc:	683b      	ldr	r3, [r7, #0]
 8008efe:	691b      	ldr	r3, [r3, #16]
 8008f00:	429a      	cmp	r2, r3
 8008f02:	d919      	bls.n	8008f38 <USB_EPStartXfer+0xe70>
        {
          len = ep->maxpacket;
 8008f04:	683b      	ldr	r3, [r7, #0]
 8008f06:	691b      	ldr	r3, [r3, #16]
 8008f08:	1d7a      	adds	r2, r7, #5
 8008f0a:	32ff      	adds	r2, #255	; 0xff
 8008f0c:	6013      	str	r3, [r2, #0]
          ep->xfer_len -= len;
 8008f0e:	683b      	ldr	r3, [r7, #0]
 8008f10:	699a      	ldr	r2, [r3, #24]
 8008f12:	1d7b      	adds	r3, r7, #5
 8008f14:	33ff      	adds	r3, #255	; 0xff
 8008f16:	681b      	ldr	r3, [r3, #0]
 8008f18:	1ad2      	subs	r2, r2, r3
 8008f1a:	683b      	ldr	r3, [r7, #0]
 8008f1c:	619a      	str	r2, [r3, #24]
 8008f1e:	e013      	b.n	8008f48 <USB_EPStartXfer+0xe80>
 8008f20:	ffff8000 	.word	0xffff8000
 8008f24:	00000402 	.word	0x00000402
 8008f28:	ffff83ff 	.word	0xffff83ff
 8008f2c:	00000406 	.word	0x00000406
 8008f30:	ffff8f8f 	.word	0xffff8f8f
 8008f34:	ffff80c0 	.word	0xffff80c0
        }
        else
        {
          len = ep->xfer_len;
 8008f38:	683b      	ldr	r3, [r7, #0]
 8008f3a:	699b      	ldr	r3, [r3, #24]
 8008f3c:	1d7a      	adds	r2, r7, #5
 8008f3e:	32ff      	adds	r2, #255	; 0xff
 8008f40:	6013      	str	r3, [r2, #0]
          ep->xfer_len = 0U;
 8008f42:	683b      	ldr	r3, [r7, #0]
 8008f44:	2200      	movs	r2, #0
 8008f46:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8008f48:	683b      	ldr	r3, [r7, #0]
 8008f4a:	785b      	ldrb	r3, [r3, #1]
 8008f4c:	2b00      	cmp	r3, #0
 8008f4e:	d000      	beq.n	8008f52 <USB_EPStartXfer+0xe8a>
 8008f50:	e075      	b.n	800903e <USB_EPStartXfer+0xf76>
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	21cc      	movs	r1, #204	; 0xcc
 8008f56:	187a      	adds	r2, r7, r1
 8008f58:	6013      	str	r3, [r2, #0]
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	2250      	movs	r2, #80	; 0x50
 8008f5e:	5a9b      	ldrh	r3, [r3, r2]
 8008f60:	b29b      	uxth	r3, r3
 8008f62:	001a      	movs	r2, r3
 8008f64:	187b      	adds	r3, r7, r1
 8008f66:	681b      	ldr	r3, [r3, #0]
 8008f68:	189b      	adds	r3, r3, r2
 8008f6a:	187a      	adds	r2, r7, r1
 8008f6c:	6013      	str	r3, [r2, #0]
 8008f6e:	683b      	ldr	r3, [r7, #0]
 8008f70:	781b      	ldrb	r3, [r3, #0]
 8008f72:	00da      	lsls	r2, r3, #3
 8008f74:	187b      	adds	r3, r7, r1
 8008f76:	681b      	ldr	r3, [r3, #0]
 8008f78:	18d3      	adds	r3, r2, r3
 8008f7a:	4aaa      	ldr	r2, [pc, #680]	; (8009224 <USB_EPStartXfer+0x115c>)
 8008f7c:	4694      	mov	ip, r2
 8008f7e:	4463      	add	r3, ip
 8008f80:	21c8      	movs	r1, #200	; 0xc8
 8008f82:	187a      	adds	r2, r7, r1
 8008f84:	6013      	str	r3, [r2, #0]
 8008f86:	1d7b      	adds	r3, r7, #5
 8008f88:	33ff      	adds	r3, #255	; 0xff
 8008f8a:	681b      	ldr	r3, [r3, #0]
 8008f8c:	2b00      	cmp	r3, #0
 8008f8e:	d114      	bne.n	8008fba <USB_EPStartXfer+0xef2>
 8008f90:	187b      	adds	r3, r7, r1
 8008f92:	681b      	ldr	r3, [r3, #0]
 8008f94:	881b      	ldrh	r3, [r3, #0]
 8008f96:	b29b      	uxth	r3, r3
 8008f98:	4aa3      	ldr	r2, [pc, #652]	; (8009228 <USB_EPStartXfer+0x1160>)
 8008f9a:	4013      	ands	r3, r2
 8008f9c:	b29a      	uxth	r2, r3
 8008f9e:	187b      	adds	r3, r7, r1
 8008fa0:	681b      	ldr	r3, [r3, #0]
 8008fa2:	801a      	strh	r2, [r3, #0]
 8008fa4:	187b      	adds	r3, r7, r1
 8008fa6:	681b      	ldr	r3, [r3, #0]
 8008fa8:	881b      	ldrh	r3, [r3, #0]
 8008faa:	b29b      	uxth	r3, r3
 8008fac:	4a9f      	ldr	r2, [pc, #636]	; (800922c <USB_EPStartXfer+0x1164>)
 8008fae:	4313      	orrs	r3, r2
 8008fb0:	b29a      	uxth	r2, r3
 8008fb2:	187b      	adds	r3, r7, r1
 8008fb4:	681b      	ldr	r3, [r3, #0]
 8008fb6:	801a      	strh	r2, [r3, #0]
 8008fb8:	e066      	b.n	8009088 <USB_EPStartXfer+0xfc0>
 8008fba:	1d7b      	adds	r3, r7, #5
 8008fbc:	33ff      	adds	r3, #255	; 0xff
 8008fbe:	681b      	ldr	r3, [r3, #0]
 8008fc0:	2b3e      	cmp	r3, #62	; 0x3e
 8008fc2:	d81c      	bhi.n	8008ffe <USB_EPStartXfer+0xf36>
 8008fc4:	1d7b      	adds	r3, r7, #5
 8008fc6:	33ff      	adds	r3, #255	; 0xff
 8008fc8:	681b      	ldr	r3, [r3, #0]
 8008fca:	085b      	lsrs	r3, r3, #1
 8008fcc:	21dc      	movs	r1, #220	; 0xdc
 8008fce:	187a      	adds	r2, r7, r1
 8008fd0:	6013      	str	r3, [r2, #0]
 8008fd2:	1d7b      	adds	r3, r7, #5
 8008fd4:	33ff      	adds	r3, #255	; 0xff
 8008fd6:	681b      	ldr	r3, [r3, #0]
 8008fd8:	2201      	movs	r2, #1
 8008fda:	4013      	ands	r3, r2
 8008fdc:	d004      	beq.n	8008fe8 <USB_EPStartXfer+0xf20>
 8008fde:	187b      	adds	r3, r7, r1
 8008fe0:	681b      	ldr	r3, [r3, #0]
 8008fe2:	3301      	adds	r3, #1
 8008fe4:	187a      	adds	r2, r7, r1
 8008fe6:	6013      	str	r3, [r2, #0]
 8008fe8:	23dc      	movs	r3, #220	; 0xdc
 8008fea:	18fb      	adds	r3, r7, r3
 8008fec:	681b      	ldr	r3, [r3, #0]
 8008fee:	b29b      	uxth	r3, r3
 8008ff0:	029b      	lsls	r3, r3, #10
 8008ff2:	b29a      	uxth	r2, r3
 8008ff4:	23c8      	movs	r3, #200	; 0xc8
 8008ff6:	18fb      	adds	r3, r7, r3
 8008ff8:	681b      	ldr	r3, [r3, #0]
 8008ffa:	801a      	strh	r2, [r3, #0]
 8008ffc:	e044      	b.n	8009088 <USB_EPStartXfer+0xfc0>
 8008ffe:	1d7b      	adds	r3, r7, #5
 8009000:	33ff      	adds	r3, #255	; 0xff
 8009002:	681b      	ldr	r3, [r3, #0]
 8009004:	095b      	lsrs	r3, r3, #5
 8009006:	21dc      	movs	r1, #220	; 0xdc
 8009008:	187a      	adds	r2, r7, r1
 800900a:	6013      	str	r3, [r2, #0]
 800900c:	1d7b      	adds	r3, r7, #5
 800900e:	33ff      	adds	r3, #255	; 0xff
 8009010:	681b      	ldr	r3, [r3, #0]
 8009012:	221f      	movs	r2, #31
 8009014:	4013      	ands	r3, r2
 8009016:	d104      	bne.n	8009022 <USB_EPStartXfer+0xf5a>
 8009018:	187b      	adds	r3, r7, r1
 800901a:	681b      	ldr	r3, [r3, #0]
 800901c:	3b01      	subs	r3, #1
 800901e:	187a      	adds	r2, r7, r1
 8009020:	6013      	str	r3, [r2, #0]
 8009022:	23dc      	movs	r3, #220	; 0xdc
 8009024:	18fb      	adds	r3, r7, r3
 8009026:	681b      	ldr	r3, [r3, #0]
 8009028:	b29b      	uxth	r3, r3
 800902a:	029b      	lsls	r3, r3, #10
 800902c:	b29b      	uxth	r3, r3
 800902e:	4a7f      	ldr	r2, [pc, #508]	; (800922c <USB_EPStartXfer+0x1164>)
 8009030:	4313      	orrs	r3, r2
 8009032:	b29a      	uxth	r2, r3
 8009034:	23c8      	movs	r3, #200	; 0xc8
 8009036:	18fb      	adds	r3, r7, r3
 8009038:	681b      	ldr	r3, [r3, #0]
 800903a:	801a      	strh	r2, [r3, #0]
 800903c:	e024      	b.n	8009088 <USB_EPStartXfer+0xfc0>
 800903e:	683b      	ldr	r3, [r7, #0]
 8009040:	785b      	ldrb	r3, [r3, #1]
 8009042:	2b01      	cmp	r3, #1
 8009044:	d120      	bne.n	8009088 <USB_EPStartXfer+0xfc0>
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	21d4      	movs	r1, #212	; 0xd4
 800904a:	187a      	adds	r2, r7, r1
 800904c:	6013      	str	r3, [r2, #0]
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	2250      	movs	r2, #80	; 0x50
 8009052:	5a9b      	ldrh	r3, [r3, r2]
 8009054:	b29b      	uxth	r3, r3
 8009056:	001a      	movs	r2, r3
 8009058:	187b      	adds	r3, r7, r1
 800905a:	681b      	ldr	r3, [r3, #0]
 800905c:	189b      	adds	r3, r3, r2
 800905e:	187a      	adds	r2, r7, r1
 8009060:	6013      	str	r3, [r2, #0]
 8009062:	683b      	ldr	r3, [r7, #0]
 8009064:	781b      	ldrb	r3, [r3, #0]
 8009066:	00da      	lsls	r2, r3, #3
 8009068:	187b      	adds	r3, r7, r1
 800906a:	681b      	ldr	r3, [r3, #0]
 800906c:	18d3      	adds	r3, r2, r3
 800906e:	4a6d      	ldr	r2, [pc, #436]	; (8009224 <USB_EPStartXfer+0x115c>)
 8009070:	4694      	mov	ip, r2
 8009072:	4463      	add	r3, ip
 8009074:	21d0      	movs	r1, #208	; 0xd0
 8009076:	187a      	adds	r2, r7, r1
 8009078:	6013      	str	r3, [r2, #0]
 800907a:	1d7b      	adds	r3, r7, #5
 800907c:	33ff      	adds	r3, #255	; 0xff
 800907e:	681b      	ldr	r3, [r3, #0]
 8009080:	b29a      	uxth	r2, r3
 8009082:	187b      	adds	r3, r7, r1
 8009084:	681b      	ldr	r3, [r3, #0]
 8009086:	801a      	strh	r2, [r3, #0]
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	22c4      	movs	r2, #196	; 0xc4
 800908c:	18ba      	adds	r2, r7, r2
 800908e:	6013      	str	r3, [r2, #0]
 8009090:	683b      	ldr	r3, [r7, #0]
 8009092:	785b      	ldrb	r3, [r3, #1]
 8009094:	2b00      	cmp	r3, #0
 8009096:	d000      	beq.n	800909a <USB_EPStartXfer+0xfd2>
 8009098:	e075      	b.n	8009186 <USB_EPStartXfer+0x10be>
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	21bc      	movs	r1, #188	; 0xbc
 800909e:	187a      	adds	r2, r7, r1
 80090a0:	6013      	str	r3, [r2, #0]
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	2250      	movs	r2, #80	; 0x50
 80090a6:	5a9b      	ldrh	r3, [r3, r2]
 80090a8:	b29b      	uxth	r3, r3
 80090aa:	001a      	movs	r2, r3
 80090ac:	187b      	adds	r3, r7, r1
 80090ae:	681b      	ldr	r3, [r3, #0]
 80090b0:	189b      	adds	r3, r3, r2
 80090b2:	187a      	adds	r2, r7, r1
 80090b4:	6013      	str	r3, [r2, #0]
 80090b6:	683b      	ldr	r3, [r7, #0]
 80090b8:	781b      	ldrb	r3, [r3, #0]
 80090ba:	00da      	lsls	r2, r3, #3
 80090bc:	187b      	adds	r3, r7, r1
 80090be:	681b      	ldr	r3, [r3, #0]
 80090c0:	18d3      	adds	r3, r2, r3
 80090c2:	4a5b      	ldr	r2, [pc, #364]	; (8009230 <USB_EPStartXfer+0x1168>)
 80090c4:	4694      	mov	ip, r2
 80090c6:	4463      	add	r3, ip
 80090c8:	21b8      	movs	r1, #184	; 0xb8
 80090ca:	187a      	adds	r2, r7, r1
 80090cc:	6013      	str	r3, [r2, #0]
 80090ce:	1d7b      	adds	r3, r7, #5
 80090d0:	33ff      	adds	r3, #255	; 0xff
 80090d2:	681b      	ldr	r3, [r3, #0]
 80090d4:	2b00      	cmp	r3, #0
 80090d6:	d114      	bne.n	8009102 <USB_EPStartXfer+0x103a>
 80090d8:	187b      	adds	r3, r7, r1
 80090da:	681b      	ldr	r3, [r3, #0]
 80090dc:	881b      	ldrh	r3, [r3, #0]
 80090de:	b29b      	uxth	r3, r3
 80090e0:	4a51      	ldr	r2, [pc, #324]	; (8009228 <USB_EPStartXfer+0x1160>)
 80090e2:	4013      	ands	r3, r2
 80090e4:	b29a      	uxth	r2, r3
 80090e6:	187b      	adds	r3, r7, r1
 80090e8:	681b      	ldr	r3, [r3, #0]
 80090ea:	801a      	strh	r2, [r3, #0]
 80090ec:	187b      	adds	r3, r7, r1
 80090ee:	681b      	ldr	r3, [r3, #0]
 80090f0:	881b      	ldrh	r3, [r3, #0]
 80090f2:	b29b      	uxth	r3, r3
 80090f4:	4a4d      	ldr	r2, [pc, #308]	; (800922c <USB_EPStartXfer+0x1164>)
 80090f6:	4313      	orrs	r3, r2
 80090f8:	b29a      	uxth	r2, r3
 80090fa:	187b      	adds	r3, r7, r1
 80090fc:	681b      	ldr	r3, [r3, #0]
 80090fe:	801a      	strh	r2, [r3, #0]
 8009100:	e066      	b.n	80091d0 <USB_EPStartXfer+0x1108>
 8009102:	1d7b      	adds	r3, r7, #5
 8009104:	33ff      	adds	r3, #255	; 0xff
 8009106:	681b      	ldr	r3, [r3, #0]
 8009108:	2b3e      	cmp	r3, #62	; 0x3e
 800910a:	d81c      	bhi.n	8009146 <USB_EPStartXfer+0x107e>
 800910c:	1d7b      	adds	r3, r7, #5
 800910e:	33ff      	adds	r3, #255	; 0xff
 8009110:	681b      	ldr	r3, [r3, #0]
 8009112:	085b      	lsrs	r3, r3, #1
 8009114:	21d8      	movs	r1, #216	; 0xd8
 8009116:	187a      	adds	r2, r7, r1
 8009118:	6013      	str	r3, [r2, #0]
 800911a:	1d7b      	adds	r3, r7, #5
 800911c:	33ff      	adds	r3, #255	; 0xff
 800911e:	681b      	ldr	r3, [r3, #0]
 8009120:	2201      	movs	r2, #1
 8009122:	4013      	ands	r3, r2
 8009124:	d004      	beq.n	8009130 <USB_EPStartXfer+0x1068>
 8009126:	187b      	adds	r3, r7, r1
 8009128:	681b      	ldr	r3, [r3, #0]
 800912a:	3301      	adds	r3, #1
 800912c:	187a      	adds	r2, r7, r1
 800912e:	6013      	str	r3, [r2, #0]
 8009130:	23d8      	movs	r3, #216	; 0xd8
 8009132:	18fb      	adds	r3, r7, r3
 8009134:	681b      	ldr	r3, [r3, #0]
 8009136:	b29b      	uxth	r3, r3
 8009138:	029b      	lsls	r3, r3, #10
 800913a:	b29a      	uxth	r2, r3
 800913c:	23b8      	movs	r3, #184	; 0xb8
 800913e:	18fb      	adds	r3, r7, r3
 8009140:	681b      	ldr	r3, [r3, #0]
 8009142:	801a      	strh	r2, [r3, #0]
 8009144:	e044      	b.n	80091d0 <USB_EPStartXfer+0x1108>
 8009146:	1d7b      	adds	r3, r7, #5
 8009148:	33ff      	adds	r3, #255	; 0xff
 800914a:	681b      	ldr	r3, [r3, #0]
 800914c:	095b      	lsrs	r3, r3, #5
 800914e:	21d8      	movs	r1, #216	; 0xd8
 8009150:	187a      	adds	r2, r7, r1
 8009152:	6013      	str	r3, [r2, #0]
 8009154:	1d7b      	adds	r3, r7, #5
 8009156:	33ff      	adds	r3, #255	; 0xff
 8009158:	681b      	ldr	r3, [r3, #0]
 800915a:	221f      	movs	r2, #31
 800915c:	4013      	ands	r3, r2
 800915e:	d104      	bne.n	800916a <USB_EPStartXfer+0x10a2>
 8009160:	187b      	adds	r3, r7, r1
 8009162:	681b      	ldr	r3, [r3, #0]
 8009164:	3b01      	subs	r3, #1
 8009166:	187a      	adds	r2, r7, r1
 8009168:	6013      	str	r3, [r2, #0]
 800916a:	23d8      	movs	r3, #216	; 0xd8
 800916c:	18fb      	adds	r3, r7, r3
 800916e:	681b      	ldr	r3, [r3, #0]
 8009170:	b29b      	uxth	r3, r3
 8009172:	029b      	lsls	r3, r3, #10
 8009174:	b29b      	uxth	r3, r3
 8009176:	4a2d      	ldr	r2, [pc, #180]	; (800922c <USB_EPStartXfer+0x1164>)
 8009178:	4313      	orrs	r3, r2
 800917a:	b29a      	uxth	r2, r3
 800917c:	23b8      	movs	r3, #184	; 0xb8
 800917e:	18fb      	adds	r3, r7, r3
 8009180:	681b      	ldr	r3, [r3, #0]
 8009182:	801a      	strh	r2, [r3, #0]
 8009184:	e024      	b.n	80091d0 <USB_EPStartXfer+0x1108>
 8009186:	683b      	ldr	r3, [r7, #0]
 8009188:	785b      	ldrb	r3, [r3, #1]
 800918a:	2b01      	cmp	r3, #1
 800918c:	d120      	bne.n	80091d0 <USB_EPStartXfer+0x1108>
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	2250      	movs	r2, #80	; 0x50
 8009192:	5a9b      	ldrh	r3, [r3, r2]
 8009194:	b29b      	uxth	r3, r3
 8009196:	001a      	movs	r2, r3
 8009198:	21c4      	movs	r1, #196	; 0xc4
 800919a:	187b      	adds	r3, r7, r1
 800919c:	681b      	ldr	r3, [r3, #0]
 800919e:	189b      	adds	r3, r3, r2
 80091a0:	187a      	adds	r2, r7, r1
 80091a2:	6013      	str	r3, [r2, #0]
 80091a4:	683b      	ldr	r3, [r7, #0]
 80091a6:	781b      	ldrb	r3, [r3, #0]
 80091a8:	00da      	lsls	r2, r3, #3
 80091aa:	187b      	adds	r3, r7, r1
 80091ac:	681b      	ldr	r3, [r3, #0]
 80091ae:	18d3      	adds	r3, r2, r3
 80091b0:	4a1f      	ldr	r2, [pc, #124]	; (8009230 <USB_EPStartXfer+0x1168>)
 80091b2:	4694      	mov	ip, r2
 80091b4:	4463      	add	r3, ip
 80091b6:	21c0      	movs	r1, #192	; 0xc0
 80091b8:	187a      	adds	r2, r7, r1
 80091ba:	6013      	str	r3, [r2, #0]
 80091bc:	1d7b      	adds	r3, r7, #5
 80091be:	33ff      	adds	r3, #255	; 0xff
 80091c0:	681b      	ldr	r3, [r3, #0]
 80091c2:	b29a      	uxth	r2, r3
 80091c4:	187b      	adds	r3, r7, r1
 80091c6:	681b      	ldr	r3, [r3, #0]
 80091c8:	801a      	strh	r2, [r3, #0]
 80091ca:	e001      	b.n	80091d0 <USB_EPStartXfer+0x1108>
      }
      else
      {
        return HAL_ERROR;
 80091cc:	2301      	movs	r3, #1
 80091ce:	e025      	b.n	800921c <USB_EPStartXfer+0x1154>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80091d0:	687a      	ldr	r2, [r7, #4]
 80091d2:	683b      	ldr	r3, [r7, #0]
 80091d4:	781b      	ldrb	r3, [r3, #0]
 80091d6:	009b      	lsls	r3, r3, #2
 80091d8:	18d3      	adds	r3, r2, r3
 80091da:	881b      	ldrh	r3, [r3, #0]
 80091dc:	b29a      	uxth	r2, r3
 80091de:	208a      	movs	r0, #138	; 0x8a
 80091e0:	183b      	adds	r3, r7, r0
 80091e2:	4914      	ldr	r1, [pc, #80]	; (8009234 <USB_EPStartXfer+0x116c>)
 80091e4:	400a      	ands	r2, r1
 80091e6:	801a      	strh	r2, [r3, #0]
 80091e8:	183b      	adds	r3, r7, r0
 80091ea:	183a      	adds	r2, r7, r0
 80091ec:	8812      	ldrh	r2, [r2, #0]
 80091ee:	2180      	movs	r1, #128	; 0x80
 80091f0:	0149      	lsls	r1, r1, #5
 80091f2:	404a      	eors	r2, r1
 80091f4:	801a      	strh	r2, [r3, #0]
 80091f6:	183b      	adds	r3, r7, r0
 80091f8:	183a      	adds	r2, r7, r0
 80091fa:	8812      	ldrh	r2, [r2, #0]
 80091fc:	2180      	movs	r1, #128	; 0x80
 80091fe:	0189      	lsls	r1, r1, #6
 8009200:	404a      	eors	r2, r1
 8009202:	801a      	strh	r2, [r3, #0]
 8009204:	687a      	ldr	r2, [r7, #4]
 8009206:	683b      	ldr	r3, [r7, #0]
 8009208:	781b      	ldrb	r3, [r3, #0]
 800920a:	009b      	lsls	r3, r3, #2
 800920c:	18d3      	adds	r3, r2, r3
 800920e:	183a      	adds	r2, r7, r0
 8009210:	8812      	ldrh	r2, [r2, #0]
 8009212:	4909      	ldr	r1, [pc, #36]	; (8009238 <USB_EPStartXfer+0x1170>)
 8009214:	430a      	orrs	r2, r1
 8009216:	b292      	uxth	r2, r2
 8009218:	801a      	strh	r2, [r3, #0]
  }

  return HAL_OK;
 800921a:	2300      	movs	r3, #0
}
 800921c:	0018      	movs	r0, r3
 800921e:	46bd      	mov	sp, r7
 8009220:	b043      	add	sp, #268	; 0x10c
 8009222:	bd90      	pop	{r4, r7, pc}
 8009224:	00000402 	.word	0x00000402
 8009228:	ffff83ff 	.word	0xffff83ff
 800922c:	ffff8000 	.word	0xffff8000
 8009230:	00000406 	.word	0x00000406
 8009234:	ffffbf8f 	.word	0xffffbf8f
 8009238:	ffff8080 	.word	0xffff8080

0800923c <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800923c:	b580      	push	{r7, lr}
 800923e:	b084      	sub	sp, #16
 8009240:	af00      	add	r7, sp, #0
 8009242:	6078      	str	r0, [r7, #4]
 8009244:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8009246:	683b      	ldr	r3, [r7, #0]
 8009248:	785b      	ldrb	r3, [r3, #1]
 800924a:	2b00      	cmp	r3, #0
 800924c:	d01d      	beq.n	800928a <USB_EPSetStall+0x4e>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800924e:	687a      	ldr	r2, [r7, #4]
 8009250:	683b      	ldr	r3, [r7, #0]
 8009252:	781b      	ldrb	r3, [r3, #0]
 8009254:	009b      	lsls	r3, r3, #2
 8009256:	18d3      	adds	r3, r2, r3
 8009258:	881b      	ldrh	r3, [r3, #0]
 800925a:	b29a      	uxth	r2, r3
 800925c:	200c      	movs	r0, #12
 800925e:	183b      	adds	r3, r7, r0
 8009260:	491b      	ldr	r1, [pc, #108]	; (80092d0 <USB_EPSetStall+0x94>)
 8009262:	400a      	ands	r2, r1
 8009264:	801a      	strh	r2, [r3, #0]
 8009266:	183b      	adds	r3, r7, r0
 8009268:	183a      	adds	r2, r7, r0
 800926a:	8812      	ldrh	r2, [r2, #0]
 800926c:	2110      	movs	r1, #16
 800926e:	404a      	eors	r2, r1
 8009270:	801a      	strh	r2, [r3, #0]
 8009272:	687a      	ldr	r2, [r7, #4]
 8009274:	683b      	ldr	r3, [r7, #0]
 8009276:	781b      	ldrb	r3, [r3, #0]
 8009278:	009b      	lsls	r3, r3, #2
 800927a:	18d3      	adds	r3, r2, r3
 800927c:	183a      	adds	r2, r7, r0
 800927e:	8812      	ldrh	r2, [r2, #0]
 8009280:	4914      	ldr	r1, [pc, #80]	; (80092d4 <USB_EPSetStall+0x98>)
 8009282:	430a      	orrs	r2, r1
 8009284:	b292      	uxth	r2, r2
 8009286:	801a      	strh	r2, [r3, #0]
 8009288:	e01d      	b.n	80092c6 <USB_EPSetStall+0x8a>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800928a:	687a      	ldr	r2, [r7, #4]
 800928c:	683b      	ldr	r3, [r7, #0]
 800928e:	781b      	ldrb	r3, [r3, #0]
 8009290:	009b      	lsls	r3, r3, #2
 8009292:	18d3      	adds	r3, r2, r3
 8009294:	881b      	ldrh	r3, [r3, #0]
 8009296:	b29a      	uxth	r2, r3
 8009298:	200e      	movs	r0, #14
 800929a:	183b      	adds	r3, r7, r0
 800929c:	490e      	ldr	r1, [pc, #56]	; (80092d8 <USB_EPSetStall+0x9c>)
 800929e:	400a      	ands	r2, r1
 80092a0:	801a      	strh	r2, [r3, #0]
 80092a2:	183b      	adds	r3, r7, r0
 80092a4:	183a      	adds	r2, r7, r0
 80092a6:	8812      	ldrh	r2, [r2, #0]
 80092a8:	2180      	movs	r1, #128	; 0x80
 80092aa:	0149      	lsls	r1, r1, #5
 80092ac:	404a      	eors	r2, r1
 80092ae:	801a      	strh	r2, [r3, #0]
 80092b0:	687a      	ldr	r2, [r7, #4]
 80092b2:	683b      	ldr	r3, [r7, #0]
 80092b4:	781b      	ldrb	r3, [r3, #0]
 80092b6:	009b      	lsls	r3, r3, #2
 80092b8:	18d3      	adds	r3, r2, r3
 80092ba:	183a      	adds	r2, r7, r0
 80092bc:	8812      	ldrh	r2, [r2, #0]
 80092be:	4905      	ldr	r1, [pc, #20]	; (80092d4 <USB_EPSetStall+0x98>)
 80092c0:	430a      	orrs	r2, r1
 80092c2:	b292      	uxth	r2, r2
 80092c4:	801a      	strh	r2, [r3, #0]
  }

  return HAL_OK;
 80092c6:	2300      	movs	r3, #0
}
 80092c8:	0018      	movs	r0, r3
 80092ca:	46bd      	mov	sp, r7
 80092cc:	b004      	add	sp, #16
 80092ce:	bd80      	pop	{r7, pc}
 80092d0:	ffff8fbf 	.word	0xffff8fbf
 80092d4:	ffff8080 	.word	0xffff8080
 80092d8:	ffffbf8f 	.word	0xffffbf8f

080092dc <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80092dc:	b580      	push	{r7, lr}
 80092de:	b086      	sub	sp, #24
 80092e0:	af00      	add	r7, sp, #0
 80092e2:	6078      	str	r0, [r7, #4]
 80092e4:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80092e6:	683b      	ldr	r3, [r7, #0]
 80092e8:	7b1b      	ldrb	r3, [r3, #12]
 80092ea:	2b00      	cmp	r3, #0
 80092ec:	d000      	beq.n	80092f0 <USB_EPClearStall+0x14>
 80092ee:	e095      	b.n	800941c <USB_EPClearStall+0x140>
  {
    if (ep->is_in != 0U)
 80092f0:	683b      	ldr	r3, [r7, #0]
 80092f2:	785b      	ldrb	r3, [r3, #1]
 80092f4:	2b00      	cmp	r3, #0
 80092f6:	d046      	beq.n	8009386 <USB_EPClearStall+0xaa>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80092f8:	687a      	ldr	r2, [r7, #4]
 80092fa:	683b      	ldr	r3, [r7, #0]
 80092fc:	781b      	ldrb	r3, [r3, #0]
 80092fe:	009b      	lsls	r3, r3, #2
 8009300:	18d2      	adds	r2, r2, r3
 8009302:	2110      	movs	r1, #16
 8009304:	187b      	adds	r3, r7, r1
 8009306:	8812      	ldrh	r2, [r2, #0]
 8009308:	801a      	strh	r2, [r3, #0]
 800930a:	187b      	adds	r3, r7, r1
 800930c:	881b      	ldrh	r3, [r3, #0]
 800930e:	2240      	movs	r2, #64	; 0x40
 8009310:	4013      	ands	r3, r2
 8009312:	d016      	beq.n	8009342 <USB_EPClearStall+0x66>
 8009314:	687a      	ldr	r2, [r7, #4]
 8009316:	683b      	ldr	r3, [r7, #0]
 8009318:	781b      	ldrb	r3, [r3, #0]
 800931a:	009b      	lsls	r3, r3, #2
 800931c:	18d3      	adds	r3, r2, r3
 800931e:	881b      	ldrh	r3, [r3, #0]
 8009320:	b29a      	uxth	r2, r3
 8009322:	200e      	movs	r0, #14
 8009324:	183b      	adds	r3, r7, r0
 8009326:	4940      	ldr	r1, [pc, #256]	; (8009428 <USB_EPClearStall+0x14c>)
 8009328:	400a      	ands	r2, r1
 800932a:	801a      	strh	r2, [r3, #0]
 800932c:	687a      	ldr	r2, [r7, #4]
 800932e:	683b      	ldr	r3, [r7, #0]
 8009330:	781b      	ldrb	r3, [r3, #0]
 8009332:	009b      	lsls	r3, r3, #2
 8009334:	18d3      	adds	r3, r2, r3
 8009336:	183a      	adds	r2, r7, r0
 8009338:	8812      	ldrh	r2, [r2, #0]
 800933a:	493c      	ldr	r1, [pc, #240]	; (800942c <USB_EPClearStall+0x150>)
 800933c:	430a      	orrs	r2, r1
 800933e:	b292      	uxth	r2, r2
 8009340:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 8009342:	683b      	ldr	r3, [r7, #0]
 8009344:	78db      	ldrb	r3, [r3, #3]
 8009346:	2b01      	cmp	r3, #1
 8009348:	d068      	beq.n	800941c <USB_EPClearStall+0x140>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800934a:	687a      	ldr	r2, [r7, #4]
 800934c:	683b      	ldr	r3, [r7, #0]
 800934e:	781b      	ldrb	r3, [r3, #0]
 8009350:	009b      	lsls	r3, r3, #2
 8009352:	18d3      	adds	r3, r2, r3
 8009354:	881b      	ldrh	r3, [r3, #0]
 8009356:	b29a      	uxth	r2, r3
 8009358:	200c      	movs	r0, #12
 800935a:	183b      	adds	r3, r7, r0
 800935c:	4934      	ldr	r1, [pc, #208]	; (8009430 <USB_EPClearStall+0x154>)
 800935e:	400a      	ands	r2, r1
 8009360:	801a      	strh	r2, [r3, #0]
 8009362:	183b      	adds	r3, r7, r0
 8009364:	183a      	adds	r2, r7, r0
 8009366:	8812      	ldrh	r2, [r2, #0]
 8009368:	2120      	movs	r1, #32
 800936a:	404a      	eors	r2, r1
 800936c:	801a      	strh	r2, [r3, #0]
 800936e:	687a      	ldr	r2, [r7, #4]
 8009370:	683b      	ldr	r3, [r7, #0]
 8009372:	781b      	ldrb	r3, [r3, #0]
 8009374:	009b      	lsls	r3, r3, #2
 8009376:	18d3      	adds	r3, r2, r3
 8009378:	183a      	adds	r2, r7, r0
 800937a:	8812      	ldrh	r2, [r2, #0]
 800937c:	492d      	ldr	r1, [pc, #180]	; (8009434 <USB_EPClearStall+0x158>)
 800937e:	430a      	orrs	r2, r1
 8009380:	b292      	uxth	r2, r2
 8009382:	801a      	strh	r2, [r3, #0]
 8009384:	e04a      	b.n	800941c <USB_EPClearStall+0x140>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009386:	687a      	ldr	r2, [r7, #4]
 8009388:	683b      	ldr	r3, [r7, #0]
 800938a:	781b      	ldrb	r3, [r3, #0]
 800938c:	009b      	lsls	r3, r3, #2
 800938e:	18d2      	adds	r2, r2, r3
 8009390:	2116      	movs	r1, #22
 8009392:	187b      	adds	r3, r7, r1
 8009394:	8812      	ldrh	r2, [r2, #0]
 8009396:	801a      	strh	r2, [r3, #0]
 8009398:	187b      	adds	r3, r7, r1
 800939a:	881a      	ldrh	r2, [r3, #0]
 800939c:	2380      	movs	r3, #128	; 0x80
 800939e:	01db      	lsls	r3, r3, #7
 80093a0:	4013      	ands	r3, r2
 80093a2:	d016      	beq.n	80093d2 <USB_EPClearStall+0xf6>
 80093a4:	687a      	ldr	r2, [r7, #4]
 80093a6:	683b      	ldr	r3, [r7, #0]
 80093a8:	781b      	ldrb	r3, [r3, #0]
 80093aa:	009b      	lsls	r3, r3, #2
 80093ac:	18d3      	adds	r3, r2, r3
 80093ae:	881b      	ldrh	r3, [r3, #0]
 80093b0:	b29a      	uxth	r2, r3
 80093b2:	2014      	movs	r0, #20
 80093b4:	183b      	adds	r3, r7, r0
 80093b6:	491c      	ldr	r1, [pc, #112]	; (8009428 <USB_EPClearStall+0x14c>)
 80093b8:	400a      	ands	r2, r1
 80093ba:	801a      	strh	r2, [r3, #0]
 80093bc:	687a      	ldr	r2, [r7, #4]
 80093be:	683b      	ldr	r3, [r7, #0]
 80093c0:	781b      	ldrb	r3, [r3, #0]
 80093c2:	009b      	lsls	r3, r3, #2
 80093c4:	18d3      	adds	r3, r2, r3
 80093c6:	183a      	adds	r2, r7, r0
 80093c8:	8812      	ldrh	r2, [r2, #0]
 80093ca:	491b      	ldr	r1, [pc, #108]	; (8009438 <USB_EPClearStall+0x15c>)
 80093cc:	430a      	orrs	r2, r1
 80093ce:	b292      	uxth	r2, r2
 80093d0:	801a      	strh	r2, [r3, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80093d2:	687a      	ldr	r2, [r7, #4]
 80093d4:	683b      	ldr	r3, [r7, #0]
 80093d6:	781b      	ldrb	r3, [r3, #0]
 80093d8:	009b      	lsls	r3, r3, #2
 80093da:	18d3      	adds	r3, r2, r3
 80093dc:	881b      	ldrh	r3, [r3, #0]
 80093de:	b29a      	uxth	r2, r3
 80093e0:	2012      	movs	r0, #18
 80093e2:	183b      	adds	r3, r7, r0
 80093e4:	4915      	ldr	r1, [pc, #84]	; (800943c <USB_EPClearStall+0x160>)
 80093e6:	400a      	ands	r2, r1
 80093e8:	801a      	strh	r2, [r3, #0]
 80093ea:	183b      	adds	r3, r7, r0
 80093ec:	183a      	adds	r2, r7, r0
 80093ee:	8812      	ldrh	r2, [r2, #0]
 80093f0:	2180      	movs	r1, #128	; 0x80
 80093f2:	0149      	lsls	r1, r1, #5
 80093f4:	404a      	eors	r2, r1
 80093f6:	801a      	strh	r2, [r3, #0]
 80093f8:	183b      	adds	r3, r7, r0
 80093fa:	183a      	adds	r2, r7, r0
 80093fc:	8812      	ldrh	r2, [r2, #0]
 80093fe:	2180      	movs	r1, #128	; 0x80
 8009400:	0189      	lsls	r1, r1, #6
 8009402:	404a      	eors	r2, r1
 8009404:	801a      	strh	r2, [r3, #0]
 8009406:	687a      	ldr	r2, [r7, #4]
 8009408:	683b      	ldr	r3, [r7, #0]
 800940a:	781b      	ldrb	r3, [r3, #0]
 800940c:	009b      	lsls	r3, r3, #2
 800940e:	18d3      	adds	r3, r2, r3
 8009410:	183a      	adds	r2, r7, r0
 8009412:	8812      	ldrh	r2, [r2, #0]
 8009414:	4907      	ldr	r1, [pc, #28]	; (8009434 <USB_EPClearStall+0x158>)
 8009416:	430a      	orrs	r2, r1
 8009418:	b292      	uxth	r2, r2
 800941a:	801a      	strh	r2, [r3, #0]
    }
  }

  return HAL_OK;
 800941c:	2300      	movs	r3, #0
}
 800941e:	0018      	movs	r0, r3
 8009420:	46bd      	mov	sp, r7
 8009422:	b006      	add	sp, #24
 8009424:	bd80      	pop	{r7, pc}
 8009426:	46c0      	nop			; (mov r8, r8)
 8009428:	ffff8f8f 	.word	0xffff8f8f
 800942c:	ffff80c0 	.word	0xffff80c0
 8009430:	ffff8fbf 	.word	0xffff8fbf
 8009434:	ffff8080 	.word	0xffff8080
 8009438:	ffffc080 	.word	0xffffc080
 800943c:	ffffbf8f 	.word	0xffffbf8f

08009440 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8009440:	b580      	push	{r7, lr}
 8009442:	b082      	sub	sp, #8
 8009444:	af00      	add	r7, sp, #0
 8009446:	6078      	str	r0, [r7, #4]
 8009448:	000a      	movs	r2, r1
 800944a:	1cfb      	adds	r3, r7, #3
 800944c:	701a      	strb	r2, [r3, #0]
  if (address == 0U)
 800944e:	1cfb      	adds	r3, r7, #3
 8009450:	781b      	ldrb	r3, [r3, #0]
 8009452:	2b00      	cmp	r3, #0
 8009454:	d103      	bne.n	800945e <USB_SetDevAddress+0x1e>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	224c      	movs	r2, #76	; 0x4c
 800945a:	2180      	movs	r1, #128	; 0x80
 800945c:	5299      	strh	r1, [r3, r2]
  }

  return HAL_OK;
 800945e:	2300      	movs	r3, #0
}
 8009460:	0018      	movs	r0, r3
 8009462:	46bd      	mov	sp, r7
 8009464:	b002      	add	sp, #8
 8009466:	bd80      	pop	{r7, pc}

08009468 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8009468:	b580      	push	{r7, lr}
 800946a:	b082      	sub	sp, #8
 800946c:	af00      	add	r7, sp, #0
 800946e:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	2258      	movs	r2, #88	; 0x58
 8009474:	5a9b      	ldrh	r3, [r3, r2]
 8009476:	b29b      	uxth	r3, r3
 8009478:	4a05      	ldr	r2, [pc, #20]	; (8009490 <USB_DevConnect+0x28>)
 800947a:	4313      	orrs	r3, r2
 800947c:	b299      	uxth	r1, r3
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	2258      	movs	r2, #88	; 0x58
 8009482:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8009484:	2300      	movs	r3, #0
}
 8009486:	0018      	movs	r0, r3
 8009488:	46bd      	mov	sp, r7
 800948a:	b002      	add	sp, #8
 800948c:	bd80      	pop	{r7, pc}
 800948e:	46c0      	nop			; (mov r8, r8)
 8009490:	ffff8000 	.word	0xffff8000

08009494 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8009494:	b580      	push	{r7, lr}
 8009496:	b084      	sub	sp, #16
 8009498:	af00      	add	r7, sp, #0
 800949a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	2244      	movs	r2, #68	; 0x44
 80094a0:	5a9b      	ldrh	r3, [r3, r2]
 80094a2:	b29b      	uxth	r3, r3
 80094a4:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 80094a6:	68fb      	ldr	r3, [r7, #12]
}
 80094a8:	0018      	movs	r0, r3
 80094aa:	46bd      	mov	sp, r7
 80094ac:	b004      	add	sp, #16
 80094ae:	bd80      	pop	{r7, pc}

080094b0 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80094b0:	b580      	push	{r7, lr}
 80094b2:	b08c      	sub	sp, #48	; 0x30
 80094b4:	af00      	add	r7, sp, #0
 80094b6:	60f8      	str	r0, [r7, #12]
 80094b8:	60b9      	str	r1, [r7, #8]
 80094ba:	0019      	movs	r1, r3
 80094bc:	1dbb      	adds	r3, r7, #6
 80094be:	801a      	strh	r2, [r3, #0]
 80094c0:	1d3b      	adds	r3, r7, #4
 80094c2:	1c0a      	adds	r2, r1, #0
 80094c4:	801a      	strh	r2, [r3, #0]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 80094c6:	1d3b      	adds	r3, r7, #4
 80094c8:	881b      	ldrh	r3, [r3, #0]
 80094ca:	3301      	adds	r3, #1
 80094cc:	085b      	lsrs	r3, r3, #1
 80094ce:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 80094d0:	68fb      	ldr	r3, [r7, #12]
 80094d2:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80094d4:	68bb      	ldr	r3, [r7, #8]
 80094d6:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80094d8:	1dbb      	adds	r3, r7, #6
 80094da:	881a      	ldrh	r2, [r3, #0]
 80094dc:	69fb      	ldr	r3, [r7, #28]
 80094de:	18d3      	adds	r3, r2, r3
 80094e0:	2280      	movs	r2, #128	; 0x80
 80094e2:	00d2      	lsls	r2, r2, #3
 80094e4:	4694      	mov	ip, r2
 80094e6:	4463      	add	r3, ip
 80094e8:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 80094ea:	6a3b      	ldr	r3, [r7, #32]
 80094ec:	62fb      	str	r3, [r7, #44]	; 0x2c
 80094ee:	e01b      	b.n	8009528 <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 80094f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094f2:	781b      	ldrb	r3, [r3, #0]
 80094f4:	61bb      	str	r3, [r7, #24]
    pBuf++;
 80094f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094f8:	3301      	adds	r3, #1
 80094fa:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 80094fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094fe:	781b      	ldrb	r3, [r3, #0]
 8009500:	b29b      	uxth	r3, r3
 8009502:	021b      	lsls	r3, r3, #8
 8009504:	b29b      	uxth	r3, r3
 8009506:	001a      	movs	r2, r3
 8009508:	69bb      	ldr	r3, [r7, #24]
 800950a:	4313      	orrs	r3, r2
 800950c:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 800950e:	697b      	ldr	r3, [r7, #20]
 8009510:	b29a      	uxth	r2, r3
 8009512:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009514:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8009516:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009518:	3302      	adds	r3, #2
 800951a:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
#endif

    pBuf++;
 800951c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800951e:	3301      	adds	r3, #1
 8009520:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8009522:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009524:	3b01      	subs	r3, #1
 8009526:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009528:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800952a:	2b00      	cmp	r3, #0
 800952c:	d1e0      	bne.n	80094f0 <USB_WritePMA+0x40>
  }
}
 800952e:	46c0      	nop			; (mov r8, r8)
 8009530:	46c0      	nop			; (mov r8, r8)
 8009532:	46bd      	mov	sp, r7
 8009534:	b00c      	add	sp, #48	; 0x30
 8009536:	bd80      	pop	{r7, pc}

08009538 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8009538:	b580      	push	{r7, lr}
 800953a:	b08a      	sub	sp, #40	; 0x28
 800953c:	af00      	add	r7, sp, #0
 800953e:	60f8      	str	r0, [r7, #12]
 8009540:	60b9      	str	r1, [r7, #8]
 8009542:	0019      	movs	r1, r3
 8009544:	1dbb      	adds	r3, r7, #6
 8009546:	801a      	strh	r2, [r3, #0]
 8009548:	1d3b      	adds	r3, r7, #4
 800954a:	1c0a      	adds	r2, r1, #0
 800954c:	801a      	strh	r2, [r3, #0]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800954e:	1d3b      	adds	r3, r7, #4
 8009550:	881b      	ldrh	r3, [r3, #0]
 8009552:	085b      	lsrs	r3, r3, #1
 8009554:	b29b      	uxth	r3, r3
 8009556:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8009558:	68fb      	ldr	r3, [r7, #12]
 800955a:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800955c:	68bb      	ldr	r3, [r7, #8]
 800955e:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8009560:	1dbb      	adds	r3, r7, #6
 8009562:	881a      	ldrh	r2, [r3, #0]
 8009564:	697b      	ldr	r3, [r7, #20]
 8009566:	18d3      	adds	r3, r2, r3
 8009568:	2280      	movs	r2, #128	; 0x80
 800956a:	00d2      	lsls	r2, r2, #3
 800956c:	4694      	mov	ip, r2
 800956e:	4463      	add	r3, ip
 8009570:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8009572:	69bb      	ldr	r3, [r7, #24]
 8009574:	627b      	str	r3, [r7, #36]	; 0x24
 8009576:	e018      	b.n	80095aa <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8009578:	6a3b      	ldr	r3, [r7, #32]
 800957a:	881b      	ldrh	r3, [r3, #0]
 800957c:	b29b      	uxth	r3, r3
 800957e:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8009580:	6a3b      	ldr	r3, [r7, #32]
 8009582:	3302      	adds	r3, #2
 8009584:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8009586:	693b      	ldr	r3, [r7, #16]
 8009588:	b2da      	uxtb	r2, r3
 800958a:	69fb      	ldr	r3, [r7, #28]
 800958c:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800958e:	69fb      	ldr	r3, [r7, #28]
 8009590:	3301      	adds	r3, #1
 8009592:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8009594:	693b      	ldr	r3, [r7, #16]
 8009596:	0a1b      	lsrs	r3, r3, #8
 8009598:	b2da      	uxtb	r2, r3
 800959a:	69fb      	ldr	r3, [r7, #28]
 800959c:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800959e:	69fb      	ldr	r3, [r7, #28]
 80095a0:	3301      	adds	r3, #1
 80095a2:	61fb      	str	r3, [r7, #28]
  for (i = n; i != 0U; i--)
 80095a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095a6:	3b01      	subs	r3, #1
 80095a8:	627b      	str	r3, [r7, #36]	; 0x24
 80095aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095ac:	2b00      	cmp	r3, #0
 80095ae:	d1e3      	bne.n	8009578 <USB_ReadPMA+0x40>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif
  }

  if ((wNBytes % 2U) != 0U)
 80095b0:	1d3b      	adds	r3, r7, #4
 80095b2:	881b      	ldrh	r3, [r3, #0]
 80095b4:	2201      	movs	r2, #1
 80095b6:	4013      	ands	r3, r2
 80095b8:	b29b      	uxth	r3, r3
 80095ba:	2b00      	cmp	r3, #0
 80095bc:	d007      	beq.n	80095ce <USB_ReadPMA+0x96>
  {
    temp = *pdwVal;
 80095be:	6a3b      	ldr	r3, [r7, #32]
 80095c0:	881b      	ldrh	r3, [r3, #0]
 80095c2:	b29b      	uxth	r3, r3
 80095c4:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 80095c6:	693b      	ldr	r3, [r7, #16]
 80095c8:	b2da      	uxtb	r2, r3
 80095ca:	69fb      	ldr	r3, [r7, #28]
 80095cc:	701a      	strb	r2, [r3, #0]
  }
}
 80095ce:	46c0      	nop			; (mov r8, r8)
 80095d0:	46bd      	mov	sp, r7
 80095d2:	b00a      	add	sp, #40	; 0x28
 80095d4:	bd80      	pop	{r7, pc}

080095d6 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80095d6:	b580      	push	{r7, lr}
 80095d8:	b084      	sub	sp, #16
 80095da:	af00      	add	r7, sp, #0
 80095dc:	6078      	str	r0, [r7, #4]
 80095de:	000a      	movs	r2, r1
 80095e0:	1cfb      	adds	r3, r7, #3
 80095e2:	701a      	strb	r2, [r3, #0]
  uint8_t ret = 0U;
 80095e4:	230f      	movs	r3, #15
 80095e6:	18fb      	adds	r3, r7, r3
 80095e8:	2200      	movs	r2, #0
 80095ea:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	7c1b      	ldrb	r3, [r3, #16]
 80095f0:	2b00      	cmp	r3, #0
 80095f2:	d116      	bne.n	8009622 <USBD_CDC_Init+0x4c>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80095f4:	2380      	movs	r3, #128	; 0x80
 80095f6:	009b      	lsls	r3, r3, #2
 80095f8:	6878      	ldr	r0, [r7, #4]
 80095fa:	2202      	movs	r2, #2
 80095fc:	2181      	movs	r1, #129	; 0x81
 80095fe:	f002 f8b6 	bl	800b76e <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	2201      	movs	r2, #1
 8009606:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8009608:	2380      	movs	r3, #128	; 0x80
 800960a:	009b      	lsls	r3, r3, #2
 800960c:	6878      	ldr	r0, [r7, #4]
 800960e:	2202      	movs	r2, #2
 8009610:	2101      	movs	r1, #1
 8009612:	f002 f8ac 	bl	800b76e <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8009616:	687a      	ldr	r2, [r7, #4]
 8009618:	23b6      	movs	r3, #182	; 0xb6
 800961a:	005b      	lsls	r3, r3, #1
 800961c:	2101      	movs	r1, #1
 800961e:	50d1      	str	r1, [r2, r3]
 8009620:	e013      	b.n	800964a <USBD_CDC_Init+0x74>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8009622:	6878      	ldr	r0, [r7, #4]
 8009624:	2340      	movs	r3, #64	; 0x40
 8009626:	2202      	movs	r2, #2
 8009628:	2181      	movs	r1, #129	; 0x81
 800962a:	f002 f8a0 	bl	800b76e <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	2201      	movs	r2, #1
 8009632:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8009634:	6878      	ldr	r0, [r7, #4]
 8009636:	2340      	movs	r3, #64	; 0x40
 8009638:	2202      	movs	r2, #2
 800963a:	2101      	movs	r1, #1
 800963c:	f002 f897 	bl	800b76e <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8009640:	687a      	ldr	r2, [r7, #4]
 8009642:	23b6      	movs	r3, #182	; 0xb6
 8009644:	005b      	lsls	r3, r3, #1
 8009646:	2101      	movs	r1, #1
 8009648:	50d1      	str	r1, [r2, r3]
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800964a:	6878      	ldr	r0, [r7, #4]
 800964c:	2308      	movs	r3, #8
 800964e:	2203      	movs	r2, #3
 8009650:	2182      	movs	r1, #130	; 0x82
 8009652:	f002 f88c 	bl	800b76e <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	2201      	movs	r2, #1
 800965a:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800965c:	2387      	movs	r3, #135	; 0x87
 800965e:	009b      	lsls	r3, r3, #2
 8009660:	0018      	movs	r0, r3
 8009662:	f002 fa1d 	bl	800baa0 <USBD_static_malloc>
 8009666:	0001      	movs	r1, r0
 8009668:	687a      	ldr	r2, [r7, #4]
 800966a:	23ae      	movs	r3, #174	; 0xae
 800966c:	009b      	lsls	r3, r3, #2
 800966e:	50d1      	str	r1, [r2, r3]

  if (pdev->pClassData == NULL)
 8009670:	687a      	ldr	r2, [r7, #4]
 8009672:	23ae      	movs	r3, #174	; 0xae
 8009674:	009b      	lsls	r3, r3, #2
 8009676:	58d3      	ldr	r3, [r2, r3]
 8009678:	2b00      	cmp	r3, #0
 800967a:	d104      	bne.n	8009686 <USBD_CDC_Init+0xb0>
  {
    ret = 1U;
 800967c:	230f      	movs	r3, #15
 800967e:	18fb      	adds	r3, r7, r3
 8009680:	2201      	movs	r2, #1
 8009682:	701a      	strb	r2, [r3, #0]
 8009684:	e02c      	b.n	80096e0 <USBD_CDC_Init+0x10a>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009686:	687a      	ldr	r2, [r7, #4]
 8009688:	23ae      	movs	r3, #174	; 0xae
 800968a:	009b      	lsls	r3, r3, #2
 800968c:	58d3      	ldr	r3, [r2, r3]
 800968e:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8009690:	687a      	ldr	r2, [r7, #4]
 8009692:	23af      	movs	r3, #175	; 0xaf
 8009694:	009b      	lsls	r3, r3, #2
 8009696:	58d3      	ldr	r3, [r2, r3]
 8009698:	681b      	ldr	r3, [r3, #0]
 800969a:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 800969c:	68ba      	ldr	r2, [r7, #8]
 800969e:	2385      	movs	r3, #133	; 0x85
 80096a0:	009b      	lsls	r3, r3, #2
 80096a2:	2100      	movs	r1, #0
 80096a4:	50d1      	str	r1, [r2, r3]
    hcdc->RxState = 0U;
 80096a6:	68ba      	ldr	r2, [r7, #8]
 80096a8:	2386      	movs	r3, #134	; 0x86
 80096aa:	009b      	lsls	r3, r3, #2
 80096ac:	2100      	movs	r1, #0
 80096ae:	50d1      	str	r1, [r2, r3]

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	7c1b      	ldrb	r3, [r3, #16]
 80096b4:	2b00      	cmp	r3, #0
 80096b6:	d10a      	bne.n	80096ce <USBD_CDC_Init+0xf8>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80096b8:	68ba      	ldr	r2, [r7, #8]
 80096ba:	2381      	movs	r3, #129	; 0x81
 80096bc:	009b      	lsls	r3, r3, #2
 80096be:	58d2      	ldr	r2, [r2, r3]
 80096c0:	2380      	movs	r3, #128	; 0x80
 80096c2:	009b      	lsls	r3, r3, #2
 80096c4:	6878      	ldr	r0, [r7, #4]
 80096c6:	2101      	movs	r1, #1
 80096c8:	f002 f99c 	bl	800ba04 <USBD_LL_PrepareReceive>
 80096cc:	e008      	b.n	80096e0 <USBD_CDC_Init+0x10a>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80096ce:	68ba      	ldr	r2, [r7, #8]
 80096d0:	2381      	movs	r3, #129	; 0x81
 80096d2:	009b      	lsls	r3, r3, #2
 80096d4:	58d2      	ldr	r2, [r2, r3]
 80096d6:	6878      	ldr	r0, [r7, #4]
 80096d8:	2340      	movs	r3, #64	; 0x40
 80096da:	2101      	movs	r1, #1
 80096dc:	f002 f992 	bl	800ba04 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 80096e0:	230f      	movs	r3, #15
 80096e2:	18fb      	adds	r3, r7, r3
 80096e4:	781b      	ldrb	r3, [r3, #0]
}
 80096e6:	0018      	movs	r0, r3
 80096e8:	46bd      	mov	sp, r7
 80096ea:	b004      	add	sp, #16
 80096ec:	bd80      	pop	{r7, pc}

080096ee <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80096ee:	b580      	push	{r7, lr}
 80096f0:	b084      	sub	sp, #16
 80096f2:	af00      	add	r7, sp, #0
 80096f4:	6078      	str	r0, [r7, #4]
 80096f6:	000a      	movs	r2, r1
 80096f8:	1cfb      	adds	r3, r7, #3
 80096fa:	701a      	strb	r2, [r3, #0]
  uint8_t ret = 0U;
 80096fc:	230f      	movs	r3, #15
 80096fe:	18fb      	adds	r3, r7, r3
 8009700:	2200      	movs	r2, #0
 8009702:	701a      	strb	r2, [r3, #0]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	2181      	movs	r1, #129	; 0x81
 8009708:	0018      	movs	r0, r3
 800970a:	f002 f867 	bl	800b7dc <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	2200      	movs	r2, #0
 8009712:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	2101      	movs	r1, #1
 8009718:	0018      	movs	r0, r3
 800971a:	f002 f85f 	bl	800b7dc <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800971e:	687a      	ldr	r2, [r7, #4]
 8009720:	23b6      	movs	r3, #182	; 0xb6
 8009722:	005b      	lsls	r3, r3, #1
 8009724:	2100      	movs	r1, #0
 8009726:	50d1      	str	r1, [r2, r3]

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	2182      	movs	r1, #130	; 0x82
 800972c:	0018      	movs	r0, r3
 800972e:	f002 f855 	bl	800b7dc <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	2200      	movs	r2, #0
 8009736:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8009738:	687a      	ldr	r2, [r7, #4]
 800973a:	23ae      	movs	r3, #174	; 0xae
 800973c:	009b      	lsls	r3, r3, #2
 800973e:	58d3      	ldr	r3, [r2, r3]
 8009740:	2b00      	cmp	r3, #0
 8009742:	d011      	beq.n	8009768 <USBD_CDC_DeInit+0x7a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8009744:	687a      	ldr	r2, [r7, #4]
 8009746:	23af      	movs	r3, #175	; 0xaf
 8009748:	009b      	lsls	r3, r3, #2
 800974a:	58d3      	ldr	r3, [r2, r3]
 800974c:	685b      	ldr	r3, [r3, #4]
 800974e:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8009750:	687a      	ldr	r2, [r7, #4]
 8009752:	23ae      	movs	r3, #174	; 0xae
 8009754:	009b      	lsls	r3, r3, #2
 8009756:	58d3      	ldr	r3, [r2, r3]
 8009758:	0018      	movs	r0, r3
 800975a:	f002 f9ad 	bl	800bab8 <USBD_static_free>
    pdev->pClassData = NULL;
 800975e:	687a      	ldr	r2, [r7, #4]
 8009760:	23ae      	movs	r3, #174	; 0xae
 8009762:	009b      	lsls	r3, r3, #2
 8009764:	2100      	movs	r1, #0
 8009766:	50d1      	str	r1, [r2, r3]
  }

  return ret;
 8009768:	230f      	movs	r3, #15
 800976a:	18fb      	adds	r3, r7, r3
 800976c:	781b      	ldrb	r3, [r3, #0]
}
 800976e:	0018      	movs	r0, r3
 8009770:	46bd      	mov	sp, r7
 8009772:	b004      	add	sp, #16
 8009774:	bd80      	pop	{r7, pc}
	...

08009778 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8009778:	b580      	push	{r7, lr}
 800977a:	b086      	sub	sp, #24
 800977c:	af00      	add	r7, sp, #0
 800977e:	6078      	str	r0, [r7, #4]
 8009780:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009782:	687a      	ldr	r2, [r7, #4]
 8009784:	23ae      	movs	r3, #174	; 0xae
 8009786:	009b      	lsls	r3, r3, #2
 8009788:	58d3      	ldr	r3, [r2, r3]
 800978a:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 800978c:	230f      	movs	r3, #15
 800978e:	18fb      	adds	r3, r7, r3
 8009790:	2200      	movs	r2, #0
 8009792:	701a      	strb	r2, [r3, #0]
  uint16_t status_info = 0U;
 8009794:	230c      	movs	r3, #12
 8009796:	18fb      	adds	r3, r7, r3
 8009798:	2200      	movs	r2, #0
 800979a:	801a      	strh	r2, [r3, #0]
  uint8_t ret = USBD_OK;
 800979c:	2317      	movs	r3, #23
 800979e:	18fb      	adds	r3, r7, r3
 80097a0:	2200      	movs	r2, #0
 80097a2:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80097a4:	683b      	ldr	r3, [r7, #0]
 80097a6:	781b      	ldrb	r3, [r3, #0]
 80097a8:	001a      	movs	r2, r3
 80097aa:	2360      	movs	r3, #96	; 0x60
 80097ac:	4013      	ands	r3, r2
 80097ae:	d03d      	beq.n	800982c <USBD_CDC_Setup+0xb4>
 80097b0:	2b20      	cmp	r3, #32
 80097b2:	d000      	beq.n	80097b6 <USBD_CDC_Setup+0x3e>
 80097b4:	e094      	b.n	80098e0 <USBD_CDC_Setup+0x168>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 80097b6:	683b      	ldr	r3, [r7, #0]
 80097b8:	88db      	ldrh	r3, [r3, #6]
 80097ba:	2b00      	cmp	r3, #0
 80097bc:	d02b      	beq.n	8009816 <USBD_CDC_Setup+0x9e>
      {
        if (req->bmRequest & 0x80U)
 80097be:	683b      	ldr	r3, [r7, #0]
 80097c0:	781b      	ldrb	r3, [r3, #0]
 80097c2:	b25b      	sxtb	r3, r3
 80097c4:	2b00      	cmp	r3, #0
 80097c6:	da12      	bge.n	80097ee <USBD_CDC_Setup+0x76>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80097c8:	687a      	ldr	r2, [r7, #4]
 80097ca:	23af      	movs	r3, #175	; 0xaf
 80097cc:	009b      	lsls	r3, r3, #2
 80097ce:	58d3      	ldr	r3, [r2, r3]
 80097d0:	689b      	ldr	r3, [r3, #8]
 80097d2:	683a      	ldr	r2, [r7, #0]
 80097d4:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 80097d6:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80097d8:	683a      	ldr	r2, [r7, #0]
 80097da:	88d2      	ldrh	r2, [r2, #6]
 80097dc:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80097de:	6939      	ldr	r1, [r7, #16]
 80097e0:	683b      	ldr	r3, [r7, #0]
 80097e2:	88da      	ldrh	r2, [r3, #6]
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	0018      	movs	r0, r3
 80097e8:	f001 fbb2 	bl	800af50 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 80097ec:	e083      	b.n	80098f6 <USBD_CDC_Setup+0x17e>
          hcdc->CmdOpCode = req->bRequest;
 80097ee:	683b      	ldr	r3, [r7, #0]
 80097f0:	7859      	ldrb	r1, [r3, #1]
 80097f2:	693a      	ldr	r2, [r7, #16]
 80097f4:	2380      	movs	r3, #128	; 0x80
 80097f6:	009b      	lsls	r3, r3, #2
 80097f8:	54d1      	strb	r1, [r2, r3]
          hcdc->CmdLength = (uint8_t)req->wLength;
 80097fa:	683b      	ldr	r3, [r7, #0]
 80097fc:	88db      	ldrh	r3, [r3, #6]
 80097fe:	b2d9      	uxtb	r1, r3
 8009800:	693b      	ldr	r3, [r7, #16]
 8009802:	4a40      	ldr	r2, [pc, #256]	; (8009904 <USBD_CDC_Setup+0x18c>)
 8009804:	5499      	strb	r1, [r3, r2]
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8009806:	6939      	ldr	r1, [r7, #16]
 8009808:	683b      	ldr	r3, [r7, #0]
 800980a:	88da      	ldrh	r2, [r3, #6]
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	0018      	movs	r0, r3
 8009810:	f001 fbd1 	bl	800afb6 <USBD_CtlPrepareRx>
      break;
 8009814:	e06f      	b.n	80098f6 <USBD_CDC_Setup+0x17e>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8009816:	687a      	ldr	r2, [r7, #4]
 8009818:	23af      	movs	r3, #175	; 0xaf
 800981a:	009b      	lsls	r3, r3, #2
 800981c:	58d3      	ldr	r3, [r2, r3]
 800981e:	689b      	ldr	r3, [r3, #8]
 8009820:	683a      	ldr	r2, [r7, #0]
 8009822:	7850      	ldrb	r0, [r2, #1]
 8009824:	6839      	ldr	r1, [r7, #0]
 8009826:	2200      	movs	r2, #0
 8009828:	4798      	blx	r3
      break;
 800982a:	e064      	b.n	80098f6 <USBD_CDC_Setup+0x17e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800982c:	683b      	ldr	r3, [r7, #0]
 800982e:	785b      	ldrb	r3, [r3, #1]
 8009830:	2b0b      	cmp	r3, #11
 8009832:	d037      	beq.n	80098a4 <USBD_CDC_Setup+0x12c>
 8009834:	dc47      	bgt.n	80098c6 <USBD_CDC_Setup+0x14e>
 8009836:	2b00      	cmp	r3, #0
 8009838:	d002      	beq.n	8009840 <USBD_CDC_Setup+0xc8>
 800983a:	2b0a      	cmp	r3, #10
 800983c:	d019      	beq.n	8009872 <USBD_CDC_Setup+0xfa>
 800983e:	e042      	b.n	80098c6 <USBD_CDC_Setup+0x14e>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009840:	687a      	ldr	r2, [r7, #4]
 8009842:	23a7      	movs	r3, #167	; 0xa7
 8009844:	009b      	lsls	r3, r3, #2
 8009846:	5cd3      	ldrb	r3, [r2, r3]
 8009848:	2b03      	cmp	r3, #3
 800984a:	d107      	bne.n	800985c <USBD_CDC_Setup+0xe4>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 800984c:	230c      	movs	r3, #12
 800984e:	18f9      	adds	r1, r7, r3
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	2202      	movs	r2, #2
 8009854:	0018      	movs	r0, r3
 8009856:	f001 fb7b 	bl	800af50 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800985a:	e040      	b.n	80098de <USBD_CDC_Setup+0x166>
            USBD_CtlError(pdev, req);
 800985c:	683a      	ldr	r2, [r7, #0]
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	0011      	movs	r1, r2
 8009862:	0018      	movs	r0, r3
 8009864:	f001 faf6 	bl	800ae54 <USBD_CtlError>
            ret = USBD_FAIL;
 8009868:	2317      	movs	r3, #23
 800986a:	18fb      	adds	r3, r7, r3
 800986c:	2202      	movs	r2, #2
 800986e:	701a      	strb	r2, [r3, #0]
          break;
 8009870:	e035      	b.n	80098de <USBD_CDC_Setup+0x166>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009872:	687a      	ldr	r2, [r7, #4]
 8009874:	23a7      	movs	r3, #167	; 0xa7
 8009876:	009b      	lsls	r3, r3, #2
 8009878:	5cd3      	ldrb	r3, [r2, r3]
 800987a:	2b03      	cmp	r3, #3
 800987c:	d107      	bne.n	800988e <USBD_CDC_Setup+0x116>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 800987e:	230f      	movs	r3, #15
 8009880:	18f9      	adds	r1, r7, r3
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	2201      	movs	r2, #1
 8009886:	0018      	movs	r0, r3
 8009888:	f001 fb62 	bl	800af50 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800988c:	e027      	b.n	80098de <USBD_CDC_Setup+0x166>
            USBD_CtlError(pdev, req);
 800988e:	683a      	ldr	r2, [r7, #0]
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	0011      	movs	r1, r2
 8009894:	0018      	movs	r0, r3
 8009896:	f001 fadd 	bl	800ae54 <USBD_CtlError>
            ret = USBD_FAIL;
 800989a:	2317      	movs	r3, #23
 800989c:	18fb      	adds	r3, r7, r3
 800989e:	2202      	movs	r2, #2
 80098a0:	701a      	strb	r2, [r3, #0]
          break;
 80098a2:	e01c      	b.n	80098de <USBD_CDC_Setup+0x166>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80098a4:	687a      	ldr	r2, [r7, #4]
 80098a6:	23a7      	movs	r3, #167	; 0xa7
 80098a8:	009b      	lsls	r3, r3, #2
 80098aa:	5cd3      	ldrb	r3, [r2, r3]
 80098ac:	2b03      	cmp	r3, #3
 80098ae:	d015      	beq.n	80098dc <USBD_CDC_Setup+0x164>
          {
            USBD_CtlError(pdev, req);
 80098b0:	683a      	ldr	r2, [r7, #0]
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	0011      	movs	r1, r2
 80098b6:	0018      	movs	r0, r3
 80098b8:	f001 facc 	bl	800ae54 <USBD_CtlError>
            ret = USBD_FAIL;
 80098bc:	2317      	movs	r3, #23
 80098be:	18fb      	adds	r3, r7, r3
 80098c0:	2202      	movs	r2, #2
 80098c2:	701a      	strb	r2, [r3, #0]
          }
          break;
 80098c4:	e00a      	b.n	80098dc <USBD_CDC_Setup+0x164>

        default:
          USBD_CtlError(pdev, req);
 80098c6:	683a      	ldr	r2, [r7, #0]
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	0011      	movs	r1, r2
 80098cc:	0018      	movs	r0, r3
 80098ce:	f001 fac1 	bl	800ae54 <USBD_CtlError>
          ret = USBD_FAIL;
 80098d2:	2317      	movs	r3, #23
 80098d4:	18fb      	adds	r3, r7, r3
 80098d6:	2202      	movs	r2, #2
 80098d8:	701a      	strb	r2, [r3, #0]
          break;
 80098da:	e000      	b.n	80098de <USBD_CDC_Setup+0x166>
          break;
 80098dc:	46c0      	nop			; (mov r8, r8)
      }
      break;
 80098de:	e00a      	b.n	80098f6 <USBD_CDC_Setup+0x17e>

    default:
      USBD_CtlError(pdev, req);
 80098e0:	683a      	ldr	r2, [r7, #0]
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	0011      	movs	r1, r2
 80098e6:	0018      	movs	r0, r3
 80098e8:	f001 fab4 	bl	800ae54 <USBD_CtlError>
      ret = USBD_FAIL;
 80098ec:	2317      	movs	r3, #23
 80098ee:	18fb      	adds	r3, r7, r3
 80098f0:	2202      	movs	r2, #2
 80098f2:	701a      	strb	r2, [r3, #0]
      break;
 80098f4:	46c0      	nop			; (mov r8, r8)
  }

  return ret;
 80098f6:	2317      	movs	r3, #23
 80098f8:	18fb      	adds	r3, r7, r3
 80098fa:	781b      	ldrb	r3, [r3, #0]
}
 80098fc:	0018      	movs	r0, r3
 80098fe:	46bd      	mov	sp, r7
 8009900:	b006      	add	sp, #24
 8009902:	bd80      	pop	{r7, pc}
 8009904:	00000201 	.word	0x00000201

08009908 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009908:	b580      	push	{r7, lr}
 800990a:	b084      	sub	sp, #16
 800990c:	af00      	add	r7, sp, #0
 800990e:	6078      	str	r0, [r7, #4]
 8009910:	000a      	movs	r2, r1
 8009912:	1cfb      	adds	r3, r7, #3
 8009914:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8009916:	687a      	ldr	r2, [r7, #4]
 8009918:	23ae      	movs	r3, #174	; 0xae
 800991a:	009b      	lsls	r3, r3, #2
 800991c:	58d3      	ldr	r3, [r2, r3]
 800991e:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8009920:	687a      	ldr	r2, [r7, #4]
 8009922:	23b0      	movs	r3, #176	; 0xb0
 8009924:	009b      	lsls	r3, r3, #2
 8009926:	58d3      	ldr	r3, [r2, r3]
 8009928:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 800992a:	687a      	ldr	r2, [r7, #4]
 800992c:	23ae      	movs	r3, #174	; 0xae
 800992e:	009b      	lsls	r3, r3, #2
 8009930:	58d3      	ldr	r3, [r2, r3]
 8009932:	2b00      	cmp	r3, #0
 8009934:	d03e      	beq.n	80099b4 <USBD_CDC_DataIn+0xac>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8009936:	1cfb      	adds	r3, r7, #3
 8009938:	781a      	ldrb	r2, [r3, #0]
 800993a:	6879      	ldr	r1, [r7, #4]
 800993c:	0013      	movs	r3, r2
 800993e:	009b      	lsls	r3, r3, #2
 8009940:	189b      	adds	r3, r3, r2
 8009942:	009b      	lsls	r3, r3, #2
 8009944:	18cb      	adds	r3, r1, r3
 8009946:	331c      	adds	r3, #28
 8009948:	681b      	ldr	r3, [r3, #0]
 800994a:	2b00      	cmp	r3, #0
 800994c:	d02b      	beq.n	80099a6 <USBD_CDC_DataIn+0x9e>
 800994e:	1cfb      	adds	r3, r7, #3
 8009950:	781a      	ldrb	r2, [r3, #0]
 8009952:	6879      	ldr	r1, [r7, #4]
 8009954:	0013      	movs	r3, r2
 8009956:	009b      	lsls	r3, r3, #2
 8009958:	189b      	adds	r3, r3, r2
 800995a:	009b      	lsls	r3, r3, #2
 800995c:	18cb      	adds	r3, r1, r3
 800995e:	331c      	adds	r3, #28
 8009960:	6818      	ldr	r0, [r3, #0]
 8009962:	1cfb      	adds	r3, r7, #3
 8009964:	781a      	ldrb	r2, [r3, #0]
 8009966:	68b9      	ldr	r1, [r7, #8]
 8009968:	0013      	movs	r3, r2
 800996a:	009b      	lsls	r3, r3, #2
 800996c:	189b      	adds	r3, r3, r2
 800996e:	00db      	lsls	r3, r3, #3
 8009970:	18cb      	adds	r3, r1, r3
 8009972:	3338      	adds	r3, #56	; 0x38
 8009974:	681b      	ldr	r3, [r3, #0]
 8009976:	0019      	movs	r1, r3
 8009978:	f7f6 fc5e 	bl	8000238 <__aeabi_uidivmod>
 800997c:	1e0b      	subs	r3, r1, #0
 800997e:	d112      	bne.n	80099a6 <USBD_CDC_DataIn+0x9e>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8009980:	1cfb      	adds	r3, r7, #3
 8009982:	781a      	ldrb	r2, [r3, #0]
 8009984:	6879      	ldr	r1, [r7, #4]
 8009986:	0013      	movs	r3, r2
 8009988:	009b      	lsls	r3, r3, #2
 800998a:	189b      	adds	r3, r3, r2
 800998c:	009b      	lsls	r3, r3, #2
 800998e:	18cb      	adds	r3, r1, r3
 8009990:	331c      	adds	r3, #28
 8009992:	2200      	movs	r2, #0
 8009994:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8009996:	1cfb      	adds	r3, r7, #3
 8009998:	7819      	ldrb	r1, [r3, #0]
 800999a:	6878      	ldr	r0, [r7, #4]
 800999c:	2300      	movs	r3, #0
 800999e:	2200      	movs	r2, #0
 80099a0:	f001 fff9 	bl	800b996 <USBD_LL_Transmit>
 80099a4:	e004      	b.n	80099b0 <USBD_CDC_DataIn+0xa8>
    }
    else
    {
      hcdc->TxState = 0U;
 80099a6:	68fa      	ldr	r2, [r7, #12]
 80099a8:	2385      	movs	r3, #133	; 0x85
 80099aa:	009b      	lsls	r3, r3, #2
 80099ac:	2100      	movs	r1, #0
 80099ae:	50d1      	str	r1, [r2, r3]
    }
    return USBD_OK;
 80099b0:	2300      	movs	r3, #0
 80099b2:	e000      	b.n	80099b6 <USBD_CDC_DataIn+0xae>
  }
  else
  {
    return USBD_FAIL;
 80099b4:	2302      	movs	r3, #2
  }
}
 80099b6:	0018      	movs	r0, r3
 80099b8:	46bd      	mov	sp, r7
 80099ba:	b004      	add	sp, #16
 80099bc:	bd80      	pop	{r7, pc}

080099be <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80099be:	b580      	push	{r7, lr}
 80099c0:	b084      	sub	sp, #16
 80099c2:	af00      	add	r7, sp, #0
 80099c4:	6078      	str	r0, [r7, #4]
 80099c6:	000a      	movs	r2, r1
 80099c8:	1cfb      	adds	r3, r7, #3
 80099ca:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80099cc:	687a      	ldr	r2, [r7, #4]
 80099ce:	23ae      	movs	r3, #174	; 0xae
 80099d0:	009b      	lsls	r3, r3, #2
 80099d2:	58d3      	ldr	r3, [r2, r3]
 80099d4:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80099d6:	1cfb      	adds	r3, r7, #3
 80099d8:	781a      	ldrb	r2, [r3, #0]
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	0011      	movs	r1, r2
 80099de:	0018      	movs	r0, r3
 80099e0:	f002 f847 	bl	800ba72 <USBD_LL_GetRxDataSize>
 80099e4:	0001      	movs	r1, r0
 80099e6:	68fa      	ldr	r2, [r7, #12]
 80099e8:	2383      	movs	r3, #131	; 0x83
 80099ea:	009b      	lsls	r3, r3, #2
 80099ec:	50d1      	str	r1, [r2, r3]

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 80099ee:	687a      	ldr	r2, [r7, #4]
 80099f0:	23ae      	movs	r3, #174	; 0xae
 80099f2:	009b      	lsls	r3, r3, #2
 80099f4:	58d3      	ldr	r3, [r2, r3]
 80099f6:	2b00      	cmp	r3, #0
 80099f8:	d011      	beq.n	8009a1e <USBD_CDC_DataOut+0x60>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80099fa:	687a      	ldr	r2, [r7, #4]
 80099fc:	23af      	movs	r3, #175	; 0xaf
 80099fe:	009b      	lsls	r3, r3, #2
 8009a00:	58d3      	ldr	r3, [r2, r3]
 8009a02:	68da      	ldr	r2, [r3, #12]
 8009a04:	68f9      	ldr	r1, [r7, #12]
 8009a06:	2381      	movs	r3, #129	; 0x81
 8009a08:	009b      	lsls	r3, r3, #2
 8009a0a:	58c8      	ldr	r0, [r1, r3]
 8009a0c:	68fb      	ldr	r3, [r7, #12]
 8009a0e:	2183      	movs	r1, #131	; 0x83
 8009a10:	0089      	lsls	r1, r1, #2
 8009a12:	468c      	mov	ip, r1
 8009a14:	4463      	add	r3, ip
 8009a16:	0019      	movs	r1, r3
 8009a18:	4790      	blx	r2

    return USBD_OK;
 8009a1a:	2300      	movs	r3, #0
 8009a1c:	e000      	b.n	8009a20 <USBD_CDC_DataOut+0x62>
  }
  else
  {
    return USBD_FAIL;
 8009a1e:	2302      	movs	r3, #2
  }
}
 8009a20:	0018      	movs	r0, r3
 8009a22:	46bd      	mov	sp, r7
 8009a24:	b004      	add	sp, #16
 8009a26:	bd80      	pop	{r7, pc}

08009a28 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8009a28:	b590      	push	{r4, r7, lr}
 8009a2a:	b085      	sub	sp, #20
 8009a2c:	af00      	add	r7, sp, #0
 8009a2e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009a30:	687a      	ldr	r2, [r7, #4]
 8009a32:	23ae      	movs	r3, #174	; 0xae
 8009a34:	009b      	lsls	r3, r3, #2
 8009a36:	58d3      	ldr	r3, [r2, r3]
 8009a38:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8009a3a:	687a      	ldr	r2, [r7, #4]
 8009a3c:	23af      	movs	r3, #175	; 0xaf
 8009a3e:	009b      	lsls	r3, r3, #2
 8009a40:	58d3      	ldr	r3, [r2, r3]
 8009a42:	2b00      	cmp	r3, #0
 8009a44:	d019      	beq.n	8009a7a <USBD_CDC_EP0_RxReady+0x52>
 8009a46:	68fa      	ldr	r2, [r7, #12]
 8009a48:	2380      	movs	r3, #128	; 0x80
 8009a4a:	009b      	lsls	r3, r3, #2
 8009a4c:	5cd3      	ldrb	r3, [r2, r3]
 8009a4e:	2bff      	cmp	r3, #255	; 0xff
 8009a50:	d013      	beq.n	8009a7a <USBD_CDC_EP0_RxReady+0x52>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8009a52:	687a      	ldr	r2, [r7, #4]
 8009a54:	23af      	movs	r3, #175	; 0xaf
 8009a56:	009b      	lsls	r3, r3, #2
 8009a58:	58d3      	ldr	r3, [r2, r3]
 8009a5a:	689b      	ldr	r3, [r3, #8]
 8009a5c:	68f9      	ldr	r1, [r7, #12]
 8009a5e:	2280      	movs	r2, #128	; 0x80
 8009a60:	0092      	lsls	r2, r2, #2
 8009a62:	5c88      	ldrb	r0, [r1, r2]
                                                      (uint8_t *)(void *)hcdc->data,
 8009a64:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8009a66:	68fa      	ldr	r2, [r7, #12]
 8009a68:	4c06      	ldr	r4, [pc, #24]	; (8009a84 <USBD_CDC_EP0_RxReady+0x5c>)
 8009a6a:	5d12      	ldrb	r2, [r2, r4]
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8009a6c:	b292      	uxth	r2, r2
 8009a6e:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8009a70:	68fa      	ldr	r2, [r7, #12]
 8009a72:	2380      	movs	r3, #128	; 0x80
 8009a74:	009b      	lsls	r3, r3, #2
 8009a76:	21ff      	movs	r1, #255	; 0xff
 8009a78:	54d1      	strb	r1, [r2, r3]

  }
  return USBD_OK;
 8009a7a:	2300      	movs	r3, #0
}
 8009a7c:	0018      	movs	r0, r3
 8009a7e:	46bd      	mov	sp, r7
 8009a80:	b005      	add	sp, #20
 8009a82:	bd90      	pop	{r4, r7, pc}
 8009a84:	00000201 	.word	0x00000201

08009a88 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8009a88:	b580      	push	{r7, lr}
 8009a8a:	b082      	sub	sp, #8
 8009a8c:	af00      	add	r7, sp, #0
 8009a8e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	2243      	movs	r2, #67	; 0x43
 8009a94:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8009a96:	4b02      	ldr	r3, [pc, #8]	; (8009aa0 <USBD_CDC_GetFSCfgDesc+0x18>)
}
 8009a98:	0018      	movs	r0, r3
 8009a9a:	46bd      	mov	sp, r7
 8009a9c:	b002      	add	sp, #8
 8009a9e:	bd80      	pop	{r7, pc}
 8009aa0:	20000094 	.word	0x20000094

08009aa4 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8009aa4:	b580      	push	{r7, lr}
 8009aa6:	b082      	sub	sp, #8
 8009aa8:	af00      	add	r7, sp, #0
 8009aaa:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	2243      	movs	r2, #67	; 0x43
 8009ab0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8009ab2:	4b02      	ldr	r3, [pc, #8]	; (8009abc <USBD_CDC_GetHSCfgDesc+0x18>)
}
 8009ab4:	0018      	movs	r0, r3
 8009ab6:	46bd      	mov	sp, r7
 8009ab8:	b002      	add	sp, #8
 8009aba:	bd80      	pop	{r7, pc}
 8009abc:	20000050 	.word	0x20000050

08009ac0 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8009ac0:	b580      	push	{r7, lr}
 8009ac2:	b082      	sub	sp, #8
 8009ac4:	af00      	add	r7, sp, #0
 8009ac6:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	2243      	movs	r2, #67	; 0x43
 8009acc:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8009ace:	4b02      	ldr	r3, [pc, #8]	; (8009ad8 <USBD_CDC_GetOtherSpeedCfgDesc+0x18>)
}
 8009ad0:	0018      	movs	r0, r3
 8009ad2:	46bd      	mov	sp, r7
 8009ad4:	b002      	add	sp, #8
 8009ad6:	bd80      	pop	{r7, pc}
 8009ad8:	200000d8 	.word	0x200000d8

08009adc <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8009adc:	b580      	push	{r7, lr}
 8009ade:	b082      	sub	sp, #8
 8009ae0:	af00      	add	r7, sp, #0
 8009ae2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	220a      	movs	r2, #10
 8009ae8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8009aea:	4b02      	ldr	r3, [pc, #8]	; (8009af4 <USBD_CDC_GetDeviceQualifierDescriptor+0x18>)
}
 8009aec:	0018      	movs	r0, r3
 8009aee:	46bd      	mov	sp, r7
 8009af0:	b002      	add	sp, #8
 8009af2:	bd80      	pop	{r7, pc}
 8009af4:	2000000c 	.word	0x2000000c

08009af8 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8009af8:	b580      	push	{r7, lr}
 8009afa:	b084      	sub	sp, #16
 8009afc:	af00      	add	r7, sp, #0
 8009afe:	6078      	str	r0, [r7, #4]
 8009b00:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8009b02:	200f      	movs	r0, #15
 8009b04:	183b      	adds	r3, r7, r0
 8009b06:	2202      	movs	r2, #2
 8009b08:	701a      	strb	r2, [r3, #0]

  if (fops != NULL)
 8009b0a:	683b      	ldr	r3, [r7, #0]
 8009b0c:	2b00      	cmp	r3, #0
 8009b0e:	d007      	beq.n	8009b20 <USBD_CDC_RegisterInterface+0x28>
  {
    pdev->pUserData = fops;
 8009b10:	687a      	ldr	r2, [r7, #4]
 8009b12:	23af      	movs	r3, #175	; 0xaf
 8009b14:	009b      	lsls	r3, r3, #2
 8009b16:	6839      	ldr	r1, [r7, #0]
 8009b18:	50d1      	str	r1, [r2, r3]
    ret = USBD_OK;
 8009b1a:	183b      	adds	r3, r7, r0
 8009b1c:	2200      	movs	r2, #0
 8009b1e:	701a      	strb	r2, [r3, #0]
  }

  return ret;
 8009b20:	230f      	movs	r3, #15
 8009b22:	18fb      	adds	r3, r7, r3
 8009b24:	781b      	ldrb	r3, [r3, #0]
}
 8009b26:	0018      	movs	r0, r3
 8009b28:	46bd      	mov	sp, r7
 8009b2a:	b004      	add	sp, #16
 8009b2c:	bd80      	pop	{r7, pc}

08009b2e <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8009b2e:	b580      	push	{r7, lr}
 8009b30:	b086      	sub	sp, #24
 8009b32:	af00      	add	r7, sp, #0
 8009b34:	60f8      	str	r0, [r7, #12]
 8009b36:	60b9      	str	r1, [r7, #8]
 8009b38:	1dbb      	adds	r3, r7, #6
 8009b3a:	801a      	strh	r2, [r3, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009b3c:	68fa      	ldr	r2, [r7, #12]
 8009b3e:	23ae      	movs	r3, #174	; 0xae
 8009b40:	009b      	lsls	r3, r3, #2
 8009b42:	58d3      	ldr	r3, [r2, r3]
 8009b44:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8009b46:	697a      	ldr	r2, [r7, #20]
 8009b48:	2382      	movs	r3, #130	; 0x82
 8009b4a:	009b      	lsls	r3, r3, #2
 8009b4c:	68b9      	ldr	r1, [r7, #8]
 8009b4e:	50d1      	str	r1, [r2, r3]
  hcdc->TxLength = length;
 8009b50:	1dbb      	adds	r3, r7, #6
 8009b52:	8819      	ldrh	r1, [r3, #0]
 8009b54:	697a      	ldr	r2, [r7, #20]
 8009b56:	2384      	movs	r3, #132	; 0x84
 8009b58:	009b      	lsls	r3, r3, #2
 8009b5a:	50d1      	str	r1, [r2, r3]

  return USBD_OK;
 8009b5c:	2300      	movs	r3, #0
}
 8009b5e:	0018      	movs	r0, r3
 8009b60:	46bd      	mov	sp, r7
 8009b62:	b006      	add	sp, #24
 8009b64:	bd80      	pop	{r7, pc}

08009b66 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 8009b66:	b580      	push	{r7, lr}
 8009b68:	b084      	sub	sp, #16
 8009b6a:	af00      	add	r7, sp, #0
 8009b6c:	6078      	str	r0, [r7, #4]
 8009b6e:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009b70:	687a      	ldr	r2, [r7, #4]
 8009b72:	23ae      	movs	r3, #174	; 0xae
 8009b74:	009b      	lsls	r3, r3, #2
 8009b76:	58d3      	ldr	r3, [r2, r3]
 8009b78:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8009b7a:	68fa      	ldr	r2, [r7, #12]
 8009b7c:	2381      	movs	r3, #129	; 0x81
 8009b7e:	009b      	lsls	r3, r3, #2
 8009b80:	6839      	ldr	r1, [r7, #0]
 8009b82:	50d1      	str	r1, [r2, r3]

  return USBD_OK;
 8009b84:	2300      	movs	r3, #0
}
 8009b86:	0018      	movs	r0, r3
 8009b88:	46bd      	mov	sp, r7
 8009b8a:	b004      	add	sp, #16
 8009b8c:	bd80      	pop	{r7, pc}

08009b8e <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8009b8e:	b580      	push	{r7, lr}
 8009b90:	b084      	sub	sp, #16
 8009b92:	af00      	add	r7, sp, #0
 8009b94:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009b96:	687a      	ldr	r2, [r7, #4]
 8009b98:	23ae      	movs	r3, #174	; 0xae
 8009b9a:	009b      	lsls	r3, r3, #2
 8009b9c:	58d3      	ldr	r3, [r2, r3]
 8009b9e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 8009ba0:	687a      	ldr	r2, [r7, #4]
 8009ba2:	23ae      	movs	r3, #174	; 0xae
 8009ba4:	009b      	lsls	r3, r3, #2
 8009ba6:	58d3      	ldr	r3, [r2, r3]
 8009ba8:	2b00      	cmp	r3, #0
 8009baa:	d022      	beq.n	8009bf2 <USBD_CDC_TransmitPacket+0x64>
  {
    if (hcdc->TxState == 0U)
 8009bac:	68fa      	ldr	r2, [r7, #12]
 8009bae:	2385      	movs	r3, #133	; 0x85
 8009bb0:	009b      	lsls	r3, r3, #2
 8009bb2:	58d3      	ldr	r3, [r2, r3]
 8009bb4:	2b00      	cmp	r3, #0
 8009bb6:	d11a      	bne.n	8009bee <USBD_CDC_TransmitPacket+0x60>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 8009bb8:	68fa      	ldr	r2, [r7, #12]
 8009bba:	2385      	movs	r3, #133	; 0x85
 8009bbc:	009b      	lsls	r3, r3, #2
 8009bbe:	2101      	movs	r1, #1
 8009bc0:	50d1      	str	r1, [r2, r3]

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8009bc2:	68fa      	ldr	r2, [r7, #12]
 8009bc4:	2384      	movs	r3, #132	; 0x84
 8009bc6:	009b      	lsls	r3, r3, #2
 8009bc8:	58d2      	ldr	r2, [r2, r3]
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8009bce:	68fa      	ldr	r2, [r7, #12]
 8009bd0:	2382      	movs	r3, #130	; 0x82
 8009bd2:	009b      	lsls	r3, r3, #2
 8009bd4:	58d1      	ldr	r1, [r2, r3]
                       (uint16_t)hcdc->TxLength);
 8009bd6:	68fa      	ldr	r2, [r7, #12]
 8009bd8:	2384      	movs	r3, #132	; 0x84
 8009bda:	009b      	lsls	r3, r3, #2
 8009bdc:	58d3      	ldr	r3, [r2, r3]
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8009bde:	b29b      	uxth	r3, r3
 8009be0:	6878      	ldr	r0, [r7, #4]
 8009be2:	000a      	movs	r2, r1
 8009be4:	2181      	movs	r1, #129	; 0x81
 8009be6:	f001 fed6 	bl	800b996 <USBD_LL_Transmit>

      return USBD_OK;
 8009bea:	2300      	movs	r3, #0
 8009bec:	e002      	b.n	8009bf4 <USBD_CDC_TransmitPacket+0x66>
    }
    else
    {
      return USBD_BUSY;
 8009bee:	2301      	movs	r3, #1
 8009bf0:	e000      	b.n	8009bf4 <USBD_CDC_TransmitPacket+0x66>
    }
  }
  else
  {
    return USBD_FAIL;
 8009bf2:	2302      	movs	r3, #2
  }
}
 8009bf4:	0018      	movs	r0, r3
 8009bf6:	46bd      	mov	sp, r7
 8009bf8:	b004      	add	sp, #16
 8009bfa:	bd80      	pop	{r7, pc}

08009bfc <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8009bfc:	b580      	push	{r7, lr}
 8009bfe:	b084      	sub	sp, #16
 8009c00:	af00      	add	r7, sp, #0
 8009c02:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009c04:	687a      	ldr	r2, [r7, #4]
 8009c06:	23ae      	movs	r3, #174	; 0xae
 8009c08:	009b      	lsls	r3, r3, #2
 8009c0a:	58d3      	ldr	r3, [r2, r3]
 8009c0c:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8009c0e:	687a      	ldr	r2, [r7, #4]
 8009c10:	23ae      	movs	r3, #174	; 0xae
 8009c12:	009b      	lsls	r3, r3, #2
 8009c14:	58d3      	ldr	r3, [r2, r3]
 8009c16:	2b00      	cmp	r3, #0
 8009c18:	d019      	beq.n	8009c4e <USBD_CDC_ReceivePacket+0x52>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	7c1b      	ldrb	r3, [r3, #16]
 8009c1e:	2b00      	cmp	r3, #0
 8009c20:	d10a      	bne.n	8009c38 <USBD_CDC_ReceivePacket+0x3c>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8009c22:	68fa      	ldr	r2, [r7, #12]
 8009c24:	2381      	movs	r3, #129	; 0x81
 8009c26:	009b      	lsls	r3, r3, #2
 8009c28:	58d2      	ldr	r2, [r2, r3]
 8009c2a:	2380      	movs	r3, #128	; 0x80
 8009c2c:	009b      	lsls	r3, r3, #2
 8009c2e:	6878      	ldr	r0, [r7, #4]
 8009c30:	2101      	movs	r1, #1
 8009c32:	f001 fee7 	bl	800ba04 <USBD_LL_PrepareReceive>
 8009c36:	e008      	b.n	8009c4a <USBD_CDC_ReceivePacket+0x4e>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8009c38:	68fa      	ldr	r2, [r7, #12]
 8009c3a:	2381      	movs	r3, #129	; 0x81
 8009c3c:	009b      	lsls	r3, r3, #2
 8009c3e:	58d2      	ldr	r2, [r2, r3]
 8009c40:	6878      	ldr	r0, [r7, #4]
 8009c42:	2340      	movs	r3, #64	; 0x40
 8009c44:	2101      	movs	r1, #1
 8009c46:	f001 fedd 	bl	800ba04 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8009c4a:	2300      	movs	r3, #0
 8009c4c:	e000      	b.n	8009c50 <USBD_CDC_ReceivePacket+0x54>
  }
  else
  {
    return USBD_FAIL;
 8009c4e:	2302      	movs	r3, #2
  }
}
 8009c50:	0018      	movs	r0, r3
 8009c52:	46bd      	mov	sp, r7
 8009c54:	b004      	add	sp, #16
 8009c56:	bd80      	pop	{r7, pc}

08009c58 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8009c58:	b580      	push	{r7, lr}
 8009c5a:	b084      	sub	sp, #16
 8009c5c:	af00      	add	r7, sp, #0
 8009c5e:	60f8      	str	r0, [r7, #12]
 8009c60:	60b9      	str	r1, [r7, #8]
 8009c62:	1dfb      	adds	r3, r7, #7
 8009c64:	701a      	strb	r2, [r3, #0]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8009c66:	68fb      	ldr	r3, [r7, #12]
 8009c68:	2b00      	cmp	r3, #0
 8009c6a:	d101      	bne.n	8009c70 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8009c6c:	2302      	movs	r3, #2
 8009c6e:	e020      	b.n	8009cb2 <USBD_Init+0x5a>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8009c70:	68fa      	ldr	r2, [r7, #12]
 8009c72:	23ad      	movs	r3, #173	; 0xad
 8009c74:	009b      	lsls	r3, r3, #2
 8009c76:	58d3      	ldr	r3, [r2, r3]
 8009c78:	2b00      	cmp	r3, #0
 8009c7a:	d004      	beq.n	8009c86 <USBD_Init+0x2e>
  {
    pdev->pClass = NULL;
 8009c7c:	68fa      	ldr	r2, [r7, #12]
 8009c7e:	23ad      	movs	r3, #173	; 0xad
 8009c80:	009b      	lsls	r3, r3, #2
 8009c82:	2100      	movs	r1, #0
 8009c84:	50d1      	str	r1, [r2, r3]
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8009c86:	68bb      	ldr	r3, [r7, #8]
 8009c88:	2b00      	cmp	r3, #0
 8009c8a:	d004      	beq.n	8009c96 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8009c8c:	68fa      	ldr	r2, [r7, #12]
 8009c8e:	23ac      	movs	r3, #172	; 0xac
 8009c90:	009b      	lsls	r3, r3, #2
 8009c92:	68b9      	ldr	r1, [r7, #8]
 8009c94:	50d1      	str	r1, [r2, r3]
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009c96:	68fa      	ldr	r2, [r7, #12]
 8009c98:	23a7      	movs	r3, #167	; 0xa7
 8009c9a:	009b      	lsls	r3, r3, #2
 8009c9c:	2101      	movs	r1, #1
 8009c9e:	54d1      	strb	r1, [r2, r3]
  pdev->id = id;
 8009ca0:	68fb      	ldr	r3, [r7, #12]
 8009ca2:	1dfa      	adds	r2, r7, #7
 8009ca4:	7812      	ldrb	r2, [r2, #0]
 8009ca6:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8009ca8:	68fb      	ldr	r3, [r7, #12]
 8009caa:	0018      	movs	r0, r3
 8009cac:	f001 fcd6 	bl	800b65c <USBD_LL_Init>

  return USBD_OK;
 8009cb0:	2300      	movs	r3, #0
}
 8009cb2:	0018      	movs	r0, r3
 8009cb4:	46bd      	mov	sp, r7
 8009cb6:	b004      	add	sp, #16
 8009cb8:	bd80      	pop	{r7, pc}

08009cba <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8009cba:	b580      	push	{r7, lr}
 8009cbc:	b084      	sub	sp, #16
 8009cbe:	af00      	add	r7, sp, #0
 8009cc0:	6078      	str	r0, [r7, #4]
 8009cc2:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8009cc4:	200f      	movs	r0, #15
 8009cc6:	183b      	adds	r3, r7, r0
 8009cc8:	2200      	movs	r2, #0
 8009cca:	701a      	strb	r2, [r3, #0]
  if (pclass != NULL)
 8009ccc:	683b      	ldr	r3, [r7, #0]
 8009cce:	2b00      	cmp	r3, #0
 8009cd0:	d008      	beq.n	8009ce4 <USBD_RegisterClass+0x2a>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8009cd2:	687a      	ldr	r2, [r7, #4]
 8009cd4:	23ad      	movs	r3, #173	; 0xad
 8009cd6:	009b      	lsls	r3, r3, #2
 8009cd8:	6839      	ldr	r1, [r7, #0]
 8009cda:	50d1      	str	r1, [r2, r3]
    status = USBD_OK;
 8009cdc:	183b      	adds	r3, r7, r0
 8009cde:	2200      	movs	r2, #0
 8009ce0:	701a      	strb	r2, [r3, #0]
 8009ce2:	e003      	b.n	8009cec <USBD_RegisterClass+0x32>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8009ce4:	230f      	movs	r3, #15
 8009ce6:	18fb      	adds	r3, r7, r3
 8009ce8:	2202      	movs	r2, #2
 8009cea:	701a      	strb	r2, [r3, #0]
  }

  return status;
 8009cec:	230f      	movs	r3, #15
 8009cee:	18fb      	adds	r3, r7, r3
 8009cf0:	781b      	ldrb	r3, [r3, #0]
}
 8009cf2:	0018      	movs	r0, r3
 8009cf4:	46bd      	mov	sp, r7
 8009cf6:	b004      	add	sp, #16
 8009cf8:	bd80      	pop	{r7, pc}

08009cfa <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8009cfa:	b580      	push	{r7, lr}
 8009cfc:	b082      	sub	sp, #8
 8009cfe:	af00      	add	r7, sp, #0
 8009d00:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	0018      	movs	r0, r3
 8009d06:	f001 fd0d 	bl	800b724 <USBD_LL_Start>

  return USBD_OK;
 8009d0a:	2300      	movs	r3, #0
}
 8009d0c:	0018      	movs	r0, r3
 8009d0e:	46bd      	mov	sp, r7
 8009d10:	b002      	add	sp, #8
 8009d12:	bd80      	pop	{r7, pc}

08009d14 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8009d14:	b580      	push	{r7, lr}
 8009d16:	b082      	sub	sp, #8
 8009d18:	af00      	add	r7, sp, #0
 8009d1a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8009d1c:	2300      	movs	r3, #0
}
 8009d1e:	0018      	movs	r0, r3
 8009d20:	46bd      	mov	sp, r7
 8009d22:	b002      	add	sp, #8
 8009d24:	bd80      	pop	{r7, pc}

08009d26 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8009d26:	b590      	push	{r4, r7, lr}
 8009d28:	b085      	sub	sp, #20
 8009d2a:	af00      	add	r7, sp, #0
 8009d2c:	6078      	str	r0, [r7, #4]
 8009d2e:	000a      	movs	r2, r1
 8009d30:	1cfb      	adds	r3, r7, #3
 8009d32:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8009d34:	240f      	movs	r4, #15
 8009d36:	193b      	adds	r3, r7, r4
 8009d38:	2202      	movs	r2, #2
 8009d3a:	701a      	strb	r2, [r3, #0]

  if (pdev->pClass != NULL)
 8009d3c:	687a      	ldr	r2, [r7, #4]
 8009d3e:	23ad      	movs	r3, #173	; 0xad
 8009d40:	009b      	lsls	r3, r3, #2
 8009d42:	58d3      	ldr	r3, [r2, r3]
 8009d44:	2b00      	cmp	r3, #0
 8009d46:	d00e      	beq.n	8009d66 <USBD_SetClassConfig+0x40>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8009d48:	687a      	ldr	r2, [r7, #4]
 8009d4a:	23ad      	movs	r3, #173	; 0xad
 8009d4c:	009b      	lsls	r3, r3, #2
 8009d4e:	58d3      	ldr	r3, [r2, r3]
 8009d50:	681b      	ldr	r3, [r3, #0]
 8009d52:	1cfa      	adds	r2, r7, #3
 8009d54:	7811      	ldrb	r1, [r2, #0]
 8009d56:	687a      	ldr	r2, [r7, #4]
 8009d58:	0010      	movs	r0, r2
 8009d5a:	4798      	blx	r3
 8009d5c:	1e03      	subs	r3, r0, #0
 8009d5e:	d102      	bne.n	8009d66 <USBD_SetClassConfig+0x40>
    {
      ret = USBD_OK;
 8009d60:	193b      	adds	r3, r7, r4
 8009d62:	2200      	movs	r2, #0
 8009d64:	701a      	strb	r2, [r3, #0]
    }
  }

  return ret;
 8009d66:	230f      	movs	r3, #15
 8009d68:	18fb      	adds	r3, r7, r3
 8009d6a:	781b      	ldrb	r3, [r3, #0]
}
 8009d6c:	0018      	movs	r0, r3
 8009d6e:	46bd      	mov	sp, r7
 8009d70:	b005      	add	sp, #20
 8009d72:	bd90      	pop	{r4, r7, pc}

08009d74 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8009d74:	b580      	push	{r7, lr}
 8009d76:	b082      	sub	sp, #8
 8009d78:	af00      	add	r7, sp, #0
 8009d7a:	6078      	str	r0, [r7, #4]
 8009d7c:	000a      	movs	r2, r1
 8009d7e:	1cfb      	adds	r3, r7, #3
 8009d80:	701a      	strb	r2, [r3, #0]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8009d82:	687a      	ldr	r2, [r7, #4]
 8009d84:	23ad      	movs	r3, #173	; 0xad
 8009d86:	009b      	lsls	r3, r3, #2
 8009d88:	58d3      	ldr	r3, [r2, r3]
 8009d8a:	685b      	ldr	r3, [r3, #4]
 8009d8c:	1cfa      	adds	r2, r7, #3
 8009d8e:	7811      	ldrb	r1, [r2, #0]
 8009d90:	687a      	ldr	r2, [r7, #4]
 8009d92:	0010      	movs	r0, r2
 8009d94:	4798      	blx	r3

  return USBD_OK;
 8009d96:	2300      	movs	r3, #0
}
 8009d98:	0018      	movs	r0, r3
 8009d9a:	46bd      	mov	sp, r7
 8009d9c:	b002      	add	sp, #8
 8009d9e:	bd80      	pop	{r7, pc}

08009da0 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8009da0:	b580      	push	{r7, lr}
 8009da2:	b082      	sub	sp, #8
 8009da4:	af00      	add	r7, sp, #0
 8009da6:	6078      	str	r0, [r7, #4]
 8009da8:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	22aa      	movs	r2, #170	; 0xaa
 8009dae:	0092      	lsls	r2, r2, #2
 8009db0:	4694      	mov	ip, r2
 8009db2:	4463      	add	r3, ip
 8009db4:	683a      	ldr	r2, [r7, #0]
 8009db6:	0011      	movs	r1, r2
 8009db8:	0018      	movs	r0, r3
 8009dba:	f001 f810 	bl	800adde <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8009dbe:	687a      	ldr	r2, [r7, #4]
 8009dc0:	23a5      	movs	r3, #165	; 0xa5
 8009dc2:	009b      	lsls	r3, r3, #2
 8009dc4:	2101      	movs	r1, #1
 8009dc6:	50d1      	str	r1, [r2, r3]

  pdev->ep0_data_len = pdev->request.wLength;
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	4a23      	ldr	r2, [pc, #140]	; (8009e58 <USBD_LL_SetupStage+0xb8>)
 8009dcc:	5a9b      	ldrh	r3, [r3, r2]
 8009dce:	0019      	movs	r1, r3
 8009dd0:	687a      	ldr	r2, [r7, #4]
 8009dd2:	23a6      	movs	r3, #166	; 0xa6
 8009dd4:	009b      	lsls	r3, r3, #2
 8009dd6:	50d1      	str	r1, [r2, r3]

  switch (pdev->request.bmRequest & 0x1FU)
 8009dd8:	687a      	ldr	r2, [r7, #4]
 8009dda:	23aa      	movs	r3, #170	; 0xaa
 8009ddc:	009b      	lsls	r3, r3, #2
 8009dde:	5cd3      	ldrb	r3, [r2, r3]
 8009de0:	001a      	movs	r2, r3
 8009de2:	231f      	movs	r3, #31
 8009de4:	4013      	ands	r3, r2
 8009de6:	2b02      	cmp	r3, #2
 8009de8:	d019      	beq.n	8009e1e <USBD_LL_SetupStage+0x7e>
 8009dea:	d822      	bhi.n	8009e32 <USBD_LL_SetupStage+0x92>
 8009dec:	2b00      	cmp	r3, #0
 8009dee:	d002      	beq.n	8009df6 <USBD_LL_SetupStage+0x56>
 8009df0:	2b01      	cmp	r3, #1
 8009df2:	d00a      	beq.n	8009e0a <USBD_LL_SetupStage+0x6a>
 8009df4:	e01d      	b.n	8009e32 <USBD_LL_SetupStage+0x92>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	22aa      	movs	r2, #170	; 0xaa
 8009dfa:	0092      	lsls	r2, r2, #2
 8009dfc:	189a      	adds	r2, r3, r2
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	0011      	movs	r1, r2
 8009e02:	0018      	movs	r0, r3
 8009e04:	f000 fa10 	bl	800a228 <USBD_StdDevReq>
      break;
 8009e08:	e020      	b.n	8009e4c <USBD_LL_SetupStage+0xac>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	22aa      	movs	r2, #170	; 0xaa
 8009e0e:	0092      	lsls	r2, r2, #2
 8009e10:	189a      	adds	r2, r3, r2
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	0011      	movs	r1, r2
 8009e16:	0018      	movs	r0, r3
 8009e18:	f000 fa78 	bl	800a30c <USBD_StdItfReq>
      break;
 8009e1c:	e016      	b.n	8009e4c <USBD_LL_SetupStage+0xac>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	22aa      	movs	r2, #170	; 0xaa
 8009e22:	0092      	lsls	r2, r2, #2
 8009e24:	189a      	adds	r2, r3, r2
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	0011      	movs	r1, r2
 8009e2a:	0018      	movs	r0, r3
 8009e2c:	f000 fac5 	bl	800a3ba <USBD_StdEPReq>
      break;
 8009e30:	e00c      	b.n	8009e4c <USBD_LL_SetupStage+0xac>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8009e32:	687a      	ldr	r2, [r7, #4]
 8009e34:	23aa      	movs	r3, #170	; 0xaa
 8009e36:	009b      	lsls	r3, r3, #2
 8009e38:	5cd3      	ldrb	r3, [r2, r3]
 8009e3a:	227f      	movs	r2, #127	; 0x7f
 8009e3c:	4393      	bics	r3, r2
 8009e3e:	b2da      	uxtb	r2, r3
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	0011      	movs	r1, r2
 8009e44:	0018      	movs	r0, r3
 8009e46:	f001 fcf4 	bl	800b832 <USBD_LL_StallEP>
      break;
 8009e4a:	46c0      	nop			; (mov r8, r8)
  }

  return USBD_OK;
 8009e4c:	2300      	movs	r3, #0
}
 8009e4e:	0018      	movs	r0, r3
 8009e50:	46bd      	mov	sp, r7
 8009e52:	b002      	add	sp, #8
 8009e54:	bd80      	pop	{r7, pc}
 8009e56:	46c0      	nop			; (mov r8, r8)
 8009e58:	000002ae 	.word	0x000002ae

08009e5c <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8009e5c:	b580      	push	{r7, lr}
 8009e5e:	b086      	sub	sp, #24
 8009e60:	af00      	add	r7, sp, #0
 8009e62:	60f8      	str	r0, [r7, #12]
 8009e64:	607a      	str	r2, [r7, #4]
 8009e66:	200b      	movs	r0, #11
 8009e68:	183b      	adds	r3, r7, r0
 8009e6a:	1c0a      	adds	r2, r1, #0
 8009e6c:	701a      	strb	r2, [r3, #0]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8009e6e:	183b      	adds	r3, r7, r0
 8009e70:	781b      	ldrb	r3, [r3, #0]
 8009e72:	2b00      	cmp	r3, #0
 8009e74:	d154      	bne.n	8009f20 <USBD_LL_DataOutStage+0xc4>
  {
    pep = &pdev->ep_out[0];
 8009e76:	68fb      	ldr	r3, [r7, #12]
 8009e78:	3355      	adds	r3, #85	; 0x55
 8009e7a:	33ff      	adds	r3, #255	; 0xff
 8009e7c:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8009e7e:	68fa      	ldr	r2, [r7, #12]
 8009e80:	23a5      	movs	r3, #165	; 0xa5
 8009e82:	009b      	lsls	r3, r3, #2
 8009e84:	58d3      	ldr	r3, [r2, r3]
 8009e86:	2b03      	cmp	r3, #3
 8009e88:	d139      	bne.n	8009efe <USBD_LL_DataOutStage+0xa2>
    {
      if (pep->rem_length > pep->maxpacket)
 8009e8a:	697b      	ldr	r3, [r7, #20]
 8009e8c:	68da      	ldr	r2, [r3, #12]
 8009e8e:	697b      	ldr	r3, [r7, #20]
 8009e90:	691b      	ldr	r3, [r3, #16]
 8009e92:	429a      	cmp	r2, r3
 8009e94:	d919      	bls.n	8009eca <USBD_LL_DataOutStage+0x6e>
      {
        pep->rem_length -= pep->maxpacket;
 8009e96:	697b      	ldr	r3, [r7, #20]
 8009e98:	68da      	ldr	r2, [r3, #12]
 8009e9a:	697b      	ldr	r3, [r7, #20]
 8009e9c:	691b      	ldr	r3, [r3, #16]
 8009e9e:	1ad2      	subs	r2, r2, r3
 8009ea0:	697b      	ldr	r3, [r7, #20]
 8009ea2:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8009ea4:	697b      	ldr	r3, [r7, #20]
 8009ea6:	68da      	ldr	r2, [r3, #12]
 8009ea8:	697b      	ldr	r3, [r7, #20]
 8009eaa:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8009eac:	429a      	cmp	r2, r3
 8009eae:	d203      	bcs.n	8009eb8 <USBD_LL_DataOutStage+0x5c>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8009eb0:	697b      	ldr	r3, [r7, #20]
 8009eb2:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8009eb4:	b29b      	uxth	r3, r3
 8009eb6:	e002      	b.n	8009ebe <USBD_LL_DataOutStage+0x62>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8009eb8:	697b      	ldr	r3, [r7, #20]
 8009eba:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8009ebc:	b29b      	uxth	r3, r3
 8009ebe:	6879      	ldr	r1, [r7, #4]
 8009ec0:	68f8      	ldr	r0, [r7, #12]
 8009ec2:	001a      	movs	r2, r3
 8009ec4:	f001 f89b 	bl	800affe <USBD_CtlContinueRx>
 8009ec8:	e045      	b.n	8009f56 <USBD_LL_DataOutStage+0xfa>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8009eca:	68fa      	ldr	r2, [r7, #12]
 8009ecc:	23ad      	movs	r3, #173	; 0xad
 8009ece:	009b      	lsls	r3, r3, #2
 8009ed0:	58d3      	ldr	r3, [r2, r3]
 8009ed2:	691b      	ldr	r3, [r3, #16]
 8009ed4:	2b00      	cmp	r3, #0
 8009ed6:	d00d      	beq.n	8009ef4 <USBD_LL_DataOutStage+0x98>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8009ed8:	68fa      	ldr	r2, [r7, #12]
 8009eda:	23a7      	movs	r3, #167	; 0xa7
 8009edc:	009b      	lsls	r3, r3, #2
 8009ede:	5cd3      	ldrb	r3, [r2, r3]
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8009ee0:	2b03      	cmp	r3, #3
 8009ee2:	d107      	bne.n	8009ef4 <USBD_LL_DataOutStage+0x98>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8009ee4:	68fa      	ldr	r2, [r7, #12]
 8009ee6:	23ad      	movs	r3, #173	; 0xad
 8009ee8:	009b      	lsls	r3, r3, #2
 8009eea:	58d3      	ldr	r3, [r2, r3]
 8009eec:	691b      	ldr	r3, [r3, #16]
 8009eee:	68fa      	ldr	r2, [r7, #12]
 8009ef0:	0010      	movs	r0, r2
 8009ef2:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8009ef4:	68fb      	ldr	r3, [r7, #12]
 8009ef6:	0018      	movs	r0, r3
 8009ef8:	f001 f894 	bl	800b024 <USBD_CtlSendStatus>
 8009efc:	e02b      	b.n	8009f56 <USBD_LL_DataOutStage+0xfa>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8009efe:	68fa      	ldr	r2, [r7, #12]
 8009f00:	23a5      	movs	r3, #165	; 0xa5
 8009f02:	009b      	lsls	r3, r3, #2
 8009f04:	58d3      	ldr	r3, [r2, r3]
 8009f06:	2b05      	cmp	r3, #5
 8009f08:	d125      	bne.n	8009f56 <USBD_LL_DataOutStage+0xfa>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8009f0a:	68fa      	ldr	r2, [r7, #12]
 8009f0c:	23a5      	movs	r3, #165	; 0xa5
 8009f0e:	009b      	lsls	r3, r3, #2
 8009f10:	2100      	movs	r1, #0
 8009f12:	50d1      	str	r1, [r2, r3]
        USBD_LL_StallEP(pdev, 0U);
 8009f14:	68fb      	ldr	r3, [r7, #12]
 8009f16:	2100      	movs	r1, #0
 8009f18:	0018      	movs	r0, r3
 8009f1a:	f001 fc8a 	bl	800b832 <USBD_LL_StallEP>
 8009f1e:	e01a      	b.n	8009f56 <USBD_LL_DataOutStage+0xfa>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8009f20:	68fa      	ldr	r2, [r7, #12]
 8009f22:	23ad      	movs	r3, #173	; 0xad
 8009f24:	009b      	lsls	r3, r3, #2
 8009f26:	58d3      	ldr	r3, [r2, r3]
 8009f28:	699b      	ldr	r3, [r3, #24]
 8009f2a:	2b00      	cmp	r3, #0
 8009f2c:	d011      	beq.n	8009f52 <USBD_LL_DataOutStage+0xf6>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8009f2e:	68fa      	ldr	r2, [r7, #12]
 8009f30:	23a7      	movs	r3, #167	; 0xa7
 8009f32:	009b      	lsls	r3, r3, #2
 8009f34:	5cd3      	ldrb	r3, [r2, r3]
  else if ((pdev->pClass->DataOut != NULL) &&
 8009f36:	2b03      	cmp	r3, #3
 8009f38:	d10b      	bne.n	8009f52 <USBD_LL_DataOutStage+0xf6>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8009f3a:	68fa      	ldr	r2, [r7, #12]
 8009f3c:	23ad      	movs	r3, #173	; 0xad
 8009f3e:	009b      	lsls	r3, r3, #2
 8009f40:	58d3      	ldr	r3, [r2, r3]
 8009f42:	699b      	ldr	r3, [r3, #24]
 8009f44:	220b      	movs	r2, #11
 8009f46:	18ba      	adds	r2, r7, r2
 8009f48:	7811      	ldrb	r1, [r2, #0]
 8009f4a:	68fa      	ldr	r2, [r7, #12]
 8009f4c:	0010      	movs	r0, r2
 8009f4e:	4798      	blx	r3
 8009f50:	e001      	b.n	8009f56 <USBD_LL_DataOutStage+0xfa>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8009f52:	2302      	movs	r3, #2
 8009f54:	e000      	b.n	8009f58 <USBD_LL_DataOutStage+0xfc>
  }

  return USBD_OK;
 8009f56:	2300      	movs	r3, #0
}
 8009f58:	0018      	movs	r0, r3
 8009f5a:	46bd      	mov	sp, r7
 8009f5c:	b006      	add	sp, #24
 8009f5e:	bd80      	pop	{r7, pc}

08009f60 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8009f60:	b580      	push	{r7, lr}
 8009f62:	b086      	sub	sp, #24
 8009f64:	af00      	add	r7, sp, #0
 8009f66:	60f8      	str	r0, [r7, #12]
 8009f68:	607a      	str	r2, [r7, #4]
 8009f6a:	200b      	movs	r0, #11
 8009f6c:	183b      	adds	r3, r7, r0
 8009f6e:	1c0a      	adds	r2, r1, #0
 8009f70:	701a      	strb	r2, [r3, #0]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8009f72:	183b      	adds	r3, r7, r0
 8009f74:	781b      	ldrb	r3, [r3, #0]
 8009f76:	2b00      	cmp	r3, #0
 8009f78:	d000      	beq.n	8009f7c <USBD_LL_DataInStage+0x1c>
 8009f7a:	e08e      	b.n	800a09a <USBD_LL_DataInStage+0x13a>
  {
    pep = &pdev->ep_in[0];
 8009f7c:	68fb      	ldr	r3, [r7, #12]
 8009f7e:	3314      	adds	r3, #20
 8009f80:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8009f82:	68fa      	ldr	r2, [r7, #12]
 8009f84:	23a5      	movs	r3, #165	; 0xa5
 8009f86:	009b      	lsls	r3, r3, #2
 8009f88:	58d3      	ldr	r3, [r2, r3]
 8009f8a:	2b02      	cmp	r3, #2
 8009f8c:	d164      	bne.n	800a058 <USBD_LL_DataInStage+0xf8>
    {
      if (pep->rem_length > pep->maxpacket)
 8009f8e:	697b      	ldr	r3, [r7, #20]
 8009f90:	68da      	ldr	r2, [r3, #12]
 8009f92:	697b      	ldr	r3, [r7, #20]
 8009f94:	691b      	ldr	r3, [r3, #16]
 8009f96:	429a      	cmp	r2, r3
 8009f98:	d915      	bls.n	8009fc6 <USBD_LL_DataInStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8009f9a:	697b      	ldr	r3, [r7, #20]
 8009f9c:	68da      	ldr	r2, [r3, #12]
 8009f9e:	697b      	ldr	r3, [r7, #20]
 8009fa0:	691b      	ldr	r3, [r3, #16]
 8009fa2:	1ad2      	subs	r2, r2, r3
 8009fa4:	697b      	ldr	r3, [r7, #20]
 8009fa6:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8009fa8:	697b      	ldr	r3, [r7, #20]
 8009faa:	68db      	ldr	r3, [r3, #12]
 8009fac:	b29a      	uxth	r2, r3
 8009fae:	6879      	ldr	r1, [r7, #4]
 8009fb0:	68fb      	ldr	r3, [r7, #12]
 8009fb2:	0018      	movs	r0, r3
 8009fb4:	f000 ffec 	bl	800af90 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009fb8:	68f8      	ldr	r0, [r7, #12]
 8009fba:	2300      	movs	r3, #0
 8009fbc:	2200      	movs	r2, #0
 8009fbe:	2100      	movs	r1, #0
 8009fc0:	f001 fd20 	bl	800ba04 <USBD_LL_PrepareReceive>
 8009fc4:	e059      	b.n	800a07a <USBD_LL_DataInStage+0x11a>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8009fc6:	697b      	ldr	r3, [r7, #20]
 8009fc8:	689a      	ldr	r2, [r3, #8]
 8009fca:	697b      	ldr	r3, [r7, #20]
 8009fcc:	691b      	ldr	r3, [r3, #16]
 8009fce:	0019      	movs	r1, r3
 8009fd0:	0010      	movs	r0, r2
 8009fd2:	f7f6 f931 	bl	8000238 <__aeabi_uidivmod>
 8009fd6:	1e0b      	subs	r3, r1, #0
 8009fd8:	d11f      	bne.n	800a01a <USBD_LL_DataInStage+0xba>
            (pep->total_length >= pep->maxpacket) &&
 8009fda:	697b      	ldr	r3, [r7, #20]
 8009fdc:	689a      	ldr	r2, [r3, #8]
 8009fde:	697b      	ldr	r3, [r7, #20]
 8009fe0:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8009fe2:	429a      	cmp	r2, r3
 8009fe4:	d319      	bcc.n	800a01a <USBD_LL_DataInStage+0xba>
            (pep->total_length < pdev->ep0_data_len))
 8009fe6:	697b      	ldr	r3, [r7, #20]
 8009fe8:	689a      	ldr	r2, [r3, #8]
 8009fea:	68f9      	ldr	r1, [r7, #12]
 8009fec:	23a6      	movs	r3, #166	; 0xa6
 8009fee:	009b      	lsls	r3, r3, #2
 8009ff0:	58cb      	ldr	r3, [r1, r3]
            (pep->total_length >= pep->maxpacket) &&
 8009ff2:	429a      	cmp	r2, r3
 8009ff4:	d211      	bcs.n	800a01a <USBD_LL_DataInStage+0xba>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8009ff6:	68fb      	ldr	r3, [r7, #12]
 8009ff8:	2200      	movs	r2, #0
 8009ffa:	2100      	movs	r1, #0
 8009ffc:	0018      	movs	r0, r3
 8009ffe:	f000 ffc7 	bl	800af90 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800a002:	68fa      	ldr	r2, [r7, #12]
 800a004:	23a6      	movs	r3, #166	; 0xa6
 800a006:	009b      	lsls	r3, r3, #2
 800a008:	2100      	movs	r1, #0
 800a00a:	50d1      	str	r1, [r2, r3]

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a00c:	68f8      	ldr	r0, [r7, #12]
 800a00e:	2300      	movs	r3, #0
 800a010:	2200      	movs	r2, #0
 800a012:	2100      	movs	r1, #0
 800a014:	f001 fcf6 	bl	800ba04 <USBD_LL_PrepareReceive>
 800a018:	e02f      	b.n	800a07a <USBD_LL_DataInStage+0x11a>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800a01a:	68fa      	ldr	r2, [r7, #12]
 800a01c:	23ad      	movs	r3, #173	; 0xad
 800a01e:	009b      	lsls	r3, r3, #2
 800a020:	58d3      	ldr	r3, [r2, r3]
 800a022:	68db      	ldr	r3, [r3, #12]
 800a024:	2b00      	cmp	r3, #0
 800a026:	d00d      	beq.n	800a044 <USBD_LL_DataInStage+0xe4>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800a028:	68fa      	ldr	r2, [r7, #12]
 800a02a:	23a7      	movs	r3, #167	; 0xa7
 800a02c:	009b      	lsls	r3, r3, #2
 800a02e:	5cd3      	ldrb	r3, [r2, r3]
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800a030:	2b03      	cmp	r3, #3
 800a032:	d107      	bne.n	800a044 <USBD_LL_DataInStage+0xe4>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800a034:	68fa      	ldr	r2, [r7, #12]
 800a036:	23ad      	movs	r3, #173	; 0xad
 800a038:	009b      	lsls	r3, r3, #2
 800a03a:	58d3      	ldr	r3, [r2, r3]
 800a03c:	68db      	ldr	r3, [r3, #12]
 800a03e:	68fa      	ldr	r2, [r7, #12]
 800a040:	0010      	movs	r0, r2
 800a042:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 800a044:	68fb      	ldr	r3, [r7, #12]
 800a046:	2180      	movs	r1, #128	; 0x80
 800a048:	0018      	movs	r0, r3
 800a04a:	f001 fbf2 	bl	800b832 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800a04e:	68fb      	ldr	r3, [r7, #12]
 800a050:	0018      	movs	r0, r3
 800a052:	f000 fffb 	bl	800b04c <USBD_CtlReceiveStatus>
 800a056:	e010      	b.n	800a07a <USBD_LL_DataInStage+0x11a>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800a058:	68fa      	ldr	r2, [r7, #12]
 800a05a:	23a5      	movs	r3, #165	; 0xa5
 800a05c:	009b      	lsls	r3, r3, #2
 800a05e:	58d3      	ldr	r3, [r2, r3]
 800a060:	2b04      	cmp	r3, #4
 800a062:	d005      	beq.n	800a070 <USBD_LL_DataInStage+0x110>
          (pdev->ep0_state == USBD_EP0_IDLE))
 800a064:	68fa      	ldr	r2, [r7, #12]
 800a066:	23a5      	movs	r3, #165	; 0xa5
 800a068:	009b      	lsls	r3, r3, #2
 800a06a:	58d3      	ldr	r3, [r2, r3]
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800a06c:	2b00      	cmp	r3, #0
 800a06e:	d104      	bne.n	800a07a <USBD_LL_DataInStage+0x11a>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 800a070:	68fb      	ldr	r3, [r7, #12]
 800a072:	2180      	movs	r1, #128	; 0x80
 800a074:	0018      	movs	r0, r3
 800a076:	f001 fbdc 	bl	800b832 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 800a07a:	68fa      	ldr	r2, [r7, #12]
 800a07c:	23a8      	movs	r3, #168	; 0xa8
 800a07e:	009b      	lsls	r3, r3, #2
 800a080:	5cd3      	ldrb	r3, [r2, r3]
 800a082:	2b01      	cmp	r3, #1
 800a084:	d124      	bne.n	800a0d0 <USBD_LL_DataInStage+0x170>
    {
      USBD_RunTestMode(pdev);
 800a086:	68fb      	ldr	r3, [r7, #12]
 800a088:	0018      	movs	r0, r3
 800a08a:	f7ff fe43 	bl	8009d14 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800a08e:	68fa      	ldr	r2, [r7, #12]
 800a090:	23a8      	movs	r3, #168	; 0xa8
 800a092:	009b      	lsls	r3, r3, #2
 800a094:	2100      	movs	r1, #0
 800a096:	54d1      	strb	r1, [r2, r3]
 800a098:	e01a      	b.n	800a0d0 <USBD_LL_DataInStage+0x170>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800a09a:	68fa      	ldr	r2, [r7, #12]
 800a09c:	23ad      	movs	r3, #173	; 0xad
 800a09e:	009b      	lsls	r3, r3, #2
 800a0a0:	58d3      	ldr	r3, [r2, r3]
 800a0a2:	695b      	ldr	r3, [r3, #20]
 800a0a4:	2b00      	cmp	r3, #0
 800a0a6:	d011      	beq.n	800a0cc <USBD_LL_DataInStage+0x16c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800a0a8:	68fa      	ldr	r2, [r7, #12]
 800a0aa:	23a7      	movs	r3, #167	; 0xa7
 800a0ac:	009b      	lsls	r3, r3, #2
 800a0ae:	5cd3      	ldrb	r3, [r2, r3]
  else if ((pdev->pClass->DataIn != NULL) &&
 800a0b0:	2b03      	cmp	r3, #3
 800a0b2:	d10b      	bne.n	800a0cc <USBD_LL_DataInStage+0x16c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 800a0b4:	68fa      	ldr	r2, [r7, #12]
 800a0b6:	23ad      	movs	r3, #173	; 0xad
 800a0b8:	009b      	lsls	r3, r3, #2
 800a0ba:	58d3      	ldr	r3, [r2, r3]
 800a0bc:	695b      	ldr	r3, [r3, #20]
 800a0be:	220b      	movs	r2, #11
 800a0c0:	18ba      	adds	r2, r7, r2
 800a0c2:	7811      	ldrb	r1, [r2, #0]
 800a0c4:	68fa      	ldr	r2, [r7, #12]
 800a0c6:	0010      	movs	r0, r2
 800a0c8:	4798      	blx	r3
 800a0ca:	e001      	b.n	800a0d0 <USBD_LL_DataInStage+0x170>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800a0cc:	2302      	movs	r3, #2
 800a0ce:	e000      	b.n	800a0d2 <USBD_LL_DataInStage+0x172>
  }

  return USBD_OK;
 800a0d0:	2300      	movs	r3, #0
}
 800a0d2:	0018      	movs	r0, r3
 800a0d4:	46bd      	mov	sp, r7
 800a0d6:	b006      	add	sp, #24
 800a0d8:	bd80      	pop	{r7, pc}

0800a0da <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800a0da:	b580      	push	{r7, lr}
 800a0dc:	b082      	sub	sp, #8
 800a0de:	af00      	add	r7, sp, #0
 800a0e0:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a0e2:	6878      	ldr	r0, [r7, #4]
 800a0e4:	2340      	movs	r3, #64	; 0x40
 800a0e6:	2200      	movs	r2, #0
 800a0e8:	2100      	movs	r1, #0
 800a0ea:	f001 fb40 	bl	800b76e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800a0ee:	687a      	ldr	r2, [r7, #4]
 800a0f0:	23ac      	movs	r3, #172	; 0xac
 800a0f2:	005b      	lsls	r3, r3, #1
 800a0f4:	2101      	movs	r1, #1
 800a0f6:	50d1      	str	r1, [r2, r3]

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800a0f8:	687a      	ldr	r2, [r7, #4]
 800a0fa:	23b2      	movs	r3, #178	; 0xb2
 800a0fc:	005b      	lsls	r3, r3, #1
 800a0fe:	2140      	movs	r1, #64	; 0x40
 800a100:	50d1      	str	r1, [r2, r3]

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a102:	6878      	ldr	r0, [r7, #4]
 800a104:	2340      	movs	r3, #64	; 0x40
 800a106:	2200      	movs	r2, #0
 800a108:	2180      	movs	r1, #128	; 0x80
 800a10a:	f001 fb30 	bl	800b76e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	2201      	movs	r2, #1
 800a112:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	2240      	movs	r2, #64	; 0x40
 800a118:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a11a:	687a      	ldr	r2, [r7, #4]
 800a11c:	23a7      	movs	r3, #167	; 0xa7
 800a11e:	009b      	lsls	r3, r3, #2
 800a120:	2101      	movs	r1, #1
 800a122:	54d1      	strb	r1, [r2, r3]
  pdev->ep0_state = USBD_EP0_IDLE;
 800a124:	687a      	ldr	r2, [r7, #4]
 800a126:	23a5      	movs	r3, #165	; 0xa5
 800a128:	009b      	lsls	r3, r3, #2
 800a12a:	2100      	movs	r1, #0
 800a12c:	50d1      	str	r1, [r2, r3]
  pdev->dev_config = 0U;
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	2200      	movs	r2, #0
 800a132:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800a134:	687a      	ldr	r2, [r7, #4]
 800a136:	23a9      	movs	r3, #169	; 0xa9
 800a138:	009b      	lsls	r3, r3, #2
 800a13a:	2100      	movs	r1, #0
 800a13c:	50d1      	str	r1, [r2, r3]

  if (pdev->pClassData)
 800a13e:	687a      	ldr	r2, [r7, #4]
 800a140:	23ae      	movs	r3, #174	; 0xae
 800a142:	009b      	lsls	r3, r3, #2
 800a144:	58d3      	ldr	r3, [r2, r3]
 800a146:	2b00      	cmp	r3, #0
 800a148:	d00a      	beq.n	800a160 <USBD_LL_Reset+0x86>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800a14a:	687a      	ldr	r2, [r7, #4]
 800a14c:	23ad      	movs	r3, #173	; 0xad
 800a14e:	009b      	lsls	r3, r3, #2
 800a150:	58d3      	ldr	r3, [r2, r3]
 800a152:	685a      	ldr	r2, [r3, #4]
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	685b      	ldr	r3, [r3, #4]
 800a158:	b2d9      	uxtb	r1, r3
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	0018      	movs	r0, r3
 800a15e:	4790      	blx	r2
  }

  return USBD_OK;
 800a160:	2300      	movs	r3, #0
}
 800a162:	0018      	movs	r0, r3
 800a164:	46bd      	mov	sp, r7
 800a166:	b002      	add	sp, #8
 800a168:	bd80      	pop	{r7, pc}

0800a16a <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800a16a:	b580      	push	{r7, lr}
 800a16c:	b082      	sub	sp, #8
 800a16e:	af00      	add	r7, sp, #0
 800a170:	6078      	str	r0, [r7, #4]
 800a172:	000a      	movs	r2, r1
 800a174:	1cfb      	adds	r3, r7, #3
 800a176:	701a      	strb	r2, [r3, #0]
  pdev->dev_speed = speed;
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	1cfa      	adds	r2, r7, #3
 800a17c:	7812      	ldrb	r2, [r2, #0]
 800a17e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800a180:	2300      	movs	r3, #0
}
 800a182:	0018      	movs	r0, r3
 800a184:	46bd      	mov	sp, r7
 800a186:	b002      	add	sp, #8
 800a188:	bd80      	pop	{r7, pc}
	...

0800a18c <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800a18c:	b580      	push	{r7, lr}
 800a18e:	b082      	sub	sp, #8
 800a190:	af00      	add	r7, sp, #0
 800a192:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 800a194:	687a      	ldr	r2, [r7, #4]
 800a196:	23a7      	movs	r3, #167	; 0xa7
 800a198:	009b      	lsls	r3, r3, #2
 800a19a:	5cd1      	ldrb	r1, [r2, r3]
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	4a06      	ldr	r2, [pc, #24]	; (800a1b8 <USBD_LL_Suspend+0x2c>)
 800a1a0:	5499      	strb	r1, [r3, r2]
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800a1a2:	687a      	ldr	r2, [r7, #4]
 800a1a4:	23a7      	movs	r3, #167	; 0xa7
 800a1a6:	009b      	lsls	r3, r3, #2
 800a1a8:	2104      	movs	r1, #4
 800a1aa:	54d1      	strb	r1, [r2, r3]

  return USBD_OK;
 800a1ac:	2300      	movs	r3, #0
}
 800a1ae:	0018      	movs	r0, r3
 800a1b0:	46bd      	mov	sp, r7
 800a1b2:	b002      	add	sp, #8
 800a1b4:	bd80      	pop	{r7, pc}
 800a1b6:	46c0      	nop			; (mov r8, r8)
 800a1b8:	0000029d 	.word	0x0000029d

0800a1bc <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800a1bc:	b580      	push	{r7, lr}
 800a1be:	b082      	sub	sp, #8
 800a1c0:	af00      	add	r7, sp, #0
 800a1c2:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800a1c4:	687a      	ldr	r2, [r7, #4]
 800a1c6:	23a7      	movs	r3, #167	; 0xa7
 800a1c8:	009b      	lsls	r3, r3, #2
 800a1ca:	5cd3      	ldrb	r3, [r2, r3]
 800a1cc:	2b04      	cmp	r3, #4
 800a1ce:	d106      	bne.n	800a1de <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	4a05      	ldr	r2, [pc, #20]	; (800a1e8 <USBD_LL_Resume+0x2c>)
 800a1d4:	5c99      	ldrb	r1, [r3, r2]
 800a1d6:	687a      	ldr	r2, [r7, #4]
 800a1d8:	23a7      	movs	r3, #167	; 0xa7
 800a1da:	009b      	lsls	r3, r3, #2
 800a1dc:	54d1      	strb	r1, [r2, r3]
  }

  return USBD_OK;
 800a1de:	2300      	movs	r3, #0
}
 800a1e0:	0018      	movs	r0, r3
 800a1e2:	46bd      	mov	sp, r7
 800a1e4:	b002      	add	sp, #8
 800a1e6:	bd80      	pop	{r7, pc}
 800a1e8:	0000029d 	.word	0x0000029d

0800a1ec <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800a1ec:	b580      	push	{r7, lr}
 800a1ee:	b082      	sub	sp, #8
 800a1f0:	af00      	add	r7, sp, #0
 800a1f2:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a1f4:	687a      	ldr	r2, [r7, #4]
 800a1f6:	23a7      	movs	r3, #167	; 0xa7
 800a1f8:	009b      	lsls	r3, r3, #2
 800a1fa:	5cd3      	ldrb	r3, [r2, r3]
 800a1fc:	2b03      	cmp	r3, #3
 800a1fe:	d10e      	bne.n	800a21e <USBD_LL_SOF+0x32>
  {
    if (pdev->pClass->SOF != NULL)
 800a200:	687a      	ldr	r2, [r7, #4]
 800a202:	23ad      	movs	r3, #173	; 0xad
 800a204:	009b      	lsls	r3, r3, #2
 800a206:	58d3      	ldr	r3, [r2, r3]
 800a208:	69db      	ldr	r3, [r3, #28]
 800a20a:	2b00      	cmp	r3, #0
 800a20c:	d007      	beq.n	800a21e <USBD_LL_SOF+0x32>
    {
      pdev->pClass->SOF(pdev);
 800a20e:	687a      	ldr	r2, [r7, #4]
 800a210:	23ad      	movs	r3, #173	; 0xad
 800a212:	009b      	lsls	r3, r3, #2
 800a214:	58d3      	ldr	r3, [r2, r3]
 800a216:	69db      	ldr	r3, [r3, #28]
 800a218:	687a      	ldr	r2, [r7, #4]
 800a21a:	0010      	movs	r0, r2
 800a21c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800a21e:	2300      	movs	r3, #0
}
 800a220:	0018      	movs	r0, r3
 800a222:	46bd      	mov	sp, r7
 800a224:	b002      	add	sp, #8
 800a226:	bd80      	pop	{r7, pc}

0800a228 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 800a228:	b580      	push	{r7, lr}
 800a22a:	b084      	sub	sp, #16
 800a22c:	af00      	add	r7, sp, #0
 800a22e:	6078      	str	r0, [r7, #4]
 800a230:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a232:	230f      	movs	r3, #15
 800a234:	18fb      	adds	r3, r7, r3
 800a236:	2200      	movs	r2, #0
 800a238:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a23a:	683b      	ldr	r3, [r7, #0]
 800a23c:	781b      	ldrb	r3, [r3, #0]
 800a23e:	001a      	movs	r2, r3
 800a240:	2360      	movs	r3, #96	; 0x60
 800a242:	4013      	ands	r3, r2
 800a244:	2b40      	cmp	r3, #64	; 0x40
 800a246:	d004      	beq.n	800a252 <USBD_StdDevReq+0x2a>
 800a248:	d84f      	bhi.n	800a2ea <USBD_StdDevReq+0xc2>
 800a24a:	2b00      	cmp	r3, #0
 800a24c:	d00b      	beq.n	800a266 <USBD_StdDevReq+0x3e>
 800a24e:	2b20      	cmp	r3, #32
 800a250:	d14b      	bne.n	800a2ea <USBD_StdDevReq+0xc2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800a252:	687a      	ldr	r2, [r7, #4]
 800a254:	23ad      	movs	r3, #173	; 0xad
 800a256:	009b      	lsls	r3, r3, #2
 800a258:	58d3      	ldr	r3, [r2, r3]
 800a25a:	689b      	ldr	r3, [r3, #8]
 800a25c:	6839      	ldr	r1, [r7, #0]
 800a25e:	687a      	ldr	r2, [r7, #4]
 800a260:	0010      	movs	r0, r2
 800a262:	4798      	blx	r3
      break;
 800a264:	e048      	b.n	800a2f8 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a266:	683b      	ldr	r3, [r7, #0]
 800a268:	785b      	ldrb	r3, [r3, #1]
 800a26a:	2b09      	cmp	r3, #9
 800a26c:	d835      	bhi.n	800a2da <USBD_StdDevReq+0xb2>
 800a26e:	009a      	lsls	r2, r3, #2
 800a270:	4b25      	ldr	r3, [pc, #148]	; (800a308 <USBD_StdDevReq+0xe0>)
 800a272:	18d3      	adds	r3, r2, r3
 800a274:	681b      	ldr	r3, [r3, #0]
 800a276:	469f      	mov	pc, r3
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800a278:	683a      	ldr	r2, [r7, #0]
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	0011      	movs	r1, r2
 800a27e:	0018      	movs	r0, r3
 800a280:	f000 fa52 	bl	800a728 <USBD_GetDescriptor>
          break;
 800a284:	e030      	b.n	800a2e8 <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800a286:	683a      	ldr	r2, [r7, #0]
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	0011      	movs	r1, r2
 800a28c:	0018      	movs	r0, r3
 800a28e:	f000 fbfd 	bl	800aa8c <USBD_SetAddress>
          break;
 800a292:	e029      	b.n	800a2e8 <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 800a294:	683a      	ldr	r2, [r7, #0]
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	0011      	movs	r1, r2
 800a29a:	0018      	movs	r0, r3
 800a29c:	f000 fc4a 	bl	800ab34 <USBD_SetConfig>
          break;
 800a2a0:	e022      	b.n	800a2e8 <USBD_StdDevReq+0xc0>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800a2a2:	683a      	ldr	r2, [r7, #0]
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	0011      	movs	r1, r2
 800a2a8:	0018      	movs	r0, r3
 800a2aa:	f000 fce7 	bl	800ac7c <USBD_GetConfig>
          break;
 800a2ae:	e01b      	b.n	800a2e8 <USBD_StdDevReq+0xc0>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800a2b0:	683a      	ldr	r2, [r7, #0]
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	0011      	movs	r1, r2
 800a2b6:	0018      	movs	r0, r3
 800a2b8:	f000 fd1b 	bl	800acf2 <USBD_GetStatus>
          break;
 800a2bc:	e014      	b.n	800a2e8 <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800a2be:	683a      	ldr	r2, [r7, #0]
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	0011      	movs	r1, r2
 800a2c4:	0018      	movs	r0, r3
 800a2c6:	f000 fd4e 	bl	800ad66 <USBD_SetFeature>
          break;
 800a2ca:	e00d      	b.n	800a2e8 <USBD_StdDevReq+0xc0>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800a2cc:	683a      	ldr	r2, [r7, #0]
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	0011      	movs	r1, r2
 800a2d2:	0018      	movs	r0, r3
 800a2d4:	f000 fd5d 	bl	800ad92 <USBD_ClrFeature>
          break;
 800a2d8:	e006      	b.n	800a2e8 <USBD_StdDevReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800a2da:	683a      	ldr	r2, [r7, #0]
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	0011      	movs	r1, r2
 800a2e0:	0018      	movs	r0, r3
 800a2e2:	f000 fdb7 	bl	800ae54 <USBD_CtlError>
          break;
 800a2e6:	46c0      	nop			; (mov r8, r8)
      }
      break;
 800a2e8:	e006      	b.n	800a2f8 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800a2ea:	683a      	ldr	r2, [r7, #0]
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	0011      	movs	r1, r2
 800a2f0:	0018      	movs	r0, r3
 800a2f2:	f000 fdaf 	bl	800ae54 <USBD_CtlError>
      break;
 800a2f6:	46c0      	nop			; (mov r8, r8)
  }

  return ret;
 800a2f8:	230f      	movs	r3, #15
 800a2fa:	18fb      	adds	r3, r7, r3
 800a2fc:	781b      	ldrb	r3, [r3, #0]
}
 800a2fe:	0018      	movs	r0, r3
 800a300:	46bd      	mov	sp, r7
 800a302:	b004      	add	sp, #16
 800a304:	bd80      	pop	{r7, pc}
 800a306:	46c0      	nop			; (mov r8, r8)
 800a308:	0800c500 	.word	0x0800c500

0800a30c <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 800a30c:	b5b0      	push	{r4, r5, r7, lr}
 800a30e:	b084      	sub	sp, #16
 800a310:	af00      	add	r7, sp, #0
 800a312:	6078      	str	r0, [r7, #4]
 800a314:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a316:	230f      	movs	r3, #15
 800a318:	18fb      	adds	r3, r7, r3
 800a31a:	2200      	movs	r2, #0
 800a31c:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a31e:	683b      	ldr	r3, [r7, #0]
 800a320:	781b      	ldrb	r3, [r3, #0]
 800a322:	001a      	movs	r2, r3
 800a324:	2360      	movs	r3, #96	; 0x60
 800a326:	4013      	ands	r3, r2
 800a328:	2b40      	cmp	r3, #64	; 0x40
 800a32a:	d004      	beq.n	800a336 <USBD_StdItfReq+0x2a>
 800a32c:	d839      	bhi.n	800a3a2 <USBD_StdItfReq+0x96>
 800a32e:	2b00      	cmp	r3, #0
 800a330:	d001      	beq.n	800a336 <USBD_StdItfReq+0x2a>
 800a332:	2b20      	cmp	r3, #32
 800a334:	d135      	bne.n	800a3a2 <USBD_StdItfReq+0x96>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800a336:	687a      	ldr	r2, [r7, #4]
 800a338:	23a7      	movs	r3, #167	; 0xa7
 800a33a:	009b      	lsls	r3, r3, #2
 800a33c:	5cd3      	ldrb	r3, [r2, r3]
 800a33e:	3b01      	subs	r3, #1
 800a340:	2b02      	cmp	r3, #2
 800a342:	d825      	bhi.n	800a390 <USBD_StdItfReq+0x84>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800a344:	683b      	ldr	r3, [r7, #0]
 800a346:	889b      	ldrh	r3, [r3, #4]
 800a348:	b2db      	uxtb	r3, r3
 800a34a:	2b01      	cmp	r3, #1
 800a34c:	d819      	bhi.n	800a382 <USBD_StdItfReq+0x76>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800a34e:	687a      	ldr	r2, [r7, #4]
 800a350:	23ad      	movs	r3, #173	; 0xad
 800a352:	009b      	lsls	r3, r3, #2
 800a354:	58d3      	ldr	r3, [r2, r3]
 800a356:	689b      	ldr	r3, [r3, #8]
 800a358:	250f      	movs	r5, #15
 800a35a:	197c      	adds	r4, r7, r5
 800a35c:	6839      	ldr	r1, [r7, #0]
 800a35e:	687a      	ldr	r2, [r7, #4]
 800a360:	0010      	movs	r0, r2
 800a362:	4798      	blx	r3
 800a364:	0003      	movs	r3, r0
 800a366:	7023      	strb	r3, [r4, #0]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800a368:	683b      	ldr	r3, [r7, #0]
 800a36a:	88db      	ldrh	r3, [r3, #6]
 800a36c:	2b00      	cmp	r3, #0
 800a36e:	d116      	bne.n	800a39e <USBD_StdItfReq+0x92>
 800a370:	197b      	adds	r3, r7, r5
 800a372:	781b      	ldrb	r3, [r3, #0]
 800a374:	2b00      	cmp	r3, #0
 800a376:	d112      	bne.n	800a39e <USBD_StdItfReq+0x92>
            {
              USBD_CtlSendStatus(pdev);
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	0018      	movs	r0, r3
 800a37c:	f000 fe52 	bl	800b024 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800a380:	e00d      	b.n	800a39e <USBD_StdItfReq+0x92>
            USBD_CtlError(pdev, req);
 800a382:	683a      	ldr	r2, [r7, #0]
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	0011      	movs	r1, r2
 800a388:	0018      	movs	r0, r3
 800a38a:	f000 fd63 	bl	800ae54 <USBD_CtlError>
          break;
 800a38e:	e006      	b.n	800a39e <USBD_StdItfReq+0x92>

        default:
          USBD_CtlError(pdev, req);
 800a390:	683a      	ldr	r2, [r7, #0]
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	0011      	movs	r1, r2
 800a396:	0018      	movs	r0, r3
 800a398:	f000 fd5c 	bl	800ae54 <USBD_CtlError>
          break;
 800a39c:	e000      	b.n	800a3a0 <USBD_StdItfReq+0x94>
          break;
 800a39e:	46c0      	nop			; (mov r8, r8)
      }
      break;
 800a3a0:	e006      	b.n	800a3b0 <USBD_StdItfReq+0xa4>

    default:
      USBD_CtlError(pdev, req);
 800a3a2:	683a      	ldr	r2, [r7, #0]
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	0011      	movs	r1, r2
 800a3a8:	0018      	movs	r0, r3
 800a3aa:	f000 fd53 	bl	800ae54 <USBD_CtlError>
      break;
 800a3ae:	46c0      	nop			; (mov r8, r8)
  }

  return USBD_OK;
 800a3b0:	2300      	movs	r3, #0
}
 800a3b2:	0018      	movs	r0, r3
 800a3b4:	46bd      	mov	sp, r7
 800a3b6:	b004      	add	sp, #16
 800a3b8:	bdb0      	pop	{r4, r5, r7, pc}

0800a3ba <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 800a3ba:	b5b0      	push	{r4, r5, r7, lr}
 800a3bc:	b084      	sub	sp, #16
 800a3be:	af00      	add	r7, sp, #0
 800a3c0:	6078      	str	r0, [r7, #4]
 800a3c2:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800a3c4:	230f      	movs	r3, #15
 800a3c6:	18fb      	adds	r3, r7, r3
 800a3c8:	2200      	movs	r2, #0
 800a3ca:	701a      	strb	r2, [r3, #0]
  ep_addr  = LOBYTE(req->wIndex);
 800a3cc:	683b      	ldr	r3, [r7, #0]
 800a3ce:	889a      	ldrh	r2, [r3, #4]
 800a3d0:	230e      	movs	r3, #14
 800a3d2:	18fb      	adds	r3, r7, r3
 800a3d4:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a3d6:	683b      	ldr	r3, [r7, #0]
 800a3d8:	781b      	ldrb	r3, [r3, #0]
 800a3da:	001a      	movs	r2, r3
 800a3dc:	2360      	movs	r3, #96	; 0x60
 800a3de:	4013      	ands	r3, r2
 800a3e0:	2b40      	cmp	r3, #64	; 0x40
 800a3e2:	d006      	beq.n	800a3f2 <USBD_StdEPReq+0x38>
 800a3e4:	d900      	bls.n	800a3e8 <USBD_StdEPReq+0x2e>
 800a3e6:	e190      	b.n	800a70a <USBD_StdEPReq+0x350>
 800a3e8:	2b00      	cmp	r3, #0
 800a3ea:	d00c      	beq.n	800a406 <USBD_StdEPReq+0x4c>
 800a3ec:	2b20      	cmp	r3, #32
 800a3ee:	d000      	beq.n	800a3f2 <USBD_StdEPReq+0x38>
 800a3f0:	e18b      	b.n	800a70a <USBD_StdEPReq+0x350>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800a3f2:	687a      	ldr	r2, [r7, #4]
 800a3f4:	23ad      	movs	r3, #173	; 0xad
 800a3f6:	009b      	lsls	r3, r3, #2
 800a3f8:	58d3      	ldr	r3, [r2, r3]
 800a3fa:	689b      	ldr	r3, [r3, #8]
 800a3fc:	6839      	ldr	r1, [r7, #0]
 800a3fe:	687a      	ldr	r2, [r7, #4]
 800a400:	0010      	movs	r0, r2
 800a402:	4798      	blx	r3
      break;
 800a404:	e188      	b.n	800a718 <USBD_StdEPReq+0x35e>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 800a406:	683b      	ldr	r3, [r7, #0]
 800a408:	781b      	ldrb	r3, [r3, #0]
 800a40a:	001a      	movs	r2, r3
 800a40c:	2360      	movs	r3, #96	; 0x60
 800a40e:	4013      	ands	r3, r2
 800a410:	2b20      	cmp	r3, #32
 800a412:	d10f      	bne.n	800a434 <USBD_StdEPReq+0x7a>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800a414:	687a      	ldr	r2, [r7, #4]
 800a416:	23ad      	movs	r3, #173	; 0xad
 800a418:	009b      	lsls	r3, r3, #2
 800a41a:	58d3      	ldr	r3, [r2, r3]
 800a41c:	689b      	ldr	r3, [r3, #8]
 800a41e:	250f      	movs	r5, #15
 800a420:	197c      	adds	r4, r7, r5
 800a422:	6839      	ldr	r1, [r7, #0]
 800a424:	687a      	ldr	r2, [r7, #4]
 800a426:	0010      	movs	r0, r2
 800a428:	4798      	blx	r3
 800a42a:	0003      	movs	r3, r0
 800a42c:	7023      	strb	r3, [r4, #0]

        return ret;
 800a42e:	197b      	adds	r3, r7, r5
 800a430:	781b      	ldrb	r3, [r3, #0]
 800a432:	e174      	b.n	800a71e <USBD_StdEPReq+0x364>
      }

      switch (req->bRequest)
 800a434:	683b      	ldr	r3, [r7, #0]
 800a436:	785b      	ldrb	r3, [r3, #1]
 800a438:	2b03      	cmp	r3, #3
 800a43a:	d007      	beq.n	800a44c <USBD_StdEPReq+0x92>
 800a43c:	dd00      	ble.n	800a440 <USBD_StdEPReq+0x86>
 800a43e:	e15c      	b.n	800a6fa <USBD_StdEPReq+0x340>
 800a440:	2b00      	cmp	r3, #0
 800a442:	d100      	bne.n	800a446 <USBD_StdEPReq+0x8c>
 800a444:	e092      	b.n	800a56c <USBD_StdEPReq+0x1b2>
 800a446:	2b01      	cmp	r3, #1
 800a448:	d04b      	beq.n	800a4e2 <USBD_StdEPReq+0x128>
 800a44a:	e156      	b.n	800a6fa <USBD_StdEPReq+0x340>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800a44c:	687a      	ldr	r2, [r7, #4]
 800a44e:	23a7      	movs	r3, #167	; 0xa7
 800a450:	009b      	lsls	r3, r3, #2
 800a452:	5cd3      	ldrb	r3, [r2, r3]
 800a454:	2b02      	cmp	r3, #2
 800a456:	d002      	beq.n	800a45e <USBD_StdEPReq+0xa4>
 800a458:	2b03      	cmp	r3, #3
 800a45a:	d01d      	beq.n	800a498 <USBD_StdEPReq+0xde>
 800a45c:	e039      	b.n	800a4d2 <USBD_StdEPReq+0x118>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a45e:	220e      	movs	r2, #14
 800a460:	18bb      	adds	r3, r7, r2
 800a462:	781b      	ldrb	r3, [r3, #0]
 800a464:	2b00      	cmp	r3, #0
 800a466:	d010      	beq.n	800a48a <USBD_StdEPReq+0xd0>
 800a468:	18bb      	adds	r3, r7, r2
 800a46a:	781b      	ldrb	r3, [r3, #0]
 800a46c:	2b80      	cmp	r3, #128	; 0x80
 800a46e:	d00c      	beq.n	800a48a <USBD_StdEPReq+0xd0>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800a470:	18bb      	adds	r3, r7, r2
 800a472:	781a      	ldrb	r2, [r3, #0]
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	0011      	movs	r1, r2
 800a478:	0018      	movs	r0, r3
 800a47a:	f001 f9da 	bl	800b832 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	2180      	movs	r1, #128	; 0x80
 800a482:	0018      	movs	r0, r3
 800a484:	f001 f9d5 	bl	800b832 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800a488:	e02a      	b.n	800a4e0 <USBD_StdEPReq+0x126>
                USBD_CtlError(pdev, req);
 800a48a:	683a      	ldr	r2, [r7, #0]
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	0011      	movs	r1, r2
 800a490:	0018      	movs	r0, r3
 800a492:	f000 fcdf 	bl	800ae54 <USBD_CtlError>
              break;
 800a496:	e023      	b.n	800a4e0 <USBD_StdEPReq+0x126>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800a498:	683b      	ldr	r3, [r7, #0]
 800a49a:	885b      	ldrh	r3, [r3, #2]
 800a49c:	2b00      	cmp	r3, #0
 800a49e:	d113      	bne.n	800a4c8 <USBD_StdEPReq+0x10e>
              {
                if ((ep_addr != 0x00U) &&
 800a4a0:	220e      	movs	r2, #14
 800a4a2:	18bb      	adds	r3, r7, r2
 800a4a4:	781b      	ldrb	r3, [r3, #0]
 800a4a6:	2b00      	cmp	r3, #0
 800a4a8:	d00e      	beq.n	800a4c8 <USBD_StdEPReq+0x10e>
 800a4aa:	18bb      	adds	r3, r7, r2
 800a4ac:	781b      	ldrb	r3, [r3, #0]
 800a4ae:	2b80      	cmp	r3, #128	; 0x80
 800a4b0:	d00a      	beq.n	800a4c8 <USBD_StdEPReq+0x10e>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800a4b2:	683b      	ldr	r3, [r7, #0]
 800a4b4:	88db      	ldrh	r3, [r3, #6]
 800a4b6:	2b00      	cmp	r3, #0
 800a4b8:	d106      	bne.n	800a4c8 <USBD_StdEPReq+0x10e>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 800a4ba:	18bb      	adds	r3, r7, r2
 800a4bc:	781a      	ldrb	r2, [r3, #0]
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	0011      	movs	r1, r2
 800a4c2:	0018      	movs	r0, r3
 800a4c4:	f001 f9b5 	bl	800b832 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	0018      	movs	r0, r3
 800a4cc:	f000 fdaa 	bl	800b024 <USBD_CtlSendStatus>

              break;
 800a4d0:	e006      	b.n	800a4e0 <USBD_StdEPReq+0x126>

            default:
              USBD_CtlError(pdev, req);
 800a4d2:	683a      	ldr	r2, [r7, #0]
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	0011      	movs	r1, r2
 800a4d8:	0018      	movs	r0, r3
 800a4da:	f000 fcbb 	bl	800ae54 <USBD_CtlError>
              break;
 800a4de:	46c0      	nop			; (mov r8, r8)
          }
          break;
 800a4e0:	e112      	b.n	800a708 <USBD_StdEPReq+0x34e>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800a4e2:	687a      	ldr	r2, [r7, #4]
 800a4e4:	23a7      	movs	r3, #167	; 0xa7
 800a4e6:	009b      	lsls	r3, r3, #2
 800a4e8:	5cd3      	ldrb	r3, [r2, r3]
 800a4ea:	2b02      	cmp	r3, #2
 800a4ec:	d002      	beq.n	800a4f4 <USBD_StdEPReq+0x13a>
 800a4ee:	2b03      	cmp	r3, #3
 800a4f0:	d01d      	beq.n	800a52e <USBD_StdEPReq+0x174>
 800a4f2:	e032      	b.n	800a55a <USBD_StdEPReq+0x1a0>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a4f4:	220e      	movs	r2, #14
 800a4f6:	18bb      	adds	r3, r7, r2
 800a4f8:	781b      	ldrb	r3, [r3, #0]
 800a4fa:	2b00      	cmp	r3, #0
 800a4fc:	d010      	beq.n	800a520 <USBD_StdEPReq+0x166>
 800a4fe:	18bb      	adds	r3, r7, r2
 800a500:	781b      	ldrb	r3, [r3, #0]
 800a502:	2b80      	cmp	r3, #128	; 0x80
 800a504:	d00c      	beq.n	800a520 <USBD_StdEPReq+0x166>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800a506:	18bb      	adds	r3, r7, r2
 800a508:	781a      	ldrb	r2, [r3, #0]
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	0011      	movs	r1, r2
 800a50e:	0018      	movs	r0, r3
 800a510:	f001 f98f 	bl	800b832 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	2180      	movs	r1, #128	; 0x80
 800a518:	0018      	movs	r0, r3
 800a51a:	f001 f98a 	bl	800b832 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800a51e:	e024      	b.n	800a56a <USBD_StdEPReq+0x1b0>
                USBD_CtlError(pdev, req);
 800a520:	683a      	ldr	r2, [r7, #0]
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	0011      	movs	r1, r2
 800a526:	0018      	movs	r0, r3
 800a528:	f000 fc94 	bl	800ae54 <USBD_CtlError>
              break;
 800a52c:	e01d      	b.n	800a56a <USBD_StdEPReq+0x1b0>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800a52e:	683b      	ldr	r3, [r7, #0]
 800a530:	885b      	ldrh	r3, [r3, #2]
 800a532:	2b00      	cmp	r3, #0
 800a534:	d118      	bne.n	800a568 <USBD_StdEPReq+0x1ae>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800a536:	210e      	movs	r1, #14
 800a538:	187b      	adds	r3, r7, r1
 800a53a:	781b      	ldrb	r3, [r3, #0]
 800a53c:	227f      	movs	r2, #127	; 0x7f
 800a53e:	4013      	ands	r3, r2
 800a540:	d006      	beq.n	800a550 <USBD_StdEPReq+0x196>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 800a542:	187b      	adds	r3, r7, r1
 800a544:	781a      	ldrb	r2, [r3, #0]
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	0011      	movs	r1, r2
 800a54a:	0018      	movs	r0, r3
 800a54c:	f001 f99c 	bl	800b888 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	0018      	movs	r0, r3
 800a554:	f000 fd66 	bl	800b024 <USBD_CtlSendStatus>
              }
              break;
 800a558:	e006      	b.n	800a568 <USBD_StdEPReq+0x1ae>

            default:
              USBD_CtlError(pdev, req);
 800a55a:	683a      	ldr	r2, [r7, #0]
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	0011      	movs	r1, r2
 800a560:	0018      	movs	r0, r3
 800a562:	f000 fc77 	bl	800ae54 <USBD_CtlError>
              break;
 800a566:	e000      	b.n	800a56a <USBD_StdEPReq+0x1b0>
              break;
 800a568:	46c0      	nop			; (mov r8, r8)
          }
          break;
 800a56a:	e0cd      	b.n	800a708 <USBD_StdEPReq+0x34e>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800a56c:	687a      	ldr	r2, [r7, #4]
 800a56e:	23a7      	movs	r3, #167	; 0xa7
 800a570:	009b      	lsls	r3, r3, #2
 800a572:	5cd3      	ldrb	r3, [r2, r3]
 800a574:	2b02      	cmp	r3, #2
 800a576:	d002      	beq.n	800a57e <USBD_StdEPReq+0x1c4>
 800a578:	2b03      	cmp	r3, #3
 800a57a:	d03c      	beq.n	800a5f6 <USBD_StdEPReq+0x23c>
 800a57c:	e0b5      	b.n	800a6ea <USBD_StdEPReq+0x330>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a57e:	220e      	movs	r2, #14
 800a580:	18bb      	adds	r3, r7, r2
 800a582:	781b      	ldrb	r3, [r3, #0]
 800a584:	2b00      	cmp	r3, #0
 800a586:	d00a      	beq.n	800a59e <USBD_StdEPReq+0x1e4>
 800a588:	18bb      	adds	r3, r7, r2
 800a58a:	781b      	ldrb	r3, [r3, #0]
 800a58c:	2b80      	cmp	r3, #128	; 0x80
 800a58e:	d006      	beq.n	800a59e <USBD_StdEPReq+0x1e4>
              {
                USBD_CtlError(pdev, req);
 800a590:	683a      	ldr	r2, [r7, #0]
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	0011      	movs	r1, r2
 800a596:	0018      	movs	r0, r3
 800a598:	f000 fc5c 	bl	800ae54 <USBD_CtlError>
                break;
 800a59c:	e0ac      	b.n	800a6f8 <USBD_StdEPReq+0x33e>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a59e:	220e      	movs	r2, #14
 800a5a0:	18bb      	adds	r3, r7, r2
 800a5a2:	781b      	ldrb	r3, [r3, #0]
 800a5a4:	b25b      	sxtb	r3, r3
 800a5a6:	2b00      	cmp	r3, #0
 800a5a8:	da0c      	bge.n	800a5c4 <USBD_StdEPReq+0x20a>
 800a5aa:	18bb      	adds	r3, r7, r2
 800a5ac:	781b      	ldrb	r3, [r3, #0]
 800a5ae:	227f      	movs	r2, #127	; 0x7f
 800a5b0:	401a      	ands	r2, r3
 800a5b2:	0013      	movs	r3, r2
 800a5b4:	009b      	lsls	r3, r3, #2
 800a5b6:	189b      	adds	r3, r3, r2
 800a5b8:	009b      	lsls	r3, r3, #2
 800a5ba:	3310      	adds	r3, #16
 800a5bc:	687a      	ldr	r2, [r7, #4]
 800a5be:	18d3      	adds	r3, r2, r3
 800a5c0:	3304      	adds	r3, #4
 800a5c2:	e00d      	b.n	800a5e0 <USBD_StdEPReq+0x226>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800a5c4:	230e      	movs	r3, #14
 800a5c6:	18fb      	adds	r3, r7, r3
 800a5c8:	781b      	ldrb	r3, [r3, #0]
 800a5ca:	227f      	movs	r2, #127	; 0x7f
 800a5cc:	401a      	ands	r2, r3
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a5ce:	0013      	movs	r3, r2
 800a5d0:	009b      	lsls	r3, r3, #2
 800a5d2:	189b      	adds	r3, r3, r2
 800a5d4:	009b      	lsls	r3, r3, #2
 800a5d6:	3351      	adds	r3, #81	; 0x51
 800a5d8:	33ff      	adds	r3, #255	; 0xff
 800a5da:	687a      	ldr	r2, [r7, #4]
 800a5dc:	18d3      	adds	r3, r2, r3
 800a5de:	3304      	adds	r3, #4
 800a5e0:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800a5e2:	68bb      	ldr	r3, [r7, #8]
 800a5e4:	2200      	movs	r2, #0
 800a5e6:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800a5e8:	68b9      	ldr	r1, [r7, #8]
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	2202      	movs	r2, #2
 800a5ee:	0018      	movs	r0, r3
 800a5f0:	f000 fcae 	bl	800af50 <USBD_CtlSendData>
              break;
 800a5f4:	e080      	b.n	800a6f8 <USBD_StdEPReq+0x33e>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800a5f6:	220e      	movs	r2, #14
 800a5f8:	18bb      	adds	r3, r7, r2
 800a5fa:	781b      	ldrb	r3, [r3, #0]
 800a5fc:	b25b      	sxtb	r3, r3
 800a5fe:	2b00      	cmp	r3, #0
 800a600:	da14      	bge.n	800a62c <USBD_StdEPReq+0x272>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800a602:	18bb      	adds	r3, r7, r2
 800a604:	781b      	ldrb	r3, [r3, #0]
 800a606:	220f      	movs	r2, #15
 800a608:	401a      	ands	r2, r3
 800a60a:	6879      	ldr	r1, [r7, #4]
 800a60c:	0013      	movs	r3, r2
 800a60e:	009b      	lsls	r3, r3, #2
 800a610:	189b      	adds	r3, r3, r2
 800a612:	009b      	lsls	r3, r3, #2
 800a614:	18cb      	adds	r3, r1, r3
 800a616:	3318      	adds	r3, #24
 800a618:	681b      	ldr	r3, [r3, #0]
 800a61a:	2b00      	cmp	r3, #0
 800a61c:	d11e      	bne.n	800a65c <USBD_StdEPReq+0x2a2>
                {
                  USBD_CtlError(pdev, req);
 800a61e:	683a      	ldr	r2, [r7, #0]
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	0011      	movs	r1, r2
 800a624:	0018      	movs	r0, r3
 800a626:	f000 fc15 	bl	800ae54 <USBD_CtlError>
                  break;
 800a62a:	e065      	b.n	800a6f8 <USBD_StdEPReq+0x33e>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800a62c:	230e      	movs	r3, #14
 800a62e:	18fb      	adds	r3, r7, r3
 800a630:	781b      	ldrb	r3, [r3, #0]
 800a632:	220f      	movs	r2, #15
 800a634:	401a      	ands	r2, r3
 800a636:	6878      	ldr	r0, [r7, #4]
 800a638:	23ac      	movs	r3, #172	; 0xac
 800a63a:	0059      	lsls	r1, r3, #1
 800a63c:	0013      	movs	r3, r2
 800a63e:	009b      	lsls	r3, r3, #2
 800a640:	189b      	adds	r3, r3, r2
 800a642:	009b      	lsls	r3, r3, #2
 800a644:	18c3      	adds	r3, r0, r3
 800a646:	185b      	adds	r3, r3, r1
 800a648:	681b      	ldr	r3, [r3, #0]
 800a64a:	2b00      	cmp	r3, #0
 800a64c:	d106      	bne.n	800a65c <USBD_StdEPReq+0x2a2>
                {
                  USBD_CtlError(pdev, req);
 800a64e:	683a      	ldr	r2, [r7, #0]
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	0011      	movs	r1, r2
 800a654:	0018      	movs	r0, r3
 800a656:	f000 fbfd 	bl	800ae54 <USBD_CtlError>
                  break;
 800a65a:	e04d      	b.n	800a6f8 <USBD_StdEPReq+0x33e>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a65c:	220e      	movs	r2, #14
 800a65e:	18bb      	adds	r3, r7, r2
 800a660:	781b      	ldrb	r3, [r3, #0]
 800a662:	b25b      	sxtb	r3, r3
 800a664:	2b00      	cmp	r3, #0
 800a666:	da0c      	bge.n	800a682 <USBD_StdEPReq+0x2c8>
 800a668:	18bb      	adds	r3, r7, r2
 800a66a:	781b      	ldrb	r3, [r3, #0]
 800a66c:	227f      	movs	r2, #127	; 0x7f
 800a66e:	401a      	ands	r2, r3
 800a670:	0013      	movs	r3, r2
 800a672:	009b      	lsls	r3, r3, #2
 800a674:	189b      	adds	r3, r3, r2
 800a676:	009b      	lsls	r3, r3, #2
 800a678:	3310      	adds	r3, #16
 800a67a:	687a      	ldr	r2, [r7, #4]
 800a67c:	18d3      	adds	r3, r2, r3
 800a67e:	3304      	adds	r3, #4
 800a680:	e00d      	b.n	800a69e <USBD_StdEPReq+0x2e4>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800a682:	230e      	movs	r3, #14
 800a684:	18fb      	adds	r3, r7, r3
 800a686:	781b      	ldrb	r3, [r3, #0]
 800a688:	227f      	movs	r2, #127	; 0x7f
 800a68a:	401a      	ands	r2, r3
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a68c:	0013      	movs	r3, r2
 800a68e:	009b      	lsls	r3, r3, #2
 800a690:	189b      	adds	r3, r3, r2
 800a692:	009b      	lsls	r3, r3, #2
 800a694:	3351      	adds	r3, #81	; 0x51
 800a696:	33ff      	adds	r3, #255	; 0xff
 800a698:	687a      	ldr	r2, [r7, #4]
 800a69a:	18d3      	adds	r3, r2, r3
 800a69c:	3304      	adds	r3, #4
 800a69e:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800a6a0:	220e      	movs	r2, #14
 800a6a2:	18bb      	adds	r3, r7, r2
 800a6a4:	781b      	ldrb	r3, [r3, #0]
 800a6a6:	2b00      	cmp	r3, #0
 800a6a8:	d003      	beq.n	800a6b2 <USBD_StdEPReq+0x2f8>
 800a6aa:	18bb      	adds	r3, r7, r2
 800a6ac:	781b      	ldrb	r3, [r3, #0]
 800a6ae:	2b80      	cmp	r3, #128	; 0x80
 800a6b0:	d103      	bne.n	800a6ba <USBD_StdEPReq+0x300>
              {
                pep->status = 0x0000U;
 800a6b2:	68bb      	ldr	r3, [r7, #8]
 800a6b4:	2200      	movs	r2, #0
 800a6b6:	601a      	str	r2, [r3, #0]
 800a6b8:	e010      	b.n	800a6dc <USBD_StdEPReq+0x322>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 800a6ba:	230e      	movs	r3, #14
 800a6bc:	18fb      	adds	r3, r7, r3
 800a6be:	781a      	ldrb	r2, [r3, #0]
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	0011      	movs	r1, r2
 800a6c4:	0018      	movs	r0, r3
 800a6c6:	f001 f90a 	bl	800b8de <USBD_LL_IsStallEP>
 800a6ca:	1e03      	subs	r3, r0, #0
 800a6cc:	d003      	beq.n	800a6d6 <USBD_StdEPReq+0x31c>
              {
                pep->status = 0x0001U;
 800a6ce:	68bb      	ldr	r3, [r7, #8]
 800a6d0:	2201      	movs	r2, #1
 800a6d2:	601a      	str	r2, [r3, #0]
 800a6d4:	e002      	b.n	800a6dc <USBD_StdEPReq+0x322>
              }
              else
              {
                pep->status = 0x0000U;
 800a6d6:	68bb      	ldr	r3, [r7, #8]
 800a6d8:	2200      	movs	r2, #0
 800a6da:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800a6dc:	68b9      	ldr	r1, [r7, #8]
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	2202      	movs	r2, #2
 800a6e2:	0018      	movs	r0, r3
 800a6e4:	f000 fc34 	bl	800af50 <USBD_CtlSendData>
              break;
 800a6e8:	e006      	b.n	800a6f8 <USBD_StdEPReq+0x33e>

            default:
              USBD_CtlError(pdev, req);
 800a6ea:	683a      	ldr	r2, [r7, #0]
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	0011      	movs	r1, r2
 800a6f0:	0018      	movs	r0, r3
 800a6f2:	f000 fbaf 	bl	800ae54 <USBD_CtlError>
              break;
 800a6f6:	46c0      	nop			; (mov r8, r8)
          }
          break;
 800a6f8:	e006      	b.n	800a708 <USBD_StdEPReq+0x34e>

        default:
          USBD_CtlError(pdev, req);
 800a6fa:	683a      	ldr	r2, [r7, #0]
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	0011      	movs	r1, r2
 800a700:	0018      	movs	r0, r3
 800a702:	f000 fba7 	bl	800ae54 <USBD_CtlError>
          break;
 800a706:	46c0      	nop			; (mov r8, r8)
      }
      break;
 800a708:	e006      	b.n	800a718 <USBD_StdEPReq+0x35e>

    default:
      USBD_CtlError(pdev, req);
 800a70a:	683a      	ldr	r2, [r7, #0]
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	0011      	movs	r1, r2
 800a710:	0018      	movs	r0, r3
 800a712:	f000 fb9f 	bl	800ae54 <USBD_CtlError>
      break;
 800a716:	46c0      	nop			; (mov r8, r8)
  }

  return ret;
 800a718:	230f      	movs	r3, #15
 800a71a:	18fb      	adds	r3, r7, r3
 800a71c:	781b      	ldrb	r3, [r3, #0]
}
 800a71e:	0018      	movs	r0, r3
 800a720:	46bd      	mov	sp, r7
 800a722:	b004      	add	sp, #16
 800a724:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800a728 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800a728:	b580      	push	{r7, lr}
 800a72a:	b084      	sub	sp, #16
 800a72c:	af00      	add	r7, sp, #0
 800a72e:	6078      	str	r0, [r7, #4]
 800a730:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800a732:	2308      	movs	r3, #8
 800a734:	18fb      	adds	r3, r7, r3
 800a736:	2200      	movs	r2, #0
 800a738:	801a      	strh	r2, [r3, #0]
  uint8_t *pbuf = NULL;
 800a73a:	2300      	movs	r3, #0
 800a73c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800a73e:	230b      	movs	r3, #11
 800a740:	18fb      	adds	r3, r7, r3
 800a742:	2200      	movs	r2, #0
 800a744:	701a      	strb	r2, [r3, #0]

  switch (req->wValue >> 8)
 800a746:	683b      	ldr	r3, [r7, #0]
 800a748:	885b      	ldrh	r3, [r3, #2]
 800a74a:	0a1b      	lsrs	r3, r3, #8
 800a74c:	b29b      	uxth	r3, r3
 800a74e:	2b07      	cmp	r3, #7
 800a750:	d900      	bls.n	800a754 <USBD_GetDescriptor+0x2c>
 800a752:	e159      	b.n	800aa08 <USBD_GetDescriptor+0x2e0>
 800a754:	009a      	lsls	r2, r3, #2
 800a756:	4bcb      	ldr	r3, [pc, #812]	; (800aa84 <USBD_GetDescriptor+0x35c>)
 800a758:	18d3      	adds	r3, r2, r3
 800a75a:	681b      	ldr	r3, [r3, #0]
 800a75c:	469f      	mov	pc, r3
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800a75e:	687a      	ldr	r2, [r7, #4]
 800a760:	23ac      	movs	r3, #172	; 0xac
 800a762:	009b      	lsls	r3, r3, #2
 800a764:	58d3      	ldr	r3, [r2, r3]
 800a766:	681b      	ldr	r3, [r3, #0]
 800a768:	687a      	ldr	r2, [r7, #4]
 800a76a:	7c12      	ldrb	r2, [r2, #16]
 800a76c:	2108      	movs	r1, #8
 800a76e:	1879      	adds	r1, r7, r1
 800a770:	0010      	movs	r0, r2
 800a772:	4798      	blx	r3
 800a774:	0003      	movs	r3, r0
 800a776:	60fb      	str	r3, [r7, #12]
      break;
 800a778:	e153      	b.n	800aa22 <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	7c1b      	ldrb	r3, [r3, #16]
 800a77e:	2b00      	cmp	r3, #0
 800a780:	d10f      	bne.n	800a7a2 <USBD_GetDescriptor+0x7a>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800a782:	687a      	ldr	r2, [r7, #4]
 800a784:	23ad      	movs	r3, #173	; 0xad
 800a786:	009b      	lsls	r3, r3, #2
 800a788:	58d3      	ldr	r3, [r2, r3]
 800a78a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a78c:	2208      	movs	r2, #8
 800a78e:	18ba      	adds	r2, r7, r2
 800a790:	0010      	movs	r0, r2
 800a792:	4798      	blx	r3
 800a794:	0003      	movs	r3, r0
 800a796:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a798:	68fb      	ldr	r3, [r7, #12]
 800a79a:	3301      	adds	r3, #1
 800a79c:	2202      	movs	r2, #2
 800a79e:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800a7a0:	e13f      	b.n	800aa22 <USBD_GetDescriptor+0x2fa>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800a7a2:	687a      	ldr	r2, [r7, #4]
 800a7a4:	23ad      	movs	r3, #173	; 0xad
 800a7a6:	009b      	lsls	r3, r3, #2
 800a7a8:	58d3      	ldr	r3, [r2, r3]
 800a7aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a7ac:	2208      	movs	r2, #8
 800a7ae:	18ba      	adds	r2, r7, r2
 800a7b0:	0010      	movs	r0, r2
 800a7b2:	4798      	blx	r3
 800a7b4:	0003      	movs	r3, r0
 800a7b6:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a7b8:	68fb      	ldr	r3, [r7, #12]
 800a7ba:	3301      	adds	r3, #1
 800a7bc:	2202      	movs	r2, #2
 800a7be:	701a      	strb	r2, [r3, #0]
      break;
 800a7c0:	e12f      	b.n	800aa22 <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800a7c2:	683b      	ldr	r3, [r7, #0]
 800a7c4:	885b      	ldrh	r3, [r3, #2]
 800a7c6:	b2db      	uxtb	r3, r3
 800a7c8:	2b05      	cmp	r3, #5
 800a7ca:	d900      	bls.n	800a7ce <USBD_GetDescriptor+0xa6>
 800a7cc:	e0d0      	b.n	800a970 <USBD_GetDescriptor+0x248>
 800a7ce:	009a      	lsls	r2, r3, #2
 800a7d0:	4bad      	ldr	r3, [pc, #692]	; (800aa88 <USBD_GetDescriptor+0x360>)
 800a7d2:	18d3      	adds	r3, r2, r3
 800a7d4:	681b      	ldr	r3, [r3, #0]
 800a7d6:	469f      	mov	pc, r3
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800a7d8:	687a      	ldr	r2, [r7, #4]
 800a7da:	23ac      	movs	r3, #172	; 0xac
 800a7dc:	009b      	lsls	r3, r3, #2
 800a7de:	58d3      	ldr	r3, [r2, r3]
 800a7e0:	685b      	ldr	r3, [r3, #4]
 800a7e2:	2b00      	cmp	r3, #0
 800a7e4:	d00d      	beq.n	800a802 <USBD_GetDescriptor+0xda>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800a7e6:	687a      	ldr	r2, [r7, #4]
 800a7e8:	23ac      	movs	r3, #172	; 0xac
 800a7ea:	009b      	lsls	r3, r3, #2
 800a7ec:	58d3      	ldr	r3, [r2, r3]
 800a7ee:	685b      	ldr	r3, [r3, #4]
 800a7f0:	687a      	ldr	r2, [r7, #4]
 800a7f2:	7c12      	ldrb	r2, [r2, #16]
 800a7f4:	2108      	movs	r1, #8
 800a7f6:	1879      	adds	r1, r7, r1
 800a7f8:	0010      	movs	r0, r2
 800a7fa:	4798      	blx	r3
 800a7fc:	0003      	movs	r3, r0
 800a7fe:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a800:	e0c3      	b.n	800a98a <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 800a802:	683a      	ldr	r2, [r7, #0]
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	0011      	movs	r1, r2
 800a808:	0018      	movs	r0, r3
 800a80a:	f000 fb23 	bl	800ae54 <USBD_CtlError>
            err++;
 800a80e:	210b      	movs	r1, #11
 800a810:	187b      	adds	r3, r7, r1
 800a812:	781a      	ldrb	r2, [r3, #0]
 800a814:	187b      	adds	r3, r7, r1
 800a816:	3201      	adds	r2, #1
 800a818:	701a      	strb	r2, [r3, #0]
          break;
 800a81a:	e0b6      	b.n	800a98a <USBD_GetDescriptor+0x262>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800a81c:	687a      	ldr	r2, [r7, #4]
 800a81e:	23ac      	movs	r3, #172	; 0xac
 800a820:	009b      	lsls	r3, r3, #2
 800a822:	58d3      	ldr	r3, [r2, r3]
 800a824:	689b      	ldr	r3, [r3, #8]
 800a826:	2b00      	cmp	r3, #0
 800a828:	d00d      	beq.n	800a846 <USBD_GetDescriptor+0x11e>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800a82a:	687a      	ldr	r2, [r7, #4]
 800a82c:	23ac      	movs	r3, #172	; 0xac
 800a82e:	009b      	lsls	r3, r3, #2
 800a830:	58d3      	ldr	r3, [r2, r3]
 800a832:	689b      	ldr	r3, [r3, #8]
 800a834:	687a      	ldr	r2, [r7, #4]
 800a836:	7c12      	ldrb	r2, [r2, #16]
 800a838:	2108      	movs	r1, #8
 800a83a:	1879      	adds	r1, r7, r1
 800a83c:	0010      	movs	r0, r2
 800a83e:	4798      	blx	r3
 800a840:	0003      	movs	r3, r0
 800a842:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a844:	e0a1      	b.n	800a98a <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 800a846:	683a      	ldr	r2, [r7, #0]
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	0011      	movs	r1, r2
 800a84c:	0018      	movs	r0, r3
 800a84e:	f000 fb01 	bl	800ae54 <USBD_CtlError>
            err++;
 800a852:	210b      	movs	r1, #11
 800a854:	187b      	adds	r3, r7, r1
 800a856:	781a      	ldrb	r2, [r3, #0]
 800a858:	187b      	adds	r3, r7, r1
 800a85a:	3201      	adds	r2, #1
 800a85c:	701a      	strb	r2, [r3, #0]
          break;
 800a85e:	e094      	b.n	800a98a <USBD_GetDescriptor+0x262>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800a860:	687a      	ldr	r2, [r7, #4]
 800a862:	23ac      	movs	r3, #172	; 0xac
 800a864:	009b      	lsls	r3, r3, #2
 800a866:	58d3      	ldr	r3, [r2, r3]
 800a868:	68db      	ldr	r3, [r3, #12]
 800a86a:	2b00      	cmp	r3, #0
 800a86c:	d00d      	beq.n	800a88a <USBD_GetDescriptor+0x162>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800a86e:	687a      	ldr	r2, [r7, #4]
 800a870:	23ac      	movs	r3, #172	; 0xac
 800a872:	009b      	lsls	r3, r3, #2
 800a874:	58d3      	ldr	r3, [r2, r3]
 800a876:	68db      	ldr	r3, [r3, #12]
 800a878:	687a      	ldr	r2, [r7, #4]
 800a87a:	7c12      	ldrb	r2, [r2, #16]
 800a87c:	2108      	movs	r1, #8
 800a87e:	1879      	adds	r1, r7, r1
 800a880:	0010      	movs	r0, r2
 800a882:	4798      	blx	r3
 800a884:	0003      	movs	r3, r0
 800a886:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a888:	e07f      	b.n	800a98a <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 800a88a:	683a      	ldr	r2, [r7, #0]
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	0011      	movs	r1, r2
 800a890:	0018      	movs	r0, r3
 800a892:	f000 fadf 	bl	800ae54 <USBD_CtlError>
            err++;
 800a896:	210b      	movs	r1, #11
 800a898:	187b      	adds	r3, r7, r1
 800a89a:	781a      	ldrb	r2, [r3, #0]
 800a89c:	187b      	adds	r3, r7, r1
 800a89e:	3201      	adds	r2, #1
 800a8a0:	701a      	strb	r2, [r3, #0]
          break;
 800a8a2:	e072      	b.n	800a98a <USBD_GetDescriptor+0x262>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800a8a4:	687a      	ldr	r2, [r7, #4]
 800a8a6:	23ac      	movs	r3, #172	; 0xac
 800a8a8:	009b      	lsls	r3, r3, #2
 800a8aa:	58d3      	ldr	r3, [r2, r3]
 800a8ac:	691b      	ldr	r3, [r3, #16]
 800a8ae:	2b00      	cmp	r3, #0
 800a8b0:	d00d      	beq.n	800a8ce <USBD_GetDescriptor+0x1a6>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800a8b2:	687a      	ldr	r2, [r7, #4]
 800a8b4:	23ac      	movs	r3, #172	; 0xac
 800a8b6:	009b      	lsls	r3, r3, #2
 800a8b8:	58d3      	ldr	r3, [r2, r3]
 800a8ba:	691b      	ldr	r3, [r3, #16]
 800a8bc:	687a      	ldr	r2, [r7, #4]
 800a8be:	7c12      	ldrb	r2, [r2, #16]
 800a8c0:	2108      	movs	r1, #8
 800a8c2:	1879      	adds	r1, r7, r1
 800a8c4:	0010      	movs	r0, r2
 800a8c6:	4798      	blx	r3
 800a8c8:	0003      	movs	r3, r0
 800a8ca:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a8cc:	e05d      	b.n	800a98a <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 800a8ce:	683a      	ldr	r2, [r7, #0]
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	0011      	movs	r1, r2
 800a8d4:	0018      	movs	r0, r3
 800a8d6:	f000 fabd 	bl	800ae54 <USBD_CtlError>
            err++;
 800a8da:	210b      	movs	r1, #11
 800a8dc:	187b      	adds	r3, r7, r1
 800a8de:	781a      	ldrb	r2, [r3, #0]
 800a8e0:	187b      	adds	r3, r7, r1
 800a8e2:	3201      	adds	r2, #1
 800a8e4:	701a      	strb	r2, [r3, #0]
          break;
 800a8e6:	e050      	b.n	800a98a <USBD_GetDescriptor+0x262>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800a8e8:	687a      	ldr	r2, [r7, #4]
 800a8ea:	23ac      	movs	r3, #172	; 0xac
 800a8ec:	009b      	lsls	r3, r3, #2
 800a8ee:	58d3      	ldr	r3, [r2, r3]
 800a8f0:	695b      	ldr	r3, [r3, #20]
 800a8f2:	2b00      	cmp	r3, #0
 800a8f4:	d00d      	beq.n	800a912 <USBD_GetDescriptor+0x1ea>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800a8f6:	687a      	ldr	r2, [r7, #4]
 800a8f8:	23ac      	movs	r3, #172	; 0xac
 800a8fa:	009b      	lsls	r3, r3, #2
 800a8fc:	58d3      	ldr	r3, [r2, r3]
 800a8fe:	695b      	ldr	r3, [r3, #20]
 800a900:	687a      	ldr	r2, [r7, #4]
 800a902:	7c12      	ldrb	r2, [r2, #16]
 800a904:	2108      	movs	r1, #8
 800a906:	1879      	adds	r1, r7, r1
 800a908:	0010      	movs	r0, r2
 800a90a:	4798      	blx	r3
 800a90c:	0003      	movs	r3, r0
 800a90e:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a910:	e03b      	b.n	800a98a <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 800a912:	683a      	ldr	r2, [r7, #0]
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	0011      	movs	r1, r2
 800a918:	0018      	movs	r0, r3
 800a91a:	f000 fa9b 	bl	800ae54 <USBD_CtlError>
            err++;
 800a91e:	210b      	movs	r1, #11
 800a920:	187b      	adds	r3, r7, r1
 800a922:	781a      	ldrb	r2, [r3, #0]
 800a924:	187b      	adds	r3, r7, r1
 800a926:	3201      	adds	r2, #1
 800a928:	701a      	strb	r2, [r3, #0]
          break;
 800a92a:	e02e      	b.n	800a98a <USBD_GetDescriptor+0x262>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800a92c:	687a      	ldr	r2, [r7, #4]
 800a92e:	23ac      	movs	r3, #172	; 0xac
 800a930:	009b      	lsls	r3, r3, #2
 800a932:	58d3      	ldr	r3, [r2, r3]
 800a934:	699b      	ldr	r3, [r3, #24]
 800a936:	2b00      	cmp	r3, #0
 800a938:	d00d      	beq.n	800a956 <USBD_GetDescriptor+0x22e>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800a93a:	687a      	ldr	r2, [r7, #4]
 800a93c:	23ac      	movs	r3, #172	; 0xac
 800a93e:	009b      	lsls	r3, r3, #2
 800a940:	58d3      	ldr	r3, [r2, r3]
 800a942:	699b      	ldr	r3, [r3, #24]
 800a944:	687a      	ldr	r2, [r7, #4]
 800a946:	7c12      	ldrb	r2, [r2, #16]
 800a948:	2108      	movs	r1, #8
 800a94a:	1879      	adds	r1, r7, r1
 800a94c:	0010      	movs	r0, r2
 800a94e:	4798      	blx	r3
 800a950:	0003      	movs	r3, r0
 800a952:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a954:	e019      	b.n	800a98a <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 800a956:	683a      	ldr	r2, [r7, #0]
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	0011      	movs	r1, r2
 800a95c:	0018      	movs	r0, r3
 800a95e:	f000 fa79 	bl	800ae54 <USBD_CtlError>
            err++;
 800a962:	210b      	movs	r1, #11
 800a964:	187b      	adds	r3, r7, r1
 800a966:	781a      	ldrb	r2, [r3, #0]
 800a968:	187b      	adds	r3, r7, r1
 800a96a:	3201      	adds	r2, #1
 800a96c:	701a      	strb	r2, [r3, #0]
          break;
 800a96e:	e00c      	b.n	800a98a <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 800a970:	683a      	ldr	r2, [r7, #0]
 800a972:	687b      	ldr	r3, [r7, #4]
 800a974:	0011      	movs	r1, r2
 800a976:	0018      	movs	r0, r3
 800a978:	f000 fa6c 	bl	800ae54 <USBD_CtlError>
          err++;
 800a97c:	210b      	movs	r1, #11
 800a97e:	187b      	adds	r3, r7, r1
 800a980:	781a      	ldrb	r2, [r3, #0]
 800a982:	187b      	adds	r3, r7, r1
 800a984:	3201      	adds	r2, #1
 800a986:	701a      	strb	r2, [r3, #0]
#endif
      }
      break;
 800a988:	e04b      	b.n	800aa22 <USBD_GetDescriptor+0x2fa>
 800a98a:	e04a      	b.n	800aa22 <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	7c1b      	ldrb	r3, [r3, #16]
 800a990:	2b00      	cmp	r3, #0
 800a992:	d10b      	bne.n	800a9ac <USBD_GetDescriptor+0x284>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800a994:	687a      	ldr	r2, [r7, #4]
 800a996:	23ad      	movs	r3, #173	; 0xad
 800a998:	009b      	lsls	r3, r3, #2
 800a99a:	58d3      	ldr	r3, [r2, r3]
 800a99c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a99e:	2208      	movs	r2, #8
 800a9a0:	18ba      	adds	r2, r7, r2
 800a9a2:	0010      	movs	r0, r2
 800a9a4:	4798      	blx	r3
 800a9a6:	0003      	movs	r3, r0
 800a9a8:	60fb      	str	r3, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a9aa:	e03a      	b.n	800aa22 <USBD_GetDescriptor+0x2fa>
        USBD_CtlError(pdev, req);
 800a9ac:	683a      	ldr	r2, [r7, #0]
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	0011      	movs	r1, r2
 800a9b2:	0018      	movs	r0, r3
 800a9b4:	f000 fa4e 	bl	800ae54 <USBD_CtlError>
        err++;
 800a9b8:	210b      	movs	r1, #11
 800a9ba:	187b      	adds	r3, r7, r1
 800a9bc:	781a      	ldrb	r2, [r3, #0]
 800a9be:	187b      	adds	r3, r7, r1
 800a9c0:	3201      	adds	r2, #1
 800a9c2:	701a      	strb	r2, [r3, #0]
      break;
 800a9c4:	e02d      	b.n	800aa22 <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a9c6:	687b      	ldr	r3, [r7, #4]
 800a9c8:	7c1b      	ldrb	r3, [r3, #16]
 800a9ca:	2b00      	cmp	r3, #0
 800a9cc:	d10f      	bne.n	800a9ee <USBD_GetDescriptor+0x2c6>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800a9ce:	687a      	ldr	r2, [r7, #4]
 800a9d0:	23ad      	movs	r3, #173	; 0xad
 800a9d2:	009b      	lsls	r3, r3, #2
 800a9d4:	58d3      	ldr	r3, [r2, r3]
 800a9d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a9d8:	2208      	movs	r2, #8
 800a9da:	18ba      	adds	r2, r7, r2
 800a9dc:	0010      	movs	r0, r2
 800a9de:	4798      	blx	r3
 800a9e0:	0003      	movs	r3, r0
 800a9e2:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800a9e4:	68fb      	ldr	r3, [r7, #12]
 800a9e6:	3301      	adds	r3, #1
 800a9e8:	2207      	movs	r2, #7
 800a9ea:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a9ec:	e019      	b.n	800aa22 <USBD_GetDescriptor+0x2fa>
        USBD_CtlError(pdev, req);
 800a9ee:	683a      	ldr	r2, [r7, #0]
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	0011      	movs	r1, r2
 800a9f4:	0018      	movs	r0, r3
 800a9f6:	f000 fa2d 	bl	800ae54 <USBD_CtlError>
        err++;
 800a9fa:	210b      	movs	r1, #11
 800a9fc:	187b      	adds	r3, r7, r1
 800a9fe:	781a      	ldrb	r2, [r3, #0]
 800aa00:	187b      	adds	r3, r7, r1
 800aa02:	3201      	adds	r2, #1
 800aa04:	701a      	strb	r2, [r3, #0]
      break;
 800aa06:	e00c      	b.n	800aa22 <USBD_GetDescriptor+0x2fa>

    default:
      USBD_CtlError(pdev, req);
 800aa08:	683a      	ldr	r2, [r7, #0]
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	0011      	movs	r1, r2
 800aa0e:	0018      	movs	r0, r3
 800aa10:	f000 fa20 	bl	800ae54 <USBD_CtlError>
      err++;
 800aa14:	210b      	movs	r1, #11
 800aa16:	187b      	adds	r3, r7, r1
 800aa18:	781a      	ldrb	r2, [r3, #0]
 800aa1a:	187b      	adds	r3, r7, r1
 800aa1c:	3201      	adds	r2, #1
 800aa1e:	701a      	strb	r2, [r3, #0]
      break;
 800aa20:	46c0      	nop			; (mov r8, r8)
  }

  if (err != 0U)
 800aa22:	230b      	movs	r3, #11
 800aa24:	18fb      	adds	r3, r7, r3
 800aa26:	781b      	ldrb	r3, [r3, #0]
 800aa28:	2b00      	cmp	r3, #0
 800aa2a:	d127      	bne.n	800aa7c <USBD_GetDescriptor+0x354>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 800aa2c:	2108      	movs	r1, #8
 800aa2e:	187b      	adds	r3, r7, r1
 800aa30:	881b      	ldrh	r3, [r3, #0]
 800aa32:	2b00      	cmp	r3, #0
 800aa34:	d019      	beq.n	800aa6a <USBD_GetDescriptor+0x342>
 800aa36:	683b      	ldr	r3, [r7, #0]
 800aa38:	88db      	ldrh	r3, [r3, #6]
 800aa3a:	2b00      	cmp	r3, #0
 800aa3c:	d015      	beq.n	800aa6a <USBD_GetDescriptor+0x342>
    {
      len = MIN(len, req->wLength);
 800aa3e:	683b      	ldr	r3, [r7, #0]
 800aa40:	88da      	ldrh	r2, [r3, #6]
 800aa42:	187b      	adds	r3, r7, r1
 800aa44:	881b      	ldrh	r3, [r3, #0]
 800aa46:	1c18      	adds	r0, r3, #0
 800aa48:	1c11      	adds	r1, r2, #0
 800aa4a:	b28a      	uxth	r2, r1
 800aa4c:	b283      	uxth	r3, r0
 800aa4e:	429a      	cmp	r2, r3
 800aa50:	d900      	bls.n	800aa54 <USBD_GetDescriptor+0x32c>
 800aa52:	1c01      	adds	r1, r0, #0
 800aa54:	b28a      	uxth	r2, r1
 800aa56:	2108      	movs	r1, #8
 800aa58:	187b      	adds	r3, r7, r1
 800aa5a:	801a      	strh	r2, [r3, #0]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800aa5c:	187b      	adds	r3, r7, r1
 800aa5e:	881a      	ldrh	r2, [r3, #0]
 800aa60:	68f9      	ldr	r1, [r7, #12]
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	0018      	movs	r0, r3
 800aa66:	f000 fa73 	bl	800af50 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 800aa6a:	683b      	ldr	r3, [r7, #0]
 800aa6c:	88db      	ldrh	r3, [r3, #6]
 800aa6e:	2b00      	cmp	r3, #0
 800aa70:	d105      	bne.n	800aa7e <USBD_GetDescriptor+0x356>
    {
      (void)USBD_CtlSendStatus(pdev);
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	0018      	movs	r0, r3
 800aa76:	f000 fad5 	bl	800b024 <USBD_CtlSendStatus>
 800aa7a:	e000      	b.n	800aa7e <USBD_GetDescriptor+0x356>
    return;
 800aa7c:	46c0      	nop			; (mov r8, r8)
    }
  }
}
 800aa7e:	46bd      	mov	sp, r7
 800aa80:	b004      	add	sp, #16
 800aa82:	bd80      	pop	{r7, pc}
 800aa84:	0800c528 	.word	0x0800c528
 800aa88:	0800c548 	.word	0x0800c548

0800aa8c <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800aa8c:	b590      	push	{r4, r7, lr}
 800aa8e:	b085      	sub	sp, #20
 800aa90:	af00      	add	r7, sp, #0
 800aa92:	6078      	str	r0, [r7, #4]
 800aa94:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800aa96:	683b      	ldr	r3, [r7, #0]
 800aa98:	889b      	ldrh	r3, [r3, #4]
 800aa9a:	2b00      	cmp	r3, #0
 800aa9c:	d13d      	bne.n	800ab1a <USBD_SetAddress+0x8e>
 800aa9e:	683b      	ldr	r3, [r7, #0]
 800aaa0:	88db      	ldrh	r3, [r3, #6]
 800aaa2:	2b00      	cmp	r3, #0
 800aaa4:	d139      	bne.n	800ab1a <USBD_SetAddress+0x8e>
 800aaa6:	683b      	ldr	r3, [r7, #0]
 800aaa8:	885b      	ldrh	r3, [r3, #2]
 800aaaa:	2b7f      	cmp	r3, #127	; 0x7f
 800aaac:	d835      	bhi.n	800ab1a <USBD_SetAddress+0x8e>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800aaae:	683b      	ldr	r3, [r7, #0]
 800aab0:	885b      	ldrh	r3, [r3, #2]
 800aab2:	b2da      	uxtb	r2, r3
 800aab4:	230f      	movs	r3, #15
 800aab6:	18fb      	adds	r3, r7, r3
 800aab8:	217f      	movs	r1, #127	; 0x7f
 800aaba:	400a      	ands	r2, r1
 800aabc:	701a      	strb	r2, [r3, #0]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800aabe:	687a      	ldr	r2, [r7, #4]
 800aac0:	23a7      	movs	r3, #167	; 0xa7
 800aac2:	009b      	lsls	r3, r3, #2
 800aac4:	5cd3      	ldrb	r3, [r2, r3]
 800aac6:	2b03      	cmp	r3, #3
 800aac8:	d106      	bne.n	800aad8 <USBD_SetAddress+0x4c>
    {
      USBD_CtlError(pdev, req);
 800aaca:	683a      	ldr	r2, [r7, #0]
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	0011      	movs	r1, r2
 800aad0:	0018      	movs	r0, r3
 800aad2:	f000 f9bf 	bl	800ae54 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800aad6:	e027      	b.n	800ab28 <USBD_SetAddress+0x9c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	240f      	movs	r4, #15
 800aadc:	193a      	adds	r2, r7, r4
 800aade:	4914      	ldr	r1, [pc, #80]	; (800ab30 <USBD_SetAddress+0xa4>)
 800aae0:	7812      	ldrb	r2, [r2, #0]
 800aae2:	545a      	strb	r2, [r3, r1]
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800aae4:	193b      	adds	r3, r7, r4
 800aae6:	781a      	ldrb	r2, [r3, #0]
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	0011      	movs	r1, r2
 800aaec:	0018      	movs	r0, r3
 800aaee:	f000 ff27 	bl	800b940 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800aaf2:	687b      	ldr	r3, [r7, #4]
 800aaf4:	0018      	movs	r0, r3
 800aaf6:	f000 fa95 	bl	800b024 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800aafa:	193b      	adds	r3, r7, r4
 800aafc:	781b      	ldrb	r3, [r3, #0]
 800aafe:	2b00      	cmp	r3, #0
 800ab00:	d005      	beq.n	800ab0e <USBD_SetAddress+0x82>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800ab02:	687a      	ldr	r2, [r7, #4]
 800ab04:	23a7      	movs	r3, #167	; 0xa7
 800ab06:	009b      	lsls	r3, r3, #2
 800ab08:	2102      	movs	r1, #2
 800ab0a:	54d1      	strb	r1, [r2, r3]
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ab0c:	e00c      	b.n	800ab28 <USBD_SetAddress+0x9c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800ab0e:	687a      	ldr	r2, [r7, #4]
 800ab10:	23a7      	movs	r3, #167	; 0xa7
 800ab12:	009b      	lsls	r3, r3, #2
 800ab14:	2101      	movs	r1, #1
 800ab16:	54d1      	strb	r1, [r2, r3]
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ab18:	e006      	b.n	800ab28 <USBD_SetAddress+0x9c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800ab1a:	683a      	ldr	r2, [r7, #0]
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	0011      	movs	r1, r2
 800ab20:	0018      	movs	r0, r3
 800ab22:	f000 f997 	bl	800ae54 <USBD_CtlError>
  }
}
 800ab26:	46c0      	nop			; (mov r8, r8)
 800ab28:	46c0      	nop			; (mov r8, r8)
 800ab2a:	46bd      	mov	sp, r7
 800ab2c:	b005      	add	sp, #20
 800ab2e:	bd90      	pop	{r4, r7, pc}
 800ab30:	0000029e 	.word	0x0000029e

0800ab34 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ab34:	b580      	push	{r7, lr}
 800ab36:	b082      	sub	sp, #8
 800ab38:	af00      	add	r7, sp, #0
 800ab3a:	6078      	str	r0, [r7, #4]
 800ab3c:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800ab3e:	683b      	ldr	r3, [r7, #0]
 800ab40:	885b      	ldrh	r3, [r3, #2]
 800ab42:	b2da      	uxtb	r2, r3
 800ab44:	4b4c      	ldr	r3, [pc, #304]	; (800ac78 <USBD_SetConfig+0x144>)
 800ab46:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800ab48:	4b4b      	ldr	r3, [pc, #300]	; (800ac78 <USBD_SetConfig+0x144>)
 800ab4a:	781b      	ldrb	r3, [r3, #0]
 800ab4c:	2b01      	cmp	r3, #1
 800ab4e:	d906      	bls.n	800ab5e <USBD_SetConfig+0x2a>
  {
    USBD_CtlError(pdev, req);
 800ab50:	683a      	ldr	r2, [r7, #0]
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	0011      	movs	r1, r2
 800ab56:	0018      	movs	r0, r3
 800ab58:	f000 f97c 	bl	800ae54 <USBD_CtlError>
 800ab5c:	e088      	b.n	800ac70 <USBD_SetConfig+0x13c>
  }
  else
  {
    switch (pdev->dev_state)
 800ab5e:	687a      	ldr	r2, [r7, #4]
 800ab60:	23a7      	movs	r3, #167	; 0xa7
 800ab62:	009b      	lsls	r3, r3, #2
 800ab64:	5cd3      	ldrb	r3, [r2, r3]
 800ab66:	2b02      	cmp	r3, #2
 800ab68:	d002      	beq.n	800ab70 <USBD_SetConfig+0x3c>
 800ab6a:	2b03      	cmp	r3, #3
 800ab6c:	d029      	beq.n	800abc2 <USBD_SetConfig+0x8e>
 800ab6e:	e071      	b.n	800ac54 <USBD_SetConfig+0x120>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 800ab70:	4b41      	ldr	r3, [pc, #260]	; (800ac78 <USBD_SetConfig+0x144>)
 800ab72:	781b      	ldrb	r3, [r3, #0]
 800ab74:	2b00      	cmp	r3, #0
 800ab76:	d01f      	beq.n	800abb8 <USBD_SetConfig+0x84>
        {
          pdev->dev_config = cfgidx;
 800ab78:	4b3f      	ldr	r3, [pc, #252]	; (800ac78 <USBD_SetConfig+0x144>)
 800ab7a:	781b      	ldrb	r3, [r3, #0]
 800ab7c:	001a      	movs	r2, r3
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800ab82:	687a      	ldr	r2, [r7, #4]
 800ab84:	23a7      	movs	r3, #167	; 0xa7
 800ab86:	009b      	lsls	r3, r3, #2
 800ab88:	2103      	movs	r1, #3
 800ab8a:	54d1      	strb	r1, [r2, r3]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800ab8c:	4b3a      	ldr	r3, [pc, #232]	; (800ac78 <USBD_SetConfig+0x144>)
 800ab8e:	781a      	ldrb	r2, [r3, #0]
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	0011      	movs	r1, r2
 800ab94:	0018      	movs	r0, r3
 800ab96:	f7ff f8c6 	bl	8009d26 <USBD_SetClassConfig>
 800ab9a:	0003      	movs	r3, r0
 800ab9c:	2b02      	cmp	r3, #2
 800ab9e:	d106      	bne.n	800abae <USBD_SetConfig+0x7a>
          {
            USBD_CtlError(pdev, req);
 800aba0:	683a      	ldr	r2, [r7, #0]
 800aba2:	687b      	ldr	r3, [r7, #4]
 800aba4:	0011      	movs	r1, r2
 800aba6:	0018      	movs	r0, r3
 800aba8:	f000 f954 	bl	800ae54 <USBD_CtlError>
            return;
 800abac:	e060      	b.n	800ac70 <USBD_SetConfig+0x13c>
          }
          USBD_CtlSendStatus(pdev);
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	0018      	movs	r0, r3
 800abb2:	f000 fa37 	bl	800b024 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800abb6:	e05b      	b.n	800ac70 <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	0018      	movs	r0, r3
 800abbc:	f000 fa32 	bl	800b024 <USBD_CtlSendStatus>
        break;
 800abc0:	e056      	b.n	800ac70 <USBD_SetConfig+0x13c>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 800abc2:	4b2d      	ldr	r3, [pc, #180]	; (800ac78 <USBD_SetConfig+0x144>)
 800abc4:	781b      	ldrb	r3, [r3, #0]
 800abc6:	2b00      	cmp	r3, #0
 800abc8:	d115      	bne.n	800abf6 <USBD_SetConfig+0xc2>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800abca:	687a      	ldr	r2, [r7, #4]
 800abcc:	23a7      	movs	r3, #167	; 0xa7
 800abce:	009b      	lsls	r3, r3, #2
 800abd0:	2102      	movs	r1, #2
 800abd2:	54d1      	strb	r1, [r2, r3]
          pdev->dev_config = cfgidx;
 800abd4:	4b28      	ldr	r3, [pc, #160]	; (800ac78 <USBD_SetConfig+0x144>)
 800abd6:	781b      	ldrb	r3, [r3, #0]
 800abd8:	001a      	movs	r2, r3
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 800abde:	4b26      	ldr	r3, [pc, #152]	; (800ac78 <USBD_SetConfig+0x144>)
 800abe0:	781a      	ldrb	r2, [r3, #0]
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	0011      	movs	r1, r2
 800abe6:	0018      	movs	r0, r3
 800abe8:	f7ff f8c4 	bl	8009d74 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	0018      	movs	r0, r3
 800abf0:	f000 fa18 	bl	800b024 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800abf4:	e03c      	b.n	800ac70 <USBD_SetConfig+0x13c>
        else if (cfgidx != pdev->dev_config)
 800abf6:	4b20      	ldr	r3, [pc, #128]	; (800ac78 <USBD_SetConfig+0x144>)
 800abf8:	781b      	ldrb	r3, [r3, #0]
 800abfa:	001a      	movs	r2, r3
 800abfc:	687b      	ldr	r3, [r7, #4]
 800abfe:	685b      	ldr	r3, [r3, #4]
 800ac00:	429a      	cmp	r2, r3
 800ac02:	d022      	beq.n	800ac4a <USBD_SetConfig+0x116>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	685b      	ldr	r3, [r3, #4]
 800ac08:	b2da      	uxtb	r2, r3
 800ac0a:	687b      	ldr	r3, [r7, #4]
 800ac0c:	0011      	movs	r1, r2
 800ac0e:	0018      	movs	r0, r3
 800ac10:	f7ff f8b0 	bl	8009d74 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800ac14:	4b18      	ldr	r3, [pc, #96]	; (800ac78 <USBD_SetConfig+0x144>)
 800ac16:	781b      	ldrb	r3, [r3, #0]
 800ac18:	001a      	movs	r2, r3
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800ac1e:	4b16      	ldr	r3, [pc, #88]	; (800ac78 <USBD_SetConfig+0x144>)
 800ac20:	781a      	ldrb	r2, [r3, #0]
 800ac22:	687b      	ldr	r3, [r7, #4]
 800ac24:	0011      	movs	r1, r2
 800ac26:	0018      	movs	r0, r3
 800ac28:	f7ff f87d 	bl	8009d26 <USBD_SetClassConfig>
 800ac2c:	0003      	movs	r3, r0
 800ac2e:	2b02      	cmp	r3, #2
 800ac30:	d106      	bne.n	800ac40 <USBD_SetConfig+0x10c>
            USBD_CtlError(pdev, req);
 800ac32:	683a      	ldr	r2, [r7, #0]
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	0011      	movs	r1, r2
 800ac38:	0018      	movs	r0, r3
 800ac3a:	f000 f90b 	bl	800ae54 <USBD_CtlError>
            return;
 800ac3e:	e017      	b.n	800ac70 <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 800ac40:	687b      	ldr	r3, [r7, #4]
 800ac42:	0018      	movs	r0, r3
 800ac44:	f000 f9ee 	bl	800b024 <USBD_CtlSendStatus>
        break;
 800ac48:	e012      	b.n	800ac70 <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 800ac4a:	687b      	ldr	r3, [r7, #4]
 800ac4c:	0018      	movs	r0, r3
 800ac4e:	f000 f9e9 	bl	800b024 <USBD_CtlSendStatus>
        break;
 800ac52:	e00d      	b.n	800ac70 <USBD_SetConfig+0x13c>

      default:
        USBD_CtlError(pdev, req);
 800ac54:	683a      	ldr	r2, [r7, #0]
 800ac56:	687b      	ldr	r3, [r7, #4]
 800ac58:	0011      	movs	r1, r2
 800ac5a:	0018      	movs	r0, r3
 800ac5c:	f000 f8fa 	bl	800ae54 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 800ac60:	4b05      	ldr	r3, [pc, #20]	; (800ac78 <USBD_SetConfig+0x144>)
 800ac62:	781a      	ldrb	r2, [r3, #0]
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	0011      	movs	r1, r2
 800ac68:	0018      	movs	r0, r3
 800ac6a:	f7ff f883 	bl	8009d74 <USBD_ClrClassConfig>
        break;
 800ac6e:	46c0      	nop			; (mov r8, r8)
    }
  }
}
 800ac70:	46bd      	mov	sp, r7
 800ac72:	b002      	add	sp, #8
 800ac74:	bd80      	pop	{r7, pc}
 800ac76:	46c0      	nop			; (mov r8, r8)
 800ac78:	20000218 	.word	0x20000218

0800ac7c <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ac7c:	b580      	push	{r7, lr}
 800ac7e:	b082      	sub	sp, #8
 800ac80:	af00      	add	r7, sp, #0
 800ac82:	6078      	str	r0, [r7, #4]
 800ac84:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800ac86:	683b      	ldr	r3, [r7, #0]
 800ac88:	88db      	ldrh	r3, [r3, #6]
 800ac8a:	2b01      	cmp	r3, #1
 800ac8c:	d006      	beq.n	800ac9c <USBD_GetConfig+0x20>
  {
    USBD_CtlError(pdev, req);
 800ac8e:	683a      	ldr	r2, [r7, #0]
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	0011      	movs	r1, r2
 800ac94:	0018      	movs	r0, r3
 800ac96:	f000 f8dd 	bl	800ae54 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800ac9a:	e026      	b.n	800acea <USBD_GetConfig+0x6e>
    switch (pdev->dev_state)
 800ac9c:	687a      	ldr	r2, [r7, #4]
 800ac9e:	23a7      	movs	r3, #167	; 0xa7
 800aca0:	009b      	lsls	r3, r3, #2
 800aca2:	5cd3      	ldrb	r3, [r2, r3]
 800aca4:	2b02      	cmp	r3, #2
 800aca6:	dc02      	bgt.n	800acae <USBD_GetConfig+0x32>
 800aca8:	2b00      	cmp	r3, #0
 800acaa:	dc03      	bgt.n	800acb4 <USBD_GetConfig+0x38>
 800acac:	e016      	b.n	800acdc <USBD_GetConfig+0x60>
 800acae:	2b03      	cmp	r3, #3
 800acb0:	d00c      	beq.n	800accc <USBD_GetConfig+0x50>
 800acb2:	e013      	b.n	800acdc <USBD_GetConfig+0x60>
        pdev->dev_default_config = 0U;
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	2200      	movs	r2, #0
 800acb8:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	3308      	adds	r3, #8
 800acbe:	0019      	movs	r1, r3
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	2201      	movs	r2, #1
 800acc4:	0018      	movs	r0, r3
 800acc6:	f000 f943 	bl	800af50 <USBD_CtlSendData>
        break;
 800acca:	e00e      	b.n	800acea <USBD_GetConfig+0x6e>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	1d19      	adds	r1, r3, #4
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	2201      	movs	r2, #1
 800acd4:	0018      	movs	r0, r3
 800acd6:	f000 f93b 	bl	800af50 <USBD_CtlSendData>
        break;
 800acda:	e006      	b.n	800acea <USBD_GetConfig+0x6e>
        USBD_CtlError(pdev, req);
 800acdc:	683a      	ldr	r2, [r7, #0]
 800acde:	687b      	ldr	r3, [r7, #4]
 800ace0:	0011      	movs	r1, r2
 800ace2:	0018      	movs	r0, r3
 800ace4:	f000 f8b6 	bl	800ae54 <USBD_CtlError>
        break;
 800ace8:	46c0      	nop			; (mov r8, r8)
}
 800acea:	46c0      	nop			; (mov r8, r8)
 800acec:	46bd      	mov	sp, r7
 800acee:	b002      	add	sp, #8
 800acf0:	bd80      	pop	{r7, pc}

0800acf2 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800acf2:	b580      	push	{r7, lr}
 800acf4:	b082      	sub	sp, #8
 800acf6:	af00      	add	r7, sp, #0
 800acf8:	6078      	str	r0, [r7, #4]
 800acfa:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800acfc:	687a      	ldr	r2, [r7, #4]
 800acfe:	23a7      	movs	r3, #167	; 0xa7
 800ad00:	009b      	lsls	r3, r3, #2
 800ad02:	5cd3      	ldrb	r3, [r2, r3]
 800ad04:	3b01      	subs	r3, #1
 800ad06:	2b02      	cmp	r3, #2
 800ad08:	d822      	bhi.n	800ad50 <USBD_GetStatus+0x5e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800ad0a:	683b      	ldr	r3, [r7, #0]
 800ad0c:	88db      	ldrh	r3, [r3, #6]
 800ad0e:	2b02      	cmp	r3, #2
 800ad10:	d006      	beq.n	800ad20 <USBD_GetStatus+0x2e>
      {
        USBD_CtlError(pdev, req);
 800ad12:	683a      	ldr	r2, [r7, #0]
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	0011      	movs	r1, r2
 800ad18:	0018      	movs	r0, r3
 800ad1a:	f000 f89b 	bl	800ae54 <USBD_CtlError>
        break;
 800ad1e:	e01e      	b.n	800ad5e <USBD_GetStatus+0x6c>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	2201      	movs	r2, #1
 800ad24:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 800ad26:	687a      	ldr	r2, [r7, #4]
 800ad28:	23a9      	movs	r3, #169	; 0xa9
 800ad2a:	009b      	lsls	r3, r3, #2
 800ad2c:	58d3      	ldr	r3, [r2, r3]
 800ad2e:	2b00      	cmp	r3, #0
 800ad30:	d005      	beq.n	800ad3e <USBD_GetStatus+0x4c>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800ad32:	687b      	ldr	r3, [r7, #4]
 800ad34:	68db      	ldr	r3, [r3, #12]
 800ad36:	2202      	movs	r2, #2
 800ad38:	431a      	orrs	r2, r3
 800ad3a:	687b      	ldr	r3, [r7, #4]
 800ad3c:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	330c      	adds	r3, #12
 800ad42:	0019      	movs	r1, r3
 800ad44:	687b      	ldr	r3, [r7, #4]
 800ad46:	2202      	movs	r2, #2
 800ad48:	0018      	movs	r0, r3
 800ad4a:	f000 f901 	bl	800af50 <USBD_CtlSendData>
      break;
 800ad4e:	e006      	b.n	800ad5e <USBD_GetStatus+0x6c>

    default:
      USBD_CtlError(pdev, req);
 800ad50:	683a      	ldr	r2, [r7, #0]
 800ad52:	687b      	ldr	r3, [r7, #4]
 800ad54:	0011      	movs	r1, r2
 800ad56:	0018      	movs	r0, r3
 800ad58:	f000 f87c 	bl	800ae54 <USBD_CtlError>
      break;
 800ad5c:	46c0      	nop			; (mov r8, r8)
  }
}
 800ad5e:	46c0      	nop			; (mov r8, r8)
 800ad60:	46bd      	mov	sp, r7
 800ad62:	b002      	add	sp, #8
 800ad64:	bd80      	pop	{r7, pc}

0800ad66 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800ad66:	b580      	push	{r7, lr}
 800ad68:	b082      	sub	sp, #8
 800ad6a:	af00      	add	r7, sp, #0
 800ad6c:	6078      	str	r0, [r7, #4]
 800ad6e:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800ad70:	683b      	ldr	r3, [r7, #0]
 800ad72:	885b      	ldrh	r3, [r3, #2]
 800ad74:	2b01      	cmp	r3, #1
 800ad76:	d108      	bne.n	800ad8a <USBD_SetFeature+0x24>
  {
    pdev->dev_remote_wakeup = 1U;
 800ad78:	687a      	ldr	r2, [r7, #4]
 800ad7a:	23a9      	movs	r3, #169	; 0xa9
 800ad7c:	009b      	lsls	r3, r3, #2
 800ad7e:	2101      	movs	r1, #1
 800ad80:	50d1      	str	r1, [r2, r3]
    USBD_CtlSendStatus(pdev);
 800ad82:	687b      	ldr	r3, [r7, #4]
 800ad84:	0018      	movs	r0, r3
 800ad86:	f000 f94d 	bl	800b024 <USBD_CtlSendStatus>
  }
}
 800ad8a:	46c0      	nop			; (mov r8, r8)
 800ad8c:	46bd      	mov	sp, r7
 800ad8e:	b002      	add	sp, #8
 800ad90:	bd80      	pop	{r7, pc}

0800ad92 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800ad92:	b580      	push	{r7, lr}
 800ad94:	b082      	sub	sp, #8
 800ad96:	af00      	add	r7, sp, #0
 800ad98:	6078      	str	r0, [r7, #4]
 800ad9a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800ad9c:	687a      	ldr	r2, [r7, #4]
 800ad9e:	23a7      	movs	r3, #167	; 0xa7
 800ada0:	009b      	lsls	r3, r3, #2
 800ada2:	5cd3      	ldrb	r3, [r2, r3]
 800ada4:	3b01      	subs	r3, #1
 800ada6:	2b02      	cmp	r3, #2
 800ada8:	d80d      	bhi.n	800adc6 <USBD_ClrFeature+0x34>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800adaa:	683b      	ldr	r3, [r7, #0]
 800adac:	885b      	ldrh	r3, [r3, #2]
 800adae:	2b01      	cmp	r3, #1
 800adb0:	d110      	bne.n	800add4 <USBD_ClrFeature+0x42>
      {
        pdev->dev_remote_wakeup = 0U;
 800adb2:	687a      	ldr	r2, [r7, #4]
 800adb4:	23a9      	movs	r3, #169	; 0xa9
 800adb6:	009b      	lsls	r3, r3, #2
 800adb8:	2100      	movs	r1, #0
 800adba:	50d1      	str	r1, [r2, r3]
        USBD_CtlSendStatus(pdev);
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	0018      	movs	r0, r3
 800adc0:	f000 f930 	bl	800b024 <USBD_CtlSendStatus>
      }
      break;
 800adc4:	e006      	b.n	800add4 <USBD_ClrFeature+0x42>

    default:
      USBD_CtlError(pdev, req);
 800adc6:	683a      	ldr	r2, [r7, #0]
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	0011      	movs	r1, r2
 800adcc:	0018      	movs	r0, r3
 800adce:	f000 f841 	bl	800ae54 <USBD_CtlError>
      break;
 800add2:	e000      	b.n	800add6 <USBD_ClrFeature+0x44>
      break;
 800add4:	46c0      	nop			; (mov r8, r8)
  }
}
 800add6:	46c0      	nop			; (mov r8, r8)
 800add8:	46bd      	mov	sp, r7
 800adda:	b002      	add	sp, #8
 800addc:	bd80      	pop	{r7, pc}

0800adde <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800adde:	b580      	push	{r7, lr}
 800ade0:	b082      	sub	sp, #8
 800ade2:	af00      	add	r7, sp, #0
 800ade4:	6078      	str	r0, [r7, #4]
 800ade6:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 800ade8:	683b      	ldr	r3, [r7, #0]
 800adea:	781a      	ldrb	r2, [r3, #0]
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 800adf0:	683b      	ldr	r3, [r7, #0]
 800adf2:	785a      	ldrb	r2, [r3, #1]
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 800adf8:	683b      	ldr	r3, [r7, #0]
 800adfa:	3302      	adds	r3, #2
 800adfc:	781b      	ldrb	r3, [r3, #0]
 800adfe:	b29a      	uxth	r2, r3
 800ae00:	683b      	ldr	r3, [r7, #0]
 800ae02:	3303      	adds	r3, #3
 800ae04:	781b      	ldrb	r3, [r3, #0]
 800ae06:	b29b      	uxth	r3, r3
 800ae08:	021b      	lsls	r3, r3, #8
 800ae0a:	b29b      	uxth	r3, r3
 800ae0c:	18d3      	adds	r3, r2, r3
 800ae0e:	b29a      	uxth	r2, r3
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 800ae14:	683b      	ldr	r3, [r7, #0]
 800ae16:	3304      	adds	r3, #4
 800ae18:	781b      	ldrb	r3, [r3, #0]
 800ae1a:	b29a      	uxth	r2, r3
 800ae1c:	683b      	ldr	r3, [r7, #0]
 800ae1e:	3305      	adds	r3, #5
 800ae20:	781b      	ldrb	r3, [r3, #0]
 800ae22:	b29b      	uxth	r3, r3
 800ae24:	021b      	lsls	r3, r3, #8
 800ae26:	b29b      	uxth	r3, r3
 800ae28:	18d3      	adds	r3, r2, r3
 800ae2a:	b29a      	uxth	r2, r3
 800ae2c:	687b      	ldr	r3, [r7, #4]
 800ae2e:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 800ae30:	683b      	ldr	r3, [r7, #0]
 800ae32:	3306      	adds	r3, #6
 800ae34:	781b      	ldrb	r3, [r3, #0]
 800ae36:	b29a      	uxth	r2, r3
 800ae38:	683b      	ldr	r3, [r7, #0]
 800ae3a:	3307      	adds	r3, #7
 800ae3c:	781b      	ldrb	r3, [r3, #0]
 800ae3e:	b29b      	uxth	r3, r3
 800ae40:	021b      	lsls	r3, r3, #8
 800ae42:	b29b      	uxth	r3, r3
 800ae44:	18d3      	adds	r3, r2, r3
 800ae46:	b29a      	uxth	r2, r3
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	80da      	strh	r2, [r3, #6]

}
 800ae4c:	46c0      	nop			; (mov r8, r8)
 800ae4e:	46bd      	mov	sp, r7
 800ae50:	b002      	add	sp, #8
 800ae52:	bd80      	pop	{r7, pc}

0800ae54 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 800ae54:	b580      	push	{r7, lr}
 800ae56:	b082      	sub	sp, #8
 800ae58:	af00      	add	r7, sp, #0
 800ae5a:	6078      	str	r0, [r7, #4]
 800ae5c:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 800ae5e:	687b      	ldr	r3, [r7, #4]
 800ae60:	2180      	movs	r1, #128	; 0x80
 800ae62:	0018      	movs	r0, r3
 800ae64:	f000 fce5 	bl	800b832 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	2100      	movs	r1, #0
 800ae6c:	0018      	movs	r0, r3
 800ae6e:	f000 fce0 	bl	800b832 <USBD_LL_StallEP>
}
 800ae72:	46c0      	nop			; (mov r8, r8)
 800ae74:	46bd      	mov	sp, r7
 800ae76:	b002      	add	sp, #8
 800ae78:	bd80      	pop	{r7, pc}

0800ae7a <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800ae7a:	b590      	push	{r4, r7, lr}
 800ae7c:	b087      	sub	sp, #28
 800ae7e:	af00      	add	r7, sp, #0
 800ae80:	60f8      	str	r0, [r7, #12]
 800ae82:	60b9      	str	r1, [r7, #8]
 800ae84:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800ae86:	2417      	movs	r4, #23
 800ae88:	193b      	adds	r3, r7, r4
 800ae8a:	2200      	movs	r2, #0
 800ae8c:	701a      	strb	r2, [r3, #0]

  if (desc != NULL)
 800ae8e:	68fb      	ldr	r3, [r7, #12]
 800ae90:	2b00      	cmp	r3, #0
 800ae92:	d03c      	beq.n	800af0e <USBD_GetString+0x94>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800ae94:	68fb      	ldr	r3, [r7, #12]
 800ae96:	0018      	movs	r0, r3
 800ae98:	f000 f83d 	bl	800af16 <USBD_GetLen>
 800ae9c:	0003      	movs	r3, r0
 800ae9e:	3301      	adds	r3, #1
 800aea0:	b29b      	uxth	r3, r3
 800aea2:	18db      	adds	r3, r3, r3
 800aea4:	b29a      	uxth	r2, r3
 800aea6:	687b      	ldr	r3, [r7, #4]
 800aea8:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800aeaa:	193b      	adds	r3, r7, r4
 800aeac:	781b      	ldrb	r3, [r3, #0]
 800aeae:	193a      	adds	r2, r7, r4
 800aeb0:	1c59      	adds	r1, r3, #1
 800aeb2:	7011      	strb	r1, [r2, #0]
 800aeb4:	001a      	movs	r2, r3
 800aeb6:	68bb      	ldr	r3, [r7, #8]
 800aeb8:	189b      	adds	r3, r3, r2
 800aeba:	687a      	ldr	r2, [r7, #4]
 800aebc:	7812      	ldrb	r2, [r2, #0]
 800aebe:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800aec0:	193b      	adds	r3, r7, r4
 800aec2:	781b      	ldrb	r3, [r3, #0]
 800aec4:	193a      	adds	r2, r7, r4
 800aec6:	1c59      	adds	r1, r3, #1
 800aec8:	7011      	strb	r1, [r2, #0]
 800aeca:	001a      	movs	r2, r3
 800aecc:	68bb      	ldr	r3, [r7, #8]
 800aece:	189b      	adds	r3, r3, r2
 800aed0:	2203      	movs	r2, #3
 800aed2:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800aed4:	e017      	b.n	800af06 <USBD_GetString+0x8c>
    {
      unicode[idx++] = *desc++;
 800aed6:	68fb      	ldr	r3, [r7, #12]
 800aed8:	1c5a      	adds	r2, r3, #1
 800aeda:	60fa      	str	r2, [r7, #12]
 800aedc:	2417      	movs	r4, #23
 800aede:	193a      	adds	r2, r7, r4
 800aee0:	7812      	ldrb	r2, [r2, #0]
 800aee2:	1939      	adds	r1, r7, r4
 800aee4:	1c50      	adds	r0, r2, #1
 800aee6:	7008      	strb	r0, [r1, #0]
 800aee8:	0011      	movs	r1, r2
 800aeea:	68ba      	ldr	r2, [r7, #8]
 800aeec:	1852      	adds	r2, r2, r1
 800aeee:	781b      	ldrb	r3, [r3, #0]
 800aef0:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800aef2:	193b      	adds	r3, r7, r4
 800aef4:	781b      	ldrb	r3, [r3, #0]
 800aef6:	193a      	adds	r2, r7, r4
 800aef8:	1c59      	adds	r1, r3, #1
 800aefa:	7011      	strb	r1, [r2, #0]
 800aefc:	001a      	movs	r2, r3
 800aefe:	68bb      	ldr	r3, [r7, #8]
 800af00:	189b      	adds	r3, r3, r2
 800af02:	2200      	movs	r2, #0
 800af04:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800af06:	68fb      	ldr	r3, [r7, #12]
 800af08:	781b      	ldrb	r3, [r3, #0]
 800af0a:	2b00      	cmp	r3, #0
 800af0c:	d1e3      	bne.n	800aed6 <USBD_GetString+0x5c>
    }
  }
}
 800af0e:	46c0      	nop			; (mov r8, r8)
 800af10:	46bd      	mov	sp, r7
 800af12:	b007      	add	sp, #28
 800af14:	bd90      	pop	{r4, r7, pc}

0800af16 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800af16:	b580      	push	{r7, lr}
 800af18:	b084      	sub	sp, #16
 800af1a:	af00      	add	r7, sp, #0
 800af1c:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800af1e:	230f      	movs	r3, #15
 800af20:	18fb      	adds	r3, r7, r3
 800af22:	2200      	movs	r2, #0
 800af24:	701a      	strb	r2, [r3, #0]

  while (*buf != '\0')
 800af26:	e008      	b.n	800af3a <USBD_GetLen+0x24>
  {
    len++;
 800af28:	210f      	movs	r1, #15
 800af2a:	187b      	adds	r3, r7, r1
 800af2c:	781a      	ldrb	r2, [r3, #0]
 800af2e:	187b      	adds	r3, r7, r1
 800af30:	3201      	adds	r2, #1
 800af32:	701a      	strb	r2, [r3, #0]
    buf++;
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	3301      	adds	r3, #1
 800af38:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 800af3a:	687b      	ldr	r3, [r7, #4]
 800af3c:	781b      	ldrb	r3, [r3, #0]
 800af3e:	2b00      	cmp	r3, #0
 800af40:	d1f2      	bne.n	800af28 <USBD_GetLen+0x12>
  }

  return len;
 800af42:	230f      	movs	r3, #15
 800af44:	18fb      	adds	r3, r7, r3
 800af46:	781b      	ldrb	r3, [r3, #0]
}
 800af48:	0018      	movs	r0, r3
 800af4a:	46bd      	mov	sp, r7
 800af4c:	b004      	add	sp, #16
 800af4e:	bd80      	pop	{r7, pc}

0800af50 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 800af50:	b580      	push	{r7, lr}
 800af52:	b084      	sub	sp, #16
 800af54:	af00      	add	r7, sp, #0
 800af56:	60f8      	str	r0, [r7, #12]
 800af58:	60b9      	str	r1, [r7, #8]
 800af5a:	1dbb      	adds	r3, r7, #6
 800af5c:	801a      	strh	r2, [r3, #0]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800af5e:	68fa      	ldr	r2, [r7, #12]
 800af60:	23a5      	movs	r3, #165	; 0xa5
 800af62:	009b      	lsls	r3, r3, #2
 800af64:	2102      	movs	r1, #2
 800af66:	50d1      	str	r1, [r2, r3]
  pdev->ep_in[0].total_length = len;
 800af68:	1dbb      	adds	r3, r7, #6
 800af6a:	881a      	ldrh	r2, [r3, #0]
 800af6c:	68fb      	ldr	r3, [r7, #12]
 800af6e:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800af70:	1dbb      	adds	r3, r7, #6
 800af72:	881a      	ldrh	r2, [r3, #0]
 800af74:	68fb      	ldr	r3, [r7, #12]
 800af76:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800af78:	1dbb      	adds	r3, r7, #6
 800af7a:	881b      	ldrh	r3, [r3, #0]
 800af7c:	68ba      	ldr	r2, [r7, #8]
 800af7e:	68f8      	ldr	r0, [r7, #12]
 800af80:	2100      	movs	r1, #0
 800af82:	f000 fd08 	bl	800b996 <USBD_LL_Transmit>

  return USBD_OK;
 800af86:	2300      	movs	r3, #0
}
 800af88:	0018      	movs	r0, r3
 800af8a:	46bd      	mov	sp, r7
 800af8c:	b004      	add	sp, #16
 800af8e:	bd80      	pop	{r7, pc}

0800af90 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 800af90:	b580      	push	{r7, lr}
 800af92:	b084      	sub	sp, #16
 800af94:	af00      	add	r7, sp, #0
 800af96:	60f8      	str	r0, [r7, #12]
 800af98:	60b9      	str	r1, [r7, #8]
 800af9a:	1dbb      	adds	r3, r7, #6
 800af9c:	801a      	strh	r2, [r3, #0]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800af9e:	1dbb      	adds	r3, r7, #6
 800afa0:	881b      	ldrh	r3, [r3, #0]
 800afa2:	68ba      	ldr	r2, [r7, #8]
 800afa4:	68f8      	ldr	r0, [r7, #12]
 800afa6:	2100      	movs	r1, #0
 800afa8:	f000 fcf5 	bl	800b996 <USBD_LL_Transmit>

  return USBD_OK;
 800afac:	2300      	movs	r3, #0
}
 800afae:	0018      	movs	r0, r3
 800afb0:	46bd      	mov	sp, r7
 800afb2:	b004      	add	sp, #16
 800afb4:	bd80      	pop	{r7, pc}

0800afb6 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 800afb6:	b580      	push	{r7, lr}
 800afb8:	b084      	sub	sp, #16
 800afba:	af00      	add	r7, sp, #0
 800afbc:	60f8      	str	r0, [r7, #12]
 800afbe:	60b9      	str	r1, [r7, #8]
 800afc0:	1dbb      	adds	r3, r7, #6
 800afc2:	801a      	strh	r2, [r3, #0]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800afc4:	68fa      	ldr	r2, [r7, #12]
 800afc6:	23a5      	movs	r3, #165	; 0xa5
 800afc8:	009b      	lsls	r3, r3, #2
 800afca:	2103      	movs	r1, #3
 800afcc:	50d1      	str	r1, [r2, r3]
  pdev->ep_out[0].total_length = len;
 800afce:	1dbb      	adds	r3, r7, #6
 800afd0:	8819      	ldrh	r1, [r3, #0]
 800afd2:	68fa      	ldr	r2, [r7, #12]
 800afd4:	23ae      	movs	r3, #174	; 0xae
 800afd6:	005b      	lsls	r3, r3, #1
 800afd8:	50d1      	str	r1, [r2, r3]
  pdev->ep_out[0].rem_length   = len;
 800afda:	1dbb      	adds	r3, r7, #6
 800afdc:	8819      	ldrh	r1, [r3, #0]
 800afde:	68fa      	ldr	r2, [r7, #12]
 800afe0:	23b0      	movs	r3, #176	; 0xb0
 800afe2:	005b      	lsls	r3, r3, #1
 800afe4:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800afe6:	1dbb      	adds	r3, r7, #6
 800afe8:	881b      	ldrh	r3, [r3, #0]
 800afea:	68ba      	ldr	r2, [r7, #8]
 800afec:	68f8      	ldr	r0, [r7, #12]
 800afee:	2100      	movs	r1, #0
 800aff0:	f000 fd08 	bl	800ba04 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800aff4:	2300      	movs	r3, #0
}
 800aff6:	0018      	movs	r0, r3
 800aff8:	46bd      	mov	sp, r7
 800affa:	b004      	add	sp, #16
 800affc:	bd80      	pop	{r7, pc}

0800affe <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 800affe:	b580      	push	{r7, lr}
 800b000:	b084      	sub	sp, #16
 800b002:	af00      	add	r7, sp, #0
 800b004:	60f8      	str	r0, [r7, #12]
 800b006:	60b9      	str	r1, [r7, #8]
 800b008:	1dbb      	adds	r3, r7, #6
 800b00a:	801a      	strh	r2, [r3, #0]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b00c:	1dbb      	adds	r3, r7, #6
 800b00e:	881b      	ldrh	r3, [r3, #0]
 800b010:	68ba      	ldr	r2, [r7, #8]
 800b012:	68f8      	ldr	r0, [r7, #12]
 800b014:	2100      	movs	r1, #0
 800b016:	f000 fcf5 	bl	800ba04 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b01a:	2300      	movs	r3, #0
}
 800b01c:	0018      	movs	r0, r3
 800b01e:	46bd      	mov	sp, r7
 800b020:	b004      	add	sp, #16
 800b022:	bd80      	pop	{r7, pc}

0800b024 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800b024:	b580      	push	{r7, lr}
 800b026:	b082      	sub	sp, #8
 800b028:	af00      	add	r7, sp, #0
 800b02a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800b02c:	687a      	ldr	r2, [r7, #4]
 800b02e:	23a5      	movs	r3, #165	; 0xa5
 800b030:	009b      	lsls	r3, r3, #2
 800b032:	2104      	movs	r1, #4
 800b034:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800b036:	6878      	ldr	r0, [r7, #4]
 800b038:	2300      	movs	r3, #0
 800b03a:	2200      	movs	r2, #0
 800b03c:	2100      	movs	r1, #0
 800b03e:	f000 fcaa 	bl	800b996 <USBD_LL_Transmit>

  return USBD_OK;
 800b042:	2300      	movs	r3, #0
}
 800b044:	0018      	movs	r0, r3
 800b046:	46bd      	mov	sp, r7
 800b048:	b002      	add	sp, #8
 800b04a:	bd80      	pop	{r7, pc}

0800b04c <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800b04c:	b580      	push	{r7, lr}
 800b04e:	b082      	sub	sp, #8
 800b050:	af00      	add	r7, sp, #0
 800b052:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800b054:	687a      	ldr	r2, [r7, #4]
 800b056:	23a5      	movs	r3, #165	; 0xa5
 800b058:	009b      	lsls	r3, r3, #2
 800b05a:	2105      	movs	r1, #5
 800b05c:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b05e:	6878      	ldr	r0, [r7, #4]
 800b060:	2300      	movs	r3, #0
 800b062:	2200      	movs	r2, #0
 800b064:	2100      	movs	r1, #0
 800b066:	f000 fccd 	bl	800ba04 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b06a:	2300      	movs	r3, #0
}
 800b06c:	0018      	movs	r0, r3
 800b06e:	46bd      	mov	sp, r7
 800b070:	b002      	add	sp, #8
 800b072:	bd80      	pop	{r7, pc}

0800b074 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800b074:	b580      	push	{r7, lr}
 800b076:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800b078:	4914      	ldr	r1, [pc, #80]	; (800b0cc <MX_USB_DEVICE_Init+0x58>)
 800b07a:	4b15      	ldr	r3, [pc, #84]	; (800b0d0 <MX_USB_DEVICE_Init+0x5c>)
 800b07c:	2200      	movs	r2, #0
 800b07e:	0018      	movs	r0, r3
 800b080:	f7fe fdea 	bl	8009c58 <USBD_Init>
 800b084:	1e03      	subs	r3, r0, #0
 800b086:	d001      	beq.n	800b08c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800b088:	f7f6 f8da 	bl	8001240 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800b08c:	4a11      	ldr	r2, [pc, #68]	; (800b0d4 <MX_USB_DEVICE_Init+0x60>)
 800b08e:	4b10      	ldr	r3, [pc, #64]	; (800b0d0 <MX_USB_DEVICE_Init+0x5c>)
 800b090:	0011      	movs	r1, r2
 800b092:	0018      	movs	r0, r3
 800b094:	f7fe fe11 	bl	8009cba <USBD_RegisterClass>
 800b098:	1e03      	subs	r3, r0, #0
 800b09a:	d001      	beq.n	800b0a0 <MX_USB_DEVICE_Init+0x2c>
  {
    Error_Handler();
 800b09c:	f7f6 f8d0 	bl	8001240 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800b0a0:	4a0d      	ldr	r2, [pc, #52]	; (800b0d8 <MX_USB_DEVICE_Init+0x64>)
 800b0a2:	4b0b      	ldr	r3, [pc, #44]	; (800b0d0 <MX_USB_DEVICE_Init+0x5c>)
 800b0a4:	0011      	movs	r1, r2
 800b0a6:	0018      	movs	r0, r3
 800b0a8:	f7fe fd26 	bl	8009af8 <USBD_CDC_RegisterInterface>
 800b0ac:	1e03      	subs	r3, r0, #0
 800b0ae:	d001      	beq.n	800b0b4 <MX_USB_DEVICE_Init+0x40>
  {
    Error_Handler();
 800b0b0:	f7f6 f8c6 	bl	8001240 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800b0b4:	4b06      	ldr	r3, [pc, #24]	; (800b0d0 <MX_USB_DEVICE_Init+0x5c>)
 800b0b6:	0018      	movs	r0, r3
 800b0b8:	f7fe fe1f 	bl	8009cfa <USBD_Start>
 800b0bc:	1e03      	subs	r3, r0, #0
 800b0be:	d001      	beq.n	800b0c4 <MX_USB_DEVICE_Init+0x50>
  {
    Error_Handler();
 800b0c0:	f7f6 f8be 	bl	8001240 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800b0c4:	46c0      	nop			; (mov r8, r8)
 800b0c6:	46bd      	mov	sp, r7
 800b0c8:	bd80      	pop	{r7, pc}
 800b0ca:	46c0      	nop			; (mov r8, r8)
 800b0cc:	2000012c 	.word	0x2000012c
 800b0d0:	20000614 	.word	0x20000614
 800b0d4:	20000018 	.word	0x20000018
 800b0d8:	2000011c 	.word	0x2000011c

0800b0dc <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800b0dc:	b580      	push	{r7, lr}
 800b0de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800b0e0:	4907      	ldr	r1, [pc, #28]	; (800b100 <CDC_Init_FS+0x24>)
 800b0e2:	4b08      	ldr	r3, [pc, #32]	; (800b104 <CDC_Init_FS+0x28>)
 800b0e4:	2200      	movs	r2, #0
 800b0e6:	0018      	movs	r0, r3
 800b0e8:	f7fe fd21 	bl	8009b2e <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800b0ec:	4a06      	ldr	r2, [pc, #24]	; (800b108 <CDC_Init_FS+0x2c>)
 800b0ee:	4b05      	ldr	r3, [pc, #20]	; (800b104 <CDC_Init_FS+0x28>)
 800b0f0:	0011      	movs	r1, r2
 800b0f2:	0018      	movs	r0, r3
 800b0f4:	f7fe fd37 	bl	8009b66 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800b0f8:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800b0fa:	0018      	movs	r0, r3
 800b0fc:	46bd      	mov	sp, r7
 800b0fe:	bd80      	pop	{r7, pc}
 800b100:	20000cc0 	.word	0x20000cc0
 800b104:	20000614 	.word	0x20000614
 800b108:	200008d8 	.word	0x200008d8

0800b10c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800b10c:	b580      	push	{r7, lr}
 800b10e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800b110:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800b112:	0018      	movs	r0, r3
 800b114:	46bd      	mov	sp, r7
 800b116:	bd80      	pop	{r7, pc}

0800b118 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800b118:	b580      	push	{r7, lr}
 800b11a:	b082      	sub	sp, #8
 800b11c:	af00      	add	r7, sp, #0
 800b11e:	6039      	str	r1, [r7, #0]
 800b120:	0011      	movs	r1, r2
 800b122:	1dfb      	adds	r3, r7, #7
 800b124:	1c02      	adds	r2, r0, #0
 800b126:	701a      	strb	r2, [r3, #0]
 800b128:	1d3b      	adds	r3, r7, #4
 800b12a:	1c0a      	adds	r2, r1, #0
 800b12c:	801a      	strh	r2, [r3, #0]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800b12e:	1dfb      	adds	r3, r7, #7
 800b130:	781b      	ldrb	r3, [r3, #0]
 800b132:	2b23      	cmp	r3, #35	; 0x23
 800b134:	d804      	bhi.n	800b140 <CDC_Control_FS+0x28>
 800b136:	009a      	lsls	r2, r3, #2
 800b138:	4b04      	ldr	r3, [pc, #16]	; (800b14c <CDC_Control_FS+0x34>)
 800b13a:	18d3      	adds	r3, r2, r3
 800b13c:	681b      	ldr	r3, [r3, #0]
 800b13e:	469f      	mov	pc, r3
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800b140:	46c0      	nop			; (mov r8, r8)
  }

  return (USBD_OK);
 800b142:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800b144:	0018      	movs	r0, r3
 800b146:	46bd      	mov	sp, r7
 800b148:	b002      	add	sp, #8
 800b14a:	bd80      	pop	{r7, pc}
 800b14c:	0800c560 	.word	0x0800c560

0800b150 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800b150:	b590      	push	{r4, r7, lr}
 800b152:	b085      	sub	sp, #20
 800b154:	af00      	add	r7, sp, #0
 800b156:	6078      	str	r0, [r7, #4]
 800b158:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */

  SetBit(comFlags, 0);
 800b15a:	4b19      	ldr	r3, [pc, #100]	; (800b1c0 <CDC_Receive_FS+0x70>)
 800b15c:	881b      	ldrh	r3, [r3, #0]
 800b15e:	2201      	movs	r2, #1
 800b160:	4313      	orrs	r3, r2
 800b162:	b29a      	uxth	r2, r3
 800b164:	4b16      	ldr	r3, [pc, #88]	; (800b1c0 <CDC_Receive_FS+0x70>)
 800b166:	801a      	strh	r2, [r3, #0]

  for(uint8_t i = 0; i < *Len; i++)
 800b168:	230f      	movs	r3, #15
 800b16a:	18fb      	adds	r3, r7, r3
 800b16c:	2200      	movs	r2, #0
 800b16e:	701a      	strb	r2, [r3, #0]
 800b170:	e00f      	b.n	800b192 <CDC_Receive_FS+0x42>
  {
	  push(USB_Rx_Buffer, Buf[i]);
 800b172:	4b14      	ldr	r3, [pc, #80]	; (800b1c4 <CDC_Receive_FS+0x74>)
 800b174:	6818      	ldr	r0, [r3, #0]
 800b176:	240f      	movs	r4, #15
 800b178:	193b      	adds	r3, r7, r4
 800b17a:	781b      	ldrb	r3, [r3, #0]
 800b17c:	687a      	ldr	r2, [r7, #4]
 800b17e:	18d3      	adds	r3, r2, r3
 800b180:	781b      	ldrb	r3, [r3, #0]
 800b182:	0019      	movs	r1, r3
 800b184:	f7f6 f896 	bl	80012b4 <push>
  for(uint8_t i = 0; i < *Len; i++)
 800b188:	193b      	adds	r3, r7, r4
 800b18a:	781a      	ldrb	r2, [r3, #0]
 800b18c:	193b      	adds	r3, r7, r4
 800b18e:	3201      	adds	r2, #1
 800b190:	701a      	strb	r2, [r3, #0]
 800b192:	230f      	movs	r3, #15
 800b194:	18fb      	adds	r3, r7, r3
 800b196:	781a      	ldrb	r2, [r3, #0]
 800b198:	683b      	ldr	r3, [r7, #0]
 800b19a:	681b      	ldr	r3, [r3, #0]
 800b19c:	429a      	cmp	r2, r3
 800b19e:	d3e8      	bcc.n	800b172 <CDC_Receive_FS+0x22>
  }

  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800b1a0:	687a      	ldr	r2, [r7, #4]
 800b1a2:	4b09      	ldr	r3, [pc, #36]	; (800b1c8 <CDC_Receive_FS+0x78>)
 800b1a4:	0011      	movs	r1, r2
 800b1a6:	0018      	movs	r0, r3
 800b1a8:	f7fe fcdd 	bl	8009b66 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800b1ac:	4b06      	ldr	r3, [pc, #24]	; (800b1c8 <CDC_Receive_FS+0x78>)
 800b1ae:	0018      	movs	r0, r3
 800b1b0:	f7fe fd24 	bl	8009bfc <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800b1b4:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800b1b6:	0018      	movs	r0, r3
 800b1b8:	46bd      	mov	sp, r7
 800b1ba:	b005      	add	sp, #20
 800b1bc:	bd90      	pop	{r4, r7, pc}
 800b1be:	46c0      	nop			; (mov r8, r8)
 800b1c0:	20000212 	.word	0x20000212
 800b1c4:	200010a8 	.word	0x200010a8
 800b1c8:	20000614 	.word	0x20000614

0800b1cc <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800b1cc:	b5b0      	push	{r4, r5, r7, lr}
 800b1ce:	b084      	sub	sp, #16
 800b1d0:	af00      	add	r7, sp, #0
 800b1d2:	6078      	str	r0, [r7, #4]
 800b1d4:	000a      	movs	r2, r1
 800b1d6:	1cbb      	adds	r3, r7, #2
 800b1d8:	801a      	strh	r2, [r3, #0]
  uint8_t result = USBD_OK;
 800b1da:	230f      	movs	r3, #15
 800b1dc:	18fb      	adds	r3, r7, r3
 800b1de:	2200      	movs	r2, #0
 800b1e0:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800b1e2:	4a11      	ldr	r2, [pc, #68]	; (800b228 <CDC_Transmit_FS+0x5c>)
 800b1e4:	23ae      	movs	r3, #174	; 0xae
 800b1e6:	009b      	lsls	r3, r3, #2
 800b1e8:	58d3      	ldr	r3, [r2, r3]
 800b1ea:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800b1ec:	68ba      	ldr	r2, [r7, #8]
 800b1ee:	2385      	movs	r3, #133	; 0x85
 800b1f0:	009b      	lsls	r3, r3, #2
 800b1f2:	58d3      	ldr	r3, [r2, r3]
 800b1f4:	2b00      	cmp	r3, #0
 800b1f6:	d001      	beq.n	800b1fc <CDC_Transmit_FS+0x30>
    return USBD_BUSY;
 800b1f8:	2301      	movs	r3, #1
 800b1fa:	e010      	b.n	800b21e <CDC_Transmit_FS+0x52>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800b1fc:	1cbb      	adds	r3, r7, #2
 800b1fe:	881a      	ldrh	r2, [r3, #0]
 800b200:	6879      	ldr	r1, [r7, #4]
 800b202:	4b09      	ldr	r3, [pc, #36]	; (800b228 <CDC_Transmit_FS+0x5c>)
 800b204:	0018      	movs	r0, r3
 800b206:	f7fe fc92 	bl	8009b2e <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800b20a:	250f      	movs	r5, #15
 800b20c:	197c      	adds	r4, r7, r5
 800b20e:	4b06      	ldr	r3, [pc, #24]	; (800b228 <CDC_Transmit_FS+0x5c>)
 800b210:	0018      	movs	r0, r3
 800b212:	f7fe fcbc 	bl	8009b8e <USBD_CDC_TransmitPacket>
 800b216:	0003      	movs	r3, r0
 800b218:	7023      	strb	r3, [r4, #0]
  /* USER CODE END 7 */
  return result;
 800b21a:	197b      	adds	r3, r7, r5
 800b21c:	781b      	ldrb	r3, [r3, #0]
}
 800b21e:	0018      	movs	r0, r3
 800b220:	46bd      	mov	sp, r7
 800b222:	b004      	add	sp, #16
 800b224:	bdb0      	pop	{r4, r5, r7, pc}
 800b226:	46c0      	nop			; (mov r8, r8)
 800b228:	20000614 	.word	0x20000614

0800b22c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b22c:	b580      	push	{r7, lr}
 800b22e:	b082      	sub	sp, #8
 800b230:	af00      	add	r7, sp, #0
 800b232:	0002      	movs	r2, r0
 800b234:	6039      	str	r1, [r7, #0]
 800b236:	1dfb      	adds	r3, r7, #7
 800b238:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800b23a:	683b      	ldr	r3, [r7, #0]
 800b23c:	2212      	movs	r2, #18
 800b23e:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800b240:	4b02      	ldr	r3, [pc, #8]	; (800b24c <USBD_FS_DeviceDescriptor+0x20>)
}
 800b242:	0018      	movs	r0, r3
 800b244:	46bd      	mov	sp, r7
 800b246:	b002      	add	sp, #8
 800b248:	bd80      	pop	{r7, pc}
 800b24a:	46c0      	nop			; (mov r8, r8)
 800b24c:	20000148 	.word	0x20000148

0800b250 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b250:	b580      	push	{r7, lr}
 800b252:	b082      	sub	sp, #8
 800b254:	af00      	add	r7, sp, #0
 800b256:	0002      	movs	r2, r0
 800b258:	6039      	str	r1, [r7, #0]
 800b25a:	1dfb      	adds	r3, r7, #7
 800b25c:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800b25e:	683b      	ldr	r3, [r7, #0]
 800b260:	2204      	movs	r2, #4
 800b262:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800b264:	4b02      	ldr	r3, [pc, #8]	; (800b270 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800b266:	0018      	movs	r0, r3
 800b268:	46bd      	mov	sp, r7
 800b26a:	b002      	add	sp, #8
 800b26c:	bd80      	pop	{r7, pc}
 800b26e:	46c0      	nop			; (mov r8, r8)
 800b270:	2000015c 	.word	0x2000015c

0800b274 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b274:	b580      	push	{r7, lr}
 800b276:	b082      	sub	sp, #8
 800b278:	af00      	add	r7, sp, #0
 800b27a:	0002      	movs	r2, r0
 800b27c:	6039      	str	r1, [r7, #0]
 800b27e:	1dfb      	adds	r3, r7, #7
 800b280:	701a      	strb	r2, [r3, #0]
  if(speed == 0)
 800b282:	1dfb      	adds	r3, r7, #7
 800b284:	781b      	ldrb	r3, [r3, #0]
 800b286:	2b00      	cmp	r3, #0
 800b288:	d106      	bne.n	800b298 <USBD_FS_ProductStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800b28a:	683a      	ldr	r2, [r7, #0]
 800b28c:	4908      	ldr	r1, [pc, #32]	; (800b2b0 <USBD_FS_ProductStrDescriptor+0x3c>)
 800b28e:	4b09      	ldr	r3, [pc, #36]	; (800b2b4 <USBD_FS_ProductStrDescriptor+0x40>)
 800b290:	0018      	movs	r0, r3
 800b292:	f7ff fdf2 	bl	800ae7a <USBD_GetString>
 800b296:	e005      	b.n	800b2a4 <USBD_FS_ProductStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800b298:	683a      	ldr	r2, [r7, #0]
 800b29a:	4905      	ldr	r1, [pc, #20]	; (800b2b0 <USBD_FS_ProductStrDescriptor+0x3c>)
 800b29c:	4b05      	ldr	r3, [pc, #20]	; (800b2b4 <USBD_FS_ProductStrDescriptor+0x40>)
 800b29e:	0018      	movs	r0, r3
 800b2a0:	f7ff fdeb 	bl	800ae7a <USBD_GetString>
  }
  return USBD_StrDesc;
 800b2a4:	4b02      	ldr	r3, [pc, #8]	; (800b2b0 <USBD_FS_ProductStrDescriptor+0x3c>)
}
 800b2a6:	0018      	movs	r0, r3
 800b2a8:	46bd      	mov	sp, r7
 800b2aa:	b002      	add	sp, #8
 800b2ac:	bd80      	pop	{r7, pc}
 800b2ae:	46c0      	nop			; (mov r8, r8)
 800b2b0:	200010ac 	.word	0x200010ac
 800b2b4:	0800c4a0 	.word	0x0800c4a0

0800b2b8 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b2b8:	b580      	push	{r7, lr}
 800b2ba:	b082      	sub	sp, #8
 800b2bc:	af00      	add	r7, sp, #0
 800b2be:	0002      	movs	r2, r0
 800b2c0:	6039      	str	r1, [r7, #0]
 800b2c2:	1dfb      	adds	r3, r7, #7
 800b2c4:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800b2c6:	683a      	ldr	r2, [r7, #0]
 800b2c8:	4904      	ldr	r1, [pc, #16]	; (800b2dc <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800b2ca:	4b05      	ldr	r3, [pc, #20]	; (800b2e0 <USBD_FS_ManufacturerStrDescriptor+0x28>)
 800b2cc:	0018      	movs	r0, r3
 800b2ce:	f7ff fdd4 	bl	800ae7a <USBD_GetString>
  return USBD_StrDesc;
 800b2d2:	4b02      	ldr	r3, [pc, #8]	; (800b2dc <USBD_FS_ManufacturerStrDescriptor+0x24>)
}
 800b2d4:	0018      	movs	r0, r3
 800b2d6:	46bd      	mov	sp, r7
 800b2d8:	b002      	add	sp, #8
 800b2da:	bd80      	pop	{r7, pc}
 800b2dc:	200010ac 	.word	0x200010ac
 800b2e0:	0800c4b8 	.word	0x0800c4b8

0800b2e4 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b2e4:	b580      	push	{r7, lr}
 800b2e6:	b082      	sub	sp, #8
 800b2e8:	af00      	add	r7, sp, #0
 800b2ea:	0002      	movs	r2, r0
 800b2ec:	6039      	str	r1, [r7, #0]
 800b2ee:	1dfb      	adds	r3, r7, #7
 800b2f0:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800b2f2:	683b      	ldr	r3, [r7, #0]
 800b2f4:	221a      	movs	r2, #26
 800b2f6:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800b2f8:	f000 f84c 	bl	800b394 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800b2fc:	4b02      	ldr	r3, [pc, #8]	; (800b308 <USBD_FS_SerialStrDescriptor+0x24>)
}
 800b2fe:	0018      	movs	r0, r3
 800b300:	46bd      	mov	sp, r7
 800b302:	b002      	add	sp, #8
 800b304:	bd80      	pop	{r7, pc}
 800b306:	46c0      	nop			; (mov r8, r8)
 800b308:	20000160 	.word	0x20000160

0800b30c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b30c:	b580      	push	{r7, lr}
 800b30e:	b082      	sub	sp, #8
 800b310:	af00      	add	r7, sp, #0
 800b312:	0002      	movs	r2, r0
 800b314:	6039      	str	r1, [r7, #0]
 800b316:	1dfb      	adds	r3, r7, #7
 800b318:	701a      	strb	r2, [r3, #0]
  if(speed == USBD_SPEED_HIGH)
 800b31a:	1dfb      	adds	r3, r7, #7
 800b31c:	781b      	ldrb	r3, [r3, #0]
 800b31e:	2b00      	cmp	r3, #0
 800b320:	d106      	bne.n	800b330 <USBD_FS_ConfigStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800b322:	683a      	ldr	r2, [r7, #0]
 800b324:	4908      	ldr	r1, [pc, #32]	; (800b348 <USBD_FS_ConfigStrDescriptor+0x3c>)
 800b326:	4b09      	ldr	r3, [pc, #36]	; (800b34c <USBD_FS_ConfigStrDescriptor+0x40>)
 800b328:	0018      	movs	r0, r3
 800b32a:	f7ff fda6 	bl	800ae7a <USBD_GetString>
 800b32e:	e005      	b.n	800b33c <USBD_FS_ConfigStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800b330:	683a      	ldr	r2, [r7, #0]
 800b332:	4905      	ldr	r1, [pc, #20]	; (800b348 <USBD_FS_ConfigStrDescriptor+0x3c>)
 800b334:	4b05      	ldr	r3, [pc, #20]	; (800b34c <USBD_FS_ConfigStrDescriptor+0x40>)
 800b336:	0018      	movs	r0, r3
 800b338:	f7ff fd9f 	bl	800ae7a <USBD_GetString>
  }
  return USBD_StrDesc;
 800b33c:	4b02      	ldr	r3, [pc, #8]	; (800b348 <USBD_FS_ConfigStrDescriptor+0x3c>)
}
 800b33e:	0018      	movs	r0, r3
 800b340:	46bd      	mov	sp, r7
 800b342:	b002      	add	sp, #8
 800b344:	bd80      	pop	{r7, pc}
 800b346:	46c0      	nop			; (mov r8, r8)
 800b348:	200010ac 	.word	0x200010ac
 800b34c:	0800c4cc 	.word	0x0800c4cc

0800b350 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b350:	b580      	push	{r7, lr}
 800b352:	b082      	sub	sp, #8
 800b354:	af00      	add	r7, sp, #0
 800b356:	0002      	movs	r2, r0
 800b358:	6039      	str	r1, [r7, #0]
 800b35a:	1dfb      	adds	r3, r7, #7
 800b35c:	701a      	strb	r2, [r3, #0]
  if(speed == 0)
 800b35e:	1dfb      	adds	r3, r7, #7
 800b360:	781b      	ldrb	r3, [r3, #0]
 800b362:	2b00      	cmp	r3, #0
 800b364:	d106      	bne.n	800b374 <USBD_FS_InterfaceStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800b366:	683a      	ldr	r2, [r7, #0]
 800b368:	4908      	ldr	r1, [pc, #32]	; (800b38c <USBD_FS_InterfaceStrDescriptor+0x3c>)
 800b36a:	4b09      	ldr	r3, [pc, #36]	; (800b390 <USBD_FS_InterfaceStrDescriptor+0x40>)
 800b36c:	0018      	movs	r0, r3
 800b36e:	f7ff fd84 	bl	800ae7a <USBD_GetString>
 800b372:	e005      	b.n	800b380 <USBD_FS_InterfaceStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800b374:	683a      	ldr	r2, [r7, #0]
 800b376:	4905      	ldr	r1, [pc, #20]	; (800b38c <USBD_FS_InterfaceStrDescriptor+0x3c>)
 800b378:	4b05      	ldr	r3, [pc, #20]	; (800b390 <USBD_FS_InterfaceStrDescriptor+0x40>)
 800b37a:	0018      	movs	r0, r3
 800b37c:	f7ff fd7d 	bl	800ae7a <USBD_GetString>
  }
  return USBD_StrDesc;
 800b380:	4b02      	ldr	r3, [pc, #8]	; (800b38c <USBD_FS_InterfaceStrDescriptor+0x3c>)
}
 800b382:	0018      	movs	r0, r3
 800b384:	46bd      	mov	sp, r7
 800b386:	b002      	add	sp, #8
 800b388:	bd80      	pop	{r7, pc}
 800b38a:	46c0      	nop			; (mov r8, r8)
 800b38c:	200010ac 	.word	0x200010ac
 800b390:	0800c4d8 	.word	0x0800c4d8

0800b394 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800b394:	b580      	push	{r7, lr}
 800b396:	b084      	sub	sp, #16
 800b398:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800b39a:	4b10      	ldr	r3, [pc, #64]	; (800b3dc <Get_SerialNum+0x48>)
 800b39c:	681b      	ldr	r3, [r3, #0]
 800b39e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800b3a0:	4b0f      	ldr	r3, [pc, #60]	; (800b3e0 <Get_SerialNum+0x4c>)
 800b3a2:	681b      	ldr	r3, [r3, #0]
 800b3a4:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800b3a6:	4b0f      	ldr	r3, [pc, #60]	; (800b3e4 <Get_SerialNum+0x50>)
 800b3a8:	681b      	ldr	r3, [r3, #0]
 800b3aa:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800b3ac:	68fa      	ldr	r2, [r7, #12]
 800b3ae:	687b      	ldr	r3, [r7, #4]
 800b3b0:	18d3      	adds	r3, r2, r3
 800b3b2:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800b3b4:	68fb      	ldr	r3, [r7, #12]
 800b3b6:	2b00      	cmp	r3, #0
 800b3b8:	d00b      	beq.n	800b3d2 <Get_SerialNum+0x3e>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800b3ba:	490b      	ldr	r1, [pc, #44]	; (800b3e8 <Get_SerialNum+0x54>)
 800b3bc:	68fb      	ldr	r3, [r7, #12]
 800b3be:	2208      	movs	r2, #8
 800b3c0:	0018      	movs	r0, r3
 800b3c2:	f000 f815 	bl	800b3f0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800b3c6:	4909      	ldr	r1, [pc, #36]	; (800b3ec <Get_SerialNum+0x58>)
 800b3c8:	68bb      	ldr	r3, [r7, #8]
 800b3ca:	2204      	movs	r2, #4
 800b3cc:	0018      	movs	r0, r3
 800b3ce:	f000 f80f 	bl	800b3f0 <IntToUnicode>
  }
}
 800b3d2:	46c0      	nop			; (mov r8, r8)
 800b3d4:	46bd      	mov	sp, r7
 800b3d6:	b004      	add	sp, #16
 800b3d8:	bd80      	pop	{r7, pc}
 800b3da:	46c0      	nop			; (mov r8, r8)
 800b3dc:	1ffff7ac 	.word	0x1ffff7ac
 800b3e0:	1ffff7b0 	.word	0x1ffff7b0
 800b3e4:	1ffff7b4 	.word	0x1ffff7b4
 800b3e8:	20000162 	.word	0x20000162
 800b3ec:	20000172 	.word	0x20000172

0800b3f0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800b3f0:	b580      	push	{r7, lr}
 800b3f2:	b086      	sub	sp, #24
 800b3f4:	af00      	add	r7, sp, #0
 800b3f6:	60f8      	str	r0, [r7, #12]
 800b3f8:	60b9      	str	r1, [r7, #8]
 800b3fa:	1dfb      	adds	r3, r7, #7
 800b3fc:	701a      	strb	r2, [r3, #0]
  uint8_t idx = 0;
 800b3fe:	2117      	movs	r1, #23
 800b400:	187b      	adds	r3, r7, r1
 800b402:	2200      	movs	r2, #0
 800b404:	701a      	strb	r2, [r3, #0]

  for (idx = 0; idx < len; idx++)
 800b406:	187b      	adds	r3, r7, r1
 800b408:	2200      	movs	r2, #0
 800b40a:	701a      	strb	r2, [r3, #0]
 800b40c:	e02f      	b.n	800b46e <IntToUnicode+0x7e>
  {
    if (((value >> 28)) < 0xA)
 800b40e:	68fb      	ldr	r3, [r7, #12]
 800b410:	0f1b      	lsrs	r3, r3, #28
 800b412:	2b09      	cmp	r3, #9
 800b414:	d80d      	bhi.n	800b432 <IntToUnicode+0x42>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800b416:	68fb      	ldr	r3, [r7, #12]
 800b418:	0f1b      	lsrs	r3, r3, #28
 800b41a:	b2da      	uxtb	r2, r3
 800b41c:	2317      	movs	r3, #23
 800b41e:	18fb      	adds	r3, r7, r3
 800b420:	781b      	ldrb	r3, [r3, #0]
 800b422:	005b      	lsls	r3, r3, #1
 800b424:	0019      	movs	r1, r3
 800b426:	68bb      	ldr	r3, [r7, #8]
 800b428:	185b      	adds	r3, r3, r1
 800b42a:	3230      	adds	r2, #48	; 0x30
 800b42c:	b2d2      	uxtb	r2, r2
 800b42e:	701a      	strb	r2, [r3, #0]
 800b430:	e00c      	b.n	800b44c <IntToUnicode+0x5c>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800b432:	68fb      	ldr	r3, [r7, #12]
 800b434:	0f1b      	lsrs	r3, r3, #28
 800b436:	b2da      	uxtb	r2, r3
 800b438:	2317      	movs	r3, #23
 800b43a:	18fb      	adds	r3, r7, r3
 800b43c:	781b      	ldrb	r3, [r3, #0]
 800b43e:	005b      	lsls	r3, r3, #1
 800b440:	0019      	movs	r1, r3
 800b442:	68bb      	ldr	r3, [r7, #8]
 800b444:	185b      	adds	r3, r3, r1
 800b446:	3237      	adds	r2, #55	; 0x37
 800b448:	b2d2      	uxtb	r2, r2
 800b44a:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800b44c:	68fb      	ldr	r3, [r7, #12]
 800b44e:	011b      	lsls	r3, r3, #4
 800b450:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800b452:	2117      	movs	r1, #23
 800b454:	187b      	adds	r3, r7, r1
 800b456:	781b      	ldrb	r3, [r3, #0]
 800b458:	005b      	lsls	r3, r3, #1
 800b45a:	3301      	adds	r3, #1
 800b45c:	68ba      	ldr	r2, [r7, #8]
 800b45e:	18d3      	adds	r3, r2, r3
 800b460:	2200      	movs	r2, #0
 800b462:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800b464:	187b      	adds	r3, r7, r1
 800b466:	781a      	ldrb	r2, [r3, #0]
 800b468:	187b      	adds	r3, r7, r1
 800b46a:	3201      	adds	r2, #1
 800b46c:	701a      	strb	r2, [r3, #0]
 800b46e:	2317      	movs	r3, #23
 800b470:	18fa      	adds	r2, r7, r3
 800b472:	1dfb      	adds	r3, r7, #7
 800b474:	7812      	ldrb	r2, [r2, #0]
 800b476:	781b      	ldrb	r3, [r3, #0]
 800b478:	429a      	cmp	r2, r3
 800b47a:	d3c8      	bcc.n	800b40e <IntToUnicode+0x1e>
  }
}
 800b47c:	46c0      	nop			; (mov r8, r8)
 800b47e:	46c0      	nop			; (mov r8, r8)
 800b480:	46bd      	mov	sp, r7
 800b482:	b006      	add	sp, #24
 800b484:	bd80      	pop	{r7, pc}
	...

0800b488 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800b488:	b580      	push	{r7, lr}
 800b48a:	b084      	sub	sp, #16
 800b48c:	af00      	add	r7, sp, #0
 800b48e:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 800b490:	687b      	ldr	r3, [r7, #4]
 800b492:	681b      	ldr	r3, [r3, #0]
 800b494:	4a0e      	ldr	r2, [pc, #56]	; (800b4d0 <HAL_PCD_MspInit+0x48>)
 800b496:	4293      	cmp	r3, r2
 800b498:	d115      	bne.n	800b4c6 <HAL_PCD_MspInit+0x3e>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800b49a:	4b0e      	ldr	r3, [pc, #56]	; (800b4d4 <HAL_PCD_MspInit+0x4c>)
 800b49c:	69da      	ldr	r2, [r3, #28]
 800b49e:	4b0d      	ldr	r3, [pc, #52]	; (800b4d4 <HAL_PCD_MspInit+0x4c>)
 800b4a0:	2180      	movs	r1, #128	; 0x80
 800b4a2:	0409      	lsls	r1, r1, #16
 800b4a4:	430a      	orrs	r2, r1
 800b4a6:	61da      	str	r2, [r3, #28]
 800b4a8:	4b0a      	ldr	r3, [pc, #40]	; (800b4d4 <HAL_PCD_MspInit+0x4c>)
 800b4aa:	69da      	ldr	r2, [r3, #28]
 800b4ac:	2380      	movs	r3, #128	; 0x80
 800b4ae:	041b      	lsls	r3, r3, #16
 800b4b0:	4013      	ands	r3, r2
 800b4b2:	60fb      	str	r3, [r7, #12]
 800b4b4:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_IRQn, 0, 0);
 800b4b6:	2200      	movs	r2, #0
 800b4b8:	2100      	movs	r1, #0
 800b4ba:	201f      	movs	r0, #31
 800b4bc:	f7f6 fd10 	bl	8001ee0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_IRQn);
 800b4c0:	201f      	movs	r0, #31
 800b4c2:	f7f6 fd22 	bl	8001f0a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800b4c6:	46c0      	nop			; (mov r8, r8)
 800b4c8:	46bd      	mov	sp, r7
 800b4ca:	b004      	add	sp, #16
 800b4cc:	bd80      	pop	{r7, pc}
 800b4ce:	46c0      	nop			; (mov r8, r8)
 800b4d0:	40005c00 	.word	0x40005c00
 800b4d4:	40021000 	.word	0x40021000

0800b4d8 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b4d8:	b580      	push	{r7, lr}
 800b4da:	b082      	sub	sp, #8
 800b4dc:	af00      	add	r7, sp, #0
 800b4de:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800b4e0:	687a      	ldr	r2, [r7, #4]
 800b4e2:	23bc      	movs	r3, #188	; 0xbc
 800b4e4:	009b      	lsls	r3, r3, #2
 800b4e6:	58d2      	ldr	r2, [r2, r3]
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	21ac      	movs	r1, #172	; 0xac
 800b4ec:	0089      	lsls	r1, r1, #2
 800b4ee:	468c      	mov	ip, r1
 800b4f0:	4463      	add	r3, ip
 800b4f2:	0019      	movs	r1, r3
 800b4f4:	0010      	movs	r0, r2
 800b4f6:	f7fe fc53 	bl	8009da0 <USBD_LL_SetupStage>
}
 800b4fa:	46c0      	nop			; (mov r8, r8)
 800b4fc:	46bd      	mov	sp, r7
 800b4fe:	b002      	add	sp, #8
 800b500:	bd80      	pop	{r7, pc}

0800b502 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b502:	b590      	push	{r4, r7, lr}
 800b504:	b083      	sub	sp, #12
 800b506:	af00      	add	r7, sp, #0
 800b508:	6078      	str	r0, [r7, #4]
 800b50a:	000a      	movs	r2, r1
 800b50c:	1cfb      	adds	r3, r7, #3
 800b50e:	701a      	strb	r2, [r3, #0]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800b510:	687a      	ldr	r2, [r7, #4]
 800b512:	23bc      	movs	r3, #188	; 0xbc
 800b514:	009b      	lsls	r3, r3, #2
 800b516:	58d4      	ldr	r4, [r2, r3]
 800b518:	1cfb      	adds	r3, r7, #3
 800b51a:	781a      	ldrb	r2, [r3, #0]
 800b51c:	6878      	ldr	r0, [r7, #4]
 800b51e:	23be      	movs	r3, #190	; 0xbe
 800b520:	0059      	lsls	r1, r3, #1
 800b522:	0013      	movs	r3, r2
 800b524:	009b      	lsls	r3, r3, #2
 800b526:	189b      	adds	r3, r3, r2
 800b528:	00db      	lsls	r3, r3, #3
 800b52a:	18c3      	adds	r3, r0, r3
 800b52c:	185b      	adds	r3, r3, r1
 800b52e:	681a      	ldr	r2, [r3, #0]
 800b530:	1cfb      	adds	r3, r7, #3
 800b532:	781b      	ldrb	r3, [r3, #0]
 800b534:	0019      	movs	r1, r3
 800b536:	0020      	movs	r0, r4
 800b538:	f7fe fc90 	bl	8009e5c <USBD_LL_DataOutStage>
}
 800b53c:	46c0      	nop			; (mov r8, r8)
 800b53e:	46bd      	mov	sp, r7
 800b540:	b003      	add	sp, #12
 800b542:	bd90      	pop	{r4, r7, pc}

0800b544 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b544:	b580      	push	{r7, lr}
 800b546:	b082      	sub	sp, #8
 800b548:	af00      	add	r7, sp, #0
 800b54a:	6078      	str	r0, [r7, #4]
 800b54c:	000a      	movs	r2, r1
 800b54e:	1cfb      	adds	r3, r7, #3
 800b550:	701a      	strb	r2, [r3, #0]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800b552:	687a      	ldr	r2, [r7, #4]
 800b554:	23bc      	movs	r3, #188	; 0xbc
 800b556:	009b      	lsls	r3, r3, #2
 800b558:	58d0      	ldr	r0, [r2, r3]
 800b55a:	1cfb      	adds	r3, r7, #3
 800b55c:	781a      	ldrb	r2, [r3, #0]
 800b55e:	6879      	ldr	r1, [r7, #4]
 800b560:	0013      	movs	r3, r2
 800b562:	009b      	lsls	r3, r3, #2
 800b564:	189b      	adds	r3, r3, r2
 800b566:	00db      	lsls	r3, r3, #3
 800b568:	18cb      	adds	r3, r1, r3
 800b56a:	333c      	adds	r3, #60	; 0x3c
 800b56c:	681a      	ldr	r2, [r3, #0]
 800b56e:	1cfb      	adds	r3, r7, #3
 800b570:	781b      	ldrb	r3, [r3, #0]
 800b572:	0019      	movs	r1, r3
 800b574:	f7fe fcf4 	bl	8009f60 <USBD_LL_DataInStage>
}
 800b578:	46c0      	nop			; (mov r8, r8)
 800b57a:	46bd      	mov	sp, r7
 800b57c:	b002      	add	sp, #8
 800b57e:	bd80      	pop	{r7, pc}

0800b580 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b580:	b580      	push	{r7, lr}
 800b582:	b082      	sub	sp, #8
 800b584:	af00      	add	r7, sp, #0
 800b586:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800b588:	687a      	ldr	r2, [r7, #4]
 800b58a:	23bc      	movs	r3, #188	; 0xbc
 800b58c:	009b      	lsls	r3, r3, #2
 800b58e:	58d3      	ldr	r3, [r2, r3]
 800b590:	0018      	movs	r0, r3
 800b592:	f7fe fe2b 	bl	800a1ec <USBD_LL_SOF>
}
 800b596:	46c0      	nop			; (mov r8, r8)
 800b598:	46bd      	mov	sp, r7
 800b59a:	b002      	add	sp, #8
 800b59c:	bd80      	pop	{r7, pc}

0800b59e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b59e:	b580      	push	{r7, lr}
 800b5a0:	b084      	sub	sp, #16
 800b5a2:	af00      	add	r7, sp, #0
 800b5a4:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800b5a6:	230f      	movs	r3, #15
 800b5a8:	18fb      	adds	r3, r7, r3
 800b5aa:	2201      	movs	r2, #1
 800b5ac:	701a      	strb	r2, [r3, #0]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800b5ae:	687b      	ldr	r3, [r7, #4]
 800b5b0:	689b      	ldr	r3, [r3, #8]
 800b5b2:	2b02      	cmp	r3, #2
 800b5b4:	d001      	beq.n	800b5ba <HAL_PCD_ResetCallback+0x1c>
  {
    Error_Handler();
 800b5b6:	f7f5 fe43 	bl	8001240 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800b5ba:	687a      	ldr	r2, [r7, #4]
 800b5bc:	23bc      	movs	r3, #188	; 0xbc
 800b5be:	009b      	lsls	r3, r3, #2
 800b5c0:	58d2      	ldr	r2, [r2, r3]
 800b5c2:	230f      	movs	r3, #15
 800b5c4:	18fb      	adds	r3, r7, r3
 800b5c6:	781b      	ldrb	r3, [r3, #0]
 800b5c8:	0019      	movs	r1, r3
 800b5ca:	0010      	movs	r0, r2
 800b5cc:	f7fe fdcd 	bl	800a16a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800b5d0:	687a      	ldr	r2, [r7, #4]
 800b5d2:	23bc      	movs	r3, #188	; 0xbc
 800b5d4:	009b      	lsls	r3, r3, #2
 800b5d6:	58d3      	ldr	r3, [r2, r3]
 800b5d8:	0018      	movs	r0, r3
 800b5da:	f7fe fd7e 	bl	800a0da <USBD_LL_Reset>
}
 800b5de:	46c0      	nop			; (mov r8, r8)
 800b5e0:	46bd      	mov	sp, r7
 800b5e2:	b004      	add	sp, #16
 800b5e4:	bd80      	pop	{r7, pc}
	...

0800b5e8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b5e8:	b580      	push	{r7, lr}
 800b5ea:	b082      	sub	sp, #8
 800b5ec:	af00      	add	r7, sp, #0
 800b5ee:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800b5f0:	687a      	ldr	r2, [r7, #4]
 800b5f2:	23bc      	movs	r3, #188	; 0xbc
 800b5f4:	009b      	lsls	r3, r3, #2
 800b5f6:	58d3      	ldr	r3, [r2, r3]
 800b5f8:	0018      	movs	r0, r3
 800b5fa:	f7fe fdc7 	bl	800a18c <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800b5fe:	687b      	ldr	r3, [r7, #4]
 800b600:	699b      	ldr	r3, [r3, #24]
 800b602:	2b00      	cmp	r3, #0
 800b604:	d005      	beq.n	800b612 <HAL_PCD_SuspendCallback+0x2a>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800b606:	4b05      	ldr	r3, [pc, #20]	; (800b61c <HAL_PCD_SuspendCallback+0x34>)
 800b608:	691a      	ldr	r2, [r3, #16]
 800b60a:	4b04      	ldr	r3, [pc, #16]	; (800b61c <HAL_PCD_SuspendCallback+0x34>)
 800b60c:	2106      	movs	r1, #6
 800b60e:	430a      	orrs	r2, r1
 800b610:	611a      	str	r2, [r3, #16]
  }
  /* USER CODE END 2 */
}
 800b612:	46c0      	nop			; (mov r8, r8)
 800b614:	46bd      	mov	sp, r7
 800b616:	b002      	add	sp, #8
 800b618:	bd80      	pop	{r7, pc}
 800b61a:	46c0      	nop			; (mov r8, r8)
 800b61c:	e000ed00 	.word	0xe000ed00

0800b620 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b620:	b580      	push	{r7, lr}
 800b622:	b082      	sub	sp, #8
 800b624:	af00      	add	r7, sp, #0
 800b626:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800b628:	687b      	ldr	r3, [r7, #4]
 800b62a:	699b      	ldr	r3, [r3, #24]
 800b62c:	2b00      	cmp	r3, #0
 800b62e:	d007      	beq.n	800b640 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800b630:	4b09      	ldr	r3, [pc, #36]	; (800b658 <HAL_PCD_ResumeCallback+0x38>)
 800b632:	691a      	ldr	r2, [r3, #16]
 800b634:	4b08      	ldr	r3, [pc, #32]	; (800b658 <HAL_PCD_ResumeCallback+0x38>)
 800b636:	2106      	movs	r1, #6
 800b638:	438a      	bics	r2, r1
 800b63a:	611a      	str	r2, [r3, #16]
    SystemClockConfig_Resume();
 800b63c:	f000 fa44 	bl	800bac8 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800b640:	687a      	ldr	r2, [r7, #4]
 800b642:	23bc      	movs	r3, #188	; 0xbc
 800b644:	009b      	lsls	r3, r3, #2
 800b646:	58d3      	ldr	r3, [r2, r3]
 800b648:	0018      	movs	r0, r3
 800b64a:	f7fe fdb7 	bl	800a1bc <USBD_LL_Resume>
}
 800b64e:	46c0      	nop			; (mov r8, r8)
 800b650:	46bd      	mov	sp, r7
 800b652:	b002      	add	sp, #8
 800b654:	bd80      	pop	{r7, pc}
 800b656:	46c0      	nop			; (mov r8, r8)
 800b658:	e000ed00 	.word	0xe000ed00

0800b65c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800b65c:	b580      	push	{r7, lr}
 800b65e:	b082      	sub	sp, #8
 800b660:	af00      	add	r7, sp, #0
 800b662:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800b664:	4a2d      	ldr	r2, [pc, #180]	; (800b71c <USBD_LL_Init+0xc0>)
 800b666:	23bc      	movs	r3, #188	; 0xbc
 800b668:	009b      	lsls	r3, r3, #2
 800b66a:	6879      	ldr	r1, [r7, #4]
 800b66c:	50d1      	str	r1, [r2, r3]
  pdev->pData = &hpcd_USB_FS;
 800b66e:	687a      	ldr	r2, [r7, #4]
 800b670:	23b0      	movs	r3, #176	; 0xb0
 800b672:	009b      	lsls	r3, r3, #2
 800b674:	4929      	ldr	r1, [pc, #164]	; (800b71c <USBD_LL_Init+0xc0>)
 800b676:	50d1      	str	r1, [r2, r3]

  hpcd_USB_FS.Instance = USB;
 800b678:	4b28      	ldr	r3, [pc, #160]	; (800b71c <USBD_LL_Init+0xc0>)
 800b67a:	4a29      	ldr	r2, [pc, #164]	; (800b720 <USBD_LL_Init+0xc4>)
 800b67c:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800b67e:	4b27      	ldr	r3, [pc, #156]	; (800b71c <USBD_LL_Init+0xc0>)
 800b680:	2208      	movs	r2, #8
 800b682:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800b684:	4b25      	ldr	r3, [pc, #148]	; (800b71c <USBD_LL_Init+0xc0>)
 800b686:	2202      	movs	r2, #2
 800b688:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800b68a:	4b24      	ldr	r3, [pc, #144]	; (800b71c <USBD_LL_Init+0xc0>)
 800b68c:	2202      	movs	r2, #2
 800b68e:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800b690:	4b22      	ldr	r3, [pc, #136]	; (800b71c <USBD_LL_Init+0xc0>)
 800b692:	2200      	movs	r2, #0
 800b694:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800b696:	4b21      	ldr	r3, [pc, #132]	; (800b71c <USBD_LL_Init+0xc0>)
 800b698:	2200      	movs	r2, #0
 800b69a:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800b69c:	4b1f      	ldr	r3, [pc, #124]	; (800b71c <USBD_LL_Init+0xc0>)
 800b69e:	2200      	movs	r2, #0
 800b6a0:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800b6a2:	4b1e      	ldr	r3, [pc, #120]	; (800b71c <USBD_LL_Init+0xc0>)
 800b6a4:	0018      	movs	r0, r3
 800b6a6:	f7f6 ffbb 	bl	8002620 <HAL_PCD_Init>
 800b6aa:	1e03      	subs	r3, r0, #0
 800b6ac:	d001      	beq.n	800b6b2 <USBD_LL_Init+0x56>
  {
    Error_Handler( );
 800b6ae:	f7f5 fdc7 	bl	8001240 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800b6b2:	687a      	ldr	r2, [r7, #4]
 800b6b4:	23b0      	movs	r3, #176	; 0xb0
 800b6b6:	009b      	lsls	r3, r3, #2
 800b6b8:	58d0      	ldr	r0, [r2, r3]
 800b6ba:	2318      	movs	r3, #24
 800b6bc:	2200      	movs	r2, #0
 800b6be:	2100      	movs	r1, #0
 800b6c0:	f7f8 fd9c 	bl	80041fc <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800b6c4:	687a      	ldr	r2, [r7, #4]
 800b6c6:	23b0      	movs	r3, #176	; 0xb0
 800b6c8:	009b      	lsls	r3, r3, #2
 800b6ca:	58d0      	ldr	r0, [r2, r3]
 800b6cc:	2358      	movs	r3, #88	; 0x58
 800b6ce:	2200      	movs	r2, #0
 800b6d0:	2180      	movs	r1, #128	; 0x80
 800b6d2:	f7f8 fd93 	bl	80041fc <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800b6d6:	687a      	ldr	r2, [r7, #4]
 800b6d8:	23b0      	movs	r3, #176	; 0xb0
 800b6da:	009b      	lsls	r3, r3, #2
 800b6dc:	58d0      	ldr	r0, [r2, r3]
 800b6de:	23c0      	movs	r3, #192	; 0xc0
 800b6e0:	2200      	movs	r2, #0
 800b6e2:	2181      	movs	r1, #129	; 0x81
 800b6e4:	f7f8 fd8a 	bl	80041fc <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800b6e8:	687a      	ldr	r2, [r7, #4]
 800b6ea:	23b0      	movs	r3, #176	; 0xb0
 800b6ec:	009b      	lsls	r3, r3, #2
 800b6ee:	58d0      	ldr	r0, [r2, r3]
 800b6f0:	2388      	movs	r3, #136	; 0x88
 800b6f2:	005b      	lsls	r3, r3, #1
 800b6f4:	2200      	movs	r2, #0
 800b6f6:	2101      	movs	r1, #1
 800b6f8:	f7f8 fd80 	bl	80041fc <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800b6fc:	687a      	ldr	r2, [r7, #4]
 800b6fe:	23b0      	movs	r3, #176	; 0xb0
 800b700:	009b      	lsls	r3, r3, #2
 800b702:	58d0      	ldr	r0, [r2, r3]
 800b704:	2380      	movs	r3, #128	; 0x80
 800b706:	005b      	lsls	r3, r3, #1
 800b708:	2200      	movs	r2, #0
 800b70a:	2182      	movs	r1, #130	; 0x82
 800b70c:	f7f8 fd76 	bl	80041fc <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800b710:	2300      	movs	r3, #0
}
 800b712:	0018      	movs	r0, r3
 800b714:	46bd      	mov	sp, r7
 800b716:	b002      	add	sp, #8
 800b718:	bd80      	pop	{r7, pc}
 800b71a:	46c0      	nop			; (mov r8, r8)
 800b71c:	200012ac 	.word	0x200012ac
 800b720:	40005c00 	.word	0x40005c00

0800b724 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800b724:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b726:	b085      	sub	sp, #20
 800b728:	af00      	add	r7, sp, #0
 800b72a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b72c:	210f      	movs	r1, #15
 800b72e:	187b      	adds	r3, r7, r1
 800b730:	2200      	movs	r2, #0
 800b732:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b734:	260e      	movs	r6, #14
 800b736:	19bb      	adds	r3, r7, r6
 800b738:	2200      	movs	r2, #0
 800b73a:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_Start(pdev->pData);
 800b73c:	687a      	ldr	r2, [r7, #4]
 800b73e:	23b0      	movs	r3, #176	; 0xb0
 800b740:	009b      	lsls	r3, r3, #2
 800b742:	58d3      	ldr	r3, [r2, r3]
 800b744:	000d      	movs	r5, r1
 800b746:	187c      	adds	r4, r7, r1
 800b748:	0018      	movs	r0, r3
 800b74a:	f7f7 f879 	bl	8002840 <HAL_PCD_Start>
 800b74e:	0003      	movs	r3, r0
 800b750:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b752:	19bc      	adds	r4, r7, r6
 800b754:	197b      	adds	r3, r7, r5
 800b756:	781b      	ldrb	r3, [r3, #0]
 800b758:	0018      	movs	r0, r3
 800b75a:	f000 f9bc 	bl	800bad6 <USBD_Get_USB_Status>
 800b75e:	0003      	movs	r3, r0
 800b760:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800b762:	19bb      	adds	r3, r7, r6
 800b764:	781b      	ldrb	r3, [r3, #0]
}
 800b766:	0018      	movs	r0, r3
 800b768:	46bd      	mov	sp, r7
 800b76a:	b005      	add	sp, #20
 800b76c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800b76e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800b76e:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b770:	b085      	sub	sp, #20
 800b772:	af00      	add	r7, sp, #0
 800b774:	6078      	str	r0, [r7, #4]
 800b776:	000c      	movs	r4, r1
 800b778:	0010      	movs	r0, r2
 800b77a:	0019      	movs	r1, r3
 800b77c:	1cfb      	adds	r3, r7, #3
 800b77e:	1c22      	adds	r2, r4, #0
 800b780:	701a      	strb	r2, [r3, #0]
 800b782:	1cbb      	adds	r3, r7, #2
 800b784:	1c02      	adds	r2, r0, #0
 800b786:	701a      	strb	r2, [r3, #0]
 800b788:	003b      	movs	r3, r7
 800b78a:	1c0a      	adds	r2, r1, #0
 800b78c:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b78e:	260f      	movs	r6, #15
 800b790:	19bb      	adds	r3, r7, r6
 800b792:	2200      	movs	r2, #0
 800b794:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b796:	250e      	movs	r5, #14
 800b798:	197b      	adds	r3, r7, r5
 800b79a:	2200      	movs	r2, #0
 800b79c:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800b79e:	687a      	ldr	r2, [r7, #4]
 800b7a0:	23b0      	movs	r3, #176	; 0xb0
 800b7a2:	009b      	lsls	r3, r3, #2
 800b7a4:	58d0      	ldr	r0, [r2, r3]
 800b7a6:	19bc      	adds	r4, r7, r6
 800b7a8:	1cbb      	adds	r3, r7, #2
 800b7aa:	781d      	ldrb	r5, [r3, #0]
 800b7ac:	003b      	movs	r3, r7
 800b7ae:	881a      	ldrh	r2, [r3, #0]
 800b7b0:	1cfb      	adds	r3, r7, #3
 800b7b2:	7819      	ldrb	r1, [r3, #0]
 800b7b4:	002b      	movs	r3, r5
 800b7b6:	f7f7 fa10 	bl	8002bda <HAL_PCD_EP_Open>
 800b7ba:	0003      	movs	r3, r0
 800b7bc:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b7be:	250e      	movs	r5, #14
 800b7c0:	197c      	adds	r4, r7, r5
 800b7c2:	19bb      	adds	r3, r7, r6
 800b7c4:	781b      	ldrb	r3, [r3, #0]
 800b7c6:	0018      	movs	r0, r3
 800b7c8:	f000 f985 	bl	800bad6 <USBD_Get_USB_Status>
 800b7cc:	0003      	movs	r3, r0
 800b7ce:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800b7d0:	197b      	adds	r3, r7, r5
 800b7d2:	781b      	ldrb	r3, [r3, #0]
}
 800b7d4:	0018      	movs	r0, r3
 800b7d6:	46bd      	mov	sp, r7
 800b7d8:	b005      	add	sp, #20
 800b7da:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800b7dc <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b7dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b7de:	b085      	sub	sp, #20
 800b7e0:	af00      	add	r7, sp, #0
 800b7e2:	6078      	str	r0, [r7, #4]
 800b7e4:	000a      	movs	r2, r1
 800b7e6:	1cfb      	adds	r3, r7, #3
 800b7e8:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b7ea:	210f      	movs	r1, #15
 800b7ec:	187b      	adds	r3, r7, r1
 800b7ee:	2200      	movs	r2, #0
 800b7f0:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b7f2:	260e      	movs	r6, #14
 800b7f4:	19bb      	adds	r3, r7, r6
 800b7f6:	2200      	movs	r2, #0
 800b7f8:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800b7fa:	687a      	ldr	r2, [r7, #4]
 800b7fc:	23b0      	movs	r3, #176	; 0xb0
 800b7fe:	009b      	lsls	r3, r3, #2
 800b800:	58d2      	ldr	r2, [r2, r3]
 800b802:	000d      	movs	r5, r1
 800b804:	187c      	adds	r4, r7, r1
 800b806:	1cfb      	adds	r3, r7, #3
 800b808:	781b      	ldrb	r3, [r3, #0]
 800b80a:	0019      	movs	r1, r3
 800b80c:	0010      	movs	r0, r2
 800b80e:	f7f7 fa5c 	bl	8002cca <HAL_PCD_EP_Close>
 800b812:	0003      	movs	r3, r0
 800b814:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b816:	19bc      	adds	r4, r7, r6
 800b818:	197b      	adds	r3, r7, r5
 800b81a:	781b      	ldrb	r3, [r3, #0]
 800b81c:	0018      	movs	r0, r3
 800b81e:	f000 f95a 	bl	800bad6 <USBD_Get_USB_Status>
 800b822:	0003      	movs	r3, r0
 800b824:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800b826:	19bb      	adds	r3, r7, r6
 800b828:	781b      	ldrb	r3, [r3, #0]
}
 800b82a:	0018      	movs	r0, r3
 800b82c:	46bd      	mov	sp, r7
 800b82e:	b005      	add	sp, #20
 800b830:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800b832 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b832:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b834:	b085      	sub	sp, #20
 800b836:	af00      	add	r7, sp, #0
 800b838:	6078      	str	r0, [r7, #4]
 800b83a:	000a      	movs	r2, r1
 800b83c:	1cfb      	adds	r3, r7, #3
 800b83e:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b840:	210f      	movs	r1, #15
 800b842:	187b      	adds	r3, r7, r1
 800b844:	2200      	movs	r2, #0
 800b846:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b848:	260e      	movs	r6, #14
 800b84a:	19bb      	adds	r3, r7, r6
 800b84c:	2200      	movs	r2, #0
 800b84e:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800b850:	687a      	ldr	r2, [r7, #4]
 800b852:	23b0      	movs	r3, #176	; 0xb0
 800b854:	009b      	lsls	r3, r3, #2
 800b856:	58d2      	ldr	r2, [r2, r3]
 800b858:	000d      	movs	r5, r1
 800b85a:	187c      	adds	r4, r7, r1
 800b85c:	1cfb      	adds	r3, r7, #3
 800b85e:	781b      	ldrb	r3, [r3, #0]
 800b860:	0019      	movs	r1, r3
 800b862:	0010      	movs	r0, r2
 800b864:	f7f7 fb28 	bl	8002eb8 <HAL_PCD_EP_SetStall>
 800b868:	0003      	movs	r3, r0
 800b86a:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b86c:	19bc      	adds	r4, r7, r6
 800b86e:	197b      	adds	r3, r7, r5
 800b870:	781b      	ldrb	r3, [r3, #0]
 800b872:	0018      	movs	r0, r3
 800b874:	f000 f92f 	bl	800bad6 <USBD_Get_USB_Status>
 800b878:	0003      	movs	r3, r0
 800b87a:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800b87c:	19bb      	adds	r3, r7, r6
 800b87e:	781b      	ldrb	r3, [r3, #0]
}
 800b880:	0018      	movs	r0, r3
 800b882:	46bd      	mov	sp, r7
 800b884:	b005      	add	sp, #20
 800b886:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800b888 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b888:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b88a:	b085      	sub	sp, #20
 800b88c:	af00      	add	r7, sp, #0
 800b88e:	6078      	str	r0, [r7, #4]
 800b890:	000a      	movs	r2, r1
 800b892:	1cfb      	adds	r3, r7, #3
 800b894:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b896:	210f      	movs	r1, #15
 800b898:	187b      	adds	r3, r7, r1
 800b89a:	2200      	movs	r2, #0
 800b89c:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b89e:	260e      	movs	r6, #14
 800b8a0:	19bb      	adds	r3, r7, r6
 800b8a2:	2200      	movs	r2, #0
 800b8a4:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800b8a6:	687a      	ldr	r2, [r7, #4]
 800b8a8:	23b0      	movs	r3, #176	; 0xb0
 800b8aa:	009b      	lsls	r3, r3, #2
 800b8ac:	58d2      	ldr	r2, [r2, r3]
 800b8ae:	000d      	movs	r5, r1
 800b8b0:	187c      	adds	r4, r7, r1
 800b8b2:	1cfb      	adds	r3, r7, #3
 800b8b4:	781b      	ldrb	r3, [r3, #0]
 800b8b6:	0019      	movs	r1, r3
 800b8b8:	0010      	movs	r0, r2
 800b8ba:	f7f7 fb59 	bl	8002f70 <HAL_PCD_EP_ClrStall>
 800b8be:	0003      	movs	r3, r0
 800b8c0:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b8c2:	19bc      	adds	r4, r7, r6
 800b8c4:	197b      	adds	r3, r7, r5
 800b8c6:	781b      	ldrb	r3, [r3, #0]
 800b8c8:	0018      	movs	r0, r3
 800b8ca:	f000 f904 	bl	800bad6 <USBD_Get_USB_Status>
 800b8ce:	0003      	movs	r3, r0
 800b8d0:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800b8d2:	19bb      	adds	r3, r7, r6
 800b8d4:	781b      	ldrb	r3, [r3, #0]
}
 800b8d6:	0018      	movs	r0, r3
 800b8d8:	46bd      	mov	sp, r7
 800b8da:	b005      	add	sp, #20
 800b8dc:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800b8de <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b8de:	b580      	push	{r7, lr}
 800b8e0:	b084      	sub	sp, #16
 800b8e2:	af00      	add	r7, sp, #0
 800b8e4:	6078      	str	r0, [r7, #4]
 800b8e6:	000a      	movs	r2, r1
 800b8e8:	1cfb      	adds	r3, r7, #3
 800b8ea:	701a      	strb	r2, [r3, #0]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800b8ec:	687a      	ldr	r2, [r7, #4]
 800b8ee:	23b0      	movs	r3, #176	; 0xb0
 800b8f0:	009b      	lsls	r3, r3, #2
 800b8f2:	58d3      	ldr	r3, [r2, r3]
 800b8f4:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800b8f6:	1cfb      	adds	r3, r7, #3
 800b8f8:	781b      	ldrb	r3, [r3, #0]
 800b8fa:	b25b      	sxtb	r3, r3
 800b8fc:	2b00      	cmp	r3, #0
 800b8fe:	da0d      	bge.n	800b91c <USBD_LL_IsStallEP+0x3e>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800b900:	1cfb      	adds	r3, r7, #3
 800b902:	781b      	ldrb	r3, [r3, #0]
 800b904:	227f      	movs	r2, #127	; 0x7f
 800b906:	4013      	ands	r3, r2
 800b908:	68f9      	ldr	r1, [r7, #12]
 800b90a:	1c5a      	adds	r2, r3, #1
 800b90c:	0013      	movs	r3, r2
 800b90e:	009b      	lsls	r3, r3, #2
 800b910:	189b      	adds	r3, r3, r2
 800b912:	00db      	lsls	r3, r3, #3
 800b914:	18cb      	adds	r3, r1, r3
 800b916:	3302      	adds	r3, #2
 800b918:	781b      	ldrb	r3, [r3, #0]
 800b91a:	e00d      	b.n	800b938 <USBD_LL_IsStallEP+0x5a>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800b91c:	1cfb      	adds	r3, r7, #3
 800b91e:	781b      	ldrb	r3, [r3, #0]
 800b920:	227f      	movs	r2, #127	; 0x7f
 800b922:	401a      	ands	r2, r3
 800b924:	68f8      	ldr	r0, [r7, #12]
 800b926:	23b5      	movs	r3, #181	; 0xb5
 800b928:	0059      	lsls	r1, r3, #1
 800b92a:	0013      	movs	r3, r2
 800b92c:	009b      	lsls	r3, r3, #2
 800b92e:	189b      	adds	r3, r3, r2
 800b930:	00db      	lsls	r3, r3, #3
 800b932:	18c3      	adds	r3, r0, r3
 800b934:	185b      	adds	r3, r3, r1
 800b936:	781b      	ldrb	r3, [r3, #0]
  }
}
 800b938:	0018      	movs	r0, r3
 800b93a:	46bd      	mov	sp, r7
 800b93c:	b004      	add	sp, #16
 800b93e:	bd80      	pop	{r7, pc}

0800b940 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800b940:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b942:	b085      	sub	sp, #20
 800b944:	af00      	add	r7, sp, #0
 800b946:	6078      	str	r0, [r7, #4]
 800b948:	000a      	movs	r2, r1
 800b94a:	1cfb      	adds	r3, r7, #3
 800b94c:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b94e:	210f      	movs	r1, #15
 800b950:	187b      	adds	r3, r7, r1
 800b952:	2200      	movs	r2, #0
 800b954:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b956:	260e      	movs	r6, #14
 800b958:	19bb      	adds	r3, r7, r6
 800b95a:	2200      	movs	r2, #0
 800b95c:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800b95e:	687a      	ldr	r2, [r7, #4]
 800b960:	23b0      	movs	r3, #176	; 0xb0
 800b962:	009b      	lsls	r3, r3, #2
 800b964:	58d2      	ldr	r2, [r2, r3]
 800b966:	000d      	movs	r5, r1
 800b968:	187c      	adds	r4, r7, r1
 800b96a:	1cfb      	adds	r3, r7, #3
 800b96c:	781b      	ldrb	r3, [r3, #0]
 800b96e:	0019      	movs	r1, r3
 800b970:	0010      	movs	r0, r2
 800b972:	f7f7 f907 	bl	8002b84 <HAL_PCD_SetAddress>
 800b976:	0003      	movs	r3, r0
 800b978:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b97a:	19bc      	adds	r4, r7, r6
 800b97c:	197b      	adds	r3, r7, r5
 800b97e:	781b      	ldrb	r3, [r3, #0]
 800b980:	0018      	movs	r0, r3
 800b982:	f000 f8a8 	bl	800bad6 <USBD_Get_USB_Status>
 800b986:	0003      	movs	r3, r0
 800b988:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800b98a:	19bb      	adds	r3, r7, r6
 800b98c:	781b      	ldrb	r3, [r3, #0]
}
 800b98e:	0018      	movs	r0, r3
 800b990:	46bd      	mov	sp, r7
 800b992:	b005      	add	sp, #20
 800b994:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800b996 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800b996:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b998:	b087      	sub	sp, #28
 800b99a:	af00      	add	r7, sp, #0
 800b99c:	60f8      	str	r0, [r7, #12]
 800b99e:	0008      	movs	r0, r1
 800b9a0:	607a      	str	r2, [r7, #4]
 800b9a2:	0019      	movs	r1, r3
 800b9a4:	230b      	movs	r3, #11
 800b9a6:	18fb      	adds	r3, r7, r3
 800b9a8:	1c02      	adds	r2, r0, #0
 800b9aa:	701a      	strb	r2, [r3, #0]
 800b9ac:	2408      	movs	r4, #8
 800b9ae:	193b      	adds	r3, r7, r4
 800b9b0:	1c0a      	adds	r2, r1, #0
 800b9b2:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b9b4:	2117      	movs	r1, #23
 800b9b6:	187b      	adds	r3, r7, r1
 800b9b8:	2200      	movs	r2, #0
 800b9ba:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b9bc:	2516      	movs	r5, #22
 800b9be:	197b      	adds	r3, r7, r5
 800b9c0:	2200      	movs	r2, #0
 800b9c2:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800b9c4:	68fa      	ldr	r2, [r7, #12]
 800b9c6:	23b0      	movs	r3, #176	; 0xb0
 800b9c8:	009b      	lsls	r3, r3, #2
 800b9ca:	58d0      	ldr	r0, [r2, r3]
 800b9cc:	193b      	adds	r3, r7, r4
 800b9ce:	881d      	ldrh	r5, [r3, #0]
 800b9d0:	000e      	movs	r6, r1
 800b9d2:	187c      	adds	r4, r7, r1
 800b9d4:	687a      	ldr	r2, [r7, #4]
 800b9d6:	230b      	movs	r3, #11
 800b9d8:	18fb      	adds	r3, r7, r3
 800b9da:	7819      	ldrb	r1, [r3, #0]
 800b9dc:	002b      	movs	r3, r5
 800b9de:	f7f7 fa22 	bl	8002e26 <HAL_PCD_EP_Transmit>
 800b9e2:	0003      	movs	r3, r0
 800b9e4:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b9e6:	2516      	movs	r5, #22
 800b9e8:	197c      	adds	r4, r7, r5
 800b9ea:	19bb      	adds	r3, r7, r6
 800b9ec:	781b      	ldrb	r3, [r3, #0]
 800b9ee:	0018      	movs	r0, r3
 800b9f0:	f000 f871 	bl	800bad6 <USBD_Get_USB_Status>
 800b9f4:	0003      	movs	r3, r0
 800b9f6:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800b9f8:	197b      	adds	r3, r7, r5
 800b9fa:	781b      	ldrb	r3, [r3, #0]
}
 800b9fc:	0018      	movs	r0, r3
 800b9fe:	46bd      	mov	sp, r7
 800ba00:	b007      	add	sp, #28
 800ba02:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800ba04 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800ba04:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ba06:	b087      	sub	sp, #28
 800ba08:	af00      	add	r7, sp, #0
 800ba0a:	60f8      	str	r0, [r7, #12]
 800ba0c:	0008      	movs	r0, r1
 800ba0e:	607a      	str	r2, [r7, #4]
 800ba10:	0019      	movs	r1, r3
 800ba12:	230b      	movs	r3, #11
 800ba14:	18fb      	adds	r3, r7, r3
 800ba16:	1c02      	adds	r2, r0, #0
 800ba18:	701a      	strb	r2, [r3, #0]
 800ba1a:	2408      	movs	r4, #8
 800ba1c:	193b      	adds	r3, r7, r4
 800ba1e:	1c0a      	adds	r2, r1, #0
 800ba20:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ba22:	2117      	movs	r1, #23
 800ba24:	187b      	adds	r3, r7, r1
 800ba26:	2200      	movs	r2, #0
 800ba28:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ba2a:	2516      	movs	r5, #22
 800ba2c:	197b      	adds	r3, r7, r5
 800ba2e:	2200      	movs	r2, #0
 800ba30:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800ba32:	68fa      	ldr	r2, [r7, #12]
 800ba34:	23b0      	movs	r3, #176	; 0xb0
 800ba36:	009b      	lsls	r3, r3, #2
 800ba38:	58d0      	ldr	r0, [r2, r3]
 800ba3a:	193b      	adds	r3, r7, r4
 800ba3c:	881d      	ldrh	r5, [r3, #0]
 800ba3e:	000e      	movs	r6, r1
 800ba40:	187c      	adds	r4, r7, r1
 800ba42:	687a      	ldr	r2, [r7, #4]
 800ba44:	230b      	movs	r3, #11
 800ba46:	18fb      	adds	r3, r7, r3
 800ba48:	7819      	ldrb	r1, [r3, #0]
 800ba4a:	002b      	movs	r3, r5
 800ba4c:	f7f7 f98e 	bl	8002d6c <HAL_PCD_EP_Receive>
 800ba50:	0003      	movs	r3, r0
 800ba52:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ba54:	2516      	movs	r5, #22
 800ba56:	197c      	adds	r4, r7, r5
 800ba58:	19bb      	adds	r3, r7, r6
 800ba5a:	781b      	ldrb	r3, [r3, #0]
 800ba5c:	0018      	movs	r0, r3
 800ba5e:	f000 f83a 	bl	800bad6 <USBD_Get_USB_Status>
 800ba62:	0003      	movs	r3, r0
 800ba64:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800ba66:	197b      	adds	r3, r7, r5
 800ba68:	781b      	ldrb	r3, [r3, #0]
}
 800ba6a:	0018      	movs	r0, r3
 800ba6c:	46bd      	mov	sp, r7
 800ba6e:	b007      	add	sp, #28
 800ba70:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800ba72 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ba72:	b580      	push	{r7, lr}
 800ba74:	b082      	sub	sp, #8
 800ba76:	af00      	add	r7, sp, #0
 800ba78:	6078      	str	r0, [r7, #4]
 800ba7a:	000a      	movs	r2, r1
 800ba7c:	1cfb      	adds	r3, r7, #3
 800ba7e:	701a      	strb	r2, [r3, #0]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800ba80:	687a      	ldr	r2, [r7, #4]
 800ba82:	23b0      	movs	r3, #176	; 0xb0
 800ba84:	009b      	lsls	r3, r3, #2
 800ba86:	58d2      	ldr	r2, [r2, r3]
 800ba88:	1cfb      	adds	r3, r7, #3
 800ba8a:	781b      	ldrb	r3, [r3, #0]
 800ba8c:	0019      	movs	r1, r3
 800ba8e:	0010      	movs	r0, r2
 800ba90:	f7f7 f9b0 	bl	8002df4 <HAL_PCD_EP_GetRxCount>
 800ba94:	0003      	movs	r3, r0
}
 800ba96:	0018      	movs	r0, r3
 800ba98:	46bd      	mov	sp, r7
 800ba9a:	b002      	add	sp, #8
 800ba9c:	bd80      	pop	{r7, pc}
	...

0800baa0 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800baa0:	b580      	push	{r7, lr}
 800baa2:	b082      	sub	sp, #8
 800baa4:	af00      	add	r7, sp, #0
 800baa6:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800baa8:	4b02      	ldr	r3, [pc, #8]	; (800bab4 <USBD_static_malloc+0x14>)
}
 800baaa:	0018      	movs	r0, r3
 800baac:	46bd      	mov	sp, r7
 800baae:	b002      	add	sp, #8
 800bab0:	bd80      	pop	{r7, pc}
 800bab2:	46c0      	nop			; (mov r8, r8)
 800bab4:	2000021c 	.word	0x2000021c

0800bab8 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800bab8:	b580      	push	{r7, lr}
 800baba:	b082      	sub	sp, #8
 800babc:	af00      	add	r7, sp, #0
 800babe:	6078      	str	r0, [r7, #4]

}
 800bac0:	46c0      	nop			; (mov r8, r8)
 800bac2:	46bd      	mov	sp, r7
 800bac4:	b002      	add	sp, #8
 800bac6:	bd80      	pop	{r7, pc}

0800bac8 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB Resume CallBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800bac8:	b580      	push	{r7, lr}
 800baca:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800bacc:	f7f4 ff36 	bl	800093c <SystemClock_Config>
}
 800bad0:	46c0      	nop			; (mov r8, r8)
 800bad2:	46bd      	mov	sp, r7
 800bad4:	bd80      	pop	{r7, pc}

0800bad6 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800bad6:	b580      	push	{r7, lr}
 800bad8:	b084      	sub	sp, #16
 800bada:	af00      	add	r7, sp, #0
 800badc:	0002      	movs	r2, r0
 800bade:	1dfb      	adds	r3, r7, #7
 800bae0:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bae2:	230f      	movs	r3, #15
 800bae4:	18fb      	adds	r3, r7, r3
 800bae6:	2200      	movs	r2, #0
 800bae8:	701a      	strb	r2, [r3, #0]

  switch (hal_status)
 800baea:	1dfb      	adds	r3, r7, #7
 800baec:	781b      	ldrb	r3, [r3, #0]
 800baee:	2b03      	cmp	r3, #3
 800baf0:	d017      	beq.n	800bb22 <USBD_Get_USB_Status+0x4c>
 800baf2:	dc1b      	bgt.n	800bb2c <USBD_Get_USB_Status+0x56>
 800baf4:	2b02      	cmp	r3, #2
 800baf6:	d00f      	beq.n	800bb18 <USBD_Get_USB_Status+0x42>
 800baf8:	dc18      	bgt.n	800bb2c <USBD_Get_USB_Status+0x56>
 800bafa:	2b00      	cmp	r3, #0
 800bafc:	d002      	beq.n	800bb04 <USBD_Get_USB_Status+0x2e>
 800bafe:	2b01      	cmp	r3, #1
 800bb00:	d005      	beq.n	800bb0e <USBD_Get_USB_Status+0x38>
 800bb02:	e013      	b.n	800bb2c <USBD_Get_USB_Status+0x56>
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800bb04:	230f      	movs	r3, #15
 800bb06:	18fb      	adds	r3, r7, r3
 800bb08:	2200      	movs	r2, #0
 800bb0a:	701a      	strb	r2, [r3, #0]
    break;
 800bb0c:	e013      	b.n	800bb36 <USBD_Get_USB_Status+0x60>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800bb0e:	230f      	movs	r3, #15
 800bb10:	18fb      	adds	r3, r7, r3
 800bb12:	2202      	movs	r2, #2
 800bb14:	701a      	strb	r2, [r3, #0]
    break;
 800bb16:	e00e      	b.n	800bb36 <USBD_Get_USB_Status+0x60>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800bb18:	230f      	movs	r3, #15
 800bb1a:	18fb      	adds	r3, r7, r3
 800bb1c:	2201      	movs	r2, #1
 800bb1e:	701a      	strb	r2, [r3, #0]
    break;
 800bb20:	e009      	b.n	800bb36 <USBD_Get_USB_Status+0x60>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800bb22:	230f      	movs	r3, #15
 800bb24:	18fb      	adds	r3, r7, r3
 800bb26:	2202      	movs	r2, #2
 800bb28:	701a      	strb	r2, [r3, #0]
    break;
 800bb2a:	e004      	b.n	800bb36 <USBD_Get_USB_Status+0x60>
    default :
      usb_status = USBD_FAIL;
 800bb2c:	230f      	movs	r3, #15
 800bb2e:	18fb      	adds	r3, r7, r3
 800bb30:	2202      	movs	r2, #2
 800bb32:	701a      	strb	r2, [r3, #0]
    break;
 800bb34:	46c0      	nop			; (mov r8, r8)
  }
  return usb_status;
 800bb36:	230f      	movs	r3, #15
 800bb38:	18fb      	adds	r3, r7, r3
 800bb3a:	781b      	ldrb	r3, [r3, #0]
}
 800bb3c:	0018      	movs	r0, r3
 800bb3e:	46bd      	mov	sp, r7
 800bb40:	b004      	add	sp, #16
 800bb42:	bd80      	pop	{r7, pc}

0800bb44 <__errno>:
 800bb44:	4b01      	ldr	r3, [pc, #4]	; (800bb4c <__errno+0x8>)
 800bb46:	6818      	ldr	r0, [r3, #0]
 800bb48:	4770      	bx	lr
 800bb4a:	46c0      	nop			; (mov r8, r8)
 800bb4c:	2000017c 	.word	0x2000017c

0800bb50 <__libc_init_array>:
 800bb50:	b570      	push	{r4, r5, r6, lr}
 800bb52:	2600      	movs	r6, #0
 800bb54:	4d0c      	ldr	r5, [pc, #48]	; (800bb88 <__libc_init_array+0x38>)
 800bb56:	4c0d      	ldr	r4, [pc, #52]	; (800bb8c <__libc_init_array+0x3c>)
 800bb58:	1b64      	subs	r4, r4, r5
 800bb5a:	10a4      	asrs	r4, r4, #2
 800bb5c:	42a6      	cmp	r6, r4
 800bb5e:	d109      	bne.n	800bb74 <__libc_init_array+0x24>
 800bb60:	2600      	movs	r6, #0
 800bb62:	f000 fc5b 	bl	800c41c <_init>
 800bb66:	4d0a      	ldr	r5, [pc, #40]	; (800bb90 <__libc_init_array+0x40>)
 800bb68:	4c0a      	ldr	r4, [pc, #40]	; (800bb94 <__libc_init_array+0x44>)
 800bb6a:	1b64      	subs	r4, r4, r5
 800bb6c:	10a4      	asrs	r4, r4, #2
 800bb6e:	42a6      	cmp	r6, r4
 800bb70:	d105      	bne.n	800bb7e <__libc_init_array+0x2e>
 800bb72:	bd70      	pop	{r4, r5, r6, pc}
 800bb74:	00b3      	lsls	r3, r6, #2
 800bb76:	58eb      	ldr	r3, [r5, r3]
 800bb78:	4798      	blx	r3
 800bb7a:	3601      	adds	r6, #1
 800bb7c:	e7ee      	b.n	800bb5c <__libc_init_array+0xc>
 800bb7e:	00b3      	lsls	r3, r6, #2
 800bb80:	58eb      	ldr	r3, [r5, r3]
 800bb82:	4798      	blx	r3
 800bb84:	3601      	adds	r6, #1
 800bb86:	e7f2      	b.n	800bb6e <__libc_init_array+0x1e>
 800bb88:	0800c624 	.word	0x0800c624
 800bb8c:	0800c624 	.word	0x0800c624
 800bb90:	0800c624 	.word	0x0800c624
 800bb94:	0800c628 	.word	0x0800c628

0800bb98 <malloc>:
 800bb98:	b510      	push	{r4, lr}
 800bb9a:	4b03      	ldr	r3, [pc, #12]	; (800bba8 <malloc+0x10>)
 800bb9c:	0001      	movs	r1, r0
 800bb9e:	6818      	ldr	r0, [r3, #0]
 800bba0:	f000 f860 	bl	800bc64 <_malloc_r>
 800bba4:	bd10      	pop	{r4, pc}
 800bba6:	46c0      	nop			; (mov r8, r8)
 800bba8:	2000017c 	.word	0x2000017c

0800bbac <free>:
 800bbac:	b510      	push	{r4, lr}
 800bbae:	4b03      	ldr	r3, [pc, #12]	; (800bbbc <free+0x10>)
 800bbb0:	0001      	movs	r1, r0
 800bbb2:	6818      	ldr	r0, [r3, #0]
 800bbb4:	f000 f80c 	bl	800bbd0 <_free_r>
 800bbb8:	bd10      	pop	{r4, pc}
 800bbba:	46c0      	nop			; (mov r8, r8)
 800bbbc:	2000017c 	.word	0x2000017c

0800bbc0 <memset>:
 800bbc0:	0003      	movs	r3, r0
 800bbc2:	1882      	adds	r2, r0, r2
 800bbc4:	4293      	cmp	r3, r2
 800bbc6:	d100      	bne.n	800bbca <memset+0xa>
 800bbc8:	4770      	bx	lr
 800bbca:	7019      	strb	r1, [r3, #0]
 800bbcc:	3301      	adds	r3, #1
 800bbce:	e7f9      	b.n	800bbc4 <memset+0x4>

0800bbd0 <_free_r>:
 800bbd0:	b570      	push	{r4, r5, r6, lr}
 800bbd2:	0005      	movs	r5, r0
 800bbd4:	2900      	cmp	r1, #0
 800bbd6:	d010      	beq.n	800bbfa <_free_r+0x2a>
 800bbd8:	1f0c      	subs	r4, r1, #4
 800bbda:	6823      	ldr	r3, [r4, #0]
 800bbdc:	2b00      	cmp	r3, #0
 800bbde:	da00      	bge.n	800bbe2 <_free_r+0x12>
 800bbe0:	18e4      	adds	r4, r4, r3
 800bbe2:	0028      	movs	r0, r5
 800bbe4:	f000 f8ce 	bl	800bd84 <__malloc_lock>
 800bbe8:	4a1d      	ldr	r2, [pc, #116]	; (800bc60 <_free_r+0x90>)
 800bbea:	6813      	ldr	r3, [r2, #0]
 800bbec:	2b00      	cmp	r3, #0
 800bbee:	d105      	bne.n	800bbfc <_free_r+0x2c>
 800bbf0:	6063      	str	r3, [r4, #4]
 800bbf2:	6014      	str	r4, [r2, #0]
 800bbf4:	0028      	movs	r0, r5
 800bbf6:	f000 f8cd 	bl	800bd94 <__malloc_unlock>
 800bbfa:	bd70      	pop	{r4, r5, r6, pc}
 800bbfc:	42a3      	cmp	r3, r4
 800bbfe:	d908      	bls.n	800bc12 <_free_r+0x42>
 800bc00:	6821      	ldr	r1, [r4, #0]
 800bc02:	1860      	adds	r0, r4, r1
 800bc04:	4283      	cmp	r3, r0
 800bc06:	d1f3      	bne.n	800bbf0 <_free_r+0x20>
 800bc08:	6818      	ldr	r0, [r3, #0]
 800bc0a:	685b      	ldr	r3, [r3, #4]
 800bc0c:	1841      	adds	r1, r0, r1
 800bc0e:	6021      	str	r1, [r4, #0]
 800bc10:	e7ee      	b.n	800bbf0 <_free_r+0x20>
 800bc12:	001a      	movs	r2, r3
 800bc14:	685b      	ldr	r3, [r3, #4]
 800bc16:	2b00      	cmp	r3, #0
 800bc18:	d001      	beq.n	800bc1e <_free_r+0x4e>
 800bc1a:	42a3      	cmp	r3, r4
 800bc1c:	d9f9      	bls.n	800bc12 <_free_r+0x42>
 800bc1e:	6811      	ldr	r1, [r2, #0]
 800bc20:	1850      	adds	r0, r2, r1
 800bc22:	42a0      	cmp	r0, r4
 800bc24:	d10b      	bne.n	800bc3e <_free_r+0x6e>
 800bc26:	6820      	ldr	r0, [r4, #0]
 800bc28:	1809      	adds	r1, r1, r0
 800bc2a:	1850      	adds	r0, r2, r1
 800bc2c:	6011      	str	r1, [r2, #0]
 800bc2e:	4283      	cmp	r3, r0
 800bc30:	d1e0      	bne.n	800bbf4 <_free_r+0x24>
 800bc32:	6818      	ldr	r0, [r3, #0]
 800bc34:	685b      	ldr	r3, [r3, #4]
 800bc36:	1841      	adds	r1, r0, r1
 800bc38:	6011      	str	r1, [r2, #0]
 800bc3a:	6053      	str	r3, [r2, #4]
 800bc3c:	e7da      	b.n	800bbf4 <_free_r+0x24>
 800bc3e:	42a0      	cmp	r0, r4
 800bc40:	d902      	bls.n	800bc48 <_free_r+0x78>
 800bc42:	230c      	movs	r3, #12
 800bc44:	602b      	str	r3, [r5, #0]
 800bc46:	e7d5      	b.n	800bbf4 <_free_r+0x24>
 800bc48:	6821      	ldr	r1, [r4, #0]
 800bc4a:	1860      	adds	r0, r4, r1
 800bc4c:	4283      	cmp	r3, r0
 800bc4e:	d103      	bne.n	800bc58 <_free_r+0x88>
 800bc50:	6818      	ldr	r0, [r3, #0]
 800bc52:	685b      	ldr	r3, [r3, #4]
 800bc54:	1841      	adds	r1, r0, r1
 800bc56:	6021      	str	r1, [r4, #0]
 800bc58:	6063      	str	r3, [r4, #4]
 800bc5a:	6054      	str	r4, [r2, #4]
 800bc5c:	e7ca      	b.n	800bbf4 <_free_r+0x24>
 800bc5e:	46c0      	nop			; (mov r8, r8)
 800bc60:	2000043c 	.word	0x2000043c

0800bc64 <_malloc_r>:
 800bc64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bc66:	2303      	movs	r3, #3
 800bc68:	1ccd      	adds	r5, r1, #3
 800bc6a:	439d      	bics	r5, r3
 800bc6c:	3508      	adds	r5, #8
 800bc6e:	0006      	movs	r6, r0
 800bc70:	2d0c      	cmp	r5, #12
 800bc72:	d21f      	bcs.n	800bcb4 <_malloc_r+0x50>
 800bc74:	250c      	movs	r5, #12
 800bc76:	42a9      	cmp	r1, r5
 800bc78:	d81e      	bhi.n	800bcb8 <_malloc_r+0x54>
 800bc7a:	0030      	movs	r0, r6
 800bc7c:	f000 f882 	bl	800bd84 <__malloc_lock>
 800bc80:	4925      	ldr	r1, [pc, #148]	; (800bd18 <_malloc_r+0xb4>)
 800bc82:	680a      	ldr	r2, [r1, #0]
 800bc84:	0014      	movs	r4, r2
 800bc86:	2c00      	cmp	r4, #0
 800bc88:	d11a      	bne.n	800bcc0 <_malloc_r+0x5c>
 800bc8a:	4f24      	ldr	r7, [pc, #144]	; (800bd1c <_malloc_r+0xb8>)
 800bc8c:	683b      	ldr	r3, [r7, #0]
 800bc8e:	2b00      	cmp	r3, #0
 800bc90:	d104      	bne.n	800bc9c <_malloc_r+0x38>
 800bc92:	0021      	movs	r1, r4
 800bc94:	0030      	movs	r0, r6
 800bc96:	f000 f843 	bl	800bd20 <_sbrk_r>
 800bc9a:	6038      	str	r0, [r7, #0]
 800bc9c:	0029      	movs	r1, r5
 800bc9e:	0030      	movs	r0, r6
 800bca0:	f000 f83e 	bl	800bd20 <_sbrk_r>
 800bca4:	1c43      	adds	r3, r0, #1
 800bca6:	d12b      	bne.n	800bd00 <_malloc_r+0x9c>
 800bca8:	230c      	movs	r3, #12
 800bcaa:	0030      	movs	r0, r6
 800bcac:	6033      	str	r3, [r6, #0]
 800bcae:	f000 f871 	bl	800bd94 <__malloc_unlock>
 800bcb2:	e003      	b.n	800bcbc <_malloc_r+0x58>
 800bcb4:	2d00      	cmp	r5, #0
 800bcb6:	dade      	bge.n	800bc76 <_malloc_r+0x12>
 800bcb8:	230c      	movs	r3, #12
 800bcba:	6033      	str	r3, [r6, #0]
 800bcbc:	2000      	movs	r0, #0
 800bcbe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bcc0:	6823      	ldr	r3, [r4, #0]
 800bcc2:	1b5b      	subs	r3, r3, r5
 800bcc4:	d419      	bmi.n	800bcfa <_malloc_r+0x96>
 800bcc6:	2b0b      	cmp	r3, #11
 800bcc8:	d903      	bls.n	800bcd2 <_malloc_r+0x6e>
 800bcca:	6023      	str	r3, [r4, #0]
 800bccc:	18e4      	adds	r4, r4, r3
 800bcce:	6025      	str	r5, [r4, #0]
 800bcd0:	e003      	b.n	800bcda <_malloc_r+0x76>
 800bcd2:	6863      	ldr	r3, [r4, #4]
 800bcd4:	42a2      	cmp	r2, r4
 800bcd6:	d10e      	bne.n	800bcf6 <_malloc_r+0x92>
 800bcd8:	600b      	str	r3, [r1, #0]
 800bcda:	0030      	movs	r0, r6
 800bcdc:	f000 f85a 	bl	800bd94 <__malloc_unlock>
 800bce0:	0020      	movs	r0, r4
 800bce2:	2207      	movs	r2, #7
 800bce4:	300b      	adds	r0, #11
 800bce6:	1d23      	adds	r3, r4, #4
 800bce8:	4390      	bics	r0, r2
 800bcea:	1ac2      	subs	r2, r0, r3
 800bcec:	4298      	cmp	r0, r3
 800bcee:	d0e6      	beq.n	800bcbe <_malloc_r+0x5a>
 800bcf0:	1a1b      	subs	r3, r3, r0
 800bcf2:	50a3      	str	r3, [r4, r2]
 800bcf4:	e7e3      	b.n	800bcbe <_malloc_r+0x5a>
 800bcf6:	6053      	str	r3, [r2, #4]
 800bcf8:	e7ef      	b.n	800bcda <_malloc_r+0x76>
 800bcfa:	0022      	movs	r2, r4
 800bcfc:	6864      	ldr	r4, [r4, #4]
 800bcfe:	e7c2      	b.n	800bc86 <_malloc_r+0x22>
 800bd00:	2303      	movs	r3, #3
 800bd02:	1cc4      	adds	r4, r0, #3
 800bd04:	439c      	bics	r4, r3
 800bd06:	42a0      	cmp	r0, r4
 800bd08:	d0e1      	beq.n	800bcce <_malloc_r+0x6a>
 800bd0a:	1a21      	subs	r1, r4, r0
 800bd0c:	0030      	movs	r0, r6
 800bd0e:	f000 f807 	bl	800bd20 <_sbrk_r>
 800bd12:	1c43      	adds	r3, r0, #1
 800bd14:	d1db      	bne.n	800bcce <_malloc_r+0x6a>
 800bd16:	e7c7      	b.n	800bca8 <_malloc_r+0x44>
 800bd18:	2000043c 	.word	0x2000043c
 800bd1c:	20000440 	.word	0x20000440

0800bd20 <_sbrk_r>:
 800bd20:	2300      	movs	r3, #0
 800bd22:	b570      	push	{r4, r5, r6, lr}
 800bd24:	4d06      	ldr	r5, [pc, #24]	; (800bd40 <_sbrk_r+0x20>)
 800bd26:	0004      	movs	r4, r0
 800bd28:	0008      	movs	r0, r1
 800bd2a:	602b      	str	r3, [r5, #0]
 800bd2c:	f7f5 fcf0 	bl	8001710 <_sbrk>
 800bd30:	1c43      	adds	r3, r0, #1
 800bd32:	d103      	bne.n	800bd3c <_sbrk_r+0x1c>
 800bd34:	682b      	ldr	r3, [r5, #0]
 800bd36:	2b00      	cmp	r3, #0
 800bd38:	d000      	beq.n	800bd3c <_sbrk_r+0x1c>
 800bd3a:	6023      	str	r3, [r4, #0]
 800bd3c:	bd70      	pop	{r4, r5, r6, pc}
 800bd3e:	46c0      	nop			; (mov r8, r8)
 800bd40:	200015a0 	.word	0x200015a0

0800bd44 <siprintf>:
 800bd44:	b40e      	push	{r1, r2, r3}
 800bd46:	b500      	push	{lr}
 800bd48:	490b      	ldr	r1, [pc, #44]	; (800bd78 <siprintf+0x34>)
 800bd4a:	b09c      	sub	sp, #112	; 0x70
 800bd4c:	ab1d      	add	r3, sp, #116	; 0x74
 800bd4e:	9002      	str	r0, [sp, #8]
 800bd50:	9006      	str	r0, [sp, #24]
 800bd52:	9107      	str	r1, [sp, #28]
 800bd54:	9104      	str	r1, [sp, #16]
 800bd56:	4809      	ldr	r0, [pc, #36]	; (800bd7c <siprintf+0x38>)
 800bd58:	4909      	ldr	r1, [pc, #36]	; (800bd80 <siprintf+0x3c>)
 800bd5a:	cb04      	ldmia	r3!, {r2}
 800bd5c:	9105      	str	r1, [sp, #20]
 800bd5e:	6800      	ldr	r0, [r0, #0]
 800bd60:	a902      	add	r1, sp, #8
 800bd62:	9301      	str	r3, [sp, #4]
 800bd64:	f000 f880 	bl	800be68 <_svfiprintf_r>
 800bd68:	2300      	movs	r3, #0
 800bd6a:	9a02      	ldr	r2, [sp, #8]
 800bd6c:	7013      	strb	r3, [r2, #0]
 800bd6e:	b01c      	add	sp, #112	; 0x70
 800bd70:	bc08      	pop	{r3}
 800bd72:	b003      	add	sp, #12
 800bd74:	4718      	bx	r3
 800bd76:	46c0      	nop			; (mov r8, r8)
 800bd78:	7fffffff 	.word	0x7fffffff
 800bd7c:	2000017c 	.word	0x2000017c
 800bd80:	ffff0208 	.word	0xffff0208

0800bd84 <__malloc_lock>:
 800bd84:	b510      	push	{r4, lr}
 800bd86:	4802      	ldr	r0, [pc, #8]	; (800bd90 <__malloc_lock+0xc>)
 800bd88:	f000 faf0 	bl	800c36c <__retarget_lock_acquire_recursive>
 800bd8c:	bd10      	pop	{r4, pc}
 800bd8e:	46c0      	nop			; (mov r8, r8)
 800bd90:	200015a8 	.word	0x200015a8

0800bd94 <__malloc_unlock>:
 800bd94:	b510      	push	{r4, lr}
 800bd96:	4802      	ldr	r0, [pc, #8]	; (800bda0 <__malloc_unlock+0xc>)
 800bd98:	f000 fae9 	bl	800c36e <__retarget_lock_release_recursive>
 800bd9c:	bd10      	pop	{r4, pc}
 800bd9e:	46c0      	nop			; (mov r8, r8)
 800bda0:	200015a8 	.word	0x200015a8

0800bda4 <__ssputs_r>:
 800bda4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bda6:	688e      	ldr	r6, [r1, #8]
 800bda8:	b085      	sub	sp, #20
 800bdaa:	0007      	movs	r7, r0
 800bdac:	000c      	movs	r4, r1
 800bdae:	9203      	str	r2, [sp, #12]
 800bdb0:	9301      	str	r3, [sp, #4]
 800bdb2:	429e      	cmp	r6, r3
 800bdb4:	d83c      	bhi.n	800be30 <__ssputs_r+0x8c>
 800bdb6:	2390      	movs	r3, #144	; 0x90
 800bdb8:	898a      	ldrh	r2, [r1, #12]
 800bdba:	00db      	lsls	r3, r3, #3
 800bdbc:	421a      	tst	r2, r3
 800bdbe:	d034      	beq.n	800be2a <__ssputs_r+0x86>
 800bdc0:	2503      	movs	r5, #3
 800bdc2:	6909      	ldr	r1, [r1, #16]
 800bdc4:	6823      	ldr	r3, [r4, #0]
 800bdc6:	1a5b      	subs	r3, r3, r1
 800bdc8:	9302      	str	r3, [sp, #8]
 800bdca:	6963      	ldr	r3, [r4, #20]
 800bdcc:	9802      	ldr	r0, [sp, #8]
 800bdce:	435d      	muls	r5, r3
 800bdd0:	0feb      	lsrs	r3, r5, #31
 800bdd2:	195d      	adds	r5, r3, r5
 800bdd4:	9b01      	ldr	r3, [sp, #4]
 800bdd6:	106d      	asrs	r5, r5, #1
 800bdd8:	3301      	adds	r3, #1
 800bdda:	181b      	adds	r3, r3, r0
 800bddc:	42ab      	cmp	r3, r5
 800bdde:	d900      	bls.n	800bde2 <__ssputs_r+0x3e>
 800bde0:	001d      	movs	r5, r3
 800bde2:	0553      	lsls	r3, r2, #21
 800bde4:	d532      	bpl.n	800be4c <__ssputs_r+0xa8>
 800bde6:	0029      	movs	r1, r5
 800bde8:	0038      	movs	r0, r7
 800bdea:	f7ff ff3b 	bl	800bc64 <_malloc_r>
 800bdee:	1e06      	subs	r6, r0, #0
 800bdf0:	d109      	bne.n	800be06 <__ssputs_r+0x62>
 800bdf2:	230c      	movs	r3, #12
 800bdf4:	603b      	str	r3, [r7, #0]
 800bdf6:	2340      	movs	r3, #64	; 0x40
 800bdf8:	2001      	movs	r0, #1
 800bdfa:	89a2      	ldrh	r2, [r4, #12]
 800bdfc:	4240      	negs	r0, r0
 800bdfe:	4313      	orrs	r3, r2
 800be00:	81a3      	strh	r3, [r4, #12]
 800be02:	b005      	add	sp, #20
 800be04:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800be06:	9a02      	ldr	r2, [sp, #8]
 800be08:	6921      	ldr	r1, [r4, #16]
 800be0a:	f000 fabc 	bl	800c386 <memcpy>
 800be0e:	89a3      	ldrh	r3, [r4, #12]
 800be10:	4a14      	ldr	r2, [pc, #80]	; (800be64 <__ssputs_r+0xc0>)
 800be12:	401a      	ands	r2, r3
 800be14:	2380      	movs	r3, #128	; 0x80
 800be16:	4313      	orrs	r3, r2
 800be18:	81a3      	strh	r3, [r4, #12]
 800be1a:	9b02      	ldr	r3, [sp, #8]
 800be1c:	6126      	str	r6, [r4, #16]
 800be1e:	18f6      	adds	r6, r6, r3
 800be20:	6026      	str	r6, [r4, #0]
 800be22:	6165      	str	r5, [r4, #20]
 800be24:	9e01      	ldr	r6, [sp, #4]
 800be26:	1aed      	subs	r5, r5, r3
 800be28:	60a5      	str	r5, [r4, #8]
 800be2a:	9b01      	ldr	r3, [sp, #4]
 800be2c:	429e      	cmp	r6, r3
 800be2e:	d900      	bls.n	800be32 <__ssputs_r+0x8e>
 800be30:	9e01      	ldr	r6, [sp, #4]
 800be32:	0032      	movs	r2, r6
 800be34:	9903      	ldr	r1, [sp, #12]
 800be36:	6820      	ldr	r0, [r4, #0]
 800be38:	f000 faae 	bl	800c398 <memmove>
 800be3c:	68a3      	ldr	r3, [r4, #8]
 800be3e:	2000      	movs	r0, #0
 800be40:	1b9b      	subs	r3, r3, r6
 800be42:	60a3      	str	r3, [r4, #8]
 800be44:	6823      	ldr	r3, [r4, #0]
 800be46:	199e      	adds	r6, r3, r6
 800be48:	6026      	str	r6, [r4, #0]
 800be4a:	e7da      	b.n	800be02 <__ssputs_r+0x5e>
 800be4c:	002a      	movs	r2, r5
 800be4e:	0038      	movs	r0, r7
 800be50:	f000 fab5 	bl	800c3be <_realloc_r>
 800be54:	1e06      	subs	r6, r0, #0
 800be56:	d1e0      	bne.n	800be1a <__ssputs_r+0x76>
 800be58:	0038      	movs	r0, r7
 800be5a:	6921      	ldr	r1, [r4, #16]
 800be5c:	f7ff feb8 	bl	800bbd0 <_free_r>
 800be60:	e7c7      	b.n	800bdf2 <__ssputs_r+0x4e>
 800be62:	46c0      	nop			; (mov r8, r8)
 800be64:	fffffb7f 	.word	0xfffffb7f

0800be68 <_svfiprintf_r>:
 800be68:	b5f0      	push	{r4, r5, r6, r7, lr}
 800be6a:	b0a1      	sub	sp, #132	; 0x84
 800be6c:	9003      	str	r0, [sp, #12]
 800be6e:	001d      	movs	r5, r3
 800be70:	898b      	ldrh	r3, [r1, #12]
 800be72:	000f      	movs	r7, r1
 800be74:	0016      	movs	r6, r2
 800be76:	061b      	lsls	r3, r3, #24
 800be78:	d511      	bpl.n	800be9e <_svfiprintf_r+0x36>
 800be7a:	690b      	ldr	r3, [r1, #16]
 800be7c:	2b00      	cmp	r3, #0
 800be7e:	d10e      	bne.n	800be9e <_svfiprintf_r+0x36>
 800be80:	2140      	movs	r1, #64	; 0x40
 800be82:	f7ff feef 	bl	800bc64 <_malloc_r>
 800be86:	6038      	str	r0, [r7, #0]
 800be88:	6138      	str	r0, [r7, #16]
 800be8a:	2800      	cmp	r0, #0
 800be8c:	d105      	bne.n	800be9a <_svfiprintf_r+0x32>
 800be8e:	230c      	movs	r3, #12
 800be90:	9a03      	ldr	r2, [sp, #12]
 800be92:	3801      	subs	r0, #1
 800be94:	6013      	str	r3, [r2, #0]
 800be96:	b021      	add	sp, #132	; 0x84
 800be98:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800be9a:	2340      	movs	r3, #64	; 0x40
 800be9c:	617b      	str	r3, [r7, #20]
 800be9e:	2300      	movs	r3, #0
 800bea0:	ac08      	add	r4, sp, #32
 800bea2:	6163      	str	r3, [r4, #20]
 800bea4:	3320      	adds	r3, #32
 800bea6:	7663      	strb	r3, [r4, #25]
 800bea8:	3310      	adds	r3, #16
 800beaa:	76a3      	strb	r3, [r4, #26]
 800beac:	9507      	str	r5, [sp, #28]
 800beae:	0035      	movs	r5, r6
 800beb0:	782b      	ldrb	r3, [r5, #0]
 800beb2:	2b00      	cmp	r3, #0
 800beb4:	d001      	beq.n	800beba <_svfiprintf_r+0x52>
 800beb6:	2b25      	cmp	r3, #37	; 0x25
 800beb8:	d147      	bne.n	800bf4a <_svfiprintf_r+0xe2>
 800beba:	1bab      	subs	r3, r5, r6
 800bebc:	9305      	str	r3, [sp, #20]
 800bebe:	42b5      	cmp	r5, r6
 800bec0:	d00c      	beq.n	800bedc <_svfiprintf_r+0x74>
 800bec2:	0032      	movs	r2, r6
 800bec4:	0039      	movs	r1, r7
 800bec6:	9803      	ldr	r0, [sp, #12]
 800bec8:	f7ff ff6c 	bl	800bda4 <__ssputs_r>
 800becc:	1c43      	adds	r3, r0, #1
 800bece:	d100      	bne.n	800bed2 <_svfiprintf_r+0x6a>
 800bed0:	e0ae      	b.n	800c030 <_svfiprintf_r+0x1c8>
 800bed2:	6962      	ldr	r2, [r4, #20]
 800bed4:	9b05      	ldr	r3, [sp, #20]
 800bed6:	4694      	mov	ip, r2
 800bed8:	4463      	add	r3, ip
 800beda:	6163      	str	r3, [r4, #20]
 800bedc:	782b      	ldrb	r3, [r5, #0]
 800bede:	2b00      	cmp	r3, #0
 800bee0:	d100      	bne.n	800bee4 <_svfiprintf_r+0x7c>
 800bee2:	e0a5      	b.n	800c030 <_svfiprintf_r+0x1c8>
 800bee4:	2201      	movs	r2, #1
 800bee6:	2300      	movs	r3, #0
 800bee8:	4252      	negs	r2, r2
 800beea:	6062      	str	r2, [r4, #4]
 800beec:	a904      	add	r1, sp, #16
 800beee:	3254      	adds	r2, #84	; 0x54
 800bef0:	1852      	adds	r2, r2, r1
 800bef2:	1c6e      	adds	r6, r5, #1
 800bef4:	6023      	str	r3, [r4, #0]
 800bef6:	60e3      	str	r3, [r4, #12]
 800bef8:	60a3      	str	r3, [r4, #8]
 800befa:	7013      	strb	r3, [r2, #0]
 800befc:	65a3      	str	r3, [r4, #88]	; 0x58
 800befe:	2205      	movs	r2, #5
 800bf00:	7831      	ldrb	r1, [r6, #0]
 800bf02:	4854      	ldr	r0, [pc, #336]	; (800c054 <_svfiprintf_r+0x1ec>)
 800bf04:	f000 fa34 	bl	800c370 <memchr>
 800bf08:	1c75      	adds	r5, r6, #1
 800bf0a:	2800      	cmp	r0, #0
 800bf0c:	d11f      	bne.n	800bf4e <_svfiprintf_r+0xe6>
 800bf0e:	6822      	ldr	r2, [r4, #0]
 800bf10:	06d3      	lsls	r3, r2, #27
 800bf12:	d504      	bpl.n	800bf1e <_svfiprintf_r+0xb6>
 800bf14:	2353      	movs	r3, #83	; 0x53
 800bf16:	a904      	add	r1, sp, #16
 800bf18:	185b      	adds	r3, r3, r1
 800bf1a:	2120      	movs	r1, #32
 800bf1c:	7019      	strb	r1, [r3, #0]
 800bf1e:	0713      	lsls	r3, r2, #28
 800bf20:	d504      	bpl.n	800bf2c <_svfiprintf_r+0xc4>
 800bf22:	2353      	movs	r3, #83	; 0x53
 800bf24:	a904      	add	r1, sp, #16
 800bf26:	185b      	adds	r3, r3, r1
 800bf28:	212b      	movs	r1, #43	; 0x2b
 800bf2a:	7019      	strb	r1, [r3, #0]
 800bf2c:	7833      	ldrb	r3, [r6, #0]
 800bf2e:	2b2a      	cmp	r3, #42	; 0x2a
 800bf30:	d016      	beq.n	800bf60 <_svfiprintf_r+0xf8>
 800bf32:	0035      	movs	r5, r6
 800bf34:	2100      	movs	r1, #0
 800bf36:	200a      	movs	r0, #10
 800bf38:	68e3      	ldr	r3, [r4, #12]
 800bf3a:	782a      	ldrb	r2, [r5, #0]
 800bf3c:	1c6e      	adds	r6, r5, #1
 800bf3e:	3a30      	subs	r2, #48	; 0x30
 800bf40:	2a09      	cmp	r2, #9
 800bf42:	d94e      	bls.n	800bfe2 <_svfiprintf_r+0x17a>
 800bf44:	2900      	cmp	r1, #0
 800bf46:	d111      	bne.n	800bf6c <_svfiprintf_r+0x104>
 800bf48:	e017      	b.n	800bf7a <_svfiprintf_r+0x112>
 800bf4a:	3501      	adds	r5, #1
 800bf4c:	e7b0      	b.n	800beb0 <_svfiprintf_r+0x48>
 800bf4e:	4b41      	ldr	r3, [pc, #260]	; (800c054 <_svfiprintf_r+0x1ec>)
 800bf50:	6822      	ldr	r2, [r4, #0]
 800bf52:	1ac0      	subs	r0, r0, r3
 800bf54:	2301      	movs	r3, #1
 800bf56:	4083      	lsls	r3, r0
 800bf58:	4313      	orrs	r3, r2
 800bf5a:	002e      	movs	r6, r5
 800bf5c:	6023      	str	r3, [r4, #0]
 800bf5e:	e7ce      	b.n	800befe <_svfiprintf_r+0x96>
 800bf60:	9b07      	ldr	r3, [sp, #28]
 800bf62:	1d19      	adds	r1, r3, #4
 800bf64:	681b      	ldr	r3, [r3, #0]
 800bf66:	9107      	str	r1, [sp, #28]
 800bf68:	2b00      	cmp	r3, #0
 800bf6a:	db01      	blt.n	800bf70 <_svfiprintf_r+0x108>
 800bf6c:	930b      	str	r3, [sp, #44]	; 0x2c
 800bf6e:	e004      	b.n	800bf7a <_svfiprintf_r+0x112>
 800bf70:	425b      	negs	r3, r3
 800bf72:	60e3      	str	r3, [r4, #12]
 800bf74:	2302      	movs	r3, #2
 800bf76:	4313      	orrs	r3, r2
 800bf78:	6023      	str	r3, [r4, #0]
 800bf7a:	782b      	ldrb	r3, [r5, #0]
 800bf7c:	2b2e      	cmp	r3, #46	; 0x2e
 800bf7e:	d10a      	bne.n	800bf96 <_svfiprintf_r+0x12e>
 800bf80:	786b      	ldrb	r3, [r5, #1]
 800bf82:	2b2a      	cmp	r3, #42	; 0x2a
 800bf84:	d135      	bne.n	800bff2 <_svfiprintf_r+0x18a>
 800bf86:	9b07      	ldr	r3, [sp, #28]
 800bf88:	3502      	adds	r5, #2
 800bf8a:	1d1a      	adds	r2, r3, #4
 800bf8c:	681b      	ldr	r3, [r3, #0]
 800bf8e:	9207      	str	r2, [sp, #28]
 800bf90:	2b00      	cmp	r3, #0
 800bf92:	db2b      	blt.n	800bfec <_svfiprintf_r+0x184>
 800bf94:	9309      	str	r3, [sp, #36]	; 0x24
 800bf96:	4e30      	ldr	r6, [pc, #192]	; (800c058 <_svfiprintf_r+0x1f0>)
 800bf98:	2203      	movs	r2, #3
 800bf9a:	0030      	movs	r0, r6
 800bf9c:	7829      	ldrb	r1, [r5, #0]
 800bf9e:	f000 f9e7 	bl	800c370 <memchr>
 800bfa2:	2800      	cmp	r0, #0
 800bfa4:	d006      	beq.n	800bfb4 <_svfiprintf_r+0x14c>
 800bfa6:	2340      	movs	r3, #64	; 0x40
 800bfa8:	1b80      	subs	r0, r0, r6
 800bfaa:	4083      	lsls	r3, r0
 800bfac:	6822      	ldr	r2, [r4, #0]
 800bfae:	3501      	adds	r5, #1
 800bfb0:	4313      	orrs	r3, r2
 800bfb2:	6023      	str	r3, [r4, #0]
 800bfb4:	7829      	ldrb	r1, [r5, #0]
 800bfb6:	2206      	movs	r2, #6
 800bfb8:	4828      	ldr	r0, [pc, #160]	; (800c05c <_svfiprintf_r+0x1f4>)
 800bfba:	1c6e      	adds	r6, r5, #1
 800bfbc:	7621      	strb	r1, [r4, #24]
 800bfbe:	f000 f9d7 	bl	800c370 <memchr>
 800bfc2:	2800      	cmp	r0, #0
 800bfc4:	d03c      	beq.n	800c040 <_svfiprintf_r+0x1d8>
 800bfc6:	4b26      	ldr	r3, [pc, #152]	; (800c060 <_svfiprintf_r+0x1f8>)
 800bfc8:	2b00      	cmp	r3, #0
 800bfca:	d125      	bne.n	800c018 <_svfiprintf_r+0x1b0>
 800bfcc:	2207      	movs	r2, #7
 800bfce:	9b07      	ldr	r3, [sp, #28]
 800bfd0:	3307      	adds	r3, #7
 800bfd2:	4393      	bics	r3, r2
 800bfd4:	3308      	adds	r3, #8
 800bfd6:	9307      	str	r3, [sp, #28]
 800bfd8:	6963      	ldr	r3, [r4, #20]
 800bfda:	9a04      	ldr	r2, [sp, #16]
 800bfdc:	189b      	adds	r3, r3, r2
 800bfde:	6163      	str	r3, [r4, #20]
 800bfe0:	e765      	b.n	800beae <_svfiprintf_r+0x46>
 800bfe2:	4343      	muls	r3, r0
 800bfe4:	0035      	movs	r5, r6
 800bfe6:	2101      	movs	r1, #1
 800bfe8:	189b      	adds	r3, r3, r2
 800bfea:	e7a6      	b.n	800bf3a <_svfiprintf_r+0xd2>
 800bfec:	2301      	movs	r3, #1
 800bfee:	425b      	negs	r3, r3
 800bff0:	e7d0      	b.n	800bf94 <_svfiprintf_r+0x12c>
 800bff2:	2300      	movs	r3, #0
 800bff4:	200a      	movs	r0, #10
 800bff6:	001a      	movs	r2, r3
 800bff8:	3501      	adds	r5, #1
 800bffa:	6063      	str	r3, [r4, #4]
 800bffc:	7829      	ldrb	r1, [r5, #0]
 800bffe:	1c6e      	adds	r6, r5, #1
 800c000:	3930      	subs	r1, #48	; 0x30
 800c002:	2909      	cmp	r1, #9
 800c004:	d903      	bls.n	800c00e <_svfiprintf_r+0x1a6>
 800c006:	2b00      	cmp	r3, #0
 800c008:	d0c5      	beq.n	800bf96 <_svfiprintf_r+0x12e>
 800c00a:	9209      	str	r2, [sp, #36]	; 0x24
 800c00c:	e7c3      	b.n	800bf96 <_svfiprintf_r+0x12e>
 800c00e:	4342      	muls	r2, r0
 800c010:	0035      	movs	r5, r6
 800c012:	2301      	movs	r3, #1
 800c014:	1852      	adds	r2, r2, r1
 800c016:	e7f1      	b.n	800bffc <_svfiprintf_r+0x194>
 800c018:	ab07      	add	r3, sp, #28
 800c01a:	9300      	str	r3, [sp, #0]
 800c01c:	003a      	movs	r2, r7
 800c01e:	0021      	movs	r1, r4
 800c020:	4b10      	ldr	r3, [pc, #64]	; (800c064 <_svfiprintf_r+0x1fc>)
 800c022:	9803      	ldr	r0, [sp, #12]
 800c024:	e000      	b.n	800c028 <_svfiprintf_r+0x1c0>
 800c026:	bf00      	nop
 800c028:	9004      	str	r0, [sp, #16]
 800c02a:	9b04      	ldr	r3, [sp, #16]
 800c02c:	3301      	adds	r3, #1
 800c02e:	d1d3      	bne.n	800bfd8 <_svfiprintf_r+0x170>
 800c030:	89bb      	ldrh	r3, [r7, #12]
 800c032:	980d      	ldr	r0, [sp, #52]	; 0x34
 800c034:	065b      	lsls	r3, r3, #25
 800c036:	d400      	bmi.n	800c03a <_svfiprintf_r+0x1d2>
 800c038:	e72d      	b.n	800be96 <_svfiprintf_r+0x2e>
 800c03a:	2001      	movs	r0, #1
 800c03c:	4240      	negs	r0, r0
 800c03e:	e72a      	b.n	800be96 <_svfiprintf_r+0x2e>
 800c040:	ab07      	add	r3, sp, #28
 800c042:	9300      	str	r3, [sp, #0]
 800c044:	003a      	movs	r2, r7
 800c046:	0021      	movs	r1, r4
 800c048:	4b06      	ldr	r3, [pc, #24]	; (800c064 <_svfiprintf_r+0x1fc>)
 800c04a:	9803      	ldr	r0, [sp, #12]
 800c04c:	f000 f87c 	bl	800c148 <_printf_i>
 800c050:	e7ea      	b.n	800c028 <_svfiprintf_r+0x1c0>
 800c052:	46c0      	nop			; (mov r8, r8)
 800c054:	0800c5f0 	.word	0x0800c5f0
 800c058:	0800c5f6 	.word	0x0800c5f6
 800c05c:	0800c5fa 	.word	0x0800c5fa
 800c060:	00000000 	.word	0x00000000
 800c064:	0800bda5 	.word	0x0800bda5

0800c068 <_printf_common>:
 800c068:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c06a:	0015      	movs	r5, r2
 800c06c:	9301      	str	r3, [sp, #4]
 800c06e:	688a      	ldr	r2, [r1, #8]
 800c070:	690b      	ldr	r3, [r1, #16]
 800c072:	000c      	movs	r4, r1
 800c074:	9000      	str	r0, [sp, #0]
 800c076:	4293      	cmp	r3, r2
 800c078:	da00      	bge.n	800c07c <_printf_common+0x14>
 800c07a:	0013      	movs	r3, r2
 800c07c:	0022      	movs	r2, r4
 800c07e:	602b      	str	r3, [r5, #0]
 800c080:	3243      	adds	r2, #67	; 0x43
 800c082:	7812      	ldrb	r2, [r2, #0]
 800c084:	2a00      	cmp	r2, #0
 800c086:	d001      	beq.n	800c08c <_printf_common+0x24>
 800c088:	3301      	adds	r3, #1
 800c08a:	602b      	str	r3, [r5, #0]
 800c08c:	6823      	ldr	r3, [r4, #0]
 800c08e:	069b      	lsls	r3, r3, #26
 800c090:	d502      	bpl.n	800c098 <_printf_common+0x30>
 800c092:	682b      	ldr	r3, [r5, #0]
 800c094:	3302      	adds	r3, #2
 800c096:	602b      	str	r3, [r5, #0]
 800c098:	6822      	ldr	r2, [r4, #0]
 800c09a:	2306      	movs	r3, #6
 800c09c:	0017      	movs	r7, r2
 800c09e:	401f      	ands	r7, r3
 800c0a0:	421a      	tst	r2, r3
 800c0a2:	d027      	beq.n	800c0f4 <_printf_common+0x8c>
 800c0a4:	0023      	movs	r3, r4
 800c0a6:	3343      	adds	r3, #67	; 0x43
 800c0a8:	781b      	ldrb	r3, [r3, #0]
 800c0aa:	1e5a      	subs	r2, r3, #1
 800c0ac:	4193      	sbcs	r3, r2
 800c0ae:	6822      	ldr	r2, [r4, #0]
 800c0b0:	0692      	lsls	r2, r2, #26
 800c0b2:	d430      	bmi.n	800c116 <_printf_common+0xae>
 800c0b4:	0022      	movs	r2, r4
 800c0b6:	9901      	ldr	r1, [sp, #4]
 800c0b8:	9800      	ldr	r0, [sp, #0]
 800c0ba:	9e08      	ldr	r6, [sp, #32]
 800c0bc:	3243      	adds	r2, #67	; 0x43
 800c0be:	47b0      	blx	r6
 800c0c0:	1c43      	adds	r3, r0, #1
 800c0c2:	d025      	beq.n	800c110 <_printf_common+0xa8>
 800c0c4:	2306      	movs	r3, #6
 800c0c6:	6820      	ldr	r0, [r4, #0]
 800c0c8:	682a      	ldr	r2, [r5, #0]
 800c0ca:	68e1      	ldr	r1, [r4, #12]
 800c0cc:	2500      	movs	r5, #0
 800c0ce:	4003      	ands	r3, r0
 800c0d0:	2b04      	cmp	r3, #4
 800c0d2:	d103      	bne.n	800c0dc <_printf_common+0x74>
 800c0d4:	1a8d      	subs	r5, r1, r2
 800c0d6:	43eb      	mvns	r3, r5
 800c0d8:	17db      	asrs	r3, r3, #31
 800c0da:	401d      	ands	r5, r3
 800c0dc:	68a3      	ldr	r3, [r4, #8]
 800c0de:	6922      	ldr	r2, [r4, #16]
 800c0e0:	4293      	cmp	r3, r2
 800c0e2:	dd01      	ble.n	800c0e8 <_printf_common+0x80>
 800c0e4:	1a9b      	subs	r3, r3, r2
 800c0e6:	18ed      	adds	r5, r5, r3
 800c0e8:	2700      	movs	r7, #0
 800c0ea:	42bd      	cmp	r5, r7
 800c0ec:	d120      	bne.n	800c130 <_printf_common+0xc8>
 800c0ee:	2000      	movs	r0, #0
 800c0f0:	e010      	b.n	800c114 <_printf_common+0xac>
 800c0f2:	3701      	adds	r7, #1
 800c0f4:	68e3      	ldr	r3, [r4, #12]
 800c0f6:	682a      	ldr	r2, [r5, #0]
 800c0f8:	1a9b      	subs	r3, r3, r2
 800c0fa:	42bb      	cmp	r3, r7
 800c0fc:	ddd2      	ble.n	800c0a4 <_printf_common+0x3c>
 800c0fe:	0022      	movs	r2, r4
 800c100:	2301      	movs	r3, #1
 800c102:	9901      	ldr	r1, [sp, #4]
 800c104:	9800      	ldr	r0, [sp, #0]
 800c106:	9e08      	ldr	r6, [sp, #32]
 800c108:	3219      	adds	r2, #25
 800c10a:	47b0      	blx	r6
 800c10c:	1c43      	adds	r3, r0, #1
 800c10e:	d1f0      	bne.n	800c0f2 <_printf_common+0x8a>
 800c110:	2001      	movs	r0, #1
 800c112:	4240      	negs	r0, r0
 800c114:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800c116:	2030      	movs	r0, #48	; 0x30
 800c118:	18e1      	adds	r1, r4, r3
 800c11a:	3143      	adds	r1, #67	; 0x43
 800c11c:	7008      	strb	r0, [r1, #0]
 800c11e:	0021      	movs	r1, r4
 800c120:	1c5a      	adds	r2, r3, #1
 800c122:	3145      	adds	r1, #69	; 0x45
 800c124:	7809      	ldrb	r1, [r1, #0]
 800c126:	18a2      	adds	r2, r4, r2
 800c128:	3243      	adds	r2, #67	; 0x43
 800c12a:	3302      	adds	r3, #2
 800c12c:	7011      	strb	r1, [r2, #0]
 800c12e:	e7c1      	b.n	800c0b4 <_printf_common+0x4c>
 800c130:	0022      	movs	r2, r4
 800c132:	2301      	movs	r3, #1
 800c134:	9901      	ldr	r1, [sp, #4]
 800c136:	9800      	ldr	r0, [sp, #0]
 800c138:	9e08      	ldr	r6, [sp, #32]
 800c13a:	321a      	adds	r2, #26
 800c13c:	47b0      	blx	r6
 800c13e:	1c43      	adds	r3, r0, #1
 800c140:	d0e6      	beq.n	800c110 <_printf_common+0xa8>
 800c142:	3701      	adds	r7, #1
 800c144:	e7d1      	b.n	800c0ea <_printf_common+0x82>
	...

0800c148 <_printf_i>:
 800c148:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c14a:	b08b      	sub	sp, #44	; 0x2c
 800c14c:	9206      	str	r2, [sp, #24]
 800c14e:	000a      	movs	r2, r1
 800c150:	3243      	adds	r2, #67	; 0x43
 800c152:	9307      	str	r3, [sp, #28]
 800c154:	9005      	str	r0, [sp, #20]
 800c156:	9204      	str	r2, [sp, #16]
 800c158:	7e0a      	ldrb	r2, [r1, #24]
 800c15a:	000c      	movs	r4, r1
 800c15c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c15e:	2a78      	cmp	r2, #120	; 0x78
 800c160:	d806      	bhi.n	800c170 <_printf_i+0x28>
 800c162:	2a62      	cmp	r2, #98	; 0x62
 800c164:	d808      	bhi.n	800c178 <_printf_i+0x30>
 800c166:	2a00      	cmp	r2, #0
 800c168:	d100      	bne.n	800c16c <_printf_i+0x24>
 800c16a:	e0c0      	b.n	800c2ee <_printf_i+0x1a6>
 800c16c:	2a58      	cmp	r2, #88	; 0x58
 800c16e:	d052      	beq.n	800c216 <_printf_i+0xce>
 800c170:	0026      	movs	r6, r4
 800c172:	3642      	adds	r6, #66	; 0x42
 800c174:	7032      	strb	r2, [r6, #0]
 800c176:	e022      	b.n	800c1be <_printf_i+0x76>
 800c178:	0010      	movs	r0, r2
 800c17a:	3863      	subs	r0, #99	; 0x63
 800c17c:	2815      	cmp	r0, #21
 800c17e:	d8f7      	bhi.n	800c170 <_printf_i+0x28>
 800c180:	f7f3 ffca 	bl	8000118 <__gnu_thumb1_case_shi>
 800c184:	001f0016 	.word	0x001f0016
 800c188:	fff6fff6 	.word	0xfff6fff6
 800c18c:	fff6fff6 	.word	0xfff6fff6
 800c190:	fff6001f 	.word	0xfff6001f
 800c194:	fff6fff6 	.word	0xfff6fff6
 800c198:	00a8fff6 	.word	0x00a8fff6
 800c19c:	009a0036 	.word	0x009a0036
 800c1a0:	fff6fff6 	.word	0xfff6fff6
 800c1a4:	fff600b9 	.word	0xfff600b9
 800c1a8:	fff60036 	.word	0xfff60036
 800c1ac:	009efff6 	.word	0x009efff6
 800c1b0:	0026      	movs	r6, r4
 800c1b2:	681a      	ldr	r2, [r3, #0]
 800c1b4:	3642      	adds	r6, #66	; 0x42
 800c1b6:	1d11      	adds	r1, r2, #4
 800c1b8:	6019      	str	r1, [r3, #0]
 800c1ba:	6813      	ldr	r3, [r2, #0]
 800c1bc:	7033      	strb	r3, [r6, #0]
 800c1be:	2301      	movs	r3, #1
 800c1c0:	e0a7      	b.n	800c312 <_printf_i+0x1ca>
 800c1c2:	6808      	ldr	r0, [r1, #0]
 800c1c4:	6819      	ldr	r1, [r3, #0]
 800c1c6:	1d0a      	adds	r2, r1, #4
 800c1c8:	0605      	lsls	r5, r0, #24
 800c1ca:	d50b      	bpl.n	800c1e4 <_printf_i+0x9c>
 800c1cc:	680d      	ldr	r5, [r1, #0]
 800c1ce:	601a      	str	r2, [r3, #0]
 800c1d0:	2d00      	cmp	r5, #0
 800c1d2:	da03      	bge.n	800c1dc <_printf_i+0x94>
 800c1d4:	232d      	movs	r3, #45	; 0x2d
 800c1d6:	9a04      	ldr	r2, [sp, #16]
 800c1d8:	426d      	negs	r5, r5
 800c1da:	7013      	strb	r3, [r2, #0]
 800c1dc:	4b61      	ldr	r3, [pc, #388]	; (800c364 <_printf_i+0x21c>)
 800c1de:	270a      	movs	r7, #10
 800c1e0:	9303      	str	r3, [sp, #12]
 800c1e2:	e032      	b.n	800c24a <_printf_i+0x102>
 800c1e4:	680d      	ldr	r5, [r1, #0]
 800c1e6:	601a      	str	r2, [r3, #0]
 800c1e8:	0641      	lsls	r1, r0, #25
 800c1ea:	d5f1      	bpl.n	800c1d0 <_printf_i+0x88>
 800c1ec:	b22d      	sxth	r5, r5
 800c1ee:	e7ef      	b.n	800c1d0 <_printf_i+0x88>
 800c1f0:	680d      	ldr	r5, [r1, #0]
 800c1f2:	6819      	ldr	r1, [r3, #0]
 800c1f4:	1d08      	adds	r0, r1, #4
 800c1f6:	6018      	str	r0, [r3, #0]
 800c1f8:	062e      	lsls	r6, r5, #24
 800c1fa:	d501      	bpl.n	800c200 <_printf_i+0xb8>
 800c1fc:	680d      	ldr	r5, [r1, #0]
 800c1fe:	e003      	b.n	800c208 <_printf_i+0xc0>
 800c200:	066d      	lsls	r5, r5, #25
 800c202:	d5fb      	bpl.n	800c1fc <_printf_i+0xb4>
 800c204:	680d      	ldr	r5, [r1, #0]
 800c206:	b2ad      	uxth	r5, r5
 800c208:	4b56      	ldr	r3, [pc, #344]	; (800c364 <_printf_i+0x21c>)
 800c20a:	270a      	movs	r7, #10
 800c20c:	9303      	str	r3, [sp, #12]
 800c20e:	2a6f      	cmp	r2, #111	; 0x6f
 800c210:	d117      	bne.n	800c242 <_printf_i+0xfa>
 800c212:	2708      	movs	r7, #8
 800c214:	e015      	b.n	800c242 <_printf_i+0xfa>
 800c216:	3145      	adds	r1, #69	; 0x45
 800c218:	700a      	strb	r2, [r1, #0]
 800c21a:	4a52      	ldr	r2, [pc, #328]	; (800c364 <_printf_i+0x21c>)
 800c21c:	9203      	str	r2, [sp, #12]
 800c21e:	681a      	ldr	r2, [r3, #0]
 800c220:	6821      	ldr	r1, [r4, #0]
 800c222:	ca20      	ldmia	r2!, {r5}
 800c224:	601a      	str	r2, [r3, #0]
 800c226:	0608      	lsls	r0, r1, #24
 800c228:	d550      	bpl.n	800c2cc <_printf_i+0x184>
 800c22a:	07cb      	lsls	r3, r1, #31
 800c22c:	d502      	bpl.n	800c234 <_printf_i+0xec>
 800c22e:	2320      	movs	r3, #32
 800c230:	4319      	orrs	r1, r3
 800c232:	6021      	str	r1, [r4, #0]
 800c234:	2710      	movs	r7, #16
 800c236:	2d00      	cmp	r5, #0
 800c238:	d103      	bne.n	800c242 <_printf_i+0xfa>
 800c23a:	2320      	movs	r3, #32
 800c23c:	6822      	ldr	r2, [r4, #0]
 800c23e:	439a      	bics	r2, r3
 800c240:	6022      	str	r2, [r4, #0]
 800c242:	0023      	movs	r3, r4
 800c244:	2200      	movs	r2, #0
 800c246:	3343      	adds	r3, #67	; 0x43
 800c248:	701a      	strb	r2, [r3, #0]
 800c24a:	6863      	ldr	r3, [r4, #4]
 800c24c:	60a3      	str	r3, [r4, #8]
 800c24e:	2b00      	cmp	r3, #0
 800c250:	db03      	blt.n	800c25a <_printf_i+0x112>
 800c252:	2204      	movs	r2, #4
 800c254:	6821      	ldr	r1, [r4, #0]
 800c256:	4391      	bics	r1, r2
 800c258:	6021      	str	r1, [r4, #0]
 800c25a:	2d00      	cmp	r5, #0
 800c25c:	d102      	bne.n	800c264 <_printf_i+0x11c>
 800c25e:	9e04      	ldr	r6, [sp, #16]
 800c260:	2b00      	cmp	r3, #0
 800c262:	d00c      	beq.n	800c27e <_printf_i+0x136>
 800c264:	9e04      	ldr	r6, [sp, #16]
 800c266:	0028      	movs	r0, r5
 800c268:	0039      	movs	r1, r7
 800c26a:	f7f3 ffe5 	bl	8000238 <__aeabi_uidivmod>
 800c26e:	9b03      	ldr	r3, [sp, #12]
 800c270:	3e01      	subs	r6, #1
 800c272:	5c5b      	ldrb	r3, [r3, r1]
 800c274:	7033      	strb	r3, [r6, #0]
 800c276:	002b      	movs	r3, r5
 800c278:	0005      	movs	r5, r0
 800c27a:	429f      	cmp	r7, r3
 800c27c:	d9f3      	bls.n	800c266 <_printf_i+0x11e>
 800c27e:	2f08      	cmp	r7, #8
 800c280:	d109      	bne.n	800c296 <_printf_i+0x14e>
 800c282:	6823      	ldr	r3, [r4, #0]
 800c284:	07db      	lsls	r3, r3, #31
 800c286:	d506      	bpl.n	800c296 <_printf_i+0x14e>
 800c288:	6863      	ldr	r3, [r4, #4]
 800c28a:	6922      	ldr	r2, [r4, #16]
 800c28c:	4293      	cmp	r3, r2
 800c28e:	dc02      	bgt.n	800c296 <_printf_i+0x14e>
 800c290:	2330      	movs	r3, #48	; 0x30
 800c292:	3e01      	subs	r6, #1
 800c294:	7033      	strb	r3, [r6, #0]
 800c296:	9b04      	ldr	r3, [sp, #16]
 800c298:	1b9b      	subs	r3, r3, r6
 800c29a:	6123      	str	r3, [r4, #16]
 800c29c:	9b07      	ldr	r3, [sp, #28]
 800c29e:	0021      	movs	r1, r4
 800c2a0:	9300      	str	r3, [sp, #0]
 800c2a2:	9805      	ldr	r0, [sp, #20]
 800c2a4:	9b06      	ldr	r3, [sp, #24]
 800c2a6:	aa09      	add	r2, sp, #36	; 0x24
 800c2a8:	f7ff fede 	bl	800c068 <_printf_common>
 800c2ac:	1c43      	adds	r3, r0, #1
 800c2ae:	d135      	bne.n	800c31c <_printf_i+0x1d4>
 800c2b0:	2001      	movs	r0, #1
 800c2b2:	4240      	negs	r0, r0
 800c2b4:	b00b      	add	sp, #44	; 0x2c
 800c2b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c2b8:	2220      	movs	r2, #32
 800c2ba:	6809      	ldr	r1, [r1, #0]
 800c2bc:	430a      	orrs	r2, r1
 800c2be:	6022      	str	r2, [r4, #0]
 800c2c0:	0022      	movs	r2, r4
 800c2c2:	2178      	movs	r1, #120	; 0x78
 800c2c4:	3245      	adds	r2, #69	; 0x45
 800c2c6:	7011      	strb	r1, [r2, #0]
 800c2c8:	4a27      	ldr	r2, [pc, #156]	; (800c368 <_printf_i+0x220>)
 800c2ca:	e7a7      	b.n	800c21c <_printf_i+0xd4>
 800c2cc:	0648      	lsls	r0, r1, #25
 800c2ce:	d5ac      	bpl.n	800c22a <_printf_i+0xe2>
 800c2d0:	b2ad      	uxth	r5, r5
 800c2d2:	e7aa      	b.n	800c22a <_printf_i+0xe2>
 800c2d4:	681a      	ldr	r2, [r3, #0]
 800c2d6:	680d      	ldr	r5, [r1, #0]
 800c2d8:	1d10      	adds	r0, r2, #4
 800c2da:	6949      	ldr	r1, [r1, #20]
 800c2dc:	6018      	str	r0, [r3, #0]
 800c2de:	6813      	ldr	r3, [r2, #0]
 800c2e0:	062e      	lsls	r6, r5, #24
 800c2e2:	d501      	bpl.n	800c2e8 <_printf_i+0x1a0>
 800c2e4:	6019      	str	r1, [r3, #0]
 800c2e6:	e002      	b.n	800c2ee <_printf_i+0x1a6>
 800c2e8:	066d      	lsls	r5, r5, #25
 800c2ea:	d5fb      	bpl.n	800c2e4 <_printf_i+0x19c>
 800c2ec:	8019      	strh	r1, [r3, #0]
 800c2ee:	2300      	movs	r3, #0
 800c2f0:	9e04      	ldr	r6, [sp, #16]
 800c2f2:	6123      	str	r3, [r4, #16]
 800c2f4:	e7d2      	b.n	800c29c <_printf_i+0x154>
 800c2f6:	681a      	ldr	r2, [r3, #0]
 800c2f8:	1d11      	adds	r1, r2, #4
 800c2fa:	6019      	str	r1, [r3, #0]
 800c2fc:	6816      	ldr	r6, [r2, #0]
 800c2fe:	2100      	movs	r1, #0
 800c300:	0030      	movs	r0, r6
 800c302:	6862      	ldr	r2, [r4, #4]
 800c304:	f000 f834 	bl	800c370 <memchr>
 800c308:	2800      	cmp	r0, #0
 800c30a:	d001      	beq.n	800c310 <_printf_i+0x1c8>
 800c30c:	1b80      	subs	r0, r0, r6
 800c30e:	6060      	str	r0, [r4, #4]
 800c310:	6863      	ldr	r3, [r4, #4]
 800c312:	6123      	str	r3, [r4, #16]
 800c314:	2300      	movs	r3, #0
 800c316:	9a04      	ldr	r2, [sp, #16]
 800c318:	7013      	strb	r3, [r2, #0]
 800c31a:	e7bf      	b.n	800c29c <_printf_i+0x154>
 800c31c:	6923      	ldr	r3, [r4, #16]
 800c31e:	0032      	movs	r2, r6
 800c320:	9906      	ldr	r1, [sp, #24]
 800c322:	9805      	ldr	r0, [sp, #20]
 800c324:	9d07      	ldr	r5, [sp, #28]
 800c326:	47a8      	blx	r5
 800c328:	1c43      	adds	r3, r0, #1
 800c32a:	d0c1      	beq.n	800c2b0 <_printf_i+0x168>
 800c32c:	6823      	ldr	r3, [r4, #0]
 800c32e:	079b      	lsls	r3, r3, #30
 800c330:	d415      	bmi.n	800c35e <_printf_i+0x216>
 800c332:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c334:	68e0      	ldr	r0, [r4, #12]
 800c336:	4298      	cmp	r0, r3
 800c338:	dabc      	bge.n	800c2b4 <_printf_i+0x16c>
 800c33a:	0018      	movs	r0, r3
 800c33c:	e7ba      	b.n	800c2b4 <_printf_i+0x16c>
 800c33e:	0022      	movs	r2, r4
 800c340:	2301      	movs	r3, #1
 800c342:	9906      	ldr	r1, [sp, #24]
 800c344:	9805      	ldr	r0, [sp, #20]
 800c346:	9e07      	ldr	r6, [sp, #28]
 800c348:	3219      	adds	r2, #25
 800c34a:	47b0      	blx	r6
 800c34c:	1c43      	adds	r3, r0, #1
 800c34e:	d0af      	beq.n	800c2b0 <_printf_i+0x168>
 800c350:	3501      	adds	r5, #1
 800c352:	68e3      	ldr	r3, [r4, #12]
 800c354:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c356:	1a9b      	subs	r3, r3, r2
 800c358:	42ab      	cmp	r3, r5
 800c35a:	dcf0      	bgt.n	800c33e <_printf_i+0x1f6>
 800c35c:	e7e9      	b.n	800c332 <_printf_i+0x1ea>
 800c35e:	2500      	movs	r5, #0
 800c360:	e7f7      	b.n	800c352 <_printf_i+0x20a>
 800c362:	46c0      	nop			; (mov r8, r8)
 800c364:	0800c601 	.word	0x0800c601
 800c368:	0800c612 	.word	0x0800c612

0800c36c <__retarget_lock_acquire_recursive>:
 800c36c:	4770      	bx	lr

0800c36e <__retarget_lock_release_recursive>:
 800c36e:	4770      	bx	lr

0800c370 <memchr>:
 800c370:	b2c9      	uxtb	r1, r1
 800c372:	1882      	adds	r2, r0, r2
 800c374:	4290      	cmp	r0, r2
 800c376:	d101      	bne.n	800c37c <memchr+0xc>
 800c378:	2000      	movs	r0, #0
 800c37a:	4770      	bx	lr
 800c37c:	7803      	ldrb	r3, [r0, #0]
 800c37e:	428b      	cmp	r3, r1
 800c380:	d0fb      	beq.n	800c37a <memchr+0xa>
 800c382:	3001      	adds	r0, #1
 800c384:	e7f6      	b.n	800c374 <memchr+0x4>

0800c386 <memcpy>:
 800c386:	2300      	movs	r3, #0
 800c388:	b510      	push	{r4, lr}
 800c38a:	429a      	cmp	r2, r3
 800c38c:	d100      	bne.n	800c390 <memcpy+0xa>
 800c38e:	bd10      	pop	{r4, pc}
 800c390:	5ccc      	ldrb	r4, [r1, r3]
 800c392:	54c4      	strb	r4, [r0, r3]
 800c394:	3301      	adds	r3, #1
 800c396:	e7f8      	b.n	800c38a <memcpy+0x4>

0800c398 <memmove>:
 800c398:	b510      	push	{r4, lr}
 800c39a:	4288      	cmp	r0, r1
 800c39c:	d902      	bls.n	800c3a4 <memmove+0xc>
 800c39e:	188b      	adds	r3, r1, r2
 800c3a0:	4298      	cmp	r0, r3
 800c3a2:	d303      	bcc.n	800c3ac <memmove+0x14>
 800c3a4:	2300      	movs	r3, #0
 800c3a6:	e007      	b.n	800c3b8 <memmove+0x20>
 800c3a8:	5c8b      	ldrb	r3, [r1, r2]
 800c3aa:	5483      	strb	r3, [r0, r2]
 800c3ac:	3a01      	subs	r2, #1
 800c3ae:	d2fb      	bcs.n	800c3a8 <memmove+0x10>
 800c3b0:	bd10      	pop	{r4, pc}
 800c3b2:	5ccc      	ldrb	r4, [r1, r3]
 800c3b4:	54c4      	strb	r4, [r0, r3]
 800c3b6:	3301      	adds	r3, #1
 800c3b8:	429a      	cmp	r2, r3
 800c3ba:	d1fa      	bne.n	800c3b2 <memmove+0x1a>
 800c3bc:	e7f8      	b.n	800c3b0 <memmove+0x18>

0800c3be <_realloc_r>:
 800c3be:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c3c0:	0007      	movs	r7, r0
 800c3c2:	000d      	movs	r5, r1
 800c3c4:	0016      	movs	r6, r2
 800c3c6:	2900      	cmp	r1, #0
 800c3c8:	d105      	bne.n	800c3d6 <_realloc_r+0x18>
 800c3ca:	0011      	movs	r1, r2
 800c3cc:	f7ff fc4a 	bl	800bc64 <_malloc_r>
 800c3d0:	0004      	movs	r4, r0
 800c3d2:	0020      	movs	r0, r4
 800c3d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c3d6:	2a00      	cmp	r2, #0
 800c3d8:	d103      	bne.n	800c3e2 <_realloc_r+0x24>
 800c3da:	f7ff fbf9 	bl	800bbd0 <_free_r>
 800c3de:	0034      	movs	r4, r6
 800c3e0:	e7f7      	b.n	800c3d2 <_realloc_r+0x14>
 800c3e2:	f000 f812 	bl	800c40a <_malloc_usable_size_r>
 800c3e6:	002c      	movs	r4, r5
 800c3e8:	42b0      	cmp	r0, r6
 800c3ea:	d2f2      	bcs.n	800c3d2 <_realloc_r+0x14>
 800c3ec:	0031      	movs	r1, r6
 800c3ee:	0038      	movs	r0, r7
 800c3f0:	f7ff fc38 	bl	800bc64 <_malloc_r>
 800c3f4:	1e04      	subs	r4, r0, #0
 800c3f6:	d0ec      	beq.n	800c3d2 <_realloc_r+0x14>
 800c3f8:	0029      	movs	r1, r5
 800c3fa:	0032      	movs	r2, r6
 800c3fc:	f7ff ffc3 	bl	800c386 <memcpy>
 800c400:	0029      	movs	r1, r5
 800c402:	0038      	movs	r0, r7
 800c404:	f7ff fbe4 	bl	800bbd0 <_free_r>
 800c408:	e7e3      	b.n	800c3d2 <_realloc_r+0x14>

0800c40a <_malloc_usable_size_r>:
 800c40a:	1f0b      	subs	r3, r1, #4
 800c40c:	681b      	ldr	r3, [r3, #0]
 800c40e:	1f18      	subs	r0, r3, #4
 800c410:	2b00      	cmp	r3, #0
 800c412:	da01      	bge.n	800c418 <_malloc_usable_size_r+0xe>
 800c414:	580b      	ldr	r3, [r1, r0]
 800c416:	18c0      	adds	r0, r0, r3
 800c418:	4770      	bx	lr
	...

0800c41c <_init>:
 800c41c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c41e:	46c0      	nop			; (mov r8, r8)
 800c420:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c422:	bc08      	pop	{r3}
 800c424:	469e      	mov	lr, r3
 800c426:	4770      	bx	lr

0800c428 <_fini>:
 800c428:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c42a:	46c0      	nop			; (mov r8, r8)
 800c42c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c42e:	bc08      	pop	{r3}
 800c430:	469e      	mov	lr, r3
 800c432:	4770      	bx	lr
