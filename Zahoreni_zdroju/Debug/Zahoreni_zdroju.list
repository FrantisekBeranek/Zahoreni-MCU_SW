
Zahoreni_zdroju.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e160  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000378  0800e220  0800e220  0001e220  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e598  0800e598  000201e0  2**0
                  CONTENTS
  4 .ARM          00000000  0800e598  0800e598  000201e0  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800e598  0800e598  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e598  0800e598  0001e598  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e59c  0800e59c  0001e59c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800e5a0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001408  200001e0  0800e780  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200015e8  0800e780  000215e8  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001ec64  00000000  00000000  00020208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004a8d  00000000  00000000  0003ee6c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000017b0  00000000  00000000  00043900  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000015b8  00000000  00000000  000450b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000204d3  00000000  00000000  00046668  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000213bc  00000000  00000000  00066b3b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a4769  00000000  00000000  00087ef7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0012c660  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000057cc  00000000  00000000  0012c6b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200001e0 	.word	0x200001e0
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800e208 	.word	0x0800e208

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200001e4 	.word	0x200001e4
 8000104:	0800e208 	.word	0x0800e208

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_shi>:
 8000118:	b403      	push	{r0, r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0040      	lsls	r0, r0, #1
 8000120:	0049      	lsls	r1, r1, #1
 8000122:	5e09      	ldrsh	r1, [r1, r0]
 8000124:	0049      	lsls	r1, r1, #1
 8000126:	448e      	add	lr, r1
 8000128:	bc03      	pop	{r0, r1}
 800012a:	4770      	bx	lr

0800012c <__udivsi3>:
 800012c:	2200      	movs	r2, #0
 800012e:	0843      	lsrs	r3, r0, #1
 8000130:	428b      	cmp	r3, r1
 8000132:	d374      	bcc.n	800021e <__udivsi3+0xf2>
 8000134:	0903      	lsrs	r3, r0, #4
 8000136:	428b      	cmp	r3, r1
 8000138:	d35f      	bcc.n	80001fa <__udivsi3+0xce>
 800013a:	0a03      	lsrs	r3, r0, #8
 800013c:	428b      	cmp	r3, r1
 800013e:	d344      	bcc.n	80001ca <__udivsi3+0x9e>
 8000140:	0b03      	lsrs	r3, r0, #12
 8000142:	428b      	cmp	r3, r1
 8000144:	d328      	bcc.n	8000198 <__udivsi3+0x6c>
 8000146:	0c03      	lsrs	r3, r0, #16
 8000148:	428b      	cmp	r3, r1
 800014a:	d30d      	bcc.n	8000168 <__udivsi3+0x3c>
 800014c:	22ff      	movs	r2, #255	; 0xff
 800014e:	0209      	lsls	r1, r1, #8
 8000150:	ba12      	rev	r2, r2
 8000152:	0c03      	lsrs	r3, r0, #16
 8000154:	428b      	cmp	r3, r1
 8000156:	d302      	bcc.n	800015e <__udivsi3+0x32>
 8000158:	1212      	asrs	r2, r2, #8
 800015a:	0209      	lsls	r1, r1, #8
 800015c:	d065      	beq.n	800022a <__udivsi3+0xfe>
 800015e:	0b03      	lsrs	r3, r0, #12
 8000160:	428b      	cmp	r3, r1
 8000162:	d319      	bcc.n	8000198 <__udivsi3+0x6c>
 8000164:	e000      	b.n	8000168 <__udivsi3+0x3c>
 8000166:	0a09      	lsrs	r1, r1, #8
 8000168:	0bc3      	lsrs	r3, r0, #15
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x46>
 800016e:	03cb      	lsls	r3, r1, #15
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b83      	lsrs	r3, r0, #14
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x52>
 800017a:	038b      	lsls	r3, r1, #14
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0b43      	lsrs	r3, r0, #13
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x5e>
 8000186:	034b      	lsls	r3, r1, #13
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b03      	lsrs	r3, r0, #12
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x6a>
 8000192:	030b      	lsls	r3, r1, #12
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0ac3      	lsrs	r3, r0, #11
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x76>
 800019e:	02cb      	lsls	r3, r1, #11
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a83      	lsrs	r3, r0, #10
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x82>
 80001aa:	028b      	lsls	r3, r1, #10
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0a43      	lsrs	r3, r0, #9
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x8e>
 80001b6:	024b      	lsls	r3, r1, #9
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a03      	lsrs	r3, r0, #8
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x9a>
 80001c2:	020b      	lsls	r3, r1, #8
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	d2cd      	bcs.n	8000166 <__udivsi3+0x3a>
 80001ca:	09c3      	lsrs	r3, r0, #7
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xa8>
 80001d0:	01cb      	lsls	r3, r1, #7
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0983      	lsrs	r3, r0, #6
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xb4>
 80001dc:	018b      	lsls	r3, r1, #6
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0943      	lsrs	r3, r0, #5
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xc0>
 80001e8:	014b      	lsls	r3, r1, #5
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0903      	lsrs	r3, r0, #4
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xcc>
 80001f4:	010b      	lsls	r3, r1, #4
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	08c3      	lsrs	r3, r0, #3
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xd8>
 8000200:	00cb      	lsls	r3, r1, #3
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0883      	lsrs	r3, r0, #2
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xe4>
 800020c:	008b      	lsls	r3, r1, #2
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0843      	lsrs	r3, r0, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xf0>
 8000218:	004b      	lsls	r3, r1, #1
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	1a41      	subs	r1, r0, r1
 8000220:	d200      	bcs.n	8000224 <__udivsi3+0xf8>
 8000222:	4601      	mov	r1, r0
 8000224:	4152      	adcs	r2, r2
 8000226:	4610      	mov	r0, r2
 8000228:	4770      	bx	lr
 800022a:	e7ff      	b.n	800022c <__udivsi3+0x100>
 800022c:	b501      	push	{r0, lr}
 800022e:	2000      	movs	r0, #0
 8000230:	f000 f8f0 	bl	8000414 <__aeabi_idiv0>
 8000234:	bd02      	pop	{r1, pc}
 8000236:	46c0      	nop			; (mov r8, r8)

08000238 <__aeabi_uidivmod>:
 8000238:	2900      	cmp	r1, #0
 800023a:	d0f7      	beq.n	800022c <__udivsi3+0x100>
 800023c:	e776      	b.n	800012c <__udivsi3>
 800023e:	4770      	bx	lr

08000240 <__divsi3>:
 8000240:	4603      	mov	r3, r0
 8000242:	430b      	orrs	r3, r1
 8000244:	d47f      	bmi.n	8000346 <__divsi3+0x106>
 8000246:	2200      	movs	r2, #0
 8000248:	0843      	lsrs	r3, r0, #1
 800024a:	428b      	cmp	r3, r1
 800024c:	d374      	bcc.n	8000338 <__divsi3+0xf8>
 800024e:	0903      	lsrs	r3, r0, #4
 8000250:	428b      	cmp	r3, r1
 8000252:	d35f      	bcc.n	8000314 <__divsi3+0xd4>
 8000254:	0a03      	lsrs	r3, r0, #8
 8000256:	428b      	cmp	r3, r1
 8000258:	d344      	bcc.n	80002e4 <__divsi3+0xa4>
 800025a:	0b03      	lsrs	r3, r0, #12
 800025c:	428b      	cmp	r3, r1
 800025e:	d328      	bcc.n	80002b2 <__divsi3+0x72>
 8000260:	0c03      	lsrs	r3, r0, #16
 8000262:	428b      	cmp	r3, r1
 8000264:	d30d      	bcc.n	8000282 <__divsi3+0x42>
 8000266:	22ff      	movs	r2, #255	; 0xff
 8000268:	0209      	lsls	r1, r1, #8
 800026a:	ba12      	rev	r2, r2
 800026c:	0c03      	lsrs	r3, r0, #16
 800026e:	428b      	cmp	r3, r1
 8000270:	d302      	bcc.n	8000278 <__divsi3+0x38>
 8000272:	1212      	asrs	r2, r2, #8
 8000274:	0209      	lsls	r1, r1, #8
 8000276:	d065      	beq.n	8000344 <__divsi3+0x104>
 8000278:	0b03      	lsrs	r3, r0, #12
 800027a:	428b      	cmp	r3, r1
 800027c:	d319      	bcc.n	80002b2 <__divsi3+0x72>
 800027e:	e000      	b.n	8000282 <__divsi3+0x42>
 8000280:	0a09      	lsrs	r1, r1, #8
 8000282:	0bc3      	lsrs	r3, r0, #15
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x4c>
 8000288:	03cb      	lsls	r3, r1, #15
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0b83      	lsrs	r3, r0, #14
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x58>
 8000294:	038b      	lsls	r3, r1, #14
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0b43      	lsrs	r3, r0, #13
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x64>
 80002a0:	034b      	lsls	r3, r1, #13
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0b03      	lsrs	r3, r0, #12
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x70>
 80002ac:	030b      	lsls	r3, r1, #12
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0ac3      	lsrs	r3, r0, #11
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0x7c>
 80002b8:	02cb      	lsls	r3, r1, #11
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	0a83      	lsrs	r3, r0, #10
 80002c0:	428b      	cmp	r3, r1
 80002c2:	d301      	bcc.n	80002c8 <__divsi3+0x88>
 80002c4:	028b      	lsls	r3, r1, #10
 80002c6:	1ac0      	subs	r0, r0, r3
 80002c8:	4152      	adcs	r2, r2
 80002ca:	0a43      	lsrs	r3, r0, #9
 80002cc:	428b      	cmp	r3, r1
 80002ce:	d301      	bcc.n	80002d4 <__divsi3+0x94>
 80002d0:	024b      	lsls	r3, r1, #9
 80002d2:	1ac0      	subs	r0, r0, r3
 80002d4:	4152      	adcs	r2, r2
 80002d6:	0a03      	lsrs	r3, r0, #8
 80002d8:	428b      	cmp	r3, r1
 80002da:	d301      	bcc.n	80002e0 <__divsi3+0xa0>
 80002dc:	020b      	lsls	r3, r1, #8
 80002de:	1ac0      	subs	r0, r0, r3
 80002e0:	4152      	adcs	r2, r2
 80002e2:	d2cd      	bcs.n	8000280 <__divsi3+0x40>
 80002e4:	09c3      	lsrs	r3, r0, #7
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xae>
 80002ea:	01cb      	lsls	r3, r1, #7
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	0983      	lsrs	r3, r0, #6
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xba>
 80002f6:	018b      	lsls	r3, r1, #6
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0943      	lsrs	r3, r0, #5
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xc6>
 8000302:	014b      	lsls	r3, r1, #5
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0903      	lsrs	r3, r0, #4
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xd2>
 800030e:	010b      	lsls	r3, r1, #4
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	08c3      	lsrs	r3, r0, #3
 8000316:	428b      	cmp	r3, r1
 8000318:	d301      	bcc.n	800031e <__divsi3+0xde>
 800031a:	00cb      	lsls	r3, r1, #3
 800031c:	1ac0      	subs	r0, r0, r3
 800031e:	4152      	adcs	r2, r2
 8000320:	0883      	lsrs	r3, r0, #2
 8000322:	428b      	cmp	r3, r1
 8000324:	d301      	bcc.n	800032a <__divsi3+0xea>
 8000326:	008b      	lsls	r3, r1, #2
 8000328:	1ac0      	subs	r0, r0, r3
 800032a:	4152      	adcs	r2, r2
 800032c:	0843      	lsrs	r3, r0, #1
 800032e:	428b      	cmp	r3, r1
 8000330:	d301      	bcc.n	8000336 <__divsi3+0xf6>
 8000332:	004b      	lsls	r3, r1, #1
 8000334:	1ac0      	subs	r0, r0, r3
 8000336:	4152      	adcs	r2, r2
 8000338:	1a41      	subs	r1, r0, r1
 800033a:	d200      	bcs.n	800033e <__divsi3+0xfe>
 800033c:	4601      	mov	r1, r0
 800033e:	4152      	adcs	r2, r2
 8000340:	4610      	mov	r0, r2
 8000342:	4770      	bx	lr
 8000344:	e05d      	b.n	8000402 <__divsi3+0x1c2>
 8000346:	0fca      	lsrs	r2, r1, #31
 8000348:	d000      	beq.n	800034c <__divsi3+0x10c>
 800034a:	4249      	negs	r1, r1
 800034c:	1003      	asrs	r3, r0, #32
 800034e:	d300      	bcc.n	8000352 <__divsi3+0x112>
 8000350:	4240      	negs	r0, r0
 8000352:	4053      	eors	r3, r2
 8000354:	2200      	movs	r2, #0
 8000356:	469c      	mov	ip, r3
 8000358:	0903      	lsrs	r3, r0, #4
 800035a:	428b      	cmp	r3, r1
 800035c:	d32d      	bcc.n	80003ba <__divsi3+0x17a>
 800035e:	0a03      	lsrs	r3, r0, #8
 8000360:	428b      	cmp	r3, r1
 8000362:	d312      	bcc.n	800038a <__divsi3+0x14a>
 8000364:	22fc      	movs	r2, #252	; 0xfc
 8000366:	0189      	lsls	r1, r1, #6
 8000368:	ba12      	rev	r2, r2
 800036a:	0a03      	lsrs	r3, r0, #8
 800036c:	428b      	cmp	r3, r1
 800036e:	d30c      	bcc.n	800038a <__divsi3+0x14a>
 8000370:	0189      	lsls	r1, r1, #6
 8000372:	1192      	asrs	r2, r2, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d308      	bcc.n	800038a <__divsi3+0x14a>
 8000378:	0189      	lsls	r1, r1, #6
 800037a:	1192      	asrs	r2, r2, #6
 800037c:	428b      	cmp	r3, r1
 800037e:	d304      	bcc.n	800038a <__divsi3+0x14a>
 8000380:	0189      	lsls	r1, r1, #6
 8000382:	d03a      	beq.n	80003fa <__divsi3+0x1ba>
 8000384:	1192      	asrs	r2, r2, #6
 8000386:	e000      	b.n	800038a <__divsi3+0x14a>
 8000388:	0989      	lsrs	r1, r1, #6
 800038a:	09c3      	lsrs	r3, r0, #7
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x154>
 8000390:	01cb      	lsls	r3, r1, #7
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	0983      	lsrs	r3, r0, #6
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x160>
 800039c:	018b      	lsls	r3, r1, #6
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0943      	lsrs	r3, r0, #5
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x16c>
 80003a8:	014b      	lsls	r3, r1, #5
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	0903      	lsrs	r3, r0, #4
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d301      	bcc.n	80003b8 <__divsi3+0x178>
 80003b4:	010b      	lsls	r3, r1, #4
 80003b6:	1ac0      	subs	r0, r0, r3
 80003b8:	4152      	adcs	r2, r2
 80003ba:	08c3      	lsrs	r3, r0, #3
 80003bc:	428b      	cmp	r3, r1
 80003be:	d301      	bcc.n	80003c4 <__divsi3+0x184>
 80003c0:	00cb      	lsls	r3, r1, #3
 80003c2:	1ac0      	subs	r0, r0, r3
 80003c4:	4152      	adcs	r2, r2
 80003c6:	0883      	lsrs	r3, r0, #2
 80003c8:	428b      	cmp	r3, r1
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x190>
 80003cc:	008b      	lsls	r3, r1, #2
 80003ce:	1ac0      	subs	r0, r0, r3
 80003d0:	4152      	adcs	r2, r2
 80003d2:	d2d9      	bcs.n	8000388 <__divsi3+0x148>
 80003d4:	0843      	lsrs	r3, r0, #1
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d301      	bcc.n	80003de <__divsi3+0x19e>
 80003da:	004b      	lsls	r3, r1, #1
 80003dc:	1ac0      	subs	r0, r0, r3
 80003de:	4152      	adcs	r2, r2
 80003e0:	1a41      	subs	r1, r0, r1
 80003e2:	d200      	bcs.n	80003e6 <__divsi3+0x1a6>
 80003e4:	4601      	mov	r1, r0
 80003e6:	4663      	mov	r3, ip
 80003e8:	4152      	adcs	r2, r2
 80003ea:	105b      	asrs	r3, r3, #1
 80003ec:	4610      	mov	r0, r2
 80003ee:	d301      	bcc.n	80003f4 <__divsi3+0x1b4>
 80003f0:	4240      	negs	r0, r0
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	d500      	bpl.n	80003f8 <__divsi3+0x1b8>
 80003f6:	4249      	negs	r1, r1
 80003f8:	4770      	bx	lr
 80003fa:	4663      	mov	r3, ip
 80003fc:	105b      	asrs	r3, r3, #1
 80003fe:	d300      	bcc.n	8000402 <__divsi3+0x1c2>
 8000400:	4240      	negs	r0, r0
 8000402:	b501      	push	{r0, lr}
 8000404:	2000      	movs	r0, #0
 8000406:	f000 f805 	bl	8000414 <__aeabi_idiv0>
 800040a:	bd02      	pop	{r1, pc}

0800040c <__aeabi_idivmod>:
 800040c:	2900      	cmp	r1, #0
 800040e:	d0f8      	beq.n	8000402 <__divsi3+0x1c2>
 8000410:	e716      	b.n	8000240 <__divsi3>
 8000412:	4770      	bx	lr

08000414 <__aeabi_idiv0>:
 8000414:	4770      	bx	lr
 8000416:	46c0      	nop			; (mov r8, r8)

08000418 <comHandler>:
 *
 * Při přijmutí instrukce nedochází k zpracování, ale pouze k nastavení adekvátního flagu.
 * Vykonání instrukce musí být zařízeno v jiné části hlavního programu.
 */
void comHandler(void)
{
 8000418:	b5f0      	push	{r4, r5, r6, r7, lr}
 800041a:	b0ab      	sub	sp, #172	; 0xac
 800041c:	af00      	add	r7, sp, #0
	//___Ošetření plného bufferu___//
	if(USB_Rx_Buffer->status == BUFFER_FULL)
 800041e:	4bdb      	ldr	r3, [pc, #876]	; (800078c <comHandler+0x374>)
 8000420:	681b      	ldr	r3, [r3, #0]
 8000422:	7d1b      	ldrb	r3, [r3, #20]
 8000424:	2b02      	cmp	r3, #2
 8000426:	d109      	bne.n	800043c <comHandler+0x24>
	{
		flags.data_received = 0;
 8000428:	4bd9      	ldr	r3, [pc, #868]	; (8000790 <comHandler+0x378>)
 800042a:	7a1a      	ldrb	r2, [r3, #8]
 800042c:	2101      	movs	r1, #1
 800042e:	438a      	bics	r2, r1
 8000430:	721a      	strb	r2, [r3, #8]
		clearBuffer(USB_Rx_Buffer);
 8000432:	4bd6      	ldr	r3, [pc, #856]	; (800078c <comHandler+0x374>)
 8000434:	681b      	ldr	r3, [r3, #0]
 8000436:	0018      	movs	r0, r3
 8000438:	f002 f8bb 	bl	80025b2 <clearBuffer>
	}

	//___Příjem dat___//
	//if(flags.data_received)
	//{
		int start = 0;	//flag o nalezení počátku paketu
 800043c:	2300      	movs	r3, #0
 800043e:	2294      	movs	r2, #148	; 0x94
 8000440:	18ba      	adds	r2, r7, r2
 8000442:	6013      	str	r3, [r2, #0]

		for(int i = 0; i < USB_Rx_Buffer->filled; i++)	//Projdi celou obsazenou část bufferu
 8000444:	2300      	movs	r3, #0
 8000446:	2280      	movs	r2, #128	; 0x80
 8000448:	2118      	movs	r1, #24
 800044a:	1852      	adds	r2, r2, r1
 800044c:	19d2      	adds	r2, r2, r7
 800044e:	6013      	str	r3, [r2, #0]
 8000450:	e05e      	b.n	8000510 <comHandler+0xf8>
		{
			//Přečti znaky na pozici i a i+1
			char tmp1, tmp2;
			at(USB_Rx_Buffer, i, &tmp1);
 8000452:	4bce      	ldr	r3, [pc, #824]	; (800078c <comHandler+0x374>)
 8000454:	681b      	ldr	r3, [r3, #0]
 8000456:	2467      	movs	r4, #103	; 0x67
 8000458:	2218      	movs	r2, #24
 800045a:	18a2      	adds	r2, r4, r2
 800045c:	19d2      	adds	r2, r2, r7
 800045e:	2180      	movs	r1, #128	; 0x80
 8000460:	2018      	movs	r0, #24
 8000462:	1809      	adds	r1, r1, r0
 8000464:	19c8      	adds	r0, r1, r7
 8000466:	6801      	ldr	r1, [r0, #0]
 8000468:	0018      	movs	r0, r3
 800046a:	f002 f94a 	bl	8002702 <at>
			at(USB_Rx_Buffer, i+1, &tmp2);
 800046e:	4bc7      	ldr	r3, [pc, #796]	; (800078c <comHandler+0x374>)
 8000470:	6818      	ldr	r0, [r3, #0]
 8000472:	2180      	movs	r1, #128	; 0x80
 8000474:	2318      	movs	r3, #24
 8000476:	18cb      	adds	r3, r1, r3
 8000478:	19db      	adds	r3, r3, r7
 800047a:	681b      	ldr	r3, [r3, #0]
 800047c:	3301      	adds	r3, #1
 800047e:	2266      	movs	r2, #102	; 0x66
 8000480:	2118      	movs	r1, #24
 8000482:	1852      	adds	r2, r2, r1
 8000484:	19d2      	adds	r2, r2, r7
 8000486:	0019      	movs	r1, r3
 8000488:	f002 f93b 	bl	8002702 <at>

			if(tmp1 == '>' && tmp1 == '>')	//začátek paketu
 800048c:	2318      	movs	r3, #24
 800048e:	18e3      	adds	r3, r4, r3
 8000490:	19db      	adds	r3, r3, r7
 8000492:	781b      	ldrb	r3, [r3, #0]
 8000494:	2b3e      	cmp	r3, #62	; 0x3e
 8000496:	d131      	bne.n	80004fc <comHandler+0xe4>
 8000498:	2318      	movs	r3, #24
 800049a:	18e3      	adds	r3, r4, r3
 800049c:	19db      	adds	r3, r3, r7
 800049e:	781b      	ldrb	r3, [r3, #0]
 80004a0:	2b3e      	cmp	r3, #62	; 0x3e
 80004a2:	d12b      	bne.n	80004fc <comHandler+0xe4>
			{
				for(int y = 0; y < i; y++)	//vymazání obsahu buuferu před začátkem paketu (neplatná data)
 80004a4:	2300      	movs	r3, #0
 80004a6:	2284      	movs	r2, #132	; 0x84
 80004a8:	2118      	movs	r1, #24
 80004aa:	1852      	adds	r2, r2, r1
 80004ac:	19d2      	adds	r2, r2, r7
 80004ae:	6013      	str	r3, [r2, #0]
 80004b0:	e013      	b.n	80004da <comHandler+0xc2>
				{
					char tmp;
					pop(USB_Rx_Buffer, &tmp);
 80004b2:	4bb6      	ldr	r3, [pc, #728]	; (800078c <comHandler+0x374>)
 80004b4:	681b      	ldr	r3, [r3, #0]
 80004b6:	2265      	movs	r2, #101	; 0x65
 80004b8:	2118      	movs	r1, #24
 80004ba:	1852      	adds	r2, r2, r1
 80004bc:	19d2      	adds	r2, r2, r7
 80004be:	0011      	movs	r1, r2
 80004c0:	0018      	movs	r0, r3
 80004c2:	f002 f8eb 	bl	800269c <pop>
				for(int y = 0; y < i; y++)	//vymazání obsahu buuferu před začátkem paketu (neplatná data)
 80004c6:	2284      	movs	r2, #132	; 0x84
 80004c8:	2318      	movs	r3, #24
 80004ca:	18d3      	adds	r3, r2, r3
 80004cc:	19db      	adds	r3, r3, r7
 80004ce:	681b      	ldr	r3, [r3, #0]
 80004d0:	3301      	adds	r3, #1
 80004d2:	2118      	movs	r1, #24
 80004d4:	1852      	adds	r2, r2, r1
 80004d6:	19d2      	adds	r2, r2, r7
 80004d8:	6013      	str	r3, [r2, #0]
 80004da:	2384      	movs	r3, #132	; 0x84
 80004dc:	2218      	movs	r2, #24
 80004de:	189b      	adds	r3, r3, r2
 80004e0:	19db      	adds	r3, r3, r7
 80004e2:	681a      	ldr	r2, [r3, #0]
 80004e4:	2380      	movs	r3, #128	; 0x80
 80004e6:	2118      	movs	r1, #24
 80004e8:	185b      	adds	r3, r3, r1
 80004ea:	19db      	adds	r3, r3, r7
 80004ec:	681b      	ldr	r3, [r3, #0]
 80004ee:	429a      	cmp	r2, r3
 80004f0:	dbdf      	blt.n	80004b2 <comHandler+0x9a>
				}
				start = 1;	//nastav flag o nalezení počátku
 80004f2:	2301      	movs	r3, #1
 80004f4:	2294      	movs	r2, #148	; 0x94
 80004f6:	18ba      	adds	r2, r7, r2
 80004f8:	6013      	str	r3, [r2, #0]
 80004fa:	e013      	b.n	8000524 <comHandler+0x10c>
		for(int i = 0; i < USB_Rx_Buffer->filled; i++)	//Projdi celou obsazenou část bufferu
 80004fc:	2280      	movs	r2, #128	; 0x80
 80004fe:	2318      	movs	r3, #24
 8000500:	18d3      	adds	r3, r2, r3
 8000502:	19db      	adds	r3, r3, r7
 8000504:	681b      	ldr	r3, [r3, #0]
 8000506:	3301      	adds	r3, #1
 8000508:	2118      	movs	r1, #24
 800050a:	1852      	adds	r2, r2, r1
 800050c:	19d2      	adds	r2, r2, r7
 800050e:	6013      	str	r3, [r2, #0]
 8000510:	4b9e      	ldr	r3, [pc, #632]	; (800078c <comHandler+0x374>)
 8000512:	681b      	ldr	r3, [r3, #0]
 8000514:	689b      	ldr	r3, [r3, #8]
 8000516:	2280      	movs	r2, #128	; 0x80
 8000518:	2118      	movs	r1, #24
 800051a:	1852      	adds	r2, r2, r1
 800051c:	19d2      	adds	r2, r2, r7
 800051e:	6812      	ldr	r2, [r2, #0]
 8000520:	429a      	cmp	r2, r3
 8000522:	db96      	blt.n	8000452 <comHandler+0x3a>
				break;
			}
		}

		if(start)	//počátek byl nalezen
 8000524:	2394      	movs	r3, #148	; 0x94
 8000526:	18fb      	adds	r3, r7, r3
 8000528:	681b      	ldr	r3, [r3, #0]
 800052a:	2b00      	cmp	r3, #0
 800052c:	d100      	bne.n	8000530 <comHandler+0x118>
 800052e:	e097      	b.n	8000660 <comHandler+0x248>
		{
			for(int i = 0; i < USB_Rx_Buffer->filled; i++)	//Projdi celou obsazenou část bufferu
 8000530:	2300      	movs	r3, #0
 8000532:	2288      	movs	r2, #136	; 0x88
 8000534:	2118      	movs	r1, #24
 8000536:	1852      	adds	r2, r2, r1
 8000538:	19d2      	adds	r2, r2, r7
 800053a:	6013      	str	r3, [r2, #0]
 800053c:	e080      	b.n	8000640 <comHandler+0x228>
			{
				//Přečti znaky na pozici i a i+1
				char tmp1, tmp2;
				at(USB_Rx_Buffer, i, &tmp1);
 800053e:	4b93      	ldr	r3, [pc, #588]	; (800078c <comHandler+0x374>)
 8000540:	681b      	ldr	r3, [r3, #0]
 8000542:	2464      	movs	r4, #100	; 0x64
 8000544:	2218      	movs	r2, #24
 8000546:	18a2      	adds	r2, r4, r2
 8000548:	19d2      	adds	r2, r2, r7
 800054a:	2188      	movs	r1, #136	; 0x88
 800054c:	2018      	movs	r0, #24
 800054e:	1809      	adds	r1, r1, r0
 8000550:	19c8      	adds	r0, r1, r7
 8000552:	6801      	ldr	r1, [r0, #0]
 8000554:	0018      	movs	r0, r3
 8000556:	f002 f8d4 	bl	8002702 <at>
				at(USB_Rx_Buffer, i+1, &tmp2);
 800055a:	4b8c      	ldr	r3, [pc, #560]	; (800078c <comHandler+0x374>)
 800055c:	6818      	ldr	r0, [r3, #0]
 800055e:	2188      	movs	r1, #136	; 0x88
 8000560:	2318      	movs	r3, #24
 8000562:	18cb      	adds	r3, r1, r3
 8000564:	19db      	adds	r3, r3, r7
 8000566:	681b      	ldr	r3, [r3, #0]
 8000568:	3301      	adds	r3, #1
 800056a:	2263      	movs	r2, #99	; 0x63
 800056c:	2118      	movs	r1, #24
 800056e:	1852      	adds	r2, r2, r1
 8000570:	19d2      	adds	r2, r2, r7
 8000572:	0019      	movs	r1, r3
 8000574:	f002 f8c5 	bl	8002702 <at>

				if(tmp1 == '<' && tmp1 == '<')	//konec paketu
 8000578:	2318      	movs	r3, #24
 800057a:	18e3      	adds	r3, r4, r3
 800057c:	19db      	adds	r3, r3, r7
 800057e:	781b      	ldrb	r3, [r3, #0]
 8000580:	2b3c      	cmp	r3, #60	; 0x3c
 8000582:	d153      	bne.n	800062c <comHandler+0x214>
 8000584:	2318      	movs	r3, #24
 8000586:	18e3      	adds	r3, r4, r3
 8000588:	19db      	adds	r3, r3, r7
 800058a:	781b      	ldrb	r3, [r3, #0]
 800058c:	2b3c      	cmp	r3, #60	; 0x3c
 800058e:	d14d      	bne.n	800062c <comHandler+0x214>
				{
					uint8_t* tmp = (uint8_t*)malloc((i+2)*sizeof(uint8_t));
 8000590:	2188      	movs	r1, #136	; 0x88
 8000592:	2318      	movs	r3, #24
 8000594:	18cb      	adds	r3, r1, r3
 8000596:	19db      	adds	r3, r3, r7
 8000598:	681b      	ldr	r3, [r3, #0]
 800059a:	3302      	adds	r3, #2
 800059c:	0018      	movs	r0, r3
 800059e:	f00d f9ad 	bl	800d8fc <malloc>
 80005a2:	0003      	movs	r3, r0
 80005a4:	228c      	movs	r2, #140	; 0x8c
 80005a6:	18ba      	adds	r2, r7, r2
 80005a8:	6013      	str	r3, [r2, #0]
					for(int y = 0; y < i+2; y++)	//překopírování zprávy
 80005aa:	2300      	movs	r3, #0
 80005ac:	228c      	movs	r2, #140	; 0x8c
 80005ae:	2118      	movs	r1, #24
 80005b0:	1852      	adds	r2, r2, r1
 80005b2:	19d2      	adds	r2, r2, r7
 80005b4:	6013      	str	r3, [r2, #0]
 80005b6:	e017      	b.n	80005e8 <comHandler+0x1d0>
					{
						pop(USB_Rx_Buffer, &tmp[y]);
 80005b8:	4b74      	ldr	r3, [pc, #464]	; (800078c <comHandler+0x374>)
 80005ba:	6818      	ldr	r0, [r3, #0]
 80005bc:	248c      	movs	r4, #140	; 0x8c
 80005be:	2318      	movs	r3, #24
 80005c0:	18e3      	adds	r3, r4, r3
 80005c2:	19db      	adds	r3, r3, r7
 80005c4:	681b      	ldr	r3, [r3, #0]
 80005c6:	228c      	movs	r2, #140	; 0x8c
 80005c8:	18ba      	adds	r2, r7, r2
 80005ca:	6812      	ldr	r2, [r2, #0]
 80005cc:	18d3      	adds	r3, r2, r3
 80005ce:	0019      	movs	r1, r3
 80005d0:	f002 f864 	bl	800269c <pop>
					for(int y = 0; y < i+2; y++)	//překopírování zprávy
 80005d4:	0022      	movs	r2, r4
 80005d6:	2318      	movs	r3, #24
 80005d8:	18d3      	adds	r3, r2, r3
 80005da:	19db      	adds	r3, r3, r7
 80005dc:	681b      	ldr	r3, [r3, #0]
 80005de:	3301      	adds	r3, #1
 80005e0:	2118      	movs	r1, #24
 80005e2:	1852      	adds	r2, r2, r1
 80005e4:	19d2      	adds	r2, r2, r7
 80005e6:	6013      	str	r3, [r2, #0]
 80005e8:	2188      	movs	r1, #136	; 0x88
 80005ea:	2318      	movs	r3, #24
 80005ec:	18cb      	adds	r3, r1, r3
 80005ee:	19db      	adds	r3, r3, r7
 80005f0:	681b      	ldr	r3, [r3, #0]
 80005f2:	3301      	adds	r3, #1
 80005f4:	228c      	movs	r2, #140	; 0x8c
 80005f6:	2018      	movs	r0, #24
 80005f8:	1812      	adds	r2, r2, r0
 80005fa:	19d2      	adds	r2, r2, r7
 80005fc:	6812      	ldr	r2, [r2, #0]
 80005fe:	429a      	cmp	r2, r3
 8000600:	ddda      	ble.n	80005b8 <comHandler+0x1a0>
					}

					decodePaket(tmp, i+2);
 8000602:	2318      	movs	r3, #24
 8000604:	18cb      	adds	r3, r1, r3
 8000606:	19db      	adds	r3, r3, r7
 8000608:	681b      	ldr	r3, [r3, #0]
 800060a:	b2db      	uxtb	r3, r3
 800060c:	3302      	adds	r3, #2
 800060e:	b2da      	uxtb	r2, r3
 8000610:	238c      	movs	r3, #140	; 0x8c
 8000612:	18fb      	adds	r3, r7, r3
 8000614:	681b      	ldr	r3, [r3, #0]
 8000616:	0011      	movs	r1, r2
 8000618:	0018      	movs	r0, r3
 800061a:	f000 faf7 	bl	8000c0c <decodePaket>
					free(tmp);
 800061e:	238c      	movs	r3, #140	; 0x8c
 8000620:	18fb      	adds	r3, r7, r3
 8000622:	681b      	ldr	r3, [r3, #0]
 8000624:	0018      	movs	r0, r3
 8000626:	f00d f973 	bl	800d910 <free>
					break;
 800062a:	e014      	b.n	8000656 <comHandler+0x23e>
			for(int i = 0; i < USB_Rx_Buffer->filled; i++)	//Projdi celou obsazenou část bufferu
 800062c:	2288      	movs	r2, #136	; 0x88
 800062e:	2318      	movs	r3, #24
 8000630:	18d3      	adds	r3, r2, r3
 8000632:	19db      	adds	r3, r3, r7
 8000634:	681b      	ldr	r3, [r3, #0]
 8000636:	3301      	adds	r3, #1
 8000638:	2118      	movs	r1, #24
 800063a:	1852      	adds	r2, r2, r1
 800063c:	19d2      	adds	r2, r2, r7
 800063e:	6013      	str	r3, [r2, #0]
 8000640:	4b52      	ldr	r3, [pc, #328]	; (800078c <comHandler+0x374>)
 8000642:	681b      	ldr	r3, [r3, #0]
 8000644:	689b      	ldr	r3, [r3, #8]
 8000646:	2288      	movs	r2, #136	; 0x88
 8000648:	2118      	movs	r1, #24
 800064a:	1852      	adds	r2, r2, r1
 800064c:	19d2      	adds	r2, r2, r7
 800064e:	6812      	ldr	r2, [r2, #0]
 8000650:	429a      	cmp	r2, r3
 8000652:	da00      	bge.n	8000656 <comHandler+0x23e>
 8000654:	e773      	b.n	800053e <comHandler+0x126>
				}
			}
		//}

		flags.data_received = 0;
 8000656:	4b4e      	ldr	r3, [pc, #312]	; (8000790 <comHandler+0x378>)
 8000658:	7a1a      	ldrb	r2, [r3, #8]
 800065a:	2101      	movs	r1, #1
 800065c:	438a      	bics	r2, r1
 800065e:	721a      	strb	r2, [r3, #8]
	}

	if(flags.testProgress)	//Pokud test pokročil...
 8000660:	4b4b      	ldr	r3, [pc, #300]	; (8000790 <comHandler+0x378>)
 8000662:	7e1b      	ldrb	r3, [r3, #24]
 8000664:	2202      	movs	r2, #2
 8000666:	4013      	ands	r3, r2
 8000668:	b2db      	uxtb	r3, r3
 800066a:	2b00      	cmp	r3, #0
 800066c:	d04f      	beq.n	800070e <comHandler+0x2f6>
	{
		//...zjisti v jaké je fázi...
		char testPhaseChr;
		switch(currentPhase())
 800066e:	f002 fb5d 	bl	8002d2c <currentPhase>
 8000672:	0003      	movs	r3, r0
 8000674:	2b06      	cmp	r3, #6
 8000676:	d82e      	bhi.n	80006d6 <comHandler+0x2be>
 8000678:	009a      	lsls	r2, r3, #2
 800067a:	4b46      	ldr	r3, [pc, #280]	; (8000794 <comHandler+0x37c>)
 800067c:	18d3      	adds	r3, r2, r3
 800067e:	681b      	ldr	r3, [r3, #0]
 8000680:	469f      	mov	pc, r3
		{
		case START:
			testPhaseChr = 's';
 8000682:	2362      	movs	r3, #98	; 0x62
 8000684:	2218      	movs	r2, #24
 8000686:	189b      	adds	r3, r3, r2
 8000688:	19db      	adds	r3, r3, r7
 800068a:	2273      	movs	r2, #115	; 0x73
 800068c:	701a      	strb	r2, [r3, #0]
			break;
 800068e:	e029      	b.n	80006e4 <comHandler+0x2cc>
		case START_DONE:
			testPhaseChr = 's';
 8000690:	2362      	movs	r3, #98	; 0x62
 8000692:	2218      	movs	r2, #24
 8000694:	189b      	adds	r3, r3, r2
 8000696:	19db      	adds	r3, r3, r7
 8000698:	2273      	movs	r2, #115	; 0x73
 800069a:	701a      	strb	r2, [r3, #0]
			break;
 800069c:	e022      	b.n	80006e4 <comHandler+0x2cc>
		case MAIN_TEST:
			testPhaseChr = 'm';
 800069e:	2362      	movs	r3, #98	; 0x62
 80006a0:	2218      	movs	r2, #24
 80006a2:	189b      	adds	r3, r3, r2
 80006a4:	19db      	adds	r3, r3, r7
 80006a6:	226d      	movs	r2, #109	; 0x6d
 80006a8:	701a      	strb	r2, [r3, #0]
			break;
 80006aa:	e01b      	b.n	80006e4 <comHandler+0x2cc>
		case MAIN_TEST_DONE:
			testPhaseChr = 'm';
 80006ac:	2362      	movs	r3, #98	; 0x62
 80006ae:	2218      	movs	r2, #24
 80006b0:	189b      	adds	r3, r3, r2
 80006b2:	19db      	adds	r3, r3, r7
 80006b4:	226d      	movs	r2, #109	; 0x6d
 80006b6:	701a      	strb	r2, [r3, #0]
			break;
 80006b8:	e014      	b.n	80006e4 <comHandler+0x2cc>
		case BATTERY_TEST:
			testPhaseChr = 'b';
 80006ba:	2362      	movs	r3, #98	; 0x62
 80006bc:	2218      	movs	r2, #24
 80006be:	189b      	adds	r3, r3, r2
 80006c0:	19db      	adds	r3, r3, r7
 80006c2:	2262      	movs	r2, #98	; 0x62
 80006c4:	701a      	strb	r2, [r3, #0]
			break;
 80006c6:	e00d      	b.n	80006e4 <comHandler+0x2cc>
		case BATTERY_TEST_DONE:
			testPhaseChr = 'M';
 80006c8:	2362      	movs	r3, #98	; 0x62
 80006ca:	2218      	movs	r2, #24
 80006cc:	189b      	adds	r3, r3, r2
 80006ce:	19db      	adds	r3, r3, r7
 80006d0:	224d      	movs	r2, #77	; 0x4d
 80006d2:	701a      	strb	r2, [r3, #0]
			break;
 80006d4:	e006      	b.n	80006e4 <comHandler+0x2cc>
		default:
			testPhaseChr = 'e';
 80006d6:	2362      	movs	r3, #98	; 0x62
 80006d8:	2218      	movs	r2, #24
 80006da:	189b      	adds	r3, r3, r2
 80006dc:	19db      	adds	r3, r3, r7
 80006de:	2265      	movs	r2, #101	; 0x65
 80006e0:	701a      	strb	r2, [r3, #0]
			break;
 80006e2:	46c0      	nop			; (mov r8, r8)
		}

		//...a upozorni na to PC
		Paket paket;
		fillPaket(&paket, TEST_PHASE_PAKET, &testPhaseChr, 1);
 80006e4:	2362      	movs	r3, #98	; 0x62
 80006e6:	2218      	movs	r2, #24
 80006e8:	189b      	adds	r3, r3, r2
 80006ea:	19da      	adds	r2, r3, r7
 80006ec:	2454      	movs	r4, #84	; 0x54
 80006ee:	2318      	movs	r3, #24
 80006f0:	18e3      	adds	r3, r4, r3
 80006f2:	19d8      	adds	r0, r3, r7
 80006f4:	2301      	movs	r3, #1
 80006f6:	2104      	movs	r1, #4
 80006f8:	f000 f98c 	bl	8000a14 <fillPaket>
		pushPaket(USB_Tx_Buffer, &paket);
 80006fc:	4b26      	ldr	r3, [pc, #152]	; (8000798 <comHandler+0x380>)
 80006fe:	681b      	ldr	r3, [r3, #0]
 8000700:	2218      	movs	r2, #24
 8000702:	18a2      	adds	r2, r4, r2
 8000704:	19d2      	adds	r2, r2, r7
 8000706:	0011      	movs	r1, r2
 8000708:	0018      	movs	r0, r3
 800070a:	f000 f9c3 	bl	8000a94 <pushPaket>
	}

	if(flags.meas.measComplete)	//Jsou připravena data k odeslání
 800070e:	4b20      	ldr	r3, [pc, #128]	; (8000790 <comHandler+0x378>)
 8000710:	7d1b      	ldrb	r3, [r3, #20]
 8000712:	2202      	movs	r2, #2
 8000714:	4013      	ands	r3, r2
 8000716:	b2db      	uxtb	r3, r3
 8000718:	2b00      	cmp	r3, #0
 800071a:	d056      	beq.n	80007ca <comHandler+0x3b2>
	{
		if(!flags.meas.calibMeas)
 800071c:	4b1c      	ldr	r3, [pc, #112]	; (8000790 <comHandler+0x378>)
 800071e:	7d1b      	ldrb	r3, [r3, #20]
 8000720:	2240      	movs	r2, #64	; 0x40
 8000722:	4013      	ands	r3, r2
 8000724:	b2db      	uxtb	r3, r3
 8000726:	2b00      	cmp	r3, #0
 8000728:	d117      	bne.n	800075a <comHandler+0x342>
		{
			//Nejde o kalibrační data -> pošli číslo dat
			Paket paket;
			fillPaket(&paket, TEST_NUM_PAKET, &testNum, 1);
 800072a:	4a1c      	ldr	r2, [pc, #112]	; (800079c <comHandler+0x384>)
 800072c:	243c      	movs	r4, #60	; 0x3c
 800072e:	2318      	movs	r3, #24
 8000730:	18e3      	adds	r3, r4, r3
 8000732:	19d8      	adds	r0, r3, r7
 8000734:	2301      	movs	r3, #1
 8000736:	2103      	movs	r1, #3
 8000738:	f000 f96c 	bl	8000a14 <fillPaket>
			pushPaket(USB_Tx_Buffer, &paket);
 800073c:	4b16      	ldr	r3, [pc, #88]	; (8000798 <comHandler+0x380>)
 800073e:	681b      	ldr	r3, [r3, #0]
 8000740:	2218      	movs	r2, #24
 8000742:	18a2      	adds	r2, r4, r2
 8000744:	19d2      	adds	r2, r2, r7
 8000746:	0011      	movs	r1, r2
 8000748:	0018      	movs	r0, r3
 800074a:	f000 f9a3 	bl	8000a94 <pushPaket>
			testNum++;
 800074e:	4b13      	ldr	r3, [pc, #76]	; (800079c <comHandler+0x384>)
 8000750:	681b      	ldr	r3, [r3, #0]
 8000752:	1c5a      	adds	r2, r3, #1
 8000754:	4b11      	ldr	r3, [pc, #68]	; (800079c <comHandler+0x384>)
 8000756:	601a      	str	r2, [r3, #0]
 8000758:	e004      	b.n	8000764 <comHandler+0x34c>
		}
		else
		{
			flags.meas.calibMeas = 0;
 800075a:	4b0d      	ldr	r3, [pc, #52]	; (8000790 <comHandler+0x378>)
 800075c:	7d1a      	ldrb	r2, [r3, #20]
 800075e:	2140      	movs	r1, #64	; 0x40
 8000760:	438a      	bics	r2, r1
 8000762:	751a      	strb	r2, [r3, #20]
		}

		//___Připrav a odešli paket___//
		makeByteArray();
 8000764:	f000 f92a 	bl	80009bc <makeByteArray>
		Paket paket;
		if(flags.meas.onlyBattery)
 8000768:	4b09      	ldr	r3, [pc, #36]	; (8000790 <comHandler+0x378>)
 800076a:	7d1b      	ldrb	r3, [r3, #20]
 800076c:	2220      	movs	r2, #32
 800076e:	4013      	ands	r3, r2
 8000770:	b2db      	uxtb	r3, r3
 8000772:	2b00      	cmp	r3, #0
 8000774:	d016      	beq.n	80007a4 <comHandler+0x38c>
		{
			fillPaket(&paket, DATA_BAT_PAKET, data+12, BAT_DATA_PAKET_LENGHT);
 8000776:	4a0a      	ldr	r2, [pc, #40]	; (80007a0 <comHandler+0x388>)
 8000778:	2348      	movs	r3, #72	; 0x48
 800077a:	2118      	movs	r1, #24
 800077c:	185b      	adds	r3, r3, r1
 800077e:	19d8      	adds	r0, r3, r7
 8000780:	2304      	movs	r3, #4
 8000782:	2102      	movs	r1, #2
 8000784:	f000 f946 	bl	8000a14 <fillPaket>
 8000788:	e015      	b.n	80007b6 <comHandler+0x39e>
 800078a:	46c0      	nop			; (mov r8, r8)
 800078c:	20000ec0 	.word	0x20000ec0
 8000790:	200003d8 	.word	0x200003d8
 8000794:	0800e348 	.word	0x0800e348
 8000798:	200001fc 	.word	0x200001fc
 800079c:	2000041c 	.word	0x2000041c
 80007a0:	2000020c 	.word	0x2000020c
		}
		else
		{
			fillPaket(&paket, DATA_PAKET, data, DATA_PAKET_LENGHT);
 80007a4:	4a81      	ldr	r2, [pc, #516]	; (80009ac <comHandler+0x594>)
 80007a6:	2348      	movs	r3, #72	; 0x48
 80007a8:	2118      	movs	r1, #24
 80007aa:	185b      	adds	r3, r3, r1
 80007ac:	19d8      	adds	r0, r3, r7
 80007ae:	2310      	movs	r3, #16
 80007b0:	2101      	movs	r1, #1
 80007b2:	f000 f92f 	bl	8000a14 <fillPaket>
		}
		pushPaket(USB_Tx_Buffer, &paket);
 80007b6:	4b7e      	ldr	r3, [pc, #504]	; (80009b0 <comHandler+0x598>)
 80007b8:	681b      	ldr	r3, [r3, #0]
 80007ba:	2248      	movs	r2, #72	; 0x48
 80007bc:	2118      	movs	r1, #24
 80007be:	1852      	adds	r2, r2, r1
 80007c0:	19d2      	adds	r2, r2, r7
 80007c2:	0011      	movs	r1, r2
 80007c4:	0018      	movs	r0, r3
 80007c6:	f000 f965 	bl	8000a94 <pushPaket>
	}

#ifdef __APP_COMPATIBILITY__
	//___Odesílání refresh zprávy___//
	if(flags.time.sec)
 80007ca:	4b7a      	ldr	r3, [pc, #488]	; (80009b4 <comHandler+0x59c>)
 80007cc:	781b      	ldrb	r3, [r3, #0]
 80007ce:	2202      	movs	r2, #2
 80007d0:	4013      	ands	r3, r2
 80007d2:	b2db      	uxtb	r3, r3
 80007d4:	2b00      	cmp	r3, #0
 80007d6:	d011      	beq.n	80007fc <comHandler+0x3e4>
	{
		Paket paket;
		fillPaket(&paket, REFRESH_PAKET, NULL, 0);
 80007d8:	2430      	movs	r4, #48	; 0x30
 80007da:	2318      	movs	r3, #24
 80007dc:	18e3      	adds	r3, r4, r3
 80007de:	19d8      	adds	r0, r3, r7
 80007e0:	2300      	movs	r3, #0
 80007e2:	2200      	movs	r2, #0
 80007e4:	2106      	movs	r1, #6
 80007e6:	f000 f915 	bl	8000a14 <fillPaket>
		pushPaket(USB_Tx_Buffer, &paket);
 80007ea:	4b71      	ldr	r3, [pc, #452]	; (80009b0 <comHandler+0x598>)
 80007ec:	681b      	ldr	r3, [r3, #0]
 80007ee:	2218      	movs	r2, #24
 80007f0:	18a2      	adds	r2, r4, r2
 80007f2:	19d2      	adds	r2, r2, r7
 80007f4:	0011      	movs	r1, r2
 80007f6:	0018      	movs	r0, r3
 80007f8:	f000 f94c 	bl	8000a94 <pushPaket>
	}
#endif

	//___Upozornění o stavu topení___//
	if(flags.heaterState)
 80007fc:	4b6d      	ldr	r3, [pc, #436]	; (80009b4 <comHandler+0x59c>)
 80007fe:	7e1b      	ldrb	r3, [r3, #24]
 8000800:	2230      	movs	r2, #48	; 0x30
 8000802:	4013      	ands	r3, r2
 8000804:	b2db      	uxtb	r3, r3
 8000806:	2b00      	cmp	r3, #0
 8000808:	d024      	beq.n	8000854 <comHandler+0x43c>
	{
		Paket paket;
		uint8_t data;
		data = flags.heaterState - 1;
 800080a:	4b6a      	ldr	r3, [pc, #424]	; (80009b4 <comHandler+0x59c>)
 800080c:	7e1b      	ldrb	r3, [r3, #24]
 800080e:	069b      	lsls	r3, r3, #26
 8000810:	0f9b      	lsrs	r3, r3, #30
 8000812:	b2db      	uxtb	r3, r3
 8000814:	3b01      	subs	r3, #1
 8000816:	b2da      	uxtb	r2, r3
 8000818:	2123      	movs	r1, #35	; 0x23
 800081a:	2318      	movs	r3, #24
 800081c:	18cb      	adds	r3, r1, r3
 800081e:	19db      	adds	r3, r3, r7
 8000820:	701a      	strb	r2, [r3, #0]
		fillPaket(&paket, HEATER_PAKET, &data, 1);
 8000822:	2318      	movs	r3, #24
 8000824:	18cb      	adds	r3, r1, r3
 8000826:	19da      	adds	r2, r3, r7
 8000828:	2424      	movs	r4, #36	; 0x24
 800082a:	2318      	movs	r3, #24
 800082c:	18e3      	adds	r3, r4, r3
 800082e:	19d8      	adds	r0, r3, r7
 8000830:	2301      	movs	r3, #1
 8000832:	2107      	movs	r1, #7
 8000834:	f000 f8ee 	bl	8000a14 <fillPaket>
		pushPaket(USB_Tx_Buffer, &paket);
 8000838:	4b5d      	ldr	r3, [pc, #372]	; (80009b0 <comHandler+0x598>)
 800083a:	681b      	ldr	r3, [r3, #0]
 800083c:	2218      	movs	r2, #24
 800083e:	18a2      	adds	r2, r4, r2
 8000840:	19d2      	adds	r2, r2, r7
 8000842:	0011      	movs	r1, r2
 8000844:	0018      	movs	r0, r3
 8000846:	f000 f925 	bl	8000a94 <pushPaket>
		flags.heaterState = 0;
 800084a:	4b5a      	ldr	r3, [pc, #360]	; (80009b4 <comHandler+0x59c>)
 800084c:	7e1a      	ldrb	r2, [r3, #24]
 800084e:	2130      	movs	r1, #48	; 0x30
 8000850:	438a      	bics	r2, r1
 8000852:	761a      	strb	r2, [r3, #24]
	}

	if(flags.buttons.butt0_ver)
 8000854:	4b57      	ldr	r3, [pc, #348]	; (80009b4 <comHandler+0x59c>)
 8000856:	791b      	ldrb	r3, [r3, #4]
 8000858:	2202      	movs	r2, #2
 800085a:	4013      	ands	r3, r2
 800085c:	b2db      	uxtb	r3, r3
 800085e:	2b00      	cmp	r3, #0
 8000860:	d011      	beq.n	8000886 <comHandler+0x46e>
	{
		Paket paket;
		fillPaket(&paket, CANCEL_FROM_USER_PAKET, NULL, 0);
 8000862:	2414      	movs	r4, #20
 8000864:	2318      	movs	r3, #24
 8000866:	18e3      	adds	r3, r4, r3
 8000868:	19d8      	adds	r0, r3, r7
 800086a:	2300      	movs	r3, #0
 800086c:	2200      	movs	r2, #0
 800086e:	2108      	movs	r1, #8
 8000870:	f000 f8d0 	bl	8000a14 <fillPaket>
		pushPaket(USB_Tx_Buffer, &paket);
 8000874:	4b4e      	ldr	r3, [pc, #312]	; (80009b0 <comHandler+0x598>)
 8000876:	681b      	ldr	r3, [r3, #0]
 8000878:	2218      	movs	r2, #24
 800087a:	18a2      	adds	r2, r4, r2
 800087c:	19d2      	adds	r2, r2, r7
 800087e:	0011      	movs	r1, r2
 8000880:	0018      	movs	r0, r3
 8000882:	f000 f907 	bl	8000a94 <pushPaket>
	}

	//___Odesílání dat___//
	//_Ošetření plného bufferu_//
	if(USB_Tx_Buffer->status == BUFFER_FULL)
 8000886:	4b4a      	ldr	r3, [pc, #296]	; (80009b0 <comHandler+0x598>)
 8000888:	681b      	ldr	r3, [r3, #0]
 800088a:	7d1b      	ldrb	r3, [r3, #20]
 800088c:	2b02      	cmp	r3, #2
 800088e:	d11c      	bne.n	80008ca <comHandler+0x4b2>
	{
		flags.ui.shortBeep = 1;
 8000890:	4b48      	ldr	r3, [pc, #288]	; (80009b4 <comHandler+0x59c>)
 8000892:	7c1a      	ldrb	r2, [r3, #16]
 8000894:	2101      	movs	r1, #1
 8000896:	430a      	orrs	r2, r1
 8000898:	741a      	strb	r2, [r3, #16]
		char msg[] = {"Buffer full\n"};
 800089a:	231c      	movs	r3, #28
 800089c:	18fb      	adds	r3, r7, r3
 800089e:	4a46      	ldr	r2, [pc, #280]	; (80009b8 <comHandler+0x5a0>)
 80008a0:	ca13      	ldmia	r2!, {r0, r1, r4}
 80008a2:	c313      	stmia	r3!, {r0, r1, r4}
 80008a4:	7812      	ldrb	r2, [r2, #0]
 80008a6:	701a      	strb	r2, [r3, #0]
		CDC_Transmit_FS(msg, strlen(msg));
 80008a8:	231c      	movs	r3, #28
 80008aa:	18fb      	adds	r3, r7, r3
 80008ac:	0018      	movs	r0, r3
 80008ae:	f7ff fc2b 	bl	8000108 <strlen>
 80008b2:	0002      	movs	r2, r0
 80008b4:	231c      	movs	r3, #28
 80008b6:	18fb      	adds	r3, r7, r3
 80008b8:	0011      	movs	r1, r2
 80008ba:	0018      	movs	r0, r3
 80008bc:	f00c fb38 	bl	800cf30 <CDC_Transmit_FS>
		clearBuffer(USB_Tx_Buffer);
 80008c0:	4b3b      	ldr	r3, [pc, #236]	; (80009b0 <comHandler+0x598>)
 80008c2:	681b      	ldr	r3, [r3, #0]
 80008c4:	0018      	movs	r0, r3
 80008c6:	f001 fe74 	bl	80025b2 <clearBuffer>
	}
	//_Samotné odesílání_//
	if(USB_Tx_Buffer->filled)
 80008ca:	4b39      	ldr	r3, [pc, #228]	; (80009b0 <comHandler+0x598>)
 80008cc:	681b      	ldr	r3, [r3, #0]
 80008ce:	689b      	ldr	r3, [r3, #8]
 80008d0:	2b00      	cmp	r3, #0
 80008d2:	d066      	beq.n	80009a2 <comHandler+0x58a>
	{
 80008d4:	466b      	mov	r3, sp
 80008d6:	001c      	movs	r4, r3
		int size = USB_Tx_Buffer->filled;
 80008d8:	4b35      	ldr	r3, [pc, #212]	; (80009b0 <comHandler+0x598>)
 80008da:	681b      	ldr	r3, [r3, #0]
 80008dc:	689b      	ldr	r3, [r3, #8]
 80008de:	2288      	movs	r2, #136	; 0x88
 80008e0:	18ba      	adds	r2, r7, r2
 80008e2:	6013      	str	r3, [r2, #0]
		char tmpStr[size];
 80008e4:	2388      	movs	r3, #136	; 0x88
 80008e6:	18fb      	adds	r3, r7, r3
 80008e8:	681b      	ldr	r3, [r3, #0]
 80008ea:	1e5a      	subs	r2, r3, #1
 80008ec:	2184      	movs	r1, #132	; 0x84
 80008ee:	1879      	adds	r1, r7, r1
 80008f0:	600a      	str	r2, [r1, #0]
 80008f2:	001a      	movs	r2, r3
 80008f4:	0015      	movs	r5, r2
 80008f6:	2200      	movs	r2, #0
 80008f8:	0016      	movs	r6, r2
 80008fa:	0028      	movs	r0, r5
 80008fc:	0031      	movs	r1, r6
 80008fe:	0002      	movs	r2, r0
 8000900:	0f52      	lsrs	r2, r2, #29
 8000902:	000d      	movs	r5, r1
 8000904:	00ed      	lsls	r5, r5, #3
 8000906:	617d      	str	r5, [r7, #20]
 8000908:	697d      	ldr	r5, [r7, #20]
 800090a:	4315      	orrs	r5, r2
 800090c:	617d      	str	r5, [r7, #20]
 800090e:	0002      	movs	r2, r0
 8000910:	00d2      	lsls	r2, r2, #3
 8000912:	613a      	str	r2, [r7, #16]
 8000914:	001a      	movs	r2, r3
 8000916:	603a      	str	r2, [r7, #0]
 8000918:	2200      	movs	r2, #0
 800091a:	607a      	str	r2, [r7, #4]
 800091c:	6838      	ldr	r0, [r7, #0]
 800091e:	6879      	ldr	r1, [r7, #4]
 8000920:	0002      	movs	r2, r0
 8000922:	0f52      	lsrs	r2, r2, #29
 8000924:	000d      	movs	r5, r1
 8000926:	00ed      	lsls	r5, r5, #3
 8000928:	60fd      	str	r5, [r7, #12]
 800092a:	68fd      	ldr	r5, [r7, #12]
 800092c:	4315      	orrs	r5, r2
 800092e:	60fd      	str	r5, [r7, #12]
 8000930:	0002      	movs	r2, r0
 8000932:	00d2      	lsls	r2, r2, #3
 8000934:	60ba      	str	r2, [r7, #8]
 8000936:	3307      	adds	r3, #7
 8000938:	08db      	lsrs	r3, r3, #3
 800093a:	00db      	lsls	r3, r3, #3
 800093c:	466a      	mov	r2, sp
 800093e:	1ad3      	subs	r3, r2, r3
 8000940:	469d      	mov	sp, r3
 8000942:	466b      	mov	r3, sp
 8000944:	3300      	adds	r3, #0
 8000946:	2280      	movs	r2, #128	; 0x80
 8000948:	18ba      	adds	r2, r7, r2
 800094a:	6013      	str	r3, [r2, #0]
		for(int i = 0; i < size; i++)
 800094c:	2300      	movs	r3, #0
 800094e:	2290      	movs	r2, #144	; 0x90
 8000950:	18ba      	adds	r2, r7, r2
 8000952:	6013      	str	r3, [r2, #0]
 8000954:	e012      	b.n	800097c <comHandler+0x564>
		{
			pop(USB_Tx_Buffer, &tmpStr[i]);
 8000956:	4b16      	ldr	r3, [pc, #88]	; (80009b0 <comHandler+0x598>)
 8000958:	6818      	ldr	r0, [r3, #0]
 800095a:	2380      	movs	r3, #128	; 0x80
 800095c:	18fb      	adds	r3, r7, r3
 800095e:	681a      	ldr	r2, [r3, #0]
 8000960:	2390      	movs	r3, #144	; 0x90
 8000962:	18fb      	adds	r3, r7, r3
 8000964:	681b      	ldr	r3, [r3, #0]
 8000966:	18d3      	adds	r3, r2, r3
 8000968:	0019      	movs	r1, r3
 800096a:	f001 fe97 	bl	800269c <pop>
		for(int i = 0; i < size; i++)
 800096e:	2390      	movs	r3, #144	; 0x90
 8000970:	18fb      	adds	r3, r7, r3
 8000972:	681b      	ldr	r3, [r3, #0]
 8000974:	3301      	adds	r3, #1
 8000976:	2290      	movs	r2, #144	; 0x90
 8000978:	18ba      	adds	r2, r7, r2
 800097a:	6013      	str	r3, [r2, #0]
 800097c:	2390      	movs	r3, #144	; 0x90
 800097e:	18fb      	adds	r3, r7, r3
 8000980:	681a      	ldr	r2, [r3, #0]
 8000982:	2388      	movs	r3, #136	; 0x88
 8000984:	18fb      	adds	r3, r7, r3
 8000986:	681b      	ldr	r3, [r3, #0]
 8000988:	429a      	cmp	r2, r3
 800098a:	dbe4      	blt.n	8000956 <comHandler+0x53e>
		}
		CDC_Transmit_FS(tmpStr, size);
 800098c:	2388      	movs	r3, #136	; 0x88
 800098e:	18fb      	adds	r3, r7, r3
 8000990:	681a      	ldr	r2, [r3, #0]
 8000992:	2380      	movs	r3, #128	; 0x80
 8000994:	18fb      	adds	r3, r7, r3
 8000996:	681b      	ldr	r3, [r3, #0]
 8000998:	0011      	movs	r1, r2
 800099a:	0018      	movs	r0, r3
 800099c:	f00c fac8 	bl	800cf30 <CDC_Transmit_FS>
 80009a0:	46a5      	mov	sp, r4
	}

}
 80009a2:	46c0      	nop			; (mov r8, r8)
 80009a4:	46bd      	mov	sp, r7
 80009a6:	b02b      	add	sp, #172	; 0xac
 80009a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80009aa:	46c0      	nop			; (mov r8, r8)
 80009ac:	20000200 	.word	0x20000200
 80009b0:	200001fc 	.word	0x200001fc
 80009b4:	200003d8 	.word	0x200003d8
 80009b8:	0800e220 	.word	0x0800e220

080009bc <makeByteArray>:

//_____Zpracuje ADC_Results do pole data_____//
static void makeByteArray()
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	b082      	sub	sp, #8
 80009c0:	af00      	add	r7, sp, #0
	for(int i = 0; i < 8; i++)
 80009c2:	2300      	movs	r3, #0
 80009c4:	607b      	str	r3, [r7, #4]
 80009c6:	e018      	b.n	80009fa <makeByteArray+0x3e>
	{
		data[2*i] = MaskByte(ADC_Results[2*i], 1);
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	005a      	lsls	r2, r3, #1
 80009cc:	4b0f      	ldr	r3, [pc, #60]	; (8000a0c <makeByteArray+0x50>)
 80009ce:	0092      	lsls	r2, r2, #2
 80009d0:	58d3      	ldr	r3, [r2, r3]
 80009d2:	0a1a      	lsrs	r2, r3, #8
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	005b      	lsls	r3, r3, #1
 80009d8:	b2d1      	uxtb	r1, r2
 80009da:	4a0d      	ldr	r2, [pc, #52]	; (8000a10 <makeByteArray+0x54>)
 80009dc:	54d1      	strb	r1, [r2, r3]
		data[2*i+1] = MaskByte(ADC_Results[2*i], 0);
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	005a      	lsls	r2, r3, #1
 80009e2:	4b0a      	ldr	r3, [pc, #40]	; (8000a0c <makeByteArray+0x50>)
 80009e4:	0092      	lsls	r2, r2, #2
 80009e6:	58d2      	ldr	r2, [r2, r3]
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	005b      	lsls	r3, r3, #1
 80009ec:	3301      	adds	r3, #1
 80009ee:	b2d1      	uxtb	r1, r2
 80009f0:	4a07      	ldr	r2, [pc, #28]	; (8000a10 <makeByteArray+0x54>)
 80009f2:	54d1      	strb	r1, [r2, r3]
	for(int i = 0; i < 8; i++)
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	3301      	adds	r3, #1
 80009f8:	607b      	str	r3, [r7, #4]
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	2b07      	cmp	r3, #7
 80009fe:	dde3      	ble.n	80009c8 <makeByteArray+0xc>
	}
}
 8000a00:	46c0      	nop			; (mov r8, r8)
 8000a02:	46c0      	nop			; (mov r8, r8)
 8000a04:	46bd      	mov	sp, r7
 8000a06:	b002      	add	sp, #8
 8000a08:	bd80      	pop	{r7, pc}
 8000a0a:	46c0      	nop			; (mov r8, r8)
 8000a0c:	20000384 	.word	0x20000384
 8000a10:	20000200 	.word	0x20000200

08000a14 <fillPaket>:

//_____Vytvoří strukturu Paket z dat v argumentech_____//
static void fillPaket(Paket* paket, outPaketType type, uint8_t* data, uint8_t dataLength)
{
 8000a14:	b590      	push	{r4, r7, lr}
 8000a16:	b087      	sub	sp, #28
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	60f8      	str	r0, [r7, #12]
 8000a1c:	0008      	movs	r0, r1
 8000a1e:	607a      	str	r2, [r7, #4]
 8000a20:	0019      	movs	r1, r3
 8000a22:	240b      	movs	r4, #11
 8000a24:	193b      	adds	r3, r7, r4
 8000a26:	1c02      	adds	r2, r0, #0
 8000a28:	701a      	strb	r2, [r3, #0]
 8000a2a:	200a      	movs	r0, #10
 8000a2c:	183b      	adds	r3, r7, r0
 8000a2e:	1c0a      	adds	r2, r1, #0
 8000a30:	701a      	strb	r2, [r3, #0]
	paket->type = type;
 8000a32:	68fb      	ldr	r3, [r7, #12]
 8000a34:	0021      	movs	r1, r4
 8000a36:	187a      	adds	r2, r7, r1
 8000a38:	7812      	ldrb	r2, [r2, #0]
 8000a3a:	701a      	strb	r2, [r3, #0]
	paket->data = data;
 8000a3c:	68fb      	ldr	r3, [r7, #12]
 8000a3e:	687a      	ldr	r2, [r7, #4]
 8000a40:	605a      	str	r2, [r3, #4]
	paket->dataLength = dataLength;
 8000a42:	68fb      	ldr	r3, [r7, #12]
 8000a44:	183a      	adds	r2, r7, r0
 8000a46:	7812      	ldrb	r2, [r2, #0]
 8000a48:	721a      	strb	r2, [r3, #8]
	uint8_t CA = type;
 8000a4a:	2317      	movs	r3, #23
 8000a4c:	18fb      	adds	r3, r7, r3
 8000a4e:	187a      	adds	r2, r7, r1
 8000a50:	7812      	ldrb	r2, [r2, #0]
 8000a52:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < dataLength; i++)
 8000a54:	2300      	movs	r3, #0
 8000a56:	613b      	str	r3, [r7, #16]
 8000a58:	e00c      	b.n	8000a74 <fillPaket+0x60>
		CA += data[i];
 8000a5a:	693b      	ldr	r3, [r7, #16]
 8000a5c:	687a      	ldr	r2, [r7, #4]
 8000a5e:	18d3      	adds	r3, r2, r3
 8000a60:	7819      	ldrb	r1, [r3, #0]
 8000a62:	2217      	movs	r2, #23
 8000a64:	18bb      	adds	r3, r7, r2
 8000a66:	18ba      	adds	r2, r7, r2
 8000a68:	7812      	ldrb	r2, [r2, #0]
 8000a6a:	188a      	adds	r2, r1, r2
 8000a6c:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < dataLength; i++)
 8000a6e:	693b      	ldr	r3, [r7, #16]
 8000a70:	3301      	adds	r3, #1
 8000a72:	613b      	str	r3, [r7, #16]
 8000a74:	230a      	movs	r3, #10
 8000a76:	18fb      	adds	r3, r7, r3
 8000a78:	781b      	ldrb	r3, [r3, #0]
 8000a7a:	693a      	ldr	r2, [r7, #16]
 8000a7c:	429a      	cmp	r2, r3
 8000a7e:	dbec      	blt.n	8000a5a <fillPaket+0x46>
	paket->CA_value = CA;
 8000a80:	68fb      	ldr	r3, [r7, #12]
 8000a82:	2217      	movs	r2, #23
 8000a84:	18ba      	adds	r2, r7, r2
 8000a86:	7812      	ldrb	r2, [r2, #0]
 8000a88:	725a      	strb	r2, [r3, #9]
}
 8000a8a:	46c0      	nop			; (mov r8, r8)
 8000a8c:	46bd      	mov	sp, r7
 8000a8e:	b007      	add	sp, #28
 8000a90:	bd90      	pop	{r4, r7, pc}
	...

08000a94 <pushPaket>:

//_____Vloží do bufferu řetězec odpovídající sestavenému paketu_____//
static void pushPaket(RING_BUFFER* buffer, Paket* paket)
{
 8000a94:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000a96:	46c6      	mov	lr, r8
 8000a98:	b500      	push	{lr}
 8000a9a:	b096      	sub	sp, #88	; 0x58
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	63f8      	str	r0, [r7, #60]	; 0x3c
 8000aa0:	63b9      	str	r1, [r7, #56]	; 0x38
 8000aa2:	466b      	mov	r3, sp
 8000aa4:	4698      	mov	r8, r3
	uint8_t msg[paket->dataLength + 2];
 8000aa6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000aa8:	7a1b      	ldrb	r3, [r3, #8]
 8000aaa:	1c9a      	adds	r2, r3, #2
 8000aac:	1e53      	subs	r3, r2, #1
 8000aae:	657b      	str	r3, [r7, #84]	; 0x54
 8000ab0:	0013      	movs	r3, r2
 8000ab2:	61bb      	str	r3, [r7, #24]
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	61fb      	str	r3, [r7, #28]
 8000ab8:	69b8      	ldr	r0, [r7, #24]
 8000aba:	69f9      	ldr	r1, [r7, #28]
 8000abc:	0003      	movs	r3, r0
 8000abe:	0f5b      	lsrs	r3, r3, #29
 8000ac0:	000e      	movs	r6, r1
 8000ac2:	00f5      	lsls	r5, r6, #3
 8000ac4:	431d      	orrs	r5, r3
 8000ac6:	0003      	movs	r3, r0
 8000ac8:	00dc      	lsls	r4, r3, #3
 8000aca:	0013      	movs	r3, r2
 8000acc:	613b      	str	r3, [r7, #16]
 8000ace:	2300      	movs	r3, #0
 8000ad0:	617b      	str	r3, [r7, #20]
 8000ad2:	6938      	ldr	r0, [r7, #16]
 8000ad4:	6979      	ldr	r1, [r7, #20]
 8000ad6:	0003      	movs	r3, r0
 8000ad8:	0f5b      	lsrs	r3, r3, #29
 8000ada:	000c      	movs	r4, r1
 8000adc:	00e4      	lsls	r4, r4, #3
 8000ade:	637c      	str	r4, [r7, #52]	; 0x34
 8000ae0:	6b7c      	ldr	r4, [r7, #52]	; 0x34
 8000ae2:	431c      	orrs	r4, r3
 8000ae4:	637c      	str	r4, [r7, #52]	; 0x34
 8000ae6:	0003      	movs	r3, r0
 8000ae8:	00db      	lsls	r3, r3, #3
 8000aea:	633b      	str	r3, [r7, #48]	; 0x30
 8000aec:	0013      	movs	r3, r2
 8000aee:	3307      	adds	r3, #7
 8000af0:	08db      	lsrs	r3, r3, #3
 8000af2:	00db      	lsls	r3, r3, #3
 8000af4:	466a      	mov	r2, sp
 8000af6:	1ad3      	subs	r3, r2, r3
 8000af8:	469d      	mov	sp, r3
 8000afa:	466b      	mov	r3, sp
 8000afc:	3300      	adds	r3, #0
 8000afe:	653b      	str	r3, [r7, #80]	; 0x50
	msg[0] = paket->type;
 8000b00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000b02:	781a      	ldrb	r2, [r3, #0]
 8000b04:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000b06:	701a      	strb	r2, [r3, #0]
	memcpy(msg+1, paket->data, paket->dataLength);
 8000b08:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000b0a:	1c58      	adds	r0, r3, #1
 8000b0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000b0e:	6859      	ldr	r1, [r3, #4]
 8000b10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000b12:	7a1b      	ldrb	r3, [r3, #8]
 8000b14:	001a      	movs	r2, r3
 8000b16:	f00c ff05 	bl	800d924 <memcpy>
	msg[paket->dataLength+1] = paket->CA_value;
 8000b1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000b1c:	7a1b      	ldrb	r3, [r3, #8]
 8000b1e:	3301      	adds	r3, #1
 8000b20:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8000b22:	7a51      	ldrb	r1, [r2, #9]
 8000b24:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8000b26:	54d1      	strb	r1, [r2, r3]
	//msg[paket->dataLength+2] = 0U;

	uint8_t str[] = {">>"};
 8000b28:	200c      	movs	r0, #12
 8000b2a:	2638      	movs	r6, #56	; 0x38
 8000b2c:	1983      	adds	r3, r0, r6
 8000b2e:	19db      	adds	r3, r3, r7
 8000b30:	4a34      	ldr	r2, [pc, #208]	; (8000c04 <pushPaket+0x170>)
 8000b32:	8811      	ldrh	r1, [r2, #0]
 8000b34:	8019      	strh	r1, [r3, #0]
 8000b36:	7892      	ldrb	r2, [r2, #2]
 8000b38:	709a      	strb	r2, [r3, #2]
	uint8_t end[] = {"<<\n"};
 8000b3a:	2508      	movs	r5, #8
 8000b3c:	19ab      	adds	r3, r5, r6
 8000b3e:	19db      	adds	r3, r3, r7
 8000b40:	4a31      	ldr	r2, [pc, #196]	; (8000c08 <pushPaket+0x174>)
 8000b42:	601a      	str	r2, [r3, #0]

	uint8_t toSend[6+paket->dataLength + 2];
 8000b44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000b46:	7a1b      	ldrb	r3, [r3, #8]
 8000b48:	3308      	adds	r3, #8
 8000b4a:	001c      	movs	r4, r3
 8000b4c:	1e63      	subs	r3, r4, #1
 8000b4e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000b50:	0023      	movs	r3, r4
 8000b52:	60bb      	str	r3, [r7, #8]
 8000b54:	2300      	movs	r3, #0
 8000b56:	60fb      	str	r3, [r7, #12]
 8000b58:	68b9      	ldr	r1, [r7, #8]
 8000b5a:	68fa      	ldr	r2, [r7, #12]
 8000b5c:	000b      	movs	r3, r1
 8000b5e:	0f5b      	lsrs	r3, r3, #29
 8000b60:	0016      	movs	r6, r2
 8000b62:	00f6      	lsls	r6, r6, #3
 8000b64:	62fe      	str	r6, [r7, #44]	; 0x2c
 8000b66:	6afe      	ldr	r6, [r7, #44]	; 0x2c
 8000b68:	431e      	orrs	r6, r3
 8000b6a:	62fe      	str	r6, [r7, #44]	; 0x2c
 8000b6c:	000b      	movs	r3, r1
 8000b6e:	00db      	lsls	r3, r3, #3
 8000b70:	62bb      	str	r3, [r7, #40]	; 0x28
 8000b72:	0023      	movs	r3, r4
 8000b74:	603b      	str	r3, [r7, #0]
 8000b76:	2300      	movs	r3, #0
 8000b78:	607b      	str	r3, [r7, #4]
 8000b7a:	6839      	ldr	r1, [r7, #0]
 8000b7c:	687a      	ldr	r2, [r7, #4]
 8000b7e:	000b      	movs	r3, r1
 8000b80:	0f5b      	lsrs	r3, r3, #29
 8000b82:	0016      	movs	r6, r2
 8000b84:	00f6      	lsls	r6, r6, #3
 8000b86:	627e      	str	r6, [r7, #36]	; 0x24
 8000b88:	6a7e      	ldr	r6, [r7, #36]	; 0x24
 8000b8a:	431e      	orrs	r6, r3
 8000b8c:	627e      	str	r6, [r7, #36]	; 0x24
 8000b8e:	000b      	movs	r3, r1
 8000b90:	00db      	lsls	r3, r3, #3
 8000b92:	623b      	str	r3, [r7, #32]
 8000b94:	0023      	movs	r3, r4
 8000b96:	3307      	adds	r3, #7
 8000b98:	08db      	lsrs	r3, r3, #3
 8000b9a:	00db      	lsls	r3, r3, #3
 8000b9c:	466a      	mov	r2, sp
 8000b9e:	1ad3      	subs	r3, r2, r3
 8000ba0:	469d      	mov	sp, r3
 8000ba2:	466b      	mov	r3, sp
 8000ba4:	3300      	adds	r3, #0
 8000ba6:	64bb      	str	r3, [r7, #72]	; 0x48
	//sprintf(toSend, "%s%s%s\n", str, msg, end);	//pro testNum = 0 se vytiskne jen paket->type, jelikož sprintf pak narazí na nulu
	memcpy(toSend, str, 2);
 8000ba8:	2638      	movs	r6, #56	; 0x38
 8000baa:	1983      	adds	r3, r0, r6
 8000bac:	19d9      	adds	r1, r3, r7
 8000bae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000bb0:	2202      	movs	r2, #2
 8000bb2:	0018      	movs	r0, r3
 8000bb4:	f00c feb6 	bl	800d924 <memcpy>
	memcpy(toSend+2, msg, paket->dataLength + 2);
 8000bb8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000bba:	1c98      	adds	r0, r3, #2
 8000bbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000bbe:	7a1b      	ldrb	r3, [r3, #8]
 8000bc0:	3302      	adds	r3, #2
 8000bc2:	001a      	movs	r2, r3
 8000bc4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000bc6:	0019      	movs	r1, r3
 8000bc8:	f00c feac 	bl	800d924 <memcpy>
	memcpy(toSend+2+paket->dataLength + 2, end, 4);
 8000bcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000bce:	7a1b      	ldrb	r3, [r3, #8]
 8000bd0:	3304      	adds	r3, #4
 8000bd2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8000bd4:	18d2      	adds	r2, r2, r3
 8000bd6:	19ab      	adds	r3, r5, r6
 8000bd8:	19db      	adds	r3, r3, r7
 8000bda:	0010      	movs	r0, r2
 8000bdc:	0019      	movs	r1, r3
 8000bde:	2304      	movs	r3, #4
 8000be0:	001a      	movs	r2, r3
 8000be2:	f00c fe9f 	bl	800d924 <memcpy>
	pushStr(buffer, toSend, sizeof(toSend)-1);
 8000be6:	0023      	movs	r3, r4
 8000be8:	3b01      	subs	r3, #1
 8000bea:	001a      	movs	r2, r3
 8000bec:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8000bee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000bf0:	0018      	movs	r0, r3
 8000bf2:	f001 fd2b 	bl	800264c <pushStr>
 8000bf6:	46c5      	mov	sp, r8
}
 8000bf8:	46c0      	nop			; (mov r8, r8)
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	b016      	add	sp, #88	; 0x58
 8000bfe:	bc80      	pop	{r7}
 8000c00:	46b8      	mov	r8, r7
 8000c02:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000c04:	0800e230 	.word	0x0800e230
 8000c08:	000a3c3c 	.word	0x000a3c3c

08000c0c <decodePaket>:

//_____Příchozí řetězec přepracuje do struktury typu paket (pokud to lze)_____//
static uint8_t decodePaket(/*Paket* paket,*/ uint8_t* data, uint8_t dataLenght)
{
 8000c0c:	b590      	push	{r4, r7, lr}
 8000c0e:	b089      	sub	sp, #36	; 0x24
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	6078      	str	r0, [r7, #4]
 8000c14:	000a      	movs	r2, r1
 8000c16:	1cfb      	adds	r3, r7, #3
 8000c18:	701a      	strb	r2, [r3, #0]
	int sum = 0;
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	61fb      	str	r3, [r7, #28]
	for(int i = 2; i < dataLenght - 3; i++)
 8000c1e:	2302      	movs	r3, #2
 8000c20:	61bb      	str	r3, [r7, #24]
 8000c22:	e00a      	b.n	8000c3a <decodePaket+0x2e>
	{
		sum += data[i];
 8000c24:	69bb      	ldr	r3, [r7, #24]
 8000c26:	687a      	ldr	r2, [r7, #4]
 8000c28:	18d3      	adds	r3, r2, r3
 8000c2a:	781b      	ldrb	r3, [r3, #0]
 8000c2c:	001a      	movs	r2, r3
 8000c2e:	69fb      	ldr	r3, [r7, #28]
 8000c30:	189b      	adds	r3, r3, r2
 8000c32:	61fb      	str	r3, [r7, #28]
	for(int i = 2; i < dataLenght - 3; i++)
 8000c34:	69bb      	ldr	r3, [r7, #24]
 8000c36:	3301      	adds	r3, #1
 8000c38:	61bb      	str	r3, [r7, #24]
 8000c3a:	1cfb      	adds	r3, r7, #3
 8000c3c:	781b      	ldrb	r3, [r3, #0]
 8000c3e:	3b03      	subs	r3, #3
 8000c40:	69ba      	ldr	r2, [r7, #24]
 8000c42:	429a      	cmp	r2, r3
 8000c44:	dbee      	blt.n	8000c24 <decodePaket+0x18>
	}
	if(sum == data[dataLenght - 3])	//kontorlní součet odpovídá
 8000c46:	1cfb      	adds	r3, r7, #3
 8000c48:	781b      	ldrb	r3, [r3, #0]
 8000c4a:	3b03      	subs	r3, #3
 8000c4c:	687a      	ldr	r2, [r7, #4]
 8000c4e:	18d3      	adds	r3, r2, r3
 8000c50:	781b      	ldrb	r3, [r3, #0]
 8000c52:	001a      	movs	r2, r3
 8000c54:	69fb      	ldr	r3, [r7, #28]
 8000c56:	4293      	cmp	r3, r2
 8000c58:	d000      	beq.n	8000c5c <decodePaket+0x50>
 8000c5a:	e06a      	b.n	8000d32 <decodePaket+0x126>
	{
		switch(data[2])	//Na třetím místě je instrukce
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	3302      	adds	r3, #2
 8000c60:	781b      	ldrb	r3, [r3, #0]
 8000c62:	3b61      	subs	r3, #97	; 0x61
 8000c64:	2b12      	cmp	r3, #18
 8000c66:	d85e      	bhi.n	8000d26 <decodePaket+0x11a>
 8000c68:	009a      	lsls	r2, r3, #2
 8000c6a:	4b39      	ldr	r3, [pc, #228]	; (8000d50 <decodePaket+0x144>)
 8000c6c:	18d3      	adds	r3, r2, r3
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	469f      	mov	pc, r3
		{
		case 's': ;
			//___Start testu___//
			if(dataLenght == 7)
 8000c72:	1cfb      	adds	r3, r7, #3
 8000c74:	781b      	ldrb	r3, [r3, #0]
 8000c76:	2b07      	cmp	r3, #7
 8000c78:	d15d      	bne.n	8000d36 <decodePaket+0x12a>
			{
				flags.instructions.startRequest = 1;
 8000c7a:	4b36      	ldr	r3, [pc, #216]	; (8000d54 <decodePaket+0x148>)
 8000c7c:	7b1a      	ldrb	r2, [r3, #12]
 8000c7e:	2101      	movs	r1, #1
 8000c80:	430a      	orrs	r2, r1
 8000c82:	731a      	strb	r2, [r3, #12]
				supplyToTest = data[3];
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	78da      	ldrb	r2, [r3, #3]
 8000c88:	4b33      	ldr	r3, [pc, #204]	; (8000d58 <decodePaket+0x14c>)
 8000c8a:	701a      	strb	r2, [r3, #0]
				sprintf(txt, "Start\n");
				pushStr(USB_Tx_Buffer, txt, strlen(txt));
#endif
				//Na pozici data je ukazatel na testovaný zdroj
			}
			break;
 8000c8c:	e053      	b.n	8000d36 <decodePaket+0x12a>

		case'c': ;
			//___Ukončení___//
		if(dataLenght == 7)
 8000c8e:	1cfb      	adds	r3, r7, #3
 8000c90:	781b      	ldrb	r3, [r3, #0]
 8000c92:	2b07      	cmp	r3, #7
 8000c94:	d151      	bne.n	8000d3a <decodePaket+0x12e>
		{
			flags.instructions.stopRequest = 1;
 8000c96:	4b2f      	ldr	r3, [pc, #188]	; (8000d54 <decodePaket+0x148>)
 8000c98:	7b1a      	ldrb	r2, [r3, #12]
 8000c9a:	2102      	movs	r1, #2
 8000c9c:	430a      	orrs	r2, r1
 8000c9e:	731a      	strb	r2, [r3, #12]
			sprintf(txt, "Ukonceni\n");
			pushStr(USB_Tx_Buffer, txt, strlen(txt));
#endif
			//Na pozici data je ukazatel na testovaný zdroj
		}
			break;
 8000ca0:	e04b      	b.n	8000d3a <decodePaket+0x12e>

		case'p': ;
			//___Pauza___//
		if(dataLenght == 7)
 8000ca2:	1cfb      	adds	r3, r7, #3
 8000ca4:	781b      	ldrb	r3, [r3, #0]
 8000ca6:	2b07      	cmp	r3, #7
 8000ca8:	d149      	bne.n	8000d3e <decodePaket+0x132>
		{
			flags.instructions.pauseRequest = 1;
 8000caa:	4b2a      	ldr	r3, [pc, #168]	; (8000d54 <decodePaket+0x148>)
 8000cac:	7b1a      	ldrb	r2, [r3, #12]
 8000cae:	2104      	movs	r1, #4
 8000cb0:	430a      	orrs	r2, r1
 8000cb2:	731a      	strb	r2, [r3, #12]
			sprintf(txt, "Pauza\n");
			pushStr(USB_Tx_Buffer, txt, strlen(txt));
#endif
			//Na pozici data je ukazatel na testovaný zdroj
		}
			break;
 8000cb4:	e043      	b.n	8000d3e <decodePaket+0x132>

		case'k': ;
			//___Kalibrace___//
		if(dataLenght == 7)
 8000cb6:	1cfb      	adds	r3, r7, #3
 8000cb8:	781b      	ldrb	r3, [r3, #0]
 8000cba:	2b07      	cmp	r3, #7
 8000cbc:	d141      	bne.n	8000d42 <decodePaket+0x136>
		{
			if(data[3] == 0)
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	3303      	adds	r3, #3
 8000cc2:	781b      	ldrb	r3, [r3, #0]
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d105      	bne.n	8000cd4 <decodePaket+0xc8>
				flags.instructions.calibRequest = 1;
 8000cc8:	4b22      	ldr	r3, [pc, #136]	; (8000d54 <decodePaket+0x148>)
 8000cca:	7b1a      	ldrb	r2, [r3, #12]
 8000ccc:	2108      	movs	r1, #8
 8000cce:	430a      	orrs	r2, r1
 8000cd0:	731a      	strb	r2, [r3, #12]
			sprintf(txt, "Kalibrace\n");
			pushStr(USB_Tx_Buffer, txt, strlen(txt));
#endif
			//Na pozici data je ukazatel na testovaný zdroj
		}
			break;
 8000cd2:	e036      	b.n	8000d42 <decodePaket+0x136>
			else if(data[3] == 1)
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	3303      	adds	r3, #3
 8000cd8:	781b      	ldrb	r3, [r3, #0]
 8000cda:	2b01      	cmp	r3, #1
 8000cdc:	d131      	bne.n	8000d42 <decodePaket+0x136>
				flags.instructions.calibDone = 1;
 8000cde:	4b1d      	ldr	r3, [pc, #116]	; (8000d54 <decodePaket+0x148>)
 8000ce0:	7b1a      	ldrb	r2, [r3, #12]
 8000ce2:	2110      	movs	r1, #16
 8000ce4:	430a      	orrs	r2, r1
 8000ce6:	731a      	strb	r2, [r3, #12]
			break;
 8000ce8:	e02b      	b.n	8000d42 <decodePaket+0x136>

		case 'a' : ;
			//___Navázání komunikace___//
		if(dataLenght == 7)
 8000cea:	1cfb      	adds	r3, r7, #3
 8000cec:	781b      	ldrb	r3, [r3, #0]
 8000cee:	2b07      	cmp	r3, #7
 8000cf0:	d119      	bne.n	8000d26 <decodePaket+0x11a>
		{
			uint8_t data = regCount;
 8000cf2:	4b1a      	ldr	r3, [pc, #104]	; (8000d5c <decodePaket+0x150>)
 8000cf4:	781a      	ldrb	r2, [r3, #0]
 8000cf6:	2117      	movs	r1, #23
 8000cf8:	187b      	adds	r3, r7, r1
 8000cfa:	701a      	strb	r2, [r3, #0]
			Paket paket;
			fillPaket(&paket, ACK_PAKET, &data, 1);
 8000cfc:	187a      	adds	r2, r7, r1
 8000cfe:	2408      	movs	r4, #8
 8000d00:	1938      	adds	r0, r7, r4
 8000d02:	2301      	movs	r3, #1
 8000d04:	2105      	movs	r1, #5
 8000d06:	f7ff fe85 	bl	8000a14 <fillPaket>
			pushPaket(USB_Tx_Buffer, &paket);
 8000d0a:	4b15      	ldr	r3, [pc, #84]	; (8000d60 <decodePaket+0x154>)
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	193a      	adds	r2, r7, r4
 8000d10:	0011      	movs	r1, r2
 8000d12:	0018      	movs	r0, r3
 8000d14:	f7ff febe 	bl	8000a94 <pushPaket>
			pushPaket(USB_Tx_Buffer, &paket);
 8000d18:	4b11      	ldr	r3, [pc, #68]	; (8000d60 <decodePaket+0x154>)
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	193a      	adds	r2, r7, r4
 8000d1e:	0011      	movs	r1, r2
 8000d20:	0018      	movs	r0, r3
 8000d22:	f7ff feb7 	bl	8000a94 <pushPaket>
		}

		default: ;
			//___Neplatný příkaz___//
			flags.instructions.unknownInst = 1;
 8000d26:	4b0b      	ldr	r3, [pc, #44]	; (8000d54 <decodePaket+0x148>)
 8000d28:	7b1a      	ldrb	r2, [r3, #12]
 8000d2a:	2120      	movs	r1, #32
 8000d2c:	430a      	orrs	r2, r1
 8000d2e:	731a      	strb	r2, [r3, #12]
#ifdef __DEBUG_INST__
			sprintf(txt, "Neplatna instrukce\n");
			pushStr(USB_Tx_Buffer, txt, strlen(txt));
#endif
			break;
 8000d30:	e008      	b.n	8000d44 <decodePaket+0x138>
		}
	}
 8000d32:	46c0      	nop			; (mov r8, r8)
 8000d34:	e006      	b.n	8000d44 <decodePaket+0x138>
			break;
 8000d36:	46c0      	nop			; (mov r8, r8)
 8000d38:	e004      	b.n	8000d44 <decodePaket+0x138>
			break;
 8000d3a:	46c0      	nop			; (mov r8, r8)
 8000d3c:	e002      	b.n	8000d44 <decodePaket+0x138>
			break;
 8000d3e:	46c0      	nop			; (mov r8, r8)
 8000d40:	e000      	b.n	8000d44 <decodePaket+0x138>
			break;
 8000d42:	46c0      	nop			; (mov r8, r8)
	return 1;
 8000d44:	2301      	movs	r3, #1
}
 8000d46:	0018      	movs	r0, r3
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	b009      	add	sp, #36	; 0x24
 8000d4c:	bd90      	pop	{r4, r7, pc}
 8000d4e:	46c0      	nop			; (mov r8, r8)
 8000d50:	0800e364 	.word	0x0800e364
 8000d54:	200003d8 	.word	0x200003d8
 8000d58:	200003f6 	.word	0x200003f6
 8000d5c:	20000410 	.word	0x20000410
 8000d60:	200001fc 	.word	0x200001fc

08000d64 <setColour>:
static BACKLIGHT colour;

//_____Rozvítí podsvícení dané argumentem_____//
//-> argument: Barva podsvícení
void setColour(BACKLIGHT colourToSet)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b082      	sub	sp, #8
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	0002      	movs	r2, r0
 8000d6c:	1dfb      	adds	r3, r7, #7
 8000d6e:	701a      	strb	r2, [r3, #0]
	switch(colourToSet)
 8000d70:	1dfb      	adds	r3, r7, #7
 8000d72:	781b      	ldrb	r3, [r3, #0]
 8000d74:	2b02      	cmp	r3, #2
 8000d76:	d033      	beq.n	8000de0 <setColour+0x7c>
 8000d78:	dc49      	bgt.n	8000e0e <setColour+0xaa>
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d002      	beq.n	8000d84 <setColour+0x20>
 8000d7e:	2b01      	cmp	r3, #1
 8000d80:	d017      	beq.n	8000db2 <setColour+0x4e>
 8000d82:	e044      	b.n	8000e0e <setColour+0xaa>
	{
	case BACKLIGHT_WHITE:
		HAL_GPIO_WritePin(BACKLIGHT_WHITE_GPIO_Port, BACKLIGHT_WHITE_Pin, GPIO_PIN_SET);
 8000d84:	2380      	movs	r3, #128	; 0x80
 8000d86:	009b      	lsls	r3, r3, #2
 8000d88:	4830      	ldr	r0, [pc, #192]	; (8000e4c <setColour+0xe8>)
 8000d8a:	2201      	movs	r2, #1
 8000d8c:	0019      	movs	r1, r3
 8000d8e:	f003 fc54 	bl	800463a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(BACKLIGHT_RED_GPIO_Port, BACKLIGHT_RED_Pin, GPIO_PIN_RESET);
 8000d92:	2380      	movs	r3, #128	; 0x80
 8000d94:	0219      	lsls	r1, r3, #8
 8000d96:	2390      	movs	r3, #144	; 0x90
 8000d98:	05db      	lsls	r3, r3, #23
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	0018      	movs	r0, r3
 8000d9e:	f003 fc4c 	bl	800463a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(BACKLIGHT_GREEN_GPIO_Port, BACKLIGHT_GREEN_Pin, GPIO_PIN_RESET);
 8000da2:	2380      	movs	r3, #128	; 0x80
 8000da4:	005b      	lsls	r3, r3, #1
 8000da6:	4829      	ldr	r0, [pc, #164]	; (8000e4c <setColour+0xe8>)
 8000da8:	2200      	movs	r2, #0
 8000daa:	0019      	movs	r1, r3
 8000dac:	f003 fc45 	bl	800463a <HAL_GPIO_WritePin>
		break;
 8000db0:	e044      	b.n	8000e3c <setColour+0xd8>

	case BACKLIGHT_GREEN:
		HAL_GPIO_WritePin(BACKLIGHT_WHITE_GPIO_Port, BACKLIGHT_WHITE_Pin, GPIO_PIN_RESET);
 8000db2:	2380      	movs	r3, #128	; 0x80
 8000db4:	009b      	lsls	r3, r3, #2
 8000db6:	4825      	ldr	r0, [pc, #148]	; (8000e4c <setColour+0xe8>)
 8000db8:	2200      	movs	r2, #0
 8000dba:	0019      	movs	r1, r3
 8000dbc:	f003 fc3d 	bl	800463a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(BACKLIGHT_RED_GPIO_Port, BACKLIGHT_RED_Pin, GPIO_PIN_RESET);
 8000dc0:	2380      	movs	r3, #128	; 0x80
 8000dc2:	0219      	lsls	r1, r3, #8
 8000dc4:	2390      	movs	r3, #144	; 0x90
 8000dc6:	05db      	lsls	r3, r3, #23
 8000dc8:	2200      	movs	r2, #0
 8000dca:	0018      	movs	r0, r3
 8000dcc:	f003 fc35 	bl	800463a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(BACKLIGHT_GREEN_GPIO_Port, BACKLIGHT_GREEN_Pin, GPIO_PIN_SET);
 8000dd0:	2380      	movs	r3, #128	; 0x80
 8000dd2:	005b      	lsls	r3, r3, #1
 8000dd4:	481d      	ldr	r0, [pc, #116]	; (8000e4c <setColour+0xe8>)
 8000dd6:	2201      	movs	r2, #1
 8000dd8:	0019      	movs	r1, r3
 8000dda:	f003 fc2e 	bl	800463a <HAL_GPIO_WritePin>
		break;
 8000dde:	e02d      	b.n	8000e3c <setColour+0xd8>

	case BACKLIGHT_RED:
		HAL_GPIO_WritePin(BACKLIGHT_WHITE_GPIO_Port, BACKLIGHT_WHITE_Pin, GPIO_PIN_RESET);
 8000de0:	2380      	movs	r3, #128	; 0x80
 8000de2:	009b      	lsls	r3, r3, #2
 8000de4:	4819      	ldr	r0, [pc, #100]	; (8000e4c <setColour+0xe8>)
 8000de6:	2200      	movs	r2, #0
 8000de8:	0019      	movs	r1, r3
 8000dea:	f003 fc26 	bl	800463a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(BACKLIGHT_RED_GPIO_Port, BACKLIGHT_RED_Pin, GPIO_PIN_SET);
 8000dee:	2380      	movs	r3, #128	; 0x80
 8000df0:	0219      	lsls	r1, r3, #8
 8000df2:	2390      	movs	r3, #144	; 0x90
 8000df4:	05db      	lsls	r3, r3, #23
 8000df6:	2201      	movs	r2, #1
 8000df8:	0018      	movs	r0, r3
 8000dfa:	f003 fc1e 	bl	800463a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(BACKLIGHT_GREEN_GPIO_Port, BACKLIGHT_GREEN_Pin, GPIO_PIN_RESET);
 8000dfe:	2380      	movs	r3, #128	; 0x80
 8000e00:	005b      	lsls	r3, r3, #1
 8000e02:	4812      	ldr	r0, [pc, #72]	; (8000e4c <setColour+0xe8>)
 8000e04:	2200      	movs	r2, #0
 8000e06:	0019      	movs	r1, r3
 8000e08:	f003 fc17 	bl	800463a <HAL_GPIO_WritePin>
		break;
 8000e0c:	e016      	b.n	8000e3c <setColour+0xd8>

	default:
		HAL_GPIO_WritePin(BACKLIGHT_WHITE_GPIO_Port, BACKLIGHT_WHITE_Pin, GPIO_PIN_RESET);
 8000e0e:	2380      	movs	r3, #128	; 0x80
 8000e10:	009b      	lsls	r3, r3, #2
 8000e12:	480e      	ldr	r0, [pc, #56]	; (8000e4c <setColour+0xe8>)
 8000e14:	2200      	movs	r2, #0
 8000e16:	0019      	movs	r1, r3
 8000e18:	f003 fc0f 	bl	800463a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(BACKLIGHT_RED_GPIO_Port, BACKLIGHT_RED_Pin, GPIO_PIN_RESET);
 8000e1c:	2380      	movs	r3, #128	; 0x80
 8000e1e:	0219      	lsls	r1, r3, #8
 8000e20:	2390      	movs	r3, #144	; 0x90
 8000e22:	05db      	lsls	r3, r3, #23
 8000e24:	2200      	movs	r2, #0
 8000e26:	0018      	movs	r0, r3
 8000e28:	f003 fc07 	bl	800463a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(BACKLIGHT_GREEN_GPIO_Port, BACKLIGHT_GREEN_Pin, GPIO_PIN_RESET);
 8000e2c:	2380      	movs	r3, #128	; 0x80
 8000e2e:	005b      	lsls	r3, r3, #1
 8000e30:	4806      	ldr	r0, [pc, #24]	; (8000e4c <setColour+0xe8>)
 8000e32:	2200      	movs	r2, #0
 8000e34:	0019      	movs	r1, r3
 8000e36:	f003 fc00 	bl	800463a <HAL_GPIO_WritePin>
		break;
 8000e3a:	46c0      	nop			; (mov r8, r8)
	}

	colour = colourToSet;
 8000e3c:	4b04      	ldr	r3, [pc, #16]	; (8000e50 <setColour+0xec>)
 8000e3e:	1dfa      	adds	r2, r7, #7
 8000e40:	7812      	ldrb	r2, [r2, #0]
 8000e42:	701a      	strb	r2, [r3, #0]
}
 8000e44:	46c0      	nop			; (mov r8, r8)
 8000e46:	46bd      	mov	sp, r7
 8000e48:	b002      	add	sp, #8
 8000e4a:	bd80      	pop	{r7, pc}
 8000e4c:	48000400 	.word	0x48000400
 8000e50:	20000210 	.word	0x20000210

08000e54 <sendByte>:

//_____Pošle byte dat_____//
//-> argumenty: char - posílaný byte, Start_byte definuje zda jde o instrukci nebo data
// !!! Pracuje v blokujícím módu !!!
static DISP_STATE sendByte(char byte, START_BYTE type)
{
 8000e54:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000e56:	b085      	sub	sp, #20
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	0002      	movs	r2, r0
 8000e5c:	1dfb      	adds	r3, r7, #7
 8000e5e:	701a      	strb	r2, [r3, #0]
 8000e60:	1dbb      	adds	r3, r7, #6
 8000e62:	1c0a      	adds	r2, r1, #0
 8000e64:	701a      	strb	r2, [r3, #0]
		{
			return SPI_ERR;
		}
	}*/
	uint8_t buffer[3];
	switch(type)
 8000e66:	1dbb      	adds	r3, r7, #6
 8000e68:	781b      	ldrb	r3, [r3, #0]
 8000e6a:	2b01      	cmp	r3, #1
 8000e6c:	d002      	beq.n	8000e74 <sendByte+0x20>
 8000e6e:	2b02      	cmp	r3, #2
 8000e70:	d005      	beq.n	8000e7e <sendByte+0x2a>
 8000e72:	e009      	b.n	8000e88 <sendByte+0x34>
	{
		case INSTRUCTION:
			buffer[0] = 0xF8;
 8000e74:	2308      	movs	r3, #8
 8000e76:	18fb      	adds	r3, r7, r3
 8000e78:	22f8      	movs	r2, #248	; 0xf8
 8000e7a:	701a      	strb	r2, [r3, #0]
			break;
 8000e7c:	e006      	b.n	8000e8c <sendByte+0x38>
		case DATA:
			buffer[0] = 0xFA;
 8000e7e:	2308      	movs	r3, #8
 8000e80:	18fb      	adds	r3, r7, r3
 8000e82:	22fa      	movs	r2, #250	; 0xfa
 8000e84:	701a      	strb	r2, [r3, #0]
			break;
 8000e86:	e001      	b.n	8000e8c <sendByte+0x38>
		default:	//neošetřené možnosti
			return SPI_ERR;
 8000e88:	2302      	movs	r3, #2
 8000e8a:	e074      	b.n	8000f76 <sendByte+0x122>
			break;
	}
	uint8_t tmp1 = 0U, tmp2 = 0U;
 8000e8c:	230f      	movs	r3, #15
 8000e8e:	18fb      	adds	r3, r7, r3
 8000e90:	2200      	movs	r2, #0
 8000e92:	701a      	strb	r2, [r3, #0]
 8000e94:	230e      	movs	r3, #14
 8000e96:	18fb      	adds	r3, r7, r3
 8000e98:	2200      	movs	r2, #0
 8000e9a:	701a      	strb	r2, [r3, #0]
	for(uint8_t i = 0; i < 4; i++)
 8000e9c:	230d      	movs	r3, #13
 8000e9e:	18fb      	adds	r3, r7, r3
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	701a      	strb	r2, [r3, #0]
 8000ea4:	e03a      	b.n	8000f1c <sendByte+0xc8>
	{
		if(MaskBit(byte, i))
 8000ea6:	1dfb      	adds	r3, r7, #7
 8000ea8:	781a      	ldrb	r2, [r3, #0]
 8000eaa:	210d      	movs	r1, #13
 8000eac:	187b      	adds	r3, r7, r1
 8000eae:	781b      	ldrb	r3, [r3, #0]
 8000eb0:	411a      	asrs	r2, r3
 8000eb2:	0013      	movs	r3, r2
 8000eb4:	2201      	movs	r2, #1
 8000eb6:	4013      	ands	r3, r2
 8000eb8:	d00f      	beq.n	8000eda <sendByte+0x86>
		{
			SetBit(tmp1, (7-i));
 8000eba:	187b      	adds	r3, r7, r1
 8000ebc:	781b      	ldrb	r3, [r3, #0]
 8000ebe:	2207      	movs	r2, #7
 8000ec0:	1ad3      	subs	r3, r2, r3
 8000ec2:	2201      	movs	r2, #1
 8000ec4:	409a      	lsls	r2, r3
 8000ec6:	0013      	movs	r3, r2
 8000ec8:	b25a      	sxtb	r2, r3
 8000eca:	210f      	movs	r1, #15
 8000ecc:	187b      	adds	r3, r7, r1
 8000ece:	781b      	ldrb	r3, [r3, #0]
 8000ed0:	b25b      	sxtb	r3, r3
 8000ed2:	4313      	orrs	r3, r2
 8000ed4:	b25a      	sxtb	r2, r3
 8000ed6:	187b      	adds	r3, r7, r1
 8000ed8:	701a      	strb	r2, [r3, #0]
		}
		if(MaskBit(byte, (i+4)))
 8000eda:	1dfb      	adds	r3, r7, #7
 8000edc:	781a      	ldrb	r2, [r3, #0]
 8000ede:	210d      	movs	r1, #13
 8000ee0:	187b      	adds	r3, r7, r1
 8000ee2:	781b      	ldrb	r3, [r3, #0]
 8000ee4:	3304      	adds	r3, #4
 8000ee6:	411a      	asrs	r2, r3
 8000ee8:	0013      	movs	r3, r2
 8000eea:	2201      	movs	r2, #1
 8000eec:	4013      	ands	r3, r2
 8000eee:	d00f      	beq.n	8000f10 <sendByte+0xbc>
		{
			SetBit(tmp2, (7-i));
 8000ef0:	187b      	adds	r3, r7, r1
 8000ef2:	781b      	ldrb	r3, [r3, #0]
 8000ef4:	2207      	movs	r2, #7
 8000ef6:	1ad3      	subs	r3, r2, r3
 8000ef8:	2201      	movs	r2, #1
 8000efa:	409a      	lsls	r2, r3
 8000efc:	0013      	movs	r3, r2
 8000efe:	b25a      	sxtb	r2, r3
 8000f00:	210e      	movs	r1, #14
 8000f02:	187b      	adds	r3, r7, r1
 8000f04:	781b      	ldrb	r3, [r3, #0]
 8000f06:	b25b      	sxtb	r3, r3
 8000f08:	4313      	orrs	r3, r2
 8000f0a:	b25a      	sxtb	r2, r3
 8000f0c:	187b      	adds	r3, r7, r1
 8000f0e:	701a      	strb	r2, [r3, #0]
	for(uint8_t i = 0; i < 4; i++)
 8000f10:	210d      	movs	r1, #13
 8000f12:	187b      	adds	r3, r7, r1
 8000f14:	781a      	ldrb	r2, [r3, #0]
 8000f16:	187b      	adds	r3, r7, r1
 8000f18:	3201      	adds	r2, #1
 8000f1a:	701a      	strb	r2, [r3, #0]
 8000f1c:	230d      	movs	r3, #13
 8000f1e:	18fb      	adds	r3, r7, r3
 8000f20:	781b      	ldrb	r3, [r3, #0]
 8000f22:	2b03      	cmp	r3, #3
 8000f24:	d9bf      	bls.n	8000ea6 <sendByte+0x52>
		}
	}
	buffer[1] = tmp1;
 8000f26:	2508      	movs	r5, #8
 8000f28:	197b      	adds	r3, r7, r5
 8000f2a:	220f      	movs	r2, #15
 8000f2c:	18ba      	adds	r2, r7, r2
 8000f2e:	7812      	ldrb	r2, [r2, #0]
 8000f30:	705a      	strb	r2, [r3, #1]
	buffer[2] = tmp2;
 8000f32:	197b      	adds	r3, r7, r5
 8000f34:	220e      	movs	r2, #14
 8000f36:	18ba      	adds	r2, r7, r2
 8000f38:	7812      	ldrb	r2, [r2, #0]
 8000f3a:	709a      	strb	r2, [r3, #2]

	DISP_CS_ON;
 8000f3c:	4b10      	ldr	r3, [pc, #64]	; (8000f80 <sendByte+0x12c>)
 8000f3e:	2200      	movs	r2, #0
 8000f40:	2140      	movs	r1, #64	; 0x40
 8000f42:	0018      	movs	r0, r3
 8000f44:	f003 fb79 	bl	800463a <HAL_GPIO_WritePin>
	HAL_StatusTypeDef ret = HAL_SPI_Transmit(&hspi1, buffer, 3, 100);
 8000f48:	260c      	movs	r6, #12
 8000f4a:	19bc      	adds	r4, r7, r6
 8000f4c:	1979      	adds	r1, r7, r5
 8000f4e:	480d      	ldr	r0, [pc, #52]	; (8000f84 <sendByte+0x130>)
 8000f50:	2364      	movs	r3, #100	; 0x64
 8000f52:	2203      	movs	r2, #3
 8000f54:	f006 f8f0 	bl	8007138 <HAL_SPI_Transmit>
 8000f58:	0003      	movs	r3, r0
 8000f5a:	7023      	strb	r3, [r4, #0]
	DISP_CS_OFF;
 8000f5c:	4b08      	ldr	r3, [pc, #32]	; (8000f80 <sendByte+0x12c>)
 8000f5e:	2201      	movs	r2, #1
 8000f60:	2140      	movs	r1, #64	; 0x40
 8000f62:	0018      	movs	r0, r3
 8000f64:	f003 fb69 	bl	800463a <HAL_GPIO_WritePin>
	//HAL_Delay(1);
	if(ret == HAL_OK)
 8000f68:	19bb      	adds	r3, r7, r6
 8000f6a:	781b      	ldrb	r3, [r3, #0]
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d101      	bne.n	8000f74 <sendByte+0x120>
		return DISP_OK;
 8000f70:	2300      	movs	r3, #0
 8000f72:	e000      	b.n	8000f76 <sendByte+0x122>
	else
		return SPI_ERR;
 8000f74:	2302      	movs	r3, #2
}
 8000f76:	0018      	movs	r0, r3
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	b005      	add	sp, #20
 8000f7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000f7e:	46c0      	nop			; (mov r8, r8)
 8000f80:	48000400 	.word	0x48000400
 8000f84:	20000254 	.word	0x20000254

08000f88 <dispInit>:
}

//_____Provede reset displeje a defaultní nastavení_____//
// !!! Pracuje v blokujícím módu !!!
void dispInit(void)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	af00      	add	r7, sp, #0
	//_____Reset displeje po startu_____//
	HAL_Delay(10);
 8000f8c:	200a      	movs	r0, #10
 8000f8e:	f002 fa77 	bl	8003480 <HAL_Delay>
	HAL_GPIO_WritePin(DISP_RST_GPIO_Port,DISP_RST_Pin, GPIO_PIN_RESET);
 8000f92:	4b20      	ldr	r3, [pc, #128]	; (8001014 <dispInit+0x8c>)
 8000f94:	2200      	movs	r2, #0
 8000f96:	2180      	movs	r1, #128	; 0x80
 8000f98:	0018      	movs	r0, r3
 8000f9a:	f003 fb4e 	bl	800463a <HAL_GPIO_WritePin>
	HAL_Delay(20);
 8000f9e:	2014      	movs	r0, #20
 8000fa0:	f002 fa6e 	bl	8003480 <HAL_Delay>
	HAL_GPIO_WritePin(DISP_RST_GPIO_Port,DISP_RST_Pin, GPIO_PIN_SET);
 8000fa4:	4b1b      	ldr	r3, [pc, #108]	; (8001014 <dispInit+0x8c>)
 8000fa6:	2201      	movs	r2, #1
 8000fa8:	2180      	movs	r1, #128	; 0x80
 8000faa:	0018      	movs	r0, r3
 8000fac:	f003 fb45 	bl	800463a <HAL_GPIO_WritePin>
	HAL_Delay(5);
 8000fb0:	2005      	movs	r0, #5
 8000fb2:	f002 fa65 	bl	8003480 <HAL_Delay>

	//_____Nastavit parametry_____//
	sendByte(0x31, INSTRUCTION);	//Function set IS = 1, RE = 0
 8000fb6:	2101      	movs	r1, #1
 8000fb8:	2031      	movs	r0, #49	; 0x31
 8000fba:	f7ff ff4b 	bl	8000e54 <sendByte>
	sendByte(0x01, INSTRUCTION);	//Clear display
 8000fbe:	2101      	movs	r1, #1
 8000fc0:	2001      	movs	r0, #1
 8000fc2:	f7ff ff47 	bl	8000e54 <sendByte>
	sendByte(0x13, INSTRUCTION);	//Oscilator
 8000fc6:	2101      	movs	r1, #1
 8000fc8:	2013      	movs	r0, #19
 8000fca:	f7ff ff43 	bl	8000e54 <sendByte>
	sendByte(0x7A, INSTRUCTION);	//Contrast
 8000fce:	2101      	movs	r1, #1
 8000fd0:	207a      	movs	r0, #122	; 0x7a
 8000fd2:	f7ff ff3f 	bl	8000e54 <sendByte>
	sendByte(0x56, INSTRUCTION);	//Power/Icon/Contrast
 8000fd6:	2101      	movs	r1, #1
 8000fd8:	2056      	movs	r0, #86	; 0x56
 8000fda:	f7ff ff3b 	bl	8000e54 <sendByte>
	sendByte(0x6B, INSTRUCTION);	//Follower control
 8000fde:	2101      	movs	r1, #1
 8000fe0:	206b      	movs	r0, #107	; 0x6b
 8000fe2:	f7ff ff37 	bl	8000e54 <sendByte>
	sendByte(0x0F, INSTRUCTION);	//Display on
 8000fe6:	2101      	movs	r1, #1
 8000fe8:	200f      	movs	r0, #15
 8000fea:	f7ff ff33 	bl	8000e54 <sendByte>
	sendByte(0x32, INSTRUCTION);	//Function set RE = 1
 8000fee:	2101      	movs	r1, #1
 8000ff0:	2032      	movs	r0, #50	; 0x32
 8000ff2:	f7ff ff2f 	bl	8000e54 <sendByte>
	sendByte(0x1F, INSTRUCTION);	//Shift enable
 8000ff6:	2101      	movs	r1, #1
 8000ff8:	201f      	movs	r0, #31
 8000ffa:	f7ff ff2b 	bl	8000e54 <sendByte>
	sendByte(0x38, INSTRUCTION);	//Function set RE = 0
 8000ffe:	2101      	movs	r1, #1
 8001000:	2038      	movs	r0, #56	; 0x38
 8001002:	f7ff ff27 	bl	8000e54 <sendByte>

	//_____Zapnout podsvícení_____//
	setColour(BACKLIGHT_WHITE);
 8001006:	2000      	movs	r0, #0
 8001008:	f7ff feac 	bl	8000d64 <setColour>
}
 800100c:	46c0      	nop			; (mov r8, r8)
 800100e:	46bd      	mov	sp, r7
 8001010:	bd80      	pop	{r7, pc}
 8001012:	46c0      	nop			; (mov r8, r8)
 8001014:	48000400 	.word	0x48000400

08001018 <setCursor>:
//_____Nastaví kurzor_____//
//pozice počítána od nuly//
//-> argumenty: řádek, sloupec
// !!! Pracuje v blokujícím módu !!!
DISP_STATE setCursor(uint8_t row, uint8_t col)
{
 8001018:	b5b0      	push	{r4, r5, r7, lr}
 800101a:	b084      	sub	sp, #16
 800101c:	af00      	add	r7, sp, #0
 800101e:	0002      	movs	r2, r0
 8001020:	1dfb      	adds	r3, r7, #7
 8001022:	701a      	strb	r2, [r3, #0]
 8001024:	1dbb      	adds	r3, r7, #6
 8001026:	1c0a      	adds	r2, r1, #0
 8001028:	701a      	strb	r2, [r3, #0]
	uint8_t addres = 0x80;	//DDRAM adresa
 800102a:	230f      	movs	r3, #15
 800102c:	18fb      	adds	r3, r7, r3
 800102e:	2280      	movs	r2, #128	; 0x80
 8001030:	701a      	strb	r2, [r3, #0]
	if(row > 3 || col > 15)	//displej 4x16
 8001032:	1dfb      	adds	r3, r7, #7
 8001034:	781b      	ldrb	r3, [r3, #0]
 8001036:	2b03      	cmp	r3, #3
 8001038:	d803      	bhi.n	8001042 <setCursor+0x2a>
 800103a:	1dbb      	adds	r3, r7, #6
 800103c:	781b      	ldrb	r3, [r3, #0]
 800103e:	2b0f      	cmp	r3, #15
 8001040:	d901      	bls.n	8001046 <setCursor+0x2e>
		return DISP_ERR;
 8001042:	2304      	movs	r3, #4
 8001044:	e01c      	b.n	8001080 <setCursor+0x68>
	addres += row*0x20;
 8001046:	1dfb      	adds	r3, r7, #7
 8001048:	781b      	ldrb	r3, [r3, #0]
 800104a:	015b      	lsls	r3, r3, #5
 800104c:	b2d9      	uxtb	r1, r3
 800104e:	200f      	movs	r0, #15
 8001050:	183b      	adds	r3, r7, r0
 8001052:	183a      	adds	r2, r7, r0
 8001054:	7812      	ldrb	r2, [r2, #0]
 8001056:	188a      	adds	r2, r1, r2
 8001058:	701a      	strb	r2, [r3, #0]
	addres += col;
 800105a:	183b      	adds	r3, r7, r0
 800105c:	1839      	adds	r1, r7, r0
 800105e:	1dba      	adds	r2, r7, #6
 8001060:	7809      	ldrb	r1, [r1, #0]
 8001062:	7812      	ldrb	r2, [r2, #0]
 8001064:	188a      	adds	r2, r1, r2
 8001066:	701a      	strb	r2, [r3, #0]

	//HAL_Delay(5);
	DISP_STATE ret = sendByte(addres, INSTRUCTION);
 8001068:	250e      	movs	r5, #14
 800106a:	197c      	adds	r4, r7, r5
 800106c:	183b      	adds	r3, r7, r0
 800106e:	781b      	ldrb	r3, [r3, #0]
 8001070:	2101      	movs	r1, #1
 8001072:	0018      	movs	r0, r3
 8001074:	f7ff feee 	bl	8000e54 <sendByte>
 8001078:	0003      	movs	r3, r0
 800107a:	7023      	strb	r3, [r4, #0]
	//HAL_Delay(5);
	return ret;
 800107c:	197b      	adds	r3, r7, r5
 800107e:	781b      	ldrb	r3, [r3, #0]
}
 8001080:	0018      	movs	r0, r3
 8001082:	46bd      	mov	sp, r7
 8001084:	b004      	add	sp, #16
 8001086:	bdb0      	pop	{r4, r5, r7, pc}

08001088 <writeRow>:
//_____Zapiš řetězec na daný řádek_____//
//znaky přečnívající znaky budou smazány//
//-> argumenty: pole znaků, délka řetězce, řádek, zarovnání
// !!! Pracuje v blokujícím módu !!!
DISP_STATE writeRow(char* string, uint8_t lenght, uint8_t row, ALIGN align)
{
 8001088:	b590      	push	{r4, r7, lr}
 800108a:	b089      	sub	sp, #36	; 0x24
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]
 8001090:	000c      	movs	r4, r1
 8001092:	0010      	movs	r0, r2
 8001094:	0019      	movs	r1, r3
 8001096:	1cfb      	adds	r3, r7, #3
 8001098:	1c22      	adds	r2, r4, #0
 800109a:	701a      	strb	r2, [r3, #0]
 800109c:	1cbb      	adds	r3, r7, #2
 800109e:	1c02      	adds	r2, r0, #0
 80010a0:	701a      	strb	r2, [r3, #0]
 80010a2:	1c7b      	adds	r3, r7, #1
 80010a4:	1c0a      	adds	r2, r1, #0
 80010a6:	701a      	strb	r2, [r3, #0]
	if(lenght > 16)	//neplatná délka řetězce
 80010a8:	1cfb      	adds	r3, r7, #3
 80010aa:	781b      	ldrb	r3, [r3, #0]
 80010ac:	2b10      	cmp	r3, #16
 80010ae:	d901      	bls.n	80010b4 <writeRow+0x2c>
		return DISP_ERR;
 80010b0:	2304      	movs	r3, #4
 80010b2:	e083      	b.n	80011bc <writeRow+0x134>
	uint8_t col;
	char newString[16];
	for(uint8_t i = 0; i < 16; i++)
 80010b4:	231e      	movs	r3, #30
 80010b6:	18fb      	adds	r3, r7, r3
 80010b8:	2200      	movs	r2, #0
 80010ba:	701a      	strb	r2, [r3, #0]
 80010bc:	e00b      	b.n	80010d6 <writeRow+0x4e>
	{
		newString[i] = ' ';
 80010be:	201e      	movs	r0, #30
 80010c0:	183b      	adds	r3, r7, r0
 80010c2:	781b      	ldrb	r3, [r3, #0]
 80010c4:	220c      	movs	r2, #12
 80010c6:	18ba      	adds	r2, r7, r2
 80010c8:	2120      	movs	r1, #32
 80010ca:	54d1      	strb	r1, [r2, r3]
	for(uint8_t i = 0; i < 16; i++)
 80010cc:	183b      	adds	r3, r7, r0
 80010ce:	781a      	ldrb	r2, [r3, #0]
 80010d0:	183b      	adds	r3, r7, r0
 80010d2:	3201      	adds	r2, #1
 80010d4:	701a      	strb	r2, [r3, #0]
 80010d6:	231e      	movs	r3, #30
 80010d8:	18fb      	adds	r3, r7, r3
 80010da:	781b      	ldrb	r3, [r3, #0]
 80010dc:	2b0f      	cmp	r3, #15
 80010de:	d9ee      	bls.n	80010be <writeRow+0x36>
	}
	switch(align)
 80010e0:	1c7b      	adds	r3, r7, #1
 80010e2:	781b      	ldrb	r3, [r3, #0]
 80010e4:	2b02      	cmp	r3, #2
 80010e6:	d012      	beq.n	800110e <writeRow+0x86>
 80010e8:	dc1e      	bgt.n	8001128 <writeRow+0xa0>
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d002      	beq.n	80010f4 <writeRow+0x6c>
 80010ee:	2b01      	cmp	r3, #1
 80010f0:	d005      	beq.n	80010fe <writeRow+0x76>
 80010f2:	e019      	b.n	8001128 <writeRow+0xa0>
	{
		case LEFT:	//zarovnání doleva
			col = 0;
 80010f4:	231f      	movs	r3, #31
 80010f6:	18fb      	adds	r3, r7, r3
 80010f8:	2200      	movs	r2, #0
 80010fa:	701a      	strb	r2, [r3, #0]
			break;
 80010fc:	e019      	b.n	8001132 <writeRow+0xaa>
		case RIGHT:
			col = 15 - lenght;
 80010fe:	231f      	movs	r3, #31
 8001100:	18fb      	adds	r3, r7, r3
 8001102:	1cfa      	adds	r2, r7, #3
 8001104:	7812      	ldrb	r2, [r2, #0]
 8001106:	210f      	movs	r1, #15
 8001108:	1a8a      	subs	r2, r1, r2
 800110a:	701a      	strb	r2, [r3, #0]
			break;
 800110c:	e011      	b.n	8001132 <writeRow+0xaa>
		case CENTER:
			col = (15 - lenght)/2 + 1;
 800110e:	1cfb      	adds	r3, r7, #3
 8001110:	781b      	ldrb	r3, [r3, #0]
 8001112:	220f      	movs	r2, #15
 8001114:	1ad3      	subs	r3, r2, r3
 8001116:	d500      	bpl.n	800111a <writeRow+0x92>
 8001118:	3301      	adds	r3, #1
 800111a:	105b      	asrs	r3, r3, #1
 800111c:	b2da      	uxtb	r2, r3
 800111e:	231f      	movs	r3, #31
 8001120:	18fb      	adds	r3, r7, r3
 8001122:	3201      	adds	r2, #1
 8001124:	701a      	strb	r2, [r3, #0]
			break;
 8001126:	e004      	b.n	8001132 <writeRow+0xaa>
		default:
			col = 0;
 8001128:	231f      	movs	r3, #31
 800112a:	18fb      	adds	r3, r7, r3
 800112c:	2200      	movs	r2, #0
 800112e:	701a      	strb	r2, [r3, #0]
			break;
 8001130:	46c0      	nop			; (mov r8, r8)
	}
	for(uint8_t i = 0; i < lenght; i++)
 8001132:	231d      	movs	r3, #29
 8001134:	18fb      	adds	r3, r7, r3
 8001136:	2200      	movs	r2, #0
 8001138:	701a      	strb	r2, [r3, #0]
 800113a:	e013      	b.n	8001164 <writeRow+0xdc>
	{
		newString[col + i] = string[i];
 800113c:	201d      	movs	r0, #29
 800113e:	183b      	adds	r3, r7, r0
 8001140:	781b      	ldrb	r3, [r3, #0]
 8001142:	687a      	ldr	r2, [r7, #4]
 8001144:	18d2      	adds	r2, r2, r3
 8001146:	231f      	movs	r3, #31
 8001148:	18fb      	adds	r3, r7, r3
 800114a:	7819      	ldrb	r1, [r3, #0]
 800114c:	183b      	adds	r3, r7, r0
 800114e:	781b      	ldrb	r3, [r3, #0]
 8001150:	18cb      	adds	r3, r1, r3
 8001152:	7811      	ldrb	r1, [r2, #0]
 8001154:	220c      	movs	r2, #12
 8001156:	18ba      	adds	r2, r7, r2
 8001158:	54d1      	strb	r1, [r2, r3]
	for(uint8_t i = 0; i < lenght; i++)
 800115a:	183b      	adds	r3, r7, r0
 800115c:	781a      	ldrb	r2, [r3, #0]
 800115e:	183b      	adds	r3, r7, r0
 8001160:	3201      	adds	r2, #1
 8001162:	701a      	strb	r2, [r3, #0]
 8001164:	231d      	movs	r3, #29
 8001166:	18fa      	adds	r2, r7, r3
 8001168:	1cfb      	adds	r3, r7, #3
 800116a:	7812      	ldrb	r2, [r2, #0]
 800116c:	781b      	ldrb	r3, [r3, #0]
 800116e:	429a      	cmp	r2, r3
 8001170:	d3e4      	bcc.n	800113c <writeRow+0xb4>
	}
	setCursor(row, 0);
 8001172:	1cbb      	adds	r3, r7, #2
 8001174:	781b      	ldrb	r3, [r3, #0]
 8001176:	2100      	movs	r1, #0
 8001178:	0018      	movs	r0, r3
 800117a:	f7ff ff4d 	bl	8001018 <setCursor>
	for(uint8_t i = 0; i < 16; i++)
 800117e:	231c      	movs	r3, #28
 8001180:	18fb      	adds	r3, r7, r3
 8001182:	2200      	movs	r2, #0
 8001184:	701a      	strb	r2, [r3, #0]
 8001186:	e013      	b.n	80011b0 <writeRow+0x128>
	{
		if(sendByte(newString[i], DATA) != DISP_OK)
 8001188:	231c      	movs	r3, #28
 800118a:	18fb      	adds	r3, r7, r3
 800118c:	781b      	ldrb	r3, [r3, #0]
 800118e:	220c      	movs	r2, #12
 8001190:	18ba      	adds	r2, r7, r2
 8001192:	5cd3      	ldrb	r3, [r2, r3]
 8001194:	2102      	movs	r1, #2
 8001196:	0018      	movs	r0, r3
 8001198:	f7ff fe5c 	bl	8000e54 <sendByte>
 800119c:	1e03      	subs	r3, r0, #0
 800119e:	d001      	beq.n	80011a4 <writeRow+0x11c>
					return SPI_ERR;
 80011a0:	2302      	movs	r3, #2
 80011a2:	e00b      	b.n	80011bc <writeRow+0x134>
	for(uint8_t i = 0; i < 16; i++)
 80011a4:	211c      	movs	r1, #28
 80011a6:	187b      	adds	r3, r7, r1
 80011a8:	781a      	ldrb	r2, [r3, #0]
 80011aa:	187b      	adds	r3, r7, r1
 80011ac:	3201      	adds	r2, #1
 80011ae:	701a      	strb	r2, [r3, #0]
 80011b0:	231c      	movs	r3, #28
 80011b2:	18fb      	adds	r3, r7, r3
 80011b4:	781b      	ldrb	r3, [r3, #0]
 80011b6:	2b0f      	cmp	r3, #15
 80011b8:	d9e6      	bls.n	8001188 <writeRow+0x100>
	}
	return DISP_OK;
 80011ba:	2300      	movs	r3, #0
}
 80011bc:	0018      	movs	r0, r3
 80011be:	46bd      	mov	sp, r7
 80011c0:	b009      	add	sp, #36	; 0x24
 80011c2:	bd90      	pop	{r4, r7, pc}

080011c4 <HAL_GPIO_EXTI_Callback>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

//_____Buttons interrupt callback_____//
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b082      	sub	sp, #8
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	0002      	movs	r2, r0
 80011cc:	1dbb      	adds	r3, r7, #6
 80011ce:	801a      	strh	r2, [r3, #0]
	if(GPIO_Pin == BUTTON_0_Pin)
 80011d0:	1dbb      	adds	r3, r7, #6
 80011d2:	881a      	ldrh	r2, [r3, #0]
 80011d4:	2380      	movs	r3, #128	; 0x80
 80011d6:	009b      	lsls	r3, r3, #2
 80011d8:	429a      	cmp	r2, r3
 80011da:	d104      	bne.n	80011e6 <HAL_GPIO_EXTI_Callback+0x22>
	{
		flags.buttons.butt0_int = 1;
 80011dc:	4b09      	ldr	r3, [pc, #36]	; (8001204 <HAL_GPIO_EXTI_Callback+0x40>)
 80011de:	791a      	ldrb	r2, [r3, #4]
 80011e0:	2101      	movs	r1, #1
 80011e2:	430a      	orrs	r2, r1
 80011e4:	711a      	strb	r2, [r3, #4]
	}
	if(GPIO_Pin == BUTTON_1_Pin)
 80011e6:	1dbb      	adds	r3, r7, #6
 80011e8:	881a      	ldrh	r2, [r3, #0]
 80011ea:	2380      	movs	r3, #128	; 0x80
 80011ec:	005b      	lsls	r3, r3, #1
 80011ee:	429a      	cmp	r2, r3
 80011f0:	d104      	bne.n	80011fc <HAL_GPIO_EXTI_Callback+0x38>
	{
		flags.buttons.butt1_int = 1;
 80011f2:	4b04      	ldr	r3, [pc, #16]	; (8001204 <HAL_GPIO_EXTI_Callback+0x40>)
 80011f4:	791a      	ldrb	r2, [r3, #4]
 80011f6:	2104      	movs	r1, #4
 80011f8:	430a      	orrs	r2, r1
 80011fa:	711a      	strb	r2, [r3, #4]
	}
}
 80011fc:	46c0      	nop			; (mov r8, r8)
 80011fe:	46bd      	mov	sp, r7
 8001200:	b002      	add	sp, #8
 8001202:	bd80      	pop	{r7, pc}
 8001204:	200003d8 	.word	0x200003d8

08001208 <HAL_TIM_PeriodElapsedCallback>:

//_____Timer interrupt callback_____//
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b082      	sub	sp, #8
 800120c:	af00      	add	r7, sp, #0
 800120e:	6078      	str	r0, [r7, #4]
	if(htim == &htim14)	//Timer 14 -> každých 10 ms
 8001210:	687a      	ldr	r2, [r7, #4]
 8001212:	4b0c      	ldr	r3, [pc, #48]	; (8001244 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8001214:	429a      	cmp	r2, r3
 8001216:	d110      	bne.n	800123a <HAL_TIM_PeriodElapsedCallback+0x32>
	{
		//Krátké pípnutí signalizuje vykonávání hlavní smy�?ky programu
		//delší než deset ms
		if(flags.time.ten_ms == 1)
 8001218:	4b0b      	ldr	r3, [pc, #44]	; (8001248 <HAL_TIM_PeriodElapsedCallback+0x40>)
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	07db      	lsls	r3, r3, #31
 800121e:	0fdb      	lsrs	r3, r3, #31
 8001220:	b2db      	uxtb	r3, r3
 8001222:	2b01      	cmp	r3, #1
 8001224:	d104      	bne.n	8001230 <HAL_TIM_PeriodElapsedCallback+0x28>
			flags.ui.shortBeep = 1;
 8001226:	4b08      	ldr	r3, [pc, #32]	; (8001248 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8001228:	7c1a      	ldrb	r2, [r3, #16]
 800122a:	2101      	movs	r1, #1
 800122c:	430a      	orrs	r2, r1
 800122e:	741a      	strb	r2, [r3, #16]
		flags.time.ten_ms = 1;
 8001230:	4b05      	ldr	r3, [pc, #20]	; (8001248 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8001232:	781a      	ldrb	r2, [r3, #0]
 8001234:	2101      	movs	r1, #1
 8001236:	430a      	orrs	r2, r1
 8001238:	701a      	strb	r2, [r3, #0]
	}
}
 800123a:	46c0      	nop			; (mov r8, r8)
 800123c:	46bd      	mov	sp, r7
 800123e:	b002      	add	sp, #8
 8001240:	bd80      	pop	{r7, pc}
 8001242:	46c0      	nop			; (mov r8, r8)
 8001244:	200002b8 	.word	0x200002b8
 8001248:	200003d8 	.word	0x200003d8

0800124c <HAL_ADC_ConvCpltCallback>:

//_____ADC data ready callback_____//
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	b082      	sub	sp, #8
 8001250:	af00      	add	r7, sp, #0
 8001252:	6078      	str	r0, [r7, #4]
	HAL_ADC_Stop_IT(hadc);
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	0018      	movs	r0, r3
 8001258:	f002 fae8 	bl	800382c <HAL_ADC_Stop_IT>
	flags.meas.measDataReady = 1;
 800125c:	4b04      	ldr	r3, [pc, #16]	; (8001270 <HAL_ADC_ConvCpltCallback+0x24>)
 800125e:	7d1a      	ldrb	r2, [r3, #20]
 8001260:	2104      	movs	r1, #4
 8001262:	430a      	orrs	r2, r1
 8001264:	751a      	strb	r2, [r3, #20]
}
 8001266:	46c0      	nop			; (mov r8, r8)
 8001268:	46bd      	mov	sp, r7
 800126a:	b002      	add	sp, #8
 800126c:	bd80      	pop	{r7, pc}
 800126e:	46c0      	nop			; (mov r8, r8)
 8001270:	200003d8 	.word	0x200003d8

08001274 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001274:	b590      	push	{r4, r7, lr}
 8001276:	b087      	sub	sp, #28
 8001278:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800127a:	f002 f89d 	bl	80033b8 <HAL_Init>
  /* USER CODE BEGIN Init */

  //__Buffery___//
  //dispBuffer = createBuffer(100);
  //regBuffer = createBuffer(100);
  USB_Rx_Buffer = createBuffer(500);
 800127e:	23fa      	movs	r3, #250	; 0xfa
 8001280:	005b      	lsls	r3, r3, #1
 8001282:	0018      	movs	r0, r3
 8001284:	f001 f960 	bl	8002548 <createBuffer>
 8001288:	0002      	movs	r2, r0
 800128a:	4b37      	ldr	r3, [pc, #220]	; (8001368 <main+0xf4>)
 800128c:	601a      	str	r2, [r3, #0]
  USB_Tx_Buffer = createBuffer(500);
 800128e:	23fa      	movs	r3, #250	; 0xfa
 8001290:	005b      	lsls	r3, r3, #1
 8001292:	0018      	movs	r0, r3
 8001294:	f001 f958 	bl	8002548 <createBuffer>
 8001298:	0002      	movs	r2, r0
 800129a:	4b34      	ldr	r3, [pc, #208]	; (800136c <main+0xf8>)
 800129c:	601a      	str	r2, [r3, #0]

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800129e:	f000 f875 	bl	800138c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80012a2:	f000 facf 	bl	8001844 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 80012a6:	f00b fd99 	bl	800cddc <MX_USB_DEVICE_Init>
  MX_ADC_Init();
 80012aa:	f000 f8db 	bl	8001464 <MX_ADC_Init>
  MX_SPI1_Init();
 80012ae:	f000 fa07 	bl	80016c0 <MX_SPI1_Init>
  MX_USART3_UART_Init();
 80012b2:	f000 fa97 	bl	80017e4 <MX_USART3_UART_Init>
  MX_TIM14_Init();
 80012b6:	f000 fa49 	bl	800174c <MX_TIM14_Init>
  /* USER CODE BEGIN 2 */
  //___Nacteni kalibracni konstanty___//
  calibValue = *((uint16_t*)CALIB_VALUE_PTR);
 80012ba:	4b2d      	ldr	r3, [pc, #180]	; (8001370 <main+0xfc>)
 80012bc:	881a      	ldrh	r2, [r3, #0]
 80012be:	4b2d      	ldr	r3, [pc, #180]	; (8001374 <main+0x100>)
 80012c0:	801a      	strh	r2, [r3, #0]

  //___Inicializace displeje___//
  dispInit();
 80012c2:	f7ff fe61 	bl	8000f88 <dispInit>
  char line1[] = "Zahoreni";
 80012c6:	200c      	movs	r0, #12
 80012c8:	183b      	adds	r3, r7, r0
 80012ca:	4a2b      	ldr	r2, [pc, #172]	; (8001378 <main+0x104>)
 80012cc:	ca12      	ldmia	r2!, {r1, r4}
 80012ce:	c312      	stmia	r3!, {r1, r4}
 80012d0:	7812      	ldrb	r2, [r2, #0]
 80012d2:	701a      	strb	r2, [r3, #0]
  char line2[] = "zdroju";
 80012d4:	1d3b      	adds	r3, r7, #4
 80012d6:	4a29      	ldr	r2, [pc, #164]	; (800137c <main+0x108>)
 80012d8:	6811      	ldr	r1, [r2, #0]
 80012da:	6019      	str	r1, [r3, #0]
 80012dc:	8891      	ldrh	r1, [r2, #4]
 80012de:	8099      	strh	r1, [r3, #4]
 80012e0:	7992      	ldrb	r2, [r2, #6]
 80012e2:	719a      	strb	r2, [r3, #6]
  writeRow(line1, 8, 1, CENTER);
 80012e4:	1838      	adds	r0, r7, r0
 80012e6:	2302      	movs	r3, #2
 80012e8:	2201      	movs	r2, #1
 80012ea:	2108      	movs	r1, #8
 80012ec:	f7ff fecc 	bl	8001088 <writeRow>
  writeRow(line2, 6, 2, CENTER);
 80012f0:	1d38      	adds	r0, r7, #4
 80012f2:	2302      	movs	r3, #2
 80012f4:	2202      	movs	r2, #2
 80012f6:	2106      	movs	r1, #6
 80012f8:	f7ff fec6 	bl	8001088 <writeRow>

  LOAD_MIN_OFF;
 80012fc:	4b20      	ldr	r3, [pc, #128]	; (8001380 <main+0x10c>)
 80012fe:	2200      	movs	r2, #0
 8001300:	2180      	movs	r1, #128	; 0x80
 8001302:	0018      	movs	r0, r3
 8001304:	f003 f999 	bl	800463a <HAL_GPIO_WritePin>
  LOAD_MAX_OFF;
 8001308:	4b1d      	ldr	r3, [pc, #116]	; (8001380 <main+0x10c>)
 800130a:	2200      	movs	r2, #0
 800130c:	2140      	movs	r1, #64	; 0x40
 800130e:	0018      	movs	r0, r3
 8001310:	f003 f993 	bl	800463a <HAL_GPIO_WritePin>

  if(regInit() != REG_OK)	//inicializace shift registrů
 8001314:	f001 fa68 	bl	80027e8 <regInit>
 8001318:	1e03      	subs	r3, r0, #0
 800131a:	d004      	beq.n	8001326 <main+0xb2>
  {
	  flags.conErr = 1;
 800131c:	4b19      	ldr	r3, [pc, #100]	; (8001384 <main+0x110>)
 800131e:	7e1a      	ldrb	r2, [r3, #24]
 8001320:	2140      	movs	r1, #64	; 0x40
 8001322:	430a      	orrs	r2, r1
 8001324:	761a      	strb	r2, [r3, #24]
	  //Odešli zprávu do PC
  }

  // Start timer
  HAL_TIM_Base_Start_IT(&htim14);
 8001326:	4b18      	ldr	r3, [pc, #96]	; (8001388 <main+0x114>)
 8001328:	0018      	movs	r0, r3
 800132a:	f006 fbf5 	bl	8007b18 <HAL_TIM_Base_Start_IT>

  flags.ui.longBeep = 1;
 800132e:	4b15      	ldr	r3, [pc, #84]	; (8001384 <main+0x110>)
 8001330:	7c1a      	ldrb	r2, [r3, #16]
 8001332:	2102      	movs	r1, #2
 8001334:	430a      	orrs	r2, r1
 8001336:	741a      	strb	r2, [r3, #16]
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  if(flags.time.ten_ms)	// 10 ms
 8001338:	4b12      	ldr	r3, [pc, #72]	; (8001384 <main+0x110>)
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	07db      	lsls	r3, r3, #31
 800133e:	0fdb      	lsrs	r3, r3, #31
 8001340:	b2db      	uxtb	r3, r3
 8001342:	2b00      	cmp	r3, #0
 8001344:	d0f8      	beq.n	8001338 <main+0xc4>
	  {
		  clkHandler();
 8001346:	f000 fb7b 	bl	8001a40 <clkHandler>
		  buttonDebounce();
 800134a:	f000 fbf7 	bl	8001b3c <buttonDebounce>
		  comHandler();
 800134e:	f7ff f863 	bl	8000418 <comHandler>
		  calibHandler();
 8001352:	f001 f855 	bl	8002400 <calibHandler>
		  dispHandler();
 8001356:	f000 fc79 	bl	8001c4c <dispHandler>
		  UI_Handler();
 800135a:	f000 fe53 	bl	8002004 <UI_Handler>
		  testHandler();
 800135e:	f001 fcef 	bl	8002d40 <testHandler>
		  measHandler();
 8001362:	f000 ff9d 	bl	80022a0 <measHandler>
	  if(flags.time.ten_ms)	// 10 ms
 8001366:	e7e7      	b.n	8001338 <main+0xc4>
 8001368:	20000ec0 	.word	0x20000ec0
 800136c:	200001fc 	.word	0x200001fc
 8001370:	1ffff7ba 	.word	0x1ffff7ba
 8001374:	200003f8 	.word	0x200003f8
 8001378:	0800e234 	.word	0x0800e234
 800137c:	0800e240 	.word	0x0800e240
 8001380:	48000800 	.word	0x48000800
 8001384:	200003d8 	.word	0x200003d8
 8001388:	200002b8 	.word	0x200002b8

0800138c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800138c:	b590      	push	{r4, r7, lr}
 800138e:	b099      	sub	sp, #100	; 0x64
 8001390:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001392:	242c      	movs	r4, #44	; 0x2c
 8001394:	193b      	adds	r3, r7, r4
 8001396:	0018      	movs	r0, r3
 8001398:	2334      	movs	r3, #52	; 0x34
 800139a:	001a      	movs	r2, r3
 800139c:	2100      	movs	r1, #0
 800139e:	f00c faca 	bl	800d936 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80013a2:	231c      	movs	r3, #28
 80013a4:	18fb      	adds	r3, r7, r3
 80013a6:	0018      	movs	r0, r3
 80013a8:	2310      	movs	r3, #16
 80013aa:	001a      	movs	r2, r3
 80013ac:	2100      	movs	r1, #0
 80013ae:	f00c fac2 	bl	800d936 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80013b2:	003b      	movs	r3, r7
 80013b4:	0018      	movs	r0, r3
 80013b6:	231c      	movs	r3, #28
 80013b8:	001a      	movs	r2, r3
 80013ba:	2100      	movs	r1, #0
 80013bc:	f00c fabb 	bl	800d936 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI14
 80013c0:	0021      	movs	r1, r4
 80013c2:	187b      	adds	r3, r7, r1
 80013c4:	2232      	movs	r2, #50	; 0x32
 80013c6:	601a      	str	r2, [r3, #0]
                              |RCC_OSCILLATORTYPE_HSI48;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80013c8:	187b      	adds	r3, r7, r1
 80013ca:	2201      	movs	r2, #1
 80013cc:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80013ce:	187b      	adds	r3, r7, r1
 80013d0:	2201      	movs	r2, #1
 80013d2:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 80013d4:	187b      	adds	r3, r7, r1
 80013d6:	2201      	movs	r2, #1
 80013d8:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80013da:	187b      	adds	r3, r7, r1
 80013dc:	2210      	movs	r2, #16
 80013de:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
 80013e0:	187b      	adds	r3, r7, r1
 80013e2:	2210      	movs	r2, #16
 80013e4:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80013e6:	187b      	adds	r3, r7, r1
 80013e8:	2202      	movs	r2, #2
 80013ea:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80013ec:	187b      	adds	r3, r7, r1
 80013ee:	2280      	movs	r2, #128	; 0x80
 80013f0:	0212      	lsls	r2, r2, #8
 80013f2:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL2;
 80013f4:	187b      	adds	r3, r7, r1
 80013f6:	2200      	movs	r2, #0
 80013f8:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 80013fa:	187b      	adds	r3, r7, r1
 80013fc:	2200      	movs	r2, #0
 80013fe:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001400:	187b      	adds	r3, r7, r1
 8001402:	0018      	movs	r0, r3
 8001404:	f004 ffe0 	bl	80063c8 <HAL_RCC_OscConfig>
 8001408:	1e03      	subs	r3, r0, #0
 800140a:	d001      	beq.n	8001410 <SystemClock_Config+0x84>
  {
    Error_Handler();
 800140c:	f001 f897 	bl	800253e <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001410:	211c      	movs	r1, #28
 8001412:	187b      	adds	r3, r7, r1
 8001414:	2207      	movs	r2, #7
 8001416:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001418:	187b      	adds	r3, r7, r1
 800141a:	2202      	movs	r2, #2
 800141c:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800141e:	187b      	adds	r3, r7, r1
 8001420:	2200      	movs	r2, #0
 8001422:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001424:	187b      	adds	r3, r7, r1
 8001426:	2200      	movs	r2, #0
 8001428:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800142a:	187b      	adds	r3, r7, r1
 800142c:	2100      	movs	r1, #0
 800142e:	0018      	movs	r0, r3
 8001430:	f005 fb50 	bl	8006ad4 <HAL_RCC_ClockConfig>
 8001434:	1e03      	subs	r3, r0, #0
 8001436:	d001      	beq.n	800143c <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8001438:	f001 f881 	bl	800253e <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800143c:	003b      	movs	r3, r7
 800143e:	2280      	movs	r2, #128	; 0x80
 8001440:	0292      	lsls	r2, r2, #10
 8001442:	601a      	str	r2, [r3, #0]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8001444:	003b      	movs	r3, r7
 8001446:	2200      	movs	r2, #0
 8001448:	619a      	str	r2, [r3, #24]

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800144a:	003b      	movs	r3, r7
 800144c:	0018      	movs	r0, r3
 800144e:	f005 fcbd 	bl	8006dcc <HAL_RCCEx_PeriphCLKConfig>
 8001452:	1e03      	subs	r3, r0, #0
 8001454:	d001      	beq.n	800145a <SystemClock_Config+0xce>
  {
    Error_Handler();
 8001456:	f001 f872 	bl	800253e <Error_Handler>
  }
}
 800145a:	46c0      	nop			; (mov r8, r8)
 800145c:	46bd      	mov	sp, r7
 800145e:	b019      	add	sp, #100	; 0x64
 8001460:	bd90      	pop	{r4, r7, pc}
	...

08001464 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	b084      	sub	sp, #16
 8001468:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800146a:	1d3b      	adds	r3, r7, #4
 800146c:	0018      	movs	r0, r3
 800146e:	230c      	movs	r3, #12
 8001470:	001a      	movs	r2, r3
 8001472:	2100      	movs	r1, #0
 8001474:	f00c fa5f 	bl	800d936 <memset>

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8001478:	4b8f      	ldr	r3, [pc, #572]	; (80016b8 <MX_ADC_Init+0x254>)
 800147a:	4a90      	ldr	r2, [pc, #576]	; (80016bc <MX_ADC_Init+0x258>)
 800147c:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800147e:	4b8e      	ldr	r3, [pc, #568]	; (80016b8 <MX_ADC_Init+0x254>)
 8001480:	2200      	movs	r2, #0
 8001482:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8001484:	4b8c      	ldr	r3, [pc, #560]	; (80016b8 <MX_ADC_Init+0x254>)
 8001486:	2200      	movs	r2, #0
 8001488:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800148a:	4b8b      	ldr	r3, [pc, #556]	; (80016b8 <MX_ADC_Init+0x254>)
 800148c:	2200      	movs	r2, #0
 800148e:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8001490:	4b89      	ldr	r3, [pc, #548]	; (80016b8 <MX_ADC_Init+0x254>)
 8001492:	2201      	movs	r2, #1
 8001494:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001496:	4b88      	ldr	r3, [pc, #544]	; (80016b8 <MX_ADC_Init+0x254>)
 8001498:	2204      	movs	r2, #4
 800149a:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 800149c:	4b86      	ldr	r3, [pc, #536]	; (80016b8 <MX_ADC_Init+0x254>)
 800149e:	2200      	movs	r2, #0
 80014a0:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 80014a2:	4b85      	ldr	r3, [pc, #532]	; (80016b8 <MX_ADC_Init+0x254>)
 80014a4:	2200      	movs	r2, #0
 80014a6:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = DISABLE;
 80014a8:	4b83      	ldr	r3, [pc, #524]	; (80016b8 <MX_ADC_Init+0x254>)
 80014aa:	2200      	movs	r2, #0
 80014ac:	769a      	strb	r2, [r3, #26]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 80014ae:	4b82      	ldr	r3, [pc, #520]	; (80016b8 <MX_ADC_Init+0x254>)
 80014b0:	2200      	movs	r2, #0
 80014b2:	76da      	strb	r2, [r3, #27]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80014b4:	4b80      	ldr	r3, [pc, #512]	; (80016b8 <MX_ADC_Init+0x254>)
 80014b6:	22c2      	movs	r2, #194	; 0xc2
 80014b8:	32ff      	adds	r2, #255	; 0xff
 80014ba:	61da      	str	r2, [r3, #28]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80014bc:	4b7e      	ldr	r3, [pc, #504]	; (80016b8 <MX_ADC_Init+0x254>)
 80014be:	2200      	movs	r2, #0
 80014c0:	621a      	str	r2, [r3, #32]
  hadc.Init.DMAContinuousRequests = DISABLE;
 80014c2:	4b7d      	ldr	r3, [pc, #500]	; (80016b8 <MX_ADC_Init+0x254>)
 80014c4:	2224      	movs	r2, #36	; 0x24
 80014c6:	2100      	movs	r1, #0
 80014c8:	5499      	strb	r1, [r3, r2]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80014ca:	4b7b      	ldr	r3, [pc, #492]	; (80016b8 <MX_ADC_Init+0x254>)
 80014cc:	2201      	movs	r2, #1
 80014ce:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 80014d0:	4b79      	ldr	r3, [pc, #484]	; (80016b8 <MX_ADC_Init+0x254>)
 80014d2:	0018      	movs	r0, r3
 80014d4:	f001 fff8 	bl	80034c8 <HAL_ADC_Init>
 80014d8:	1e03      	subs	r3, r0, #0
 80014da:	d001      	beq.n	80014e0 <MX_ADC_Init+0x7c>
  {
    Error_Handler();
 80014dc:	f001 f82f 	bl	800253e <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80014e0:	1d3b      	adds	r3, r7, #4
 80014e2:	2200      	movs	r2, #0
 80014e4:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 80014e6:	1d3b      	adds	r3, r7, #4
 80014e8:	2280      	movs	r2, #128	; 0x80
 80014ea:	0152      	lsls	r2, r2, #5
 80014ec:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_55CYCLES_5;
 80014ee:	1d3b      	adds	r3, r7, #4
 80014f0:	2205      	movs	r2, #5
 80014f2:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80014f4:	1d3a      	adds	r2, r7, #4
 80014f6:	4b70      	ldr	r3, [pc, #448]	; (80016b8 <MX_ADC_Init+0x254>)
 80014f8:	0011      	movs	r1, r2
 80014fa:	0018      	movs	r0, r3
 80014fc:	f002 fab4 	bl	8003a68 <HAL_ADC_ConfigChannel>
 8001500:	1e03      	subs	r3, r0, #0
 8001502:	d001      	beq.n	8001508 <MX_ADC_Init+0xa4>
  {
    Error_Handler();
 8001504:	f001 f81b 	bl	800253e <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001508:	1d3b      	adds	r3, r7, #4
 800150a:	2201      	movs	r2, #1
 800150c:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800150e:	1d3a      	adds	r2, r7, #4
 8001510:	4b69      	ldr	r3, [pc, #420]	; (80016b8 <MX_ADC_Init+0x254>)
 8001512:	0011      	movs	r1, r2
 8001514:	0018      	movs	r0, r3
 8001516:	f002 faa7 	bl	8003a68 <HAL_ADC_ConfigChannel>
 800151a:	1e03      	subs	r3, r0, #0
 800151c:	d001      	beq.n	8001522 <MX_ADC_Init+0xbe>
  {
    Error_Handler();
 800151e:	f001 f80e 	bl	800253e <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8001522:	1d3b      	adds	r3, r7, #4
 8001524:	2202      	movs	r2, #2
 8001526:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001528:	1d3a      	adds	r2, r7, #4
 800152a:	4b63      	ldr	r3, [pc, #396]	; (80016b8 <MX_ADC_Init+0x254>)
 800152c:	0011      	movs	r1, r2
 800152e:	0018      	movs	r0, r3
 8001530:	f002 fa9a 	bl	8003a68 <HAL_ADC_ConfigChannel>
 8001534:	1e03      	subs	r3, r0, #0
 8001536:	d001      	beq.n	800153c <MX_ADC_Init+0xd8>
  {
    Error_Handler();
 8001538:	f001 f801 	bl	800253e <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800153c:	1d3b      	adds	r3, r7, #4
 800153e:	2203      	movs	r2, #3
 8001540:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001542:	1d3a      	adds	r2, r7, #4
 8001544:	4b5c      	ldr	r3, [pc, #368]	; (80016b8 <MX_ADC_Init+0x254>)
 8001546:	0011      	movs	r1, r2
 8001548:	0018      	movs	r0, r3
 800154a:	f002 fa8d 	bl	8003a68 <HAL_ADC_ConfigChannel>
 800154e:	1e03      	subs	r3, r0, #0
 8001550:	d001      	beq.n	8001556 <MX_ADC_Init+0xf2>
  {
    Error_Handler();
 8001552:	f000 fff4 	bl	800253e <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8001556:	1d3b      	adds	r3, r7, #4
 8001558:	2204      	movs	r2, #4
 800155a:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800155c:	1d3a      	adds	r2, r7, #4
 800155e:	4b56      	ldr	r3, [pc, #344]	; (80016b8 <MX_ADC_Init+0x254>)
 8001560:	0011      	movs	r1, r2
 8001562:	0018      	movs	r0, r3
 8001564:	f002 fa80 	bl	8003a68 <HAL_ADC_ConfigChannel>
 8001568:	1e03      	subs	r3, r0, #0
 800156a:	d001      	beq.n	8001570 <MX_ADC_Init+0x10c>
  {
    Error_Handler();
 800156c:	f000 ffe7 	bl	800253e <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8001570:	1d3b      	adds	r3, r7, #4
 8001572:	2205      	movs	r2, #5
 8001574:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001576:	1d3a      	adds	r2, r7, #4
 8001578:	4b4f      	ldr	r3, [pc, #316]	; (80016b8 <MX_ADC_Init+0x254>)
 800157a:	0011      	movs	r1, r2
 800157c:	0018      	movs	r0, r3
 800157e:	f002 fa73 	bl	8003a68 <HAL_ADC_ConfigChannel>
 8001582:	1e03      	subs	r3, r0, #0
 8001584:	d001      	beq.n	800158a <MX_ADC_Init+0x126>
  {
    Error_Handler();
 8001586:	f000 ffda 	bl	800253e <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 800158a:	1d3b      	adds	r3, r7, #4
 800158c:	2206      	movs	r2, #6
 800158e:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001590:	1d3a      	adds	r2, r7, #4
 8001592:	4b49      	ldr	r3, [pc, #292]	; (80016b8 <MX_ADC_Init+0x254>)
 8001594:	0011      	movs	r1, r2
 8001596:	0018      	movs	r0, r3
 8001598:	f002 fa66 	bl	8003a68 <HAL_ADC_ConfigChannel>
 800159c:	1e03      	subs	r3, r0, #0
 800159e:	d001      	beq.n	80015a4 <MX_ADC_Init+0x140>
  {
    Error_Handler();
 80015a0:	f000 ffcd 	bl	800253e <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 80015a4:	1d3b      	adds	r3, r7, #4
 80015a6:	2207      	movs	r2, #7
 80015a8:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80015aa:	1d3a      	adds	r2, r7, #4
 80015ac:	4b42      	ldr	r3, [pc, #264]	; (80016b8 <MX_ADC_Init+0x254>)
 80015ae:	0011      	movs	r1, r2
 80015b0:	0018      	movs	r0, r3
 80015b2:	f002 fa59 	bl	8003a68 <HAL_ADC_ConfigChannel>
 80015b6:	1e03      	subs	r3, r0, #0
 80015b8:	d001      	beq.n	80015be <MX_ADC_Init+0x15a>
  {
    Error_Handler();
 80015ba:	f000 ffc0 	bl	800253e <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 80015be:	1d3b      	adds	r3, r7, #4
 80015c0:	2208      	movs	r2, #8
 80015c2:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80015c4:	1d3a      	adds	r2, r7, #4
 80015c6:	4b3c      	ldr	r3, [pc, #240]	; (80016b8 <MX_ADC_Init+0x254>)
 80015c8:	0011      	movs	r1, r2
 80015ca:	0018      	movs	r0, r3
 80015cc:	f002 fa4c 	bl	8003a68 <HAL_ADC_ConfigChannel>
 80015d0:	1e03      	subs	r3, r0, #0
 80015d2:	d001      	beq.n	80015d8 <MX_ADC_Init+0x174>
  {
    Error_Handler();
 80015d4:	f000 ffb3 	bl	800253e <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 80015d8:	1d3b      	adds	r3, r7, #4
 80015da:	2209      	movs	r2, #9
 80015dc:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80015de:	1d3a      	adds	r2, r7, #4
 80015e0:	4b35      	ldr	r3, [pc, #212]	; (80016b8 <MX_ADC_Init+0x254>)
 80015e2:	0011      	movs	r1, r2
 80015e4:	0018      	movs	r0, r3
 80015e6:	f002 fa3f 	bl	8003a68 <HAL_ADC_ConfigChannel>
 80015ea:	1e03      	subs	r3, r0, #0
 80015ec:	d001      	beq.n	80015f2 <MX_ADC_Init+0x18e>
  {
    Error_Handler();
 80015ee:	f000 ffa6 	bl	800253e <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 80015f2:	1d3b      	adds	r3, r7, #4
 80015f4:	220a      	movs	r2, #10
 80015f6:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80015f8:	1d3a      	adds	r2, r7, #4
 80015fa:	4b2f      	ldr	r3, [pc, #188]	; (80016b8 <MX_ADC_Init+0x254>)
 80015fc:	0011      	movs	r1, r2
 80015fe:	0018      	movs	r0, r3
 8001600:	f002 fa32 	bl	8003a68 <HAL_ADC_ConfigChannel>
 8001604:	1e03      	subs	r3, r0, #0
 8001606:	d001      	beq.n	800160c <MX_ADC_Init+0x1a8>
  {
    Error_Handler();
 8001608:	f000 ff99 	bl	800253e <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 800160c:	1d3b      	adds	r3, r7, #4
 800160e:	220b      	movs	r2, #11
 8001610:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001612:	1d3a      	adds	r2, r7, #4
 8001614:	4b28      	ldr	r3, [pc, #160]	; (80016b8 <MX_ADC_Init+0x254>)
 8001616:	0011      	movs	r1, r2
 8001618:	0018      	movs	r0, r3
 800161a:	f002 fa25 	bl	8003a68 <HAL_ADC_ConfigChannel>
 800161e:	1e03      	subs	r3, r0, #0
 8001620:	d001      	beq.n	8001626 <MX_ADC_Init+0x1c2>
  {
    Error_Handler();
 8001622:	f000 ff8c 	bl	800253e <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8001626:	1d3b      	adds	r3, r7, #4
 8001628:	220c      	movs	r2, #12
 800162a:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800162c:	1d3a      	adds	r2, r7, #4
 800162e:	4b22      	ldr	r3, [pc, #136]	; (80016b8 <MX_ADC_Init+0x254>)
 8001630:	0011      	movs	r1, r2
 8001632:	0018      	movs	r0, r3
 8001634:	f002 fa18 	bl	8003a68 <HAL_ADC_ConfigChannel>
 8001638:	1e03      	subs	r3, r0, #0
 800163a:	d001      	beq.n	8001640 <MX_ADC_Init+0x1dc>
  {
    Error_Handler();
 800163c:	f000 ff7f 	bl	800253e <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8001640:	1d3b      	adds	r3, r7, #4
 8001642:	220d      	movs	r2, #13
 8001644:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001646:	1d3a      	adds	r2, r7, #4
 8001648:	4b1b      	ldr	r3, [pc, #108]	; (80016b8 <MX_ADC_Init+0x254>)
 800164a:	0011      	movs	r1, r2
 800164c:	0018      	movs	r0, r3
 800164e:	f002 fa0b 	bl	8003a68 <HAL_ADC_ConfigChannel>
 8001652:	1e03      	subs	r3, r0, #0
 8001654:	d001      	beq.n	800165a <MX_ADC_Init+0x1f6>
  {
    Error_Handler();
 8001656:	f000 ff72 	bl	800253e <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 800165a:	1d3b      	adds	r3, r7, #4
 800165c:	220e      	movs	r2, #14
 800165e:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001660:	1d3a      	adds	r2, r7, #4
 8001662:	4b15      	ldr	r3, [pc, #84]	; (80016b8 <MX_ADC_Init+0x254>)
 8001664:	0011      	movs	r1, r2
 8001666:	0018      	movs	r0, r3
 8001668:	f002 f9fe 	bl	8003a68 <HAL_ADC_ConfigChannel>
 800166c:	1e03      	subs	r3, r0, #0
 800166e:	d001      	beq.n	8001674 <MX_ADC_Init+0x210>
  {
    Error_Handler();
 8001670:	f000 ff65 	bl	800253e <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8001674:	1d3b      	adds	r3, r7, #4
 8001676:	220f      	movs	r2, #15
 8001678:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800167a:	1d3a      	adds	r2, r7, #4
 800167c:	4b0e      	ldr	r3, [pc, #56]	; (80016b8 <MX_ADC_Init+0x254>)
 800167e:	0011      	movs	r1, r2
 8001680:	0018      	movs	r0, r3
 8001682:	f002 f9f1 	bl	8003a68 <HAL_ADC_ConfigChannel>
 8001686:	1e03      	subs	r3, r0, #0
 8001688:	d001      	beq.n	800168e <MX_ADC_Init+0x22a>
  {
    Error_Handler();
 800168a:	f000 ff58 	bl	800253e <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 800168e:	1d3b      	adds	r3, r7, #4
 8001690:	2211      	movs	r2, #17
 8001692:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001694:	1d3a      	adds	r2, r7, #4
 8001696:	4b08      	ldr	r3, [pc, #32]	; (80016b8 <MX_ADC_Init+0x254>)
 8001698:	0011      	movs	r1, r2
 800169a:	0018      	movs	r0, r3
 800169c:	f002 f9e4 	bl	8003a68 <HAL_ADC_ConfigChannel>
 80016a0:	1e03      	subs	r3, r0, #0
 80016a2:	d001      	beq.n	80016a8 <MX_ADC_Init+0x244>
  {
    Error_Handler();
 80016a4:	f000 ff4b 	bl	800253e <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */
  HAL_ADCEx_Calibration_Start(&hadc);
 80016a8:	4b03      	ldr	r3, [pc, #12]	; (80016b8 <MX_ADC_Init+0x254>)
 80016aa:	0018      	movs	r0, r3
 80016ac:	f002 fc2c 	bl	8003f08 <HAL_ADCEx_Calibration_Start>
  /* USER CODE END ADC_Init 2 */

}
 80016b0:	46c0      	nop			; (mov r8, r8)
 80016b2:	46bd      	mov	sp, r7
 80016b4:	b004      	add	sp, #16
 80016b6:	bd80      	pop	{r7, pc}
 80016b8:	20000214 	.word	0x20000214
 80016bc:	40012400 	.word	0x40012400

080016c0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80016c4:	4b1e      	ldr	r3, [pc, #120]	; (8001740 <MX_SPI1_Init+0x80>)
 80016c6:	4a1f      	ldr	r2, [pc, #124]	; (8001744 <MX_SPI1_Init+0x84>)
 80016c8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80016ca:	4b1d      	ldr	r3, [pc, #116]	; (8001740 <MX_SPI1_Init+0x80>)
 80016cc:	2282      	movs	r2, #130	; 0x82
 80016ce:	0052      	lsls	r2, r2, #1
 80016d0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80016d2:	4b1b      	ldr	r3, [pc, #108]	; (8001740 <MX_SPI1_Init+0x80>)
 80016d4:	2200      	movs	r2, #0
 80016d6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80016d8:	4b19      	ldr	r3, [pc, #100]	; (8001740 <MX_SPI1_Init+0x80>)
 80016da:	22e0      	movs	r2, #224	; 0xe0
 80016dc:	00d2      	lsls	r2, r2, #3
 80016de:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80016e0:	4b17      	ldr	r3, [pc, #92]	; (8001740 <MX_SPI1_Init+0x80>)
 80016e2:	2202      	movs	r2, #2
 80016e4:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 80016e6:	4b16      	ldr	r3, [pc, #88]	; (8001740 <MX_SPI1_Init+0x80>)
 80016e8:	2201      	movs	r2, #1
 80016ea:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80016ec:	4b14      	ldr	r3, [pc, #80]	; (8001740 <MX_SPI1_Init+0x80>)
 80016ee:	2280      	movs	r2, #128	; 0x80
 80016f0:	0092      	lsls	r2, r2, #2
 80016f2:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 80016f4:	4b12      	ldr	r3, [pc, #72]	; (8001740 <MX_SPI1_Init+0x80>)
 80016f6:	2230      	movs	r2, #48	; 0x30
 80016f8:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80016fa:	4b11      	ldr	r3, [pc, #68]	; (8001740 <MX_SPI1_Init+0x80>)
 80016fc:	2200      	movs	r2, #0
 80016fe:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001700:	4b0f      	ldr	r3, [pc, #60]	; (8001740 <MX_SPI1_Init+0x80>)
 8001702:	2200      	movs	r2, #0
 8001704:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001706:	4b0e      	ldr	r3, [pc, #56]	; (8001740 <MX_SPI1_Init+0x80>)
 8001708:	2200      	movs	r2, #0
 800170a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 800170c:	4b0c      	ldr	r3, [pc, #48]	; (8001740 <MX_SPI1_Init+0x80>)
 800170e:	2207      	movs	r2, #7
 8001710:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001712:	4b0b      	ldr	r3, [pc, #44]	; (8001740 <MX_SPI1_Init+0x80>)
 8001714:	2200      	movs	r2, #0
 8001716:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8001718:	4b09      	ldr	r3, [pc, #36]	; (8001740 <MX_SPI1_Init+0x80>)
 800171a:	2200      	movs	r2, #0
 800171c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800171e:	4b08      	ldr	r3, [pc, #32]	; (8001740 <MX_SPI1_Init+0x80>)
 8001720:	0018      	movs	r0, r3
 8001722:	f005 fc51 	bl	8006fc8 <HAL_SPI_Init>
 8001726:	1e03      	subs	r3, r0, #0
 8001728:	d001      	beq.n	800172e <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800172a:	f000 ff08 	bl	800253e <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */
  DISP_CS_OFF;
 800172e:	4b06      	ldr	r3, [pc, #24]	; (8001748 <MX_SPI1_Init+0x88>)
 8001730:	2201      	movs	r2, #1
 8001732:	2140      	movs	r1, #64	; 0x40
 8001734:	0018      	movs	r0, r3
 8001736:	f002 ff80 	bl	800463a <HAL_GPIO_WritePin>
  /* USER CODE END SPI1_Init 2 */

}
 800173a:	46c0      	nop			; (mov r8, r8)
 800173c:	46bd      	mov	sp, r7
 800173e:	bd80      	pop	{r7, pc}
 8001740:	20000254 	.word	0x20000254
 8001744:	40013000 	.word	0x40013000
 8001748:	48000400 	.word	0x48000400

0800174c <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	b088      	sub	sp, #32
 8001750:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM14_Init 0 */

  /* USER CODE END TIM14_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001752:	1d3b      	adds	r3, r7, #4
 8001754:	0018      	movs	r0, r3
 8001756:	231c      	movs	r3, #28
 8001758:	001a      	movs	r2, r3
 800175a:	2100      	movs	r1, #0
 800175c:	f00c f8eb 	bl	800d936 <memset>

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8001760:	4b1d      	ldr	r3, [pc, #116]	; (80017d8 <MX_TIM14_Init+0x8c>)
 8001762:	4a1e      	ldr	r2, [pc, #120]	; (80017dc <MX_TIM14_Init+0x90>)
 8001764:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 16-1;
 8001766:	4b1c      	ldr	r3, [pc, #112]	; (80017d8 <MX_TIM14_Init+0x8c>)
 8001768:	220f      	movs	r2, #15
 800176a:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 800176c:	4b1a      	ldr	r3, [pc, #104]	; (80017d8 <MX_TIM14_Init+0x8c>)
 800176e:	2200      	movs	r2, #0
 8001770:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 10000-1;
 8001772:	4b19      	ldr	r3, [pc, #100]	; (80017d8 <MX_TIM14_Init+0x8c>)
 8001774:	4a1a      	ldr	r2, [pc, #104]	; (80017e0 <MX_TIM14_Init+0x94>)
 8001776:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001778:	4b17      	ldr	r3, [pc, #92]	; (80017d8 <MX_TIM14_Init+0x8c>)
 800177a:	2200      	movs	r2, #0
 800177c:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800177e:	4b16      	ldr	r3, [pc, #88]	; (80017d8 <MX_TIM14_Init+0x8c>)
 8001780:	2200      	movs	r2, #0
 8001782:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8001784:	4b14      	ldr	r3, [pc, #80]	; (80017d8 <MX_TIM14_Init+0x8c>)
 8001786:	0018      	movs	r0, r3
 8001788:	f006 f976 	bl	8007a78 <HAL_TIM_Base_Init>
 800178c:	1e03      	subs	r3, r0, #0
 800178e:	d001      	beq.n	8001794 <MX_TIM14_Init+0x48>
  {
    Error_Handler();
 8001790:	f000 fed5 	bl	800253e <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim14) != HAL_OK)
 8001794:	4b10      	ldr	r3, [pc, #64]	; (80017d8 <MX_TIM14_Init+0x8c>)
 8001796:	0018      	movs	r0, r3
 8001798:	f006 fa10 	bl	8007bbc <HAL_TIM_OC_Init>
 800179c:	1e03      	subs	r3, r0, #0
 800179e:	d001      	beq.n	80017a4 <MX_TIM14_Init+0x58>
  {
    Error_Handler();
 80017a0:	f000 fecd 	bl	800253e <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 80017a4:	1d3b      	adds	r3, r7, #4
 80017a6:	2200      	movs	r2, #0
 80017a8:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 80017aa:	1d3b      	adds	r3, r7, #4
 80017ac:	2200      	movs	r2, #0
 80017ae:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80017b0:	1d3b      	adds	r3, r7, #4
 80017b2:	2200      	movs	r2, #0
 80017b4:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80017b6:	1d3b      	adds	r3, r7, #4
 80017b8:	2200      	movs	r2, #0
 80017ba:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_OC_ConfigChannel(&htim14, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80017bc:	1d39      	adds	r1, r7, #4
 80017be:	4b06      	ldr	r3, [pc, #24]	; (80017d8 <MX_TIM14_Init+0x8c>)
 80017c0:	2200      	movs	r2, #0
 80017c2:	0018      	movs	r0, r3
 80017c4:	f006 fb68 	bl	8007e98 <HAL_TIM_OC_ConfigChannel>
 80017c8:	1e03      	subs	r3, r0, #0
 80017ca:	d001      	beq.n	80017d0 <MX_TIM14_Init+0x84>
  {
    Error_Handler();
 80017cc:	f000 feb7 	bl	800253e <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 80017d0:	46c0      	nop			; (mov r8, r8)
 80017d2:	46bd      	mov	sp, r7
 80017d4:	b008      	add	sp, #32
 80017d6:	bd80      	pop	{r7, pc}
 80017d8:	200002b8 	.word	0x200002b8
 80017dc:	40002000 	.word	0x40002000
 80017e0:	0000270f 	.word	0x0000270f

080017e4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80017e8:	4b14      	ldr	r3, [pc, #80]	; (800183c <MX_USART3_UART_Init+0x58>)
 80017ea:	4a15      	ldr	r2, [pc, #84]	; (8001840 <MX_USART3_UART_Init+0x5c>)
 80017ec:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 38400;
 80017ee:	4b13      	ldr	r3, [pc, #76]	; (800183c <MX_USART3_UART_Init+0x58>)
 80017f0:	2296      	movs	r2, #150	; 0x96
 80017f2:	0212      	lsls	r2, r2, #8
 80017f4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80017f6:	4b11      	ldr	r3, [pc, #68]	; (800183c <MX_USART3_UART_Init+0x58>)
 80017f8:	2200      	movs	r2, #0
 80017fa:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80017fc:	4b0f      	ldr	r3, [pc, #60]	; (800183c <MX_USART3_UART_Init+0x58>)
 80017fe:	2200      	movs	r2, #0
 8001800:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001802:	4b0e      	ldr	r3, [pc, #56]	; (800183c <MX_USART3_UART_Init+0x58>)
 8001804:	2200      	movs	r2, #0
 8001806:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001808:	4b0c      	ldr	r3, [pc, #48]	; (800183c <MX_USART3_UART_Init+0x58>)
 800180a:	220c      	movs	r2, #12
 800180c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800180e:	4b0b      	ldr	r3, [pc, #44]	; (800183c <MX_USART3_UART_Init+0x58>)
 8001810:	2200      	movs	r2, #0
 8001812:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001814:	4b09      	ldr	r3, [pc, #36]	; (800183c <MX_USART3_UART_Init+0x58>)
 8001816:	2200      	movs	r2, #0
 8001818:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800181a:	4b08      	ldr	r3, [pc, #32]	; (800183c <MX_USART3_UART_Init+0x58>)
 800181c:	2200      	movs	r2, #0
 800181e:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001820:	4b06      	ldr	r3, [pc, #24]	; (800183c <MX_USART3_UART_Init+0x58>)
 8001822:	2200      	movs	r2, #0
 8001824:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001826:	4b05      	ldr	r3, [pc, #20]	; (800183c <MX_USART3_UART_Init+0x58>)
 8001828:	0018      	movs	r0, r3
 800182a:	f006 fe39 	bl	80084a0 <HAL_UART_Init>
 800182e:	1e03      	subs	r3, r0, #0
 8001830:	d001      	beq.n	8001836 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8001832:	f000 fe84 	bl	800253e <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001836:	46c0      	nop			; (mov r8, r8)
 8001838:	46bd      	mov	sp, r7
 800183a:	bd80      	pop	{r7, pc}
 800183c:	20000300 	.word	0x20000300
 8001840:	40004800 	.word	0x40004800

08001844 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001844:	b590      	push	{r4, r7, lr}
 8001846:	b08b      	sub	sp, #44	; 0x2c
 8001848:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800184a:	2414      	movs	r4, #20
 800184c:	193b      	adds	r3, r7, r4
 800184e:	0018      	movs	r0, r3
 8001850:	2314      	movs	r3, #20
 8001852:	001a      	movs	r2, r3
 8001854:	2100      	movs	r1, #0
 8001856:	f00c f86e 	bl	800d936 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800185a:	4b74      	ldr	r3, [pc, #464]	; (8001a2c <MX_GPIO_Init+0x1e8>)
 800185c:	695a      	ldr	r2, [r3, #20]
 800185e:	4b73      	ldr	r3, [pc, #460]	; (8001a2c <MX_GPIO_Init+0x1e8>)
 8001860:	2180      	movs	r1, #128	; 0x80
 8001862:	03c9      	lsls	r1, r1, #15
 8001864:	430a      	orrs	r2, r1
 8001866:	615a      	str	r2, [r3, #20]
 8001868:	4b70      	ldr	r3, [pc, #448]	; (8001a2c <MX_GPIO_Init+0x1e8>)
 800186a:	695a      	ldr	r2, [r3, #20]
 800186c:	2380      	movs	r3, #128	; 0x80
 800186e:	03db      	lsls	r3, r3, #15
 8001870:	4013      	ands	r3, r2
 8001872:	613b      	str	r3, [r7, #16]
 8001874:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001876:	4b6d      	ldr	r3, [pc, #436]	; (8001a2c <MX_GPIO_Init+0x1e8>)
 8001878:	695a      	ldr	r2, [r3, #20]
 800187a:	4b6c      	ldr	r3, [pc, #432]	; (8001a2c <MX_GPIO_Init+0x1e8>)
 800187c:	2180      	movs	r1, #128	; 0x80
 800187e:	0309      	lsls	r1, r1, #12
 8001880:	430a      	orrs	r2, r1
 8001882:	615a      	str	r2, [r3, #20]
 8001884:	4b69      	ldr	r3, [pc, #420]	; (8001a2c <MX_GPIO_Init+0x1e8>)
 8001886:	695a      	ldr	r2, [r3, #20]
 8001888:	2380      	movs	r3, #128	; 0x80
 800188a:	031b      	lsls	r3, r3, #12
 800188c:	4013      	ands	r3, r2
 800188e:	60fb      	str	r3, [r7, #12]
 8001890:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001892:	4b66      	ldr	r3, [pc, #408]	; (8001a2c <MX_GPIO_Init+0x1e8>)
 8001894:	695a      	ldr	r2, [r3, #20]
 8001896:	4b65      	ldr	r3, [pc, #404]	; (8001a2c <MX_GPIO_Init+0x1e8>)
 8001898:	2180      	movs	r1, #128	; 0x80
 800189a:	0289      	lsls	r1, r1, #10
 800189c:	430a      	orrs	r2, r1
 800189e:	615a      	str	r2, [r3, #20]
 80018a0:	4b62      	ldr	r3, [pc, #392]	; (8001a2c <MX_GPIO_Init+0x1e8>)
 80018a2:	695a      	ldr	r2, [r3, #20]
 80018a4:	2380      	movs	r3, #128	; 0x80
 80018a6:	029b      	lsls	r3, r3, #10
 80018a8:	4013      	ands	r3, r2
 80018aa:	60bb      	str	r3, [r7, #8]
 80018ac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80018ae:	4b5f      	ldr	r3, [pc, #380]	; (8001a2c <MX_GPIO_Init+0x1e8>)
 80018b0:	695a      	ldr	r2, [r3, #20]
 80018b2:	4b5e      	ldr	r3, [pc, #376]	; (8001a2c <MX_GPIO_Init+0x1e8>)
 80018b4:	2180      	movs	r1, #128	; 0x80
 80018b6:	02c9      	lsls	r1, r1, #11
 80018b8:	430a      	orrs	r2, r1
 80018ba:	615a      	str	r2, [r3, #20]
 80018bc:	4b5b      	ldr	r3, [pc, #364]	; (8001a2c <MX_GPIO_Init+0x1e8>)
 80018be:	695a      	ldr	r2, [r3, #20]
 80018c0:	2380      	movs	r3, #128	; 0x80
 80018c2:	02db      	lsls	r3, r3, #11
 80018c4:	4013      	ands	r3, r2
 80018c6:	607b      	str	r3, [r7, #4]
 80018c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80018ca:	4b58      	ldr	r3, [pc, #352]	; (8001a2c <MX_GPIO_Init+0x1e8>)
 80018cc:	695a      	ldr	r2, [r3, #20]
 80018ce:	4b57      	ldr	r3, [pc, #348]	; (8001a2c <MX_GPIO_Init+0x1e8>)
 80018d0:	2180      	movs	r1, #128	; 0x80
 80018d2:	0349      	lsls	r1, r1, #13
 80018d4:	430a      	orrs	r2, r1
 80018d6:	615a      	str	r2, [r3, #20]
 80018d8:	4b54      	ldr	r3, [pc, #336]	; (8001a2c <MX_GPIO_Init+0x1e8>)
 80018da:	695a      	ldr	r2, [r3, #20]
 80018dc:	2380      	movs	r3, #128	; 0x80
 80018de:	035b      	lsls	r3, r3, #13
 80018e0:	4013      	ands	r3, r2
 80018e2:	603b      	str	r3, [r7, #0]
 80018e4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, _5V_BAT_OFF_Pin|SR_CLR_Pin|SR_RCLK_Pin|SR_OE_Pin
 80018e6:	4952      	ldr	r1, [pc, #328]	; (8001a30 <MX_GPIO_Init+0x1ec>)
 80018e8:	4b52      	ldr	r3, [pc, #328]	; (8001a34 <MX_GPIO_Init+0x1f0>)
 80018ea:	2200      	movs	r2, #0
 80018ec:	0018      	movs	r0, r3
 80018ee:	f002 fea4 	bl	800463a <HAL_GPIO_WritePin>
                          |DISP_CS_Pin|DISP_RST_Pin|BACKLIGHT_GREEN_Pin|BACKLIGHT_WHITE_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LOAD_MAX_Pin|LOAD_MIN_Pin|EM_HEATER_CTRL_Pin|HEATER_CTRL_Pin
 80018f2:	239e      	movs	r3, #158	; 0x9e
 80018f4:	015b      	lsls	r3, r3, #5
 80018f6:	4850      	ldr	r0, [pc, #320]	; (8001a38 <MX_GPIO_Init+0x1f4>)
 80018f8:	2200      	movs	r2, #0
 80018fa:	0019      	movs	r1, r3
 80018fc:	f002 fe9d 	bl	800463a <HAL_GPIO_WritePin>
                          |BUZZER_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BACKLIGHT_RED_GPIO_Port, BACKLIGHT_RED_Pin, GPIO_PIN_RESET);
 8001900:	2380      	movs	r3, #128	; 0x80
 8001902:	0219      	lsls	r1, r3, #8
 8001904:	2390      	movs	r3, #144	; 0x90
 8001906:	05db      	lsls	r3, r3, #23
 8001908:	2200      	movs	r2, #0
 800190a:	0018      	movs	r0, r3
 800190c:	f002 fe95 	bl	800463a <HAL_GPIO_WritePin>

  /*Configure GPIO pins : _5V_BAT_OFF_Pin SR_CLR_Pin SR_RCLK_Pin SR_OE_Pin
                           DISP_CS_Pin DISP_RST_Pin BACKLIGHT_GREEN_Pin BACKLIGHT_WHITE_Pin */
  GPIO_InitStruct.Pin = _5V_BAT_OFF_Pin|SR_CLR_Pin|SR_RCLK_Pin|SR_OE_Pin
 8001910:	193b      	adds	r3, r7, r4
 8001912:	4a47      	ldr	r2, [pc, #284]	; (8001a30 <MX_GPIO_Init+0x1ec>)
 8001914:	601a      	str	r2, [r3, #0]
                          |DISP_CS_Pin|DISP_RST_Pin|BACKLIGHT_GREEN_Pin|BACKLIGHT_WHITE_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001916:	193b      	adds	r3, r7, r4
 8001918:	2201      	movs	r2, #1
 800191a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800191c:	193b      	adds	r3, r7, r4
 800191e:	2200      	movs	r2, #0
 8001920:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001922:	193b      	adds	r3, r7, r4
 8001924:	2200      	movs	r2, #0
 8001926:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001928:	193b      	adds	r3, r7, r4
 800192a:	4a42      	ldr	r2, [pc, #264]	; (8001a34 <MX_GPIO_Init+0x1f0>)
 800192c:	0019      	movs	r1, r3
 800192e:	0010      	movs	r0, r2
 8001930:	f002 fcee 	bl	8004310 <HAL_GPIO_Init>

  /*Configure GPIO pin : HEATER_STATE_Pin */
  GPIO_InitStruct.Pin = HEATER_STATE_Pin;
 8001934:	0021      	movs	r1, r4
 8001936:	187b      	adds	r3, r7, r1
 8001938:	2280      	movs	r2, #128	; 0x80
 800193a:	0152      	lsls	r2, r2, #5
 800193c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800193e:	000c      	movs	r4, r1
 8001940:	193b      	adds	r3, r7, r4
 8001942:	2200      	movs	r2, #0
 8001944:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001946:	193b      	adds	r3, r7, r4
 8001948:	2200      	movs	r2, #0
 800194a:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(HEATER_STATE_GPIO_Port, &GPIO_InitStruct);
 800194c:	193b      	adds	r3, r7, r4
 800194e:	4a39      	ldr	r2, [pc, #228]	; (8001a34 <MX_GPIO_Init+0x1f0>)
 8001950:	0019      	movs	r1, r3
 8001952:	0010      	movs	r0, r2
 8001954:	f002 fcdc 	bl	8004310 <HAL_GPIO_Init>

  /*Configure GPIO pins : LOAD_MAX_Pin LOAD_MIN_Pin EM_HEATER_CTRL_Pin HEATER_CTRL_Pin
                           BUZZER_Pin */
  GPIO_InitStruct.Pin = LOAD_MAX_Pin|LOAD_MIN_Pin|EM_HEATER_CTRL_Pin|HEATER_CTRL_Pin
 8001958:	0021      	movs	r1, r4
 800195a:	187b      	adds	r3, r7, r1
 800195c:	229e      	movs	r2, #158	; 0x9e
 800195e:	0152      	lsls	r2, r2, #5
 8001960:	601a      	str	r2, [r3, #0]
                          |BUZZER_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001962:	000c      	movs	r4, r1
 8001964:	193b      	adds	r3, r7, r4
 8001966:	2201      	movs	r2, #1
 8001968:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800196a:	193b      	adds	r3, r7, r4
 800196c:	2200      	movs	r2, #0
 800196e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001970:	193b      	adds	r3, r7, r4
 8001972:	2200      	movs	r2, #0
 8001974:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001976:	193b      	adds	r3, r7, r4
 8001978:	4a2f      	ldr	r2, [pc, #188]	; (8001a38 <MX_GPIO_Init+0x1f4>)
 800197a:	0019      	movs	r1, r3
 800197c:	0010      	movs	r0, r2
 800197e:	f002 fcc7 	bl	8004310 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON_1_Pin BUTTON_0_Pin */
  GPIO_InitStruct.Pin = BUTTON_1_Pin|BUTTON_0_Pin;
 8001982:	193b      	adds	r3, r7, r4
 8001984:	22c0      	movs	r2, #192	; 0xc0
 8001986:	0092      	lsls	r2, r2, #2
 8001988:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800198a:	193b      	adds	r3, r7, r4
 800198c:	2288      	movs	r2, #136	; 0x88
 800198e:	0352      	lsls	r2, r2, #13
 8001990:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001992:	193b      	adds	r3, r7, r4
 8001994:	2202      	movs	r2, #2
 8001996:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001998:	193a      	adds	r2, r7, r4
 800199a:	2390      	movs	r3, #144	; 0x90
 800199c:	05db      	lsls	r3, r3, #23
 800199e:	0011      	movs	r1, r2
 80019a0:	0018      	movs	r0, r3
 80019a2:	f002 fcb5 	bl	8004310 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80019a6:	193b      	adds	r3, r7, r4
 80019a8:	2280      	movs	r2, #128	; 0x80
 80019aa:	00d2      	lsls	r2, r2, #3
 80019ac:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80019ae:	193b      	adds	r3, r7, r4
 80019b0:	2200      	movs	r2, #0
 80019b2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019b4:	193b      	adds	r3, r7, r4
 80019b6:	2200      	movs	r2, #0
 80019b8:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80019ba:	193a      	adds	r2, r7, r4
 80019bc:	2390      	movs	r3, #144	; 0x90
 80019be:	05db      	lsls	r3, r3, #23
 80019c0:	0011      	movs	r1, r2
 80019c2:	0018      	movs	r0, r3
 80019c4:	f002 fca4 	bl	8004310 <HAL_GPIO_Init>

  /*Configure GPIO pin : BACKLIGHT_RED_Pin */
  GPIO_InitStruct.Pin = BACKLIGHT_RED_Pin;
 80019c8:	0021      	movs	r1, r4
 80019ca:	187b      	adds	r3, r7, r1
 80019cc:	2280      	movs	r2, #128	; 0x80
 80019ce:	0212      	lsls	r2, r2, #8
 80019d0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019d2:	000c      	movs	r4, r1
 80019d4:	193b      	adds	r3, r7, r4
 80019d6:	2201      	movs	r2, #1
 80019d8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019da:	193b      	adds	r3, r7, r4
 80019dc:	2200      	movs	r2, #0
 80019de:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019e0:	193b      	adds	r3, r7, r4
 80019e2:	2200      	movs	r2, #0
 80019e4:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(BACKLIGHT_RED_GPIO_Port, &GPIO_InitStruct);
 80019e6:	193a      	adds	r2, r7, r4
 80019e8:	2390      	movs	r3, #144	; 0x90
 80019ea:	05db      	lsls	r3, r3, #23
 80019ec:	0011      	movs	r1, r2
 80019ee:	0018      	movs	r0, r3
 80019f0:	f002 fc8e 	bl	8004310 <HAL_GPIO_Init>

  /*Configure GPIO pin : CONNECTION_ERR_Pin */
  GPIO_InitStruct.Pin = CONNECTION_ERR_Pin;
 80019f4:	193b      	adds	r3, r7, r4
 80019f6:	2204      	movs	r2, #4
 80019f8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80019fa:	193b      	adds	r3, r7, r4
 80019fc:	2200      	movs	r2, #0
 80019fe:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a00:	193b      	adds	r3, r7, r4
 8001a02:	2200      	movs	r2, #0
 8001a04:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(CONNECTION_ERR_GPIO_Port, &GPIO_InitStruct);
 8001a06:	193b      	adds	r3, r7, r4
 8001a08:	4a0c      	ldr	r2, [pc, #48]	; (8001a3c <MX_GPIO_Init+0x1f8>)
 8001a0a:	0019      	movs	r1, r3
 8001a0c:	0010      	movs	r0, r2
 8001a0e:	f002 fc7f 	bl	8004310 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 8001a12:	2200      	movs	r2, #0
 8001a14:	2100      	movs	r1, #0
 8001a16:	2007      	movs	r0, #7
 8001a18:	f002 fbca 	bl	80041b0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8001a1c:	2007      	movs	r0, #7
 8001a1e:	f002 fbdc 	bl	80041da <HAL_NVIC_EnableIRQ>

}
 8001a22:	46c0      	nop			; (mov r8, r8)
 8001a24:	46bd      	mov	sp, r7
 8001a26:	b00b      	add	sp, #44	; 0x2c
 8001a28:	bd90      	pop	{r4, r7, pc}
 8001a2a:	46c0      	nop			; (mov r8, r8)
 8001a2c:	40021000 	.word	0x40021000
 8001a30:	0000e3c4 	.word	0x0000e3c4
 8001a34:	48000400 	.word	0x48000400
 8001a38:	48000800 	.word	0x48000800
 8001a3c:	48000c00 	.word	0x48000c00

08001a40 <clkHandler>:

/* USER CODE BEGIN 4 */

//_____Hodiny_____//
static void clkHandler(void)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	af00      	add	r7, sp, #0
	//___nulování všech flagů___//
	flags.time.ten_ms = 0;
 8001a44:	4b3b      	ldr	r3, [pc, #236]	; (8001b34 <clkHandler+0xf4>)
 8001a46:	781a      	ldrb	r2, [r3, #0]
 8001a48:	2101      	movs	r1, #1
 8001a4a:	438a      	bics	r2, r1
 8001a4c:	701a      	strb	r2, [r3, #0]
	flags.time.sec	= 0;
 8001a4e:	4b39      	ldr	r3, [pc, #228]	; (8001b34 <clkHandler+0xf4>)
 8001a50:	781a      	ldrb	r2, [r3, #0]
 8001a52:	2102      	movs	r1, #2
 8001a54:	438a      	bics	r2, r1
 8001a56:	701a      	strb	r2, [r3, #0]
	flags.time.min	= 0;
 8001a58:	4b36      	ldr	r3, [pc, #216]	; (8001b34 <clkHandler+0xf4>)
 8001a5a:	781a      	ldrb	r2, [r3, #0]
 8001a5c:	2104      	movs	r1, #4
 8001a5e:	438a      	bics	r2, r1
 8001a60:	701a      	strb	r2, [r3, #0]
	flags.time.hour	= 0;
 8001a62:	4b34      	ldr	r3, [pc, #208]	; (8001b34 <clkHandler+0xf4>)
 8001a64:	781a      	ldrb	r2, [r3, #0]
 8001a66:	2108      	movs	r1, #8
 8001a68:	438a      	bics	r2, r1
 8001a6a:	701a      	strb	r2, [r3, #0]

	sysTime[SYSTIME_TEN_MS]++;	//uplynulo dalších 10 ms
 8001a6c:	4b32      	ldr	r3, [pc, #200]	; (8001b38 <clkHandler+0xf8>)
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	1c5a      	adds	r2, r3, #1
 8001a72:	4b31      	ldr	r3, [pc, #196]	; (8001b38 <clkHandler+0xf8>)
 8001a74:	601a      	str	r2, [r3, #0]

#ifdef __DEBUG_FAST__
	if((sysTime[SYSTIME_TEN_MS] % 10) == 0)	//0,1 s
#else
	if((sysTime[SYSTIME_TEN_MS] % 100) == 0)	//1 s
 8001a76:	4b30      	ldr	r3, [pc, #192]	; (8001b38 <clkHandler+0xf8>)
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	2164      	movs	r1, #100	; 0x64
 8001a7c:	0018      	movs	r0, r3
 8001a7e:	f7fe fbdb 	bl	8000238 <__aeabi_uidivmod>
 8001a82:	1e0b      	subs	r3, r1, #0
 8001a84:	d109      	bne.n	8001a9a <clkHandler+0x5a>
#endif
	{
		sysTime[SYSTIME_SEC]++;
 8001a86:	4b2c      	ldr	r3, [pc, #176]	; (8001b38 <clkHandler+0xf8>)
 8001a88:	685b      	ldr	r3, [r3, #4]
 8001a8a:	1c5a      	adds	r2, r3, #1
 8001a8c:	4b2a      	ldr	r3, [pc, #168]	; (8001b38 <clkHandler+0xf8>)
 8001a8e:	605a      	str	r2, [r3, #4]
		flags.time.sec = 1;
 8001a90:	4b28      	ldr	r3, [pc, #160]	; (8001b34 <clkHandler+0xf4>)
 8001a92:	781a      	ldrb	r2, [r3, #0]
 8001a94:	2102      	movs	r1, #2
 8001a96:	430a      	orrs	r2, r1
 8001a98:	701a      	strb	r2, [r3, #0]
	}

	if(flags.time.sec)	//Uplynula 1 s
 8001a9a:	4b26      	ldr	r3, [pc, #152]	; (8001b34 <clkHandler+0xf4>)
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	079b      	lsls	r3, r3, #30
 8001aa0:	0fdb      	lsrs	r3, r3, #31
 8001aa2:	b2db      	uxtb	r3, r3
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d042      	beq.n	8001b2e <clkHandler+0xee>
	{
		if((sysTime[SYSTIME_SEC] % 60) == 0 && sysTime[SYSTIME_TEN_MS] != 0)	//1 min
 8001aa8:	4b23      	ldr	r3, [pc, #140]	; (8001b38 <clkHandler+0xf8>)
 8001aaa:	685b      	ldr	r3, [r3, #4]
 8001aac:	213c      	movs	r1, #60	; 0x3c
 8001aae:	0018      	movs	r0, r3
 8001ab0:	f7fe fbc2 	bl	8000238 <__aeabi_uidivmod>
 8001ab4:	1e0b      	subs	r3, r1, #0
 8001ab6:	d110      	bne.n	8001ada <clkHandler+0x9a>
 8001ab8:	4b1f      	ldr	r3, [pc, #124]	; (8001b38 <clkHandler+0xf8>)
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d00c      	beq.n	8001ada <clkHandler+0x9a>
		{
			sysTime[SYSTIME_SEC] = 0;
 8001ac0:	4b1d      	ldr	r3, [pc, #116]	; (8001b38 <clkHandler+0xf8>)
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	605a      	str	r2, [r3, #4]
			sysTime[SYSTIME_MIN]++;
 8001ac6:	4b1c      	ldr	r3, [pc, #112]	; (8001b38 <clkHandler+0xf8>)
 8001ac8:	689b      	ldr	r3, [r3, #8]
 8001aca:	1c5a      	adds	r2, r3, #1
 8001acc:	4b1a      	ldr	r3, [pc, #104]	; (8001b38 <clkHandler+0xf8>)
 8001ace:	609a      	str	r2, [r3, #8]
			flags.time.min = 1;
 8001ad0:	4b18      	ldr	r3, [pc, #96]	; (8001b34 <clkHandler+0xf4>)
 8001ad2:	781a      	ldrb	r2, [r3, #0]
 8001ad4:	2104      	movs	r1, #4
 8001ad6:	430a      	orrs	r2, r1
 8001ad8:	701a      	strb	r2, [r3, #0]
		}

		if(flags.time.min)	//Uplynula 1 min
 8001ada:	4b16      	ldr	r3, [pc, #88]	; (8001b34 <clkHandler+0xf4>)
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	075b      	lsls	r3, r3, #29
 8001ae0:	0fdb      	lsrs	r3, r3, #31
 8001ae2:	b2db      	uxtb	r3, r3
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d022      	beq.n	8001b2e <clkHandler+0xee>
		{
			if((sysTime[SYSTIME_MIN] % 60) == 0 && sysTime[SYSTIME_TEN_MS] != 0)	//1 min
 8001ae8:	4b13      	ldr	r3, [pc, #76]	; (8001b38 <clkHandler+0xf8>)
 8001aea:	689b      	ldr	r3, [r3, #8]
 8001aec:	213c      	movs	r1, #60	; 0x3c
 8001aee:	0018      	movs	r0, r3
 8001af0:	f7fe fba2 	bl	8000238 <__aeabi_uidivmod>
 8001af4:	1e0b      	subs	r3, r1, #0
 8001af6:	d11a      	bne.n	8001b2e <clkHandler+0xee>
 8001af8:	4b0f      	ldr	r3, [pc, #60]	; (8001b38 <clkHandler+0xf8>)
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d016      	beq.n	8001b2e <clkHandler+0xee>
			{

				sysTime[SYSTIME_SEC] = 0;
 8001b00:	4b0d      	ldr	r3, [pc, #52]	; (8001b38 <clkHandler+0xf8>)
 8001b02:	2200      	movs	r2, #0
 8001b04:	605a      	str	r2, [r3, #4]
				sysTime[SYSTIME_MIN] = 0;
 8001b06:	4b0c      	ldr	r3, [pc, #48]	; (8001b38 <clkHandler+0xf8>)
 8001b08:	2200      	movs	r2, #0
 8001b0a:	609a      	str	r2, [r3, #8]
				sysTime[SYSTIME_HOUR]++;
 8001b0c:	4b0a      	ldr	r3, [pc, #40]	; (8001b38 <clkHandler+0xf8>)
 8001b0e:	68db      	ldr	r3, [r3, #12]
 8001b10:	1c5a      	adds	r2, r3, #1
 8001b12:	4b09      	ldr	r3, [pc, #36]	; (8001b38 <clkHandler+0xf8>)
 8001b14:	60da      	str	r2, [r3, #12]
				flags.time.hour = 1;
 8001b16:	4b07      	ldr	r3, [pc, #28]	; (8001b34 <clkHandler+0xf4>)
 8001b18:	781a      	ldrb	r2, [r3, #0]
 8001b1a:	2108      	movs	r1, #8
 8001b1c:	430a      	orrs	r2, r1
 8001b1e:	701a      	strb	r2, [r3, #0]
				if(sysTime[SYSTIME_HOUR] >= 23)
 8001b20:	4b05      	ldr	r3, [pc, #20]	; (8001b38 <clkHandler+0xf8>)
 8001b22:	68db      	ldr	r3, [r3, #12]
 8001b24:	2b16      	cmp	r3, #22
 8001b26:	d902      	bls.n	8001b2e <clkHandler+0xee>
					sysTime[SYSTIME_HOUR] = 0;
 8001b28:	4b03      	ldr	r3, [pc, #12]	; (8001b38 <clkHandler+0xf8>)
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	60da      	str	r2, [r3, #12]
		char timeStamp[30];
		sprintf(timeStamp, "%d : %d : %d\n", sysTime[SYSTIME_HOUR], sysTime[SYSTIME_MIN], sysTime[SYSTIME_SEC]);
		pushStr(USB_Tx_Buffer, timeStamp, strlen(timeStamp));	//odešli �?as
	}
#endif
}
 8001b2e:	46c0      	nop			; (mov r8, r8)
 8001b30:	46bd      	mov	sp, r7
 8001b32:	bd80      	pop	{r7, pc}
 8001b34:	200003d8 	.word	0x200003d8
 8001b38:	200003c8 	.word	0x200003c8

08001b3c <buttonDebounce>:

//_____Debounce tla�?ítek_____//
static void buttonDebounce(void)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	af00      	add	r7, sp, #0
	//___nulování flagů___//
	flags.buttons.butt0_ver = 0;
 8001b40:	4b3f      	ldr	r3, [pc, #252]	; (8001c40 <buttonDebounce+0x104>)
 8001b42:	791a      	ldrb	r2, [r3, #4]
 8001b44:	2102      	movs	r1, #2
 8001b46:	438a      	bics	r2, r1
 8001b48:	711a      	strb	r2, [r3, #4]
	flags.buttons.butt1_ver = 0;
 8001b4a:	4b3d      	ldr	r3, [pc, #244]	; (8001c40 <buttonDebounce+0x104>)
 8001b4c:	791a      	ldrb	r2, [r3, #4]
 8001b4e:	2108      	movs	r1, #8
 8001b50:	438a      	bics	r2, r1
 8001b52:	711a      	strb	r2, [r3, #4]

	if(flags.buttons.butt0_int)	//interrupt tla�?ítka 0
 8001b54:	4b3a      	ldr	r3, [pc, #232]	; (8001c40 <buttonDebounce+0x104>)
 8001b56:	685b      	ldr	r3, [r3, #4]
 8001b58:	07db      	lsls	r3, r3, #31
 8001b5a:	0fdb      	lsrs	r3, r3, #31
 8001b5c:	b2db      	uxtb	r3, r3
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d031      	beq.n	8001bc6 <buttonDebounce+0x8a>
	{
		if(HAL_GPIO_ReadPin(BUTTON_0_GPIO_Port,BUTTON_0_Pin) == GPIO_PIN_SET)
 8001b62:	2380      	movs	r3, #128	; 0x80
 8001b64:	009a      	lsls	r2, r3, #2
 8001b66:	2390      	movs	r3, #144	; 0x90
 8001b68:	05db      	lsls	r3, r3, #23
 8001b6a:	0011      	movs	r1, r2
 8001b6c:	0018      	movs	r0, r3
 8001b6e:	f002 fd47 	bl	8004600 <HAL_GPIO_ReadPin>
 8001b72:	0003      	movs	r3, r0
 8001b74:	2b01      	cmp	r3, #1
 8001b76:	d107      	bne.n	8001b88 <buttonDebounce+0x4c>
		{
			button0_Debounce++;
 8001b78:	4b32      	ldr	r3, [pc, #200]	; (8001c44 <buttonDebounce+0x108>)
 8001b7a:	781b      	ldrb	r3, [r3, #0]
 8001b7c:	b2db      	uxtb	r3, r3
 8001b7e:	3301      	adds	r3, #1
 8001b80:	b2da      	uxtb	r2, r3
 8001b82:	4b30      	ldr	r3, [pc, #192]	; (8001c44 <buttonDebounce+0x108>)
 8001b84:	701a      	strb	r2, [r3, #0]
 8001b86:	e007      	b.n	8001b98 <buttonDebounce+0x5c>
		}
		else	//pin tla�?ítka na Low -> šlo o zákmit
		{
			button0_Debounce = 0;
 8001b88:	4b2e      	ldr	r3, [pc, #184]	; (8001c44 <buttonDebounce+0x108>)
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	701a      	strb	r2, [r3, #0]
			flags.buttons.butt0_int = 0;
 8001b8e:	4b2c      	ldr	r3, [pc, #176]	; (8001c40 <buttonDebounce+0x104>)
 8001b90:	791a      	ldrb	r2, [r3, #4]
 8001b92:	2101      	movs	r1, #1
 8001b94:	438a      	bics	r2, r1
 8001b96:	711a      	strb	r2, [r3, #4]
		}
		if(button0_Debounce >= 5)	//pin tla�?ítka na High 5*10 ms -> ustálený stisk
 8001b98:	4b2a      	ldr	r3, [pc, #168]	; (8001c44 <buttonDebounce+0x108>)
 8001b9a:	781b      	ldrb	r3, [r3, #0]
 8001b9c:	b2db      	uxtb	r3, r3
 8001b9e:	2b04      	cmp	r3, #4
 8001ba0:	d911      	bls.n	8001bc6 <buttonDebounce+0x8a>
		{
			flags.buttons.butt0_ver = 1;
 8001ba2:	4b27      	ldr	r3, [pc, #156]	; (8001c40 <buttonDebounce+0x104>)
 8001ba4:	791a      	ldrb	r2, [r3, #4]
 8001ba6:	2102      	movs	r1, #2
 8001ba8:	430a      	orrs	r2, r1
 8001baa:	711a      	strb	r2, [r3, #4]
			flags.buttons.butt0_int = 0;
 8001bac:	4b24      	ldr	r3, [pc, #144]	; (8001c40 <buttonDebounce+0x104>)
 8001bae:	791a      	ldrb	r2, [r3, #4]
 8001bb0:	2101      	movs	r1, #1
 8001bb2:	438a      	bics	r2, r1
 8001bb4:	711a      	strb	r2, [r3, #4]
			button0_Debounce = 0;
 8001bb6:	4b23      	ldr	r3, [pc, #140]	; (8001c44 <buttonDebounce+0x108>)
 8001bb8:	2200      	movs	r2, #0
 8001bba:	701a      	strb	r2, [r3, #0]

			flags.ui.active = 1;
 8001bbc:	4b20      	ldr	r3, [pc, #128]	; (8001c40 <buttonDebounce+0x104>)
 8001bbe:	7c1a      	ldrb	r2, [r3, #16]
 8001bc0:	2120      	movs	r1, #32
 8001bc2:	430a      	orrs	r2, r1
 8001bc4:	741a      	strb	r2, [r3, #16]
			//writeChar('a', 1, 5);
#endif
		}
	}

	if(flags.buttons.butt1_int)	//interrupt tla�?ítka 1
 8001bc6:	4b1e      	ldr	r3, [pc, #120]	; (8001c40 <buttonDebounce+0x104>)
 8001bc8:	685b      	ldr	r3, [r3, #4]
 8001bca:	075b      	lsls	r3, r3, #29
 8001bcc:	0fdb      	lsrs	r3, r3, #31
 8001bce:	b2db      	uxtb	r3, r3
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d031      	beq.n	8001c38 <buttonDebounce+0xfc>
	{
		if(HAL_GPIO_ReadPin(BUTTON_1_GPIO_Port,BUTTON_1_Pin) == GPIO_PIN_SET)
 8001bd4:	2380      	movs	r3, #128	; 0x80
 8001bd6:	005a      	lsls	r2, r3, #1
 8001bd8:	2390      	movs	r3, #144	; 0x90
 8001bda:	05db      	lsls	r3, r3, #23
 8001bdc:	0011      	movs	r1, r2
 8001bde:	0018      	movs	r0, r3
 8001be0:	f002 fd0e 	bl	8004600 <HAL_GPIO_ReadPin>
 8001be4:	0003      	movs	r3, r0
 8001be6:	2b01      	cmp	r3, #1
 8001be8:	d107      	bne.n	8001bfa <buttonDebounce+0xbe>
		{
			button1_Debounce++;
 8001bea:	4b17      	ldr	r3, [pc, #92]	; (8001c48 <buttonDebounce+0x10c>)
 8001bec:	781b      	ldrb	r3, [r3, #0]
 8001bee:	b2db      	uxtb	r3, r3
 8001bf0:	3301      	adds	r3, #1
 8001bf2:	b2da      	uxtb	r2, r3
 8001bf4:	4b14      	ldr	r3, [pc, #80]	; (8001c48 <buttonDebounce+0x10c>)
 8001bf6:	701a      	strb	r2, [r3, #0]
 8001bf8:	e007      	b.n	8001c0a <buttonDebounce+0xce>
		}
		else	//pin tla�?ítka na Low -> šlo o zákmit
		{
			button1_Debounce = 0;
 8001bfa:	4b13      	ldr	r3, [pc, #76]	; (8001c48 <buttonDebounce+0x10c>)
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	701a      	strb	r2, [r3, #0]
			flags.buttons.butt1_int = 0;
 8001c00:	4b0f      	ldr	r3, [pc, #60]	; (8001c40 <buttonDebounce+0x104>)
 8001c02:	791a      	ldrb	r2, [r3, #4]
 8001c04:	2104      	movs	r1, #4
 8001c06:	438a      	bics	r2, r1
 8001c08:	711a      	strb	r2, [r3, #4]
		}
		if(button1_Debounce >= 5)	//pin tla�?ítka na High 5*10 ms -> ustálený stisk
 8001c0a:	4b0f      	ldr	r3, [pc, #60]	; (8001c48 <buttonDebounce+0x10c>)
 8001c0c:	781b      	ldrb	r3, [r3, #0]
 8001c0e:	b2db      	uxtb	r3, r3
 8001c10:	2b04      	cmp	r3, #4
 8001c12:	d911      	bls.n	8001c38 <buttonDebounce+0xfc>
		{
			flags.buttons.butt1_ver = 1;
 8001c14:	4b0a      	ldr	r3, [pc, #40]	; (8001c40 <buttonDebounce+0x104>)
 8001c16:	791a      	ldrb	r2, [r3, #4]
 8001c18:	2108      	movs	r1, #8
 8001c1a:	430a      	orrs	r2, r1
 8001c1c:	711a      	strb	r2, [r3, #4]
			flags.buttons.butt1_int = 0;
 8001c1e:	4b08      	ldr	r3, [pc, #32]	; (8001c40 <buttonDebounce+0x104>)
 8001c20:	791a      	ldrb	r2, [r3, #4]
 8001c22:	2104      	movs	r1, #4
 8001c24:	438a      	bics	r2, r1
 8001c26:	711a      	strb	r2, [r3, #4]
			button1_Debounce = 0;
 8001c28:	4b07      	ldr	r3, [pc, #28]	; (8001c48 <buttonDebounce+0x10c>)
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	701a      	strb	r2, [r3, #0]

			flags.ui.active = 1;
 8001c2e:	4b04      	ldr	r3, [pc, #16]	; (8001c40 <buttonDebounce+0x104>)
 8001c30:	7c1a      	ldrb	r2, [r3, #16]
 8001c32:	2120      	movs	r1, #32
 8001c34:	430a      	orrs	r2, r1
 8001c36:	741a      	strb	r2, [r3, #16]
#ifdef __DEBUG_BUTT__
			HAL_GPIO_TogglePin(BACKLIGHT_RED_GPIO_Port, BACKLIGHT_RED_Pin);
#endif
		}
	}
}
 8001c38:	46c0      	nop			; (mov r8, r8)
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	bd80      	pop	{r7, pc}
 8001c3e:	46c0      	nop			; (mov r8, r8)
 8001c40:	200003d8 	.word	0x200003d8
 8001c44:	200003f4 	.word	0x200003f4
 8001c48:	200003f5 	.word	0x200003f5

08001c4c <dispHandler>:

//_____Obsluha výtisků textu na displej_____//
static void dispHandler()
{
 8001c4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001c4e:	b0bd      	sub	sp, #244	; 0xf4
 8001c50:	af02      	add	r7, sp, #8
	char emptyString[] = "                ";
 8001c52:	25cc      	movs	r5, #204	; 0xcc
 8001c54:	197b      	adds	r3, r7, r5
 8001c56:	4ada      	ldr	r2, [pc, #872]	; (8001fc0 <dispHandler+0x374>)
 8001c58:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001c5a:	c313      	stmia	r3!, {r0, r1, r4}
 8001c5c:	6811      	ldr	r1, [r2, #0]
 8001c5e:	6019      	str	r1, [r3, #0]
 8001c60:	7912      	ldrb	r2, [r2, #4]
 8001c62:	711a      	strb	r2, [r3, #4]
	char* strings[4] = {emptyString};
 8001c64:	24bc      	movs	r4, #188	; 0xbc
 8001c66:	193b      	adds	r3, r7, r4
 8001c68:	0018      	movs	r0, r3
 8001c6a:	2310      	movs	r3, #16
 8001c6c:	001a      	movs	r2, r3
 8001c6e:	2100      	movs	r1, #0
 8001c70:	f00b fe61 	bl	800d936 <memset>
 8001c74:	193b      	adds	r3, r7, r4
 8001c76:	197a      	adds	r2, r7, r5
 8001c78:	601a      	str	r2, [r3, #0]
	ALIGN align[4] = {CENTER};
 8001c7a:	25b8      	movs	r5, #184	; 0xb8
 8001c7c:	197b      	adds	r3, r7, r5
 8001c7e:	2200      	movs	r2, #0
 8001c80:	601a      	str	r2, [r3, #0]
 8001c82:	197b      	adds	r3, r7, r5
 8001c84:	2202      	movs	r2, #2
 8001c86:	701a      	strb	r2, [r3, #0]
		strings[3] = ADC_value;
		writeRow(strings[3], strlen(strings[3]), 3, align[3]);
	}
#endif

	if(flags.testProgress && !flags.instructions.stopRequest)
 8001c88:	4bce      	ldr	r3, [pc, #824]	; (8001fc4 <dispHandler+0x378>)
 8001c8a:	699b      	ldr	r3, [r3, #24]
 8001c8c:	079b      	lsls	r3, r3, #30
 8001c8e:	0fdb      	lsrs	r3, r3, #31
 8001c90:	b2db      	uxtb	r3, r3
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d100      	bne.n	8001c98 <dispHandler+0x4c>
 8001c96:	e0f6      	b.n	8001e86 <dispHandler+0x23a>
 8001c98:	4bca      	ldr	r3, [pc, #808]	; (8001fc4 <dispHandler+0x378>)
 8001c9a:	68db      	ldr	r3, [r3, #12]
 8001c9c:	079b      	lsls	r3, r3, #30
 8001c9e:	0fdb      	lsrs	r3, r3, #31
 8001ca0:	b2db      	uxtb	r3, r3
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d000      	beq.n	8001ca8 <dispHandler+0x5c>
 8001ca6:	e0ee      	b.n	8001e86 <dispHandler+0x23a>
	{
		if(currentPhase() != WAITING)
 8001ca8:	f001 f840 	bl	8002d2c <currentPhase>
 8001cac:	1e03      	subs	r3, r0, #0
 8001cae:	d010      	beq.n	8001cd2 <dispHandler+0x86>
		{
			char supplyInTestingNum[6];
			sprintf(supplyInTestingNum, "%d/%d", supplyToTest+1, regCount);
 8001cb0:	4bc5      	ldr	r3, [pc, #788]	; (8001fc8 <dispHandler+0x37c>)
 8001cb2:	781b      	ldrb	r3, [r3, #0]
 8001cb4:	b2db      	uxtb	r3, r3
 8001cb6:	1c5a      	adds	r2, r3, #1
 8001cb8:	4bc4      	ldr	r3, [pc, #784]	; (8001fcc <dispHandler+0x380>)
 8001cba:	781b      	ldrb	r3, [r3, #0]
 8001cbc:	49c4      	ldr	r1, [pc, #784]	; (8001fd0 <dispHandler+0x384>)
 8001cbe:	26b0      	movs	r6, #176	; 0xb0
 8001cc0:	19b8      	adds	r0, r7, r6
 8001cc2:	f00b ff35 	bl	800db30 <siprintf>

			strings[0] = supplyInTestingNum;
 8001cc6:	193b      	adds	r3, r7, r4
 8001cc8:	19ba      	adds	r2, r7, r6
 8001cca:	601a      	str	r2, [r3, #0]
			align[0] = LEFT;
 8001ccc:	197b      	adds	r3, r7, r5
 8001cce:	2200      	movs	r2, #0
 8001cd0:	701a      	strb	r2, [r3, #0]
		}

		switch(currentPhase())
 8001cd2:	f001 f82b 	bl	8002d2c <currentPhase>
 8001cd6:	0003      	movs	r3, r0
 8001cd8:	2b06      	cmp	r3, #6
 8001cda:	d900      	bls.n	8001cde <dispHandler+0x92>
 8001cdc:	e087      	b.n	8001dee <dispHandler+0x1a2>
 8001cde:	009a      	lsls	r2, r3, #2
 8001ce0:	4bbc      	ldr	r3, [pc, #752]	; (8001fd4 <dispHandler+0x388>)
 8001ce2:	18d3      	adds	r3, r2, r3
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	469f      	mov	pc, r3
		{
		case START:
		{
			char start1[] = "Spousteni";
 8001ce8:	21a4      	movs	r1, #164	; 0xa4
 8001cea:	187b      	adds	r3, r7, r1
 8001cec:	4aba      	ldr	r2, [pc, #744]	; (8001fd8 <dispHandler+0x38c>)
 8001cee:	ca11      	ldmia	r2!, {r0, r4}
 8001cf0:	c311      	stmia	r3!, {r0, r4}
 8001cf2:	8812      	ldrh	r2, [r2, #0]
 8001cf4:	801a      	strh	r2, [r3, #0]
			strings[1] = start1;
 8001cf6:	23bc      	movs	r3, #188	; 0xbc
 8001cf8:	18fb      	adds	r3, r7, r3
 8001cfa:	187a      	adds	r2, r7, r1
 8001cfc:	605a      	str	r2, [r3, #4]
			align[1] = CENTER;
 8001cfe:	23b8      	movs	r3, #184	; 0xb8
 8001d00:	18fb      	adds	r3, r7, r3
 8001d02:	2202      	movs	r2, #2
 8001d04:	705a      	strb	r2, [r3, #1]

			break;
 8001d06:	e091      	b.n	8001e2c <dispHandler+0x1e0>
		}
		case START_DONE:
		{
			char start1[] = "Spousteni";
 8001d08:	2198      	movs	r1, #152	; 0x98
 8001d0a:	187b      	adds	r3, r7, r1
 8001d0c:	4ab2      	ldr	r2, [pc, #712]	; (8001fd8 <dispHandler+0x38c>)
 8001d0e:	ca11      	ldmia	r2!, {r0, r4}
 8001d10:	c311      	stmia	r3!, {r0, r4}
 8001d12:	8812      	ldrh	r2, [r2, #0]
 8001d14:	801a      	strh	r2, [r3, #0]
			char start2[] = "dokonceno";
 8001d16:	208c      	movs	r0, #140	; 0x8c
 8001d18:	183b      	adds	r3, r7, r0
 8001d1a:	4ab0      	ldr	r2, [pc, #704]	; (8001fdc <dispHandler+0x390>)
 8001d1c:	ca30      	ldmia	r2!, {r4, r5}
 8001d1e:	c330      	stmia	r3!, {r4, r5}
 8001d20:	8812      	ldrh	r2, [r2, #0]
 8001d22:	801a      	strh	r2, [r3, #0]
			strings[1] = start1;
 8001d24:	24bc      	movs	r4, #188	; 0xbc
 8001d26:	193b      	adds	r3, r7, r4
 8001d28:	187a      	adds	r2, r7, r1
 8001d2a:	605a      	str	r2, [r3, #4]
			align[1] = CENTER;
 8001d2c:	21b8      	movs	r1, #184	; 0xb8
 8001d2e:	187b      	adds	r3, r7, r1
 8001d30:	2202      	movs	r2, #2
 8001d32:	705a      	strb	r2, [r3, #1]
			strings[2] = start2;
 8001d34:	193b      	adds	r3, r7, r4
 8001d36:	183a      	adds	r2, r7, r0
 8001d38:	609a      	str	r2, [r3, #8]
			align[2] = CENTER;
 8001d3a:	187b      	adds	r3, r7, r1
 8001d3c:	2202      	movs	r2, #2
 8001d3e:	709a      	strb	r2, [r3, #2]
			break;
 8001d40:	e074      	b.n	8001e2c <dispHandler+0x1e0>
		}
		case MAIN_TEST:
		{
			char main1[] = "Hlavni test";
 8001d42:	2180      	movs	r1, #128	; 0x80
 8001d44:	187b      	adds	r3, r7, r1
 8001d46:	4aa6      	ldr	r2, [pc, #664]	; (8001fe0 <dispHandler+0x394>)
 8001d48:	ca31      	ldmia	r2!, {r0, r4, r5}
 8001d4a:	c331      	stmia	r3!, {r0, r4, r5}
			strings[1] = main1;
 8001d4c:	23bc      	movs	r3, #188	; 0xbc
 8001d4e:	18fb      	adds	r3, r7, r3
 8001d50:	187a      	adds	r2, r7, r1
 8001d52:	605a      	str	r2, [r3, #4]
			align[1] = CENTER;
 8001d54:	23b8      	movs	r3, #184	; 0xb8
 8001d56:	18fb      	adds	r3, r7, r3
 8001d58:	2202      	movs	r2, #2
 8001d5a:	705a      	strb	r2, [r3, #1]
			break;
 8001d5c:	e066      	b.n	8001e2c <dispHandler+0x1e0>
		}
		case MAIN_TEST_DONE:
		{
			char main1[] = "Hlavni test";
 8001d5e:	2174      	movs	r1, #116	; 0x74
 8001d60:	187b      	adds	r3, r7, r1
 8001d62:	4a9f      	ldr	r2, [pc, #636]	; (8001fe0 <dispHandler+0x394>)
 8001d64:	ca31      	ldmia	r2!, {r0, r4, r5}
 8001d66:	c331      	stmia	r3!, {r0, r4, r5}
			char main2[] = "dokoncen";
 8001d68:	2068      	movs	r0, #104	; 0x68
 8001d6a:	183b      	adds	r3, r7, r0
 8001d6c:	4a9d      	ldr	r2, [pc, #628]	; (8001fe4 <dispHandler+0x398>)
 8001d6e:	ca30      	ldmia	r2!, {r4, r5}
 8001d70:	c330      	stmia	r3!, {r4, r5}
 8001d72:	7812      	ldrb	r2, [r2, #0]
 8001d74:	701a      	strb	r2, [r3, #0]
			strings[1] = main1;
 8001d76:	24bc      	movs	r4, #188	; 0xbc
 8001d78:	193b      	adds	r3, r7, r4
 8001d7a:	187a      	adds	r2, r7, r1
 8001d7c:	605a      	str	r2, [r3, #4]
			align[1] = CENTER;
 8001d7e:	21b8      	movs	r1, #184	; 0xb8
 8001d80:	187b      	adds	r3, r7, r1
 8001d82:	2202      	movs	r2, #2
 8001d84:	705a      	strb	r2, [r3, #1]
			strings[2] = main2;
 8001d86:	193b      	adds	r3, r7, r4
 8001d88:	183a      	adds	r2, r7, r0
 8001d8a:	609a      	str	r2, [r3, #8]
			align[2] = CENTER;
 8001d8c:	187b      	adds	r3, r7, r1
 8001d8e:	2202      	movs	r2, #2
 8001d90:	709a      	strb	r2, [r3, #2]
			break;
 8001d92:	e04b      	b.n	8001e2c <dispHandler+0x1e0>
		}
		case BATTERY_TEST:
		{
			char bat1[] = "Test baterie";
 8001d94:	2158      	movs	r1, #88	; 0x58
 8001d96:	187b      	adds	r3, r7, r1
 8001d98:	4a93      	ldr	r2, [pc, #588]	; (8001fe8 <dispHandler+0x39c>)
 8001d9a:	ca31      	ldmia	r2!, {r0, r4, r5}
 8001d9c:	c331      	stmia	r3!, {r0, r4, r5}
 8001d9e:	7812      	ldrb	r2, [r2, #0]
 8001da0:	701a      	strb	r2, [r3, #0]
			strings[1] = bat1;
 8001da2:	23bc      	movs	r3, #188	; 0xbc
 8001da4:	18fb      	adds	r3, r7, r3
 8001da6:	187a      	adds	r2, r7, r1
 8001da8:	605a      	str	r2, [r3, #4]
			align[1] = CENTER;
 8001daa:	23b8      	movs	r3, #184	; 0xb8
 8001dac:	18fb      	adds	r3, r7, r3
 8001dae:	2202      	movs	r2, #2
 8001db0:	705a      	strb	r2, [r3, #1]
			break;
 8001db2:	e03b      	b.n	8001e2c <dispHandler+0x1e0>
		}
		case BATTERY_TEST_DONE:
		{
			char bat1[] = "Test baterie";
 8001db4:	2148      	movs	r1, #72	; 0x48
 8001db6:	187b      	adds	r3, r7, r1
 8001db8:	4a8b      	ldr	r2, [pc, #556]	; (8001fe8 <dispHandler+0x39c>)
 8001dba:	ca31      	ldmia	r2!, {r0, r4, r5}
 8001dbc:	c331      	stmia	r3!, {r0, r4, r5}
 8001dbe:	7812      	ldrb	r2, [r2, #0]
 8001dc0:	701a      	strb	r2, [r3, #0]
			char bat2[] = "dokoncen";
 8001dc2:	203c      	movs	r0, #60	; 0x3c
 8001dc4:	183b      	adds	r3, r7, r0
 8001dc6:	4a87      	ldr	r2, [pc, #540]	; (8001fe4 <dispHandler+0x398>)
 8001dc8:	ca30      	ldmia	r2!, {r4, r5}
 8001dca:	c330      	stmia	r3!, {r4, r5}
 8001dcc:	7812      	ldrb	r2, [r2, #0]
 8001dce:	701a      	strb	r2, [r3, #0]
			strings[1] = bat1;
 8001dd0:	24bc      	movs	r4, #188	; 0xbc
 8001dd2:	193b      	adds	r3, r7, r4
 8001dd4:	187a      	adds	r2, r7, r1
 8001dd6:	605a      	str	r2, [r3, #4]
			align[1] = CENTER;
 8001dd8:	21b8      	movs	r1, #184	; 0xb8
 8001dda:	187b      	adds	r3, r7, r1
 8001ddc:	2202      	movs	r2, #2
 8001dde:	705a      	strb	r2, [r3, #1]
			strings[2] = bat2;
 8001de0:	193b      	adds	r3, r7, r4
 8001de2:	183a      	adds	r2, r7, r0
 8001de4:	609a      	str	r2, [r3, #8]
			align[2] = CENTER;
 8001de6:	187b      	adds	r3, r7, r1
 8001de8:	2202      	movs	r2, #2
 8001dea:	709a      	strb	r2, [r3, #2]
			break;
 8001dec:	e01e      	b.n	8001e2c <dispHandler+0x1e0>
		}
		default:
		{
			char default1[] = "Zahoreni";
 8001dee:	2030      	movs	r0, #48	; 0x30
 8001df0:	183b      	adds	r3, r7, r0
 8001df2:	4a7e      	ldr	r2, [pc, #504]	; (8001fec <dispHandler+0x3a0>)
 8001df4:	ca12      	ldmia	r2!, {r1, r4}
 8001df6:	c312      	stmia	r3!, {r1, r4}
 8001df8:	7812      	ldrb	r2, [r2, #0]
 8001dfa:	701a      	strb	r2, [r3, #0]
			char default2[] = "zdroju";
 8001dfc:	2428      	movs	r4, #40	; 0x28
 8001dfe:	193b      	adds	r3, r7, r4
 8001e00:	4a7b      	ldr	r2, [pc, #492]	; (8001ff0 <dispHandler+0x3a4>)
 8001e02:	6811      	ldr	r1, [r2, #0]
 8001e04:	6019      	str	r1, [r3, #0]
 8001e06:	8891      	ldrh	r1, [r2, #4]
 8001e08:	8099      	strh	r1, [r3, #4]
 8001e0a:	7992      	ldrb	r2, [r2, #6]
 8001e0c:	719a      	strb	r2, [r3, #6]
			strings[1] = default1;
 8001e0e:	21bc      	movs	r1, #188	; 0xbc
 8001e10:	187b      	adds	r3, r7, r1
 8001e12:	183a      	adds	r2, r7, r0
 8001e14:	605a      	str	r2, [r3, #4]
			align[1] = CENTER;
 8001e16:	20b8      	movs	r0, #184	; 0xb8
 8001e18:	183b      	adds	r3, r7, r0
 8001e1a:	2202      	movs	r2, #2
 8001e1c:	705a      	strb	r2, [r3, #1]
			strings[2] = default2;
 8001e1e:	187b      	adds	r3, r7, r1
 8001e20:	193a      	adds	r2, r7, r4
 8001e22:	609a      	str	r2, [r3, #8]
			align[2] = CENTER;
 8001e24:	183b      	adds	r3, r7, r0
 8001e26:	2202      	movs	r2, #2
 8001e28:	709a      	strb	r2, [r3, #2]

			break;
 8001e2a:	46c0      	nop			; (mov r8, r8)
		}
		}

		for(int i = 0; i < 4; i++)
 8001e2c:	2300      	movs	r3, #0
 8001e2e:	22e4      	movs	r2, #228	; 0xe4
 8001e30:	18ba      	adds	r2, r7, r2
 8001e32:	6013      	str	r3, [r2, #0]
 8001e34:	e022      	b.n	8001e7c <dispHandler+0x230>
		{
			writeRow(strings[i], strlen(strings[i]), i, align[i]);
 8001e36:	21bc      	movs	r1, #188	; 0xbc
 8001e38:	187b      	adds	r3, r7, r1
 8001e3a:	25e4      	movs	r5, #228	; 0xe4
 8001e3c:	197a      	adds	r2, r7, r5
 8001e3e:	6812      	ldr	r2, [r2, #0]
 8001e40:	0092      	lsls	r2, r2, #2
 8001e42:	58d4      	ldr	r4, [r2, r3]
 8001e44:	187b      	adds	r3, r7, r1
 8001e46:	197a      	adds	r2, r7, r5
 8001e48:	6812      	ldr	r2, [r2, #0]
 8001e4a:	0092      	lsls	r2, r2, #2
 8001e4c:	58d3      	ldr	r3, [r2, r3]
 8001e4e:	0018      	movs	r0, r3
 8001e50:	f7fe f95a 	bl	8000108 <strlen>
 8001e54:	0003      	movs	r3, r0
 8001e56:	b2d9      	uxtb	r1, r3
 8001e58:	197b      	adds	r3, r7, r5
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	b2d8      	uxtb	r0, r3
 8001e5e:	23b8      	movs	r3, #184	; 0xb8
 8001e60:	18fa      	adds	r2, r7, r3
 8001e62:	197b      	adds	r3, r7, r5
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	18d3      	adds	r3, r2, r3
 8001e68:	781b      	ldrb	r3, [r3, #0]
 8001e6a:	0002      	movs	r2, r0
 8001e6c:	0020      	movs	r0, r4
 8001e6e:	f7ff f90b 	bl	8001088 <writeRow>
		for(int i = 0; i < 4; i++)
 8001e72:	197b      	adds	r3, r7, r5
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	3301      	adds	r3, #1
 8001e78:	197a      	adds	r2, r7, r5
 8001e7a:	6013      	str	r3, [r2, #0]
 8001e7c:	23e4      	movs	r3, #228	; 0xe4
 8001e7e:	18fb      	adds	r3, r7, r3
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	2b03      	cmp	r3, #3
 8001e84:	ddd7      	ble.n	8001e36 <dispHandler+0x1ea>
		}
	}

	//_____Zobrazení �?asu u hlavních testů_____//
	if(flags.time.sec)
 8001e86:	4b4f      	ldr	r3, [pc, #316]	; (8001fc4 <dispHandler+0x378>)
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	079b      	lsls	r3, r3, #30
 8001e8c:	0fdb      	lsrs	r3, r3, #31
 8001e8e:	b2db      	uxtb	r3, r3
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d051      	beq.n	8001f38 <dispHandler+0x2ec>
	{
		switch(currentPhase())
 8001e94:	f000 ff4a 	bl	8002d2c <currentPhase>
 8001e98:	0003      	movs	r3, r0
 8001e9a:	2b03      	cmp	r3, #3
 8001e9c:	d002      	beq.n	8001ea4 <dispHandler+0x258>
 8001e9e:	2b05      	cmp	r3, #5
 8001ea0:	d028      	beq.n	8001ef4 <dispHandler+0x2a8>
			sprintf(time, "%lu:%lu", 14-sysTime[SYSTIME_MIN], 59-sysTime[SYSTIME_SEC]);
			writeRow(time, strlen(time), 2, CENTER);
			break;
		}
		default:
			break;
 8001ea2:	e04a      	b.n	8001f3a <dispHandler+0x2ee>
			char time[9] = {0};
 8001ea4:	251c      	movs	r5, #28
 8001ea6:	197b      	adds	r3, r7, r5
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	601a      	str	r2, [r3, #0]
 8001eac:	3304      	adds	r3, #4
 8001eae:	2205      	movs	r2, #5
 8001eb0:	2100      	movs	r1, #0
 8001eb2:	0018      	movs	r0, r3
 8001eb4:	f00b fd3f 	bl	800d936 <memset>
			sprintf(time, "%lu:%lu:%lu", 2-sysTime[SYSTIME_HOUR], 59-sysTime[SYSTIME_MIN], 59-sysTime[SYSTIME_SEC]);
 8001eb8:	4b4e      	ldr	r3, [pc, #312]	; (8001ff4 <dispHandler+0x3a8>)
 8001eba:	68db      	ldr	r3, [r3, #12]
 8001ebc:	2202      	movs	r2, #2
 8001ebe:	1ad2      	subs	r2, r2, r3
 8001ec0:	4b4c      	ldr	r3, [pc, #304]	; (8001ff4 <dispHandler+0x3a8>)
 8001ec2:	689b      	ldr	r3, [r3, #8]
 8001ec4:	213b      	movs	r1, #59	; 0x3b
 8001ec6:	1acc      	subs	r4, r1, r3
 8001ec8:	4b4a      	ldr	r3, [pc, #296]	; (8001ff4 <dispHandler+0x3a8>)
 8001eca:	685b      	ldr	r3, [r3, #4]
 8001ecc:	213b      	movs	r1, #59	; 0x3b
 8001ece:	1acb      	subs	r3, r1, r3
 8001ed0:	4949      	ldr	r1, [pc, #292]	; (8001ff8 <dispHandler+0x3ac>)
 8001ed2:	1978      	adds	r0, r7, r5
 8001ed4:	9300      	str	r3, [sp, #0]
 8001ed6:	0023      	movs	r3, r4
 8001ed8:	f00b fe2a 	bl	800db30 <siprintf>
			writeRow(time, strlen(time), 2, CENTER);
 8001edc:	197b      	adds	r3, r7, r5
 8001ede:	0018      	movs	r0, r3
 8001ee0:	f7fe f912 	bl	8000108 <strlen>
 8001ee4:	0003      	movs	r3, r0
 8001ee6:	b2d9      	uxtb	r1, r3
 8001ee8:	1978      	adds	r0, r7, r5
 8001eea:	2302      	movs	r3, #2
 8001eec:	2202      	movs	r2, #2
 8001eee:	f7ff f8cb 	bl	8001088 <writeRow>
			break;
 8001ef2:	e022      	b.n	8001f3a <dispHandler+0x2ee>
			char time[9] = {0};
 8001ef4:	2410      	movs	r4, #16
 8001ef6:	193b      	adds	r3, r7, r4
 8001ef8:	2200      	movs	r2, #0
 8001efa:	601a      	str	r2, [r3, #0]
 8001efc:	3304      	adds	r3, #4
 8001efe:	2205      	movs	r2, #5
 8001f00:	2100      	movs	r1, #0
 8001f02:	0018      	movs	r0, r3
 8001f04:	f00b fd17 	bl	800d936 <memset>
			sprintf(time, "%lu:%lu", 14-sysTime[SYSTIME_MIN], 59-sysTime[SYSTIME_SEC]);
 8001f08:	4b3a      	ldr	r3, [pc, #232]	; (8001ff4 <dispHandler+0x3a8>)
 8001f0a:	689b      	ldr	r3, [r3, #8]
 8001f0c:	220e      	movs	r2, #14
 8001f0e:	1ad2      	subs	r2, r2, r3
 8001f10:	4b38      	ldr	r3, [pc, #224]	; (8001ff4 <dispHandler+0x3a8>)
 8001f12:	685b      	ldr	r3, [r3, #4]
 8001f14:	213b      	movs	r1, #59	; 0x3b
 8001f16:	1acb      	subs	r3, r1, r3
 8001f18:	4938      	ldr	r1, [pc, #224]	; (8001ffc <dispHandler+0x3b0>)
 8001f1a:	1938      	adds	r0, r7, r4
 8001f1c:	f00b fe08 	bl	800db30 <siprintf>
			writeRow(time, strlen(time), 2, CENTER);
 8001f20:	193b      	adds	r3, r7, r4
 8001f22:	0018      	movs	r0, r3
 8001f24:	f7fe f8f0 	bl	8000108 <strlen>
 8001f28:	0003      	movs	r3, r0
 8001f2a:	b2d9      	uxtb	r1, r3
 8001f2c:	1938      	adds	r0, r7, r4
 8001f2e:	2302      	movs	r3, #2
 8001f30:	2202      	movs	r2, #2
 8001f32:	f7ff f8a9 	bl	8001088 <writeRow>
			break;
 8001f36:	e000      	b.n	8001f3a <dispHandler+0x2ee>
		}
	}
 8001f38:	46c0      	nop			; (mov r8, r8)

	if(flags.instructions.stopRequest || flags.testCanceled)
 8001f3a:	4b22      	ldr	r3, [pc, #136]	; (8001fc4 <dispHandler+0x378>)
 8001f3c:	68db      	ldr	r3, [r3, #12]
 8001f3e:	079b      	lsls	r3, r3, #30
 8001f40:	0fdb      	lsrs	r3, r3, #31
 8001f42:	b2db      	uxtb	r3, r3
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d106      	bne.n	8001f56 <dispHandler+0x30a>
 8001f48:	4b1e      	ldr	r3, [pc, #120]	; (8001fc4 <dispHandler+0x378>)
 8001f4a:	699b      	ldr	r3, [r3, #24]
 8001f4c:	075b      	lsls	r3, r3, #29
 8001f4e:	0fdb      	lsrs	r3, r3, #31
 8001f50:	b2db      	uxtb	r3, r3
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d030      	beq.n	8001fb8 <dispHandler+0x36c>
	{
		char err[] = "Preruseni";
 8001f56:	1d3b      	adds	r3, r7, #4
 8001f58:	4a29      	ldr	r2, [pc, #164]	; (8002000 <dispHandler+0x3b4>)
 8001f5a:	ca03      	ldmia	r2!, {r0, r1}
 8001f5c:	c303      	stmia	r3!, {r0, r1}
 8001f5e:	8812      	ldrh	r2, [r2, #0]
 8001f60:	801a      	strh	r2, [r3, #0]
		strings[1] = err;
 8001f62:	23bc      	movs	r3, #188	; 0xbc
 8001f64:	18fb      	adds	r3, r7, r3
 8001f66:	1d3a      	adds	r2, r7, #4
 8001f68:	605a      	str	r2, [r3, #4]

		for(int i = 0; i < 4; i++)
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	22e0      	movs	r2, #224	; 0xe0
 8001f6e:	18ba      	adds	r2, r7, r2
 8001f70:	6013      	str	r3, [r2, #0]
 8001f72:	e01c      	b.n	8001fae <dispHandler+0x362>
		{
			writeRow(strings[i], strlen(strings[i]), i, CENTER);
 8001f74:	21bc      	movs	r1, #188	; 0xbc
 8001f76:	187b      	adds	r3, r7, r1
 8001f78:	25e0      	movs	r5, #224	; 0xe0
 8001f7a:	197a      	adds	r2, r7, r5
 8001f7c:	6812      	ldr	r2, [r2, #0]
 8001f7e:	0092      	lsls	r2, r2, #2
 8001f80:	58d4      	ldr	r4, [r2, r3]
 8001f82:	187b      	adds	r3, r7, r1
 8001f84:	197a      	adds	r2, r7, r5
 8001f86:	6812      	ldr	r2, [r2, #0]
 8001f88:	0092      	lsls	r2, r2, #2
 8001f8a:	58d3      	ldr	r3, [r2, r3]
 8001f8c:	0018      	movs	r0, r3
 8001f8e:	f7fe f8bb 	bl	8000108 <strlen>
 8001f92:	0003      	movs	r3, r0
 8001f94:	b2d9      	uxtb	r1, r3
 8001f96:	197b      	adds	r3, r7, r5
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	b2da      	uxtb	r2, r3
 8001f9c:	2302      	movs	r3, #2
 8001f9e:	0020      	movs	r0, r4
 8001fa0:	f7ff f872 	bl	8001088 <writeRow>
		for(int i = 0; i < 4; i++)
 8001fa4:	197b      	adds	r3, r7, r5
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	3301      	adds	r3, #1
 8001faa:	197a      	adds	r2, r7, r5
 8001fac:	6013      	str	r3, [r2, #0]
 8001fae:	23e0      	movs	r3, #224	; 0xe0
 8001fb0:	18fb      	adds	r3, r7, r3
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	2b03      	cmp	r3, #3
 8001fb6:	dddd      	ble.n	8001f74 <dispHandler+0x328>
		}
	}
}
 8001fb8:	46c0      	nop			; (mov r8, r8)
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	b03b      	add	sp, #236	; 0xec
 8001fbe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001fc0:	0800e264 	.word	0x0800e264
 8001fc4:	200003d8 	.word	0x200003d8
 8001fc8:	200003f6 	.word	0x200003f6
 8001fcc:	20000410 	.word	0x20000410
 8001fd0:	0800e248 	.word	0x0800e248
 8001fd4:	0800e3f4 	.word	0x0800e3f4
 8001fd8:	0800e278 	.word	0x0800e278
 8001fdc:	0800e284 	.word	0x0800e284
 8001fe0:	0800e290 	.word	0x0800e290
 8001fe4:	0800e29c 	.word	0x0800e29c
 8001fe8:	0800e2a8 	.word	0x0800e2a8
 8001fec:	0800e234 	.word	0x0800e234
 8001ff0:	0800e240 	.word	0x0800e240
 8001ff4:	200003c8 	.word	0x200003c8
 8001ff8:	0800e250 	.word	0x0800e250
 8001ffc:	0800e25c 	.word	0x0800e25c
 8002000:	0800e2b8 	.word	0x0800e2b8

08002004 <UI_Handler>:

//_____Obsluha piezo + podsvícení displeje_____//
static void UI_Handler(void)
{
 8002004:	b580      	push	{r7, lr}
 8002006:	af00      	add	r7, sp, #0
	if((sysTime[SYSTIME_TEN_MS] - startTime_LCD) >= 6000)	//1min
	{
		setColour(BACKLIGHT_OFF);
	}*/

	if(flags.conErr)
 8002008:	4b9e      	ldr	r3, [pc, #632]	; (8002284 <UI_Handler+0x280>)
 800200a:	699b      	ldr	r3, [r3, #24]
 800200c:	065b      	lsls	r3, r3, #25
 800200e:	0fdb      	lsrs	r3, r3, #31
 8002010:	b2db      	uxtb	r3, r3
 8002012:	2b00      	cmp	r3, #0
 8002014:	d004      	beq.n	8002020 <UI_Handler+0x1c>
		flags.ui.error = 1;
 8002016:	4b9b      	ldr	r3, [pc, #620]	; (8002284 <UI_Handler+0x280>)
 8002018:	7c1a      	ldrb	r2, [r3, #16]
 800201a:	2104      	movs	r1, #4
 800201c:	430a      	orrs	r2, r1
 800201e:	741a      	strb	r2, [r3, #16]

	flags.ui.active = 0;
 8002020:	4b98      	ldr	r3, [pc, #608]	; (8002284 <UI_Handler+0x280>)
 8002022:	7c1a      	ldrb	r2, [r3, #16]
 8002024:	2120      	movs	r1, #32
 8002026:	438a      	bics	r2, r1
 8002028:	741a      	strb	r2, [r3, #16]

	static uint32_t startTime;	//proměnná pro �?asování dějů

	//___Nastavení stavu podle požadavků___//
	//___Stavy výše mají vyšší prioritu (error nejvyšší)___//
	if(flags.ui.error && (UI_State != ERROR))
 800202a:	4b96      	ldr	r3, [pc, #600]	; (8002284 <UI_Handler+0x280>)
 800202c:	691b      	ldr	r3, [r3, #16]
 800202e:	075b      	lsls	r3, r3, #29
 8002030:	0fdb      	lsrs	r3, r3, #31
 8002032:	b2db      	uxtb	r3, r3
 8002034:	2b00      	cmp	r3, #0
 8002036:	d00b      	beq.n	8002050 <UI_Handler+0x4c>
 8002038:	4b93      	ldr	r3, [pc, #588]	; (8002288 <UI_Handler+0x284>)
 800203a:	781b      	ldrb	r3, [r3, #0]
 800203c:	2b03      	cmp	r3, #3
 800203e:	d007      	beq.n	8002050 <UI_Handler+0x4c>
	{
		UI_State = ERROR;
 8002040:	4b91      	ldr	r3, [pc, #580]	; (8002288 <UI_Handler+0x284>)
 8002042:	2203      	movs	r2, #3
 8002044:	701a      	strb	r2, [r3, #0]
		startTime = sysTime[SYSTIME_TEN_MS];
 8002046:	4b91      	ldr	r3, [pc, #580]	; (800228c <UI_Handler+0x288>)
 8002048:	681a      	ldr	r2, [r3, #0]
 800204a:	4b91      	ldr	r3, [pc, #580]	; (8002290 <UI_Handler+0x28c>)
 800204c:	601a      	str	r2, [r3, #0]
 800204e:	e05e      	b.n	800210e <UI_Handler+0x10a>
	}
	else if(flags.ui.notice && (UI_State == OFF))
 8002050:	4b8c      	ldr	r3, [pc, #560]	; (8002284 <UI_Handler+0x280>)
 8002052:	691b      	ldr	r3, [r3, #16]
 8002054:	071b      	lsls	r3, r3, #28
 8002056:	0fdb      	lsrs	r3, r3, #31
 8002058:	b2db      	uxtb	r3, r3
 800205a:	2b00      	cmp	r3, #0
 800205c:	d010      	beq.n	8002080 <UI_Handler+0x7c>
 800205e:	4b8a      	ldr	r3, [pc, #552]	; (8002288 <UI_Handler+0x284>)
 8002060:	781b      	ldrb	r3, [r3, #0]
 8002062:	2b00      	cmp	r3, #0
 8002064:	d10c      	bne.n	8002080 <UI_Handler+0x7c>
	{
		UI_State = NOTICE;
 8002066:	4b88      	ldr	r3, [pc, #544]	; (8002288 <UI_Handler+0x284>)
 8002068:	2204      	movs	r2, #4
 800206a:	701a      	strb	r2, [r3, #0]
		startTime = sysTime[SYSTIME_TEN_MS];
 800206c:	4b87      	ldr	r3, [pc, #540]	; (800228c <UI_Handler+0x288>)
 800206e:	681a      	ldr	r2, [r3, #0]
 8002070:	4b87      	ldr	r3, [pc, #540]	; (8002290 <UI_Handler+0x28c>)
 8002072:	601a      	str	r2, [r3, #0]
		flags.ui.notice = 0;
 8002074:	4b83      	ldr	r3, [pc, #524]	; (8002284 <UI_Handler+0x280>)
 8002076:	7c1a      	ldrb	r2, [r3, #16]
 8002078:	2108      	movs	r1, #8
 800207a:	438a      	bics	r2, r1
 800207c:	741a      	strb	r2, [r3, #16]
 800207e:	e046      	b.n	800210e <UI_Handler+0x10a>
	}
	else if(flags.ui.done && (UI_State == OFF))
 8002080:	4b80      	ldr	r3, [pc, #512]	; (8002284 <UI_Handler+0x280>)
 8002082:	691b      	ldr	r3, [r3, #16]
 8002084:	06db      	lsls	r3, r3, #27
 8002086:	0fdb      	lsrs	r3, r3, #31
 8002088:	b2db      	uxtb	r3, r3
 800208a:	2b00      	cmp	r3, #0
 800208c:	d010      	beq.n	80020b0 <UI_Handler+0xac>
 800208e:	4b7e      	ldr	r3, [pc, #504]	; (8002288 <UI_Handler+0x284>)
 8002090:	781b      	ldrb	r3, [r3, #0]
 8002092:	2b00      	cmp	r3, #0
 8002094:	d10c      	bne.n	80020b0 <UI_Handler+0xac>
	{
		UI_State = DONE;
 8002096:	4b7c      	ldr	r3, [pc, #496]	; (8002288 <UI_Handler+0x284>)
 8002098:	2205      	movs	r2, #5
 800209a:	701a      	strb	r2, [r3, #0]
		startTime = sysTime[SYSTIME_TEN_MS];
 800209c:	4b7b      	ldr	r3, [pc, #492]	; (800228c <UI_Handler+0x288>)
 800209e:	681a      	ldr	r2, [r3, #0]
 80020a0:	4b7b      	ldr	r3, [pc, #492]	; (8002290 <UI_Handler+0x28c>)
 80020a2:	601a      	str	r2, [r3, #0]
		flags.ui.done = 0;
 80020a4:	4b77      	ldr	r3, [pc, #476]	; (8002284 <UI_Handler+0x280>)
 80020a6:	7c1a      	ldrb	r2, [r3, #16]
 80020a8:	2110      	movs	r1, #16
 80020aa:	438a      	bics	r2, r1
 80020ac:	741a      	strb	r2, [r3, #16]
 80020ae:	e02e      	b.n	800210e <UI_Handler+0x10a>
	}
	else if(flags.ui.longBeep && (UI_State == OFF))
 80020b0:	4b74      	ldr	r3, [pc, #464]	; (8002284 <UI_Handler+0x280>)
 80020b2:	691b      	ldr	r3, [r3, #16]
 80020b4:	079b      	lsls	r3, r3, #30
 80020b6:	0fdb      	lsrs	r3, r3, #31
 80020b8:	b2db      	uxtb	r3, r3
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d010      	beq.n	80020e0 <UI_Handler+0xdc>
 80020be:	4b72      	ldr	r3, [pc, #456]	; (8002288 <UI_Handler+0x284>)
 80020c0:	781b      	ldrb	r3, [r3, #0]
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d10c      	bne.n	80020e0 <UI_Handler+0xdc>
	{
		UI_State = LONG_BEEP;
 80020c6:	4b70      	ldr	r3, [pc, #448]	; (8002288 <UI_Handler+0x284>)
 80020c8:	2202      	movs	r2, #2
 80020ca:	701a      	strb	r2, [r3, #0]
		startTime = sysTime[SYSTIME_TEN_MS];
 80020cc:	4b6f      	ldr	r3, [pc, #444]	; (800228c <UI_Handler+0x288>)
 80020ce:	681a      	ldr	r2, [r3, #0]
 80020d0:	4b6f      	ldr	r3, [pc, #444]	; (8002290 <UI_Handler+0x28c>)
 80020d2:	601a      	str	r2, [r3, #0]
		flags.ui.longBeep = 0;
 80020d4:	4b6b      	ldr	r3, [pc, #428]	; (8002284 <UI_Handler+0x280>)
 80020d6:	7c1a      	ldrb	r2, [r3, #16]
 80020d8:	2102      	movs	r1, #2
 80020da:	438a      	bics	r2, r1
 80020dc:	741a      	strb	r2, [r3, #16]
 80020de:	e016      	b.n	800210e <UI_Handler+0x10a>
	}
	else if(flags.ui.shortBeep && (UI_State == OFF))
 80020e0:	4b68      	ldr	r3, [pc, #416]	; (8002284 <UI_Handler+0x280>)
 80020e2:	691b      	ldr	r3, [r3, #16]
 80020e4:	07db      	lsls	r3, r3, #31
 80020e6:	0fdb      	lsrs	r3, r3, #31
 80020e8:	b2db      	uxtb	r3, r3
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d00f      	beq.n	800210e <UI_Handler+0x10a>
 80020ee:	4b66      	ldr	r3, [pc, #408]	; (8002288 <UI_Handler+0x284>)
 80020f0:	781b      	ldrb	r3, [r3, #0]
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d10b      	bne.n	800210e <UI_Handler+0x10a>
	{
		UI_State = SHORT_BEEP;
 80020f6:	4b64      	ldr	r3, [pc, #400]	; (8002288 <UI_Handler+0x284>)
 80020f8:	2201      	movs	r2, #1
 80020fa:	701a      	strb	r2, [r3, #0]
		startTime = sysTime[SYSTIME_TEN_MS];
 80020fc:	4b63      	ldr	r3, [pc, #396]	; (800228c <UI_Handler+0x288>)
 80020fe:	681a      	ldr	r2, [r3, #0]
 8002100:	4b63      	ldr	r3, [pc, #396]	; (8002290 <UI_Handler+0x28c>)
 8002102:	601a      	str	r2, [r3, #0]
		flags.ui.shortBeep = 0;
 8002104:	4b5f      	ldr	r3, [pc, #380]	; (8002284 <UI_Handler+0x280>)
 8002106:	7c1a      	ldrb	r2, [r3, #16]
 8002108:	2101      	movs	r1, #1
 800210a:	438a      	bics	r2, r1
 800210c:	741a      	strb	r2, [r3, #16]
	}

	switch(UI_State)
 800210e:	4b5e      	ldr	r3, [pc, #376]	; (8002288 <UI_Handler+0x284>)
 8002110:	781b      	ldrb	r3, [r3, #0]
 8002112:	2b05      	cmp	r3, #5
 8002114:	d900      	bls.n	8002118 <UI_Handler+0x114>
 8002116:	e0a0      	b.n	800225a <UI_Handler+0x256>
 8002118:	009a      	lsls	r2, r3, #2
 800211a:	4b5e      	ldr	r3, [pc, #376]	; (8002294 <UI_Handler+0x290>)
 800211c:	18d3      	adds	r3, r2, r3
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	469f      	mov	pc, r3
	{
	case SHORT_BEEP:
#ifndef __SILENT__
			BUZZER_ON;
 8002122:	2380      	movs	r3, #128	; 0x80
 8002124:	015b      	lsls	r3, r3, #5
 8002126:	485c      	ldr	r0, [pc, #368]	; (8002298 <UI_Handler+0x294>)
 8002128:	2201      	movs	r2, #1
 800212a:	0019      	movs	r1, r3
 800212c:	f002 fa85 	bl	800463a <HAL_GPIO_WritePin>
#endif
		if((sysTime[SYSTIME_TEN_MS] - startTime) >= 50)		//0,5s
 8002130:	4b56      	ldr	r3, [pc, #344]	; (800228c <UI_Handler+0x288>)
 8002132:	681a      	ldr	r2, [r3, #0]
 8002134:	4b56      	ldr	r3, [pc, #344]	; (8002290 <UI_Handler+0x28c>)
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	1ad3      	subs	r3, r2, r3
 800213a:	2b31      	cmp	r3, #49	; 0x31
 800213c:	d800      	bhi.n	8002140 <UI_Handler+0x13c>
 800213e:	e094      	b.n	800226a <UI_Handler+0x266>
		{
			UI_State = OFF;
 8002140:	4b51      	ldr	r3, [pc, #324]	; (8002288 <UI_Handler+0x284>)
 8002142:	2200      	movs	r2, #0
 8002144:	701a      	strb	r2, [r3, #0]
			BUZZER_OFF;
 8002146:	2380      	movs	r3, #128	; 0x80
 8002148:	015b      	lsls	r3, r3, #5
 800214a:	4853      	ldr	r0, [pc, #332]	; (8002298 <UI_Handler+0x294>)
 800214c:	2200      	movs	r2, #0
 800214e:	0019      	movs	r1, r3
 8002150:	f002 fa73 	bl	800463a <HAL_GPIO_WritePin>
		}
		break;
 8002154:	e089      	b.n	800226a <UI_Handler+0x266>

	case LONG_BEEP:
#ifndef __SILENT__
			BUZZER_ON;
 8002156:	2380      	movs	r3, #128	; 0x80
 8002158:	015b      	lsls	r3, r3, #5
 800215a:	484f      	ldr	r0, [pc, #316]	; (8002298 <UI_Handler+0x294>)
 800215c:	2201      	movs	r2, #1
 800215e:	0019      	movs	r1, r3
 8002160:	f002 fa6b 	bl	800463a <HAL_GPIO_WritePin>
#endif
		if((sysTime[SYSTIME_TEN_MS] - startTime) >= 100)	//1s
 8002164:	4b49      	ldr	r3, [pc, #292]	; (800228c <UI_Handler+0x288>)
 8002166:	681a      	ldr	r2, [r3, #0]
 8002168:	4b49      	ldr	r3, [pc, #292]	; (8002290 <UI_Handler+0x28c>)
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	1ad3      	subs	r3, r2, r3
 800216e:	2b63      	cmp	r3, #99	; 0x63
 8002170:	d800      	bhi.n	8002174 <UI_Handler+0x170>
 8002172:	e07c      	b.n	800226e <UI_Handler+0x26a>
		{
			UI_State = OFF;
 8002174:	4b44      	ldr	r3, [pc, #272]	; (8002288 <UI_Handler+0x284>)
 8002176:	2200      	movs	r2, #0
 8002178:	701a      	strb	r2, [r3, #0]
			BUZZER_OFF;
 800217a:	2380      	movs	r3, #128	; 0x80
 800217c:	015b      	lsls	r3, r3, #5
 800217e:	4846      	ldr	r0, [pc, #280]	; (8002298 <UI_Handler+0x294>)
 8002180:	2200      	movs	r2, #0
 8002182:	0019      	movs	r1, r3
 8002184:	f002 fa59 	bl	800463a <HAL_GPIO_WritePin>
		}
		break;
 8002188:	e071      	b.n	800226e <UI_Handler+0x26a>

	case ERROR:
		if(!flags.ui.error)	//dokud není požadavek zrušen provádí se error
 800218a:	4b3e      	ldr	r3, [pc, #248]	; (8002284 <UI_Handler+0x280>)
 800218c:	691b      	ldr	r3, [r3, #16]
 800218e:	075b      	lsls	r3, r3, #29
 8002190:	0fdb      	lsrs	r3, r3, #31
 8002192:	b2db      	uxtb	r3, r3
 8002194:	2b00      	cmp	r3, #0
 8002196:	d102      	bne.n	800219e <UI_Handler+0x19a>
			UI_State = OFF;
 8002198:	4b3b      	ldr	r3, [pc, #236]	; (8002288 <UI_Handler+0x284>)
 800219a:	2200      	movs	r2, #0
 800219c:	701a      	strb	r2, [r3, #0]
		if(!((sysTime[SYSTIME_TEN_MS] - startTime) % 50))	//každých 0,5s
 800219e:	4b3b      	ldr	r3, [pc, #236]	; (800228c <UI_Handler+0x288>)
 80021a0:	681a      	ldr	r2, [r3, #0]
 80021a2:	4b3b      	ldr	r3, [pc, #236]	; (8002290 <UI_Handler+0x28c>)
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	1ad3      	subs	r3, r2, r3
 80021a8:	2132      	movs	r1, #50	; 0x32
 80021aa:	0018      	movs	r0, r3
 80021ac:	f7fe f844 	bl	8000238 <__aeabi_uidivmod>
 80021b0:	1e0b      	subs	r3, r1, #0
 80021b2:	d15e      	bne.n	8002272 <UI_Handler+0x26e>
		{
#ifndef __SILENT__
			BUZZER_Toggle;
 80021b4:	2380      	movs	r3, #128	; 0x80
 80021b6:	015b      	lsls	r3, r3, #5
 80021b8:	4a37      	ldr	r2, [pc, #220]	; (8002298 <UI_Handler+0x294>)
 80021ba:	0019      	movs	r1, r3
 80021bc:	0010      	movs	r0, r2
 80021be:	f002 fa59 	bl	8004674 <HAL_GPIO_TogglePin>
#endif
			BACKLIGHT_RED_Toggle;
 80021c2:	2380      	movs	r3, #128	; 0x80
 80021c4:	021a      	lsls	r2, r3, #8
 80021c6:	2390      	movs	r3, #144	; 0x90
 80021c8:	05db      	lsls	r3, r3, #23
 80021ca:	0011      	movs	r1, r2
 80021cc:	0018      	movs	r0, r3
 80021ce:	f002 fa51 	bl	8004674 <HAL_GPIO_TogglePin>
		}
		break;
 80021d2:	e04e      	b.n	8002272 <UI_Handler+0x26e>

	case NOTICE:
		if(!((sysTime[SYSTIME_TEN_MS] - startTime) % 35))	//každých 0,35s
 80021d4:	4b2d      	ldr	r3, [pc, #180]	; (800228c <UI_Handler+0x288>)
 80021d6:	681a      	ldr	r2, [r3, #0]
 80021d8:	4b2d      	ldr	r3, [pc, #180]	; (8002290 <UI_Handler+0x28c>)
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	1ad3      	subs	r3, r2, r3
 80021de:	2123      	movs	r1, #35	; 0x23
 80021e0:	0018      	movs	r0, r3
 80021e2:	f7fe f829 	bl	8000238 <__aeabi_uidivmod>
 80021e6:	1e0b      	subs	r3, r1, #0
 80021e8:	d106      	bne.n	80021f8 <UI_Handler+0x1f4>
		{
#ifndef __SILENT__
			BUZZER_Toggle;
 80021ea:	2380      	movs	r3, #128	; 0x80
 80021ec:	015b      	lsls	r3, r3, #5
 80021ee:	4a2a      	ldr	r2, [pc, #168]	; (8002298 <UI_Handler+0x294>)
 80021f0:	0019      	movs	r1, r3
 80021f2:	0010      	movs	r0, r2
 80021f4:	f002 fa3e 	bl	8004674 <HAL_GPIO_TogglePin>
#endif
		}
		if((sysTime[SYSTIME_TEN_MS] - startTime) >= 209)	//Po 2,1s ukon�?i
 80021f8:	4b24      	ldr	r3, [pc, #144]	; (800228c <UI_Handler+0x288>)
 80021fa:	681a      	ldr	r2, [r3, #0]
 80021fc:	4b24      	ldr	r3, [pc, #144]	; (8002290 <UI_Handler+0x28c>)
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	1ad3      	subs	r3, r2, r3
 8002202:	2bd0      	cmp	r3, #208	; 0xd0
 8002204:	d937      	bls.n	8002276 <UI_Handler+0x272>
			UI_State = OFF;
 8002206:	4b20      	ldr	r3, [pc, #128]	; (8002288 <UI_Handler+0x284>)
 8002208:	2200      	movs	r2, #0
 800220a:	701a      	strb	r2, [r3, #0]
		break;
 800220c:	e033      	b.n	8002276 <UI_Handler+0x272>

	case DONE:
		if(!((sysTime[SYSTIME_TEN_MS] - startTime) % 50))	//každých 0,5s
 800220e:	4b1f      	ldr	r3, [pc, #124]	; (800228c <UI_Handler+0x288>)
 8002210:	681a      	ldr	r2, [r3, #0]
 8002212:	4b1f      	ldr	r3, [pc, #124]	; (8002290 <UI_Handler+0x28c>)
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	1ad3      	subs	r3, r2, r3
 8002218:	2132      	movs	r1, #50	; 0x32
 800221a:	0018      	movs	r0, r3
 800221c:	f7fe f80c 	bl	8000238 <__aeabi_uidivmod>
 8002220:	1e0b      	subs	r3, r1, #0
 8002222:	d10d      	bne.n	8002240 <UI_Handler+0x23c>
		{
#ifndef __SILENT__
			BUZZER_Toggle;
 8002224:	2380      	movs	r3, #128	; 0x80
 8002226:	015b      	lsls	r3, r3, #5
 8002228:	4a1b      	ldr	r2, [pc, #108]	; (8002298 <UI_Handler+0x294>)
 800222a:	0019      	movs	r1, r3
 800222c:	0010      	movs	r0, r2
 800222e:	f002 fa21 	bl	8004674 <HAL_GPIO_TogglePin>
#endif
			BACKLIGHT_GREEN_Toggle;
 8002232:	2380      	movs	r3, #128	; 0x80
 8002234:	005b      	lsls	r3, r3, #1
 8002236:	4a19      	ldr	r2, [pc, #100]	; (800229c <UI_Handler+0x298>)
 8002238:	0019      	movs	r1, r3
 800223a:	0010      	movs	r0, r2
 800223c:	f002 fa1a 	bl	8004674 <HAL_GPIO_TogglePin>
		}
		if((sysTime[SYSTIME_TEN_MS] - startTime) >= 299)	//Po 3s ukon�?i
 8002240:	4b12      	ldr	r3, [pc, #72]	; (800228c <UI_Handler+0x288>)
 8002242:	681a      	ldr	r2, [r3, #0]
 8002244:	4b12      	ldr	r3, [pc, #72]	; (8002290 <UI_Handler+0x28c>)
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	1ad2      	subs	r2, r2, r3
 800224a:	2395      	movs	r3, #149	; 0x95
 800224c:	005b      	lsls	r3, r3, #1
 800224e:	429a      	cmp	r2, r3
 8002250:	d913      	bls.n	800227a <UI_Handler+0x276>
			UI_State = OFF;
 8002252:	4b0d      	ldr	r3, [pc, #52]	; (8002288 <UI_Handler+0x284>)
 8002254:	2200      	movs	r2, #0
 8002256:	701a      	strb	r2, [r3, #0]
		break;
 8002258:	e00f      	b.n	800227a <UI_Handler+0x276>

	default:	//Ošetřuje i UI_State == OFF
		BUZZER_OFF;
 800225a:	2380      	movs	r3, #128	; 0x80
 800225c:	015b      	lsls	r3, r3, #5
 800225e:	480e      	ldr	r0, [pc, #56]	; (8002298 <UI_Handler+0x294>)
 8002260:	2200      	movs	r2, #0
 8002262:	0019      	movs	r1, r3
 8002264:	f002 f9e9 	bl	800463a <HAL_GPIO_WritePin>
#ifndef __DEBUG_BUTT__
		//setColour(BACKLIGHT_OFF);
#endif
		break;
 8002268:	e008      	b.n	800227c <UI_Handler+0x278>
		break;
 800226a:	46c0      	nop			; (mov r8, r8)
 800226c:	e006      	b.n	800227c <UI_Handler+0x278>
		break;
 800226e:	46c0      	nop			; (mov r8, r8)
 8002270:	e004      	b.n	800227c <UI_Handler+0x278>
		break;
 8002272:	46c0      	nop			; (mov r8, r8)
 8002274:	e002      	b.n	800227c <UI_Handler+0x278>
		break;
 8002276:	46c0      	nop			; (mov r8, r8)
 8002278:	e000      	b.n	800227c <UI_Handler+0x278>
		break;
 800227a:	46c0      	nop			; (mov r8, r8)

	}
}
 800227c:	46c0      	nop			; (mov r8, r8)
 800227e:	46bd      	mov	sp, r7
 8002280:	bd80      	pop	{r7, pc}
 8002282:	46c0      	nop			; (mov r8, r8)
 8002284:	200003d8 	.word	0x200003d8
 8002288:	200003fa 	.word	0x200003fa
 800228c:	200003c8 	.word	0x200003c8
 8002290:	200003fc 	.word	0x200003fc
 8002294:	0800e410 	.word	0x0800e410
 8002298:	48000800 	.word	0x48000800
 800229c:	48000400 	.word	0x48000400

080022a0 <measHandler>:

//_____Osluha AD převodníků_____//
static void measHandler(void)
{
 80022a0:	b5b0      	push	{r4, r5, r7, lr}
 80022a2:	af00      	add	r7, sp, #0
	static ADC_State_Type ADC_State;

	//___Nulování flagů___//
	flags.meas.measComplete = 0;
 80022a4:	4b50      	ldr	r3, [pc, #320]	; (80023e8 <measHandler+0x148>)
 80022a6:	7d1a      	ldrb	r2, [r3, #20]
 80022a8:	2102      	movs	r1, #2
 80022aa:	438a      	bics	r2, r1
 80022ac:	751a      	strb	r2, [r3, #20]
	flags.meas.measConflict = 0;
 80022ae:	4b4e      	ldr	r3, [pc, #312]	; (80023e8 <measHandler+0x148>)
 80022b0:	7d1a      	ldrb	r2, [r3, #20]
 80022b2:	2110      	movs	r1, #16
 80022b4:	438a      	bics	r2, r1
 80022b6:	751a      	strb	r2, [r3, #20]

	if(flags.meas.measRequest)
 80022b8:	4b4b      	ldr	r3, [pc, #300]	; (80023e8 <measHandler+0x148>)
 80022ba:	695b      	ldr	r3, [r3, #20]
 80022bc:	07db      	lsls	r3, r3, #31
 80022be:	0fdb      	lsrs	r3, r3, #31
 80022c0:	b2db      	uxtb	r3, r3
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d041      	beq.n	800234a <measHandler+0xaa>
	{
		if(!flags.meas.measRunning)
 80022c6:	4b48      	ldr	r3, [pc, #288]	; (80023e8 <measHandler+0x148>)
 80022c8:	695b      	ldr	r3, [r3, #20]
 80022ca:	071b      	lsls	r3, r3, #28
 80022cc:	0fdb      	lsrs	r3, r3, #31
 80022ce:	b2db      	uxtb	r3, r3
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d130      	bne.n	8002336 <measHandler+0x96>
		{
			//hadc->Instance->CR = 0;	//Will disable ADC so calibrtion can start
			HAL_ADCEx_Calibration_Start(&hadc);	//Calibration process
 80022d4:	4b45      	ldr	r3, [pc, #276]	; (80023ec <measHandler+0x14c>)
 80022d6:	0018      	movs	r0, r3
 80022d8:	f001 fe16 	bl	8003f08 <HAL_ADCEx_Calibration_Start>
			//hadc->Instance->CR = 1	//Enable ADC
			flags.meas.measRunning = 1;
 80022dc:	4b42      	ldr	r3, [pc, #264]	; (80023e8 <measHandler+0x148>)
 80022de:	7d1a      	ldrb	r2, [r3, #20]
 80022e0:	2108      	movs	r1, #8
 80022e2:	430a      	orrs	r2, r1
 80022e4:	751a      	strb	r2, [r3, #20]
			if(currentPhase() == BATTERY_TEST || currentPhase() == BATTERY_TEST_DONE)	//probíhá battery test
 80022e6:	f000 fd21 	bl	8002d2c <currentPhase>
 80022ea:	0003      	movs	r3, r0
 80022ec:	2b05      	cmp	r3, #5
 80022ee:	d004      	beq.n	80022fa <measHandler+0x5a>
 80022f0:	f000 fd1c 	bl	8002d2c <currentPhase>
 80022f4:	0003      	movs	r3, r0
 80022f6:	2b06      	cmp	r3, #6
 80022f8:	d108      	bne.n	800230c <measHandler+0x6c>
			{
				flags.meas.onlyBattery = 1;
 80022fa:	4b3b      	ldr	r3, [pc, #236]	; (80023e8 <measHandler+0x148>)
 80022fc:	7d1a      	ldrb	r2, [r3, #20]
 80022fe:	2120      	movs	r1, #32
 8002300:	430a      	orrs	r2, r1
 8002302:	751a      	strb	r2, [r3, #20]
				ADC_State = U_BAT;
 8002304:	4b3a      	ldr	r3, [pc, #232]	; (80023f0 <measHandler+0x150>)
 8002306:	220d      	movs	r2, #13
 8002308:	701a      	strb	r2, [r3, #0]
 800230a:	e007      	b.n	800231c <measHandler+0x7c>
			}
			else
			{
				flags.meas.onlyBattery = 0;
 800230c:	4b36      	ldr	r3, [pc, #216]	; (80023e8 <measHandler+0x148>)
 800230e:	7d1a      	ldrb	r2, [r3, #20]
 8002310:	2120      	movs	r1, #32
 8002312:	438a      	bics	r2, r1
 8002314:	751a      	strb	r2, [r3, #20]
				ADC_State = U15V;
 8002316:	4b36      	ldr	r3, [pc, #216]	; (80023f0 <measHandler+0x150>)
 8002318:	2201      	movs	r2, #1
 800231a:	701a      	strb	r2, [r3, #0]
			}
			ADC1->CHSELR = ADC_ChannelConf[ADC_State-1];
 800231c:	4b34      	ldr	r3, [pc, #208]	; (80023f0 <measHandler+0x150>)
 800231e:	781b      	ldrb	r3, [r3, #0]
 8002320:	1e59      	subs	r1, r3, #1
 8002322:	4b34      	ldr	r3, [pc, #208]	; (80023f4 <measHandler+0x154>)
 8002324:	4a34      	ldr	r2, [pc, #208]	; (80023f8 <measHandler+0x158>)
 8002326:	0089      	lsls	r1, r1, #2
 8002328:	588a      	ldr	r2, [r1, r2]
 800232a:	629a      	str	r2, [r3, #40]	; 0x28
			HAL_ADC_Start_IT(&hadc);
 800232c:	4b2f      	ldr	r3, [pc, #188]	; (80023ec <measHandler+0x14c>)
 800232e:	0018      	movs	r0, r3
 8002330:	f001 fa0a 	bl	8003748 <HAL_ADC_Start_IT>
 8002334:	e004      	b.n	8002340 <measHandler+0xa0>
		}
		else
		{
			flags.meas.measConflict = 1;
 8002336:	4b2c      	ldr	r3, [pc, #176]	; (80023e8 <measHandler+0x148>)
 8002338:	7d1a      	ldrb	r2, [r3, #20]
 800233a:	2110      	movs	r1, #16
 800233c:	430a      	orrs	r2, r1
 800233e:	751a      	strb	r2, [r3, #20]
		}
		flags.meas.measRequest = 0;
 8002340:	4b29      	ldr	r3, [pc, #164]	; (80023e8 <measHandler+0x148>)
 8002342:	7d1a      	ldrb	r2, [r3, #20]
 8002344:	2101      	movs	r1, #1
 8002346:	438a      	bics	r2, r1
 8002348:	751a      	strb	r2, [r3, #20]
	}

	if(ADC_State != ADC_WAITING && flags.meas.measDataReady)
 800234a:	4b29      	ldr	r3, [pc, #164]	; (80023f0 <measHandler+0x150>)
 800234c:	781b      	ldrb	r3, [r3, #0]
 800234e:	2b00      	cmp	r3, #0
 8002350:	d047      	beq.n	80023e2 <measHandler+0x142>
 8002352:	4b25      	ldr	r3, [pc, #148]	; (80023e8 <measHandler+0x148>)
 8002354:	695b      	ldr	r3, [r3, #20]
 8002356:	075b      	lsls	r3, r3, #29
 8002358:	0fdb      	lsrs	r3, r3, #31
 800235a:	b2db      	uxtb	r3, r3
 800235c:	2b00      	cmp	r3, #0
 800235e:	d040      	beq.n	80023e2 <measHandler+0x142>
	{

		flags.meas.measDataReady = 0;
 8002360:	4b21      	ldr	r3, [pc, #132]	; (80023e8 <measHandler+0x148>)
 8002362:	7d1a      	ldrb	r2, [r3, #20]
 8002364:	2104      	movs	r1, #4
 8002366:	438a      	bics	r2, r1
 8002368:	751a      	strb	r2, [r3, #20]

		if(ADC_State == INTERNAL_REF)	//interni reference je vždy měřena jako poslední
 800236a:	4b21      	ldr	r3, [pc, #132]	; (80023f0 <measHandler+0x150>)
 800236c:	781b      	ldrb	r3, [r3, #0]
 800236e:	2b0f      	cmp	r3, #15
 8002370:	d11a      	bne.n	80023a8 <measHandler+0x108>
		{
			ADC_Results[ADC_State-1] = HAL_ADC_GetValue(&hadc);
 8002372:	4b1f      	ldr	r3, [pc, #124]	; (80023f0 <measHandler+0x150>)
 8002374:	781b      	ldrb	r3, [r3, #0]
 8002376:	1e5c      	subs	r4, r3, #1
 8002378:	4b1c      	ldr	r3, [pc, #112]	; (80023ec <measHandler+0x14c>)
 800237a:	0018      	movs	r0, r3
 800237c:	f001 faa0 	bl	80038c0 <HAL_ADC_GetValue>
 8002380:	0001      	movs	r1, r0
 8002382:	4b1e      	ldr	r3, [pc, #120]	; (80023fc <measHandler+0x15c>)
 8002384:	00a2      	lsls	r2, r4, #2
 8002386:	50d1      	str	r1, [r2, r3]
			ADC_dataProcessing();
 8002388:	f000 f8d4 	bl	8002534 <ADC_dataProcessing>
			flags.meas.measComplete = 1;
 800238c:	4b16      	ldr	r3, [pc, #88]	; (80023e8 <measHandler+0x148>)
 800238e:	7d1a      	ldrb	r2, [r3, #20]
 8002390:	2102      	movs	r1, #2
 8002392:	430a      	orrs	r2, r1
 8002394:	751a      	strb	r2, [r3, #20]
			flags.meas.measRunning = 0;
 8002396:	4b14      	ldr	r3, [pc, #80]	; (80023e8 <measHandler+0x148>)
 8002398:	7d1a      	ldrb	r2, [r3, #20]
 800239a:	2108      	movs	r1, #8
 800239c:	438a      	bics	r2, r1
 800239e:	751a      	strb	r2, [r3, #20]
			ADC_State = ADC_WAITING;
 80023a0:	4b13      	ldr	r3, [pc, #76]	; (80023f0 <measHandler+0x150>)
 80023a2:	2200      	movs	r2, #0
 80023a4:	701a      	strb	r2, [r3, #0]
			ADC1->CHSELR = ADC_ChannelConf[ADC_State-1];	//Nastav měřený kanál

			HAL_ADC_Start_IT(&hadc);
		}
	}
}
 80023a6:	e01c      	b.n	80023e2 <measHandler+0x142>
			ADC_Results[ADC_State-1] = HAL_ADC_GetValue(&hadc);
 80023a8:	4b11      	ldr	r3, [pc, #68]	; (80023f0 <measHandler+0x150>)
 80023aa:	781b      	ldrb	r3, [r3, #0]
 80023ac:	1e5c      	subs	r4, r3, #1
 80023ae:	4b0f      	ldr	r3, [pc, #60]	; (80023ec <measHandler+0x14c>)
 80023b0:	0018      	movs	r0, r3
 80023b2:	f001 fa85 	bl	80038c0 <HAL_ADC_GetValue>
 80023b6:	0001      	movs	r1, r0
 80023b8:	4b10      	ldr	r3, [pc, #64]	; (80023fc <measHandler+0x15c>)
 80023ba:	00a2      	lsls	r2, r4, #2
 80023bc:	50d1      	str	r1, [r2, r3]
			ADC_State += 2;	//Měř další kanál (měření proudů se přeskakuje)
 80023be:	4b0c      	ldr	r3, [pc, #48]	; (80023f0 <measHandler+0x150>)
 80023c0:	781b      	ldrb	r3, [r3, #0]
 80023c2:	3302      	adds	r3, #2
 80023c4:	b2da      	uxtb	r2, r3
 80023c6:	4b0a      	ldr	r3, [pc, #40]	; (80023f0 <measHandler+0x150>)
 80023c8:	701a      	strb	r2, [r3, #0]
			ADC1->CHSELR = ADC_ChannelConf[ADC_State-1];	//Nastav měřený kanál
 80023ca:	4b09      	ldr	r3, [pc, #36]	; (80023f0 <measHandler+0x150>)
 80023cc:	781b      	ldrb	r3, [r3, #0]
 80023ce:	1e59      	subs	r1, r3, #1
 80023d0:	4b08      	ldr	r3, [pc, #32]	; (80023f4 <measHandler+0x154>)
 80023d2:	4a09      	ldr	r2, [pc, #36]	; (80023f8 <measHandler+0x158>)
 80023d4:	0089      	lsls	r1, r1, #2
 80023d6:	588a      	ldr	r2, [r1, r2]
 80023d8:	629a      	str	r2, [r3, #40]	; 0x28
			HAL_ADC_Start_IT(&hadc);
 80023da:	4b04      	ldr	r3, [pc, #16]	; (80023ec <measHandler+0x14c>)
 80023dc:	0018      	movs	r0, r3
 80023de:	f001 f9b3 	bl	8003748 <HAL_ADC_Start_IT>
}
 80023e2:	46c0      	nop			; (mov r8, r8)
 80023e4:	46bd      	mov	sp, r7
 80023e6:	bdb0      	pop	{r4, r5, r7, pc}
 80023e8:	200003d8 	.word	0x200003d8
 80023ec:	20000214 	.word	0x20000214
 80023f0:	20000400 	.word	0x20000400
 80023f4:	40012400 	.word	0x40012400
 80023f8:	0800e3b0 	.word	0x0800e3b0
 80023fc:	20000384 	.word	0x20000384

08002400 <calibHandler>:

static void calibHandler()
{
 8002400:	b580      	push	{r7, lr}
 8002402:	b082      	sub	sp, #8
 8002404:	af00      	add	r7, sp, #0
	static uint32_t savedSec;

	if(flags.instructions.calibRequest)
 8002406:	4b44      	ldr	r3, [pc, #272]	; (8002518 <calibHandler+0x118>)
 8002408:	68db      	ldr	r3, [r3, #12]
 800240a:	071b      	lsls	r3, r3, #28
 800240c:	0fdb      	lsrs	r3, r3, #31
 800240e:	b2db      	uxtb	r3, r3
 8002410:	2b00      	cmp	r3, #0
 8002412:	d032      	beq.n	800247a <calibHandler+0x7a>
	{
		sourceInTesting = &regValues[regCount - 1];
 8002414:	4b41      	ldr	r3, [pc, #260]	; (800251c <calibHandler+0x11c>)
 8002416:	681a      	ldr	r2, [r3, #0]
 8002418:	4b41      	ldr	r3, [pc, #260]	; (8002520 <calibHandler+0x120>)
 800241a:	781b      	ldrb	r3, [r3, #0]
 800241c:	3b01      	subs	r3, #1
 800241e:	18d2      	adds	r2, r2, r3
 8002420:	4b40      	ldr	r3, [pc, #256]	; (8002524 <calibHandler+0x124>)
 8002422:	601a      	str	r2, [r3, #0]

		for(int i = 0; i < regCount; i++)
 8002424:	2300      	movs	r3, #0
 8002426:	607b      	str	r3, [r7, #4]
 8002428:	e008      	b.n	800243c <calibHandler+0x3c>
		{
			regValues[i] = 0;
 800242a:	4b3c      	ldr	r3, [pc, #240]	; (800251c <calibHandler+0x11c>)
 800242c:	681a      	ldr	r2, [r3, #0]
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	18d3      	adds	r3, r2, r3
 8002432:	2200      	movs	r2, #0
 8002434:	701a      	strb	r2, [r3, #0]
		for(int i = 0; i < regCount; i++)
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	3301      	adds	r3, #1
 800243a:	607b      	str	r3, [r7, #4]
 800243c:	4b38      	ldr	r3, [pc, #224]	; (8002520 <calibHandler+0x120>)
 800243e:	781b      	ldrb	r3, [r3, #0]
 8002440:	001a      	movs	r2, r3
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	4293      	cmp	r3, r2
 8002446:	dbf0      	blt.n	800242a <calibHandler+0x2a>
		}
		RELAY_ON(*sourceInTesting);	//připojit relé
 8002448:	4b36      	ldr	r3, [pc, #216]	; (8002524 <calibHandler+0x124>)
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	781a      	ldrb	r2, [r3, #0]
 800244e:	4b35      	ldr	r3, [pc, #212]	; (8002524 <calibHandler+0x124>)
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	2102      	movs	r1, #2
 8002454:	430a      	orrs	r2, r1
 8002456:	b2d2      	uxtb	r2, r2
 8002458:	701a      	strb	r2, [r3, #0]

		sendData();	//poslat konfiguraci shift registrům
 800245a:	f000 fa21 	bl	80028a0 <sendData>

		savedSec = sysTime[SYSTIME_SEC];
 800245e:	4b32      	ldr	r3, [pc, #200]	; (8002528 <calibHandler+0x128>)
 8002460:	685a      	ldr	r2, [r3, #4]
 8002462:	4b32      	ldr	r3, [pc, #200]	; (800252c <calibHandler+0x12c>)
 8002464:	601a      	str	r2, [r3, #0]

		flags.instructions.calibRequest = 0;
 8002466:	4b2c      	ldr	r3, [pc, #176]	; (8002518 <calibHandler+0x118>)
 8002468:	7b1a      	ldrb	r2, [r3, #12]
 800246a:	2108      	movs	r1, #8
 800246c:	438a      	bics	r2, r1
 800246e:	731a      	strb	r2, [r3, #12]
		flags.calibRunning = 1;
 8002470:	4b29      	ldr	r3, [pc, #164]	; (8002518 <calibHandler+0x118>)
 8002472:	7e1a      	ldrb	r2, [r3, #24]
 8002474:	2108      	movs	r1, #8
 8002476:	430a      	orrs	r2, r1
 8002478:	761a      	strb	r2, [r3, #24]


	}
	if(flags.calibRunning)
 800247a:	4b27      	ldr	r3, [pc, #156]	; (8002518 <calibHandler+0x118>)
 800247c:	699b      	ldr	r3, [r3, #24]
 800247e:	071b      	lsls	r3, r3, #28
 8002480:	0fdb      	lsrs	r3, r3, #31
 8002482:	b2db      	uxtb	r3, r3
 8002484:	2b00      	cmp	r3, #0
 8002486:	d043      	beq.n	8002510 <calibHandler+0x110>
	{
		static uint8_t lock = 0;
		if((sysTime[SYSTIME_SEC] >= savedSec + 3) & !lock)
 8002488:	4b27      	ldr	r3, [pc, #156]	; (8002528 <calibHandler+0x128>)
 800248a:	6859      	ldr	r1, [r3, #4]
 800248c:	4b27      	ldr	r3, [pc, #156]	; (800252c <calibHandler+0x12c>)
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	1cda      	adds	r2, r3, #3
 8002492:	2300      	movs	r3, #0
 8002494:	4291      	cmp	r1, r2
 8002496:	415b      	adcs	r3, r3
 8002498:	b2db      	uxtb	r3, r3
 800249a:	4a25      	ldr	r2, [pc, #148]	; (8002530 <calibHandler+0x130>)
 800249c:	7812      	ldrb	r2, [r2, #0]
 800249e:	4251      	negs	r1, r2
 80024a0:	414a      	adcs	r2, r1
 80024a2:	b2d2      	uxtb	r2, r2
 80024a4:	4013      	ands	r3, r2
 80024a6:	b2db      	uxtb	r3, r3
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d00c      	beq.n	80024c6 <calibHandler+0xc6>
		{
			flags.meas.measRequest = 1;
 80024ac:	4b1a      	ldr	r3, [pc, #104]	; (8002518 <calibHandler+0x118>)
 80024ae:	7d1a      	ldrb	r2, [r3, #20]
 80024b0:	2101      	movs	r1, #1
 80024b2:	430a      	orrs	r2, r1
 80024b4:	751a      	strb	r2, [r3, #20]
			flags.meas.calibMeas = 1;
 80024b6:	4b18      	ldr	r3, [pc, #96]	; (8002518 <calibHandler+0x118>)
 80024b8:	7d1a      	ldrb	r2, [r3, #20]
 80024ba:	2140      	movs	r1, #64	; 0x40
 80024bc:	430a      	orrs	r2, r1
 80024be:	751a      	strb	r2, [r3, #20]
			lock = 1;
 80024c0:	4b1b      	ldr	r3, [pc, #108]	; (8002530 <calibHandler+0x130>)
 80024c2:	2201      	movs	r2, #1
 80024c4:	701a      	strb	r2, [r3, #0]
		}
		if(flags.instructions.calibDone)
 80024c6:	4b14      	ldr	r3, [pc, #80]	; (8002518 <calibHandler+0x118>)
 80024c8:	68db      	ldr	r3, [r3, #12]
 80024ca:	06db      	lsls	r3, r3, #27
 80024cc:	0fdb      	lsrs	r3, r3, #31
 80024ce:	b2db      	uxtb	r3, r3
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d01d      	beq.n	8002510 <calibHandler+0x110>
		{
			for(int i = 0; i < regCount; i++)
 80024d4:	2300      	movs	r3, #0
 80024d6:	603b      	str	r3, [r7, #0]
 80024d8:	e008      	b.n	80024ec <calibHandler+0xec>
			{
				regValues[i] = 0;
 80024da:	4b10      	ldr	r3, [pc, #64]	; (800251c <calibHandler+0x11c>)
 80024dc:	681a      	ldr	r2, [r3, #0]
 80024de:	683b      	ldr	r3, [r7, #0]
 80024e0:	18d3      	adds	r3, r2, r3
 80024e2:	2200      	movs	r2, #0
 80024e4:	701a      	strb	r2, [r3, #0]
			for(int i = 0; i < regCount; i++)
 80024e6:	683b      	ldr	r3, [r7, #0]
 80024e8:	3301      	adds	r3, #1
 80024ea:	603b      	str	r3, [r7, #0]
 80024ec:	4b0c      	ldr	r3, [pc, #48]	; (8002520 <calibHandler+0x120>)
 80024ee:	781b      	ldrb	r3, [r3, #0]
 80024f0:	001a      	movs	r2, r3
 80024f2:	683b      	ldr	r3, [r7, #0]
 80024f4:	4293      	cmp	r3, r2
 80024f6:	dbf0      	blt.n	80024da <calibHandler+0xda>
			}

			sendData();	//poslat konfiguraci shift registrům
 80024f8:	f000 f9d2 	bl	80028a0 <sendData>
			flags.calibRunning = 0;
 80024fc:	4b06      	ldr	r3, [pc, #24]	; (8002518 <calibHandler+0x118>)
 80024fe:	7e1a      	ldrb	r2, [r3, #24]
 8002500:	2108      	movs	r1, #8
 8002502:	438a      	bics	r2, r1
 8002504:	761a      	strb	r2, [r3, #24]
			flags.instructions.calibDone = 0;
 8002506:	4b04      	ldr	r3, [pc, #16]	; (8002518 <calibHandler+0x118>)
 8002508:	7b1a      	ldrb	r2, [r3, #12]
 800250a:	2110      	movs	r1, #16
 800250c:	438a      	bics	r2, r1
 800250e:	731a      	strb	r2, [r3, #12]
		}
	}
}
 8002510:	46c0      	nop			; (mov r8, r8)
 8002512:	46bd      	mov	sp, r7
 8002514:	b002      	add	sp, #8
 8002516:	bd80      	pop	{r7, pc}
 8002518:	200003d8 	.word	0x200003d8
 800251c:	2000040c 	.word	0x2000040c
 8002520:	20000410 	.word	0x20000410
 8002524:	20000420 	.word	0x20000420
 8002528:	200003c8 	.word	0x200003c8
 800252c:	20000404 	.word	0x20000404
 8002530:	20000408 	.word	0x20000408

08002534 <ADC_dataProcessing>:

//_____Zpracování naměřených dat_____//
static void ADC_dataProcessing()
{
 8002534:	b580      	push	{r7, lr}
 8002536:	af00      	add	r7, sp, #0
		vMeas[i] += interRef*2048;
		vMeas[i] /= interRef*4095;
		vMeasT[i] = vMeas[i] * transferConsts[i];
	}*/

	return;
 8002538:	46c0      	nop			; (mov r8, r8)
	//return ADC_Buffer[10];
}
 800253a:	46bd      	mov	sp, r7
 800253c:	bd80      	pop	{r7, pc}

0800253e <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800253e:	b580      	push	{r7, lr}
 8002540:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002542:	b672      	cpsid	i
}
 8002544:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002546:	e7fe      	b.n	8002546 <Error_Handler+0x8>

08002548 <createBuffer>:
 8002548:	b580      	push	{r7, lr}
 800254a:	b084      	sub	sp, #16
 800254c:	af00      	add	r7, sp, #0
 800254e:	6078      	str	r0, [r7, #4]
 8002550:	2018      	movs	r0, #24
 8002552:	f00b f9d3 	bl	800d8fc <malloc>
 8002556:	0003      	movs	r3, r0
 8002558:	60fb      	str	r3, [r7, #12]
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	2b00      	cmp	r3, #0
 800255e:	d101      	bne.n	8002564 <createBuffer+0x1c>
 8002560:	2300      	movs	r3, #0
 8002562:	e022      	b.n	80025aa <createBuffer+0x62>
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	0018      	movs	r0, r3
 8002568:	f00b f9c8 	bl	800d8fc <malloc>
 800256c:	0003      	movs	r3, r0
 800256e:	001a      	movs	r2, r3
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	601a      	str	r2, [r3, #0]
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	2b00      	cmp	r3, #0
 800257a:	d105      	bne.n	8002588 <createBuffer+0x40>
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	0018      	movs	r0, r3
 8002580:	f00b f9c6 	bl	800d910 <free>
 8002584:	2300      	movs	r3, #0
 8002586:	e010      	b.n	80025aa <createBuffer+0x62>
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	687a      	ldr	r2, [r7, #4]
 800258c:	605a      	str	r2, [r3, #4]
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	2200      	movs	r2, #0
 8002592:	609a      	str	r2, [r3, #8]
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	2200      	movs	r2, #0
 8002598:	60da      	str	r2, [r3, #12]
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	1e5a      	subs	r2, r3, #1
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	611a      	str	r2, [r3, #16]
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	2201      	movs	r2, #1
 80025a6:	751a      	strb	r2, [r3, #20]
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	0018      	movs	r0, r3
 80025ac:	46bd      	mov	sp, r7
 80025ae:	b004      	add	sp, #16
 80025b0:	bd80      	pop	{r7, pc}

080025b2 <clearBuffer>:
 80025b2:	b580      	push	{r7, lr}
 80025b4:	b082      	sub	sp, #8
 80025b6:	af00      	add	r7, sp, #0
 80025b8:	6078      	str	r0, [r7, #4]
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	2200      	movs	r2, #0
 80025be:	609a      	str	r2, [r3, #8]
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	2200      	movs	r2, #0
 80025c4:	60da      	str	r2, [r3, #12]
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	685b      	ldr	r3, [r3, #4]
 80025ca:	1e5a      	subs	r2, r3, #1
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	611a      	str	r2, [r3, #16]
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	2201      	movs	r2, #1
 80025d4:	751a      	strb	r2, [r3, #20]
 80025d6:	46c0      	nop			; (mov r8, r8)
 80025d8:	46bd      	mov	sp, r7
 80025da:	b002      	add	sp, #8
 80025dc:	bd80      	pop	{r7, pc}

080025de <push>:
 80025de:	b580      	push	{r7, lr}
 80025e0:	b082      	sub	sp, #8
 80025e2:	af00      	add	r7, sp, #0
 80025e4:	6078      	str	r0, [r7, #4]
 80025e6:	000a      	movs	r2, r1
 80025e8:	1cfb      	adds	r3, r7, #3
 80025ea:	701a      	strb	r2, [r3, #0]
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	7d1b      	ldrb	r3, [r3, #20]
 80025f0:	2b02      	cmp	r3, #2
 80025f2:	d101      	bne.n	80025f8 <push+0x1a>
 80025f4:	2302      	movs	r3, #2
 80025f6:	e025      	b.n	8002644 <push+0x66>
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	691b      	ldr	r3, [r3, #16]
 80025fc:	1c5a      	adds	r2, r3, #1
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	685b      	ldr	r3, [r3, #4]
 8002602:	0019      	movs	r1, r3
 8002604:	0010      	movs	r0, r2
 8002606:	f7fd ff01 	bl	800040c <__aeabi_idivmod>
 800260a:	000b      	movs	r3, r1
 800260c:	001a      	movs	r2, r3
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	611a      	str	r2, [r3, #16]
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	689b      	ldr	r3, [r3, #8]
 8002616:	1c5a      	adds	r2, r3, #1
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	609a      	str	r2, [r3, #8]
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681a      	ldr	r2, [r3, #0]
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	691b      	ldr	r3, [r3, #16]
 8002624:	18d3      	adds	r3, r2, r3
 8002626:	1cfa      	adds	r2, r7, #3
 8002628:	7812      	ldrb	r2, [r2, #0]
 800262a:	701a      	strb	r2, [r3, #0]
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	689a      	ldr	r2, [r3, #8]
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	685b      	ldr	r3, [r3, #4]
 8002634:	429a      	cmp	r2, r3
 8002636:	db01      	blt.n	800263c <push+0x5e>
 8002638:	2202      	movs	r2, #2
 800263a:	e000      	b.n	800263e <push+0x60>
 800263c:	2200      	movs	r2, #0
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	751a      	strb	r2, [r3, #20]
 8002642:	2300      	movs	r3, #0
 8002644:	0018      	movs	r0, r3
 8002646:	46bd      	mov	sp, r7
 8002648:	b002      	add	sp, #8
 800264a:	bd80      	pop	{r7, pc}

0800264c <pushStr>:
 800264c:	b580      	push	{r7, lr}
 800264e:	b086      	sub	sp, #24
 8002650:	af00      	add	r7, sp, #0
 8002652:	60f8      	str	r0, [r7, #12]
 8002654:	60b9      	str	r1, [r7, #8]
 8002656:	607a      	str	r2, [r7, #4]
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	685a      	ldr	r2, [r3, #4]
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	6899      	ldr	r1, [r3, #8]
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	18cb      	adds	r3, r1, r3
 8002664:	429a      	cmp	r2, r3
 8002666:	da01      	bge.n	800266c <pushStr+0x20>
 8002668:	2302      	movs	r3, #2
 800266a:	e013      	b.n	8002694 <pushStr+0x48>
 800266c:	2300      	movs	r3, #0
 800266e:	617b      	str	r3, [r7, #20]
 8002670:	e00b      	b.n	800268a <pushStr+0x3e>
 8002672:	697b      	ldr	r3, [r7, #20]
 8002674:	68ba      	ldr	r2, [r7, #8]
 8002676:	18d3      	adds	r3, r2, r3
 8002678:	781a      	ldrb	r2, [r3, #0]
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	0011      	movs	r1, r2
 800267e:	0018      	movs	r0, r3
 8002680:	f7ff ffad 	bl	80025de <push>
 8002684:	697b      	ldr	r3, [r7, #20]
 8002686:	3301      	adds	r3, #1
 8002688:	617b      	str	r3, [r7, #20]
 800268a:	697a      	ldr	r2, [r7, #20]
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	429a      	cmp	r2, r3
 8002690:	dbef      	blt.n	8002672 <pushStr+0x26>
 8002692:	2300      	movs	r3, #0
 8002694:	0018      	movs	r0, r3
 8002696:	46bd      	mov	sp, r7
 8002698:	b006      	add	sp, #24
 800269a:	bd80      	pop	{r7, pc}

0800269c <pop>:
 800269c:	b580      	push	{r7, lr}
 800269e:	b082      	sub	sp, #8
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	6078      	str	r0, [r7, #4]
 80026a4:	6039      	str	r1, [r7, #0]
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	7d1b      	ldrb	r3, [r3, #20]
 80026aa:	2b01      	cmp	r3, #1
 80026ac:	d101      	bne.n	80026b2 <pop+0x16>
 80026ae:	2301      	movs	r3, #1
 80026b0:	e023      	b.n	80026fa <pop+0x5e>
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681a      	ldr	r2, [r3, #0]
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	68db      	ldr	r3, [r3, #12]
 80026ba:	18d3      	adds	r3, r2, r3
 80026bc:	781a      	ldrb	r2, [r3, #0]
 80026be:	683b      	ldr	r3, [r7, #0]
 80026c0:	701a      	strb	r2, [r3, #0]
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	68db      	ldr	r3, [r3, #12]
 80026c6:	1c5a      	adds	r2, r3, #1
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	685b      	ldr	r3, [r3, #4]
 80026cc:	0019      	movs	r1, r3
 80026ce:	0010      	movs	r0, r2
 80026d0:	f7fd fe9c 	bl	800040c <__aeabi_idivmod>
 80026d4:	000b      	movs	r3, r1
 80026d6:	001a      	movs	r2, r3
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	60da      	str	r2, [r3, #12]
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	689b      	ldr	r3, [r3, #8]
 80026e0:	1e5a      	subs	r2, r3, #1
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	609a      	str	r2, [r3, #8]
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	689b      	ldr	r3, [r3, #8]
 80026ea:	1e5a      	subs	r2, r3, #1
 80026ec:	4313      	orrs	r3, r2
 80026ee:	0fdb      	lsrs	r3, r3, #31
 80026f0:	b2db      	uxtb	r3, r3
 80026f2:	001a      	movs	r2, r3
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	751a      	strb	r2, [r3, #20]
 80026f8:	2300      	movs	r3, #0
 80026fa:	0018      	movs	r0, r3
 80026fc:	46bd      	mov	sp, r7
 80026fe:	b002      	add	sp, #8
 8002700:	bd80      	pop	{r7, pc}

08002702 <at>:
 8002702:	b580      	push	{r7, lr}
 8002704:	b086      	sub	sp, #24
 8002706:	af00      	add	r7, sp, #0
 8002708:	60f8      	str	r0, [r7, #12]
 800270a:	60b9      	str	r1, [r7, #8]
 800270c:	607a      	str	r2, [r7, #4]
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	7d1b      	ldrb	r3, [r3, #20]
 8002712:	2b01      	cmp	r3, #1
 8002714:	d101      	bne.n	800271a <at+0x18>
 8002716:	2301      	movs	r3, #1
 8002718:	e01a      	b.n	8002750 <at+0x4e>
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	689b      	ldr	r3, [r3, #8]
 800271e:	68ba      	ldr	r2, [r7, #8]
 8002720:	429a      	cmp	r2, r3
 8002722:	db01      	blt.n	8002728 <at+0x26>
 8002724:	2303      	movs	r3, #3
 8002726:	e013      	b.n	8002750 <at+0x4e>
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	68da      	ldr	r2, [r3, #12]
 800272c:	68bb      	ldr	r3, [r7, #8]
 800272e:	18d2      	adds	r2, r2, r3
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	685b      	ldr	r3, [r3, #4]
 8002734:	0019      	movs	r1, r3
 8002736:	0010      	movs	r0, r2
 8002738:	f7fd fe68 	bl	800040c <__aeabi_idivmod>
 800273c:	000b      	movs	r3, r1
 800273e:	617b      	str	r3, [r7, #20]
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	681a      	ldr	r2, [r3, #0]
 8002744:	697b      	ldr	r3, [r7, #20]
 8002746:	18d3      	adds	r3, r2, r3
 8002748:	781a      	ldrb	r2, [r3, #0]
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	701a      	strb	r2, [r3, #0]
 800274e:	2300      	movs	r3, #0
 8002750:	0018      	movs	r0, r3
 8002752:	46bd      	mov	sp, r7
 8002754:	b006      	add	sp, #24
 8002756:	bd80      	pop	{r7, pc}

08002758 <getCount>:



//_____Zjistí počet registrů_____//
static uint8_t getCount(void)
{
 8002758:	b580      	push	{r7, lr}
 800275a:	b084      	sub	sp, #16
 800275c:	af02      	add	r7, sp, #8
	uint8_t question;
	uint8_t answer;
	regCount = 0;
 800275e:	4b1f      	ldr	r3, [pc, #124]	; (80027dc <getCount+0x84>)
 8002760:	2200      	movs	r2, #0
 8002762:	701a      	strb	r2, [r3, #0]

	do
	{
		question = 42;
 8002764:	1dfb      	adds	r3, r7, #7
 8002766:	222a      	movs	r2, #42	; 0x2a
 8002768:	701a      	strb	r2, [r3, #0]
		answer = 0;
 800276a:	1dbb      	adds	r3, r7, #6
 800276c:	2200      	movs	r2, #0
 800276e:	701a      	strb	r2, [r3, #0]
		if(HAL_SPI_TransmitReceive(&hspi1, &question, &answer, 1, 100) != HAL_OK)
 8002770:	1dba      	adds	r2, r7, #6
 8002772:	1df9      	adds	r1, r7, #7
 8002774:	481a      	ldr	r0, [pc, #104]	; (80027e0 <getCount+0x88>)
 8002776:	2364      	movs	r3, #100	; 0x64
 8002778:	9300      	str	r3, [sp, #0]
 800277a:	2301      	movs	r3, #1
 800277c:	f004 fe34 	bl	80073e8 <HAL_SPI_TransmitReceive>
 8002780:	1e03      	subs	r3, r0, #0
 8002782:	d001      	beq.n	8002788 <getCount+0x30>
			return 0;
 8002784:	2300      	movs	r3, #0
 8002786:	e024      	b.n	80027d2 <getCount+0x7a>
		regCount++;
 8002788:	4b14      	ldr	r3, [pc, #80]	; (80027dc <getCount+0x84>)
 800278a:	781b      	ldrb	r3, [r3, #0]
 800278c:	3301      	adds	r3, #1
 800278e:	b2da      	uxtb	r2, r3
 8002790:	4b12      	ldr	r3, [pc, #72]	; (80027dc <getCount+0x84>)
 8002792:	701a      	strb	r2, [r3, #0]

		HAL_Delay(1);
 8002794:	2001      	movs	r0, #1
 8002796:	f000 fe73 	bl	8003480 <HAL_Delay>

		if(regCount >= 100)	//Ošetření nepřipojených relé desek
 800279a:	4b10      	ldr	r3, [pc, #64]	; (80027dc <getCount+0x84>)
 800279c:	781b      	ldrb	r3, [r3, #0]
 800279e:	2b63      	cmp	r3, #99	; 0x63
 80027a0:	d909      	bls.n	80027b6 <getCount+0x5e>
		{
			flags.conErr = 1;
 80027a2:	4b10      	ldr	r3, [pc, #64]	; (80027e4 <getCount+0x8c>)
 80027a4:	7e1a      	ldrb	r2, [r3, #24]
 80027a6:	2140      	movs	r1, #64	; 0x40
 80027a8:	430a      	orrs	r2, r1
 80027aa:	761a      	strb	r2, [r3, #24]
			regCount = 0;
 80027ac:	4b0b      	ldr	r3, [pc, #44]	; (80027dc <getCount+0x84>)
 80027ae:	2200      	movs	r2, #0
 80027b0:	701a      	strb	r2, [r3, #0]
			return 0;
 80027b2:	2300      	movs	r3, #0
 80027b4:	e00d      	b.n	80027d2 <getCount+0x7a>
		}
	}
	while(answer != question);
 80027b6:	1dbb      	adds	r3, r7, #6
 80027b8:	781a      	ldrb	r2, [r3, #0]
 80027ba:	1dfb      	adds	r3, r7, #7
 80027bc:	781b      	ldrb	r3, [r3, #0]
 80027be:	429a      	cmp	r2, r3
 80027c0:	d1d0      	bne.n	8002764 <getCount+0xc>

	regCount--;
 80027c2:	4b06      	ldr	r3, [pc, #24]	; (80027dc <getCount+0x84>)
 80027c4:	781b      	ldrb	r3, [r3, #0]
 80027c6:	3b01      	subs	r3, #1
 80027c8:	b2da      	uxtb	r2, r3
 80027ca:	4b04      	ldr	r3, [pc, #16]	; (80027dc <getCount+0x84>)
 80027cc:	701a      	strb	r2, [r3, #0]

	return regCount;
 80027ce:	4b03      	ldr	r3, [pc, #12]	; (80027dc <getCount+0x84>)
 80027d0:	781b      	ldrb	r3, [r3, #0]
}
 80027d2:	0018      	movs	r0, r3
 80027d4:	46bd      	mov	sp, r7
 80027d6:	b002      	add	sp, #8
 80027d8:	bd80      	pop	{r7, pc}
 80027da:	46c0      	nop			; (mov r8, r8)
 80027dc:	20000410 	.word	0x20000410
 80027e0:	20000254 	.word	0x20000254
 80027e4:	200003d8 	.word	0x200003d8

080027e8 <regInit>:

//_____Inicializuje registry_____//
REG_STATE regInit(void)
{
 80027e8:	b580      	push	{r7, lr}
 80027ea:	b082      	sub	sp, #8
 80027ec:	af00      	add	r7, sp, #0
	//___Clear registrů___//
	REG_CLR_ACTIVE;
 80027ee:	2380      	movs	r3, #128	; 0x80
 80027f0:	019b      	lsls	r3, r3, #6
 80027f2:	4827      	ldr	r0, [pc, #156]	; (8002890 <regInit+0xa8>)
 80027f4:	2200      	movs	r2, #0
 80027f6:	0019      	movs	r1, r3
 80027f8:	f001 ff1f 	bl	800463a <HAL_GPIO_WritePin>
	HAL_Delay(5);
 80027fc:	2005      	movs	r0, #5
 80027fe:	f000 fe3f 	bl	8003480 <HAL_Delay>
	REG_CLR_INACTIVE;
 8002802:	2380      	movs	r3, #128	; 0x80
 8002804:	019b      	lsls	r3, r3, #6
 8002806:	4822      	ldr	r0, [pc, #136]	; (8002890 <regInit+0xa8>)
 8002808:	2201      	movs	r2, #1
 800280a:	0019      	movs	r1, r3
 800280c:	f001 ff15 	bl	800463a <HAL_GPIO_WritePin>

	REG_DISABLE;
 8002810:	2380      	movs	r3, #128	; 0x80
 8002812:	021b      	lsls	r3, r3, #8
 8002814:	481e      	ldr	r0, [pc, #120]	; (8002890 <regInit+0xa8>)
 8002816:	2201      	movs	r2, #1
 8002818:	0019      	movs	r1, r3
 800281a:	f001 ff0e 	bl	800463a <HAL_GPIO_WritePin>

		if(getCount() == 0)
 800281e:	f7ff ff9b 	bl	8002758 <getCount>
 8002822:	1e03      	subs	r3, r0, #0
 8002824:	d101      	bne.n	800282a <regInit+0x42>
		{
			return REG_CON_ERR;	//Connection error
 8002826:	2301      	movs	r3, #1
 8002828:	e02e      	b.n	8002888 <regInit+0xa0>
		}

		regValues = (uint8_t*) malloc(regCount * sizeof(uint8_t));
 800282a:	4b1a      	ldr	r3, [pc, #104]	; (8002894 <regInit+0xac>)
 800282c:	781b      	ldrb	r3, [r3, #0]
 800282e:	0018      	movs	r0, r3
 8002830:	f00b f864 	bl	800d8fc <malloc>
 8002834:	0003      	movs	r3, r0
 8002836:	001a      	movs	r2, r3
 8002838:	4b17      	ldr	r3, [pc, #92]	; (8002898 <regInit+0xb0>)
 800283a:	601a      	str	r2, [r3, #0]
		if(regValues == NULL)
 800283c:	4b16      	ldr	r3, [pc, #88]	; (8002898 <regInit+0xb0>)
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	2b00      	cmp	r3, #0
 8002842:	d104      	bne.n	800284e <regInit+0x66>
		{
			regState = REG_ERR;
 8002844:	4b15      	ldr	r3, [pc, #84]	; (800289c <regInit+0xb4>)
 8002846:	2202      	movs	r2, #2
 8002848:	701a      	strb	r2, [r3, #0]
			return REG_ERR;
 800284a:	2302      	movs	r3, #2
 800284c:	e01c      	b.n	8002888 <regInit+0xa0>
		}

		for(int i = 0; i < regCount; i++)
 800284e:	2300      	movs	r3, #0
 8002850:	607b      	str	r3, [r7, #4]
 8002852:	e008      	b.n	8002866 <regInit+0x7e>
		{
			regValues[i] = 0;
 8002854:	4b10      	ldr	r3, [pc, #64]	; (8002898 <regInit+0xb0>)
 8002856:	681a      	ldr	r2, [r3, #0]
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	18d3      	adds	r3, r2, r3
 800285c:	2200      	movs	r2, #0
 800285e:	701a      	strb	r2, [r3, #0]
		for(int i = 0; i < regCount; i++)
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	3301      	adds	r3, #1
 8002864:	607b      	str	r3, [r7, #4]
 8002866:	4b0b      	ldr	r3, [pc, #44]	; (8002894 <regInit+0xac>)
 8002868:	781b      	ldrb	r3, [r3, #0]
 800286a:	001a      	movs	r2, r3
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	4293      	cmp	r3, r2
 8002870:	dbf0      	blt.n	8002854 <regInit+0x6c>
		}

		sendData();
 8002872:	f000 f815 	bl	80028a0 <sendData>

	REG_ENABLE;
 8002876:	2380      	movs	r3, #128	; 0x80
 8002878:	021b      	lsls	r3, r3, #8
 800287a:	4805      	ldr	r0, [pc, #20]	; (8002890 <regInit+0xa8>)
 800287c:	2200      	movs	r2, #0
 800287e:	0019      	movs	r1, r3
 8002880:	f001 fedb 	bl	800463a <HAL_GPIO_WritePin>

	return regState;
 8002884:	4b05      	ldr	r3, [pc, #20]	; (800289c <regInit+0xb4>)
 8002886:	781b      	ldrb	r3, [r3, #0]
}
 8002888:	0018      	movs	r0, r3
 800288a:	46bd      	mov	sp, r7
 800288c:	b002      	add	sp, #8
 800288e:	bd80      	pop	{r7, pc}
 8002890:	48000400 	.word	0x48000400
 8002894:	20000410 	.word	0x20000410
 8002898:	2000040c 	.word	0x2000040c
 800289c:	20000409 	.word	0x20000409

080028a0 <sendData>:

//_____Pošle data z regValues do registrů_____//
REG_STATE sendData(void)
{
 80028a0:	b580      	push	{r7, lr}
 80028a2:	af00      	add	r7, sp, #0
	if(HAL_SPI_Transmit(&hspi1, &regValues[0], regCount, 100) == HAL_OK)
 80028a4:	4b15      	ldr	r3, [pc, #84]	; (80028fc <sendData+0x5c>)
 80028a6:	6819      	ldr	r1, [r3, #0]
 80028a8:	4b15      	ldr	r3, [pc, #84]	; (8002900 <sendData+0x60>)
 80028aa:	781b      	ldrb	r3, [r3, #0]
 80028ac:	b29a      	uxth	r2, r3
 80028ae:	4815      	ldr	r0, [pc, #84]	; (8002904 <sendData+0x64>)
 80028b0:	2364      	movs	r3, #100	; 0x64
 80028b2:	f004 fc41 	bl	8007138 <HAL_SPI_Transmit>
 80028b6:	1e03      	subs	r3, r0, #0
 80028b8:	d111      	bne.n	80028de <sendData+0x3e>
	{
		//vytvoř pulz na RCLK¨
		REG_RCLK_HIGH;
 80028ba:	2380      	movs	r3, #128	; 0x80
 80028bc:	01db      	lsls	r3, r3, #7
 80028be:	4812      	ldr	r0, [pc, #72]	; (8002908 <sendData+0x68>)
 80028c0:	2201      	movs	r2, #1
 80028c2:	0019      	movs	r1, r3
 80028c4:	f001 feb9 	bl	800463a <HAL_GPIO_WritePin>
		//HAL_Delay(1);
		REG_RCLK_LOW;
 80028c8:	2380      	movs	r3, #128	; 0x80
 80028ca:	01db      	lsls	r3, r3, #7
 80028cc:	480e      	ldr	r0, [pc, #56]	; (8002908 <sendData+0x68>)
 80028ce:	2200      	movs	r2, #0
 80028d0:	0019      	movs	r1, r3
 80028d2:	f001 feb2 	bl	800463a <HAL_GPIO_WritePin>

		regState = REG_OK;
 80028d6:	4b0d      	ldr	r3, [pc, #52]	; (800290c <sendData+0x6c>)
 80028d8:	2200      	movs	r2, #0
 80028da:	701a      	strb	r2, [r3, #0]
 80028dc:	e009      	b.n	80028f2 <sendData+0x52>
	}
	else
	{
		regState = REG_ERR;
 80028de:	4b0b      	ldr	r3, [pc, #44]	; (800290c <sendData+0x6c>)
 80028e0:	2202      	movs	r2, #2
 80028e2:	701a      	strb	r2, [r3, #0]

		REG_DISABLE;	//výstup ve stavu vysoké impedance (zabrání nechtěnému nastavení relé)
 80028e4:	2380      	movs	r3, #128	; 0x80
 80028e6:	021b      	lsls	r3, r3, #8
 80028e8:	4807      	ldr	r0, [pc, #28]	; (8002908 <sendData+0x68>)
 80028ea:	2201      	movs	r2, #1
 80028ec:	0019      	movs	r1, r3
 80028ee:	f001 fea4 	bl	800463a <HAL_GPIO_WritePin>
	}

	return regState;
 80028f2:	4b06      	ldr	r3, [pc, #24]	; (800290c <sendData+0x6c>)
 80028f4:	781b      	ldrb	r3, [r3, #0]
}
 80028f6:	0018      	movs	r0, r3
 80028f8:	46bd      	mov	sp, r7
 80028fa:	bd80      	pop	{r7, pc}
 80028fc:	2000040c 	.word	0x2000040c
 8002900:	20000410 	.word	0x20000410
 8002904:	20000254 	.word	0x20000254
 8002908:	48000400 	.word	0x48000400
 800290c:	20000409 	.word	0x20000409

08002910 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002910:	b580      	push	{r7, lr}
 8002912:	b082      	sub	sp, #8
 8002914:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002916:	4b0f      	ldr	r3, [pc, #60]	; (8002954 <HAL_MspInit+0x44>)
 8002918:	699a      	ldr	r2, [r3, #24]
 800291a:	4b0e      	ldr	r3, [pc, #56]	; (8002954 <HAL_MspInit+0x44>)
 800291c:	2101      	movs	r1, #1
 800291e:	430a      	orrs	r2, r1
 8002920:	619a      	str	r2, [r3, #24]
 8002922:	4b0c      	ldr	r3, [pc, #48]	; (8002954 <HAL_MspInit+0x44>)
 8002924:	699b      	ldr	r3, [r3, #24]
 8002926:	2201      	movs	r2, #1
 8002928:	4013      	ands	r3, r2
 800292a:	607b      	str	r3, [r7, #4]
 800292c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800292e:	4b09      	ldr	r3, [pc, #36]	; (8002954 <HAL_MspInit+0x44>)
 8002930:	69da      	ldr	r2, [r3, #28]
 8002932:	4b08      	ldr	r3, [pc, #32]	; (8002954 <HAL_MspInit+0x44>)
 8002934:	2180      	movs	r1, #128	; 0x80
 8002936:	0549      	lsls	r1, r1, #21
 8002938:	430a      	orrs	r2, r1
 800293a:	61da      	str	r2, [r3, #28]
 800293c:	4b05      	ldr	r3, [pc, #20]	; (8002954 <HAL_MspInit+0x44>)
 800293e:	69da      	ldr	r2, [r3, #28]
 8002940:	2380      	movs	r3, #128	; 0x80
 8002942:	055b      	lsls	r3, r3, #21
 8002944:	4013      	ands	r3, r2
 8002946:	603b      	str	r3, [r7, #0]
 8002948:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800294a:	46c0      	nop			; (mov r8, r8)
 800294c:	46bd      	mov	sp, r7
 800294e:	b002      	add	sp, #8
 8002950:	bd80      	pop	{r7, pc}
 8002952:	46c0      	nop			; (mov r8, r8)
 8002954:	40021000 	.word	0x40021000

08002958 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002958:	b590      	push	{r4, r7, lr}
 800295a:	b08d      	sub	sp, #52	; 0x34
 800295c:	af00      	add	r7, sp, #0
 800295e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002960:	241c      	movs	r4, #28
 8002962:	193b      	adds	r3, r7, r4
 8002964:	0018      	movs	r0, r3
 8002966:	2314      	movs	r3, #20
 8002968:	001a      	movs	r2, r3
 800296a:	2100      	movs	r1, #0
 800296c:	f00a ffe3 	bl	800d936 <memset>
  if(hadc->Instance==ADC1)
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	4a3a      	ldr	r2, [pc, #232]	; (8002a60 <HAL_ADC_MspInit+0x108>)
 8002976:	4293      	cmp	r3, r2
 8002978:	d16d      	bne.n	8002a56 <HAL_ADC_MspInit+0xfe>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800297a:	4b3a      	ldr	r3, [pc, #232]	; (8002a64 <HAL_ADC_MspInit+0x10c>)
 800297c:	699a      	ldr	r2, [r3, #24]
 800297e:	4b39      	ldr	r3, [pc, #228]	; (8002a64 <HAL_ADC_MspInit+0x10c>)
 8002980:	2180      	movs	r1, #128	; 0x80
 8002982:	0089      	lsls	r1, r1, #2
 8002984:	430a      	orrs	r2, r1
 8002986:	619a      	str	r2, [r3, #24]
 8002988:	4b36      	ldr	r3, [pc, #216]	; (8002a64 <HAL_ADC_MspInit+0x10c>)
 800298a:	699a      	ldr	r2, [r3, #24]
 800298c:	2380      	movs	r3, #128	; 0x80
 800298e:	009b      	lsls	r3, r3, #2
 8002990:	4013      	ands	r3, r2
 8002992:	61bb      	str	r3, [r7, #24]
 8002994:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002996:	4b33      	ldr	r3, [pc, #204]	; (8002a64 <HAL_ADC_MspInit+0x10c>)
 8002998:	695a      	ldr	r2, [r3, #20]
 800299a:	4b32      	ldr	r3, [pc, #200]	; (8002a64 <HAL_ADC_MspInit+0x10c>)
 800299c:	2180      	movs	r1, #128	; 0x80
 800299e:	0309      	lsls	r1, r1, #12
 80029a0:	430a      	orrs	r2, r1
 80029a2:	615a      	str	r2, [r3, #20]
 80029a4:	4b2f      	ldr	r3, [pc, #188]	; (8002a64 <HAL_ADC_MspInit+0x10c>)
 80029a6:	695a      	ldr	r2, [r3, #20]
 80029a8:	2380      	movs	r3, #128	; 0x80
 80029aa:	031b      	lsls	r3, r3, #12
 80029ac:	4013      	ands	r3, r2
 80029ae:	617b      	str	r3, [r7, #20]
 80029b0:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80029b2:	4b2c      	ldr	r3, [pc, #176]	; (8002a64 <HAL_ADC_MspInit+0x10c>)
 80029b4:	695a      	ldr	r2, [r3, #20]
 80029b6:	4b2b      	ldr	r3, [pc, #172]	; (8002a64 <HAL_ADC_MspInit+0x10c>)
 80029b8:	2180      	movs	r1, #128	; 0x80
 80029ba:	0289      	lsls	r1, r1, #10
 80029bc:	430a      	orrs	r2, r1
 80029be:	615a      	str	r2, [r3, #20]
 80029c0:	4b28      	ldr	r3, [pc, #160]	; (8002a64 <HAL_ADC_MspInit+0x10c>)
 80029c2:	695a      	ldr	r2, [r3, #20]
 80029c4:	2380      	movs	r3, #128	; 0x80
 80029c6:	029b      	lsls	r3, r3, #10
 80029c8:	4013      	ands	r3, r2
 80029ca:	613b      	str	r3, [r7, #16]
 80029cc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80029ce:	4b25      	ldr	r3, [pc, #148]	; (8002a64 <HAL_ADC_MspInit+0x10c>)
 80029d0:	695a      	ldr	r2, [r3, #20]
 80029d2:	4b24      	ldr	r3, [pc, #144]	; (8002a64 <HAL_ADC_MspInit+0x10c>)
 80029d4:	2180      	movs	r1, #128	; 0x80
 80029d6:	02c9      	lsls	r1, r1, #11
 80029d8:	430a      	orrs	r2, r1
 80029da:	615a      	str	r2, [r3, #20]
 80029dc:	4b21      	ldr	r3, [pc, #132]	; (8002a64 <HAL_ADC_MspInit+0x10c>)
 80029de:	695a      	ldr	r2, [r3, #20]
 80029e0:	2380      	movs	r3, #128	; 0x80
 80029e2:	02db      	lsls	r3, r3, #11
 80029e4:	4013      	ands	r3, r2
 80029e6:	60fb      	str	r3, [r7, #12]
 80029e8:	68fb      	ldr	r3, [r7, #12]
    PC4     ------> ADC_IN14
    PC5     ------> ADC_IN15
    PB0     ------> ADC_IN8
    PB1     ------> ADC_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80029ea:	193b      	adds	r3, r7, r4
 80029ec:	223f      	movs	r2, #63	; 0x3f
 80029ee:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_4|GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80029f0:	193b      	adds	r3, r7, r4
 80029f2:	2203      	movs	r2, #3
 80029f4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029f6:	193b      	adds	r3, r7, r4
 80029f8:	2200      	movs	r2, #0
 80029fa:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80029fc:	193b      	adds	r3, r7, r4
 80029fe:	4a1a      	ldr	r2, [pc, #104]	; (8002a68 <HAL_ADC_MspInit+0x110>)
 8002a00:	0019      	movs	r1, r3
 8002a02:	0010      	movs	r0, r2
 8002a04:	f001 fc84 	bl	8004310 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8002a08:	193b      	adds	r3, r7, r4
 8002a0a:	22ff      	movs	r2, #255	; 0xff
 8002a0c:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002a0e:	193b      	adds	r3, r7, r4
 8002a10:	2203      	movs	r2, #3
 8002a12:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a14:	193b      	adds	r3, r7, r4
 8002a16:	2200      	movs	r2, #0
 8002a18:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a1a:	193a      	adds	r2, r7, r4
 8002a1c:	2390      	movs	r3, #144	; 0x90
 8002a1e:	05db      	lsls	r3, r3, #23
 8002a20:	0011      	movs	r1, r2
 8002a22:	0018      	movs	r0, r3
 8002a24:	f001 fc74 	bl	8004310 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002a28:	193b      	adds	r3, r7, r4
 8002a2a:	2203      	movs	r2, #3
 8002a2c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002a2e:	193b      	adds	r3, r7, r4
 8002a30:	2203      	movs	r2, #3
 8002a32:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a34:	193b      	adds	r3, r7, r4
 8002a36:	2200      	movs	r2, #0
 8002a38:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a3a:	193b      	adds	r3, r7, r4
 8002a3c:	4a0b      	ldr	r2, [pc, #44]	; (8002a6c <HAL_ADC_MspInit+0x114>)
 8002a3e:	0019      	movs	r1, r3
 8002a40:	0010      	movs	r0, r2
 8002a42:	f001 fc65 	bl	8004310 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_COMP_IRQn, 0, 0);
 8002a46:	2200      	movs	r2, #0
 8002a48:	2100      	movs	r1, #0
 8002a4a:	200c      	movs	r0, #12
 8002a4c:	f001 fbb0 	bl	80041b0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_COMP_IRQn);
 8002a50:	200c      	movs	r0, #12
 8002a52:	f001 fbc2 	bl	80041da <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002a56:	46c0      	nop			; (mov r8, r8)
 8002a58:	46bd      	mov	sp, r7
 8002a5a:	b00d      	add	sp, #52	; 0x34
 8002a5c:	bd90      	pop	{r4, r7, pc}
 8002a5e:	46c0      	nop			; (mov r8, r8)
 8002a60:	40012400 	.word	0x40012400
 8002a64:	40021000 	.word	0x40021000
 8002a68:	48000800 	.word	0x48000800
 8002a6c:	48000400 	.word	0x48000400

08002a70 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002a70:	b590      	push	{r4, r7, lr}
 8002a72:	b08b      	sub	sp, #44	; 0x2c
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a78:	2414      	movs	r4, #20
 8002a7a:	193b      	adds	r3, r7, r4
 8002a7c:	0018      	movs	r0, r3
 8002a7e:	2314      	movs	r3, #20
 8002a80:	001a      	movs	r2, r3
 8002a82:	2100      	movs	r1, #0
 8002a84:	f00a ff57 	bl	800d936 <memset>
  if(hspi->Instance==SPI1)
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	4a1c      	ldr	r2, [pc, #112]	; (8002b00 <HAL_SPI_MspInit+0x90>)
 8002a8e:	4293      	cmp	r3, r2
 8002a90:	d131      	bne.n	8002af6 <HAL_SPI_MspInit+0x86>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002a92:	4b1c      	ldr	r3, [pc, #112]	; (8002b04 <HAL_SPI_MspInit+0x94>)
 8002a94:	699a      	ldr	r2, [r3, #24]
 8002a96:	4b1b      	ldr	r3, [pc, #108]	; (8002b04 <HAL_SPI_MspInit+0x94>)
 8002a98:	2180      	movs	r1, #128	; 0x80
 8002a9a:	0149      	lsls	r1, r1, #5
 8002a9c:	430a      	orrs	r2, r1
 8002a9e:	619a      	str	r2, [r3, #24]
 8002aa0:	4b18      	ldr	r3, [pc, #96]	; (8002b04 <HAL_SPI_MspInit+0x94>)
 8002aa2:	699a      	ldr	r2, [r3, #24]
 8002aa4:	2380      	movs	r3, #128	; 0x80
 8002aa6:	015b      	lsls	r3, r3, #5
 8002aa8:	4013      	ands	r3, r2
 8002aaa:	613b      	str	r3, [r7, #16]
 8002aac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002aae:	4b15      	ldr	r3, [pc, #84]	; (8002b04 <HAL_SPI_MspInit+0x94>)
 8002ab0:	695a      	ldr	r2, [r3, #20]
 8002ab2:	4b14      	ldr	r3, [pc, #80]	; (8002b04 <HAL_SPI_MspInit+0x94>)
 8002ab4:	2180      	movs	r1, #128	; 0x80
 8002ab6:	02c9      	lsls	r1, r1, #11
 8002ab8:	430a      	orrs	r2, r1
 8002aba:	615a      	str	r2, [r3, #20]
 8002abc:	4b11      	ldr	r3, [pc, #68]	; (8002b04 <HAL_SPI_MspInit+0x94>)
 8002abe:	695a      	ldr	r2, [r3, #20]
 8002ac0:	2380      	movs	r3, #128	; 0x80
 8002ac2:	02db      	lsls	r3, r3, #11
 8002ac4:	4013      	ands	r3, r2
 8002ac6:	60fb      	str	r3, [r7, #12]
 8002ac8:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8002aca:	0021      	movs	r1, r4
 8002acc:	187b      	adds	r3, r7, r1
 8002ace:	2238      	movs	r2, #56	; 0x38
 8002ad0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ad2:	187b      	adds	r3, r7, r1
 8002ad4:	2202      	movs	r2, #2
 8002ad6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ad8:	187b      	adds	r3, r7, r1
 8002ada:	2200      	movs	r2, #0
 8002adc:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002ade:	187b      	adds	r3, r7, r1
 8002ae0:	2203      	movs	r2, #3
 8002ae2:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8002ae4:	187b      	adds	r3, r7, r1
 8002ae6:	2200      	movs	r2, #0
 8002ae8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002aea:	187b      	adds	r3, r7, r1
 8002aec:	4a06      	ldr	r2, [pc, #24]	; (8002b08 <HAL_SPI_MspInit+0x98>)
 8002aee:	0019      	movs	r1, r3
 8002af0:	0010      	movs	r0, r2
 8002af2:	f001 fc0d 	bl	8004310 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002af6:	46c0      	nop			; (mov r8, r8)
 8002af8:	46bd      	mov	sp, r7
 8002afa:	b00b      	add	sp, #44	; 0x2c
 8002afc:	bd90      	pop	{r4, r7, pc}
 8002afe:	46c0      	nop			; (mov r8, r8)
 8002b00:	40013000 	.word	0x40013000
 8002b04:	40021000 	.word	0x40021000
 8002b08:	48000400 	.word	0x48000400

08002b0c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002b0c:	b580      	push	{r7, lr}
 8002b0e:	b084      	sub	sp, #16
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM14)
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	4a0e      	ldr	r2, [pc, #56]	; (8002b54 <HAL_TIM_Base_MspInit+0x48>)
 8002b1a:	4293      	cmp	r3, r2
 8002b1c:	d115      	bne.n	8002b4a <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM14_MspInit 0 */

  /* USER CODE END TIM14_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM14_CLK_ENABLE();
 8002b1e:	4b0e      	ldr	r3, [pc, #56]	; (8002b58 <HAL_TIM_Base_MspInit+0x4c>)
 8002b20:	69da      	ldr	r2, [r3, #28]
 8002b22:	4b0d      	ldr	r3, [pc, #52]	; (8002b58 <HAL_TIM_Base_MspInit+0x4c>)
 8002b24:	2180      	movs	r1, #128	; 0x80
 8002b26:	0049      	lsls	r1, r1, #1
 8002b28:	430a      	orrs	r2, r1
 8002b2a:	61da      	str	r2, [r3, #28]
 8002b2c:	4b0a      	ldr	r3, [pc, #40]	; (8002b58 <HAL_TIM_Base_MspInit+0x4c>)
 8002b2e:	69da      	ldr	r2, [r3, #28]
 8002b30:	2380      	movs	r3, #128	; 0x80
 8002b32:	005b      	lsls	r3, r3, #1
 8002b34:	4013      	ands	r3, r2
 8002b36:	60fb      	str	r3, [r7, #12]
 8002b38:	68fb      	ldr	r3, [r7, #12]
    /* TIM14 interrupt Init */
    HAL_NVIC_SetPriority(TIM14_IRQn, 0, 0);
 8002b3a:	2200      	movs	r2, #0
 8002b3c:	2100      	movs	r1, #0
 8002b3e:	2013      	movs	r0, #19
 8002b40:	f001 fb36 	bl	80041b0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM14_IRQn);
 8002b44:	2013      	movs	r0, #19
 8002b46:	f001 fb48 	bl	80041da <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }

}
 8002b4a:	46c0      	nop			; (mov r8, r8)
 8002b4c:	46bd      	mov	sp, r7
 8002b4e:	b004      	add	sp, #16
 8002b50:	bd80      	pop	{r7, pc}
 8002b52:	46c0      	nop			; (mov r8, r8)
 8002b54:	40002000 	.word	0x40002000
 8002b58:	40021000 	.word	0x40021000

08002b5c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002b5c:	b590      	push	{r4, r7, lr}
 8002b5e:	b08b      	sub	sp, #44	; 0x2c
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b64:	2414      	movs	r4, #20
 8002b66:	193b      	adds	r3, r7, r4
 8002b68:	0018      	movs	r0, r3
 8002b6a:	2314      	movs	r3, #20
 8002b6c:	001a      	movs	r2, r3
 8002b6e:	2100      	movs	r1, #0
 8002b70:	f00a fee1 	bl	800d936 <memset>
  if(huart->Instance==USART3)
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	4a20      	ldr	r2, [pc, #128]	; (8002bfc <HAL_UART_MspInit+0xa0>)
 8002b7a:	4293      	cmp	r3, r2
 8002b7c:	d13a      	bne.n	8002bf4 <HAL_UART_MspInit+0x98>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8002b7e:	4b20      	ldr	r3, [pc, #128]	; (8002c00 <HAL_UART_MspInit+0xa4>)
 8002b80:	69da      	ldr	r2, [r3, #28]
 8002b82:	4b1f      	ldr	r3, [pc, #124]	; (8002c00 <HAL_UART_MspInit+0xa4>)
 8002b84:	2180      	movs	r1, #128	; 0x80
 8002b86:	02c9      	lsls	r1, r1, #11
 8002b88:	430a      	orrs	r2, r1
 8002b8a:	61da      	str	r2, [r3, #28]
 8002b8c:	4b1c      	ldr	r3, [pc, #112]	; (8002c00 <HAL_UART_MspInit+0xa4>)
 8002b8e:	69da      	ldr	r2, [r3, #28]
 8002b90:	2380      	movs	r3, #128	; 0x80
 8002b92:	02db      	lsls	r3, r3, #11
 8002b94:	4013      	ands	r3, r2
 8002b96:	613b      	str	r3, [r7, #16]
 8002b98:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002b9a:	4b19      	ldr	r3, [pc, #100]	; (8002c00 <HAL_UART_MspInit+0xa4>)
 8002b9c:	695a      	ldr	r2, [r3, #20]
 8002b9e:	4b18      	ldr	r3, [pc, #96]	; (8002c00 <HAL_UART_MspInit+0xa4>)
 8002ba0:	2180      	movs	r1, #128	; 0x80
 8002ba2:	0309      	lsls	r1, r1, #12
 8002ba4:	430a      	orrs	r2, r1
 8002ba6:	615a      	str	r2, [r3, #20]
 8002ba8:	4b15      	ldr	r3, [pc, #84]	; (8002c00 <HAL_UART_MspInit+0xa4>)
 8002baa:	695a      	ldr	r2, [r3, #20]
 8002bac:	2380      	movs	r3, #128	; 0x80
 8002bae:	031b      	lsls	r3, r3, #12
 8002bb0:	4013      	ands	r3, r2
 8002bb2:	60fb      	str	r3, [r7, #12]
 8002bb4:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PC10     ------> USART3_TX
    PC11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002bb6:	193b      	adds	r3, r7, r4
 8002bb8:	22c0      	movs	r2, #192	; 0xc0
 8002bba:	0112      	lsls	r2, r2, #4
 8002bbc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bbe:	0021      	movs	r1, r4
 8002bc0:	187b      	adds	r3, r7, r1
 8002bc2:	2202      	movs	r2, #2
 8002bc4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bc6:	187b      	adds	r3, r7, r1
 8002bc8:	2200      	movs	r2, #0
 8002bca:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002bcc:	187b      	adds	r3, r7, r1
 8002bce:	2203      	movs	r2, #3
 8002bd0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART3;
 8002bd2:	187b      	adds	r3, r7, r1
 8002bd4:	2201      	movs	r2, #1
 8002bd6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002bd8:	187b      	adds	r3, r7, r1
 8002bda:	4a0a      	ldr	r2, [pc, #40]	; (8002c04 <HAL_UART_MspInit+0xa8>)
 8002bdc:	0019      	movs	r1, r3
 8002bde:	0010      	movs	r0, r2
 8002be0:	f001 fb96 	bl	8004310 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_4_IRQn, 0, 0);
 8002be4:	2200      	movs	r2, #0
 8002be6:	2100      	movs	r1, #0
 8002be8:	201d      	movs	r0, #29
 8002bea:	f001 fae1 	bl	80041b0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_4_IRQn);
 8002bee:	201d      	movs	r0, #29
 8002bf0:	f001 faf3 	bl	80041da <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002bf4:	46c0      	nop			; (mov r8, r8)
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	b00b      	add	sp, #44	; 0x2c
 8002bfa:	bd90      	pop	{r4, r7, pc}
 8002bfc:	40004800 	.word	0x40004800
 8002c00:	40021000 	.word	0x40021000
 8002c04:	48000800 	.word	0x48000800

08002c08 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002c08:	b580      	push	{r7, lr}
 8002c0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002c0c:	e7fe      	b.n	8002c0c <NMI_Handler+0x4>

08002c0e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002c0e:	b580      	push	{r7, lr}
 8002c10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002c12:	e7fe      	b.n	8002c12 <HardFault_Handler+0x4>

08002c14 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002c14:	b580      	push	{r7, lr}
 8002c16:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8002c18:	46c0      	nop			; (mov r8, r8)
 8002c1a:	46bd      	mov	sp, r7
 8002c1c:	bd80      	pop	{r7, pc}

08002c1e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002c1e:	b580      	push	{r7, lr}
 8002c20:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002c22:	46c0      	nop			; (mov r8, r8)
 8002c24:	46bd      	mov	sp, r7
 8002c26:	bd80      	pop	{r7, pc}

08002c28 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002c28:	b580      	push	{r7, lr}
 8002c2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002c2c:	f000 fc0c 	bl	8003448 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002c30:	46c0      	nop			; (mov r8, r8)
 8002c32:	46bd      	mov	sp, r7
 8002c34:	bd80      	pop	{r7, pc}

08002c36 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 8002c36:	b580      	push	{r7, lr}
 8002c38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUTTON_1_Pin);
 8002c3a:	2380      	movs	r3, #128	; 0x80
 8002c3c:	005b      	lsls	r3, r3, #1
 8002c3e:	0018      	movs	r0, r3
 8002c40:	f001 fd34 	bl	80046ac <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BUTTON_0_Pin);
 8002c44:	2380      	movs	r3, #128	; 0x80
 8002c46:	009b      	lsls	r3, r3, #2
 8002c48:	0018      	movs	r0, r3
 8002c4a:	f001 fd2f 	bl	80046ac <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8002c4e:	46c0      	nop			; (mov r8, r8)
 8002c50:	46bd      	mov	sp, r7
 8002c52:	bd80      	pop	{r7, pc}

08002c54 <ADC1_COMP_IRQHandler>:

/**
  * @brief This function handles ADC and COMP interrupts (COMP interrupts through EXTI lines 21 and 22).
  */
void ADC1_COMP_IRQHandler(void)
{
 8002c54:	b580      	push	{r7, lr}
 8002c56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_COMP_IRQn 0 */

  /* USER CODE END ADC1_COMP_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc);
 8002c58:	4b03      	ldr	r3, [pc, #12]	; (8002c68 <ADC1_COMP_IRQHandler+0x14>)
 8002c5a:	0018      	movs	r0, r3
 8002c5c:	f000 fe3c 	bl	80038d8 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_COMP_IRQn 1 */

  /* USER CODE END ADC1_COMP_IRQn 1 */
}
 8002c60:	46c0      	nop			; (mov r8, r8)
 8002c62:	46bd      	mov	sp, r7
 8002c64:	bd80      	pop	{r7, pc}
 8002c66:	46c0      	nop			; (mov r8, r8)
 8002c68:	20000214 	.word	0x20000214

08002c6c <TIM14_IRQHandler>:

/**
  * @brief This function handles TIM14 global interrupt.
  */
void TIM14_IRQHandler(void)
{
 8002c6c:	b580      	push	{r7, lr}
 8002c6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM14_IRQn 0 */

  /* USER CODE END TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8002c70:	4b03      	ldr	r3, [pc, #12]	; (8002c80 <TIM14_IRQHandler+0x14>)
 8002c72:	0018      	movs	r0, r3
 8002c74:	f004 fffa 	bl	8007c6c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM14_IRQn 1 */

  /* USER CODE END TIM14_IRQn 1 */
}
 8002c78:	46c0      	nop			; (mov r8, r8)
 8002c7a:	46bd      	mov	sp, r7
 8002c7c:	bd80      	pop	{r7, pc}
 8002c7e:	46c0      	nop			; (mov r8, r8)
 8002c80:	200002b8 	.word	0x200002b8

08002c84 <USART3_4_IRQHandler>:

/**
  * @brief This function handles USART3 and USART4 global interrupts.
  */
void USART3_4_IRQHandler(void)
{
 8002c84:	b580      	push	{r7, lr}
 8002c86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_4_IRQn 0 */

  /* USER CODE END USART3_4_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8002c88:	4b03      	ldr	r3, [pc, #12]	; (8002c98 <USART3_4_IRQHandler+0x14>)
 8002c8a:	0018      	movs	r0, r3
 8002c8c:	f005 fc5c 	bl	8008548 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_4_IRQn 1 */

  /* USER CODE END USART3_4_IRQn 1 */
}
 8002c90:	46c0      	nop			; (mov r8, r8)
 8002c92:	46bd      	mov	sp, r7
 8002c94:	bd80      	pop	{r7, pc}
 8002c96:	46c0      	nop			; (mov r8, r8)
 8002c98:	20000300 	.word	0x20000300

08002c9c <USB_IRQHandler>:

/**
  * @brief This function handles USB global interrupt / USB wake-up interrupt through EXTI line 18.
  */
void USB_IRQHandler(void)
{
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_IRQn 0 */

  /* USER CODE END USB_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8002ca0:	4b03      	ldr	r3, [pc, #12]	; (8002cb0 <USB_IRQHandler+0x14>)
 8002ca2:	0018      	movs	r0, r3
 8002ca4:	f001 fe54 	bl	8004950 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_IRQn 1 */

  /* USER CODE END USB_IRQn 1 */
}
 8002ca8:	46c0      	nop			; (mov r8, r8)
 8002caa:	46bd      	mov	sp, r7
 8002cac:	bd80      	pop	{r7, pc}
 8002cae:	46c0      	nop			; (mov r8, r8)
 8002cb0:	200010c4 	.word	0x200010c4

08002cb4 <_sbrk>:
 8002cb4:	b580      	push	{r7, lr}
 8002cb6:	b086      	sub	sp, #24
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	6078      	str	r0, [r7, #4]
 8002cbc:	4a14      	ldr	r2, [pc, #80]	; (8002d10 <_sbrk+0x5c>)
 8002cbe:	4b15      	ldr	r3, [pc, #84]	; (8002d14 <_sbrk+0x60>)
 8002cc0:	1ad3      	subs	r3, r2, r3
 8002cc2:	617b      	str	r3, [r7, #20]
 8002cc4:	697b      	ldr	r3, [r7, #20]
 8002cc6:	613b      	str	r3, [r7, #16]
 8002cc8:	4b13      	ldr	r3, [pc, #76]	; (8002d18 <_sbrk+0x64>)
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d102      	bne.n	8002cd6 <_sbrk+0x22>
 8002cd0:	4b11      	ldr	r3, [pc, #68]	; (8002d18 <_sbrk+0x64>)
 8002cd2:	4a12      	ldr	r2, [pc, #72]	; (8002d1c <_sbrk+0x68>)
 8002cd4:	601a      	str	r2, [r3, #0]
 8002cd6:	4b10      	ldr	r3, [pc, #64]	; (8002d18 <_sbrk+0x64>)
 8002cd8:	681a      	ldr	r2, [r3, #0]
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	18d3      	adds	r3, r2, r3
 8002cde:	693a      	ldr	r2, [r7, #16]
 8002ce0:	429a      	cmp	r2, r3
 8002ce2:	d207      	bcs.n	8002cf4 <_sbrk+0x40>
 8002ce4:	f00a fde0 	bl	800d8a8 <__errno>
 8002ce8:	0003      	movs	r3, r0
 8002cea:	220c      	movs	r2, #12
 8002cec:	601a      	str	r2, [r3, #0]
 8002cee:	2301      	movs	r3, #1
 8002cf0:	425b      	negs	r3, r3
 8002cf2:	e009      	b.n	8002d08 <_sbrk+0x54>
 8002cf4:	4b08      	ldr	r3, [pc, #32]	; (8002d18 <_sbrk+0x64>)
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	60fb      	str	r3, [r7, #12]
 8002cfa:	4b07      	ldr	r3, [pc, #28]	; (8002d18 <_sbrk+0x64>)
 8002cfc:	681a      	ldr	r2, [r3, #0]
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	18d2      	adds	r2, r2, r3
 8002d02:	4b05      	ldr	r3, [pc, #20]	; (8002d18 <_sbrk+0x64>)
 8002d04:	601a      	str	r2, [r3, #0]
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	0018      	movs	r0, r3
 8002d0a:	46bd      	mov	sp, r7
 8002d0c:	b006      	add	sp, #24
 8002d0e:	bd80      	pop	{r7, pc}
 8002d10:	20004000 	.word	0x20004000
 8002d14:	00000400 	.word	0x00000400
 8002d18:	20000414 	.word	0x20000414
 8002d1c:	200015e8 	.word	0x200015e8

08002d20 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002d20:	b580      	push	{r7, lr}
 8002d22:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8002d24:	46c0      	nop			; (mov r8, r8)
 8002d26:	46bd      	mov	sp, r7
 8002d28:	bd80      	pop	{r7, pc}
	...

08002d2c <currentPhase>:
static void startTest();
static void stopTest();

//_____Dotaz na aktuální fázi testu_____//
TEST_PHASE currentPhase()
{
 8002d2c:	b580      	push	{r7, lr}
 8002d2e:	af00      	add	r7, sp, #0
	return testPhase;
 8002d30:	4b02      	ldr	r3, [pc, #8]	; (8002d3c <currentPhase+0x10>)
 8002d32:	781b      	ldrb	r3, [r3, #0]
}
 8002d34:	0018      	movs	r0, r3
 8002d36:	46bd      	mov	sp, r7
 8002d38:	bd80      	pop	{r7, pc}
 8002d3a:	46c0      	nop			; (mov r8, r8)
 8002d3c:	20000418 	.word	0x20000418

08002d40 <testHandler>:

//_____Funkce pro řízení testu_____//
void testHandler()
{
 8002d40:	b590      	push	{r4, r7, lr}
 8002d42:	b08b      	sub	sp, #44	; 0x2c
 8002d44:	af00      	add	r7, sp, #0
	flags.testProgress = 0;
 8002d46:	4bcb      	ldr	r3, [pc, #812]	; (8003074 <testHandler+0x334>)
 8002d48:	7e1a      	ldrb	r2, [r3, #24]
 8002d4a:	2102      	movs	r1, #2
 8002d4c:	438a      	bics	r2, r1
 8002d4e:	761a      	strb	r2, [r3, #24]
	flags.testCanceled = 0;
 8002d50:	4bc8      	ldr	r3, [pc, #800]	; (8003074 <testHandler+0x334>)
 8002d52:	7e1a      	ldrb	r2, [r3, #24]
 8002d54:	2104      	movs	r1, #4
 8002d56:	438a      	bics	r2, r1
 8002d58:	761a      	strb	r2, [r3, #24]

	if(flags.instructions.startRequest)
 8002d5a:	4bc6      	ldr	r3, [pc, #792]	; (8003074 <testHandler+0x334>)
 8002d5c:	7b1b      	ldrb	r3, [r3, #12]
 8002d5e:	2201      	movs	r2, #1
 8002d60:	4013      	ands	r3, r2
 8002d62:	b2db      	uxtb	r3, r3
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d032      	beq.n	8002dce <testHandler+0x8e>
	{
		if(testPhase == WAITING)
 8002d68:	4bc3      	ldr	r3, [pc, #780]	; (8003078 <testHandler+0x338>)
 8002d6a:	781b      	ldrb	r3, [r3, #0]
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d124      	bne.n	8002dba <testHandler+0x7a>
		{
			if(flags.conErr)
 8002d70:	4bc0      	ldr	r3, [pc, #768]	; (8003074 <testHandler+0x334>)
 8002d72:	7e1b      	ldrb	r3, [r3, #24]
 8002d74:	2240      	movs	r2, #64	; 0x40
 8002d76:	4013      	ands	r3, r2
 8002d78:	b2db      	uxtb	r3, r3
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d01a      	beq.n	8002db4 <testHandler+0x74>
			{
				char txt[] = {"Relay PCB connection error\n"};
 8002d7e:	1d3b      	adds	r3, r7, #4
 8002d80:	4abe      	ldr	r2, [pc, #760]	; (800307c <testHandler+0x33c>)
 8002d82:	ca13      	ldmia	r2!, {r0, r1, r4}
 8002d84:	c313      	stmia	r3!, {r0, r1, r4}
 8002d86:	ca13      	ldmia	r2!, {r0, r1, r4}
 8002d88:	c313      	stmia	r3!, {r0, r1, r4}
 8002d8a:	6812      	ldr	r2, [r2, #0]
 8002d8c:	601a      	str	r2, [r3, #0]
				pushStr(USB_Tx_Buffer, txt, strlen(txt));
 8002d8e:	4bbc      	ldr	r3, [pc, #752]	; (8003080 <testHandler+0x340>)
 8002d90:	681c      	ldr	r4, [r3, #0]
 8002d92:	1d3b      	adds	r3, r7, #4
 8002d94:	0018      	movs	r0, r3
 8002d96:	f7fd f9b7 	bl	8000108 <strlen>
 8002d9a:	0003      	movs	r3, r0
 8002d9c:	001a      	movs	r2, r3
 8002d9e:	1d3b      	adds	r3, r7, #4
 8002da0:	0019      	movs	r1, r3
 8002da2:	0020      	movs	r0, r4
 8002da4:	f7ff fc52 	bl	800264c <pushStr>
				flags.instructions.startRequest = 0;
 8002da8:	4bb2      	ldr	r3, [pc, #712]	; (8003074 <testHandler+0x334>)
 8002daa:	7b1a      	ldrb	r2, [r3, #12]
 8002dac:	2101      	movs	r1, #1
 8002dae:	438a      	bics	r2, r1
 8002db0:	731a      	strb	r2, [r3, #12]
 8002db2:	e00c      	b.n	8002dce <testHandler+0x8e>
			}
			else
			{
				startTest();
 8002db4:	f000 f9f6 	bl	80031a4 <startTest>
 8002db8:	e009      	b.n	8002dce <testHandler+0x8e>
			}
		}
		else
		{
			flags.startConflict = 1;
 8002dba:	4bae      	ldr	r3, [pc, #696]	; (8003074 <testHandler+0x334>)
 8002dbc:	7e1a      	ldrb	r2, [r3, #24]
 8002dbe:	2101      	movs	r1, #1
 8002dc0:	430a      	orrs	r2, r1
 8002dc2:	761a      	strb	r2, [r3, #24]
			flags.instructions.startRequest = 0;
 8002dc4:	4bab      	ldr	r3, [pc, #684]	; (8003074 <testHandler+0x334>)
 8002dc6:	7b1a      	ldrb	r2, [r3, #12]
 8002dc8:	2101      	movs	r1, #1
 8002dca:	438a      	bics	r2, r1
 8002dcc:	731a      	strb	r2, [r3, #12]
		}
	}
	if(flags.instructions.stopRequest)
 8002dce:	4ba9      	ldr	r3, [pc, #676]	; (8003074 <testHandler+0x334>)
 8002dd0:	7b1b      	ldrb	r3, [r3, #12]
 8002dd2:	2202      	movs	r2, #2
 8002dd4:	4013      	ands	r3, r2
 8002dd6:	b2db      	uxtb	r3, r3
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d001      	beq.n	8002de0 <testHandler+0xa0>
	{
		stopTest();
 8002ddc:	f000 fa88 	bl	80032f0 <stopTest>
	}

	if(testPhase != WAITING)
 8002de0:	4ba5      	ldr	r3, [pc, #660]	; (8003078 <testHandler+0x338>)
 8002de2:	781b      	ldrb	r3, [r3, #0]
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d00d      	beq.n	8002e04 <testHandler+0xc4>
	{
		if(flags.buttons.butt0_ver)
 8002de8:	4ba2      	ldr	r3, [pc, #648]	; (8003074 <testHandler+0x334>)
 8002dea:	791b      	ldrb	r3, [r3, #4]
 8002dec:	2202      	movs	r2, #2
 8002dee:	4013      	ands	r3, r2
 8002df0:	b2db      	uxtb	r3, r3
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d006      	beq.n	8002e04 <testHandler+0xc4>
		{
			stopTest();
 8002df6:	f000 fa7b 	bl	80032f0 <stopTest>
			flags.testCanceled = 1;
 8002dfa:	4b9e      	ldr	r3, [pc, #632]	; (8003074 <testHandler+0x334>)
 8002dfc:	7e1a      	ldrb	r2, [r3, #24]
 8002dfe:	2104      	movs	r1, #4
 8002e00:	430a      	orrs	r2, r1
 8002e02:	761a      	strb	r2, [r3, #24]
		}
	}

	switch(testPhase)
 8002e04:	4b9c      	ldr	r3, [pc, #624]	; (8003078 <testHandler+0x338>)
 8002e06:	781b      	ldrb	r3, [r3, #0]
 8002e08:	2b06      	cmp	r3, #6
 8002e0a:	d900      	bls.n	8002e0e <testHandler+0xce>
 8002e0c:	e1be      	b.n	800318c <testHandler+0x44c>
 8002e0e:	009a      	lsls	r2, r3, #2
 8002e10:	4b9c      	ldr	r3, [pc, #624]	; (8003084 <testHandler+0x344>)
 8002e12:	18d3      	adds	r3, r2, r3
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	469f      	mov	pc, r3
	{
	case WAITING:
		flags.testProgress = 0;
 8002e18:	4b96      	ldr	r3, [pc, #600]	; (8003074 <testHandler+0x334>)
 8002e1a:	7e1a      	ldrb	r2, [r3, #24]
 8002e1c:	2102      	movs	r1, #2
 8002e1e:	438a      	bics	r2, r1
 8002e20:	761a      	strb	r2, [r3, #24]
		//flags.meas.measRequest = 0;
		break;
 8002e22:	e1b3      	b.n	800318c <testHandler+0x44c>
	case START:

		//___Pokud je dokončeno měření napětí naprázdno...____//
		if(flags.meas.measComplete)
 8002e24:	4b93      	ldr	r3, [pc, #588]	; (8003074 <testHandler+0x334>)
 8002e26:	7d1b      	ldrb	r3, [r3, #20]
 8002e28:	2202      	movs	r2, #2
 8002e2a:	4013      	ands	r3, r2
 8002e2c:	b2db      	uxtb	r3, r3
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d005      	beq.n	8002e3e <testHandler+0xfe>
		{
			testPhase++;
 8002e32:	4b91      	ldr	r3, [pc, #580]	; (8003078 <testHandler+0x338>)
 8002e34:	781b      	ldrb	r3, [r3, #0]
 8002e36:	3301      	adds	r3, #1
 8002e38:	b2da      	uxtb	r2, r3
 8002e3a:	4b8f      	ldr	r3, [pc, #572]	; (8003078 <testHandler+0x338>)
 8002e3c:	701a      	strb	r2, [r3, #0]
		}

		if(flags.time.sec)
 8002e3e:	4b8d      	ldr	r3, [pc, #564]	; (8003074 <testHandler+0x334>)
 8002e40:	781b      	ldrb	r3, [r3, #0]
 8002e42:	2202      	movs	r2, #2
 8002e44:	4013      	ands	r3, r2
 8002e46:	b2db      	uxtb	r3, r3
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d05e      	beq.n	8002f0a <testHandler+0x1ca>
		{
			PROGRESS_RUNNING(*sourceInTesting, PROGRESS_LED1);	//blikání prvni progress led
 8002e4c:	4b8e      	ldr	r3, [pc, #568]	; (8003088 <testHandler+0x348>)
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	781a      	ldrb	r2, [r3, #0]
 8002e52:	4b8d      	ldr	r3, [pc, #564]	; (8003088 <testHandler+0x348>)
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	2120      	movs	r1, #32
 8002e58:	404a      	eors	r2, r1
 8002e5a:	b2d2      	uxtb	r2, r2
 8002e5c:	701a      	strb	r2, [r3, #0]
			sendData();
 8002e5e:	f7ff fd1f 	bl	80028a0 <sendData>

			switch(sysTime[SYSTIME_SEC])
 8002e62:	4b8a      	ldr	r3, [pc, #552]	; (800308c <testHandler+0x34c>)
 8002e64:	685b      	ldr	r3, [r3, #4]
 8002e66:	2b05      	cmp	r3, #5
 8002e68:	d851      	bhi.n	8002f0e <testHandler+0x1ce>
 8002e6a:	009a      	lsls	r2, r3, #2
 8002e6c:	4b88      	ldr	r3, [pc, #544]	; (8003090 <testHandler+0x350>)
 8002e6e:	18d3      	adds	r3, r2, r3
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	469f      	mov	pc, r3
			{
			case 1:	//Po jedne sekunde zapnout topeni
				HAL_Delay(2);	//pro oddaleni sepnuti rele od spi komunikace
 8002e74:	2002      	movs	r0, #2
 8002e76:	f000 fb03 	bl	8003480 <HAL_Delay>
				HTR_ON;
 8002e7a:	2380      	movs	r3, #128	; 0x80
 8002e7c:	009b      	lsls	r3, r3, #2
 8002e7e:	4885      	ldr	r0, [pc, #532]	; (8003094 <testHandler+0x354>)
 8002e80:	2201      	movs	r2, #1
 8002e82:	0019      	movs	r1, r3
 8002e84:	f001 fbd9 	bl	800463a <HAL_GPIO_WritePin>
				EM_HTR_ON;
 8002e88:	2380      	movs	r3, #128	; 0x80
 8002e8a:	005b      	lsls	r3, r3, #1
 8002e8c:	4881      	ldr	r0, [pc, #516]	; (8003094 <testHandler+0x354>)
 8002e8e:	2201      	movs	r2, #1
 8002e90:	0019      	movs	r1, r3
 8002e92:	f001 fbd2 	bl	800463a <HAL_GPIO_WritePin>
				break;
 8002e96:	e03b      	b.n	8002f10 <testHandler+0x1d0>
			case 2:
				break;
			case 3:	//V treti sekunde overit funkcnost topeni
				if(HAL_GPIO_ReadPin(HEATER_STATE_GPIO_Port, HEATER_STATE_Pin) != GPIO_PIN_RESET)	//Topení neni v poradku
 8002e98:	2380      	movs	r3, #128	; 0x80
 8002e9a:	015b      	lsls	r3, r3, #5
 8002e9c:	4a7e      	ldr	r2, [pc, #504]	; (8003098 <testHandler+0x358>)
 8002e9e:	0019      	movs	r1, r3
 8002ea0:	0010      	movs	r0, r2
 8002ea2:	f001 fbad 	bl	8004600 <HAL_GPIO_ReadPin>
 8002ea6:	1e03      	subs	r3, r0, #0
 8002ea8:	d007      	beq.n	8002eba <testHandler+0x17a>
				{
					flags.heaterState = HEATER_ERR;
 8002eaa:	4b72      	ldr	r3, [pc, #456]	; (8003074 <testHandler+0x334>)
 8002eac:	7e1a      	ldrb	r2, [r3, #24]
 8002eae:	2130      	movs	r1, #48	; 0x30
 8002eb0:	438a      	bics	r2, r1
 8002eb2:	1c11      	adds	r1, r2, #0
 8002eb4:	2220      	movs	r2, #32
 8002eb6:	430a      	orrs	r2, r1
 8002eb8:	761a      	strb	r2, [r3, #24]
				}
				//vypnout topeni optotriak
				HTR_OFF;
 8002eba:	2380      	movs	r3, #128	; 0x80
 8002ebc:	009b      	lsls	r3, r3, #2
 8002ebe:	4875      	ldr	r0, [pc, #468]	; (8003094 <testHandler+0x354>)
 8002ec0:	2200      	movs	r2, #0
 8002ec2:	0019      	movs	r1, r3
 8002ec4:	f001 fbb9 	bl	800463a <HAL_GPIO_WritePin>
				break;
 8002ec8:	e022      	b.n	8002f10 <testHandler+0x1d0>
			case 4:
				if(HAL_GPIO_ReadPin(HEATER_STATE_GPIO_Port, HEATER_STATE_Pin) != GPIO_PIN_SET)	//Topení neni v poradku
 8002eca:	2380      	movs	r3, #128	; 0x80
 8002ecc:	015b      	lsls	r3, r3, #5
 8002ece:	4a72      	ldr	r2, [pc, #456]	; (8003098 <testHandler+0x358>)
 8002ed0:	0019      	movs	r1, r3
 8002ed2:	0010      	movs	r0, r2
 8002ed4:	f001 fb94 	bl	8004600 <HAL_GPIO_ReadPin>
 8002ed8:	0003      	movs	r3, r0
 8002eda:	2b01      	cmp	r3, #1
 8002edc:	d004      	beq.n	8002ee8 <testHandler+0x1a8>
				{
					flags.heaterState = HEATER_TRIAC_ERR;
 8002ede:	4b65      	ldr	r3, [pc, #404]	; (8003074 <testHandler+0x334>)
 8002ee0:	7e1a      	ldrb	r2, [r3, #24]
 8002ee2:	2130      	movs	r1, #48	; 0x30
 8002ee4:	430a      	orrs	r2, r1
 8002ee6:	761a      	strb	r2, [r3, #24]
				}
				//vypnout topeni
				HAL_Delay(2);	//pro oddaleni sepnuti rele od spi komunikace
 8002ee8:	2002      	movs	r0, #2
 8002eea:	f000 fac9 	bl	8003480 <HAL_Delay>
				EM_HTR_OFF;
 8002eee:	2380      	movs	r3, #128	; 0x80
 8002ef0:	005b      	lsls	r3, r3, #1
 8002ef2:	4868      	ldr	r0, [pc, #416]	; (8003094 <testHandler+0x354>)
 8002ef4:	2200      	movs	r2, #0
 8002ef6:	0019      	movs	r1, r3
 8002ef8:	f001 fb9f 	bl	800463a <HAL_GPIO_WritePin>
				break;
 8002efc:	e008      	b.n	8002f10 <testHandler+0x1d0>
			case 5:	//v pate sekunde zmerit napeti naprazdno
				flags.meas.measRequest = 1;
 8002efe:	4b5d      	ldr	r3, [pc, #372]	; (8003074 <testHandler+0x334>)
 8002f00:	7d1a      	ldrb	r2, [r3, #20]
 8002f02:	2101      	movs	r1, #1
 8002f04:	430a      	orrs	r2, r1
 8002f06:	751a      	strb	r2, [r3, #20]
				break;
 8002f08:	e002      	b.n	8002f10 <testHandler+0x1d0>
			default:
				break;
			}
		}
 8002f0a:	46c0      	nop			; (mov r8, r8)
 8002f0c:	e13e      	b.n	800318c <testHandler+0x44c>
				break;
 8002f0e:	46c0      	nop			; (mov r8, r8)
		break;
 8002f10:	e13c      	b.n	800318c <testHandler+0x44c>
	case START_DONE:
		//___Připojení zátěže___//
		LOAD_MIN_ON;
 8002f12:	4b60      	ldr	r3, [pc, #384]	; (8003094 <testHandler+0x354>)
 8002f14:	2201      	movs	r2, #1
 8002f16:	2180      	movs	r1, #128	; 0x80
 8002f18:	0018      	movs	r0, r3
 8002f1a:	f001 fb8e 	bl	800463a <HAL_GPIO_WritePin>
		LOAD_MAX_ON;
 8002f1e:	4b5d      	ldr	r3, [pc, #372]	; (8003094 <testHandler+0x354>)
 8002f20:	2201      	movs	r2, #1
 8002f22:	2140      	movs	r1, #64	; 0x40
 8002f24:	0018      	movs	r0, r3
 8002f26:	f001 fb88 	bl	800463a <HAL_GPIO_WritePin>

		testPhase++;
 8002f2a:	4b53      	ldr	r3, [pc, #332]	; (8003078 <testHandler+0x338>)
 8002f2c:	781b      	ldrb	r3, [r3, #0]
 8002f2e:	3301      	adds	r3, #1
 8002f30:	b2da      	uxtb	r2, r3
 8002f32:	4b51      	ldr	r3, [pc, #324]	; (8003078 <testHandler+0x338>)
 8002f34:	701a      	strb	r2, [r3, #0]
		flags.testProgress = 1;
 8002f36:	4b4f      	ldr	r3, [pc, #316]	; (8003074 <testHandler+0x334>)
 8002f38:	7e1a      	ldrb	r2, [r3, #24]
 8002f3a:	2102      	movs	r1, #2
 8002f3c:	430a      	orrs	r2, r1
 8002f3e:	761a      	strb	r2, [r3, #24]
		//flags.ui.shortBeep = 1;

		PROGRESS_ON(*sourceInTesting, PROGRESS_LED1);	//rozsvítit první led
 8002f40:	4b51      	ldr	r3, [pc, #324]	; (8003088 <testHandler+0x348>)
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	781a      	ldrb	r2, [r3, #0]
 8002f46:	4b50      	ldr	r3, [pc, #320]	; (8003088 <testHandler+0x348>)
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	2120      	movs	r1, #32
 8002f4c:	430a      	orrs	r2, r1
 8002f4e:	b2d2      	uxtb	r2, r2
 8002f50:	701a      	strb	r2, [r3, #0]

		//___Nulování času___//
		for(int i = 1; i < 4; i++)
 8002f52:	2301      	movs	r3, #1
 8002f54:	627b      	str	r3, [r7, #36]	; 0x24
 8002f56:	e007      	b.n	8002f68 <testHandler+0x228>
		{
			sysTime[i] = 0;
 8002f58:	4b4c      	ldr	r3, [pc, #304]	; (800308c <testHandler+0x34c>)
 8002f5a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f5c:	0092      	lsls	r2, r2, #2
 8002f5e:	2100      	movs	r1, #0
 8002f60:	50d1      	str	r1, [r2, r3]
		for(int i = 1; i < 4; i++)
 8002f62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f64:	3301      	adds	r3, #1
 8002f66:	627b      	str	r3, [r7, #36]	; 0x24
 8002f68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f6a:	2b03      	cmp	r3, #3
 8002f6c:	ddf4      	ble.n	8002f58 <testHandler+0x218>
		}
		break;
 8002f6e:	e10d      	b.n	800318c <testHandler+0x44c>
	case MAIN_TEST:
		if(flags.time.sec)	//___Změna času___//
 8002f70:	4b40      	ldr	r3, [pc, #256]	; (8003074 <testHandler+0x334>)
 8002f72:	781b      	ldrb	r3, [r3, #0]
 8002f74:	2202      	movs	r2, #2
 8002f76:	4013      	ands	r3, r2
 8002f78:	b2db      	uxtb	r3, r3
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d00a      	beq.n	8002f94 <testHandler+0x254>
		{
			PROGRESS_RUNNING(*sourceInTesting, PROGRESS_LED2);	//blikání druhé progress led
 8002f7e:	4b42      	ldr	r3, [pc, #264]	; (8003088 <testHandler+0x348>)
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	781a      	ldrb	r2, [r3, #0]
 8002f84:	4b40      	ldr	r3, [pc, #256]	; (8003088 <testHandler+0x348>)
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	2110      	movs	r1, #16
 8002f8a:	404a      	eors	r2, r1
 8002f8c:	b2d2      	uxtb	r2, r2
 8002f8e:	701a      	strb	r2, [r3, #0]
			sendData();
 8002f90:	f7ff fc86 	bl	80028a0 <sendData>
		}
#ifdef __DEBUG_TEST__
		if(sysTime[SYSTIME_MIN] != 0 && flags.time.min)	//___Měření napětí každou minutu___//
#else
		if(!(sysTime[SYSTIME_MIN] % 10) && !(sysTime[SYSTIME_MIN] == 0 && sysTime[SYSTIME_HOUR] == 0) && flags.time.min)	//___Měření napětí každých deset minut___//
 8002f94:	4b3d      	ldr	r3, [pc, #244]	; (800308c <testHandler+0x34c>)
 8002f96:	689b      	ldr	r3, [r3, #8]
 8002f98:	210a      	movs	r1, #10
 8002f9a:	0018      	movs	r0, r3
 8002f9c:	f7fd fa36 	bl	800040c <__aeabi_idivmod>
 8002fa0:	1e0b      	subs	r3, r1, #0
 8002fa2:	d113      	bne.n	8002fcc <testHandler+0x28c>
 8002fa4:	4b39      	ldr	r3, [pc, #228]	; (800308c <testHandler+0x34c>)
 8002fa6:	689b      	ldr	r3, [r3, #8]
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d103      	bne.n	8002fb4 <testHandler+0x274>
 8002fac:	4b37      	ldr	r3, [pc, #220]	; (800308c <testHandler+0x34c>)
 8002fae:	68db      	ldr	r3, [r3, #12]
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d00b      	beq.n	8002fcc <testHandler+0x28c>
 8002fb4:	4b2f      	ldr	r3, [pc, #188]	; (8003074 <testHandler+0x334>)
 8002fb6:	781b      	ldrb	r3, [r3, #0]
 8002fb8:	2204      	movs	r2, #4
 8002fba:	4013      	ands	r3, r2
 8002fbc:	b2db      	uxtb	r3, r3
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d004      	beq.n	8002fcc <testHandler+0x28c>
#endif
		{
			flags.meas.measRequest = 1;
 8002fc2:	4b2c      	ldr	r3, [pc, #176]	; (8003074 <testHandler+0x334>)
 8002fc4:	7d1a      	ldrb	r2, [r3, #20]
 8002fc6:	2101      	movs	r1, #1
 8002fc8:	430a      	orrs	r2, r1
 8002fca:	751a      	strb	r2, [r3, #20]
		}
#ifdef __DEBUG_TEST__
		if(sysTime[SYSTIME_MIN] >= 3)	//___Po deseti minutách je měření u konce___//
#else
		if(sysTime[SYSTIME_HOUR] >= 3)	//___Po třech hodinách je měření u konce___//
 8002fcc:	4b2f      	ldr	r3, [pc, #188]	; (800308c <testHandler+0x34c>)
 8002fce:	68db      	ldr	r3, [r3, #12]
 8002fd0:	2b02      	cmp	r3, #2
 8002fd2:	dc00      	bgt.n	8002fd6 <testHandler+0x296>
 8002fd4:	e0d3      	b.n	800317e <testHandler+0x43e>
#endif
		{
			testPhase++;
 8002fd6:	4b28      	ldr	r3, [pc, #160]	; (8003078 <testHandler+0x338>)
 8002fd8:	781b      	ldrb	r3, [r3, #0]
 8002fda:	3301      	adds	r3, #1
 8002fdc:	b2da      	uxtb	r2, r3
 8002fde:	4b26      	ldr	r3, [pc, #152]	; (8003078 <testHandler+0x338>)
 8002fe0:	701a      	strb	r2, [r3, #0]
		}
		break;
 8002fe2:	e0cc      	b.n	800317e <testHandler+0x43e>
	case MAIN_TEST_DONE:
		if(!flags.meas.measRunning)
 8002fe4:	4b23      	ldr	r3, [pc, #140]	; (8003074 <testHandler+0x334>)
 8002fe6:	7d1b      	ldrb	r3, [r3, #20]
 8002fe8:	2208      	movs	r2, #8
 8002fea:	4013      	ands	r3, r2
 8002fec:	b2db      	uxtb	r3, r3
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d000      	beq.n	8002ff4 <testHandler+0x2b4>
 8002ff2:	e0c6      	b.n	8003182 <testHandler+0x442>
		{
			flags.ui.notice = 1;
 8002ff4:	4b1f      	ldr	r3, [pc, #124]	; (8003074 <testHandler+0x334>)
 8002ff6:	7c1a      	ldrb	r2, [r3, #16]
 8002ff8:	2108      	movs	r1, #8
 8002ffa:	430a      	orrs	r2, r1
 8002ffc:	741a      	strb	r2, [r3, #16]
			flags.testProgress = 1;
 8002ffe:	4b1d      	ldr	r3, [pc, #116]	; (8003074 <testHandler+0x334>)
 8003000:	7e1a      	ldrb	r2, [r3, #24]
 8003002:	2102      	movs	r1, #2
 8003004:	430a      	orrs	r2, r1
 8003006:	761a      	strb	r2, [r3, #24]

			testPhase++;
 8003008:	4b1b      	ldr	r3, [pc, #108]	; (8003078 <testHandler+0x338>)
 800300a:	781b      	ldrb	r3, [r3, #0]
 800300c:	3301      	adds	r3, #1
 800300e:	b2da      	uxtb	r2, r3
 8003010:	4b19      	ldr	r3, [pc, #100]	; (8003078 <testHandler+0x338>)
 8003012:	701a      	strb	r2, [r3, #0]

			LOAD_MIN_OFF;
 8003014:	4b1f      	ldr	r3, [pc, #124]	; (8003094 <testHandler+0x354>)
 8003016:	2200      	movs	r2, #0
 8003018:	2180      	movs	r1, #128	; 0x80
 800301a:	0018      	movs	r0, r3
 800301c:	f001 fb0d 	bl	800463a <HAL_GPIO_WritePin>
			LOAD_MAX_OFF;
 8003020:	4b1c      	ldr	r3, [pc, #112]	; (8003094 <testHandler+0x354>)
 8003022:	2200      	movs	r2, #0
 8003024:	2140      	movs	r1, #64	; 0x40
 8003026:	0018      	movs	r0, r3
 8003028:	f001 fb07 	bl	800463a <HAL_GPIO_WritePin>

			PROGRESS_ON(*sourceInTesting, PROGRESS_LED2);
 800302c:	4b16      	ldr	r3, [pc, #88]	; (8003088 <testHandler+0x348>)
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	781a      	ldrb	r2, [r3, #0]
 8003032:	4b15      	ldr	r3, [pc, #84]	; (8003088 <testHandler+0x348>)
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	2110      	movs	r1, #16
 8003038:	430a      	orrs	r2, r1
 800303a:	b2d2      	uxtb	r2, r2
 800303c:	701a      	strb	r2, [r3, #0]
			PWR_OFF(*sourceInTesting);
 800303e:	4b12      	ldr	r3, [pc, #72]	; (8003088 <testHandler+0x348>)
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	781a      	ldrb	r2, [r3, #0]
 8003044:	4b10      	ldr	r3, [pc, #64]	; (8003088 <testHandler+0x348>)
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	2101      	movs	r1, #1
 800304a:	430a      	orrs	r2, r1
 800304c:	b2d2      	uxtb	r2, r2
 800304e:	701a      	strb	r2, [r3, #0]
			sendData();
 8003050:	f7ff fc26 	bl	80028a0 <sendData>

			//___Nulování času___//
			for(int i = 1; i < 4; i++)
 8003054:	2301      	movs	r3, #1
 8003056:	623b      	str	r3, [r7, #32]
 8003058:	e007      	b.n	800306a <testHandler+0x32a>
			{
				sysTime[i] = 0;
 800305a:	4b0c      	ldr	r3, [pc, #48]	; (800308c <testHandler+0x34c>)
 800305c:	6a3a      	ldr	r2, [r7, #32]
 800305e:	0092      	lsls	r2, r2, #2
 8003060:	2100      	movs	r1, #0
 8003062:	50d1      	str	r1, [r2, r3]
			for(int i = 1; i < 4; i++)
 8003064:	6a3b      	ldr	r3, [r7, #32]
 8003066:	3301      	adds	r3, #1
 8003068:	623b      	str	r3, [r7, #32]
 800306a:	6a3b      	ldr	r3, [r7, #32]
 800306c:	2b03      	cmp	r3, #3
 800306e:	ddf4      	ble.n	800305a <testHandler+0x31a>
			}
		}
		break;
 8003070:	e087      	b.n	8003182 <testHandler+0x442>
 8003072:	46c0      	nop			; (mov r8, r8)
 8003074:	200003d8 	.word	0x200003d8
 8003078:	20000418 	.word	0x20000418
 800307c:	0800e2c4 	.word	0x0800e2c4
 8003080:	200001fc 	.word	0x200001fc
 8003084:	0800e440 	.word	0x0800e440
 8003088:	20000420 	.word	0x20000420
 800308c:	200003c8 	.word	0x200003c8
 8003090:	0800e45c 	.word	0x0800e45c
 8003094:	48000800 	.word	0x48000800
 8003098:	48000400 	.word	0x48000400
	case BATTERY_TEST:
		if(flags.time.sec)	//___Změna času___//
 800309c:	4b3d      	ldr	r3, [pc, #244]	; (8003194 <testHandler+0x454>)
 800309e:	781b      	ldrb	r3, [r3, #0]
 80030a0:	2202      	movs	r2, #2
 80030a2:	4013      	ands	r3, r2
 80030a4:	b2db      	uxtb	r3, r3
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d00a      	beq.n	80030c0 <testHandler+0x380>
		{
			PROGRESS_RUNNING(*sourceInTesting, PROGRESS_LED3);	//blikání třetí progress led
 80030aa:	4b3b      	ldr	r3, [pc, #236]	; (8003198 <testHandler+0x458>)
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	781a      	ldrb	r2, [r3, #0]
 80030b0:	4b39      	ldr	r3, [pc, #228]	; (8003198 <testHandler+0x458>)
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	2108      	movs	r1, #8
 80030b6:	404a      	eors	r2, r1
 80030b8:	b2d2      	uxtb	r2, r2
 80030ba:	701a      	strb	r2, [r3, #0]
			sendData();
 80030bc:	f7ff fbf0 	bl	80028a0 <sendData>
		}
#ifdef __DEBUG_TEST__
		if(sysTime[SYSTIME_MIN] != 0 && flags.time.min)	//___Měření napětí každou minutu___//
#else
		if(!(sysTime[SYSTIME_MIN] % 5) && sysTime[SYSTIME_MIN] != 0 && flags.time.min)	//___Měření napětí každých pět minut___//
 80030c0:	4b36      	ldr	r3, [pc, #216]	; (800319c <testHandler+0x45c>)
 80030c2:	689b      	ldr	r3, [r3, #8]
 80030c4:	2105      	movs	r1, #5
 80030c6:	0018      	movs	r0, r3
 80030c8:	f7fd f9a0 	bl	800040c <__aeabi_idivmod>
 80030cc:	1e0b      	subs	r3, r1, #0
 80030ce:	d114      	bne.n	80030fa <testHandler+0x3ba>
 80030d0:	4b32      	ldr	r3, [pc, #200]	; (800319c <testHandler+0x45c>)
 80030d2:	689b      	ldr	r3, [r3, #8]
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d010      	beq.n	80030fa <testHandler+0x3ba>
 80030d8:	4b2e      	ldr	r3, [pc, #184]	; (8003194 <testHandler+0x454>)
 80030da:	781b      	ldrb	r3, [r3, #0]
 80030dc:	2204      	movs	r2, #4
 80030de:	4013      	ands	r3, r2
 80030e0:	b2db      	uxtb	r3, r3
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d009      	beq.n	80030fa <testHandler+0x3ba>
#endif
		{
			flags.meas.onlyBattery = 1;
 80030e6:	4b2b      	ldr	r3, [pc, #172]	; (8003194 <testHandler+0x454>)
 80030e8:	7d1a      	ldrb	r2, [r3, #20]
 80030ea:	2120      	movs	r1, #32
 80030ec:	430a      	orrs	r2, r1
 80030ee:	751a      	strb	r2, [r3, #20]
			flags.meas.measRequest = 1;
 80030f0:	4b28      	ldr	r3, [pc, #160]	; (8003194 <testHandler+0x454>)
 80030f2:	7d1a      	ldrb	r2, [r3, #20]
 80030f4:	2101      	movs	r1, #1
 80030f6:	430a      	orrs	r2, r1
 80030f8:	751a      	strb	r2, [r3, #20]
		}
#ifdef __DEBUG_TEST__
		if(sysTime[SYSTIME_MIN] >= 2)	//___Po třech minutách je měření u konce___//
#else
		if(sysTime[SYSTIME_MIN] >= 15)	//___Po patnácti minutách je měření u konce___//
 80030fa:	4b28      	ldr	r3, [pc, #160]	; (800319c <testHandler+0x45c>)
 80030fc:	689b      	ldr	r3, [r3, #8]
 80030fe:	2b0e      	cmp	r3, #14
 8003100:	dd41      	ble.n	8003186 <testHandler+0x446>
#endif
		{
			testPhase++;
 8003102:	4b27      	ldr	r3, [pc, #156]	; (80031a0 <testHandler+0x460>)
 8003104:	781b      	ldrb	r3, [r3, #0]
 8003106:	3301      	adds	r3, #1
 8003108:	b2da      	uxtb	r2, r3
 800310a:	4b25      	ldr	r3, [pc, #148]	; (80031a0 <testHandler+0x460>)
 800310c:	701a      	strb	r2, [r3, #0]
		}
		break;
 800310e:	e03a      	b.n	8003186 <testHandler+0x446>
	case BATTERY_TEST_DONE:
		if(!flags.meas.measRunning)
 8003110:	4b20      	ldr	r3, [pc, #128]	; (8003194 <testHandler+0x454>)
 8003112:	7d1b      	ldrb	r3, [r3, #20]
 8003114:	2208      	movs	r2, #8
 8003116:	4013      	ands	r3, r2
 8003118:	b2db      	uxtb	r3, r3
 800311a:	2b00      	cmp	r3, #0
 800311c:	d135      	bne.n	800318a <testHandler+0x44a>
		{
			flags.ui.done = 1;
 800311e:	4b1d      	ldr	r3, [pc, #116]	; (8003194 <testHandler+0x454>)
 8003120:	7c1a      	ldrb	r2, [r3, #16]
 8003122:	2110      	movs	r1, #16
 8003124:	430a      	orrs	r2, r1
 8003126:	741a      	strb	r2, [r3, #16]
			flags.testProgress = 1;
 8003128:	4b1a      	ldr	r3, [pc, #104]	; (8003194 <testHandler+0x454>)
 800312a:	7e1a      	ldrb	r2, [r3, #24]
 800312c:	2102      	movs	r1, #2
 800312e:	430a      	orrs	r2, r1
 8003130:	761a      	strb	r2, [r3, #24]

			//Zobrazit text na displej

			PROGRESS_ON(*sourceInTesting, PROGRESS_LED3);
 8003132:	4b19      	ldr	r3, [pc, #100]	; (8003198 <testHandler+0x458>)
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	781a      	ldrb	r2, [r3, #0]
 8003138:	4b17      	ldr	r3, [pc, #92]	; (8003198 <testHandler+0x458>)
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	2108      	movs	r1, #8
 800313e:	430a      	orrs	r2, r1
 8003140:	b2d2      	uxtb	r2, r2
 8003142:	701a      	strb	r2, [r3, #0]
			RELAY_OFF(*sourceInTesting);
 8003144:	4b14      	ldr	r3, [pc, #80]	; (8003198 <testHandler+0x458>)
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	781a      	ldrb	r2, [r3, #0]
 800314a:	4b13      	ldr	r3, [pc, #76]	; (8003198 <testHandler+0x458>)
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	2102      	movs	r1, #2
 8003150:	438a      	bics	r2, r1
 8003152:	b2d2      	uxtb	r2, r2
 8003154:	701a      	strb	r2, [r3, #0]
			PWR_ON(*sourceInTesting);
 8003156:	4b10      	ldr	r3, [pc, #64]	; (8003198 <testHandler+0x458>)
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	781a      	ldrb	r2, [r3, #0]
 800315c:	4b0e      	ldr	r3, [pc, #56]	; (8003198 <testHandler+0x458>)
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	2101      	movs	r1, #1
 8003162:	438a      	bics	r2, r1
 8003164:	b2d2      	uxtb	r2, r2
 8003166:	701a      	strb	r2, [r3, #0]
			sendData();
 8003168:	f7ff fb9a 	bl	80028a0 <sendData>

			flags.meas.onlyBattery = 0;
 800316c:	4b09      	ldr	r3, [pc, #36]	; (8003194 <testHandler+0x454>)
 800316e:	7d1a      	ldrb	r2, [r3, #20]
 8003170:	2120      	movs	r1, #32
 8003172:	438a      	bics	r2, r1
 8003174:	751a      	strb	r2, [r3, #20]

			testPhase = WAITING;
 8003176:	4b0a      	ldr	r3, [pc, #40]	; (80031a0 <testHandler+0x460>)
 8003178:	2200      	movs	r2, #0
 800317a:	701a      	strb	r2, [r3, #0]
		}
		break;
 800317c:	e005      	b.n	800318a <testHandler+0x44a>
		break;
 800317e:	46c0      	nop			; (mov r8, r8)
 8003180:	e004      	b.n	800318c <testHandler+0x44c>
		break;
 8003182:	46c0      	nop			; (mov r8, r8)
 8003184:	e002      	b.n	800318c <testHandler+0x44c>
		break;
 8003186:	46c0      	nop			; (mov r8, r8)
 8003188:	e000      	b.n	800318c <testHandler+0x44c>
		break;
 800318a:	46c0      	nop			; (mov r8, r8)

	}
}
 800318c:	46c0      	nop			; (mov r8, r8)
 800318e:	46bd      	mov	sp, r7
 8003190:	b00b      	add	sp, #44	; 0x2c
 8003192:	bd90      	pop	{r4, r7, pc}
 8003194:	200003d8 	.word	0x200003d8
 8003198:	20000420 	.word	0x20000420
 800319c:	200003c8 	.word	0x200003c8
 80031a0:	20000418 	.word	0x20000418

080031a4 <startTest>:

//_____Funkce pro zahájení testu_____//
static void startTest(/*ukazatel na zdroj*/)
{
 80031a4:	b580      	push	{r7, lr}
 80031a6:	b082      	sub	sp, #8
 80031a8:	af00      	add	r7, sp, #0
	if(supplyToTest > regCount)
 80031aa:	4b49      	ldr	r3, [pc, #292]	; (80032d0 <startTest+0x12c>)
 80031ac:	781b      	ldrb	r3, [r3, #0]
 80031ae:	b2da      	uxtb	r2, r3
 80031b0:	4b48      	ldr	r3, [pc, #288]	; (80032d4 <startTest+0x130>)
 80031b2:	781b      	ldrb	r3, [r3, #0]
 80031b4:	429a      	cmp	r2, r3
 80031b6:	d900      	bls.n	80031ba <startTest+0x16>
 80031b8:	e085      	b.n	80032c6 <startTest+0x122>
	{
		return;
	}

	flags.ui.shortBeep = 1;
 80031ba:	4b47      	ldr	r3, [pc, #284]	; (80032d8 <startTest+0x134>)
 80031bc:	7c1a      	ldrb	r2, [r3, #16]
 80031be:	2101      	movs	r1, #1
 80031c0:	430a      	orrs	r2, r1
 80031c2:	741a      	strb	r2, [r3, #16]
	testPhase = START;
 80031c4:	4b45      	ldr	r3, [pc, #276]	; (80032dc <startTest+0x138>)
 80031c6:	2201      	movs	r2, #1
 80031c8:	701a      	strb	r2, [r3, #0]
	testNum = 0;
 80031ca:	4b45      	ldr	r3, [pc, #276]	; (80032e0 <startTest+0x13c>)
 80031cc:	2200      	movs	r2, #0
 80031ce:	601a      	str	r2, [r3, #0]
	flags.testProgress = 1;
 80031d0:	4b41      	ldr	r3, [pc, #260]	; (80032d8 <startTest+0x134>)
 80031d2:	7e1a      	ldrb	r2, [r3, #24]
 80031d4:	2102      	movs	r1, #2
 80031d6:	430a      	orrs	r2, r1
 80031d8:	761a      	strb	r2, [r3, #24]

	sourceInTesting = &regValues[regCount - (supplyToTest+1)];	//První deska (spodní) je řízena posledním bytem
 80031da:	4b42      	ldr	r3, [pc, #264]	; (80032e4 <startTest+0x140>)
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	4a3d      	ldr	r2, [pc, #244]	; (80032d4 <startTest+0x130>)
 80031e0:	7812      	ldrb	r2, [r2, #0]
 80031e2:	0011      	movs	r1, r2
 80031e4:	4a3a      	ldr	r2, [pc, #232]	; (80032d0 <startTest+0x12c>)
 80031e6:	7812      	ldrb	r2, [r2, #0]
 80031e8:	b2d2      	uxtb	r2, r2
 80031ea:	3201      	adds	r2, #1
 80031ec:	1a8a      	subs	r2, r1, r2
 80031ee:	189a      	adds	r2, r3, r2
 80031f0:	4b3d      	ldr	r3, [pc, #244]	; (80032e8 <startTest+0x144>)
 80031f2:	601a      	str	r2, [r3, #0]

	for(int i = 0; i < regCount; i++)
 80031f4:	2300      	movs	r3, #0
 80031f6:	607b      	str	r3, [r7, #4]
 80031f8:	e01c      	b.n	8003234 <startTest+0x90>
	{
		//Power up and disconnect all supplies
		RELAY_OFF(regValues[i]);
 80031fa:	4b3a      	ldr	r3, [pc, #232]	; (80032e4 <startTest+0x140>)
 80031fc:	681a      	ldr	r2, [r3, #0]
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	18d3      	adds	r3, r2, r3
 8003202:	781a      	ldrb	r2, [r3, #0]
 8003204:	4b37      	ldr	r3, [pc, #220]	; (80032e4 <startTest+0x140>)
 8003206:	6819      	ldr	r1, [r3, #0]
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	18cb      	adds	r3, r1, r3
 800320c:	2102      	movs	r1, #2
 800320e:	438a      	bics	r2, r1
 8003210:	b2d2      	uxtb	r2, r2
 8003212:	701a      	strb	r2, [r3, #0]
		PWR_ON(regValues[i]);
 8003214:	4b33      	ldr	r3, [pc, #204]	; (80032e4 <startTest+0x140>)
 8003216:	681a      	ldr	r2, [r3, #0]
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	18d3      	adds	r3, r2, r3
 800321c:	781a      	ldrb	r2, [r3, #0]
 800321e:	4b31      	ldr	r3, [pc, #196]	; (80032e4 <startTest+0x140>)
 8003220:	6819      	ldr	r1, [r3, #0]
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	18cb      	adds	r3, r1, r3
 8003226:	2101      	movs	r1, #1
 8003228:	438a      	bics	r2, r1
 800322a:	b2d2      	uxtb	r2, r2
 800322c:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < regCount; i++)
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	3301      	adds	r3, #1
 8003232:	607b      	str	r3, [r7, #4]
 8003234:	4b27      	ldr	r3, [pc, #156]	; (80032d4 <startTest+0x130>)
 8003236:	781b      	ldrb	r3, [r3, #0]
 8003238:	001a      	movs	r2, r3
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	4293      	cmp	r3, r2
 800323e:	dbdc      	blt.n	80031fa <startTest+0x56>
	}
	PROGRESS_ON(*sourceInTesting, PROGRESS_LED1);	//rozsvítit první ledku progress
 8003240:	4b29      	ldr	r3, [pc, #164]	; (80032e8 <startTest+0x144>)
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	781a      	ldrb	r2, [r3, #0]
 8003246:	4b28      	ldr	r3, [pc, #160]	; (80032e8 <startTest+0x144>)
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	2120      	movs	r1, #32
 800324c:	430a      	orrs	r2, r1
 800324e:	b2d2      	uxtb	r2, r2
 8003250:	701a      	strb	r2, [r3, #0]
	PROGRESS_OFF(*sourceInTesting, PROGRESS_LED2);	//Zhasnout zbyle led
 8003252:	4b25      	ldr	r3, [pc, #148]	; (80032e8 <startTest+0x144>)
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	781a      	ldrb	r2, [r3, #0]
 8003258:	4b23      	ldr	r3, [pc, #140]	; (80032e8 <startTest+0x144>)
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	2110      	movs	r1, #16
 800325e:	438a      	bics	r2, r1
 8003260:	b2d2      	uxtb	r2, r2
 8003262:	701a      	strb	r2, [r3, #0]
	PROGRESS_OFF(*sourceInTesting, PROGRESS_LED3);
 8003264:	4b20      	ldr	r3, [pc, #128]	; (80032e8 <startTest+0x144>)
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	781a      	ldrb	r2, [r3, #0]
 800326a:	4b1f      	ldr	r3, [pc, #124]	; (80032e8 <startTest+0x144>)
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	2108      	movs	r1, #8
 8003270:	438a      	bics	r2, r1
 8003272:	b2d2      	uxtb	r2, r2
 8003274:	701a      	strb	r2, [r3, #0]
	ERROR_OFF(*sourceInTesting);
 8003276:	4b1c      	ldr	r3, [pc, #112]	; (80032e8 <startTest+0x144>)
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	781a      	ldrb	r2, [r3, #0]
 800327c:	4b1a      	ldr	r3, [pc, #104]	; (80032e8 <startTest+0x144>)
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	2104      	movs	r1, #4
 8003282:	438a      	bics	r2, r1
 8003284:	b2d2      	uxtb	r2, r2
 8003286:	701a      	strb	r2, [r3, #0]
	RELAY_ON(*sourceInTesting);	//připojit relé
 8003288:	4b17      	ldr	r3, [pc, #92]	; (80032e8 <startTest+0x144>)
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	781a      	ldrb	r2, [r3, #0]
 800328e:	4b16      	ldr	r3, [pc, #88]	; (80032e8 <startTest+0x144>)
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	2102      	movs	r1, #2
 8003294:	430a      	orrs	r2, r1
 8003296:	b2d2      	uxtb	r2, r2
 8003298:	701a      	strb	r2, [r3, #0]

	sendData();	//poslat konfiguraci shift registrům
 800329a:	f7ff fb01 	bl	80028a0 <sendData>

	//___Nulování času___//
	for(int i = 1; i < 4; i++)
 800329e:	2301      	movs	r3, #1
 80032a0:	603b      	str	r3, [r7, #0]
 80032a2:	e007      	b.n	80032b4 <startTest+0x110>
	{
		sysTime[i] = 0;
 80032a4:	4b11      	ldr	r3, [pc, #68]	; (80032ec <startTest+0x148>)
 80032a6:	683a      	ldr	r2, [r7, #0]
 80032a8:	0092      	lsls	r2, r2, #2
 80032aa:	2100      	movs	r1, #0
 80032ac:	50d1      	str	r1, [r2, r3]
	for(int i = 1; i < 4; i++)
 80032ae:	683b      	ldr	r3, [r7, #0]
 80032b0:	3301      	adds	r3, #1
 80032b2:	603b      	str	r3, [r7, #0]
 80032b4:	683b      	ldr	r3, [r7, #0]
 80032b6:	2b03      	cmp	r3, #3
 80032b8:	ddf4      	ble.n	80032a4 <startTest+0x100>
	}

	flags.instructions.startRequest = 0;
 80032ba:	4b07      	ldr	r3, [pc, #28]	; (80032d8 <startTest+0x134>)
 80032bc:	7b1a      	ldrb	r2, [r3, #12]
 80032be:	2101      	movs	r1, #1
 80032c0:	438a      	bics	r2, r1
 80032c2:	731a      	strb	r2, [r3, #12]
 80032c4:	e000      	b.n	80032c8 <startTest+0x124>
		return;
 80032c6:	46c0      	nop			; (mov r8, r8)
}
 80032c8:	46bd      	mov	sp, r7
 80032ca:	b002      	add	sp, #8
 80032cc:	bd80      	pop	{r7, pc}
 80032ce:	46c0      	nop			; (mov r8, r8)
 80032d0:	200003f6 	.word	0x200003f6
 80032d4:	20000410 	.word	0x20000410
 80032d8:	200003d8 	.word	0x200003d8
 80032dc:	20000418 	.word	0x20000418
 80032e0:	2000041c 	.word	0x2000041c
 80032e4:	2000040c 	.word	0x2000040c
 80032e8:	20000420 	.word	0x20000420
 80032ec:	200003c8 	.word	0x200003c8

080032f0 <stopTest>:

//_____Funkce pro ukončení testu_____//
static void stopTest()
{
 80032f0:	b580      	push	{r7, lr}
 80032f2:	af00      	add	r7, sp, #0
	flags.ui.longBeep = 1;
 80032f4:	4b17      	ldr	r3, [pc, #92]	; (8003354 <stopTest+0x64>)
 80032f6:	7c1a      	ldrb	r2, [r3, #16]
 80032f8:	2102      	movs	r1, #2
 80032fa:	430a      	orrs	r2, r1
 80032fc:	741a      	strb	r2, [r3, #16]
	testPhase = WAITING;
 80032fe:	4b16      	ldr	r3, [pc, #88]	; (8003358 <stopTest+0x68>)
 8003300:	2200      	movs	r2, #0
 8003302:	701a      	strb	r2, [r3, #0]

	//Zobrazit text na displej
	LOAD_MIN_OFF;
 8003304:	4b15      	ldr	r3, [pc, #84]	; (800335c <stopTest+0x6c>)
 8003306:	2200      	movs	r2, #0
 8003308:	2180      	movs	r1, #128	; 0x80
 800330a:	0018      	movs	r0, r3
 800330c:	f001 f995 	bl	800463a <HAL_GPIO_WritePin>
	LOAD_MAX_OFF;
 8003310:	4b12      	ldr	r3, [pc, #72]	; (800335c <stopTest+0x6c>)
 8003312:	2200      	movs	r2, #0
 8003314:	2140      	movs	r1, #64	; 0x40
 8003316:	0018      	movs	r0, r3
 8003318:	f001 f98f 	bl	800463a <HAL_GPIO_WritePin>

	if(sourceInTesting != NULL)
 800331c:	4b10      	ldr	r3, [pc, #64]	; (8003360 <stopTest+0x70>)
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	2b00      	cmp	r3, #0
 8003322:	d00c      	beq.n	800333e <stopTest+0x4e>
	{
		*sourceInTesting = 0;
 8003324:	4b0e      	ldr	r3, [pc, #56]	; (8003360 <stopTest+0x70>)
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	2200      	movs	r2, #0
 800332a:	701a      	strb	r2, [r3, #0]
		ERROR_ON(*sourceInTesting);
 800332c:	4b0c      	ldr	r3, [pc, #48]	; (8003360 <stopTest+0x70>)
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	781a      	ldrb	r2, [r3, #0]
 8003332:	4b0b      	ldr	r3, [pc, #44]	; (8003360 <stopTest+0x70>)
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	2104      	movs	r1, #4
 8003338:	430a      	orrs	r2, r1
 800333a:	b2d2      	uxtb	r2, r2
 800333c:	701a      	strb	r2, [r3, #0]
	}
	sendData();
 800333e:	f7ff faaf 	bl	80028a0 <sendData>

	flags.instructions.stopRequest = 0;
 8003342:	4b04      	ldr	r3, [pc, #16]	; (8003354 <stopTest+0x64>)
 8003344:	7b1a      	ldrb	r2, [r3, #12]
 8003346:	2102      	movs	r1, #2
 8003348:	438a      	bics	r2, r1
 800334a:	731a      	strb	r2, [r3, #12]
}
 800334c:	46c0      	nop			; (mov r8, r8)
 800334e:	46bd      	mov	sp, r7
 8003350:	bd80      	pop	{r7, pc}
 8003352:	46c0      	nop			; (mov r8, r8)
 8003354:	200003d8 	.word	0x200003d8
 8003358:	20000418 	.word	0x20000418
 800335c:	48000800 	.word	0x48000800
 8003360:	20000420 	.word	0x20000420

08003364 <Reset_Handler>:
 8003364:	480d      	ldr	r0, [pc, #52]	; (800339c <LoopForever+0x2>)
 8003366:	4685      	mov	sp, r0
 8003368:	480d      	ldr	r0, [pc, #52]	; (80033a0 <LoopForever+0x6>)
 800336a:	490e      	ldr	r1, [pc, #56]	; (80033a4 <LoopForever+0xa>)
 800336c:	4a0e      	ldr	r2, [pc, #56]	; (80033a8 <LoopForever+0xe>)
 800336e:	2300      	movs	r3, #0
 8003370:	e002      	b.n	8003378 <LoopCopyDataInit>

08003372 <CopyDataInit>:
 8003372:	58d4      	ldr	r4, [r2, r3]
 8003374:	50c4      	str	r4, [r0, r3]
 8003376:	3304      	adds	r3, #4

08003378 <LoopCopyDataInit>:
 8003378:	18c4      	adds	r4, r0, r3
 800337a:	428c      	cmp	r4, r1
 800337c:	d3f9      	bcc.n	8003372 <CopyDataInit>
 800337e:	4a0b      	ldr	r2, [pc, #44]	; (80033ac <LoopForever+0x12>)
 8003380:	4c0b      	ldr	r4, [pc, #44]	; (80033b0 <LoopForever+0x16>)
 8003382:	2300      	movs	r3, #0
 8003384:	e001      	b.n	800338a <LoopFillZerobss>

08003386 <FillZerobss>:
 8003386:	6013      	str	r3, [r2, #0]
 8003388:	3204      	adds	r2, #4

0800338a <LoopFillZerobss>:
 800338a:	42a2      	cmp	r2, r4
 800338c:	d3fb      	bcc.n	8003386 <FillZerobss>
 800338e:	f7ff fcc7 	bl	8002d20 <SystemInit>
 8003392:	f00a fa8f 	bl	800d8b4 <__libc_init_array>
 8003396:	f7fd ff6d 	bl	8001274 <main>

0800339a <LoopForever>:
 800339a:	e7fe      	b.n	800339a <LoopForever>
 800339c:	20004000 	.word	0x20004000
 80033a0:	20000000 	.word	0x20000000
 80033a4:	200001e0 	.word	0x200001e0
 80033a8:	0800e5a0 	.word	0x0800e5a0
 80033ac:	200001e0 	.word	0x200001e0
 80033b0:	200015e8 	.word	0x200015e8

080033b4 <CEC_CAN_IRQHandler>:
 80033b4:	e7fe      	b.n	80033b4 <CEC_CAN_IRQHandler>
	...

080033b8 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80033b8:	b580      	push	{r7, lr}
 80033ba:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80033bc:	4b07      	ldr	r3, [pc, #28]	; (80033dc <HAL_Init+0x24>)
 80033be:	681a      	ldr	r2, [r3, #0]
 80033c0:	4b06      	ldr	r3, [pc, #24]	; (80033dc <HAL_Init+0x24>)
 80033c2:	2110      	movs	r1, #16
 80033c4:	430a      	orrs	r2, r1
 80033c6:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 80033c8:	2003      	movs	r0, #3
 80033ca:	f000 f809 	bl	80033e0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80033ce:	f7ff fa9f 	bl	8002910 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80033d2:	2300      	movs	r3, #0
}
 80033d4:	0018      	movs	r0, r3
 80033d6:	46bd      	mov	sp, r7
 80033d8:	bd80      	pop	{r7, pc}
 80033da:	46c0      	nop			; (mov r8, r8)
 80033dc:	40022000 	.word	0x40022000

080033e0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80033e0:	b590      	push	{r4, r7, lr}
 80033e2:	b083      	sub	sp, #12
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80033e8:	4b14      	ldr	r3, [pc, #80]	; (800343c <HAL_InitTick+0x5c>)
 80033ea:	681c      	ldr	r4, [r3, #0]
 80033ec:	4b14      	ldr	r3, [pc, #80]	; (8003440 <HAL_InitTick+0x60>)
 80033ee:	781b      	ldrb	r3, [r3, #0]
 80033f0:	0019      	movs	r1, r3
 80033f2:	23fa      	movs	r3, #250	; 0xfa
 80033f4:	0098      	lsls	r0, r3, #2
 80033f6:	f7fc fe99 	bl	800012c <__udivsi3>
 80033fa:	0003      	movs	r3, r0
 80033fc:	0019      	movs	r1, r3
 80033fe:	0020      	movs	r0, r4
 8003400:	f7fc fe94 	bl	800012c <__udivsi3>
 8003404:	0003      	movs	r3, r0
 8003406:	0018      	movs	r0, r3
 8003408:	f000 fef7 	bl	80041fa <HAL_SYSTICK_Config>
 800340c:	1e03      	subs	r3, r0, #0
 800340e:	d001      	beq.n	8003414 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8003410:	2301      	movs	r3, #1
 8003412:	e00f      	b.n	8003434 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	2b03      	cmp	r3, #3
 8003418:	d80b      	bhi.n	8003432 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800341a:	6879      	ldr	r1, [r7, #4]
 800341c:	2301      	movs	r3, #1
 800341e:	425b      	negs	r3, r3
 8003420:	2200      	movs	r2, #0
 8003422:	0018      	movs	r0, r3
 8003424:	f000 fec4 	bl	80041b0 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003428:	4b06      	ldr	r3, [pc, #24]	; (8003444 <HAL_InitTick+0x64>)
 800342a:	687a      	ldr	r2, [r7, #4]
 800342c:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 800342e:	2300      	movs	r3, #0
 8003430:	e000      	b.n	8003434 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8003432:	2301      	movs	r3, #1
}
 8003434:	0018      	movs	r0, r3
 8003436:	46bd      	mov	sp, r7
 8003438:	b003      	add	sp, #12
 800343a:	bd90      	pop	{r4, r7, pc}
 800343c:	20000000 	.word	0x20000000
 8003440:	20000008 	.word	0x20000008
 8003444:	20000004 	.word	0x20000004

08003448 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003448:	b580      	push	{r7, lr}
 800344a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800344c:	4b05      	ldr	r3, [pc, #20]	; (8003464 <HAL_IncTick+0x1c>)
 800344e:	781b      	ldrb	r3, [r3, #0]
 8003450:	001a      	movs	r2, r3
 8003452:	4b05      	ldr	r3, [pc, #20]	; (8003468 <HAL_IncTick+0x20>)
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	18d2      	adds	r2, r2, r3
 8003458:	4b03      	ldr	r3, [pc, #12]	; (8003468 <HAL_IncTick+0x20>)
 800345a:	601a      	str	r2, [r3, #0]
}
 800345c:	46c0      	nop			; (mov r8, r8)
 800345e:	46bd      	mov	sp, r7
 8003460:	bd80      	pop	{r7, pc}
 8003462:	46c0      	nop			; (mov r8, r8)
 8003464:	20000008 	.word	0x20000008
 8003468:	20000424 	.word	0x20000424

0800346c <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800346c:	b580      	push	{r7, lr}
 800346e:	af00      	add	r7, sp, #0
  return uwTick;
 8003470:	4b02      	ldr	r3, [pc, #8]	; (800347c <HAL_GetTick+0x10>)
 8003472:	681b      	ldr	r3, [r3, #0]
}
 8003474:	0018      	movs	r0, r3
 8003476:	46bd      	mov	sp, r7
 8003478:	bd80      	pop	{r7, pc}
 800347a:	46c0      	nop			; (mov r8, r8)
 800347c:	20000424 	.word	0x20000424

08003480 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003480:	b580      	push	{r7, lr}
 8003482:	b084      	sub	sp, #16
 8003484:	af00      	add	r7, sp, #0
 8003486:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003488:	f7ff fff0 	bl	800346c <HAL_GetTick>
 800348c:	0003      	movs	r3, r0
 800348e:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	3301      	adds	r3, #1
 8003498:	d005      	beq.n	80034a6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800349a:	4b0a      	ldr	r3, [pc, #40]	; (80034c4 <HAL_Delay+0x44>)
 800349c:	781b      	ldrb	r3, [r3, #0]
 800349e:	001a      	movs	r2, r3
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	189b      	adds	r3, r3, r2
 80034a4:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80034a6:	46c0      	nop			; (mov r8, r8)
 80034a8:	f7ff ffe0 	bl	800346c <HAL_GetTick>
 80034ac:	0002      	movs	r2, r0
 80034ae:	68bb      	ldr	r3, [r7, #8]
 80034b0:	1ad3      	subs	r3, r2, r3
 80034b2:	68fa      	ldr	r2, [r7, #12]
 80034b4:	429a      	cmp	r2, r3
 80034b6:	d8f7      	bhi.n	80034a8 <HAL_Delay+0x28>
  {
  }
}
 80034b8:	46c0      	nop			; (mov r8, r8)
 80034ba:	46c0      	nop			; (mov r8, r8)
 80034bc:	46bd      	mov	sp, r7
 80034be:	b004      	add	sp, #16
 80034c0:	bd80      	pop	{r7, pc}
 80034c2:	46c0      	nop			; (mov r8, r8)
 80034c4:	20000008 	.word	0x20000008

080034c8 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80034c8:	b580      	push	{r7, lr}
 80034ca:	b084      	sub	sp, #16
 80034cc:	af00      	add	r7, sp, #0
 80034ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80034d0:	230f      	movs	r3, #15
 80034d2:	18fb      	adds	r3, r7, r3
 80034d4:	2200      	movs	r2, #0
 80034d6:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0U;
 80034d8:	2300      	movs	r3, #0
 80034da:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if(hadc == NULL)
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d101      	bne.n	80034e6 <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 80034e2:	2301      	movs	r3, #1
 80034e4:	e125      	b.n	8003732 <HAL_ADC_Init+0x26a>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d10a      	bne.n	8003504 <HAL_ADC_Init+0x3c>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	2200      	movs	r2, #0
 80034f2:	63da      	str	r2, [r3, #60]	; 0x3c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	2234      	movs	r2, #52	; 0x34
 80034f8:	2100      	movs	r1, #0
 80034fa:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	0018      	movs	r0, r3
 8003500:	f7ff fa2a 	bl	8002958 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */ 
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003508:	2210      	movs	r2, #16
 800350a:	4013      	ands	r3, r2
 800350c:	d000      	beq.n	8003510 <HAL_ADC_Init+0x48>
 800350e:	e103      	b.n	8003718 <HAL_ADC_Init+0x250>
 8003510:	230f      	movs	r3, #15
 8003512:	18fb      	adds	r3, r7, r3
 8003514:	781b      	ldrb	r3, [r3, #0]
 8003516:	2b00      	cmp	r3, #0
 8003518:	d000      	beq.n	800351c <HAL_ADC_Init+0x54>
 800351a:	e0fd      	b.n	8003718 <HAL_ADC_Init+0x250>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	689b      	ldr	r3, [r3, #8]
 8003522:	2204      	movs	r2, #4
 8003524:	4013      	ands	r3, r2
      (tmp_hal_status == HAL_OK)                                &&
 8003526:	d000      	beq.n	800352a <HAL_ADC_Init+0x62>
 8003528:	e0f6      	b.n	8003718 <HAL_ADC_Init+0x250>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800352e:	4a83      	ldr	r2, [pc, #524]	; (800373c <HAL_ADC_Init+0x274>)
 8003530:	4013      	ands	r3, r2
 8003532:	2202      	movs	r2, #2
 8003534:	431a      	orrs	r2, r3
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	639a      	str	r2, [r3, #56]	; 0x38
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - ADC clock mode                                                      */
    /*  - ADC clock prescaler                                                 */
    /*  - ADC resolution                                                      */
    if (ADC_IS_ENABLE(hadc) == RESET)
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	689b      	ldr	r3, [r3, #8]
 8003540:	2203      	movs	r2, #3
 8003542:	4013      	ands	r3, r2
 8003544:	2b01      	cmp	r3, #1
 8003546:	d112      	bne.n	800356e <HAL_ADC_Init+0xa6>
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	2201      	movs	r2, #1
 8003550:	4013      	ands	r3, r2
 8003552:	2b01      	cmp	r3, #1
 8003554:	d009      	beq.n	800356a <HAL_ADC_Init+0xa2>
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	68da      	ldr	r2, [r3, #12]
 800355c:	2380      	movs	r3, #128	; 0x80
 800355e:	021b      	lsls	r3, r3, #8
 8003560:	401a      	ands	r2, r3
 8003562:	2380      	movs	r3, #128	; 0x80
 8003564:	021b      	lsls	r3, r3, #8
 8003566:	429a      	cmp	r2, r3
 8003568:	d101      	bne.n	800356e <HAL_ADC_Init+0xa6>
 800356a:	2301      	movs	r3, #1
 800356c:	e000      	b.n	8003570 <HAL_ADC_Init+0xa8>
 800356e:	2300      	movs	r3, #0
 8003570:	2b00      	cmp	r3, #0
 8003572:	d116      	bne.n	80035a2 <HAL_ADC_Init+0xda>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
     
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	68db      	ldr	r3, [r3, #12]
 800357a:	2218      	movs	r2, #24
 800357c:	4393      	bics	r3, r2
 800357e:	0019      	movs	r1, r3
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	689a      	ldr	r2, [r3, #8]
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	430a      	orrs	r2, r1
 800358a:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler                                                 */
      MODIFY_REG(hadc->Instance->CFGR2    ,
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	691b      	ldr	r3, [r3, #16]
 8003592:	009b      	lsls	r3, r3, #2
 8003594:	0899      	lsrs	r1, r3, #2
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	685a      	ldr	r2, [r3, #4]
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	430a      	orrs	r2, r1
 80035a0:	611a      	str	r2, [r3, #16]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	68da      	ldr	r2, [r3, #12]
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	4964      	ldr	r1, [pc, #400]	; (8003740 <HAL_ADC_Init+0x278>)
 80035ae:	400a      	ands	r2, r1
 80035b0:	60da      	str	r2, [r3, #12]
                                ADC_CFGR1_EXTEN   |
                                ADC_CFGR1_ALIGN   |
                                ADC_CFGR1_SCANDIR |
                                ADC_CFGR1_DMACFG   );

    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	7e1b      	ldrb	r3, [r3, #24]
 80035b6:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	7e5b      	ldrb	r3, [r3, #25]
 80035bc:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80035be:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	7e9b      	ldrb	r3, [r3, #26]
 80035c4:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 80035c6:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035cc:	2b01      	cmp	r3, #1
 80035ce:	d002      	beq.n	80035d6 <HAL_ADC_Init+0x10e>
 80035d0:	2380      	movs	r3, #128	; 0x80
 80035d2:	015b      	lsls	r3, r3, #5
 80035d4:	e000      	b.n	80035d8 <HAL_ADC_Init+0x110>
 80035d6:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 80035d8:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                             |
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 80035de:	431a      	orrs	r2, r3
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	691b      	ldr	r3, [r3, #16]
 80035e4:	2b02      	cmp	r3, #2
 80035e6:	d101      	bne.n	80035ec <HAL_ADC_Init+0x124>
 80035e8:	2304      	movs	r3, #4
 80035ea:	e000      	b.n	80035ee <HAL_ADC_Init+0x126>
 80035ec:	2300      	movs	r3, #0
                 hadc->Init.DataAlign                                             |
 80035ee:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	2124      	movs	r1, #36	; 0x24
 80035f4:	5c5b      	ldrb	r3, [r3, r1]
 80035f6:	005b      	lsls	r3, r3, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 80035f8:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80035fa:	68ba      	ldr	r2, [r7, #8]
 80035fc:	4313      	orrs	r3, r2
 80035fe:	60bb      	str	r3, [r7, #8]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	7edb      	ldrb	r3, [r3, #27]
 8003604:	2b01      	cmp	r3, #1
 8003606:	d115      	bne.n	8003634 <HAL_ADC_Init+0x16c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	7e9b      	ldrb	r3, [r3, #26]
 800360c:	2b00      	cmp	r3, #0
 800360e:	d105      	bne.n	800361c <HAL_ADC_Init+0x154>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8003610:	68bb      	ldr	r3, [r7, #8]
 8003612:	2280      	movs	r2, #128	; 0x80
 8003614:	0252      	lsls	r2, r2, #9
 8003616:	4313      	orrs	r3, r2
 8003618:	60bb      	str	r3, [r7, #8]
 800361a:	e00b      	b.n	8003634 <HAL_ADC_Init+0x16c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003620:	2220      	movs	r2, #32
 8003622:	431a      	orrs	r2, r3
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	639a      	str	r2, [r3, #56]	; 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800362c:	2201      	movs	r2, #1
 800362e:	431a      	orrs	r2, r3
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	63da      	str	r2, [r3, #60]	; 0x3c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	69da      	ldr	r2, [r3, #28]
 8003638:	23c2      	movs	r3, #194	; 0xc2
 800363a:	33ff      	adds	r3, #255	; 0xff
 800363c:	429a      	cmp	r2, r3
 800363e:	d007      	beq.n	8003650 <HAL_ADC_Init+0x188>
    {
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	69da      	ldr	r2, [r3, #28]
                    hadc->Init.ExternalTrigConvEdge );
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	6a1b      	ldr	r3, [r3, #32]
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8003648:	4313      	orrs	r3, r2
 800364a:	68ba      	ldr	r2, [r7, #8]
 800364c:	4313      	orrs	r3, r2
 800364e:	60bb      	str	r3, [r7, #8]
    }
    
    /* Update ADC configuration register with previous settings */
    hadc->Instance->CFGR1 |= tmpCFGR1;
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	68d9      	ldr	r1, [r3, #12]
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	68ba      	ldr	r2, [r7, #8]
 800365c:	430a      	orrs	r2, r1
 800365e:	60da      	str	r2, [r3, #12]
    /* Management of parameters "SamplingTimeCommon" and "SamplingTime"       */
    /* (obsolete): sampling time set in this function if parameter            */
    /*  "SamplingTimeCommon" has been set to a valid sampling time.           */
    /* Otherwise, sampling time is set into ADC channel initialization        */
    /* structure with parameter "SamplingTime" (obsolete).                    */
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003664:	2380      	movs	r3, #128	; 0x80
 8003666:	055b      	lsls	r3, r3, #21
 8003668:	429a      	cmp	r2, r3
 800366a:	d01b      	beq.n	80036a4 <HAL_ADC_Init+0x1dc>
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003670:	2b01      	cmp	r3, #1
 8003672:	d017      	beq.n	80036a4 <HAL_ADC_Init+0x1dc>
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003678:	2b02      	cmp	r3, #2
 800367a:	d013      	beq.n	80036a4 <HAL_ADC_Init+0x1dc>
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003680:	2b03      	cmp	r3, #3
 8003682:	d00f      	beq.n	80036a4 <HAL_ADC_Init+0x1dc>
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003688:	2b04      	cmp	r3, #4
 800368a:	d00b      	beq.n	80036a4 <HAL_ADC_Init+0x1dc>
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003690:	2b05      	cmp	r3, #5
 8003692:	d007      	beq.n	80036a4 <HAL_ADC_Init+0x1dc>
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003698:	2b06      	cmp	r3, #6
 800369a:	d003      	beq.n	80036a4 <HAL_ADC_Init+0x1dc>
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036a0:	2b07      	cmp	r3, #7
 80036a2:	d112      	bne.n	80036ca <HAL_ADC_Init+0x202>
    {
      /* Channel sampling time configuration */
      /* Clear the old sample time */
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	695a      	ldr	r2, [r3, #20]
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	2107      	movs	r1, #7
 80036b0:	438a      	bics	r2, r1
 80036b2:	615a      	str	r2, [r3, #20]
      
      /* Set the new sample time */
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	6959      	ldr	r1, [r3, #20]
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036be:	2207      	movs	r2, #7
 80036c0:	401a      	ands	r2, r3
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	430a      	orrs	r2, r1
 80036c8:	615a      	str	r2, [r3, #20]
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	68db      	ldr	r3, [r3, #12]
 80036d0:	4a1c      	ldr	r2, [pc, #112]	; (8003744 <HAL_ADC_Init+0x27c>)
 80036d2:	4013      	ands	r3, r2
 80036d4:	68ba      	ldr	r2, [r7, #8]
 80036d6:	429a      	cmp	r2, r3
 80036d8:	d10b      	bne.n	80036f2 <HAL_ADC_Init+0x22a>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	2200      	movs	r2, #0
 80036de:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036e4:	2203      	movs	r2, #3
 80036e6:	4393      	bics	r3, r2
 80036e8:	2201      	movs	r2, #1
 80036ea:	431a      	orrs	r2, r3
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	639a      	str	r2, [r3, #56]	; 0x38
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 80036f0:	e01c      	b.n	800372c <HAL_ADC_Init+0x264>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036f6:	2212      	movs	r2, #18
 80036f8:	4393      	bics	r3, r2
 80036fa:	2210      	movs	r2, #16
 80036fc:	431a      	orrs	r2, r3
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003706:	2201      	movs	r2, #1
 8003708:	431a      	orrs	r2, r3
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	63da      	str	r2, [r3, #60]	; 0x3c
      
      tmp_hal_status = HAL_ERROR;
 800370e:	230f      	movs	r3, #15
 8003710:	18fb      	adds	r3, r7, r3
 8003712:	2201      	movs	r2, #1
 8003714:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8003716:	e009      	b.n	800372c <HAL_ADC_Init+0x264>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800371c:	2210      	movs	r2, #16
 800371e:	431a      	orrs	r2, r3
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	639a      	str	r2, [r3, #56]	; 0x38
        
    tmp_hal_status = HAL_ERROR;
 8003724:	230f      	movs	r3, #15
 8003726:	18fb      	adds	r3, r7, r3
 8003728:	2201      	movs	r2, #1
 800372a:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800372c:	230f      	movs	r3, #15
 800372e:	18fb      	adds	r3, r7, r3
 8003730:	781b      	ldrb	r3, [r3, #0]
}
 8003732:	0018      	movs	r0, r3
 8003734:	46bd      	mov	sp, r7
 8003736:	b004      	add	sp, #16
 8003738:	bd80      	pop	{r7, pc}
 800373a:	46c0      	nop			; (mov r8, r8)
 800373c:	fffffefd 	.word	0xfffffefd
 8003740:	fffe0219 	.word	0xfffe0219
 8003744:	833fffe7 	.word	0x833fffe7

08003748 <HAL_ADC_Start_IT>:
  *         Each of these interruptions has its dedicated callback function.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 8003748:	b590      	push	{r4, r7, lr}
 800374a:	b085      	sub	sp, #20
 800374c:	af00      	add	r7, sp, #0
 800374e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003750:	230f      	movs	r3, #15
 8003752:	18fb      	adds	r3, r7, r3
 8003754:	2200      	movs	r2, #0
 8003756:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
    
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	689b      	ldr	r3, [r3, #8]
 800375e:	2204      	movs	r2, #4
 8003760:	4013      	ands	r3, r2
 8003762:	d156      	bne.n	8003812 <HAL_ADC_Start_IT+0xca>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	2234      	movs	r2, #52	; 0x34
 8003768:	5c9b      	ldrb	r3, [r3, r2]
 800376a:	2b01      	cmp	r3, #1
 800376c:	d101      	bne.n	8003772 <HAL_ADC_Start_IT+0x2a>
 800376e:	2302      	movs	r3, #2
 8003770:	e056      	b.n	8003820 <HAL_ADC_Start_IT+0xd8>
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	2234      	movs	r2, #52	; 0x34
 8003776:	2101      	movs	r1, #1
 8003778:	5499      	strb	r1, [r3, r2]
     
    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware.                                   */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	7e5b      	ldrb	r3, [r3, #25]
 800377e:	2b01      	cmp	r3, #1
 8003780:	d007      	beq.n	8003792 <HAL_ADC_Start_IT+0x4a>
    {
      tmp_hal_status = ADC_Enable(hadc);
 8003782:	230f      	movs	r3, #15
 8003784:	18fc      	adds	r4, r7, r3
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	0018      	movs	r0, r3
 800378a:	f000 fa7b 	bl	8003c84 <ADC_Enable>
 800378e:	0003      	movs	r3, r0
 8003790:	7023      	strb	r3, [r4, #0]
    }
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8003792:	230f      	movs	r3, #15
 8003794:	18fb      	adds	r3, r7, r3
 8003796:	781b      	ldrb	r3, [r3, #0]
 8003798:	2b00      	cmp	r3, #0
 800379a:	d13e      	bne.n	800381a <HAL_ADC_Start_IT+0xd2>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037a0:	4a21      	ldr	r2, [pc, #132]	; (8003828 <HAL_ADC_Start_IT+0xe0>)
 80037a2:	4013      	ands	r3, r2
 80037a4:	2280      	movs	r2, #128	; 0x80
 80037a6:	0052      	lsls	r2, r2, #1
 80037a8:	431a      	orrs	r2, r3
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	2200      	movs	r2, #0
 80037b2:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	2234      	movs	r2, #52	; 0x34
 80037b8:	2100      	movs	r1, #0
 80037ba:	5499      	strb	r1, [r3, r2]
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	221c      	movs	r2, #28
 80037c2:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC end of conversion interrupt */
      /* Enable ADC overrun interrupt */  
      switch(hadc->Init.EOCSelection)
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	695b      	ldr	r3, [r3, #20]
 80037c8:	2b08      	cmp	r3, #8
 80037ca:	d110      	bne.n	80037ee <HAL_ADC_Start_IT+0xa6>
      {
        case ADC_EOC_SEQ_CONV: 
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	685a      	ldr	r2, [r3, #4]
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	2104      	movs	r1, #4
 80037d8:	438a      	bics	r2, r1
 80037da:	605a      	str	r2, [r3, #4]
          __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOS | ADC_IT_OVR));
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	685a      	ldr	r2, [r3, #4]
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	2118      	movs	r1, #24
 80037e8:	430a      	orrs	r2, r1
 80037ea:	605a      	str	r2, [r3, #4]
          break;
 80037ec:	e008      	b.n	8003800 <HAL_ADC_Start_IT+0xb8>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	685a      	ldr	r2, [r3, #4]
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	211c      	movs	r1, #28
 80037fa:	430a      	orrs	r2, r1
 80037fc:	605a      	str	r2, [r3, #4]
          break;
 80037fe:	46c0      	nop			; (mov r8, r8)
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	689a      	ldr	r2, [r3, #8]
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	2104      	movs	r1, #4
 800380c:	430a      	orrs	r2, r1
 800380e:	609a      	str	r2, [r3, #8]
 8003810:	e003      	b.n	800381a <HAL_ADC_Start_IT+0xd2>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8003812:	230f      	movs	r3, #15
 8003814:	18fb      	adds	r3, r7, r3
 8003816:	2202      	movs	r2, #2
 8003818:	701a      	strb	r2, [r3, #0]
  }    
    
  /* Return function status */
  return tmp_hal_status;
 800381a:	230f      	movs	r3, #15
 800381c:	18fb      	adds	r3, r7, r3
 800381e:	781b      	ldrb	r3, [r3, #0]
}
 8003820:	0018      	movs	r0, r3
 8003822:	46bd      	mov	sp, r7
 8003824:	b005      	add	sp, #20
 8003826:	bd90      	pop	{r4, r7, pc}
 8003828:	fffff0fe 	.word	0xfffff0fe

0800382c <HAL_ADC_Stop_IT>:
  *         end-of-conversion, disable ADC peripheral.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_IT(ADC_HandleTypeDef* hadc)
{
 800382c:	b5b0      	push	{r4, r5, r7, lr}
 800382e:	b084      	sub	sp, #16
 8003830:	af00      	add	r7, sp, #0
 8003832:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003834:	230f      	movs	r3, #15
 8003836:	18fb      	adds	r3, r7, r3
 8003838:	2200      	movs	r2, #0
 800383a:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	2234      	movs	r2, #52	; 0x34
 8003840:	5c9b      	ldrb	r3, [r3, r2]
 8003842:	2b01      	cmp	r3, #1
 8003844:	d101      	bne.n	800384a <HAL_ADC_Stop_IT+0x1e>
 8003846:	2302      	movs	r3, #2
 8003848:	e033      	b.n	80038b2 <HAL_ADC_Stop_IT+0x86>
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	2234      	movs	r2, #52	; 0x34
 800384e:	2101      	movs	r1, #1
 8003850:	5499      	strb	r1, [r3, r2]
  
  /* 1. Stop potential conversion on going, on regular group */
  tmp_hal_status = ADC_ConversionStop(hadc);
 8003852:	250f      	movs	r5, #15
 8003854:	197c      	adds	r4, r7, r5
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	0018      	movs	r0, r3
 800385a:	f000 fb08 	bl	8003e6e <ADC_ConversionStop>
 800385e:	0003      	movs	r3, r0
 8003860:	7023      	strb	r3, [r4, #0]
   
  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8003862:	0028      	movs	r0, r5
 8003864:	183b      	adds	r3, r7, r0
 8003866:	781b      	ldrb	r3, [r3, #0]
 8003868:	2b00      	cmp	r3, #0
 800386a:	d11b      	bne.n	80038a4 <HAL_ADC_Stop_IT+0x78>
  {
    /* Disable ADC end of conversion interrupt for regular group */
    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	685a      	ldr	r2, [r3, #4]
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	211c      	movs	r1, #28
 8003878:	438a      	bics	r2, r1
 800387a:	605a      	str	r2, [r3, #4]
    
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 800387c:	0005      	movs	r5, r0
 800387e:	183c      	adds	r4, r7, r0
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	0018      	movs	r0, r3
 8003884:	f000 fa82 	bl	8003d8c <ADC_Disable>
 8003888:	0003      	movs	r3, r0
 800388a:	7023      	strb	r3, [r4, #0]
    
    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 800388c:	197b      	adds	r3, r7, r5
 800388e:	781b      	ldrb	r3, [r3, #0]
 8003890:	2b00      	cmp	r3, #0
 8003892:	d107      	bne.n	80038a4 <HAL_ADC_Stop_IT+0x78>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003898:	4a08      	ldr	r2, [pc, #32]	; (80038bc <HAL_ADC_Stop_IT+0x90>)
 800389a:	4013      	ands	r3, r2
 800389c:	2201      	movs	r2, #1
 800389e:	431a      	orrs	r2, r3
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	2234      	movs	r2, #52	; 0x34
 80038a8:	2100      	movs	r1, #0
 80038aa:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 80038ac:	230f      	movs	r3, #15
 80038ae:	18fb      	adds	r3, r7, r3
 80038b0:	781b      	ldrb	r3, [r3, #0]
}
 80038b2:	0018      	movs	r0, r3
 80038b4:	46bd      	mov	sp, r7
 80038b6:	b004      	add	sp, #16
 80038b8:	bdb0      	pop	{r4, r5, r7, pc}
 80038ba:	46c0      	nop			; (mov r8, r8)
 80038bc:	fffffefe 	.word	0xfffffefe

080038c0 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 80038c0:	b580      	push	{r7, lr}
 80038c2:	b082      	sub	sp, #8
 80038c4:	af00      	add	r7, sp, #0
 80038c6:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 80038ce:	0018      	movs	r0, r3
 80038d0:	46bd      	mov	sp, r7
 80038d2:	b002      	add	sp, #8
 80038d4:	bd80      	pop	{r7, pc}
	...

080038d8 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request.  
  * @param  hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 80038d8:	b580      	push	{r7, lr}
 80038da:	b082      	sub	sp, #8
 80038dc:	af00      	add	r7, sp, #0
 80038de:	6078      	str	r0, [r7, #4]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	2204      	movs	r2, #4
 80038e8:	4013      	ands	r3, r2
 80038ea:	2b04      	cmp	r3, #4
 80038ec:	d106      	bne.n	80038fc <HAL_ADC_IRQHandler+0x24>
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	685b      	ldr	r3, [r3, #4]
 80038f4:	2204      	movs	r2, #4
 80038f6:	4013      	ands	r3, r2
 80038f8:	2b04      	cmp	r3, #4
 80038fa:	d00d      	beq.n	8003918 <HAL_ADC_IRQHandler+0x40>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	2208      	movs	r2, #8
 8003904:	4013      	ands	r3, r2
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 8003906:	2b08      	cmp	r3, #8
 8003908:	d14f      	bne.n	80039aa <HAL_ADC_IRQHandler+0xd2>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	685b      	ldr	r3, [r3, #4]
 8003910:	2208      	movs	r2, #8
 8003912:	4013      	ands	r3, r2
 8003914:	2b08      	cmp	r3, #8
 8003916:	d148      	bne.n	80039aa <HAL_ADC_IRQHandler+0xd2>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800391c:	2210      	movs	r2, #16
 800391e:	4013      	ands	r3, r2
 8003920:	d106      	bne.n	8003930 <HAL_ADC_IRQHandler+0x58>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003926:	2280      	movs	r2, #128	; 0x80
 8003928:	0092      	lsls	r2, r2, #2
 800392a:	431a      	orrs	r2, r3
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	639a      	str	r2, [r3, #56]	; 0x38
    }
    
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	68da      	ldr	r2, [r3, #12]
 8003936:	23c0      	movs	r3, #192	; 0xc0
 8003938:	011b      	lsls	r3, r3, #4
 800393a:	4013      	ands	r3, r2
 800393c:	d12d      	bne.n	800399a <HAL_ADC_IRQHandler+0xc2>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	7e9b      	ldrb	r3, [r3, #26]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8003942:	2b00      	cmp	r3, #0
 8003944:	d129      	bne.n	800399a <HAL_ADC_IRQHandler+0xc2>
    {
      /* If End of Sequence is reached, disable interrupts */
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	2208      	movs	r2, #8
 800394e:	4013      	ands	r3, r2
 8003950:	2b08      	cmp	r3, #8
 8003952:	d122      	bne.n	800399a <HAL_ADC_IRQHandler+0xc2>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	689b      	ldr	r3, [r3, #8]
 800395a:	2204      	movs	r2, #4
 800395c:	4013      	ands	r3, r2
 800395e:	d110      	bne.n	8003982 <HAL_ADC_IRQHandler+0xaa>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	685a      	ldr	r2, [r3, #4]
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	210c      	movs	r1, #12
 800396c:	438a      	bics	r2, r1
 800396e:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003974:	4a33      	ldr	r2, [pc, #204]	; (8003a44 <HAL_ADC_IRQHandler+0x16c>)
 8003976:	4013      	ands	r3, r2
 8003978:	2201      	movs	r2, #1
 800397a:	431a      	orrs	r2, r3
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	639a      	str	r2, [r3, #56]	; 0x38
 8003980:	e00b      	b.n	800399a <HAL_ADC_IRQHandler+0xc2>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003986:	2220      	movs	r2, #32
 8003988:	431a      	orrs	r2, r3
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	639a      	str	r2, [r3, #56]	; 0x38
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003992:	2201      	movs	r2, #1
 8003994:	431a      	orrs	r2, r3
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	63da      	str	r2, [r3, #60]	; 0x3c
    /*       from EOC or EOS, possibility to use:                             */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	0018      	movs	r0, r3
 800399e:	f7fd fc55 	bl	800124c <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS) );
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	220c      	movs	r2, #12
 80039a8:	601a      	str	r2, [r3, #0]
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD))
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	2280      	movs	r2, #128	; 0x80
 80039b2:	4013      	ands	r3, r2
 80039b4:	2b80      	cmp	r3, #128	; 0x80
 80039b6:	d115      	bne.n	80039e4 <HAL_ADC_IRQHandler+0x10c>
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	685b      	ldr	r3, [r3, #4]
 80039be:	2280      	movs	r2, #128	; 0x80
 80039c0:	4013      	ands	r3, r2
 80039c2:	2b80      	cmp	r3, #128	; 0x80
 80039c4:	d10e      	bne.n	80039e4 <HAL_ADC_IRQHandler+0x10c>
  {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039ca:	2280      	movs	r2, #128	; 0x80
 80039cc:	0252      	lsls	r2, r2, #9
 80039ce:	431a      	orrs	r2, r3
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	639a      	str	r2, [r3, #56]	; 0x38

#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	0018      	movs	r0, r3
 80039d8:	f000 f836 	bl	8003a48 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear ADC Analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	2280      	movs	r2, #128	; 0x80
 80039e2:	601a      	str	r2, [r3, #0]
   
  }
  
  
  /* ========== Check Overrun flag ========== */
  if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR))
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	2210      	movs	r2, #16
 80039ec:	4013      	ands	r3, r2
 80039ee:	2b10      	cmp	r3, #16
 80039f0:	d123      	bne.n	8003a3a <HAL_ADC_IRQHandler+0x162>
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	685b      	ldr	r3, [r3, #4]
 80039f8:	2210      	movs	r2, #16
 80039fa:	4013      	ands	r3, r2
 80039fc:	2b10      	cmp	r3, #16
 80039fe:	d11c      	bne.n	8003a3a <HAL_ADC_IRQHandler+0x162>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if ((hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)            ||
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a04:	2b01      	cmp	r3, #1
 8003a06:	d006      	beq.n	8003a16 <HAL_ADC_IRQHandler+0x13e>
        HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN)  )
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	68db      	ldr	r3, [r3, #12]
 8003a0e:	2201      	movs	r2, #1
 8003a10:	4013      	ands	r3, r2
    if ((hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)            ||
 8003a12:	2b01      	cmp	r3, #1
 8003a14:	d10d      	bne.n	8003a32 <HAL_ADC_IRQHandler+0x15a>
    {
      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a1a:	2202      	movs	r2, #2
 8003a1c:	431a      	orrs	r2, r3
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Clear ADC overrun flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	2210      	movs	r2, #16
 8003a28:	601a      	str	r2, [r3, #0]
      
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	0018      	movs	r0, r3
 8003a2e:	f000 f813 	bl	8003a58 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	2210      	movs	r2, #16
 8003a38:	601a      	str	r2, [r3, #0]
  }

}
 8003a3a:	46c0      	nop			; (mov r8, r8)
 8003a3c:	46bd      	mov	sp, r7
 8003a3e:	b002      	add	sp, #8
 8003a40:	bd80      	pop	{r7, pc}
 8003a42:	46c0      	nop			; (mov r8, r8)
 8003a44:	fffffefe 	.word	0xfffffefe

08003a48 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8003a48:	b580      	push	{r7, lr}
 8003a4a:	b082      	sub	sp, #8
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindowCallback must be implemented in the user file.
  */
}
 8003a50:	46c0      	nop			; (mov r8, r8)
 8003a52:	46bd      	mov	sp, r7
 8003a54:	b002      	add	sp, #8
 8003a56:	bd80      	pop	{r7, pc}

08003a58 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003a58:	b580      	push	{r7, lr}
 8003a5a:	b082      	sub	sp, #8
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8003a60:	46c0      	nop			; (mov r8, r8)
 8003a62:	46bd      	mov	sp, r7
 8003a64:	b002      	add	sp, #8
 8003a66:	bd80      	pop	{r7, pc}

08003a68 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003a68:	b580      	push	{r7, lr}
 8003a6a:	b084      	sub	sp, #16
 8003a6c:	af00      	add	r7, sp, #0
 8003a6e:	6078      	str	r0, [r7, #4]
 8003a70:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003a72:	230f      	movs	r3, #15
 8003a74:	18fb      	adds	r3, r7, r3
 8003a76:	2200      	movs	r2, #0
 8003a78:	701a      	strb	r2, [r3, #0]
  __IO uint32_t wait_loop_index = 0U;
 8003a7a:	2300      	movs	r3, #0
 8003a7c:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a82:	2380      	movs	r3, #128	; 0x80
 8003a84:	055b      	lsls	r3, r3, #21
 8003a86:	429a      	cmp	r2, r3
 8003a88:	d011      	beq.n	8003aae <HAL_ADC_ConfigChannel+0x46>
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a8e:	2b01      	cmp	r3, #1
 8003a90:	d00d      	beq.n	8003aae <HAL_ADC_ConfigChannel+0x46>
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a96:	2b02      	cmp	r3, #2
 8003a98:	d009      	beq.n	8003aae <HAL_ADC_ConfigChannel+0x46>
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a9e:	2b03      	cmp	r3, #3
 8003aa0:	d005      	beq.n	8003aae <HAL_ADC_ConfigChannel+0x46>
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003aa6:	2b04      	cmp	r3, #4
 8003aa8:	d001      	beq.n	8003aae <HAL_ADC_ConfigChannel+0x46>
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  {
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	2234      	movs	r2, #52	; 0x34
 8003ab2:	5c9b      	ldrb	r3, [r3, r2]
 8003ab4:	2b01      	cmp	r3, #1
 8003ab6:	d101      	bne.n	8003abc <HAL_ADC_ConfigChannel+0x54>
 8003ab8:	2302      	movs	r3, #2
 8003aba:	e0d0      	b.n	8003c5e <HAL_ADC_ConfigChannel+0x1f6>
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	2234      	movs	r2, #52	; 0x34
 8003ac0:	2101      	movs	r1, #1
 8003ac2:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	689b      	ldr	r3, [r3, #8]
 8003aca:	2204      	movs	r2, #4
 8003acc:	4013      	ands	r3, r2
 8003ace:	d000      	beq.n	8003ad2 <HAL_ADC_ConfigChannel+0x6a>
 8003ad0:	e0b4      	b.n	8003c3c <HAL_ADC_ConfigChannel+0x1d4>
  {
    /* Configure channel: depending on rank setting, add it or remove it from */
    /* ADC conversion sequencer.                                              */
    if (sConfig->Rank != ADC_RANK_NONE)
 8003ad2:	683b      	ldr	r3, [r7, #0]
 8003ad4:	685b      	ldr	r3, [r3, #4]
 8003ad6:	4a64      	ldr	r2, [pc, #400]	; (8003c68 <HAL_ADC_ConfigChannel+0x200>)
 8003ad8:	4293      	cmp	r3, r2
 8003ada:	d100      	bne.n	8003ade <HAL_ADC_ConfigChannel+0x76>
 8003adc:	e082      	b.n	8003be4 <HAL_ADC_ConfigChannel+0x17c>
    {
      /* Regular sequence configuration */
      /* Set the channel selection register from the selected channel */
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8003ae4:	683b      	ldr	r3, [r7, #0]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	2201      	movs	r2, #1
 8003aea:	409a      	lsls	r2, r3
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	430a      	orrs	r2, r1
 8003af2:	629a      	str	r2, [r3, #40]	; 0x28
      /* Channel sampling time configuration */
      /* Management of parameters "SamplingTimeCommon" and "SamplingTime"     */
      /* (obsolete): sampling time set in this function with                  */
      /* parameter "SamplingTime" (obsolete) only if not already set into     */
      /* ADC initialization structure with parameter "SamplingTimeCommon".    */
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003af8:	2380      	movs	r3, #128	; 0x80
 8003afa:	055b      	lsls	r3, r3, #21
 8003afc:	429a      	cmp	r2, r3
 8003afe:	d037      	beq.n	8003b70 <HAL_ADC_ConfigChannel+0x108>
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b04:	2b01      	cmp	r3, #1
 8003b06:	d033      	beq.n	8003b70 <HAL_ADC_ConfigChannel+0x108>
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b0c:	2b02      	cmp	r3, #2
 8003b0e:	d02f      	beq.n	8003b70 <HAL_ADC_ConfigChannel+0x108>
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b14:	2b03      	cmp	r3, #3
 8003b16:	d02b      	beq.n	8003b70 <HAL_ADC_ConfigChannel+0x108>
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b1c:	2b04      	cmp	r3, #4
 8003b1e:	d027      	beq.n	8003b70 <HAL_ADC_ConfigChannel+0x108>
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b24:	2b05      	cmp	r3, #5
 8003b26:	d023      	beq.n	8003b70 <HAL_ADC_ConfigChannel+0x108>
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b2c:	2b06      	cmp	r3, #6
 8003b2e:	d01f      	beq.n	8003b70 <HAL_ADC_ConfigChannel+0x108>
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b34:	2b07      	cmp	r3, #7
 8003b36:	d01b      	beq.n	8003b70 <HAL_ADC_ConfigChannel+0x108>
      {
        /* Modify sampling time if needed (not needed in case of reoccurrence */
        /* for several channels programmed consecutively into the sequencer)  */
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 8003b38:	683b      	ldr	r3, [r7, #0]
 8003b3a:	689a      	ldr	r2, [r3, #8]
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	695b      	ldr	r3, [r3, #20]
 8003b42:	2107      	movs	r1, #7
 8003b44:	400b      	ands	r3, r1
 8003b46:	429a      	cmp	r2, r3
 8003b48:	d012      	beq.n	8003b70 <HAL_ADC_ConfigChannel+0x108>
        {
          /* Channel sampling time configuration */
          /* Clear the old sample time */
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	695a      	ldr	r2, [r3, #20]
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	2107      	movs	r1, #7
 8003b56:	438a      	bics	r2, r1
 8003b58:	615a      	str	r2, [r3, #20]
          
          /* Set the new sample time */
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	6959      	ldr	r1, [r3, #20]
 8003b60:	683b      	ldr	r3, [r7, #0]
 8003b62:	689b      	ldr	r3, [r3, #8]
 8003b64:	2207      	movs	r2, #7
 8003b66:	401a      	ands	r2, r3
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	430a      	orrs	r2, r1
 8003b6e:	615a      	str	r2, [r3, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003b70:	683b      	ldr	r3, [r7, #0]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	2b10      	cmp	r3, #16
 8003b76:	d007      	beq.n	8003b88 <HAL_ADC_ConfigChannel+0x120>
 8003b78:	683b      	ldr	r3, [r7, #0]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	2b11      	cmp	r3, #17
 8003b7e:	d003      	beq.n	8003b88 <HAL_ADC_ConfigChannel+0x120>
 8003b80:	683b      	ldr	r3, [r7, #0]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	2b12      	cmp	r3, #18
 8003b86:	d163      	bne.n	8003c50 <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path. */
        /* If Channel_17 is selected, enable VREFINT measurement path. */
        /* If Channel_18 is selected, enable VBAT measurement path. */
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8003b88:	4b38      	ldr	r3, [pc, #224]	; (8003c6c <HAL_ADC_ConfigChannel+0x204>)
 8003b8a:	6819      	ldr	r1, [r3, #0]
 8003b8c:	683b      	ldr	r3, [r7, #0]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	2b10      	cmp	r3, #16
 8003b92:	d009      	beq.n	8003ba8 <HAL_ADC_ConfigChannel+0x140>
 8003b94:	683b      	ldr	r3, [r7, #0]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	2b11      	cmp	r3, #17
 8003b9a:	d102      	bne.n	8003ba2 <HAL_ADC_ConfigChannel+0x13a>
 8003b9c:	2380      	movs	r3, #128	; 0x80
 8003b9e:	03db      	lsls	r3, r3, #15
 8003ba0:	e004      	b.n	8003bac <HAL_ADC_ConfigChannel+0x144>
 8003ba2:	2380      	movs	r3, #128	; 0x80
 8003ba4:	045b      	lsls	r3, r3, #17
 8003ba6:	e001      	b.n	8003bac <HAL_ADC_ConfigChannel+0x144>
 8003ba8:	2380      	movs	r3, #128	; 0x80
 8003baa:	041b      	lsls	r3, r3, #16
 8003bac:	4a2f      	ldr	r2, [pc, #188]	; (8003c6c <HAL_ADC_ConfigChannel+0x204>)
 8003bae:	430b      	orrs	r3, r1
 8003bb0:	6013      	str	r3, [r2, #0]
        
        /* If Temp. sensor is selected, wait for stabilization delay */
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003bb2:	683b      	ldr	r3, [r7, #0]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	2b10      	cmp	r3, #16
 8003bb8:	d14a      	bne.n	8003c50 <HAL_ADC_ConfigChannel+0x1e8>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003bba:	4b2d      	ldr	r3, [pc, #180]	; (8003c70 <HAL_ADC_ConfigChannel+0x208>)
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	492d      	ldr	r1, [pc, #180]	; (8003c74 <HAL_ADC_ConfigChannel+0x20c>)
 8003bc0:	0018      	movs	r0, r3
 8003bc2:	f7fc fab3 	bl	800012c <__udivsi3>
 8003bc6:	0003      	movs	r3, r0
 8003bc8:	001a      	movs	r2, r3
 8003bca:	0013      	movs	r3, r2
 8003bcc:	009b      	lsls	r3, r3, #2
 8003bce:	189b      	adds	r3, r3, r2
 8003bd0:	005b      	lsls	r3, r3, #1
 8003bd2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003bd4:	e002      	b.n	8003bdc <HAL_ADC_ConfigChannel+0x174>
          {
            wait_loop_index--;
 8003bd6:	68bb      	ldr	r3, [r7, #8]
 8003bd8:	3b01      	subs	r3, #1
 8003bda:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003bdc:	68bb      	ldr	r3, [r7, #8]
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d1f9      	bne.n	8003bd6 <HAL_ADC_ConfigChannel+0x16e>
 8003be2:	e035      	b.n	8003c50 <HAL_ADC_ConfigChannel+0x1e8>
    }
    else
    {
      /* Regular sequence configuration */
      /* Reset the channel selection register from the selected channel */
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003bea:	683b      	ldr	r3, [r7, #0]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	2101      	movs	r1, #1
 8003bf0:	4099      	lsls	r1, r3
 8003bf2:	000b      	movs	r3, r1
 8003bf4:	43d9      	mvns	r1, r3
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	400a      	ands	r2, r1
 8003bfc:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
      /* internal measurement paths disable: If internal channel selected,    */
      /* disable dedicated internal buffers and path.                         */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003bfe:	683b      	ldr	r3, [r7, #0]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	2b10      	cmp	r3, #16
 8003c04:	d007      	beq.n	8003c16 <HAL_ADC_ConfigChannel+0x1ae>
 8003c06:	683b      	ldr	r3, [r7, #0]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	2b11      	cmp	r3, #17
 8003c0c:	d003      	beq.n	8003c16 <HAL_ADC_ConfigChannel+0x1ae>
 8003c0e:	683b      	ldr	r3, [r7, #0]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	2b12      	cmp	r3, #18
 8003c14:	d11c      	bne.n	8003c50 <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, disable Temp. sensor measurement path. */
        /* If Channel_17 is selected, disable VREFINT measurement path. */
        /* If Channel_18 is selected, disable VBAT measurement path. */
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8003c16:	4b15      	ldr	r3, [pc, #84]	; (8003c6c <HAL_ADC_ConfigChannel+0x204>)
 8003c18:	6819      	ldr	r1, [r3, #0]
 8003c1a:	683b      	ldr	r3, [r7, #0]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	2b10      	cmp	r3, #16
 8003c20:	d007      	beq.n	8003c32 <HAL_ADC_ConfigChannel+0x1ca>
 8003c22:	683b      	ldr	r3, [r7, #0]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	2b11      	cmp	r3, #17
 8003c28:	d101      	bne.n	8003c2e <HAL_ADC_ConfigChannel+0x1c6>
 8003c2a:	4b13      	ldr	r3, [pc, #76]	; (8003c78 <HAL_ADC_ConfigChannel+0x210>)
 8003c2c:	e002      	b.n	8003c34 <HAL_ADC_ConfigChannel+0x1cc>
 8003c2e:	4b13      	ldr	r3, [pc, #76]	; (8003c7c <HAL_ADC_ConfigChannel+0x214>)
 8003c30:	e000      	b.n	8003c34 <HAL_ADC_ConfigChannel+0x1cc>
 8003c32:	4b13      	ldr	r3, [pc, #76]	; (8003c80 <HAL_ADC_ConfigChannel+0x218>)
 8003c34:	4a0d      	ldr	r2, [pc, #52]	; (8003c6c <HAL_ADC_ConfigChannel+0x204>)
 8003c36:	400b      	ands	r3, r1
 8003c38:	6013      	str	r3, [r2, #0]
 8003c3a:	e009      	b.n	8003c50 <HAL_ADC_ConfigChannel+0x1e8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c40:	2220      	movs	r2, #32
 8003c42:	431a      	orrs	r2, r3
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	639a      	str	r2, [r3, #56]	; 0x38
    
    tmp_hal_status = HAL_ERROR;
 8003c48:	230f      	movs	r3, #15
 8003c4a:	18fb      	adds	r3, r7, r3
 8003c4c:	2201      	movs	r2, #1
 8003c4e:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	2234      	movs	r2, #52	; 0x34
 8003c54:	2100      	movs	r1, #0
 8003c56:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8003c58:	230f      	movs	r3, #15
 8003c5a:	18fb      	adds	r3, r7, r3
 8003c5c:	781b      	ldrb	r3, [r3, #0]
}
 8003c5e:	0018      	movs	r0, r3
 8003c60:	46bd      	mov	sp, r7
 8003c62:	b004      	add	sp, #16
 8003c64:	bd80      	pop	{r7, pc}
 8003c66:	46c0      	nop			; (mov r8, r8)
 8003c68:	00001001 	.word	0x00001001
 8003c6c:	40012708 	.word	0x40012708
 8003c70:	20000000 	.word	0x20000000
 8003c74:	000f4240 	.word	0x000f4240
 8003c78:	ffbfffff 	.word	0xffbfffff
 8003c7c:	feffffff 	.word	0xfeffffff
 8003c80:	ff7fffff 	.word	0xff7fffff

08003c84 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8003c84:	b580      	push	{r7, lr}
 8003c86:	b084      	sub	sp, #16
 8003c88:	af00      	add	r7, sp, #0
 8003c8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003c8c:	2300      	movs	r3, #0
 8003c8e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8003c90:	2300      	movs	r3, #0
 8003c92:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	689b      	ldr	r3, [r3, #8]
 8003c9a:	2203      	movs	r2, #3
 8003c9c:	4013      	ands	r3, r2
 8003c9e:	2b01      	cmp	r3, #1
 8003ca0:	d112      	bne.n	8003cc8 <ADC_Enable+0x44>
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	2201      	movs	r2, #1
 8003caa:	4013      	ands	r3, r2
 8003cac:	2b01      	cmp	r3, #1
 8003cae:	d009      	beq.n	8003cc4 <ADC_Enable+0x40>
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	68da      	ldr	r2, [r3, #12]
 8003cb6:	2380      	movs	r3, #128	; 0x80
 8003cb8:	021b      	lsls	r3, r3, #8
 8003cba:	401a      	ands	r2, r3
 8003cbc:	2380      	movs	r3, #128	; 0x80
 8003cbe:	021b      	lsls	r3, r3, #8
 8003cc0:	429a      	cmp	r2, r3
 8003cc2:	d101      	bne.n	8003cc8 <ADC_Enable+0x44>
 8003cc4:	2301      	movs	r3, #1
 8003cc6:	e000      	b.n	8003cca <ADC_Enable+0x46>
 8003cc8:	2300      	movs	r3, #0
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d152      	bne.n	8003d74 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	689b      	ldr	r3, [r3, #8]
 8003cd4:	4a2a      	ldr	r2, [pc, #168]	; (8003d80 <ADC_Enable+0xfc>)
 8003cd6:	4013      	ands	r3, r2
 8003cd8:	d00d      	beq.n	8003cf6 <ADC_Enable+0x72>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cde:	2210      	movs	r2, #16
 8003ce0:	431a      	orrs	r2, r3
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	639a      	str	r2, [r3, #56]	; 0x38
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cea:	2201      	movs	r2, #1
 8003cec:	431a      	orrs	r2, r3
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	63da      	str	r2, [r3, #60]	; 0x3c
      
      return HAL_ERROR;
 8003cf2:	2301      	movs	r3, #1
 8003cf4:	e03f      	b.n	8003d76 <ADC_Enable+0xf2>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	689a      	ldr	r2, [r3, #8]
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	2101      	movs	r1, #1
 8003d02:	430a      	orrs	r2, r1
 8003d04:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003d06:	4b1f      	ldr	r3, [pc, #124]	; (8003d84 <ADC_Enable+0x100>)
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	491f      	ldr	r1, [pc, #124]	; (8003d88 <ADC_Enable+0x104>)
 8003d0c:	0018      	movs	r0, r3
 8003d0e:	f7fc fa0d 	bl	800012c <__udivsi3>
 8003d12:	0003      	movs	r3, r0
 8003d14:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8003d16:	e002      	b.n	8003d1e <ADC_Enable+0x9a>
    {
      wait_loop_index--;
 8003d18:	68bb      	ldr	r3, [r7, #8]
 8003d1a:	3b01      	subs	r3, #1
 8003d1c:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8003d1e:	68bb      	ldr	r3, [r7, #8]
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d1f9      	bne.n	8003d18 <ADC_Enable+0x94>
    }

    /* Get tick count */
    tickstart = HAL_GetTick();
 8003d24:	f7ff fba2 	bl	800346c <HAL_GetTick>
 8003d28:	0003      	movs	r3, r0
 8003d2a:	60fb      	str	r3, [r7, #12]
    
    /* Wait for ADC effectively enabled */
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8003d2c:	e01b      	b.n	8003d66 <ADC_Enable+0xe2>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003d2e:	f7ff fb9d 	bl	800346c <HAL_GetTick>
 8003d32:	0002      	movs	r2, r0
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	1ad3      	subs	r3, r2, r3
 8003d38:	2b02      	cmp	r3, #2
 8003d3a:	d914      	bls.n	8003d66 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	2201      	movs	r2, #1
 8003d44:	4013      	ands	r3, r2
 8003d46:	2b01      	cmp	r3, #1
 8003d48:	d00d      	beq.n	8003d66 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d4e:	2210      	movs	r2, #16
 8003d50:	431a      	orrs	r2, r3
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	639a      	str	r2, [r3, #56]	; 0x38

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d5a:	2201      	movs	r2, #1
 8003d5c:	431a      	orrs	r2, r3
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	63da      	str	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003d62:	2301      	movs	r3, #1
 8003d64:	e007      	b.n	8003d76 <ADC_Enable+0xf2>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	2201      	movs	r2, #1
 8003d6e:	4013      	ands	r3, r2
 8003d70:	2b01      	cmp	r3, #1
 8003d72:	d1dc      	bne.n	8003d2e <ADC_Enable+0xaa>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8003d74:	2300      	movs	r3, #0
}
 8003d76:	0018      	movs	r0, r3
 8003d78:	46bd      	mov	sp, r7
 8003d7a:	b004      	add	sp, #16
 8003d7c:	bd80      	pop	{r7, pc}
 8003d7e:	46c0      	nop			; (mov r8, r8)
 8003d80:	80000017 	.word	0x80000017
 8003d84:	20000000 	.word	0x20000000
 8003d88:	000f4240 	.word	0x000f4240

08003d8c <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8003d8c:	b580      	push	{r7, lr}
 8003d8e:	b084      	sub	sp, #16
 8003d90:	af00      	add	r7, sp, #0
 8003d92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003d94:	2300      	movs	r3, #0
 8003d96:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	689b      	ldr	r3, [r3, #8]
 8003d9e:	2203      	movs	r2, #3
 8003da0:	4013      	ands	r3, r2
 8003da2:	2b01      	cmp	r3, #1
 8003da4:	d112      	bne.n	8003dcc <ADC_Disable+0x40>
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	2201      	movs	r2, #1
 8003dae:	4013      	ands	r3, r2
 8003db0:	2b01      	cmp	r3, #1
 8003db2:	d009      	beq.n	8003dc8 <ADC_Disable+0x3c>
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	68da      	ldr	r2, [r3, #12]
 8003dba:	2380      	movs	r3, #128	; 0x80
 8003dbc:	021b      	lsls	r3, r3, #8
 8003dbe:	401a      	ands	r2, r3
 8003dc0:	2380      	movs	r3, #128	; 0x80
 8003dc2:	021b      	lsls	r3, r3, #8
 8003dc4:	429a      	cmp	r2, r3
 8003dc6:	d101      	bne.n	8003dcc <ADC_Disable+0x40>
 8003dc8:	2301      	movs	r3, #1
 8003dca:	e000      	b.n	8003dce <ADC_Disable+0x42>
 8003dcc:	2300      	movs	r3, #0
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d048      	beq.n	8003e64 <ADC_Disable+0xd8>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	689b      	ldr	r3, [r3, #8]
 8003dd8:	2205      	movs	r2, #5
 8003dda:	4013      	ands	r3, r2
 8003ddc:	2b01      	cmp	r3, #1
 8003dde:	d110      	bne.n	8003e02 <ADC_Disable+0x76>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	689a      	ldr	r2, [r3, #8]
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	2102      	movs	r1, #2
 8003dec:	430a      	orrs	r2, r1
 8003dee:	609a      	str	r2, [r3, #8]
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	2203      	movs	r2, #3
 8003df6:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003df8:	f7ff fb38 	bl	800346c <HAL_GetTick>
 8003dfc:	0003      	movs	r3, r0
 8003dfe:	60fb      	str	r3, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8003e00:	e029      	b.n	8003e56 <ADC_Disable+0xca>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e06:	2210      	movs	r2, #16
 8003e08:	431a      	orrs	r2, r3
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	639a      	str	r2, [r3, #56]	; 0x38
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e12:	2201      	movs	r2, #1
 8003e14:	431a      	orrs	r2, r3
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	63da      	str	r2, [r3, #60]	; 0x3c
      return HAL_ERROR;
 8003e1a:	2301      	movs	r3, #1
 8003e1c:	e023      	b.n	8003e66 <ADC_Disable+0xda>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003e1e:	f7ff fb25 	bl	800346c <HAL_GetTick>
 8003e22:	0002      	movs	r2, r0
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	1ad3      	subs	r3, r2, r3
 8003e28:	2b02      	cmp	r3, #2
 8003e2a:	d914      	bls.n	8003e56 <ADC_Disable+0xca>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	689b      	ldr	r3, [r3, #8]
 8003e32:	2201      	movs	r2, #1
 8003e34:	4013      	ands	r3, r2
 8003e36:	2b01      	cmp	r3, #1
 8003e38:	d10d      	bne.n	8003e56 <ADC_Disable+0xca>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e3e:	2210      	movs	r2, #16
 8003e40:	431a      	orrs	r2, r3
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	639a      	str	r2, [r3, #56]	; 0x38

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e4a:	2201      	movs	r2, #1
 8003e4c:	431a      	orrs	r2, r3
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	63da      	str	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003e52:	2301      	movs	r3, #1
 8003e54:	e007      	b.n	8003e66 <ADC_Disable+0xda>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	689b      	ldr	r3, [r3, #8]
 8003e5c:	2201      	movs	r2, #1
 8003e5e:	4013      	ands	r3, r2
 8003e60:	2b01      	cmp	r3, #1
 8003e62:	d0dc      	beq.n	8003e1e <ADC_Disable+0x92>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8003e64:	2300      	movs	r3, #0
}
 8003e66:	0018      	movs	r0, r3
 8003e68:	46bd      	mov	sp, r7
 8003e6a:	b004      	add	sp, #16
 8003e6c:	bd80      	pop	{r7, pc}

08003e6e <ADC_ConversionStop>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef* hadc)
{
 8003e6e:	b580      	push	{r7, lr}
 8003e70:	b084      	sub	sp, #16
 8003e72:	af00      	add	r7, sp, #0
 8003e74:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003e76:	2300      	movs	r3, #0
 8003e78:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
    
  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc))
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	689b      	ldr	r3, [r3, #8]
 8003e80:	2204      	movs	r2, #4
 8003e82:	4013      	ands	r3, r2
 8003e84:	d03a      	beq.n	8003efc <ADC_ConversionStop+0x8e>
  {
    
    /* Stop potential conversion on going on regular group */
    /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	689b      	ldr	r3, [r3, #8]
 8003e8c:	2204      	movs	r2, #4
 8003e8e:	4013      	ands	r3, r2
 8003e90:	2b04      	cmp	r3, #4
 8003e92:	d10d      	bne.n	8003eb0 <ADC_ConversionStop+0x42>
        HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)                  )
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	689b      	ldr	r3, [r3, #8]
 8003e9a:	2202      	movs	r2, #2
 8003e9c:	4013      	ands	r3, r2
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8003e9e:	d107      	bne.n	8003eb0 <ADC_ConversionStop+0x42>
    {
      /* Stop conversions on regular group */
      hadc->Instance->CR |= ADC_CR_ADSTP;
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	689a      	ldr	r2, [r3, #8]
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	2110      	movs	r1, #16
 8003eac:	430a      	orrs	r2, r1
 8003eae:	609a      	str	r2, [r3, #8]
    }
    
    /* Wait for conversion effectively stopped */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003eb0:	f7ff fadc 	bl	800346c <HAL_GetTick>
 8003eb4:	0003      	movs	r3, r0
 8003eb6:	60fb      	str	r3, [r7, #12]
      
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 8003eb8:	e01a      	b.n	8003ef0 <ADC_ConversionStop+0x82>
    {
      if((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8003eba:	f7ff fad7 	bl	800346c <HAL_GetTick>
 8003ebe:	0002      	movs	r2, r0
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	1ad3      	subs	r3, r2, r3
 8003ec4:	2b02      	cmp	r3, #2
 8003ec6:	d913      	bls.n	8003ef0 <ADC_ConversionStop+0x82>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	689b      	ldr	r3, [r3, #8]
 8003ece:	2204      	movs	r2, #4
 8003ed0:	4013      	ands	r3, r2
 8003ed2:	d00d      	beq.n	8003ef0 <ADC_ConversionStop+0x82>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ed8:	2210      	movs	r2, #16
 8003eda:	431a      	orrs	r2, r3
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	639a      	str	r2, [r3, #56]	; 0x38

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ee4:	2201      	movs	r2, #1
 8003ee6:	431a      	orrs	r2, r3
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	63da      	str	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003eec:	2301      	movs	r3, #1
 8003eee:	e006      	b.n	8003efe <ADC_ConversionStop+0x90>
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	689b      	ldr	r3, [r3, #8]
 8003ef6:	2204      	movs	r2, #4
 8003ef8:	4013      	ands	r3, r2
 8003efa:	d1de      	bne.n	8003eba <ADC_ConversionStop+0x4c>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8003efc:	2300      	movs	r3, #0
}
 8003efe:	0018      	movs	r0, r3
 8003f00:	46bd      	mov	sp, r7
 8003f02:	b004      	add	sp, #16
 8003f04:	bd80      	pop	{r7, pc}
	...

08003f08 <HAL_ADCEx_Calibration_Start>:
  *         HAL_ADC_GetValue() (value on 7 bits: from DR[6;0]).
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 8003f08:	b580      	push	{r7, lr}
 8003f0a:	b086      	sub	sp, #24
 8003f0c:	af00      	add	r7, sp, #0
 8003f0e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003f10:	2317      	movs	r3, #23
 8003f12:	18fb      	adds	r3, r7, r3
 8003f14:	2200      	movs	r2, #0
 8003f16:	701a      	strb	r2, [r3, #0]
  uint32_t tickstart = 0U;
 8003f18:	2300      	movs	r3, #0
 8003f1a:	613b      	str	r3, [r7, #16]
  uint32_t backup_setting_adc_dma_transfer = 0; /* Note: Variable not declared as volatile because register read is already declared as volatile */
 8003f1c:	2300      	movs	r3, #0
 8003f1e:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	2234      	movs	r2, #52	; 0x34
 8003f24:	5c9b      	ldrb	r3, [r3, r2]
 8003f26:	2b01      	cmp	r3, #1
 8003f28:	d101      	bne.n	8003f2e <HAL_ADCEx_Calibration_Start+0x26>
 8003f2a:	2302      	movs	r3, #2
 8003f2c:	e08d      	b.n	800404a <HAL_ADCEx_Calibration_Start+0x142>
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	2234      	movs	r2, #52	; 0x34
 8003f32:	2101      	movs	r1, #1
 8003f34:	5499      	strb	r1, [r3, r2]
  
  /* Calibration prerequisite: ADC must be disabled. */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	689b      	ldr	r3, [r3, #8]
 8003f3c:	2203      	movs	r2, #3
 8003f3e:	4013      	ands	r3, r2
 8003f40:	2b01      	cmp	r3, #1
 8003f42:	d112      	bne.n	8003f6a <HAL_ADCEx_Calibration_Start+0x62>
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	2201      	movs	r2, #1
 8003f4c:	4013      	ands	r3, r2
 8003f4e:	2b01      	cmp	r3, #1
 8003f50:	d009      	beq.n	8003f66 <HAL_ADCEx_Calibration_Start+0x5e>
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	68da      	ldr	r2, [r3, #12]
 8003f58:	2380      	movs	r3, #128	; 0x80
 8003f5a:	021b      	lsls	r3, r3, #8
 8003f5c:	401a      	ands	r2, r3
 8003f5e:	2380      	movs	r3, #128	; 0x80
 8003f60:	021b      	lsls	r3, r3, #8
 8003f62:	429a      	cmp	r2, r3
 8003f64:	d101      	bne.n	8003f6a <HAL_ADCEx_Calibration_Start+0x62>
 8003f66:	2301      	movs	r3, #1
 8003f68:	e000      	b.n	8003f6c <HAL_ADCEx_Calibration_Start+0x64>
 8003f6a:	2300      	movs	r3, #0
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d15b      	bne.n	8004028 <HAL_ADCEx_Calibration_Start+0x120>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State, 
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f74:	4a37      	ldr	r2, [pc, #220]	; (8004054 <HAL_ADCEx_Calibration_Start+0x14c>)
 8003f76:	4013      	ands	r3, r2
 8003f78:	2202      	movs	r2, #2
 8003f7a:	431a      	orrs	r2, r3
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	639a      	str	r2, [r3, #56]	; 0x38
    /* Note: Specificity of this STM32 serie: Calibration factor is           */
    /*       available in data register and also transfered by DMA.           */
    /*       To not insert ADC calibration factor among ADC conversion data   */
    /*       in array variable, DMA transfer must be disabled during          */
    /*       calibration.                                                     */
    backup_setting_adc_dma_transfer = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	68db      	ldr	r3, [r3, #12]
 8003f86:	2203      	movs	r2, #3
 8003f88:	4013      	ands	r3, r2
 8003f8a:	60fb      	str	r3, [r7, #12]
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	68da      	ldr	r2, [r3, #12]
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	2103      	movs	r1, #3
 8003f98:	438a      	bics	r2, r1
 8003f9a:	60da      	str	r2, [r3, #12]

    /* Start ADC calibration */
    hadc->Instance->CR |= ADC_CR_ADCAL;
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	689a      	ldr	r2, [r3, #8]
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	2180      	movs	r1, #128	; 0x80
 8003fa8:	0609      	lsls	r1, r1, #24
 8003faa:	430a      	orrs	r2, r1
 8003fac:	609a      	str	r2, [r3, #8]

    tickstart = HAL_GetTick();  
 8003fae:	f7ff fa5d 	bl	800346c <HAL_GetTick>
 8003fb2:	0003      	movs	r3, r0
 8003fb4:	613b      	str	r3, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8003fb6:	e01d      	b.n	8003ff4 <HAL_ADCEx_Calibration_Start+0xec>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8003fb8:	f7ff fa58 	bl	800346c <HAL_GetTick>
 8003fbc:	0002      	movs	r2, r0
 8003fbe:	693b      	ldr	r3, [r7, #16]
 8003fc0:	1ad3      	subs	r3, r2, r3
 8003fc2:	2b02      	cmp	r3, #2
 8003fc4:	d916      	bls.n	8003ff4 <HAL_ADCEx_Calibration_Start+0xec>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	689b      	ldr	r3, [r3, #8]
 8003fcc:	0fdb      	lsrs	r3, r3, #31
 8003fce:	07da      	lsls	r2, r3, #31
 8003fd0:	2380      	movs	r3, #128	; 0x80
 8003fd2:	061b      	lsls	r3, r3, #24
 8003fd4:	429a      	cmp	r2, r3
 8003fd6:	d10d      	bne.n	8003ff4 <HAL_ADCEx_Calibration_Start+0xec>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fdc:	2212      	movs	r2, #18
 8003fde:	4393      	bics	r3, r2
 8003fe0:	2210      	movs	r2, #16
 8003fe2:	431a      	orrs	r2, r3
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	639a      	str	r2, [r3, #56]	; 0x38
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	2234      	movs	r2, #52	; 0x34
 8003fec:	2100      	movs	r1, #0
 8003fee:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8003ff0:	2301      	movs	r3, #1
 8003ff2:	e02a      	b.n	800404a <HAL_ADCEx_Calibration_Start+0x142>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	689b      	ldr	r3, [r3, #8]
 8003ffa:	0fdb      	lsrs	r3, r3, #31
 8003ffc:	07da      	lsls	r2, r3, #31
 8003ffe:	2380      	movs	r3, #128	; 0x80
 8004000:	061b      	lsls	r3, r3, #24
 8004002:	429a      	cmp	r2, r3
 8004004:	d0d8      	beq.n	8003fb8 <HAL_ADCEx_Calibration_Start+0xb0>
        }
      }
    }
    
    /* Restore ADC DMA transfer request after calibration */
    SET_BIT(hadc->Instance->CFGR1, backup_setting_adc_dma_transfer);
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	68d9      	ldr	r1, [r3, #12]
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	68fa      	ldr	r2, [r7, #12]
 8004012:	430a      	orrs	r2, r1
 8004014:	60da      	str	r2, [r3, #12]

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800401a:	2203      	movs	r2, #3
 800401c:	4393      	bics	r3, r2
 800401e:	2201      	movs	r2, #1
 8004020:	431a      	orrs	r2, r3
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	639a      	str	r2, [r3, #56]	; 0x38
 8004026:	e009      	b.n	800403c <HAL_ADCEx_Calibration_Start+0x134>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800402c:	2220      	movs	r2, #32
 800402e:	431a      	orrs	r2, r3
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	639a      	str	r2, [r3, #56]	; 0x38
    
    tmp_hal_status = HAL_ERROR;
 8004034:	2317      	movs	r3, #23
 8004036:	18fb      	adds	r3, r7, r3
 8004038:	2201      	movs	r2, #1
 800403a:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	2234      	movs	r2, #52	; 0x34
 8004040:	2100      	movs	r1, #0
 8004042:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8004044:	2317      	movs	r3, #23
 8004046:	18fb      	adds	r3, r7, r3
 8004048:	781b      	ldrb	r3, [r3, #0]
}
 800404a:	0018      	movs	r0, r3
 800404c:	46bd      	mov	sp, r7
 800404e:	b006      	add	sp, #24
 8004050:	bd80      	pop	{r7, pc}
 8004052:	46c0      	nop			; (mov r8, r8)
 8004054:	fffffefd 	.word	0xfffffefd

08004058 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004058:	b580      	push	{r7, lr}
 800405a:	b082      	sub	sp, #8
 800405c:	af00      	add	r7, sp, #0
 800405e:	0002      	movs	r2, r0
 8004060:	1dfb      	adds	r3, r7, #7
 8004062:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8004064:	1dfb      	adds	r3, r7, #7
 8004066:	781b      	ldrb	r3, [r3, #0]
 8004068:	2b7f      	cmp	r3, #127	; 0x7f
 800406a:	d809      	bhi.n	8004080 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800406c:	1dfb      	adds	r3, r7, #7
 800406e:	781b      	ldrb	r3, [r3, #0]
 8004070:	001a      	movs	r2, r3
 8004072:	231f      	movs	r3, #31
 8004074:	401a      	ands	r2, r3
 8004076:	4b04      	ldr	r3, [pc, #16]	; (8004088 <__NVIC_EnableIRQ+0x30>)
 8004078:	2101      	movs	r1, #1
 800407a:	4091      	lsls	r1, r2
 800407c:	000a      	movs	r2, r1
 800407e:	601a      	str	r2, [r3, #0]
  }
}
 8004080:	46c0      	nop			; (mov r8, r8)
 8004082:	46bd      	mov	sp, r7
 8004084:	b002      	add	sp, #8
 8004086:	bd80      	pop	{r7, pc}
 8004088:	e000e100 	.word	0xe000e100

0800408c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800408c:	b590      	push	{r4, r7, lr}
 800408e:	b083      	sub	sp, #12
 8004090:	af00      	add	r7, sp, #0
 8004092:	0002      	movs	r2, r0
 8004094:	6039      	str	r1, [r7, #0]
 8004096:	1dfb      	adds	r3, r7, #7
 8004098:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800409a:	1dfb      	adds	r3, r7, #7
 800409c:	781b      	ldrb	r3, [r3, #0]
 800409e:	2b7f      	cmp	r3, #127	; 0x7f
 80040a0:	d828      	bhi.n	80040f4 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80040a2:	4a2f      	ldr	r2, [pc, #188]	; (8004160 <__NVIC_SetPriority+0xd4>)
 80040a4:	1dfb      	adds	r3, r7, #7
 80040a6:	781b      	ldrb	r3, [r3, #0]
 80040a8:	b25b      	sxtb	r3, r3
 80040aa:	089b      	lsrs	r3, r3, #2
 80040ac:	33c0      	adds	r3, #192	; 0xc0
 80040ae:	009b      	lsls	r3, r3, #2
 80040b0:	589b      	ldr	r3, [r3, r2]
 80040b2:	1dfa      	adds	r2, r7, #7
 80040b4:	7812      	ldrb	r2, [r2, #0]
 80040b6:	0011      	movs	r1, r2
 80040b8:	2203      	movs	r2, #3
 80040ba:	400a      	ands	r2, r1
 80040bc:	00d2      	lsls	r2, r2, #3
 80040be:	21ff      	movs	r1, #255	; 0xff
 80040c0:	4091      	lsls	r1, r2
 80040c2:	000a      	movs	r2, r1
 80040c4:	43d2      	mvns	r2, r2
 80040c6:	401a      	ands	r2, r3
 80040c8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80040ca:	683b      	ldr	r3, [r7, #0]
 80040cc:	019b      	lsls	r3, r3, #6
 80040ce:	22ff      	movs	r2, #255	; 0xff
 80040d0:	401a      	ands	r2, r3
 80040d2:	1dfb      	adds	r3, r7, #7
 80040d4:	781b      	ldrb	r3, [r3, #0]
 80040d6:	0018      	movs	r0, r3
 80040d8:	2303      	movs	r3, #3
 80040da:	4003      	ands	r3, r0
 80040dc:	00db      	lsls	r3, r3, #3
 80040de:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80040e0:	481f      	ldr	r0, [pc, #124]	; (8004160 <__NVIC_SetPriority+0xd4>)
 80040e2:	1dfb      	adds	r3, r7, #7
 80040e4:	781b      	ldrb	r3, [r3, #0]
 80040e6:	b25b      	sxtb	r3, r3
 80040e8:	089b      	lsrs	r3, r3, #2
 80040ea:	430a      	orrs	r2, r1
 80040ec:	33c0      	adds	r3, #192	; 0xc0
 80040ee:	009b      	lsls	r3, r3, #2
 80040f0:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80040f2:	e031      	b.n	8004158 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80040f4:	4a1b      	ldr	r2, [pc, #108]	; (8004164 <__NVIC_SetPriority+0xd8>)
 80040f6:	1dfb      	adds	r3, r7, #7
 80040f8:	781b      	ldrb	r3, [r3, #0]
 80040fa:	0019      	movs	r1, r3
 80040fc:	230f      	movs	r3, #15
 80040fe:	400b      	ands	r3, r1
 8004100:	3b08      	subs	r3, #8
 8004102:	089b      	lsrs	r3, r3, #2
 8004104:	3306      	adds	r3, #6
 8004106:	009b      	lsls	r3, r3, #2
 8004108:	18d3      	adds	r3, r2, r3
 800410a:	3304      	adds	r3, #4
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	1dfa      	adds	r2, r7, #7
 8004110:	7812      	ldrb	r2, [r2, #0]
 8004112:	0011      	movs	r1, r2
 8004114:	2203      	movs	r2, #3
 8004116:	400a      	ands	r2, r1
 8004118:	00d2      	lsls	r2, r2, #3
 800411a:	21ff      	movs	r1, #255	; 0xff
 800411c:	4091      	lsls	r1, r2
 800411e:	000a      	movs	r2, r1
 8004120:	43d2      	mvns	r2, r2
 8004122:	401a      	ands	r2, r3
 8004124:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8004126:	683b      	ldr	r3, [r7, #0]
 8004128:	019b      	lsls	r3, r3, #6
 800412a:	22ff      	movs	r2, #255	; 0xff
 800412c:	401a      	ands	r2, r3
 800412e:	1dfb      	adds	r3, r7, #7
 8004130:	781b      	ldrb	r3, [r3, #0]
 8004132:	0018      	movs	r0, r3
 8004134:	2303      	movs	r3, #3
 8004136:	4003      	ands	r3, r0
 8004138:	00db      	lsls	r3, r3, #3
 800413a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800413c:	4809      	ldr	r0, [pc, #36]	; (8004164 <__NVIC_SetPriority+0xd8>)
 800413e:	1dfb      	adds	r3, r7, #7
 8004140:	781b      	ldrb	r3, [r3, #0]
 8004142:	001c      	movs	r4, r3
 8004144:	230f      	movs	r3, #15
 8004146:	4023      	ands	r3, r4
 8004148:	3b08      	subs	r3, #8
 800414a:	089b      	lsrs	r3, r3, #2
 800414c:	430a      	orrs	r2, r1
 800414e:	3306      	adds	r3, #6
 8004150:	009b      	lsls	r3, r3, #2
 8004152:	18c3      	adds	r3, r0, r3
 8004154:	3304      	adds	r3, #4
 8004156:	601a      	str	r2, [r3, #0]
}
 8004158:	46c0      	nop			; (mov r8, r8)
 800415a:	46bd      	mov	sp, r7
 800415c:	b003      	add	sp, #12
 800415e:	bd90      	pop	{r4, r7, pc}
 8004160:	e000e100 	.word	0xe000e100
 8004164:	e000ed00 	.word	0xe000ed00

08004168 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004168:	b580      	push	{r7, lr}
 800416a:	b082      	sub	sp, #8
 800416c:	af00      	add	r7, sp, #0
 800416e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	1e5a      	subs	r2, r3, #1
 8004174:	2380      	movs	r3, #128	; 0x80
 8004176:	045b      	lsls	r3, r3, #17
 8004178:	429a      	cmp	r2, r3
 800417a:	d301      	bcc.n	8004180 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 800417c:	2301      	movs	r3, #1
 800417e:	e010      	b.n	80041a2 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004180:	4b0a      	ldr	r3, [pc, #40]	; (80041ac <SysTick_Config+0x44>)
 8004182:	687a      	ldr	r2, [r7, #4]
 8004184:	3a01      	subs	r2, #1
 8004186:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004188:	2301      	movs	r3, #1
 800418a:	425b      	negs	r3, r3
 800418c:	2103      	movs	r1, #3
 800418e:	0018      	movs	r0, r3
 8004190:	f7ff ff7c 	bl	800408c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004194:	4b05      	ldr	r3, [pc, #20]	; (80041ac <SysTick_Config+0x44>)
 8004196:	2200      	movs	r2, #0
 8004198:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800419a:	4b04      	ldr	r3, [pc, #16]	; (80041ac <SysTick_Config+0x44>)
 800419c:	2207      	movs	r2, #7
 800419e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80041a0:	2300      	movs	r3, #0
}
 80041a2:	0018      	movs	r0, r3
 80041a4:	46bd      	mov	sp, r7
 80041a6:	b002      	add	sp, #8
 80041a8:	bd80      	pop	{r7, pc}
 80041aa:	46c0      	nop			; (mov r8, r8)
 80041ac:	e000e010 	.word	0xe000e010

080041b0 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80041b0:	b580      	push	{r7, lr}
 80041b2:	b084      	sub	sp, #16
 80041b4:	af00      	add	r7, sp, #0
 80041b6:	60b9      	str	r1, [r7, #8]
 80041b8:	607a      	str	r2, [r7, #4]
 80041ba:	210f      	movs	r1, #15
 80041bc:	187b      	adds	r3, r7, r1
 80041be:	1c02      	adds	r2, r0, #0
 80041c0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80041c2:	68ba      	ldr	r2, [r7, #8]
 80041c4:	187b      	adds	r3, r7, r1
 80041c6:	781b      	ldrb	r3, [r3, #0]
 80041c8:	b25b      	sxtb	r3, r3
 80041ca:	0011      	movs	r1, r2
 80041cc:	0018      	movs	r0, r3
 80041ce:	f7ff ff5d 	bl	800408c <__NVIC_SetPriority>
}
 80041d2:	46c0      	nop			; (mov r8, r8)
 80041d4:	46bd      	mov	sp, r7
 80041d6:	b004      	add	sp, #16
 80041d8:	bd80      	pop	{r7, pc}

080041da <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80041da:	b580      	push	{r7, lr}
 80041dc:	b082      	sub	sp, #8
 80041de:	af00      	add	r7, sp, #0
 80041e0:	0002      	movs	r2, r0
 80041e2:	1dfb      	adds	r3, r7, #7
 80041e4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80041e6:	1dfb      	adds	r3, r7, #7
 80041e8:	781b      	ldrb	r3, [r3, #0]
 80041ea:	b25b      	sxtb	r3, r3
 80041ec:	0018      	movs	r0, r3
 80041ee:	f7ff ff33 	bl	8004058 <__NVIC_EnableIRQ>
}
 80041f2:	46c0      	nop			; (mov r8, r8)
 80041f4:	46bd      	mov	sp, r7
 80041f6:	b002      	add	sp, #8
 80041f8:	bd80      	pop	{r7, pc}

080041fa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80041fa:	b580      	push	{r7, lr}
 80041fc:	b082      	sub	sp, #8
 80041fe:	af00      	add	r7, sp, #0
 8004200:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	0018      	movs	r0, r3
 8004206:	f7ff ffaf 	bl	8004168 <SysTick_Config>
 800420a:	0003      	movs	r3, r0
}
 800420c:	0018      	movs	r0, r3
 800420e:	46bd      	mov	sp, r7
 8004210:	b002      	add	sp, #8
 8004212:	bd80      	pop	{r7, pc}

08004214 <HAL_DMA_Abort>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004214:	b580      	push	{r7, lr}
 8004216:	b082      	sub	sp, #8
 8004218:	af00      	add	r7, sp, #0
 800421a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	2221      	movs	r2, #33	; 0x21
 8004220:	5c9b      	ldrb	r3, [r3, r2]
 8004222:	b2db      	uxtb	r3, r3
 8004224:	2b02      	cmp	r3, #2
 8004226:	d008      	beq.n	800423a <HAL_DMA_Abort+0x26>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	2204      	movs	r2, #4
 800422c:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	2220      	movs	r2, #32
 8004232:	2100      	movs	r1, #0
 8004234:	5499      	strb	r1, [r3, r2]
    
    return HAL_ERROR;
 8004236:	2301      	movs	r3, #1
 8004238:	e020      	b.n	800427c <HAL_DMA_Abort+0x68>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	681a      	ldr	r2, [r3, #0]
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	210e      	movs	r1, #14
 8004246:	438a      	bics	r2, r1
 8004248:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	681a      	ldr	r2, [r3, #0]
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	2101      	movs	r1, #1
 8004256:	438a      	bics	r2, r1
 8004258:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004262:	2101      	movs	r1, #1
 8004264:	4091      	lsls	r1, r2
 8004266:	000a      	movs	r2, r1
 8004268:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	2221      	movs	r2, #33	; 0x21
 800426e:	2101      	movs	r1, #1
 8004270:	5499      	strb	r1, [r3, r2]
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	2220      	movs	r2, #32
 8004276:	2100      	movs	r1, #0
 8004278:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 800427a:	2300      	movs	r3, #0
}
 800427c:	0018      	movs	r0, r3
 800427e:	46bd      	mov	sp, r7
 8004280:	b002      	add	sp, #8
 8004282:	bd80      	pop	{r7, pc}

08004284 <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8004284:	b580      	push	{r7, lr}
 8004286:	b084      	sub	sp, #16
 8004288:	af00      	add	r7, sp, #0
 800428a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800428c:	210f      	movs	r1, #15
 800428e:	187b      	adds	r3, r7, r1
 8004290:	2200      	movs	r2, #0
 8004292:	701a      	strb	r2, [r3, #0]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	2221      	movs	r2, #33	; 0x21
 8004298:	5c9b      	ldrb	r3, [r3, r2]
 800429a:	b2db      	uxtb	r3, r3
 800429c:	2b02      	cmp	r3, #2
 800429e:	d006      	beq.n	80042ae <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	2204      	movs	r2, #4
 80042a4:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80042a6:	187b      	adds	r3, r7, r1
 80042a8:	2201      	movs	r2, #1
 80042aa:	701a      	strb	r2, [r3, #0]
 80042ac:	e028      	b.n	8004300 <HAL_DMA_Abort_IT+0x7c>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	681a      	ldr	r2, [r3, #0]
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	210e      	movs	r1, #14
 80042ba:	438a      	bics	r2, r1
 80042bc:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	681a      	ldr	r2, [r3, #0]
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	2101      	movs	r1, #1
 80042ca:	438a      	bics	r2, r1
 80042cc:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042d6:	2101      	movs	r1, #1
 80042d8:	4091      	lsls	r1, r2
 80042da:	000a      	movs	r2, r1
 80042dc:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	2221      	movs	r2, #33	; 0x21
 80042e2:	2101      	movs	r1, #1
 80042e4:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	2220      	movs	r2, #32
 80042ea:	2100      	movs	r1, #0
 80042ec:	5499      	strb	r1, [r3, r2]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d004      	beq.n	8004300 <HAL_DMA_Abort_IT+0x7c>
    {
      hdma->XferAbortCallback(hdma);
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80042fa:	687a      	ldr	r2, [r7, #4]
 80042fc:	0010      	movs	r0, r2
 80042fe:	4798      	blx	r3
    } 
  }
  return status;
 8004300:	230f      	movs	r3, #15
 8004302:	18fb      	adds	r3, r7, r3
 8004304:	781b      	ldrb	r3, [r3, #0]
}
 8004306:	0018      	movs	r0, r3
 8004308:	46bd      	mov	sp, r7
 800430a:	b004      	add	sp, #16
 800430c:	bd80      	pop	{r7, pc}
	...

08004310 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004310:	b580      	push	{r7, lr}
 8004312:	b086      	sub	sp, #24
 8004314:	af00      	add	r7, sp, #0
 8004316:	6078      	str	r0, [r7, #4]
 8004318:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800431a:	2300      	movs	r3, #0
 800431c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800431e:	e155      	b.n	80045cc <HAL_GPIO_Init+0x2bc>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004320:	683b      	ldr	r3, [r7, #0]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	2101      	movs	r1, #1
 8004326:	697a      	ldr	r2, [r7, #20]
 8004328:	4091      	lsls	r1, r2
 800432a:	000a      	movs	r2, r1
 800432c:	4013      	ands	r3, r2
 800432e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	2b00      	cmp	r3, #0
 8004334:	d100      	bne.n	8004338 <HAL_GPIO_Init+0x28>
 8004336:	e146      	b.n	80045c6 <HAL_GPIO_Init+0x2b6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004338:	683b      	ldr	r3, [r7, #0]
 800433a:	685b      	ldr	r3, [r3, #4]
 800433c:	2203      	movs	r2, #3
 800433e:	4013      	ands	r3, r2
 8004340:	2b01      	cmp	r3, #1
 8004342:	d005      	beq.n	8004350 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004344:	683b      	ldr	r3, [r7, #0]
 8004346:	685b      	ldr	r3, [r3, #4]
 8004348:	2203      	movs	r2, #3
 800434a:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800434c:	2b02      	cmp	r3, #2
 800434e:	d130      	bne.n	80043b2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	689b      	ldr	r3, [r3, #8]
 8004354:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8004356:	697b      	ldr	r3, [r7, #20]
 8004358:	005b      	lsls	r3, r3, #1
 800435a:	2203      	movs	r2, #3
 800435c:	409a      	lsls	r2, r3
 800435e:	0013      	movs	r3, r2
 8004360:	43da      	mvns	r2, r3
 8004362:	693b      	ldr	r3, [r7, #16]
 8004364:	4013      	ands	r3, r2
 8004366:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004368:	683b      	ldr	r3, [r7, #0]
 800436a:	68da      	ldr	r2, [r3, #12]
 800436c:	697b      	ldr	r3, [r7, #20]
 800436e:	005b      	lsls	r3, r3, #1
 8004370:	409a      	lsls	r2, r3
 8004372:	0013      	movs	r3, r2
 8004374:	693a      	ldr	r2, [r7, #16]
 8004376:	4313      	orrs	r3, r2
 8004378:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	693a      	ldr	r2, [r7, #16]
 800437e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	685b      	ldr	r3, [r3, #4]
 8004384:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004386:	2201      	movs	r2, #1
 8004388:	697b      	ldr	r3, [r7, #20]
 800438a:	409a      	lsls	r2, r3
 800438c:	0013      	movs	r3, r2
 800438e:	43da      	mvns	r2, r3
 8004390:	693b      	ldr	r3, [r7, #16]
 8004392:	4013      	ands	r3, r2
 8004394:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004396:	683b      	ldr	r3, [r7, #0]
 8004398:	685b      	ldr	r3, [r3, #4]
 800439a:	091b      	lsrs	r3, r3, #4
 800439c:	2201      	movs	r2, #1
 800439e:	401a      	ands	r2, r3
 80043a0:	697b      	ldr	r3, [r7, #20]
 80043a2:	409a      	lsls	r2, r3
 80043a4:	0013      	movs	r3, r2
 80043a6:	693a      	ldr	r2, [r7, #16]
 80043a8:	4313      	orrs	r3, r2
 80043aa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	693a      	ldr	r2, [r7, #16]
 80043b0:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80043b2:	683b      	ldr	r3, [r7, #0]
 80043b4:	685b      	ldr	r3, [r3, #4]
 80043b6:	2203      	movs	r2, #3
 80043b8:	4013      	ands	r3, r2
 80043ba:	2b03      	cmp	r3, #3
 80043bc:	d017      	beq.n	80043ee <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	68db      	ldr	r3, [r3, #12]
 80043c2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80043c4:	697b      	ldr	r3, [r7, #20]
 80043c6:	005b      	lsls	r3, r3, #1
 80043c8:	2203      	movs	r2, #3
 80043ca:	409a      	lsls	r2, r3
 80043cc:	0013      	movs	r3, r2
 80043ce:	43da      	mvns	r2, r3
 80043d0:	693b      	ldr	r3, [r7, #16]
 80043d2:	4013      	ands	r3, r2
 80043d4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80043d6:	683b      	ldr	r3, [r7, #0]
 80043d8:	689a      	ldr	r2, [r3, #8]
 80043da:	697b      	ldr	r3, [r7, #20]
 80043dc:	005b      	lsls	r3, r3, #1
 80043de:	409a      	lsls	r2, r3
 80043e0:	0013      	movs	r3, r2
 80043e2:	693a      	ldr	r2, [r7, #16]
 80043e4:	4313      	orrs	r3, r2
 80043e6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	693a      	ldr	r2, [r7, #16]
 80043ec:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80043ee:	683b      	ldr	r3, [r7, #0]
 80043f0:	685b      	ldr	r3, [r3, #4]
 80043f2:	2203      	movs	r2, #3
 80043f4:	4013      	ands	r3, r2
 80043f6:	2b02      	cmp	r3, #2
 80043f8:	d123      	bne.n	8004442 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80043fa:	697b      	ldr	r3, [r7, #20]
 80043fc:	08da      	lsrs	r2, r3, #3
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	3208      	adds	r2, #8
 8004402:	0092      	lsls	r2, r2, #2
 8004404:	58d3      	ldr	r3, [r2, r3]
 8004406:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004408:	697b      	ldr	r3, [r7, #20]
 800440a:	2207      	movs	r2, #7
 800440c:	4013      	ands	r3, r2
 800440e:	009b      	lsls	r3, r3, #2
 8004410:	220f      	movs	r2, #15
 8004412:	409a      	lsls	r2, r3
 8004414:	0013      	movs	r3, r2
 8004416:	43da      	mvns	r2, r3
 8004418:	693b      	ldr	r3, [r7, #16]
 800441a:	4013      	ands	r3, r2
 800441c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800441e:	683b      	ldr	r3, [r7, #0]
 8004420:	691a      	ldr	r2, [r3, #16]
 8004422:	697b      	ldr	r3, [r7, #20]
 8004424:	2107      	movs	r1, #7
 8004426:	400b      	ands	r3, r1
 8004428:	009b      	lsls	r3, r3, #2
 800442a:	409a      	lsls	r2, r3
 800442c:	0013      	movs	r3, r2
 800442e:	693a      	ldr	r2, [r7, #16]
 8004430:	4313      	orrs	r3, r2
 8004432:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004434:	697b      	ldr	r3, [r7, #20]
 8004436:	08da      	lsrs	r2, r3, #3
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	3208      	adds	r2, #8
 800443c:	0092      	lsls	r2, r2, #2
 800443e:	6939      	ldr	r1, [r7, #16]
 8004440:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8004448:	697b      	ldr	r3, [r7, #20]
 800444a:	005b      	lsls	r3, r3, #1
 800444c:	2203      	movs	r2, #3
 800444e:	409a      	lsls	r2, r3
 8004450:	0013      	movs	r3, r2
 8004452:	43da      	mvns	r2, r3
 8004454:	693b      	ldr	r3, [r7, #16]
 8004456:	4013      	ands	r3, r2
 8004458:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800445a:	683b      	ldr	r3, [r7, #0]
 800445c:	685b      	ldr	r3, [r3, #4]
 800445e:	2203      	movs	r2, #3
 8004460:	401a      	ands	r2, r3
 8004462:	697b      	ldr	r3, [r7, #20]
 8004464:	005b      	lsls	r3, r3, #1
 8004466:	409a      	lsls	r2, r3
 8004468:	0013      	movs	r3, r2
 800446a:	693a      	ldr	r2, [r7, #16]
 800446c:	4313      	orrs	r3, r2
 800446e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	693a      	ldr	r2, [r7, #16]
 8004474:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004476:	683b      	ldr	r3, [r7, #0]
 8004478:	685a      	ldr	r2, [r3, #4]
 800447a:	23c0      	movs	r3, #192	; 0xc0
 800447c:	029b      	lsls	r3, r3, #10
 800447e:	4013      	ands	r3, r2
 8004480:	d100      	bne.n	8004484 <HAL_GPIO_Init+0x174>
 8004482:	e0a0      	b.n	80045c6 <HAL_GPIO_Init+0x2b6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004484:	4b57      	ldr	r3, [pc, #348]	; (80045e4 <HAL_GPIO_Init+0x2d4>)
 8004486:	699a      	ldr	r2, [r3, #24]
 8004488:	4b56      	ldr	r3, [pc, #344]	; (80045e4 <HAL_GPIO_Init+0x2d4>)
 800448a:	2101      	movs	r1, #1
 800448c:	430a      	orrs	r2, r1
 800448e:	619a      	str	r2, [r3, #24]
 8004490:	4b54      	ldr	r3, [pc, #336]	; (80045e4 <HAL_GPIO_Init+0x2d4>)
 8004492:	699b      	ldr	r3, [r3, #24]
 8004494:	2201      	movs	r2, #1
 8004496:	4013      	ands	r3, r2
 8004498:	60bb      	str	r3, [r7, #8]
 800449a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800449c:	4a52      	ldr	r2, [pc, #328]	; (80045e8 <HAL_GPIO_Init+0x2d8>)
 800449e:	697b      	ldr	r3, [r7, #20]
 80044a0:	089b      	lsrs	r3, r3, #2
 80044a2:	3302      	adds	r3, #2
 80044a4:	009b      	lsls	r3, r3, #2
 80044a6:	589b      	ldr	r3, [r3, r2]
 80044a8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80044aa:	697b      	ldr	r3, [r7, #20]
 80044ac:	2203      	movs	r2, #3
 80044ae:	4013      	ands	r3, r2
 80044b0:	009b      	lsls	r3, r3, #2
 80044b2:	220f      	movs	r2, #15
 80044b4:	409a      	lsls	r2, r3
 80044b6:	0013      	movs	r3, r2
 80044b8:	43da      	mvns	r2, r3
 80044ba:	693b      	ldr	r3, [r7, #16]
 80044bc:	4013      	ands	r3, r2
 80044be:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80044c0:	687a      	ldr	r2, [r7, #4]
 80044c2:	2390      	movs	r3, #144	; 0x90
 80044c4:	05db      	lsls	r3, r3, #23
 80044c6:	429a      	cmp	r2, r3
 80044c8:	d019      	beq.n	80044fe <HAL_GPIO_Init+0x1ee>
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	4a47      	ldr	r2, [pc, #284]	; (80045ec <HAL_GPIO_Init+0x2dc>)
 80044ce:	4293      	cmp	r3, r2
 80044d0:	d013      	beq.n	80044fa <HAL_GPIO_Init+0x1ea>
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	4a46      	ldr	r2, [pc, #280]	; (80045f0 <HAL_GPIO_Init+0x2e0>)
 80044d6:	4293      	cmp	r3, r2
 80044d8:	d00d      	beq.n	80044f6 <HAL_GPIO_Init+0x1e6>
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	4a45      	ldr	r2, [pc, #276]	; (80045f4 <HAL_GPIO_Init+0x2e4>)
 80044de:	4293      	cmp	r3, r2
 80044e0:	d007      	beq.n	80044f2 <HAL_GPIO_Init+0x1e2>
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	4a44      	ldr	r2, [pc, #272]	; (80045f8 <HAL_GPIO_Init+0x2e8>)
 80044e6:	4293      	cmp	r3, r2
 80044e8:	d101      	bne.n	80044ee <HAL_GPIO_Init+0x1de>
 80044ea:	2304      	movs	r3, #4
 80044ec:	e008      	b.n	8004500 <HAL_GPIO_Init+0x1f0>
 80044ee:	2305      	movs	r3, #5
 80044f0:	e006      	b.n	8004500 <HAL_GPIO_Init+0x1f0>
 80044f2:	2303      	movs	r3, #3
 80044f4:	e004      	b.n	8004500 <HAL_GPIO_Init+0x1f0>
 80044f6:	2302      	movs	r3, #2
 80044f8:	e002      	b.n	8004500 <HAL_GPIO_Init+0x1f0>
 80044fa:	2301      	movs	r3, #1
 80044fc:	e000      	b.n	8004500 <HAL_GPIO_Init+0x1f0>
 80044fe:	2300      	movs	r3, #0
 8004500:	697a      	ldr	r2, [r7, #20]
 8004502:	2103      	movs	r1, #3
 8004504:	400a      	ands	r2, r1
 8004506:	0092      	lsls	r2, r2, #2
 8004508:	4093      	lsls	r3, r2
 800450a:	693a      	ldr	r2, [r7, #16]
 800450c:	4313      	orrs	r3, r2
 800450e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8004510:	4935      	ldr	r1, [pc, #212]	; (80045e8 <HAL_GPIO_Init+0x2d8>)
 8004512:	697b      	ldr	r3, [r7, #20]
 8004514:	089b      	lsrs	r3, r3, #2
 8004516:	3302      	adds	r3, #2
 8004518:	009b      	lsls	r3, r3, #2
 800451a:	693a      	ldr	r2, [r7, #16]
 800451c:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800451e:	4b37      	ldr	r3, [pc, #220]	; (80045fc <HAL_GPIO_Init+0x2ec>)
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	43da      	mvns	r2, r3
 8004528:	693b      	ldr	r3, [r7, #16]
 800452a:	4013      	ands	r3, r2
 800452c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800452e:	683b      	ldr	r3, [r7, #0]
 8004530:	685a      	ldr	r2, [r3, #4]
 8004532:	2380      	movs	r3, #128	; 0x80
 8004534:	025b      	lsls	r3, r3, #9
 8004536:	4013      	ands	r3, r2
 8004538:	d003      	beq.n	8004542 <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 800453a:	693a      	ldr	r2, [r7, #16]
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	4313      	orrs	r3, r2
 8004540:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8004542:	4b2e      	ldr	r3, [pc, #184]	; (80045fc <HAL_GPIO_Init+0x2ec>)
 8004544:	693a      	ldr	r2, [r7, #16]
 8004546:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8004548:	4b2c      	ldr	r3, [pc, #176]	; (80045fc <HAL_GPIO_Init+0x2ec>)
 800454a:	685b      	ldr	r3, [r3, #4]
 800454c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	43da      	mvns	r2, r3
 8004552:	693b      	ldr	r3, [r7, #16]
 8004554:	4013      	ands	r3, r2
 8004556:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004558:	683b      	ldr	r3, [r7, #0]
 800455a:	685a      	ldr	r2, [r3, #4]
 800455c:	2380      	movs	r3, #128	; 0x80
 800455e:	029b      	lsls	r3, r3, #10
 8004560:	4013      	ands	r3, r2
 8004562:	d003      	beq.n	800456c <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 8004564:	693a      	ldr	r2, [r7, #16]
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	4313      	orrs	r3, r2
 800456a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800456c:	4b23      	ldr	r3, [pc, #140]	; (80045fc <HAL_GPIO_Init+0x2ec>)
 800456e:	693a      	ldr	r2, [r7, #16]
 8004570:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004572:	4b22      	ldr	r3, [pc, #136]	; (80045fc <HAL_GPIO_Init+0x2ec>)
 8004574:	689b      	ldr	r3, [r3, #8]
 8004576:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	43da      	mvns	r2, r3
 800457c:	693b      	ldr	r3, [r7, #16]
 800457e:	4013      	ands	r3, r2
 8004580:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004582:	683b      	ldr	r3, [r7, #0]
 8004584:	685a      	ldr	r2, [r3, #4]
 8004586:	2380      	movs	r3, #128	; 0x80
 8004588:	035b      	lsls	r3, r3, #13
 800458a:	4013      	ands	r3, r2
 800458c:	d003      	beq.n	8004596 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800458e:	693a      	ldr	r2, [r7, #16]
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	4313      	orrs	r3, r2
 8004594:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8004596:	4b19      	ldr	r3, [pc, #100]	; (80045fc <HAL_GPIO_Init+0x2ec>)
 8004598:	693a      	ldr	r2, [r7, #16]
 800459a:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 800459c:	4b17      	ldr	r3, [pc, #92]	; (80045fc <HAL_GPIO_Init+0x2ec>)
 800459e:	68db      	ldr	r3, [r3, #12]
 80045a0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	43da      	mvns	r2, r3
 80045a6:	693b      	ldr	r3, [r7, #16]
 80045a8:	4013      	ands	r3, r2
 80045aa:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80045ac:	683b      	ldr	r3, [r7, #0]
 80045ae:	685a      	ldr	r2, [r3, #4]
 80045b0:	2380      	movs	r3, #128	; 0x80
 80045b2:	039b      	lsls	r3, r3, #14
 80045b4:	4013      	ands	r3, r2
 80045b6:	d003      	beq.n	80045c0 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80045b8:	693a      	ldr	r2, [r7, #16]
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	4313      	orrs	r3, r2
 80045be:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80045c0:	4b0e      	ldr	r3, [pc, #56]	; (80045fc <HAL_GPIO_Init+0x2ec>)
 80045c2:	693a      	ldr	r2, [r7, #16]
 80045c4:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 80045c6:	697b      	ldr	r3, [r7, #20]
 80045c8:	3301      	adds	r3, #1
 80045ca:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80045cc:	683b      	ldr	r3, [r7, #0]
 80045ce:	681a      	ldr	r2, [r3, #0]
 80045d0:	697b      	ldr	r3, [r7, #20]
 80045d2:	40da      	lsrs	r2, r3
 80045d4:	1e13      	subs	r3, r2, #0
 80045d6:	d000      	beq.n	80045da <HAL_GPIO_Init+0x2ca>
 80045d8:	e6a2      	b.n	8004320 <HAL_GPIO_Init+0x10>
  } 
}
 80045da:	46c0      	nop			; (mov r8, r8)
 80045dc:	46c0      	nop			; (mov r8, r8)
 80045de:	46bd      	mov	sp, r7
 80045e0:	b006      	add	sp, #24
 80045e2:	bd80      	pop	{r7, pc}
 80045e4:	40021000 	.word	0x40021000
 80045e8:	40010000 	.word	0x40010000
 80045ec:	48000400 	.word	0x48000400
 80045f0:	48000800 	.word	0x48000800
 80045f4:	48000c00 	.word	0x48000c00
 80045f8:	48001000 	.word	0x48001000
 80045fc:	40010400 	.word	0x40010400

08004600 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004600:	b580      	push	{r7, lr}
 8004602:	b084      	sub	sp, #16
 8004604:	af00      	add	r7, sp, #0
 8004606:	6078      	str	r0, [r7, #4]
 8004608:	000a      	movs	r2, r1
 800460a:	1cbb      	adds	r3, r7, #2
 800460c:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	691b      	ldr	r3, [r3, #16]
 8004612:	1cba      	adds	r2, r7, #2
 8004614:	8812      	ldrh	r2, [r2, #0]
 8004616:	4013      	ands	r3, r2
 8004618:	d004      	beq.n	8004624 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 800461a:	230f      	movs	r3, #15
 800461c:	18fb      	adds	r3, r7, r3
 800461e:	2201      	movs	r2, #1
 8004620:	701a      	strb	r2, [r3, #0]
 8004622:	e003      	b.n	800462c <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004624:	230f      	movs	r3, #15
 8004626:	18fb      	adds	r3, r7, r3
 8004628:	2200      	movs	r2, #0
 800462a:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 800462c:	230f      	movs	r3, #15
 800462e:	18fb      	adds	r3, r7, r3
 8004630:	781b      	ldrb	r3, [r3, #0]
  }
 8004632:	0018      	movs	r0, r3
 8004634:	46bd      	mov	sp, r7
 8004636:	b004      	add	sp, #16
 8004638:	bd80      	pop	{r7, pc}

0800463a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800463a:	b580      	push	{r7, lr}
 800463c:	b082      	sub	sp, #8
 800463e:	af00      	add	r7, sp, #0
 8004640:	6078      	str	r0, [r7, #4]
 8004642:	0008      	movs	r0, r1
 8004644:	0011      	movs	r1, r2
 8004646:	1cbb      	adds	r3, r7, #2
 8004648:	1c02      	adds	r2, r0, #0
 800464a:	801a      	strh	r2, [r3, #0]
 800464c:	1c7b      	adds	r3, r7, #1
 800464e:	1c0a      	adds	r2, r1, #0
 8004650:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004652:	1c7b      	adds	r3, r7, #1
 8004654:	781b      	ldrb	r3, [r3, #0]
 8004656:	2b00      	cmp	r3, #0
 8004658:	d004      	beq.n	8004664 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800465a:	1cbb      	adds	r3, r7, #2
 800465c:	881a      	ldrh	r2, [r3, #0]
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004662:	e003      	b.n	800466c <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004664:	1cbb      	adds	r3, r7, #2
 8004666:	881a      	ldrh	r2, [r3, #0]
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800466c:	46c0      	nop			; (mov r8, r8)
 800466e:	46bd      	mov	sp, r7
 8004670:	b002      	add	sp, #8
 8004672:	bd80      	pop	{r7, pc}

08004674 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F0 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004674:	b580      	push	{r7, lr}
 8004676:	b084      	sub	sp, #16
 8004678:	af00      	add	r7, sp, #0
 800467a:	6078      	str	r0, [r7, #4]
 800467c:	000a      	movs	r2, r1
 800467e:	1cbb      	adds	r3, r7, #2
 8004680:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	695b      	ldr	r3, [r3, #20]
 8004686:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004688:	1cbb      	adds	r3, r7, #2
 800468a:	881b      	ldrh	r3, [r3, #0]
 800468c:	68fa      	ldr	r2, [r7, #12]
 800468e:	4013      	ands	r3, r2
 8004690:	041a      	lsls	r2, r3, #16
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	43db      	mvns	r3, r3
 8004696:	1cb9      	adds	r1, r7, #2
 8004698:	8809      	ldrh	r1, [r1, #0]
 800469a:	400b      	ands	r3, r1
 800469c:	431a      	orrs	r2, r3
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	619a      	str	r2, [r3, #24]
}
 80046a2:	46c0      	nop			; (mov r8, r8)
 80046a4:	46bd      	mov	sp, r7
 80046a6:	b004      	add	sp, #16
 80046a8:	bd80      	pop	{r7, pc}
	...

080046ac <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80046ac:	b580      	push	{r7, lr}
 80046ae:	b082      	sub	sp, #8
 80046b0:	af00      	add	r7, sp, #0
 80046b2:	0002      	movs	r2, r0
 80046b4:	1dbb      	adds	r3, r7, #6
 80046b6:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80046b8:	4b09      	ldr	r3, [pc, #36]	; (80046e0 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 80046ba:	695b      	ldr	r3, [r3, #20]
 80046bc:	1dba      	adds	r2, r7, #6
 80046be:	8812      	ldrh	r2, [r2, #0]
 80046c0:	4013      	ands	r3, r2
 80046c2:	d008      	beq.n	80046d6 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80046c4:	4b06      	ldr	r3, [pc, #24]	; (80046e0 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 80046c6:	1dba      	adds	r2, r7, #6
 80046c8:	8812      	ldrh	r2, [r2, #0]
 80046ca:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80046cc:	1dbb      	adds	r3, r7, #6
 80046ce:	881b      	ldrh	r3, [r3, #0]
 80046d0:	0018      	movs	r0, r3
 80046d2:	f7fc fd77 	bl	80011c4 <HAL_GPIO_EXTI_Callback>
  }
}
 80046d6:	46c0      	nop			; (mov r8, r8)
 80046d8:	46bd      	mov	sp, r7
 80046da:	b002      	add	sp, #8
 80046dc:	bd80      	pop	{r7, pc}
 80046de:	46c0      	nop			; (mov r8, r8)
 80046e0:	40010400 	.word	0x40010400

080046e4 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80046e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80046e6:	b08b      	sub	sp, #44	; 0x2c
 80046e8:	af06      	add	r7, sp, #24
 80046ea:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d101      	bne.n	80046f6 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80046f2:	2301      	movs	r3, #1
 80046f4:	e0ff      	b.n	80048f6 <HAL_PCD_Init+0x212>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	4a81      	ldr	r2, [pc, #516]	; (8004900 <HAL_PCD_Init+0x21c>)
 80046fa:	5c9b      	ldrb	r3, [r3, r2]
 80046fc:	b2db      	uxtb	r3, r3
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d108      	bne.n	8004714 <HAL_PCD_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004702:	687a      	ldr	r2, [r7, #4]
 8004704:	23aa      	movs	r3, #170	; 0xaa
 8004706:	009b      	lsls	r3, r3, #2
 8004708:	2100      	movs	r1, #0
 800470a:	54d1      	strb	r1, [r2, r3]

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	0018      	movs	r0, r3
 8004710:	f008 fd6c 	bl	800d1ec <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	4a7a      	ldr	r2, [pc, #488]	; (8004900 <HAL_PCD_Init+0x21c>)
 8004718:	2103      	movs	r1, #3
 800471a:	5499      	strb	r1, [r3, r2]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	0018      	movs	r0, r3
 8004722:	f004 fe0f 	bl	8009344 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004726:	230f      	movs	r3, #15
 8004728:	18fb      	adds	r3, r7, r3
 800472a:	2200      	movs	r2, #0
 800472c:	701a      	strb	r2, [r3, #0]
 800472e:	e058      	b.n	80047e2 <HAL_PCD_Init+0xfe>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004730:	200f      	movs	r0, #15
 8004732:	183b      	adds	r3, r7, r0
 8004734:	781b      	ldrb	r3, [r3, #0]
 8004736:	6879      	ldr	r1, [r7, #4]
 8004738:	1c5a      	adds	r2, r3, #1
 800473a:	0013      	movs	r3, r2
 800473c:	009b      	lsls	r3, r3, #2
 800473e:	189b      	adds	r3, r3, r2
 8004740:	00db      	lsls	r3, r3, #3
 8004742:	18cb      	adds	r3, r1, r3
 8004744:	3301      	adds	r3, #1
 8004746:	2201      	movs	r2, #1
 8004748:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800474a:	183b      	adds	r3, r7, r0
 800474c:	781b      	ldrb	r3, [r3, #0]
 800474e:	6879      	ldr	r1, [r7, #4]
 8004750:	1c5a      	adds	r2, r3, #1
 8004752:	0013      	movs	r3, r2
 8004754:	009b      	lsls	r3, r3, #2
 8004756:	189b      	adds	r3, r3, r2
 8004758:	00db      	lsls	r3, r3, #3
 800475a:	183a      	adds	r2, r7, r0
 800475c:	7812      	ldrb	r2, [r2, #0]
 800475e:	545a      	strb	r2, [r3, r1]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8004760:	0004      	movs	r4, r0
 8004762:	183b      	adds	r3, r7, r0
 8004764:	781a      	ldrb	r2, [r3, #0]
 8004766:	193b      	adds	r3, r7, r4
 8004768:	781b      	ldrb	r3, [r3, #0]
 800476a:	b298      	uxth	r0, r3
 800476c:	6879      	ldr	r1, [r7, #4]
 800476e:	0013      	movs	r3, r2
 8004770:	009b      	lsls	r3, r3, #2
 8004772:	189b      	adds	r3, r3, r2
 8004774:	00db      	lsls	r3, r3, #3
 8004776:	18cb      	adds	r3, r1, r3
 8004778:	3336      	adds	r3, #54	; 0x36
 800477a:	1c02      	adds	r2, r0, #0
 800477c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800477e:	193b      	adds	r3, r7, r4
 8004780:	781b      	ldrb	r3, [r3, #0]
 8004782:	6879      	ldr	r1, [r7, #4]
 8004784:	1c5a      	adds	r2, r3, #1
 8004786:	0013      	movs	r3, r2
 8004788:	009b      	lsls	r3, r3, #2
 800478a:	189b      	adds	r3, r3, r2
 800478c:	00db      	lsls	r3, r3, #3
 800478e:	18cb      	adds	r3, r1, r3
 8004790:	3303      	adds	r3, #3
 8004792:	2200      	movs	r2, #0
 8004794:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004796:	193b      	adds	r3, r7, r4
 8004798:	781a      	ldrb	r2, [r3, #0]
 800479a:	6879      	ldr	r1, [r7, #4]
 800479c:	0013      	movs	r3, r2
 800479e:	009b      	lsls	r3, r3, #2
 80047a0:	189b      	adds	r3, r3, r2
 80047a2:	00db      	lsls	r3, r3, #3
 80047a4:	18cb      	adds	r3, r1, r3
 80047a6:	3338      	adds	r3, #56	; 0x38
 80047a8:	2200      	movs	r2, #0
 80047aa:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80047ac:	193b      	adds	r3, r7, r4
 80047ae:	781a      	ldrb	r2, [r3, #0]
 80047b0:	6879      	ldr	r1, [r7, #4]
 80047b2:	0013      	movs	r3, r2
 80047b4:	009b      	lsls	r3, r3, #2
 80047b6:	189b      	adds	r3, r3, r2
 80047b8:	00db      	lsls	r3, r3, #3
 80047ba:	18cb      	adds	r3, r1, r3
 80047bc:	333c      	adds	r3, #60	; 0x3c
 80047be:	2200      	movs	r2, #0
 80047c0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80047c2:	193b      	adds	r3, r7, r4
 80047c4:	781a      	ldrb	r2, [r3, #0]
 80047c6:	6879      	ldr	r1, [r7, #4]
 80047c8:	0013      	movs	r3, r2
 80047ca:	009b      	lsls	r3, r3, #2
 80047cc:	189b      	adds	r3, r3, r2
 80047ce:	00db      	lsls	r3, r3, #3
 80047d0:	18cb      	adds	r3, r1, r3
 80047d2:	3340      	adds	r3, #64	; 0x40
 80047d4:	2200      	movs	r2, #0
 80047d6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80047d8:	193b      	adds	r3, r7, r4
 80047da:	781a      	ldrb	r2, [r3, #0]
 80047dc:	193b      	adds	r3, r7, r4
 80047de:	3201      	adds	r2, #1
 80047e0:	701a      	strb	r2, [r3, #0]
 80047e2:	210f      	movs	r1, #15
 80047e4:	187b      	adds	r3, r7, r1
 80047e6:	781a      	ldrb	r2, [r3, #0]
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	685b      	ldr	r3, [r3, #4]
 80047ec:	429a      	cmp	r2, r3
 80047ee:	d39f      	bcc.n	8004730 <HAL_PCD_Init+0x4c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80047f0:	187b      	adds	r3, r7, r1
 80047f2:	2200      	movs	r2, #0
 80047f4:	701a      	strb	r2, [r3, #0]
 80047f6:	e056      	b.n	80048a6 <HAL_PCD_Init+0x1c2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80047f8:	240f      	movs	r4, #15
 80047fa:	193b      	adds	r3, r7, r4
 80047fc:	781a      	ldrb	r2, [r3, #0]
 80047fe:	6878      	ldr	r0, [r7, #4]
 8004800:	236a      	movs	r3, #106	; 0x6a
 8004802:	33ff      	adds	r3, #255	; 0xff
 8004804:	0019      	movs	r1, r3
 8004806:	0013      	movs	r3, r2
 8004808:	009b      	lsls	r3, r3, #2
 800480a:	189b      	adds	r3, r3, r2
 800480c:	00db      	lsls	r3, r3, #3
 800480e:	18c3      	adds	r3, r0, r3
 8004810:	185b      	adds	r3, r3, r1
 8004812:	2200      	movs	r2, #0
 8004814:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004816:	193b      	adds	r3, r7, r4
 8004818:	781a      	ldrb	r2, [r3, #0]
 800481a:	6878      	ldr	r0, [r7, #4]
 800481c:	23b4      	movs	r3, #180	; 0xb4
 800481e:	0059      	lsls	r1, r3, #1
 8004820:	0013      	movs	r3, r2
 8004822:	009b      	lsls	r3, r3, #2
 8004824:	189b      	adds	r3, r3, r2
 8004826:	00db      	lsls	r3, r3, #3
 8004828:	18c3      	adds	r3, r0, r3
 800482a:	185b      	adds	r3, r3, r1
 800482c:	193a      	adds	r2, r7, r4
 800482e:	7812      	ldrb	r2, [r2, #0]
 8004830:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004832:	193b      	adds	r3, r7, r4
 8004834:	781a      	ldrb	r2, [r3, #0]
 8004836:	6878      	ldr	r0, [r7, #4]
 8004838:	236c      	movs	r3, #108	; 0x6c
 800483a:	33ff      	adds	r3, #255	; 0xff
 800483c:	0019      	movs	r1, r3
 800483e:	0013      	movs	r3, r2
 8004840:	009b      	lsls	r3, r3, #2
 8004842:	189b      	adds	r3, r3, r2
 8004844:	00db      	lsls	r3, r3, #3
 8004846:	18c3      	adds	r3, r0, r3
 8004848:	185b      	adds	r3, r3, r1
 800484a:	2200      	movs	r2, #0
 800484c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800484e:	193b      	adds	r3, r7, r4
 8004850:	781a      	ldrb	r2, [r3, #0]
 8004852:	6878      	ldr	r0, [r7, #4]
 8004854:	23bc      	movs	r3, #188	; 0xbc
 8004856:	0059      	lsls	r1, r3, #1
 8004858:	0013      	movs	r3, r2
 800485a:	009b      	lsls	r3, r3, #2
 800485c:	189b      	adds	r3, r3, r2
 800485e:	00db      	lsls	r3, r3, #3
 8004860:	18c3      	adds	r3, r0, r3
 8004862:	185b      	adds	r3, r3, r1
 8004864:	2200      	movs	r2, #0
 8004866:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004868:	193b      	adds	r3, r7, r4
 800486a:	781a      	ldrb	r2, [r3, #0]
 800486c:	6878      	ldr	r0, [r7, #4]
 800486e:	23be      	movs	r3, #190	; 0xbe
 8004870:	0059      	lsls	r1, r3, #1
 8004872:	0013      	movs	r3, r2
 8004874:	009b      	lsls	r3, r3, #2
 8004876:	189b      	adds	r3, r3, r2
 8004878:	00db      	lsls	r3, r3, #3
 800487a:	18c3      	adds	r3, r0, r3
 800487c:	185b      	adds	r3, r3, r1
 800487e:	2200      	movs	r2, #0
 8004880:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004882:	193b      	adds	r3, r7, r4
 8004884:	781a      	ldrb	r2, [r3, #0]
 8004886:	6878      	ldr	r0, [r7, #4]
 8004888:	23c0      	movs	r3, #192	; 0xc0
 800488a:	0059      	lsls	r1, r3, #1
 800488c:	0013      	movs	r3, r2
 800488e:	009b      	lsls	r3, r3, #2
 8004890:	189b      	adds	r3, r3, r2
 8004892:	00db      	lsls	r3, r3, #3
 8004894:	18c3      	adds	r3, r0, r3
 8004896:	185b      	adds	r3, r3, r1
 8004898:	2200      	movs	r2, #0
 800489a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800489c:	193b      	adds	r3, r7, r4
 800489e:	781a      	ldrb	r2, [r3, #0]
 80048a0:	193b      	adds	r3, r7, r4
 80048a2:	3201      	adds	r2, #1
 80048a4:	701a      	strb	r2, [r3, #0]
 80048a6:	230f      	movs	r3, #15
 80048a8:	18fb      	adds	r3, r7, r3
 80048aa:	781a      	ldrb	r2, [r3, #0]
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	685b      	ldr	r3, [r3, #4]
 80048b0:	429a      	cmp	r2, r3
 80048b2:	d3a1      	bcc.n	80047f8 <HAL_PCD_Init+0x114>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	6818      	ldr	r0, [r3, #0]
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	466a      	mov	r2, sp
 80048bc:	0011      	movs	r1, r2
 80048be:	001a      	movs	r2, r3
 80048c0:	3210      	adds	r2, #16
 80048c2:	ca70      	ldmia	r2!, {r4, r5, r6}
 80048c4:	c170      	stmia	r1!, {r4, r5, r6}
 80048c6:	ca30      	ldmia	r2!, {r4, r5}
 80048c8:	c130      	stmia	r1!, {r4, r5}
 80048ca:	6859      	ldr	r1, [r3, #4]
 80048cc:	689a      	ldr	r2, [r3, #8]
 80048ce:	68db      	ldr	r3, [r3, #12]
 80048d0:	f004 fd52 	bl	8009378 <USB_DevInit>

  hpcd->USB_Address = 0U;
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	2224      	movs	r2, #36	; 0x24
 80048d8:	2100      	movs	r1, #0
 80048da:	5499      	strb	r1, [r3, r2]
  hpcd->State = HAL_PCD_STATE_READY;
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	4a08      	ldr	r2, [pc, #32]	; (8004900 <HAL_PCD_Init+0x21c>)
 80048e0:	2101      	movs	r1, #1
 80048e2:	5499      	strb	r1, [r3, r2]

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	69db      	ldr	r3, [r3, #28]
 80048e8:	2b01      	cmp	r3, #1
 80048ea:	d103      	bne.n	80048f4 <HAL_PCD_Init+0x210>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	0018      	movs	r0, r3
 80048f0:	f001 fd34 	bl	800635c <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 80048f4:	2300      	movs	r3, #0
}
 80048f6:	0018      	movs	r0, r3
 80048f8:	46bd      	mov	sp, r7
 80048fa:	b005      	add	sp, #20
 80048fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80048fe:	46c0      	nop			; (mov r8, r8)
 8004900:	000002a9 	.word	0x000002a9

08004904 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8004904:	b580      	push	{r7, lr}
 8004906:	b082      	sub	sp, #8
 8004908:	af00      	add	r7, sp, #0
 800490a:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 800490c:	687a      	ldr	r2, [r7, #4]
 800490e:	23aa      	movs	r3, #170	; 0xaa
 8004910:	009b      	lsls	r3, r3, #2
 8004912:	5cd3      	ldrb	r3, [r2, r3]
 8004914:	2b01      	cmp	r3, #1
 8004916:	d101      	bne.n	800491c <HAL_PCD_Start+0x18>
 8004918:	2302      	movs	r3, #2
 800491a:	e014      	b.n	8004946 <HAL_PCD_Start+0x42>
 800491c:	687a      	ldr	r2, [r7, #4]
 800491e:	23aa      	movs	r3, #170	; 0xaa
 8004920:	009b      	lsls	r3, r3, #2
 8004922:	2101      	movs	r1, #1
 8004924:	54d1      	strb	r1, [r2, r3]
  __HAL_PCD_ENABLE(hpcd);
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	0018      	movs	r0, r3
 800492c:	f004 fcf4 	bl	8009318 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	0018      	movs	r0, r3
 8004936:	f006 fc4b 	bl	800b1d0 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800493a:	687a      	ldr	r2, [r7, #4]
 800493c:	23aa      	movs	r3, #170	; 0xaa
 800493e:	009b      	lsls	r3, r3, #2
 8004940:	2100      	movs	r1, #0
 8004942:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8004944:	2300      	movs	r3, #0
}
 8004946:	0018      	movs	r0, r3
 8004948:	46bd      	mov	sp, r7
 800494a:	b002      	add	sp, #8
 800494c:	bd80      	pop	{r7, pc}
	...

08004950 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8004950:	b580      	push	{r7, lr}
 8004952:	b082      	sub	sp, #8
 8004954:	af00      	add	r7, sp, #0
 8004956:	6078      	str	r0, [r7, #4]
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	0018      	movs	r0, r3
 800495e:	f006 fc4d 	bl	800b1fc <USB_ReadInterrupts>
 8004962:	0002      	movs	r2, r0
 8004964:	2380      	movs	r3, #128	; 0x80
 8004966:	021b      	lsls	r3, r3, #8
 8004968:	401a      	ands	r2, r3
 800496a:	2380      	movs	r3, #128	; 0x80
 800496c:	021b      	lsls	r3, r3, #8
 800496e:	429a      	cmp	r2, r3
 8004970:	d103      	bne.n	800497a <HAL_PCD_IRQHandler+0x2a>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	0018      	movs	r0, r3
 8004976:	f000 fbbb 	bl	80050f0 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	0018      	movs	r0, r3
 8004980:	f006 fc3c 	bl	800b1fc <USB_ReadInterrupts>
 8004984:	0002      	movs	r2, r0
 8004986:	2380      	movs	r3, #128	; 0x80
 8004988:	00db      	lsls	r3, r3, #3
 800498a:	401a      	ands	r2, r3
 800498c:	2380      	movs	r3, #128	; 0x80
 800498e:	00db      	lsls	r3, r3, #3
 8004990:	429a      	cmp	r2, r3
 8004992:	d114      	bne.n	80049be <HAL_PCD_IRQHandler+0x6e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	2244      	movs	r2, #68	; 0x44
 800499a:	5a9b      	ldrh	r3, [r3, r2]
 800499c:	b29a      	uxth	r2, r3
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	49a2      	ldr	r1, [pc, #648]	; (8004c2c <HAL_PCD_IRQHandler+0x2dc>)
 80049a4:	400a      	ands	r2, r1
 80049a6:	b291      	uxth	r1, r2
 80049a8:	2244      	movs	r2, #68	; 0x44
 80049aa:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	0018      	movs	r0, r3
 80049b0:	f008 fca7 	bl	800d302 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	2100      	movs	r1, #0
 80049b8:	0018      	movs	r0, r3
 80049ba:	f000 f945 	bl	8004c48 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	0018      	movs	r0, r3
 80049c4:	f006 fc1a 	bl	800b1fc <USB_ReadInterrupts>
 80049c8:	0002      	movs	r2, r0
 80049ca:	2380      	movs	r3, #128	; 0x80
 80049cc:	01db      	lsls	r3, r3, #7
 80049ce:	401a      	ands	r2, r3
 80049d0:	2380      	movs	r3, #128	; 0x80
 80049d2:	01db      	lsls	r3, r3, #7
 80049d4:	429a      	cmp	r2, r3
 80049d6:	d10b      	bne.n	80049f0 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	2244      	movs	r2, #68	; 0x44
 80049de:	5a9b      	ldrh	r3, [r3, r2]
 80049e0:	b29a      	uxth	r2, r3
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	4992      	ldr	r1, [pc, #584]	; (8004c30 <HAL_PCD_IRQHandler+0x2e0>)
 80049e8:	400a      	ands	r2, r1
 80049ea:	b291      	uxth	r1, r2
 80049ec:	2244      	movs	r2, #68	; 0x44
 80049ee:	5299      	strh	r1, [r3, r2]
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	0018      	movs	r0, r3
 80049f6:	f006 fc01 	bl	800b1fc <USB_ReadInterrupts>
 80049fa:	0002      	movs	r2, r0
 80049fc:	2380      	movs	r3, #128	; 0x80
 80049fe:	019b      	lsls	r3, r3, #6
 8004a00:	401a      	ands	r2, r3
 8004a02:	2380      	movs	r3, #128	; 0x80
 8004a04:	019b      	lsls	r3, r3, #6
 8004a06:	429a      	cmp	r2, r3
 8004a08:	d10b      	bne.n	8004a22 <HAL_PCD_IRQHandler+0xd2>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	2244      	movs	r2, #68	; 0x44
 8004a10:	5a9b      	ldrh	r3, [r3, r2]
 8004a12:	b29a      	uxth	r2, r3
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	4986      	ldr	r1, [pc, #536]	; (8004c34 <HAL_PCD_IRQHandler+0x2e4>)
 8004a1a:	400a      	ands	r2, r1
 8004a1c:	b291      	uxth	r1, r2
 8004a1e:	2244      	movs	r2, #68	; 0x44
 8004a20:	5299      	strh	r1, [r3, r2]
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	0018      	movs	r0, r3
 8004a28:	f006 fbe8 	bl	800b1fc <USB_ReadInterrupts>
 8004a2c:	0002      	movs	r2, r0
 8004a2e:	2380      	movs	r3, #128	; 0x80
 8004a30:	015b      	lsls	r3, r3, #5
 8004a32:	401a      	ands	r2, r3
 8004a34:	2380      	movs	r3, #128	; 0x80
 8004a36:	015b      	lsls	r3, r3, #5
 8004a38:	429a      	cmp	r2, r3
 8004a3a:	d137      	bne.n	8004aac <HAL_PCD_IRQHandler+0x15c>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	2240      	movs	r2, #64	; 0x40
 8004a42:	5a9b      	ldrh	r3, [r3, r2]
 8004a44:	b29a      	uxth	r2, r3
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	2104      	movs	r1, #4
 8004a4c:	438a      	bics	r2, r1
 8004a4e:	b291      	uxth	r1, r2
 8004a50:	2240      	movs	r2, #64	; 0x40
 8004a52:	5299      	strh	r1, [r3, r2]
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	2240      	movs	r2, #64	; 0x40
 8004a5a:	5a9b      	ldrh	r3, [r3, r2]
 8004a5c:	b29a      	uxth	r2, r3
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	2108      	movs	r1, #8
 8004a64:	438a      	bics	r2, r1
 8004a66:	b291      	uxth	r1, r2
 8004a68:	2240      	movs	r2, #64	; 0x40
 8004a6a:	5299      	strh	r1, [r3, r2]

    if (hpcd->LPM_State == LPM_L1)
 8004a6c:	687a      	ldr	r2, [r7, #4]
 8004a6e:	23b8      	movs	r3, #184	; 0xb8
 8004a70:	009b      	lsls	r3, r3, #2
 8004a72:	5cd3      	ldrb	r3, [r2, r3]
 8004a74:	2b01      	cmp	r3, #1
 8004a76:	d109      	bne.n	8004a8c <HAL_PCD_IRQHandler+0x13c>
    {
      hpcd->LPM_State = LPM_L0;
 8004a78:	687a      	ldr	r2, [r7, #4]
 8004a7a:	23b8      	movs	r3, #184	; 0xb8
 8004a7c:	009b      	lsls	r3, r3, #2
 8004a7e:	2100      	movs	r1, #0
 8004a80:	54d1      	strb	r1, [r2, r3]
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	2100      	movs	r1, #0
 8004a86:	0018      	movs	r0, r3
 8004a88:	f001 fc92 	bl	80063b0 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	0018      	movs	r0, r3
 8004a90:	f008 fc78 	bl	800d384 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	2244      	movs	r2, #68	; 0x44
 8004a9a:	5a9b      	ldrh	r3, [r3, r2]
 8004a9c:	b29a      	uxth	r2, r3
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	4965      	ldr	r1, [pc, #404]	; (8004c38 <HAL_PCD_IRQHandler+0x2e8>)
 8004aa4:	400a      	ands	r2, r1
 8004aa6:	b291      	uxth	r1, r2
 8004aa8:	2244      	movs	r2, #68	; 0x44
 8004aaa:	5299      	strh	r1, [r3, r2]
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	0018      	movs	r0, r3
 8004ab2:	f006 fba3 	bl	800b1fc <USB_ReadInterrupts>
 8004ab6:	0002      	movs	r2, r0
 8004ab8:	2380      	movs	r3, #128	; 0x80
 8004aba:	011b      	lsls	r3, r3, #4
 8004abc:	401a      	ands	r2, r3
 8004abe:	2380      	movs	r3, #128	; 0x80
 8004ac0:	011b      	lsls	r3, r3, #4
 8004ac2:	429a      	cmp	r2, r3
 8004ac4:	d127      	bne.n	8004b16 <HAL_PCD_IRQHandler+0x1c6>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	2240      	movs	r2, #64	; 0x40
 8004acc:	5a9b      	ldrh	r3, [r3, r2]
 8004ace:	b29a      	uxth	r2, r3
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	2108      	movs	r1, #8
 8004ad6:	430a      	orrs	r2, r1
 8004ad8:	b291      	uxth	r1, r2
 8004ada:	2240      	movs	r2, #64	; 0x40
 8004adc:	5299      	strh	r1, [r3, r2]

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	2244      	movs	r2, #68	; 0x44
 8004ae4:	5a9b      	ldrh	r3, [r3, r2]
 8004ae6:	b29a      	uxth	r2, r3
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	4953      	ldr	r1, [pc, #332]	; (8004c3c <HAL_PCD_IRQHandler+0x2ec>)
 8004aee:	400a      	ands	r2, r1
 8004af0:	b291      	uxth	r1, r2
 8004af2:	2244      	movs	r2, #68	; 0x44
 8004af4:	5299      	strh	r1, [r3, r2]

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	2240      	movs	r2, #64	; 0x40
 8004afc:	5a9b      	ldrh	r3, [r3, r2]
 8004afe:	b29a      	uxth	r2, r3
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	2104      	movs	r1, #4
 8004b06:	430a      	orrs	r2, r1
 8004b08:	b291      	uxth	r1, r2
 8004b0a:	2240      	movs	r2, #64	; 0x40
 8004b0c:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	0018      	movs	r0, r3
 8004b12:	f008 fc1b 	bl	800d34c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  /* Handle LPM Interrupt */
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_L1REQ))
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	0018      	movs	r0, r3
 8004b1c:	f006 fb6e 	bl	800b1fc <USB_ReadInterrupts>
 8004b20:	0003      	movs	r3, r0
 8004b22:	2280      	movs	r2, #128	; 0x80
 8004b24:	4013      	ands	r3, r2
 8004b26:	2b80      	cmp	r3, #128	; 0x80
 8004b28:	d145      	bne.n	8004bb6 <HAL_PCD_IRQHandler+0x266>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	2244      	movs	r2, #68	; 0x44
 8004b30:	5a9b      	ldrh	r3, [r3, r2]
 8004b32:	b29a      	uxth	r2, r3
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	2180      	movs	r1, #128	; 0x80
 8004b3a:	438a      	bics	r2, r1
 8004b3c:	b291      	uxth	r1, r2
 8004b3e:	2244      	movs	r2, #68	; 0x44
 8004b40:	5299      	strh	r1, [r3, r2]
    if (hpcd->LPM_State == LPM_L0)
 8004b42:	687a      	ldr	r2, [r7, #4]
 8004b44:	23b8      	movs	r3, #184	; 0xb8
 8004b46:	009b      	lsls	r3, r3, #2
 8004b48:	5cd3      	ldrb	r3, [r2, r3]
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d12f      	bne.n	8004bae <HAL_PCD_IRQHandler+0x25e>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	2240      	movs	r2, #64	; 0x40
 8004b54:	5a9b      	ldrh	r3, [r3, r2]
 8004b56:	b29a      	uxth	r2, r3
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	2104      	movs	r1, #4
 8004b5e:	430a      	orrs	r2, r1
 8004b60:	b291      	uxth	r1, r2
 8004b62:	2240      	movs	r2, #64	; 0x40
 8004b64:	5299      	strh	r1, [r3, r2]
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	2240      	movs	r2, #64	; 0x40
 8004b6c:	5a9b      	ldrh	r3, [r3, r2]
 8004b6e:	b29a      	uxth	r2, r3
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	2108      	movs	r1, #8
 8004b76:	430a      	orrs	r2, r1
 8004b78:	b291      	uxth	r1, r2
 8004b7a:	2240      	movs	r2, #64	; 0x40
 8004b7c:	5299      	strh	r1, [r3, r2]

      hpcd->LPM_State = LPM_L1;
 8004b7e:	687a      	ldr	r2, [r7, #4]
 8004b80:	23b8      	movs	r3, #184	; 0xb8
 8004b82:	009b      	lsls	r3, r3, #2
 8004b84:	2101      	movs	r1, #1
 8004b86:	54d1      	strb	r1, [r2, r3]
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	2254      	movs	r2, #84	; 0x54
 8004b8e:	5a9b      	ldrh	r3, [r3, r2]
 8004b90:	b29b      	uxth	r3, r3
 8004b92:	089b      	lsrs	r3, r3, #2
 8004b94:	223c      	movs	r2, #60	; 0x3c
 8004b96:	4013      	ands	r3, r2
 8004b98:	0019      	movs	r1, r3
 8004b9a:	687a      	ldr	r2, [r7, #4]
 8004b9c:	23b9      	movs	r3, #185	; 0xb9
 8004b9e:	009b      	lsls	r3, r3, #2
 8004ba0:	50d1      	str	r1, [r2, r3]
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	2101      	movs	r1, #1
 8004ba6:	0018      	movs	r0, r3
 8004ba8:	f001 fc02 	bl	80063b0 <HAL_PCDEx_LPM_Callback>
 8004bac:	e003      	b.n	8004bb6 <HAL_PCD_IRQHandler+0x266>
    else
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SuspendCallback(hpcd);
#else
      HAL_PCD_SuspendCallback(hpcd);
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	0018      	movs	r0, r3
 8004bb2:	f008 fbcb 	bl	800d34c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	0018      	movs	r0, r3
 8004bbc:	f006 fb1e 	bl	800b1fc <USB_ReadInterrupts>
 8004bc0:	0002      	movs	r2, r0
 8004bc2:	2380      	movs	r3, #128	; 0x80
 8004bc4:	009b      	lsls	r3, r3, #2
 8004bc6:	401a      	ands	r2, r3
 8004bc8:	2380      	movs	r3, #128	; 0x80
 8004bca:	009b      	lsls	r3, r3, #2
 8004bcc:	429a      	cmp	r2, r3
 8004bce:	d10f      	bne.n	8004bf0 <HAL_PCD_IRQHandler+0x2a0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	2244      	movs	r2, #68	; 0x44
 8004bd6:	5a9b      	ldrh	r3, [r3, r2]
 8004bd8:	b29a      	uxth	r2, r3
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	4918      	ldr	r1, [pc, #96]	; (8004c40 <HAL_PCD_IRQHandler+0x2f0>)
 8004be0:	400a      	ands	r2, r1
 8004be2:	b291      	uxth	r1, r2
 8004be4:	2244      	movs	r2, #68	; 0x44
 8004be6:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	0018      	movs	r0, r3
 8004bec:	f008 fb7a 	bl	800d2e4 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	0018      	movs	r0, r3
 8004bf6:	f006 fb01 	bl	800b1fc <USB_ReadInterrupts>
 8004bfa:	0002      	movs	r2, r0
 8004bfc:	2380      	movs	r3, #128	; 0x80
 8004bfe:	005b      	lsls	r3, r3, #1
 8004c00:	401a      	ands	r2, r3
 8004c02:	2380      	movs	r3, #128	; 0x80
 8004c04:	005b      	lsls	r3, r3, #1
 8004c06:	429a      	cmp	r2, r3
 8004c08:	d10b      	bne.n	8004c22 <HAL_PCD_IRQHandler+0x2d2>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	2244      	movs	r2, #68	; 0x44
 8004c10:	5a9b      	ldrh	r3, [r3, r2]
 8004c12:	b29a      	uxth	r2, r3
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	490a      	ldr	r1, [pc, #40]	; (8004c44 <HAL_PCD_IRQHandler+0x2f4>)
 8004c1a:	400a      	ands	r2, r1
 8004c1c:	b291      	uxth	r1, r2
 8004c1e:	2244      	movs	r2, #68	; 0x44
 8004c20:	5299      	strh	r1, [r3, r2]
  }
}
 8004c22:	46c0      	nop			; (mov r8, r8)
 8004c24:	46bd      	mov	sp, r7
 8004c26:	b002      	add	sp, #8
 8004c28:	bd80      	pop	{r7, pc}
 8004c2a:	46c0      	nop			; (mov r8, r8)
 8004c2c:	fffffbff 	.word	0xfffffbff
 8004c30:	ffffbfff 	.word	0xffffbfff
 8004c34:	ffffdfff 	.word	0xffffdfff
 8004c38:	ffffefff 	.word	0xffffefff
 8004c3c:	fffff7ff 	.word	0xfffff7ff
 8004c40:	fffffdff 	.word	0xfffffdff
 8004c44:	fffffeff 	.word	0xfffffeff

08004c48 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8004c48:	b580      	push	{r7, lr}
 8004c4a:	b082      	sub	sp, #8
 8004c4c:	af00      	add	r7, sp, #0
 8004c4e:	6078      	str	r0, [r7, #4]
 8004c50:	000a      	movs	r2, r1
 8004c52:	1cfb      	adds	r3, r7, #3
 8004c54:	701a      	strb	r2, [r3, #0]
  __HAL_LOCK(hpcd);
 8004c56:	687a      	ldr	r2, [r7, #4]
 8004c58:	23aa      	movs	r3, #170	; 0xaa
 8004c5a:	009b      	lsls	r3, r3, #2
 8004c5c:	5cd3      	ldrb	r3, [r2, r3]
 8004c5e:	2b01      	cmp	r3, #1
 8004c60:	d101      	bne.n	8004c66 <HAL_PCD_SetAddress+0x1e>
 8004c62:	2302      	movs	r3, #2
 8004c64:	e017      	b.n	8004c96 <HAL_PCD_SetAddress+0x4e>
 8004c66:	687a      	ldr	r2, [r7, #4]
 8004c68:	23aa      	movs	r3, #170	; 0xaa
 8004c6a:	009b      	lsls	r3, r3, #2
 8004c6c:	2101      	movs	r1, #1
 8004c6e:	54d1      	strb	r1, [r2, r3]
  hpcd->USB_Address = address;
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	1cfa      	adds	r2, r7, #3
 8004c74:	2124      	movs	r1, #36	; 0x24
 8004c76:	7812      	ldrb	r2, [r2, #0]
 8004c78:	545a      	strb	r2, [r3, r1]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681a      	ldr	r2, [r3, #0]
 8004c7e:	1cfb      	adds	r3, r7, #3
 8004c80:	781b      	ldrb	r3, [r3, #0]
 8004c82:	0019      	movs	r1, r3
 8004c84:	0010      	movs	r0, r2
 8004c86:	f006 fa8f 	bl	800b1a8 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8004c8a:	687a      	ldr	r2, [r7, #4]
 8004c8c:	23aa      	movs	r3, #170	; 0xaa
 8004c8e:	009b      	lsls	r3, r3, #2
 8004c90:	2100      	movs	r1, #0
 8004c92:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8004c94:	2300      	movs	r3, #0
}
 8004c96:	0018      	movs	r0, r3
 8004c98:	46bd      	mov	sp, r7
 8004c9a:	b002      	add	sp, #8
 8004c9c:	bd80      	pop	{r7, pc}

08004c9e <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8004c9e:	b590      	push	{r4, r7, lr}
 8004ca0:	b085      	sub	sp, #20
 8004ca2:	af00      	add	r7, sp, #0
 8004ca4:	6078      	str	r0, [r7, #4]
 8004ca6:	000c      	movs	r4, r1
 8004ca8:	0010      	movs	r0, r2
 8004caa:	0019      	movs	r1, r3
 8004cac:	1cfb      	adds	r3, r7, #3
 8004cae:	1c22      	adds	r2, r4, #0
 8004cb0:	701a      	strb	r2, [r3, #0]
 8004cb2:	003b      	movs	r3, r7
 8004cb4:	1c02      	adds	r2, r0, #0
 8004cb6:	801a      	strh	r2, [r3, #0]
 8004cb8:	1cbb      	adds	r3, r7, #2
 8004cba:	1c0a      	adds	r2, r1, #0
 8004cbc:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef  ret = HAL_OK;
 8004cbe:	230b      	movs	r3, #11
 8004cc0:	18fb      	adds	r3, r7, r3
 8004cc2:	2200      	movs	r2, #0
 8004cc4:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004cc6:	1cfb      	adds	r3, r7, #3
 8004cc8:	781b      	ldrb	r3, [r3, #0]
 8004cca:	b25b      	sxtb	r3, r3
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	da0f      	bge.n	8004cf0 <HAL_PCD_EP_Open+0x52>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004cd0:	1cfb      	adds	r3, r7, #3
 8004cd2:	781b      	ldrb	r3, [r3, #0]
 8004cd4:	2207      	movs	r2, #7
 8004cd6:	4013      	ands	r3, r2
 8004cd8:	1c5a      	adds	r2, r3, #1
 8004cda:	0013      	movs	r3, r2
 8004cdc:	009b      	lsls	r3, r3, #2
 8004cde:	189b      	adds	r3, r3, r2
 8004ce0:	00db      	lsls	r3, r3, #3
 8004ce2:	687a      	ldr	r2, [r7, #4]
 8004ce4:	18d3      	adds	r3, r2, r3
 8004ce6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	2201      	movs	r2, #1
 8004cec:	705a      	strb	r2, [r3, #1]
 8004cee:	e00f      	b.n	8004d10 <HAL_PCD_EP_Open+0x72>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004cf0:	1cfb      	adds	r3, r7, #3
 8004cf2:	781b      	ldrb	r3, [r3, #0]
 8004cf4:	2207      	movs	r2, #7
 8004cf6:	401a      	ands	r2, r3
 8004cf8:	0013      	movs	r3, r2
 8004cfa:	009b      	lsls	r3, r3, #2
 8004cfc:	189b      	adds	r3, r3, r2
 8004cfe:	00db      	lsls	r3, r3, #3
 8004d00:	3369      	adds	r3, #105	; 0x69
 8004d02:	33ff      	adds	r3, #255	; 0xff
 8004d04:	687a      	ldr	r2, [r7, #4]
 8004d06:	18d3      	adds	r3, r2, r3
 8004d08:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	2200      	movs	r2, #0
 8004d0e:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8004d10:	1cfb      	adds	r3, r7, #3
 8004d12:	781b      	ldrb	r3, [r3, #0]
 8004d14:	2207      	movs	r2, #7
 8004d16:	4013      	ands	r3, r2
 8004d18:	b2da      	uxtb	r2, r3
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8004d1e:	003b      	movs	r3, r7
 8004d20:	881a      	ldrh	r2, [r3, #0]
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	1cba      	adds	r2, r7, #2
 8004d2a:	7812      	ldrb	r2, [r2, #0]
 8004d2c:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	785b      	ldrb	r3, [r3, #1]
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d004      	beq.n	8004d40 <HAL_PCD_EP_Open+0xa2>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	781b      	ldrb	r3, [r3, #0]
 8004d3a:	b29a      	uxth	r2, r3
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8004d40:	1cbb      	adds	r3, r7, #2
 8004d42:	781b      	ldrb	r3, [r3, #0]
 8004d44:	2b02      	cmp	r3, #2
 8004d46:	d102      	bne.n	8004d4e <HAL_PCD_EP_Open+0xb0>
  {
    ep->data_pid_start = 0U;
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	2200      	movs	r2, #0
 8004d4c:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8004d4e:	687a      	ldr	r2, [r7, #4]
 8004d50:	23aa      	movs	r3, #170	; 0xaa
 8004d52:	009b      	lsls	r3, r3, #2
 8004d54:	5cd3      	ldrb	r3, [r2, r3]
 8004d56:	2b01      	cmp	r3, #1
 8004d58:	d101      	bne.n	8004d5e <HAL_PCD_EP_Open+0xc0>
 8004d5a:	2302      	movs	r3, #2
 8004d5c:	e013      	b.n	8004d86 <HAL_PCD_EP_Open+0xe8>
 8004d5e:	687a      	ldr	r2, [r7, #4]
 8004d60:	23aa      	movs	r3, #170	; 0xaa
 8004d62:	009b      	lsls	r3, r3, #2
 8004d64:	2101      	movs	r1, #1
 8004d66:	54d1      	strb	r1, [r2, r3]
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	68fa      	ldr	r2, [r7, #12]
 8004d6e:	0011      	movs	r1, r2
 8004d70:	0018      	movs	r0, r3
 8004d72:	f004 fb29 	bl	80093c8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004d76:	687a      	ldr	r2, [r7, #4]
 8004d78:	23aa      	movs	r3, #170	; 0xaa
 8004d7a:	009b      	lsls	r3, r3, #2
 8004d7c:	2100      	movs	r1, #0
 8004d7e:	54d1      	strb	r1, [r2, r3]

  return ret;
 8004d80:	230b      	movs	r3, #11
 8004d82:	18fb      	adds	r3, r7, r3
 8004d84:	781b      	ldrb	r3, [r3, #0]
}
 8004d86:	0018      	movs	r0, r3
 8004d88:	46bd      	mov	sp, r7
 8004d8a:	b005      	add	sp, #20
 8004d8c:	bd90      	pop	{r4, r7, pc}

08004d8e <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004d8e:	b580      	push	{r7, lr}
 8004d90:	b084      	sub	sp, #16
 8004d92:	af00      	add	r7, sp, #0
 8004d94:	6078      	str	r0, [r7, #4]
 8004d96:	000a      	movs	r2, r1
 8004d98:	1cfb      	adds	r3, r7, #3
 8004d9a:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004d9c:	1cfb      	adds	r3, r7, #3
 8004d9e:	781b      	ldrb	r3, [r3, #0]
 8004da0:	b25b      	sxtb	r3, r3
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	da0f      	bge.n	8004dc6 <HAL_PCD_EP_Close+0x38>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004da6:	1cfb      	adds	r3, r7, #3
 8004da8:	781b      	ldrb	r3, [r3, #0]
 8004daa:	2207      	movs	r2, #7
 8004dac:	4013      	ands	r3, r2
 8004dae:	1c5a      	adds	r2, r3, #1
 8004db0:	0013      	movs	r3, r2
 8004db2:	009b      	lsls	r3, r3, #2
 8004db4:	189b      	adds	r3, r3, r2
 8004db6:	00db      	lsls	r3, r3, #3
 8004db8:	687a      	ldr	r2, [r7, #4]
 8004dba:	18d3      	adds	r3, r2, r3
 8004dbc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	2201      	movs	r2, #1
 8004dc2:	705a      	strb	r2, [r3, #1]
 8004dc4:	e00f      	b.n	8004de6 <HAL_PCD_EP_Close+0x58>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004dc6:	1cfb      	adds	r3, r7, #3
 8004dc8:	781b      	ldrb	r3, [r3, #0]
 8004dca:	2207      	movs	r2, #7
 8004dcc:	401a      	ands	r2, r3
 8004dce:	0013      	movs	r3, r2
 8004dd0:	009b      	lsls	r3, r3, #2
 8004dd2:	189b      	adds	r3, r3, r2
 8004dd4:	00db      	lsls	r3, r3, #3
 8004dd6:	3369      	adds	r3, #105	; 0x69
 8004dd8:	33ff      	adds	r3, #255	; 0xff
 8004dda:	687a      	ldr	r2, [r7, #4]
 8004ddc:	18d3      	adds	r3, r2, r3
 8004dde:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	2200      	movs	r2, #0
 8004de4:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8004de6:	1cfb      	adds	r3, r7, #3
 8004de8:	781b      	ldrb	r3, [r3, #0]
 8004dea:	2207      	movs	r2, #7
 8004dec:	4013      	ands	r3, r2
 8004dee:	b2da      	uxtb	r2, r3
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004df4:	687a      	ldr	r2, [r7, #4]
 8004df6:	23aa      	movs	r3, #170	; 0xaa
 8004df8:	009b      	lsls	r3, r3, #2
 8004dfa:	5cd3      	ldrb	r3, [r2, r3]
 8004dfc:	2b01      	cmp	r3, #1
 8004dfe:	d101      	bne.n	8004e04 <HAL_PCD_EP_Close+0x76>
 8004e00:	2302      	movs	r3, #2
 8004e02:	e011      	b.n	8004e28 <HAL_PCD_EP_Close+0x9a>
 8004e04:	687a      	ldr	r2, [r7, #4]
 8004e06:	23aa      	movs	r3, #170	; 0xaa
 8004e08:	009b      	lsls	r3, r3, #2
 8004e0a:	2101      	movs	r1, #1
 8004e0c:	54d1      	strb	r1, [r2, r3]
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	68fa      	ldr	r2, [r7, #12]
 8004e14:	0011      	movs	r1, r2
 8004e16:	0018      	movs	r0, r3
 8004e18:	f004 fe4a 	bl	8009ab0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004e1c:	687a      	ldr	r2, [r7, #4]
 8004e1e:	23aa      	movs	r3, #170	; 0xaa
 8004e20:	009b      	lsls	r3, r3, #2
 8004e22:	2100      	movs	r1, #0
 8004e24:	54d1      	strb	r1, [r2, r3]
  return HAL_OK;
 8004e26:	2300      	movs	r3, #0
}
 8004e28:	0018      	movs	r0, r3
 8004e2a:	46bd      	mov	sp, r7
 8004e2c:	b004      	add	sp, #16
 8004e2e:	bd80      	pop	{r7, pc}

08004e30 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004e30:	b580      	push	{r7, lr}
 8004e32:	b086      	sub	sp, #24
 8004e34:	af00      	add	r7, sp, #0
 8004e36:	60f8      	str	r0, [r7, #12]
 8004e38:	607a      	str	r2, [r7, #4]
 8004e3a:	603b      	str	r3, [r7, #0]
 8004e3c:	200b      	movs	r0, #11
 8004e3e:	183b      	adds	r3, r7, r0
 8004e40:	1c0a      	adds	r2, r1, #0
 8004e42:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004e44:	0001      	movs	r1, r0
 8004e46:	187b      	adds	r3, r7, r1
 8004e48:	781b      	ldrb	r3, [r3, #0]
 8004e4a:	2207      	movs	r2, #7
 8004e4c:	401a      	ands	r2, r3
 8004e4e:	0013      	movs	r3, r2
 8004e50:	009b      	lsls	r3, r3, #2
 8004e52:	189b      	adds	r3, r3, r2
 8004e54:	00db      	lsls	r3, r3, #3
 8004e56:	3369      	adds	r3, #105	; 0x69
 8004e58:	33ff      	adds	r3, #255	; 0xff
 8004e5a:	68fa      	ldr	r2, [r7, #12]
 8004e5c:	18d3      	adds	r3, r2, r3
 8004e5e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004e60:	697b      	ldr	r3, [r7, #20]
 8004e62:	687a      	ldr	r2, [r7, #4]
 8004e64:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8004e66:	697b      	ldr	r3, [r7, #20]
 8004e68:	683a      	ldr	r2, [r7, #0]
 8004e6a:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8004e6c:	697b      	ldr	r3, [r7, #20]
 8004e6e:	2200      	movs	r2, #0
 8004e70:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8004e72:	697b      	ldr	r3, [r7, #20]
 8004e74:	2200      	movs	r2, #0
 8004e76:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004e78:	187b      	adds	r3, r7, r1
 8004e7a:	781b      	ldrb	r3, [r3, #0]
 8004e7c:	2207      	movs	r2, #7
 8004e7e:	4013      	ands	r3, r2
 8004e80:	b2da      	uxtb	r2, r3
 8004e82:	697b      	ldr	r3, [r7, #20]
 8004e84:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004e86:	187b      	adds	r3, r7, r1
 8004e88:	781b      	ldrb	r3, [r3, #0]
 8004e8a:	2207      	movs	r2, #7
 8004e8c:	4013      	ands	r3, r2
 8004e8e:	d107      	bne.n	8004ea0 <HAL_PCD_EP_Receive+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	697a      	ldr	r2, [r7, #20]
 8004e96:	0011      	movs	r1, r2
 8004e98:	0018      	movs	r0, r3
 8004e9a:	f004 ffc9 	bl	8009e30 <USB_EPStartXfer>
 8004e9e:	e006      	b.n	8004eae <HAL_PCD_EP_Receive+0x7e>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	697a      	ldr	r2, [r7, #20]
 8004ea6:	0011      	movs	r1, r2
 8004ea8:	0018      	movs	r0, r3
 8004eaa:	f004 ffc1 	bl	8009e30 <USB_EPStartXfer>
  }

  return HAL_OK;
 8004eae:	2300      	movs	r3, #0
}
 8004eb0:	0018      	movs	r0, r3
 8004eb2:	46bd      	mov	sp, r7
 8004eb4:	b006      	add	sp, #24
 8004eb6:	bd80      	pop	{r7, pc}

08004eb8 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004eb8:	b580      	push	{r7, lr}
 8004eba:	b082      	sub	sp, #8
 8004ebc:	af00      	add	r7, sp, #0
 8004ebe:	6078      	str	r0, [r7, #4]
 8004ec0:	000a      	movs	r2, r1
 8004ec2:	1cfb      	adds	r3, r7, #3
 8004ec4:	701a      	strb	r2, [r3, #0]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8004ec6:	1cfb      	adds	r3, r7, #3
 8004ec8:	781b      	ldrb	r3, [r3, #0]
 8004eca:	2207      	movs	r2, #7
 8004ecc:	401a      	ands	r2, r3
 8004ece:	6878      	ldr	r0, [r7, #4]
 8004ed0:	23c2      	movs	r3, #194	; 0xc2
 8004ed2:	0059      	lsls	r1, r3, #1
 8004ed4:	0013      	movs	r3, r2
 8004ed6:	009b      	lsls	r3, r3, #2
 8004ed8:	189b      	adds	r3, r3, r2
 8004eda:	00db      	lsls	r3, r3, #3
 8004edc:	18c3      	adds	r3, r0, r3
 8004ede:	185b      	adds	r3, r3, r1
 8004ee0:	681b      	ldr	r3, [r3, #0]
}
 8004ee2:	0018      	movs	r0, r3
 8004ee4:	46bd      	mov	sp, r7
 8004ee6:	b002      	add	sp, #8
 8004ee8:	bd80      	pop	{r7, pc}

08004eea <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004eea:	b580      	push	{r7, lr}
 8004eec:	b086      	sub	sp, #24
 8004eee:	af00      	add	r7, sp, #0
 8004ef0:	60f8      	str	r0, [r7, #12]
 8004ef2:	607a      	str	r2, [r7, #4]
 8004ef4:	603b      	str	r3, [r7, #0]
 8004ef6:	200b      	movs	r0, #11
 8004ef8:	183b      	adds	r3, r7, r0
 8004efa:	1c0a      	adds	r2, r1, #0
 8004efc:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004efe:	183b      	adds	r3, r7, r0
 8004f00:	781b      	ldrb	r3, [r3, #0]
 8004f02:	2207      	movs	r2, #7
 8004f04:	4013      	ands	r3, r2
 8004f06:	1c5a      	adds	r2, r3, #1
 8004f08:	0013      	movs	r3, r2
 8004f0a:	009b      	lsls	r3, r3, #2
 8004f0c:	189b      	adds	r3, r3, r2
 8004f0e:	00db      	lsls	r3, r3, #3
 8004f10:	68fa      	ldr	r2, [r7, #12]
 8004f12:	18d3      	adds	r3, r2, r3
 8004f14:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004f16:	697b      	ldr	r3, [r7, #20]
 8004f18:	687a      	ldr	r2, [r7, #4]
 8004f1a:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8004f1c:	697b      	ldr	r3, [r7, #20]
 8004f1e:	683a      	ldr	r2, [r7, #0]
 8004f20:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8004f22:	697b      	ldr	r3, [r7, #20]
 8004f24:	2224      	movs	r2, #36	; 0x24
 8004f26:	2101      	movs	r1, #1
 8004f28:	5499      	strb	r1, [r3, r2]
  ep->xfer_len_db = len;
 8004f2a:	697b      	ldr	r3, [r7, #20]
 8004f2c:	683a      	ldr	r2, [r7, #0]
 8004f2e:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8004f30:	697b      	ldr	r3, [r7, #20]
 8004f32:	2200      	movs	r2, #0
 8004f34:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8004f36:	697b      	ldr	r3, [r7, #20]
 8004f38:	2201      	movs	r2, #1
 8004f3a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004f3c:	183b      	adds	r3, r7, r0
 8004f3e:	781b      	ldrb	r3, [r3, #0]
 8004f40:	2207      	movs	r2, #7
 8004f42:	4013      	ands	r3, r2
 8004f44:	b2da      	uxtb	r2, r3
 8004f46:	697b      	ldr	r3, [r7, #20]
 8004f48:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004f4a:	183b      	adds	r3, r7, r0
 8004f4c:	781b      	ldrb	r3, [r3, #0]
 8004f4e:	2207      	movs	r2, #7
 8004f50:	4013      	ands	r3, r2
 8004f52:	d107      	bne.n	8004f64 <HAL_PCD_EP_Transmit+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	697a      	ldr	r2, [r7, #20]
 8004f5a:	0011      	movs	r1, r2
 8004f5c:	0018      	movs	r0, r3
 8004f5e:	f004 ff67 	bl	8009e30 <USB_EPStartXfer>
 8004f62:	e006      	b.n	8004f72 <HAL_PCD_EP_Transmit+0x88>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	697a      	ldr	r2, [r7, #20]
 8004f6a:	0011      	movs	r1, r2
 8004f6c:	0018      	movs	r0, r3
 8004f6e:	f004 ff5f 	bl	8009e30 <USB_EPStartXfer>
  }

  return HAL_OK;
 8004f72:	2300      	movs	r3, #0
}
 8004f74:	0018      	movs	r0, r3
 8004f76:	46bd      	mov	sp, r7
 8004f78:	b006      	add	sp, #24
 8004f7a:	bd80      	pop	{r7, pc}

08004f7c <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004f7c:	b580      	push	{r7, lr}
 8004f7e:	b084      	sub	sp, #16
 8004f80:	af00      	add	r7, sp, #0
 8004f82:	6078      	str	r0, [r7, #4]
 8004f84:	000a      	movs	r2, r1
 8004f86:	1cfb      	adds	r3, r7, #3
 8004f88:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8004f8a:	1cfb      	adds	r3, r7, #3
 8004f8c:	781b      	ldrb	r3, [r3, #0]
 8004f8e:	2207      	movs	r2, #7
 8004f90:	401a      	ands	r2, r3
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	685b      	ldr	r3, [r3, #4]
 8004f96:	429a      	cmp	r2, r3
 8004f98:	d901      	bls.n	8004f9e <HAL_PCD_EP_SetStall+0x22>
  {
    return HAL_ERROR;
 8004f9a:	2301      	movs	r3, #1
 8004f9c:	e046      	b.n	800502c <HAL_PCD_EP_SetStall+0xb0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004f9e:	1cfb      	adds	r3, r7, #3
 8004fa0:	781b      	ldrb	r3, [r3, #0]
 8004fa2:	b25b      	sxtb	r3, r3
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	da0f      	bge.n	8004fc8 <HAL_PCD_EP_SetStall+0x4c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004fa8:	1cfb      	adds	r3, r7, #3
 8004faa:	781b      	ldrb	r3, [r3, #0]
 8004fac:	2207      	movs	r2, #7
 8004fae:	4013      	ands	r3, r2
 8004fb0:	1c5a      	adds	r2, r3, #1
 8004fb2:	0013      	movs	r3, r2
 8004fb4:	009b      	lsls	r3, r3, #2
 8004fb6:	189b      	adds	r3, r3, r2
 8004fb8:	00db      	lsls	r3, r3, #3
 8004fba:	687a      	ldr	r2, [r7, #4]
 8004fbc:	18d3      	adds	r3, r2, r3
 8004fbe:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	2201      	movs	r2, #1
 8004fc4:	705a      	strb	r2, [r3, #1]
 8004fc6:	e00d      	b.n	8004fe4 <HAL_PCD_EP_SetStall+0x68>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004fc8:	1cfb      	adds	r3, r7, #3
 8004fca:	781a      	ldrb	r2, [r3, #0]
 8004fcc:	0013      	movs	r3, r2
 8004fce:	009b      	lsls	r3, r3, #2
 8004fd0:	189b      	adds	r3, r3, r2
 8004fd2:	00db      	lsls	r3, r3, #3
 8004fd4:	3369      	adds	r3, #105	; 0x69
 8004fd6:	33ff      	adds	r3, #255	; 0xff
 8004fd8:	687a      	ldr	r2, [r7, #4]
 8004fda:	18d3      	adds	r3, r2, r3
 8004fdc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	2200      	movs	r2, #0
 8004fe2:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	2201      	movs	r2, #1
 8004fe8:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004fea:	1cfb      	adds	r3, r7, #3
 8004fec:	781b      	ldrb	r3, [r3, #0]
 8004fee:	2207      	movs	r2, #7
 8004ff0:	4013      	ands	r3, r2
 8004ff2:	b2da      	uxtb	r2, r3
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004ff8:	687a      	ldr	r2, [r7, #4]
 8004ffa:	23aa      	movs	r3, #170	; 0xaa
 8004ffc:	009b      	lsls	r3, r3, #2
 8004ffe:	5cd3      	ldrb	r3, [r2, r3]
 8005000:	2b01      	cmp	r3, #1
 8005002:	d101      	bne.n	8005008 <HAL_PCD_EP_SetStall+0x8c>
 8005004:	2302      	movs	r3, #2
 8005006:	e011      	b.n	800502c <HAL_PCD_EP_SetStall+0xb0>
 8005008:	687a      	ldr	r2, [r7, #4]
 800500a:	23aa      	movs	r3, #170	; 0xaa
 800500c:	009b      	lsls	r3, r3, #2
 800500e:	2101      	movs	r1, #1
 8005010:	54d1      	strb	r1, [r2, r3]

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	68fa      	ldr	r2, [r7, #12]
 8005018:	0011      	movs	r1, r2
 800501a:	0018      	movs	r0, r3
 800501c:	f005 ffc2 	bl	800afa4 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 8005020:	687a      	ldr	r2, [r7, #4]
 8005022:	23aa      	movs	r3, #170	; 0xaa
 8005024:	009b      	lsls	r3, r3, #2
 8005026:	2100      	movs	r1, #0
 8005028:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 800502a:	2300      	movs	r3, #0
}
 800502c:	0018      	movs	r0, r3
 800502e:	46bd      	mov	sp, r7
 8005030:	b004      	add	sp, #16
 8005032:	bd80      	pop	{r7, pc}

08005034 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005034:	b580      	push	{r7, lr}
 8005036:	b084      	sub	sp, #16
 8005038:	af00      	add	r7, sp, #0
 800503a:	6078      	str	r0, [r7, #4]
 800503c:	000a      	movs	r2, r1
 800503e:	1cfb      	adds	r3, r7, #3
 8005040:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8005042:	1cfb      	adds	r3, r7, #3
 8005044:	781b      	ldrb	r3, [r3, #0]
 8005046:	220f      	movs	r2, #15
 8005048:	401a      	ands	r2, r3
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	685b      	ldr	r3, [r3, #4]
 800504e:	429a      	cmp	r2, r3
 8005050:	d901      	bls.n	8005056 <HAL_PCD_EP_ClrStall+0x22>
  {
    return HAL_ERROR;
 8005052:	2301      	movs	r3, #1
 8005054:	e048      	b.n	80050e8 <HAL_PCD_EP_ClrStall+0xb4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005056:	1cfb      	adds	r3, r7, #3
 8005058:	781b      	ldrb	r3, [r3, #0]
 800505a:	b25b      	sxtb	r3, r3
 800505c:	2b00      	cmp	r3, #0
 800505e:	da0f      	bge.n	8005080 <HAL_PCD_EP_ClrStall+0x4c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005060:	1cfb      	adds	r3, r7, #3
 8005062:	781b      	ldrb	r3, [r3, #0]
 8005064:	2207      	movs	r2, #7
 8005066:	4013      	ands	r3, r2
 8005068:	1c5a      	adds	r2, r3, #1
 800506a:	0013      	movs	r3, r2
 800506c:	009b      	lsls	r3, r3, #2
 800506e:	189b      	adds	r3, r3, r2
 8005070:	00db      	lsls	r3, r3, #3
 8005072:	687a      	ldr	r2, [r7, #4]
 8005074:	18d3      	adds	r3, r2, r3
 8005076:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	2201      	movs	r2, #1
 800507c:	705a      	strb	r2, [r3, #1]
 800507e:	e00f      	b.n	80050a0 <HAL_PCD_EP_ClrStall+0x6c>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005080:	1cfb      	adds	r3, r7, #3
 8005082:	781b      	ldrb	r3, [r3, #0]
 8005084:	2207      	movs	r2, #7
 8005086:	401a      	ands	r2, r3
 8005088:	0013      	movs	r3, r2
 800508a:	009b      	lsls	r3, r3, #2
 800508c:	189b      	adds	r3, r3, r2
 800508e:	00db      	lsls	r3, r3, #3
 8005090:	3369      	adds	r3, #105	; 0x69
 8005092:	33ff      	adds	r3, #255	; 0xff
 8005094:	687a      	ldr	r2, [r7, #4]
 8005096:	18d3      	adds	r3, r2, r3
 8005098:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	2200      	movs	r2, #0
 800509e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	2200      	movs	r2, #0
 80050a4:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80050a6:	1cfb      	adds	r3, r7, #3
 80050a8:	781b      	ldrb	r3, [r3, #0]
 80050aa:	2207      	movs	r2, #7
 80050ac:	4013      	ands	r3, r2
 80050ae:	b2da      	uxtb	r2, r3
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80050b4:	687a      	ldr	r2, [r7, #4]
 80050b6:	23aa      	movs	r3, #170	; 0xaa
 80050b8:	009b      	lsls	r3, r3, #2
 80050ba:	5cd3      	ldrb	r3, [r2, r3]
 80050bc:	2b01      	cmp	r3, #1
 80050be:	d101      	bne.n	80050c4 <HAL_PCD_EP_ClrStall+0x90>
 80050c0:	2302      	movs	r3, #2
 80050c2:	e011      	b.n	80050e8 <HAL_PCD_EP_ClrStall+0xb4>
 80050c4:	687a      	ldr	r2, [r7, #4]
 80050c6:	23aa      	movs	r3, #170	; 0xaa
 80050c8:	009b      	lsls	r3, r3, #2
 80050ca:	2101      	movs	r1, #1
 80050cc:	54d1      	strb	r1, [r2, r3]
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	68fa      	ldr	r2, [r7, #12]
 80050d4:	0011      	movs	r1, r2
 80050d6:	0018      	movs	r0, r3
 80050d8:	f005 ffb4 	bl	800b044 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80050dc:	687a      	ldr	r2, [r7, #4]
 80050de:	23aa      	movs	r3, #170	; 0xaa
 80050e0:	009b      	lsls	r3, r3, #2
 80050e2:	2100      	movs	r1, #0
 80050e4:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 80050e6:	2300      	movs	r3, #0
}
 80050e8:	0018      	movs	r0, r3
 80050ea:	46bd      	mov	sp, r7
 80050ec:	b004      	add	sp, #16
 80050ee:	bd80      	pop	{r7, pc}

080050f0 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 80050f0:	b5b0      	push	{r4, r5, r7, lr}
 80050f2:	b096      	sub	sp, #88	; 0x58
 80050f4:	af00      	add	r7, sp, #0
 80050f6:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80050f8:	f000 fbd8 	bl	80058ac <PCD_EP_ISR_Handler+0x7bc>
  {
    wIstr = hpcd->Instance->ISTR;
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681a      	ldr	r2, [r3, #0]
 8005100:	2056      	movs	r0, #86	; 0x56
 8005102:	183b      	adds	r3, r7, r0
 8005104:	2144      	movs	r1, #68	; 0x44
 8005106:	5a52      	ldrh	r2, [r2, r1]
 8005108:	801a      	strh	r2, [r3, #0]

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 800510a:	183b      	adds	r3, r7, r0
 800510c:	881b      	ldrh	r3, [r3, #0]
 800510e:	b2da      	uxtb	r2, r3
 8005110:	2455      	movs	r4, #85	; 0x55
 8005112:	193b      	adds	r3, r7, r4
 8005114:	210f      	movs	r1, #15
 8005116:	400a      	ands	r2, r1
 8005118:	701a      	strb	r2, [r3, #0]

    if (epindex == 0U)
 800511a:	193b      	adds	r3, r7, r4
 800511c:	781b      	ldrb	r3, [r3, #0]
 800511e:	2b00      	cmp	r3, #0
 8005120:	d000      	beq.n	8005124 <PCD_EP_ISR_Handler+0x34>
 8005122:	e179      	b.n	8005418 <PCD_EP_ISR_Handler+0x328>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8005124:	183b      	adds	r3, r7, r0
 8005126:	881b      	ldrh	r3, [r3, #0]
 8005128:	2210      	movs	r2, #16
 800512a:	4013      	ands	r3, r2
 800512c:	d154      	bne.n	80051d8 <PCD_EP_ISR_Handler+0xe8>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	881b      	ldrh	r3, [r3, #0]
 8005134:	b29a      	uxth	r2, r3
 8005136:	200e      	movs	r0, #14
 8005138:	183b      	adds	r3, r7, r0
 800513a:	49af      	ldr	r1, [pc, #700]	; (80053f8 <PCD_EP_ISR_Handler+0x308>)
 800513c:	400a      	ands	r2, r1
 800513e:	801a      	strh	r2, [r3, #0]
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	183a      	adds	r2, r7, r0
 8005146:	8812      	ldrh	r2, [r2, #0]
 8005148:	49ac      	ldr	r1, [pc, #688]	; (80053fc <PCD_EP_ISR_Handler+0x30c>)
 800514a:	430a      	orrs	r2, r1
 800514c:	b292      	uxth	r2, r2
 800514e:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->IN_ep[0];
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	3328      	adds	r3, #40	; 0x28
 8005154:	64fb      	str	r3, [r7, #76]	; 0x4c

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	2250      	movs	r2, #80	; 0x50
 800515c:	5a9b      	ldrh	r3, [r3, r2]
 800515e:	b29b      	uxth	r3, r3
 8005160:	001a      	movs	r2, r3
 8005162:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005164:	781b      	ldrb	r3, [r3, #0]
 8005166:	00db      	lsls	r3, r3, #3
 8005168:	18d2      	adds	r2, r2, r3
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	18d3      	adds	r3, r2, r3
 8005170:	4aa3      	ldr	r2, [pc, #652]	; (8005400 <PCD_EP_ISR_Handler+0x310>)
 8005172:	4694      	mov	ip, r2
 8005174:	4463      	add	r3, ip
 8005176:	881b      	ldrh	r3, [r3, #0]
 8005178:	059b      	lsls	r3, r3, #22
 800517a:	0d9a      	lsrs	r2, r3, #22
 800517c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800517e:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8005180:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005182:	695a      	ldr	r2, [r3, #20]
 8005184:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005186:	69db      	ldr	r3, [r3, #28]
 8005188:	18d2      	adds	r2, r2, r3
 800518a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800518c:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	2100      	movs	r1, #0
 8005192:	0018      	movs	r0, r3
 8005194:	f008 f888 	bl	800d2a8 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	2224      	movs	r2, #36	; 0x24
 800519c:	5c9b      	ldrb	r3, [r3, r2]
 800519e:	b2db      	uxtb	r3, r3
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d101      	bne.n	80051a8 <PCD_EP_ISR_Handler+0xb8>
 80051a4:	f000 fb82 	bl	80058ac <PCD_EP_ISR_Handler+0x7bc>
 80051a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80051aa:	699b      	ldr	r3, [r3, #24]
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d001      	beq.n	80051b4 <PCD_EP_ISR_Handler+0xc4>
 80051b0:	f000 fb7c 	bl	80058ac <PCD_EP_ISR_Handler+0x7bc>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	2224      	movs	r2, #36	; 0x24
 80051b8:	5c9b      	ldrb	r3, [r3, r2]
 80051ba:	b2db      	uxtb	r3, r3
 80051bc:	2280      	movs	r2, #128	; 0x80
 80051be:	4252      	negs	r2, r2
 80051c0:	4313      	orrs	r3, r2
 80051c2:	b2da      	uxtb	r2, r3
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	b291      	uxth	r1, r2
 80051ca:	224c      	movs	r2, #76	; 0x4c
 80051cc:	5299      	strh	r1, [r3, r2]
          hpcd->USB_Address = 0U;
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	2224      	movs	r2, #36	; 0x24
 80051d2:	2100      	movs	r1, #0
 80051d4:	5499      	strb	r1, [r3, r2]
 80051d6:	e369      	b.n	80058ac <PCD_EP_ISR_Handler+0x7bc>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	3369      	adds	r3, #105	; 0x69
 80051dc:	33ff      	adds	r3, #255	; 0xff
 80051de:	64fb      	str	r3, [r7, #76]	; 0x4c
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681a      	ldr	r2, [r3, #0]
 80051e4:	2152      	movs	r1, #82	; 0x52
 80051e6:	187b      	adds	r3, r7, r1
 80051e8:	8812      	ldrh	r2, [r2, #0]
 80051ea:	801a      	strh	r2, [r3, #0]

        if ((wEPVal & USB_EP_SETUP) != 0U)
 80051ec:	187b      	adds	r3, r7, r1
 80051ee:	881a      	ldrh	r2, [r3, #0]
 80051f0:	2380      	movs	r3, #128	; 0x80
 80051f2:	011b      	lsls	r3, r3, #4
 80051f4:	4013      	ands	r3, r2
 80051f6:	d037      	beq.n	8005268 <PCD_EP_ISR_Handler+0x178>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	2250      	movs	r2, #80	; 0x50
 80051fe:	5a9b      	ldrh	r3, [r3, r2]
 8005200:	b29b      	uxth	r3, r3
 8005202:	001a      	movs	r2, r3
 8005204:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005206:	781b      	ldrb	r3, [r3, #0]
 8005208:	00db      	lsls	r3, r3, #3
 800520a:	18d2      	adds	r2, r2, r3
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	18d3      	adds	r3, r2, r3
 8005212:	4a7c      	ldr	r2, [pc, #496]	; (8005404 <PCD_EP_ISR_Handler+0x314>)
 8005214:	4694      	mov	ip, r2
 8005216:	4463      	add	r3, ip
 8005218:	881b      	ldrh	r3, [r3, #0]
 800521a:	059b      	lsls	r3, r3, #22
 800521c:	0d9a      	lsrs	r2, r3, #22
 800521e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005220:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	6818      	ldr	r0, [r3, #0]
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	22ac      	movs	r2, #172	; 0xac
 800522a:	0092      	lsls	r2, r2, #2
 800522c:	1899      	adds	r1, r3, r2
 800522e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005230:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8005232:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005234:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8005236:	b29b      	uxth	r3, r3
 8005238:	f006 f832 	bl	800b2a0 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	881b      	ldrh	r3, [r3, #0]
 8005242:	b29a      	uxth	r2, r3
 8005244:	2010      	movs	r0, #16
 8005246:	183b      	adds	r3, r7, r0
 8005248:	496f      	ldr	r1, [pc, #444]	; (8005408 <PCD_EP_ISR_Handler+0x318>)
 800524a:	400a      	ands	r2, r1
 800524c:	801a      	strh	r2, [r3, #0]
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	183a      	adds	r2, r7, r0
 8005254:	8812      	ldrh	r2, [r2, #0]
 8005256:	2180      	movs	r1, #128	; 0x80
 8005258:	430a      	orrs	r2, r1
 800525a:	b292      	uxth	r2, r2
 800525c:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	0018      	movs	r0, r3
 8005262:	f007 ffeb 	bl	800d23c <HAL_PCD_SetupStageCallback>
 8005266:	e321      	b.n	80058ac <PCD_EP_ISR_Handler+0x7bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8005268:	2352      	movs	r3, #82	; 0x52
 800526a:	18fb      	adds	r3, r7, r3
 800526c:	2200      	movs	r2, #0
 800526e:	5e9b      	ldrsh	r3, [r3, r2]
 8005270:	2b00      	cmp	r3, #0
 8005272:	db00      	blt.n	8005276 <PCD_EP_ISR_Handler+0x186>
 8005274:	e31a      	b.n	80058ac <PCD_EP_ISR_Handler+0x7bc>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	881b      	ldrh	r3, [r3, #0]
 800527c:	b29a      	uxth	r2, r3
 800527e:	201e      	movs	r0, #30
 8005280:	183b      	adds	r3, r7, r0
 8005282:	4961      	ldr	r1, [pc, #388]	; (8005408 <PCD_EP_ISR_Handler+0x318>)
 8005284:	400a      	ands	r2, r1
 8005286:	801a      	strh	r2, [r3, #0]
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	183a      	adds	r2, r7, r0
 800528e:	8812      	ldrh	r2, [r2, #0]
 8005290:	2180      	movs	r1, #128	; 0x80
 8005292:	430a      	orrs	r2, r1
 8005294:	b292      	uxth	r2, r2
 8005296:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	2250      	movs	r2, #80	; 0x50
 800529e:	5a9b      	ldrh	r3, [r3, r2]
 80052a0:	b29b      	uxth	r3, r3
 80052a2:	001a      	movs	r2, r3
 80052a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80052a6:	781b      	ldrb	r3, [r3, #0]
 80052a8:	00db      	lsls	r3, r3, #3
 80052aa:	18d2      	adds	r2, r2, r3
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	18d3      	adds	r3, r2, r3
 80052b2:	4a54      	ldr	r2, [pc, #336]	; (8005404 <PCD_EP_ISR_Handler+0x314>)
 80052b4:	4694      	mov	ip, r2
 80052b6:	4463      	add	r3, ip
 80052b8:	881b      	ldrh	r3, [r3, #0]
 80052ba:	059b      	lsls	r3, r3, #22
 80052bc:	0d9a      	lsrs	r2, r3, #22
 80052be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80052c0:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80052c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80052c4:	69db      	ldr	r3, [r3, #28]
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d01a      	beq.n	8005300 <PCD_EP_ISR_Handler+0x210>
 80052ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80052cc:	695b      	ldr	r3, [r3, #20]
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d016      	beq.n	8005300 <PCD_EP_ISR_Handler+0x210>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	6818      	ldr	r0, [r3, #0]
 80052d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80052d8:	6959      	ldr	r1, [r3, #20]
 80052da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80052dc:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 80052de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80052e0:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80052e2:	b29b      	uxth	r3, r3
 80052e4:	f005 ffdc 	bl	800b2a0 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 80052e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80052ea:	695a      	ldr	r2, [r3, #20]
 80052ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80052ee:	69db      	ldr	r3, [r3, #28]
 80052f0:	18d2      	adds	r2, r2, r3
 80052f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80052f4:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	2100      	movs	r1, #0
 80052fa:	0018      	movs	r0, r3
 80052fc:	f007 ffb3 	bl	800d266 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	881b      	ldrh	r3, [r3, #0]
 8005306:	b29b      	uxth	r3, r3
 8005308:	001a      	movs	r2, r3
 800530a:	2380      	movs	r3, #128	; 0x80
 800530c:	011b      	lsls	r3, r3, #4
 800530e:	4013      	ands	r3, r2
 8005310:	d000      	beq.n	8005314 <PCD_EP_ISR_Handler+0x224>
 8005312:	e2cb      	b.n	80058ac <PCD_EP_ISR_Handler+0x7bc>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	61bb      	str	r3, [r7, #24]
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	2250      	movs	r2, #80	; 0x50
 8005320:	5a9b      	ldrh	r3, [r3, r2]
 8005322:	b29b      	uxth	r3, r3
 8005324:	001a      	movs	r2, r3
 8005326:	69bb      	ldr	r3, [r7, #24]
 8005328:	189b      	adds	r3, r3, r2
 800532a:	61bb      	str	r3, [r7, #24]
 800532c:	69bb      	ldr	r3, [r7, #24]
 800532e:	4a35      	ldr	r2, [pc, #212]	; (8005404 <PCD_EP_ISR_Handler+0x314>)
 8005330:	4694      	mov	ip, r2
 8005332:	4463      	add	r3, ip
 8005334:	617b      	str	r3, [r7, #20]
 8005336:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005338:	691b      	ldr	r3, [r3, #16]
 800533a:	2b00      	cmp	r3, #0
 800533c:	d110      	bne.n	8005360 <PCD_EP_ISR_Handler+0x270>
 800533e:	697b      	ldr	r3, [r7, #20]
 8005340:	881b      	ldrh	r3, [r3, #0]
 8005342:	b29b      	uxth	r3, r3
 8005344:	4a31      	ldr	r2, [pc, #196]	; (800540c <PCD_EP_ISR_Handler+0x31c>)
 8005346:	4013      	ands	r3, r2
 8005348:	b29a      	uxth	r2, r3
 800534a:	697b      	ldr	r3, [r7, #20]
 800534c:	801a      	strh	r2, [r3, #0]
 800534e:	697b      	ldr	r3, [r7, #20]
 8005350:	881b      	ldrh	r3, [r3, #0]
 8005352:	b29b      	uxth	r3, r3
 8005354:	4a29      	ldr	r2, [pc, #164]	; (80053fc <PCD_EP_ISR_Handler+0x30c>)
 8005356:	4313      	orrs	r3, r2
 8005358:	b29a      	uxth	r2, r3
 800535a:	697b      	ldr	r3, [r7, #20]
 800535c:	801a      	strh	r2, [r3, #0]
 800535e:	e02b      	b.n	80053b8 <PCD_EP_ISR_Handler+0x2c8>
 8005360:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005362:	691b      	ldr	r3, [r3, #16]
 8005364:	2b3e      	cmp	r3, #62	; 0x3e
 8005366:	d812      	bhi.n	800538e <PCD_EP_ISR_Handler+0x29e>
 8005368:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800536a:	691b      	ldr	r3, [r3, #16]
 800536c:	085b      	lsrs	r3, r3, #1
 800536e:	647b      	str	r3, [r7, #68]	; 0x44
 8005370:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005372:	691b      	ldr	r3, [r3, #16]
 8005374:	2201      	movs	r2, #1
 8005376:	4013      	ands	r3, r2
 8005378:	d002      	beq.n	8005380 <PCD_EP_ISR_Handler+0x290>
 800537a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800537c:	3301      	adds	r3, #1
 800537e:	647b      	str	r3, [r7, #68]	; 0x44
 8005380:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005382:	b29b      	uxth	r3, r3
 8005384:	029b      	lsls	r3, r3, #10
 8005386:	b29a      	uxth	r2, r3
 8005388:	697b      	ldr	r3, [r7, #20]
 800538a:	801a      	strh	r2, [r3, #0]
 800538c:	e014      	b.n	80053b8 <PCD_EP_ISR_Handler+0x2c8>
 800538e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005390:	691b      	ldr	r3, [r3, #16]
 8005392:	095b      	lsrs	r3, r3, #5
 8005394:	647b      	str	r3, [r7, #68]	; 0x44
 8005396:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005398:	691b      	ldr	r3, [r3, #16]
 800539a:	221f      	movs	r2, #31
 800539c:	4013      	ands	r3, r2
 800539e:	d102      	bne.n	80053a6 <PCD_EP_ISR_Handler+0x2b6>
 80053a0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80053a2:	3b01      	subs	r3, #1
 80053a4:	647b      	str	r3, [r7, #68]	; 0x44
 80053a6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80053a8:	b29b      	uxth	r3, r3
 80053aa:	029b      	lsls	r3, r3, #10
 80053ac:	b29b      	uxth	r3, r3
 80053ae:	4a13      	ldr	r2, [pc, #76]	; (80053fc <PCD_EP_ISR_Handler+0x30c>)
 80053b0:	4313      	orrs	r3, r2
 80053b2:	b29a      	uxth	r2, r3
 80053b4:	697b      	ldr	r3, [r7, #20]
 80053b6:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	881b      	ldrh	r3, [r3, #0]
 80053be:	b29a      	uxth	r2, r3
 80053c0:	2012      	movs	r0, #18
 80053c2:	183b      	adds	r3, r7, r0
 80053c4:	4912      	ldr	r1, [pc, #72]	; (8005410 <PCD_EP_ISR_Handler+0x320>)
 80053c6:	400a      	ands	r2, r1
 80053c8:	801a      	strh	r2, [r3, #0]
 80053ca:	183b      	adds	r3, r7, r0
 80053cc:	183a      	adds	r2, r7, r0
 80053ce:	8812      	ldrh	r2, [r2, #0]
 80053d0:	2180      	movs	r1, #128	; 0x80
 80053d2:	0149      	lsls	r1, r1, #5
 80053d4:	404a      	eors	r2, r1
 80053d6:	801a      	strh	r2, [r3, #0]
 80053d8:	183b      	adds	r3, r7, r0
 80053da:	183a      	adds	r2, r7, r0
 80053dc:	8812      	ldrh	r2, [r2, #0]
 80053de:	2180      	movs	r1, #128	; 0x80
 80053e0:	0189      	lsls	r1, r1, #6
 80053e2:	404a      	eors	r2, r1
 80053e4:	801a      	strh	r2, [r3, #0]
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	183a      	adds	r2, r7, r0
 80053ec:	8812      	ldrh	r2, [r2, #0]
 80053ee:	4909      	ldr	r1, [pc, #36]	; (8005414 <PCD_EP_ISR_Handler+0x324>)
 80053f0:	430a      	orrs	r2, r1
 80053f2:	b292      	uxth	r2, r2
 80053f4:	801a      	strh	r2, [r3, #0]
 80053f6:	e259      	b.n	80058ac <PCD_EP_ISR_Handler+0x7bc>
 80053f8:	ffff8f0f 	.word	0xffff8f0f
 80053fc:	ffff8000 	.word	0xffff8000
 8005400:	00000402 	.word	0x00000402
 8005404:	00000406 	.word	0x00000406
 8005408:	00000f8f 	.word	0x00000f8f
 800540c:	ffff83ff 	.word	0xffff83ff
 8005410:	ffffbf8f 	.word	0xffffbf8f
 8005414:	ffff8080 	.word	0xffff8080
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	001a      	movs	r2, r3
 800541e:	2055      	movs	r0, #85	; 0x55
 8005420:	183b      	adds	r3, r7, r0
 8005422:	781b      	ldrb	r3, [r3, #0]
 8005424:	009b      	lsls	r3, r3, #2
 8005426:	18d2      	adds	r2, r2, r3
 8005428:	2152      	movs	r1, #82	; 0x52
 800542a:	187b      	adds	r3, r7, r1
 800542c:	8812      	ldrh	r2, [r2, #0]
 800542e:	801a      	strh	r2, [r3, #0]

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8005430:	187b      	adds	r3, r7, r1
 8005432:	2200      	movs	r2, #0
 8005434:	5e9b      	ldrsh	r3, [r3, r2]
 8005436:	2b00      	cmp	r3, #0
 8005438:	db00      	blt.n	800543c <PCD_EP_ISR_Handler+0x34c>
 800543a:	e0fa      	b.n	8005632 <PCD_EP_ISR_Handler+0x542>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	001a      	movs	r2, r3
 8005442:	183b      	adds	r3, r7, r0
 8005444:	781b      	ldrb	r3, [r3, #0]
 8005446:	009b      	lsls	r3, r3, #2
 8005448:	18d3      	adds	r3, r2, r3
 800544a:	881b      	ldrh	r3, [r3, #0]
 800544c:	b29a      	uxth	r2, r3
 800544e:	2450      	movs	r4, #80	; 0x50
 8005450:	193b      	adds	r3, r7, r4
 8005452:	49cf      	ldr	r1, [pc, #828]	; (8005790 <PCD_EP_ISR_Handler+0x6a0>)
 8005454:	400a      	ands	r2, r1
 8005456:	801a      	strh	r2, [r3, #0]
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	001a      	movs	r2, r3
 800545e:	183b      	adds	r3, r7, r0
 8005460:	781b      	ldrb	r3, [r3, #0]
 8005462:	009b      	lsls	r3, r3, #2
 8005464:	18d3      	adds	r3, r2, r3
 8005466:	193a      	adds	r2, r7, r4
 8005468:	8812      	ldrh	r2, [r2, #0]
 800546a:	2180      	movs	r1, #128	; 0x80
 800546c:	430a      	orrs	r2, r1
 800546e:	b292      	uxth	r2, r2
 8005470:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8005472:	183b      	adds	r3, r7, r0
 8005474:	781a      	ldrb	r2, [r3, #0]
 8005476:	0013      	movs	r3, r2
 8005478:	009b      	lsls	r3, r3, #2
 800547a:	189b      	adds	r3, r3, r2
 800547c:	00db      	lsls	r3, r3, #3
 800547e:	3369      	adds	r3, #105	; 0x69
 8005480:	33ff      	adds	r3, #255	; 0xff
 8005482:	687a      	ldr	r2, [r7, #4]
 8005484:	18d3      	adds	r3, r2, r3
 8005486:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8005488:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800548a:	7b1b      	ldrb	r3, [r3, #12]
 800548c:	2b00      	cmp	r3, #0
 800548e:	d125      	bne.n	80054dc <PCD_EP_ISR_Handler+0x3ec>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	2250      	movs	r2, #80	; 0x50
 8005496:	5a9b      	ldrh	r3, [r3, r2]
 8005498:	b29b      	uxth	r3, r3
 800549a:	001a      	movs	r2, r3
 800549c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800549e:	781b      	ldrb	r3, [r3, #0]
 80054a0:	00db      	lsls	r3, r3, #3
 80054a2:	18d2      	adds	r2, r2, r3
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	18d3      	adds	r3, r2, r3
 80054aa:	4aba      	ldr	r2, [pc, #744]	; (8005794 <PCD_EP_ISR_Handler+0x6a4>)
 80054ac:	4694      	mov	ip, r2
 80054ae:	4463      	add	r3, ip
 80054b0:	881a      	ldrh	r2, [r3, #0]
 80054b2:	2448      	movs	r4, #72	; 0x48
 80054b4:	193b      	adds	r3, r7, r4
 80054b6:	0592      	lsls	r2, r2, #22
 80054b8:	0d92      	lsrs	r2, r2, #22
 80054ba:	801a      	strh	r2, [r3, #0]

          if (count != 0U)
 80054bc:	193b      	adds	r3, r7, r4
 80054be:	881b      	ldrh	r3, [r3, #0]
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d100      	bne.n	80054c6 <PCD_EP_ISR_Handler+0x3d6>
 80054c4:	e08d      	b.n	80055e2 <PCD_EP_ISR_Handler+0x4f2>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	6818      	ldr	r0, [r3, #0]
 80054ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80054cc:	6959      	ldr	r1, [r3, #20]
 80054ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80054d0:	88da      	ldrh	r2, [r3, #6]
 80054d2:	193b      	adds	r3, r7, r4
 80054d4:	881b      	ldrh	r3, [r3, #0]
 80054d6:	f005 fee3 	bl	800b2a0 <USB_ReadPMA>
 80054da:	e082      	b.n	80055e2 <PCD_EP_ISR_Handler+0x4f2>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 80054dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80054de:	78db      	ldrb	r3, [r3, #3]
 80054e0:	2b02      	cmp	r3, #2
 80054e2:	d10c      	bne.n	80054fe <PCD_EP_ISR_Handler+0x40e>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 80054e4:	2348      	movs	r3, #72	; 0x48
 80054e6:	18fc      	adds	r4, r7, r3
 80054e8:	2352      	movs	r3, #82	; 0x52
 80054ea:	18fb      	adds	r3, r7, r3
 80054ec:	881a      	ldrh	r2, [r3, #0]
 80054ee:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	0018      	movs	r0, r3
 80054f4:	f000 f9ee 	bl	80058d4 <HAL_PCD_EP_DB_Receive>
 80054f8:	0003      	movs	r3, r0
 80054fa:	8023      	strh	r3, [r4, #0]
 80054fc:	e071      	b.n	80055e2 <PCD_EP_ISR_Handler+0x4f2>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	001a      	movs	r2, r3
 8005504:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005506:	781b      	ldrb	r3, [r3, #0]
 8005508:	009b      	lsls	r3, r3, #2
 800550a:	18d3      	adds	r3, r2, r3
 800550c:	881b      	ldrh	r3, [r3, #0]
 800550e:	b29a      	uxth	r2, r3
 8005510:	204a      	movs	r0, #74	; 0x4a
 8005512:	183b      	adds	r3, r7, r0
 8005514:	49a0      	ldr	r1, [pc, #640]	; (8005798 <PCD_EP_ISR_Handler+0x6a8>)
 8005516:	400a      	ands	r2, r1
 8005518:	801a      	strh	r2, [r3, #0]
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	001a      	movs	r2, r3
 8005520:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005522:	781b      	ldrb	r3, [r3, #0]
 8005524:	009b      	lsls	r3, r3, #2
 8005526:	18d3      	adds	r3, r2, r3
 8005528:	183a      	adds	r2, r7, r0
 800552a:	8812      	ldrh	r2, [r2, #0]
 800552c:	499b      	ldr	r1, [pc, #620]	; (800579c <PCD_EP_ISR_Handler+0x6ac>)
 800552e:	430a      	orrs	r2, r1
 8005530:	b292      	uxth	r2, r2
 8005532:	801a      	strh	r2, [r3, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	001a      	movs	r2, r3
 800553a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800553c:	781b      	ldrb	r3, [r3, #0]
 800553e:	009b      	lsls	r3, r3, #2
 8005540:	18d3      	adds	r3, r2, r3
 8005542:	881b      	ldrh	r3, [r3, #0]
 8005544:	b29b      	uxth	r3, r3
 8005546:	001a      	movs	r2, r3
 8005548:	2380      	movs	r3, #128	; 0x80
 800554a:	01db      	lsls	r3, r3, #7
 800554c:	4013      	ands	r3, r2
 800554e:	d024      	beq.n	800559a <PCD_EP_ISR_Handler+0x4aa>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	2250      	movs	r2, #80	; 0x50
 8005556:	5a9b      	ldrh	r3, [r3, r2]
 8005558:	b29b      	uxth	r3, r3
 800555a:	001a      	movs	r2, r3
 800555c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800555e:	781b      	ldrb	r3, [r3, #0]
 8005560:	00db      	lsls	r3, r3, #3
 8005562:	18d2      	adds	r2, r2, r3
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	18d3      	adds	r3, r2, r3
 800556a:	4a8d      	ldr	r2, [pc, #564]	; (80057a0 <PCD_EP_ISR_Handler+0x6b0>)
 800556c:	4694      	mov	ip, r2
 800556e:	4463      	add	r3, ip
 8005570:	881a      	ldrh	r2, [r3, #0]
 8005572:	2448      	movs	r4, #72	; 0x48
 8005574:	193b      	adds	r3, r7, r4
 8005576:	0592      	lsls	r2, r2, #22
 8005578:	0d92      	lsrs	r2, r2, #22
 800557a:	801a      	strh	r2, [r3, #0]

              if (count != 0U)
 800557c:	193b      	adds	r3, r7, r4
 800557e:	881b      	ldrh	r3, [r3, #0]
 8005580:	2b00      	cmp	r3, #0
 8005582:	d02e      	beq.n	80055e2 <PCD_EP_ISR_Handler+0x4f2>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	6818      	ldr	r0, [r3, #0]
 8005588:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800558a:	6959      	ldr	r1, [r3, #20]
 800558c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800558e:	891a      	ldrh	r2, [r3, #8]
 8005590:	193b      	adds	r3, r7, r4
 8005592:	881b      	ldrh	r3, [r3, #0]
 8005594:	f005 fe84 	bl	800b2a0 <USB_ReadPMA>
 8005598:	e023      	b.n	80055e2 <PCD_EP_ISR_Handler+0x4f2>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	2250      	movs	r2, #80	; 0x50
 80055a0:	5a9b      	ldrh	r3, [r3, r2]
 80055a2:	b29b      	uxth	r3, r3
 80055a4:	001a      	movs	r2, r3
 80055a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80055a8:	781b      	ldrb	r3, [r3, #0]
 80055aa:	00db      	lsls	r3, r3, #3
 80055ac:	18d2      	adds	r2, r2, r3
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	18d3      	adds	r3, r2, r3
 80055b4:	4a77      	ldr	r2, [pc, #476]	; (8005794 <PCD_EP_ISR_Handler+0x6a4>)
 80055b6:	4694      	mov	ip, r2
 80055b8:	4463      	add	r3, ip
 80055ba:	881a      	ldrh	r2, [r3, #0]
 80055bc:	2448      	movs	r4, #72	; 0x48
 80055be:	193b      	adds	r3, r7, r4
 80055c0:	0592      	lsls	r2, r2, #22
 80055c2:	0d92      	lsrs	r2, r2, #22
 80055c4:	801a      	strh	r2, [r3, #0]

              if (count != 0U)
 80055c6:	193b      	adds	r3, r7, r4
 80055c8:	881b      	ldrh	r3, [r3, #0]
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d009      	beq.n	80055e2 <PCD_EP_ISR_Handler+0x4f2>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	6818      	ldr	r0, [r3, #0]
 80055d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80055d4:	6959      	ldr	r1, [r3, #20]
 80055d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80055d8:	895a      	ldrh	r2, [r3, #10]
 80055da:	193b      	adds	r3, r7, r4
 80055dc:	881b      	ldrh	r3, [r3, #0]
 80055de:	f005 fe5f 	bl	800b2a0 <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 80055e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80055e4:	69da      	ldr	r2, [r3, #28]
 80055e6:	2148      	movs	r1, #72	; 0x48
 80055e8:	187b      	adds	r3, r7, r1
 80055ea:	881b      	ldrh	r3, [r3, #0]
 80055ec:	18d2      	adds	r2, r2, r3
 80055ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80055f0:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 80055f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80055f4:	695a      	ldr	r2, [r3, #20]
 80055f6:	187b      	adds	r3, r7, r1
 80055f8:	881b      	ldrh	r3, [r3, #0]
 80055fa:	18d2      	adds	r2, r2, r3
 80055fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80055fe:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8005600:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005602:	699b      	ldr	r3, [r3, #24]
 8005604:	2b00      	cmp	r3, #0
 8005606:	d005      	beq.n	8005614 <PCD_EP_ISR_Handler+0x524>
 8005608:	187b      	adds	r3, r7, r1
 800560a:	881a      	ldrh	r2, [r3, #0]
 800560c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800560e:	691b      	ldr	r3, [r3, #16]
 8005610:	429a      	cmp	r2, r3
 8005612:	d207      	bcs.n	8005624 <PCD_EP_ISR_Handler+0x534>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8005614:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005616:	781a      	ldrb	r2, [r3, #0]
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	0011      	movs	r1, r2
 800561c:	0018      	movs	r0, r3
 800561e:	f007 fe22 	bl	800d266 <HAL_PCD_DataOutStageCallback>
 8005622:	e006      	b.n	8005632 <PCD_EP_ISR_Handler+0x542>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800562a:	0011      	movs	r1, r2
 800562c:	0018      	movs	r0, r3
 800562e:	f004 fbff 	bl	8009e30 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8005632:	2452      	movs	r4, #82	; 0x52
 8005634:	193b      	adds	r3, r7, r4
 8005636:	881b      	ldrh	r3, [r3, #0]
 8005638:	2280      	movs	r2, #128	; 0x80
 800563a:	4013      	ands	r3, r2
 800563c:	d100      	bne.n	8005640 <PCD_EP_ISR_Handler+0x550>
 800563e:	e135      	b.n	80058ac <PCD_EP_ISR_Handler+0x7bc>
      {
        ep = &hpcd->IN_ep[epindex];
 8005640:	2055      	movs	r0, #85	; 0x55
 8005642:	183b      	adds	r3, r7, r0
 8005644:	781b      	ldrb	r3, [r3, #0]
 8005646:	1c5a      	adds	r2, r3, #1
 8005648:	0013      	movs	r3, r2
 800564a:	009b      	lsls	r3, r3, #2
 800564c:	189b      	adds	r3, r3, r2
 800564e:	00db      	lsls	r3, r3, #3
 8005650:	687a      	ldr	r2, [r7, #4]
 8005652:	18d3      	adds	r3, r2, r3
 8005654:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	001a      	movs	r2, r3
 800565c:	183b      	adds	r3, r7, r0
 800565e:	781b      	ldrb	r3, [r3, #0]
 8005660:	009b      	lsls	r3, r3, #2
 8005662:	18d3      	adds	r3, r2, r3
 8005664:	881b      	ldrh	r3, [r3, #0]
 8005666:	b29a      	uxth	r2, r3
 8005668:	2542      	movs	r5, #66	; 0x42
 800566a:	197b      	adds	r3, r7, r5
 800566c:	494d      	ldr	r1, [pc, #308]	; (80057a4 <PCD_EP_ISR_Handler+0x6b4>)
 800566e:	400a      	ands	r2, r1
 8005670:	801a      	strh	r2, [r3, #0]
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	001a      	movs	r2, r3
 8005678:	183b      	adds	r3, r7, r0
 800567a:	781b      	ldrb	r3, [r3, #0]
 800567c:	009b      	lsls	r3, r3, #2
 800567e:	18d3      	adds	r3, r2, r3
 8005680:	197a      	adds	r2, r7, r5
 8005682:	8812      	ldrh	r2, [r2, #0]
 8005684:	4948      	ldr	r1, [pc, #288]	; (80057a8 <PCD_EP_ISR_Handler+0x6b8>)
 8005686:	430a      	orrs	r2, r1
 8005688:	b292      	uxth	r2, r2
 800568a:	801a      	strh	r2, [r3, #0]

        if (ep->type != EP_TYPE_BULK)
 800568c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800568e:	78db      	ldrb	r3, [r3, #3]
 8005690:	2b02      	cmp	r3, #2
 8005692:	d100      	bne.n	8005696 <PCD_EP_ISR_Handler+0x5a6>
 8005694:	e0ad      	b.n	80057f2 <PCD_EP_ISR_Handler+0x702>
        {
          ep->xfer_len = 0U;
 8005696:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005698:	2200      	movs	r2, #0
 800569a:	619a      	str	r2, [r3, #24]

          if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800569c:	193b      	adds	r3, r7, r4
 800569e:	881b      	ldrh	r3, [r3, #0]
 80056a0:	2240      	movs	r2, #64	; 0x40
 80056a2:	4013      	ands	r3, r2
 80056a4:	d046      	beq.n	8005734 <PCD_EP_ISR_Handler+0x644>
          {
            PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80056a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80056a8:	785b      	ldrb	r3, [r3, #1]
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d125      	bne.n	80056fa <PCD_EP_ISR_Handler+0x60a>
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	627b      	str	r3, [r7, #36]	; 0x24
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	2250      	movs	r2, #80	; 0x50
 80056ba:	5a9b      	ldrh	r3, [r3, r2]
 80056bc:	b29b      	uxth	r3, r3
 80056be:	001a      	movs	r2, r3
 80056c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056c2:	189b      	adds	r3, r3, r2
 80056c4:	627b      	str	r3, [r7, #36]	; 0x24
 80056c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80056c8:	781b      	ldrb	r3, [r3, #0]
 80056ca:	00da      	lsls	r2, r3, #3
 80056cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056ce:	18d3      	adds	r3, r2, r3
 80056d0:	4a33      	ldr	r2, [pc, #204]	; (80057a0 <PCD_EP_ISR_Handler+0x6b0>)
 80056d2:	4694      	mov	ip, r2
 80056d4:	4463      	add	r3, ip
 80056d6:	623b      	str	r3, [r7, #32]
 80056d8:	6a3b      	ldr	r3, [r7, #32]
 80056da:	881b      	ldrh	r3, [r3, #0]
 80056dc:	b29b      	uxth	r3, r3
 80056de:	4a33      	ldr	r2, [pc, #204]	; (80057ac <PCD_EP_ISR_Handler+0x6bc>)
 80056e0:	4013      	ands	r3, r2
 80056e2:	b29a      	uxth	r2, r3
 80056e4:	6a3b      	ldr	r3, [r7, #32]
 80056e6:	801a      	strh	r2, [r3, #0]
 80056e8:	6a3b      	ldr	r3, [r7, #32]
 80056ea:	881b      	ldrh	r3, [r3, #0]
 80056ec:	b29b      	uxth	r3, r3
 80056ee:	4a2e      	ldr	r2, [pc, #184]	; (80057a8 <PCD_EP_ISR_Handler+0x6b8>)
 80056f0:	4313      	orrs	r3, r2
 80056f2:	b29a      	uxth	r2, r3
 80056f4:	6a3b      	ldr	r3, [r7, #32]
 80056f6:	801a      	strh	r2, [r3, #0]
 80056f8:	e073      	b.n	80057e2 <PCD_EP_ISR_Handler+0x6f2>
 80056fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80056fc:	785b      	ldrb	r3, [r3, #1]
 80056fe:	2b01      	cmp	r3, #1
 8005700:	d16f      	bne.n	80057e2 <PCD_EP_ISR_Handler+0x6f2>
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	2250      	movs	r2, #80	; 0x50
 800570e:	5a9b      	ldrh	r3, [r3, r2]
 8005710:	b29b      	uxth	r3, r3
 8005712:	001a      	movs	r2, r3
 8005714:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005716:	189b      	adds	r3, r3, r2
 8005718:	62fb      	str	r3, [r7, #44]	; 0x2c
 800571a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800571c:	781b      	ldrb	r3, [r3, #0]
 800571e:	00da      	lsls	r2, r3, #3
 8005720:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005722:	18d3      	adds	r3, r2, r3
 8005724:	4a1e      	ldr	r2, [pc, #120]	; (80057a0 <PCD_EP_ISR_Handler+0x6b0>)
 8005726:	4694      	mov	ip, r2
 8005728:	4463      	add	r3, ip
 800572a:	62bb      	str	r3, [r7, #40]	; 0x28
 800572c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800572e:	2200      	movs	r2, #0
 8005730:	801a      	strh	r2, [r3, #0]
 8005732:	e056      	b.n	80057e2 <PCD_EP_ISR_Handler+0x6f2>
          }
          else
          {
            PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	63fb      	str	r3, [r7, #60]	; 0x3c
 800573a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800573c:	785b      	ldrb	r3, [r3, #1]
 800573e:	2b00      	cmp	r3, #0
 8005740:	d136      	bne.n	80057b0 <PCD_EP_ISR_Handler+0x6c0>
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	637b      	str	r3, [r7, #52]	; 0x34
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	2250      	movs	r2, #80	; 0x50
 800574e:	5a9b      	ldrh	r3, [r3, r2]
 8005750:	b29b      	uxth	r3, r3
 8005752:	001a      	movs	r2, r3
 8005754:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005756:	189b      	adds	r3, r3, r2
 8005758:	637b      	str	r3, [r7, #52]	; 0x34
 800575a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800575c:	781b      	ldrb	r3, [r3, #0]
 800575e:	00da      	lsls	r2, r3, #3
 8005760:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005762:	18d3      	adds	r3, r2, r3
 8005764:	4a0b      	ldr	r2, [pc, #44]	; (8005794 <PCD_EP_ISR_Handler+0x6a4>)
 8005766:	4694      	mov	ip, r2
 8005768:	4463      	add	r3, ip
 800576a:	633b      	str	r3, [r7, #48]	; 0x30
 800576c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800576e:	881b      	ldrh	r3, [r3, #0]
 8005770:	b29b      	uxth	r3, r3
 8005772:	4a0e      	ldr	r2, [pc, #56]	; (80057ac <PCD_EP_ISR_Handler+0x6bc>)
 8005774:	4013      	ands	r3, r2
 8005776:	b29a      	uxth	r2, r3
 8005778:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800577a:	801a      	strh	r2, [r3, #0]
 800577c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800577e:	881b      	ldrh	r3, [r3, #0]
 8005780:	b29b      	uxth	r3, r3
 8005782:	4a09      	ldr	r2, [pc, #36]	; (80057a8 <PCD_EP_ISR_Handler+0x6b8>)
 8005784:	4313      	orrs	r3, r2
 8005786:	b29a      	uxth	r2, r3
 8005788:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800578a:	801a      	strh	r2, [r3, #0]
 800578c:	e029      	b.n	80057e2 <PCD_EP_ISR_Handler+0x6f2>
 800578e:	46c0      	nop			; (mov r8, r8)
 8005790:	00000f8f 	.word	0x00000f8f
 8005794:	00000406 	.word	0x00000406
 8005798:	ffff8f8f 	.word	0xffff8f8f
 800579c:	ffff80c0 	.word	0xffff80c0
 80057a0:	00000402 	.word	0x00000402
 80057a4:	ffff8f0f 	.word	0xffff8f0f
 80057a8:	ffff8000 	.word	0xffff8000
 80057ac:	ffff83ff 	.word	0xffff83ff
 80057b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80057b2:	785b      	ldrb	r3, [r3, #1]
 80057b4:	2b01      	cmp	r3, #1
 80057b6:	d114      	bne.n	80057e2 <PCD_EP_ISR_Handler+0x6f2>
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	2250      	movs	r2, #80	; 0x50
 80057be:	5a9b      	ldrh	r3, [r3, r2]
 80057c0:	b29b      	uxth	r3, r3
 80057c2:	001a      	movs	r2, r3
 80057c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80057c6:	189b      	adds	r3, r3, r2
 80057c8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80057ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80057cc:	781b      	ldrb	r3, [r3, #0]
 80057ce:	00da      	lsls	r2, r3, #3
 80057d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80057d2:	18d3      	adds	r3, r2, r3
 80057d4:	4a3d      	ldr	r2, [pc, #244]	; (80058cc <PCD_EP_ISR_Handler+0x7dc>)
 80057d6:	4694      	mov	ip, r2
 80057d8:	4463      	add	r3, ip
 80057da:	63bb      	str	r3, [r7, #56]	; 0x38
 80057dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057de:	2200      	movs	r2, #0
 80057e0:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80057e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80057e4:	781a      	ldrb	r2, [r3, #0]
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	0011      	movs	r1, r2
 80057ea:	0018      	movs	r0, r3
 80057ec:	f007 fd5c 	bl	800d2a8 <HAL_PCD_DataInStageCallback>
 80057f0:	e05c      	b.n	80058ac <PCD_EP_ISR_Handler+0x7bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        /* Manage Bulk Single Buffer Transaction */
        if ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U))
 80057f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80057f4:	78db      	ldrb	r3, [r3, #3]
 80057f6:	2b02      	cmp	r3, #2
 80057f8:	d150      	bne.n	800589c <PCD_EP_ISR_Handler+0x7ac>
 80057fa:	2352      	movs	r3, #82	; 0x52
 80057fc:	18fb      	adds	r3, r7, r3
 80057fe:	881a      	ldrh	r2, [r3, #0]
 8005800:	2380      	movs	r3, #128	; 0x80
 8005802:	005b      	lsls	r3, r3, #1
 8005804:	4013      	ands	r3, r2
 8005806:	d149      	bne.n	800589c <PCD_EP_ISR_Handler+0x7ac>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	2250      	movs	r2, #80	; 0x50
 800580e:	5a9b      	ldrh	r3, [r3, r2]
 8005810:	b29b      	uxth	r3, r3
 8005812:	001a      	movs	r2, r3
 8005814:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005816:	781b      	ldrb	r3, [r3, #0]
 8005818:	00db      	lsls	r3, r3, #3
 800581a:	18d2      	adds	r2, r2, r3
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	18d3      	adds	r3, r2, r3
 8005822:	4a2b      	ldr	r2, [pc, #172]	; (80058d0 <PCD_EP_ISR_Handler+0x7e0>)
 8005824:	4694      	mov	ip, r2
 8005826:	4463      	add	r3, ip
 8005828:	881a      	ldrh	r2, [r3, #0]
 800582a:	2140      	movs	r1, #64	; 0x40
 800582c:	187b      	adds	r3, r7, r1
 800582e:	0592      	lsls	r2, r2, #22
 8005830:	0d92      	lsrs	r2, r2, #22
 8005832:	801a      	strh	r2, [r3, #0]

          if (ep->xfer_len > TxByteNbre)
 8005834:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005836:	699a      	ldr	r2, [r3, #24]
 8005838:	187b      	adds	r3, r7, r1
 800583a:	881b      	ldrh	r3, [r3, #0]
 800583c:	429a      	cmp	r2, r3
 800583e:	d907      	bls.n	8005850 <PCD_EP_ISR_Handler+0x760>
          {
            ep->xfer_len -= TxByteNbre;
 8005840:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005842:	699a      	ldr	r2, [r3, #24]
 8005844:	187b      	adds	r3, r7, r1
 8005846:	881b      	ldrh	r3, [r3, #0]
 8005848:	1ad2      	subs	r2, r2, r3
 800584a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800584c:	619a      	str	r2, [r3, #24]
 800584e:	e002      	b.n	8005856 <PCD_EP_ISR_Handler+0x766>
          }
          else
          {
            ep->xfer_len = 0U;
 8005850:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005852:	2200      	movs	r2, #0
 8005854:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 8005856:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005858:	699b      	ldr	r3, [r3, #24]
 800585a:	2b00      	cmp	r3, #0
 800585c:	d107      	bne.n	800586e <PCD_EP_ISR_Handler+0x77e>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800585e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005860:	781a      	ldrb	r2, [r3, #0]
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	0011      	movs	r1, r2
 8005866:	0018      	movs	r0, r3
 8005868:	f007 fd1e 	bl	800d2a8 <HAL_PCD_DataInStageCallback>
 800586c:	e01e      	b.n	80058ac <PCD_EP_ISR_Handler+0x7bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 800586e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005870:	695a      	ldr	r2, [r3, #20]
 8005872:	2140      	movs	r1, #64	; 0x40
 8005874:	187b      	adds	r3, r7, r1
 8005876:	881b      	ldrh	r3, [r3, #0]
 8005878:	18d2      	adds	r2, r2, r3
 800587a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800587c:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 800587e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005880:	69da      	ldr	r2, [r3, #28]
 8005882:	187b      	adds	r3, r7, r1
 8005884:	881b      	ldrh	r3, [r3, #0]
 8005886:	18d2      	adds	r2, r2, r3
 8005888:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800588a:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005892:	0011      	movs	r1, r2
 8005894:	0018      	movs	r0, r3
 8005896:	f004 facb 	bl	8009e30 <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 800589a:	e007      	b.n	80058ac <PCD_EP_ISR_Handler+0x7bc>
          }
        }
        /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 800589c:	2352      	movs	r3, #82	; 0x52
 800589e:	18fb      	adds	r3, r7, r3
 80058a0:	881a      	ldrh	r2, [r3, #0]
 80058a2:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	0018      	movs	r0, r3
 80058a8:	f000 f930 	bl	8005b0c <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	2244      	movs	r2, #68	; 0x44
 80058b2:	5a9b      	ldrh	r3, [r3, r2]
 80058b4:	b29b      	uxth	r3, r3
 80058b6:	b21b      	sxth	r3, r3
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	da01      	bge.n	80058c0 <PCD_EP_ISR_Handler+0x7d0>
 80058bc:	f7ff fc1e 	bl	80050fc <PCD_EP_ISR_Handler+0xc>
        }
      }
    }
  }

  return HAL_OK;
 80058c0:	2300      	movs	r3, #0
}
 80058c2:	0018      	movs	r0, r3
 80058c4:	46bd      	mov	sp, r7
 80058c6:	b016      	add	sp, #88	; 0x58
 80058c8:	bdb0      	pop	{r4, r5, r7, pc}
 80058ca:	46c0      	nop			; (mov r8, r8)
 80058cc:	00000406 	.word	0x00000406
 80058d0:	00000402 	.word	0x00000402

080058d4 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80058d4:	b590      	push	{r4, r7, lr}
 80058d6:	b089      	sub	sp, #36	; 0x24
 80058d8:	af00      	add	r7, sp, #0
 80058da:	60f8      	str	r0, [r7, #12]
 80058dc:	60b9      	str	r1, [r7, #8]
 80058de:	1dbb      	adds	r3, r7, #6
 80058e0:	801a      	strh	r2, [r3, #0]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80058e2:	1dbb      	adds	r3, r7, #6
 80058e4:	881a      	ldrh	r2, [r3, #0]
 80058e6:	2380      	movs	r3, #128	; 0x80
 80058e8:	01db      	lsls	r3, r3, #7
 80058ea:	4013      	ands	r3, r2
 80058ec:	d100      	bne.n	80058f0 <HAL_PCD_EP_DB_Receive+0x1c>
 80058ee:	e07d      	b.n	80059ec <HAL_PCD_EP_DB_Receive+0x118>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	2250      	movs	r2, #80	; 0x50
 80058f6:	5a9b      	ldrh	r3, [r3, r2]
 80058f8:	b29b      	uxth	r3, r3
 80058fa:	001a      	movs	r2, r3
 80058fc:	68bb      	ldr	r3, [r7, #8]
 80058fe:	781b      	ldrb	r3, [r3, #0]
 8005900:	00db      	lsls	r3, r3, #3
 8005902:	18d2      	adds	r2, r2, r3
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	18d3      	adds	r3, r2, r3
 800590a:	4a7a      	ldr	r2, [pc, #488]	; (8005af4 <HAL_PCD_EP_DB_Receive+0x220>)
 800590c:	4694      	mov	ip, r2
 800590e:	4463      	add	r3, ip
 8005910:	881a      	ldrh	r2, [r3, #0]
 8005912:	211a      	movs	r1, #26
 8005914:	187b      	adds	r3, r7, r1
 8005916:	0592      	lsls	r2, r2, #22
 8005918:	0d92      	lsrs	r2, r2, #22
 800591a:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= count)
 800591c:	68bb      	ldr	r3, [r7, #8]
 800591e:	699a      	ldr	r2, [r3, #24]
 8005920:	187b      	adds	r3, r7, r1
 8005922:	881b      	ldrh	r3, [r3, #0]
 8005924:	429a      	cmp	r2, r3
 8005926:	d307      	bcc.n	8005938 <HAL_PCD_EP_DB_Receive+0x64>
    {
      ep->xfer_len -= count;
 8005928:	68bb      	ldr	r3, [r7, #8]
 800592a:	699a      	ldr	r2, [r3, #24]
 800592c:	187b      	adds	r3, r7, r1
 800592e:	881b      	ldrh	r3, [r3, #0]
 8005930:	1ad2      	subs	r2, r2, r3
 8005932:	68bb      	ldr	r3, [r7, #8]
 8005934:	619a      	str	r2, [r3, #24]
 8005936:	e002      	b.n	800593e <HAL_PCD_EP_DB_Receive+0x6a>
    }
    else
    {
      ep->xfer_len = 0U;
 8005938:	68bb      	ldr	r3, [r7, #8]
 800593a:	2200      	movs	r2, #0
 800593c:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800593e:	68bb      	ldr	r3, [r7, #8]
 8005940:	699b      	ldr	r3, [r3, #24]
 8005942:	2b00      	cmp	r3, #0
 8005944:	d121      	bne.n	800598a <HAL_PCD_EP_DB_Receive+0xb6>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	001a      	movs	r2, r3
 800594c:	68bb      	ldr	r3, [r7, #8]
 800594e:	781b      	ldrb	r3, [r3, #0]
 8005950:	009b      	lsls	r3, r3, #2
 8005952:	18d3      	adds	r3, r2, r3
 8005954:	881b      	ldrh	r3, [r3, #0]
 8005956:	b29a      	uxth	r2, r3
 8005958:	2018      	movs	r0, #24
 800595a:	183b      	adds	r3, r7, r0
 800595c:	4966      	ldr	r1, [pc, #408]	; (8005af8 <HAL_PCD_EP_DB_Receive+0x224>)
 800595e:	400a      	ands	r2, r1
 8005960:	801a      	strh	r2, [r3, #0]
 8005962:	183b      	adds	r3, r7, r0
 8005964:	183a      	adds	r2, r7, r0
 8005966:	8812      	ldrh	r2, [r2, #0]
 8005968:	2180      	movs	r1, #128	; 0x80
 800596a:	0189      	lsls	r1, r1, #6
 800596c:	404a      	eors	r2, r1
 800596e:	801a      	strh	r2, [r3, #0]
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	001a      	movs	r2, r3
 8005976:	68bb      	ldr	r3, [r7, #8]
 8005978:	781b      	ldrb	r3, [r3, #0]
 800597a:	009b      	lsls	r3, r3, #2
 800597c:	18d3      	adds	r3, r2, r3
 800597e:	183a      	adds	r2, r7, r0
 8005980:	8812      	ldrh	r2, [r2, #0]
 8005982:	495e      	ldr	r1, [pc, #376]	; (8005afc <HAL_PCD_EP_DB_Receive+0x228>)
 8005984:	430a      	orrs	r2, r1
 8005986:	b292      	uxth	r2, r2
 8005988:	801a      	strh	r2, [r3, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800598a:	1dbb      	adds	r3, r7, #6
 800598c:	881b      	ldrh	r3, [r3, #0]
 800598e:	2240      	movs	r2, #64	; 0x40
 8005990:	4013      	ands	r3, r2
 8005992:	d01a      	beq.n	80059ca <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	001a      	movs	r2, r3
 800599a:	68bb      	ldr	r3, [r7, #8]
 800599c:	781b      	ldrb	r3, [r3, #0]
 800599e:	009b      	lsls	r3, r3, #2
 80059a0:	18d3      	adds	r3, r2, r3
 80059a2:	881b      	ldrh	r3, [r3, #0]
 80059a4:	b29a      	uxth	r2, r3
 80059a6:	2016      	movs	r0, #22
 80059a8:	183b      	adds	r3, r7, r0
 80059aa:	4955      	ldr	r1, [pc, #340]	; (8005b00 <HAL_PCD_EP_DB_Receive+0x22c>)
 80059ac:	400a      	ands	r2, r1
 80059ae:	801a      	strh	r2, [r3, #0]
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	001a      	movs	r2, r3
 80059b6:	68bb      	ldr	r3, [r7, #8]
 80059b8:	781b      	ldrb	r3, [r3, #0]
 80059ba:	009b      	lsls	r3, r3, #2
 80059bc:	18d3      	adds	r3, r2, r3
 80059be:	183a      	adds	r2, r7, r0
 80059c0:	8812      	ldrh	r2, [r2, #0]
 80059c2:	4950      	ldr	r1, [pc, #320]	; (8005b04 <HAL_PCD_EP_DB_Receive+0x230>)
 80059c4:	430a      	orrs	r2, r1
 80059c6:	b292      	uxth	r2, r2
 80059c8:	801a      	strh	r2, [r3, #0]
    }

    if (count != 0U)
 80059ca:	241a      	movs	r4, #26
 80059cc:	193b      	adds	r3, r7, r4
 80059ce:	881b      	ldrh	r3, [r3, #0]
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d100      	bne.n	80059d6 <HAL_PCD_EP_DB_Receive+0x102>
 80059d4:	e086      	b.n	8005ae4 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	6818      	ldr	r0, [r3, #0]
 80059da:	68bb      	ldr	r3, [r7, #8]
 80059dc:	6959      	ldr	r1, [r3, #20]
 80059de:	68bb      	ldr	r3, [r7, #8]
 80059e0:	891a      	ldrh	r2, [r3, #8]
 80059e2:	193b      	adds	r3, r7, r4
 80059e4:	881b      	ldrh	r3, [r3, #0]
 80059e6:	f005 fc5b 	bl	800b2a0 <USB_ReadPMA>
 80059ea:	e07b      	b.n	8005ae4 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	2250      	movs	r2, #80	; 0x50
 80059f2:	5a9b      	ldrh	r3, [r3, r2]
 80059f4:	b29b      	uxth	r3, r3
 80059f6:	001a      	movs	r2, r3
 80059f8:	68bb      	ldr	r3, [r7, #8]
 80059fa:	781b      	ldrb	r3, [r3, #0]
 80059fc:	00db      	lsls	r3, r3, #3
 80059fe:	18d2      	adds	r2, r2, r3
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	18d3      	adds	r3, r2, r3
 8005a06:	4a40      	ldr	r2, [pc, #256]	; (8005b08 <HAL_PCD_EP_DB_Receive+0x234>)
 8005a08:	4694      	mov	ip, r2
 8005a0a:	4463      	add	r3, ip
 8005a0c:	881a      	ldrh	r2, [r3, #0]
 8005a0e:	211a      	movs	r1, #26
 8005a10:	187b      	adds	r3, r7, r1
 8005a12:	0592      	lsls	r2, r2, #22
 8005a14:	0d92      	lsrs	r2, r2, #22
 8005a16:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= count)
 8005a18:	68bb      	ldr	r3, [r7, #8]
 8005a1a:	699a      	ldr	r2, [r3, #24]
 8005a1c:	187b      	adds	r3, r7, r1
 8005a1e:	881b      	ldrh	r3, [r3, #0]
 8005a20:	429a      	cmp	r2, r3
 8005a22:	d307      	bcc.n	8005a34 <HAL_PCD_EP_DB_Receive+0x160>
    {
      ep->xfer_len -= count;
 8005a24:	68bb      	ldr	r3, [r7, #8]
 8005a26:	699a      	ldr	r2, [r3, #24]
 8005a28:	187b      	adds	r3, r7, r1
 8005a2a:	881b      	ldrh	r3, [r3, #0]
 8005a2c:	1ad2      	subs	r2, r2, r3
 8005a2e:	68bb      	ldr	r3, [r7, #8]
 8005a30:	619a      	str	r2, [r3, #24]
 8005a32:	e002      	b.n	8005a3a <HAL_PCD_EP_DB_Receive+0x166>
    }
    else
    {
      ep->xfer_len = 0U;
 8005a34:	68bb      	ldr	r3, [r7, #8]
 8005a36:	2200      	movs	r2, #0
 8005a38:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8005a3a:	68bb      	ldr	r3, [r7, #8]
 8005a3c:	699b      	ldr	r3, [r3, #24]
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d121      	bne.n	8005a86 <HAL_PCD_EP_DB_Receive+0x1b2>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	001a      	movs	r2, r3
 8005a48:	68bb      	ldr	r3, [r7, #8]
 8005a4a:	781b      	ldrb	r3, [r3, #0]
 8005a4c:	009b      	lsls	r3, r3, #2
 8005a4e:	18d3      	adds	r3, r2, r3
 8005a50:	881b      	ldrh	r3, [r3, #0]
 8005a52:	b29a      	uxth	r2, r3
 8005a54:	201e      	movs	r0, #30
 8005a56:	183b      	adds	r3, r7, r0
 8005a58:	4927      	ldr	r1, [pc, #156]	; (8005af8 <HAL_PCD_EP_DB_Receive+0x224>)
 8005a5a:	400a      	ands	r2, r1
 8005a5c:	801a      	strh	r2, [r3, #0]
 8005a5e:	183b      	adds	r3, r7, r0
 8005a60:	183a      	adds	r2, r7, r0
 8005a62:	8812      	ldrh	r2, [r2, #0]
 8005a64:	2180      	movs	r1, #128	; 0x80
 8005a66:	0189      	lsls	r1, r1, #6
 8005a68:	404a      	eors	r2, r1
 8005a6a:	801a      	strh	r2, [r3, #0]
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	001a      	movs	r2, r3
 8005a72:	68bb      	ldr	r3, [r7, #8]
 8005a74:	781b      	ldrb	r3, [r3, #0]
 8005a76:	009b      	lsls	r3, r3, #2
 8005a78:	18d3      	adds	r3, r2, r3
 8005a7a:	183a      	adds	r2, r7, r0
 8005a7c:	8812      	ldrh	r2, [r2, #0]
 8005a7e:	491f      	ldr	r1, [pc, #124]	; (8005afc <HAL_PCD_EP_DB_Receive+0x228>)
 8005a80:	430a      	orrs	r2, r1
 8005a82:	b292      	uxth	r2, r2
 8005a84:	801a      	strh	r2, [r3, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8005a86:	1dbb      	adds	r3, r7, #6
 8005a88:	881b      	ldrh	r3, [r3, #0]
 8005a8a:	2240      	movs	r2, #64	; 0x40
 8005a8c:	4013      	ands	r3, r2
 8005a8e:	d11a      	bne.n	8005ac6 <HAL_PCD_EP_DB_Receive+0x1f2>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	001a      	movs	r2, r3
 8005a96:	68bb      	ldr	r3, [r7, #8]
 8005a98:	781b      	ldrb	r3, [r3, #0]
 8005a9a:	009b      	lsls	r3, r3, #2
 8005a9c:	18d3      	adds	r3, r2, r3
 8005a9e:	881b      	ldrh	r3, [r3, #0]
 8005aa0:	b29a      	uxth	r2, r3
 8005aa2:	201c      	movs	r0, #28
 8005aa4:	183b      	adds	r3, r7, r0
 8005aa6:	4916      	ldr	r1, [pc, #88]	; (8005b00 <HAL_PCD_EP_DB_Receive+0x22c>)
 8005aa8:	400a      	ands	r2, r1
 8005aaa:	801a      	strh	r2, [r3, #0]
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	001a      	movs	r2, r3
 8005ab2:	68bb      	ldr	r3, [r7, #8]
 8005ab4:	781b      	ldrb	r3, [r3, #0]
 8005ab6:	009b      	lsls	r3, r3, #2
 8005ab8:	18d3      	adds	r3, r2, r3
 8005aba:	183a      	adds	r2, r7, r0
 8005abc:	8812      	ldrh	r2, [r2, #0]
 8005abe:	4911      	ldr	r1, [pc, #68]	; (8005b04 <HAL_PCD_EP_DB_Receive+0x230>)
 8005ac0:	430a      	orrs	r2, r1
 8005ac2:	b292      	uxth	r2, r2
 8005ac4:	801a      	strh	r2, [r3, #0]
    }

    if (count != 0U)
 8005ac6:	241a      	movs	r4, #26
 8005ac8:	193b      	adds	r3, r7, r4
 8005aca:	881b      	ldrh	r3, [r3, #0]
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d009      	beq.n	8005ae4 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	6818      	ldr	r0, [r3, #0]
 8005ad4:	68bb      	ldr	r3, [r7, #8]
 8005ad6:	6959      	ldr	r1, [r3, #20]
 8005ad8:	68bb      	ldr	r3, [r7, #8]
 8005ada:	895a      	ldrh	r2, [r3, #10]
 8005adc:	193b      	adds	r3, r7, r4
 8005ade:	881b      	ldrh	r3, [r3, #0]
 8005ae0:	f005 fbde 	bl	800b2a0 <USB_ReadPMA>
    }
  }

  return count;
 8005ae4:	231a      	movs	r3, #26
 8005ae6:	18fb      	adds	r3, r7, r3
 8005ae8:	881b      	ldrh	r3, [r3, #0]
}
 8005aea:	0018      	movs	r0, r3
 8005aec:	46bd      	mov	sp, r7
 8005aee:	b009      	add	sp, #36	; 0x24
 8005af0:	bd90      	pop	{r4, r7, pc}
 8005af2:	46c0      	nop			; (mov r8, r8)
 8005af4:	00000402 	.word	0x00000402
 8005af8:	ffffbf8f 	.word	0xffffbf8f
 8005afc:	ffff8080 	.word	0xffff8080
 8005b00:	ffff8f8f 	.word	0xffff8f8f
 8005b04:	ffff80c0 	.word	0xffff80c0
 8005b08:	00000406 	.word	0x00000406

08005b0c <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8005b0c:	b580      	push	{r7, lr}
 8005b0e:	b0a2      	sub	sp, #136	; 0x88
 8005b10:	af00      	add	r7, sp, #0
 8005b12:	60f8      	str	r0, [r7, #12]
 8005b14:	60b9      	str	r1, [r7, #8]
 8005b16:	1dbb      	adds	r3, r7, #6
 8005b18:	801a      	strh	r2, [r3, #0]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8005b1a:	1dbb      	adds	r3, r7, #6
 8005b1c:	881b      	ldrh	r3, [r3, #0]
 8005b1e:	2240      	movs	r2, #64	; 0x40
 8005b20:	4013      	ands	r3, r2
 8005b22:	d100      	bne.n	8005b26 <HAL_PCD_EP_DB_Transmit+0x1a>
 8005b24:	e1c8      	b.n	8005eb8 <HAL_PCD_EP_DB_Transmit+0x3ac>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	2250      	movs	r2, #80	; 0x50
 8005b2c:	5a9b      	ldrh	r3, [r3, r2]
 8005b2e:	b29b      	uxth	r3, r3
 8005b30:	001a      	movs	r2, r3
 8005b32:	68bb      	ldr	r3, [r7, #8]
 8005b34:	781b      	ldrb	r3, [r3, #0]
 8005b36:	00db      	lsls	r3, r3, #3
 8005b38:	18d2      	adds	r2, r2, r3
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	18d3      	adds	r3, r2, r3
 8005b40:	4ad7      	ldr	r2, [pc, #860]	; (8005ea0 <HAL_PCD_EP_DB_Transmit+0x394>)
 8005b42:	4694      	mov	ip, r2
 8005b44:	4463      	add	r3, ip
 8005b46:	881a      	ldrh	r2, [r3, #0]
 8005b48:	214e      	movs	r1, #78	; 0x4e
 8005b4a:	187b      	adds	r3, r7, r1
 8005b4c:	0592      	lsls	r2, r2, #22
 8005b4e:	0d92      	lsrs	r2, r2, #22
 8005b50:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len > TxByteNbre)
 8005b52:	68bb      	ldr	r3, [r7, #8]
 8005b54:	699a      	ldr	r2, [r3, #24]
 8005b56:	187b      	adds	r3, r7, r1
 8005b58:	881b      	ldrh	r3, [r3, #0]
 8005b5a:	429a      	cmp	r2, r3
 8005b5c:	d907      	bls.n	8005b6e <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxByteNbre;
 8005b5e:	68bb      	ldr	r3, [r7, #8]
 8005b60:	699a      	ldr	r2, [r3, #24]
 8005b62:	187b      	adds	r3, r7, r1
 8005b64:	881b      	ldrh	r3, [r3, #0]
 8005b66:	1ad2      	subs	r2, r2, r3
 8005b68:	68bb      	ldr	r3, [r7, #8]
 8005b6a:	619a      	str	r2, [r3, #24]
 8005b6c:	e002      	b.n	8005b74 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8005b6e:	68bb      	ldr	r3, [r7, #8]
 8005b70:	2200      	movs	r2, #0
 8005b72:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8005b74:	68bb      	ldr	r3, [r7, #8]
 8005b76:	699b      	ldr	r3, [r3, #24]
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d000      	beq.n	8005b7e <HAL_PCD_EP_DB_Transmit+0x72>
 8005b7c:	e0b5      	b.n	8005cea <HAL_PCD_EP_DB_Transmit+0x1de>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005b7e:	68bb      	ldr	r3, [r7, #8]
 8005b80:	785b      	ldrb	r3, [r3, #1]
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d125      	bne.n	8005bd2 <HAL_PCD_EP_DB_Transmit+0xc6>
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	62bb      	str	r3, [r7, #40]	; 0x28
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	2250      	movs	r2, #80	; 0x50
 8005b92:	5a9b      	ldrh	r3, [r3, r2]
 8005b94:	b29b      	uxth	r3, r3
 8005b96:	001a      	movs	r2, r3
 8005b98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b9a:	189b      	adds	r3, r3, r2
 8005b9c:	62bb      	str	r3, [r7, #40]	; 0x28
 8005b9e:	68bb      	ldr	r3, [r7, #8]
 8005ba0:	781b      	ldrb	r3, [r3, #0]
 8005ba2:	00da      	lsls	r2, r3, #3
 8005ba4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ba6:	18d3      	adds	r3, r2, r3
 8005ba8:	4abd      	ldr	r2, [pc, #756]	; (8005ea0 <HAL_PCD_EP_DB_Transmit+0x394>)
 8005baa:	4694      	mov	ip, r2
 8005bac:	4463      	add	r3, ip
 8005bae:	627b      	str	r3, [r7, #36]	; 0x24
 8005bb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bb2:	881b      	ldrh	r3, [r3, #0]
 8005bb4:	b29b      	uxth	r3, r3
 8005bb6:	4abb      	ldr	r2, [pc, #748]	; (8005ea4 <HAL_PCD_EP_DB_Transmit+0x398>)
 8005bb8:	4013      	ands	r3, r2
 8005bba:	b29a      	uxth	r2, r3
 8005bbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bbe:	801a      	strh	r2, [r3, #0]
 8005bc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bc2:	881b      	ldrh	r3, [r3, #0]
 8005bc4:	b29b      	uxth	r3, r3
 8005bc6:	4ab8      	ldr	r2, [pc, #736]	; (8005ea8 <HAL_PCD_EP_DB_Transmit+0x39c>)
 8005bc8:	4313      	orrs	r3, r2
 8005bca:	b29a      	uxth	r2, r3
 8005bcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bce:	801a      	strh	r2, [r3, #0]
 8005bd0:	e01b      	b.n	8005c0a <HAL_PCD_EP_DB_Transmit+0xfe>
 8005bd2:	68bb      	ldr	r3, [r7, #8]
 8005bd4:	785b      	ldrb	r3, [r3, #1]
 8005bd6:	2b01      	cmp	r3, #1
 8005bd8:	d117      	bne.n	8005c0a <HAL_PCD_EP_DB_Transmit+0xfe>
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	633b      	str	r3, [r7, #48]	; 0x30
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	2250      	movs	r2, #80	; 0x50
 8005be6:	5a9b      	ldrh	r3, [r3, r2]
 8005be8:	b29b      	uxth	r3, r3
 8005bea:	001a      	movs	r2, r3
 8005bec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bee:	189b      	adds	r3, r3, r2
 8005bf0:	633b      	str	r3, [r7, #48]	; 0x30
 8005bf2:	68bb      	ldr	r3, [r7, #8]
 8005bf4:	781b      	ldrb	r3, [r3, #0]
 8005bf6:	00da      	lsls	r2, r3, #3
 8005bf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bfa:	18d3      	adds	r3, r2, r3
 8005bfc:	4aa8      	ldr	r2, [pc, #672]	; (8005ea0 <HAL_PCD_EP_DB_Transmit+0x394>)
 8005bfe:	4694      	mov	ip, r2
 8005c00:	4463      	add	r3, ip
 8005c02:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005c04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c06:	2200      	movs	r2, #0
 8005c08:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	623b      	str	r3, [r7, #32]
 8005c10:	68bb      	ldr	r3, [r7, #8]
 8005c12:	785b      	ldrb	r3, [r3, #1]
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d125      	bne.n	8005c64 <HAL_PCD_EP_DB_Transmit+0x158>
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	61bb      	str	r3, [r7, #24]
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	2250      	movs	r2, #80	; 0x50
 8005c24:	5a9b      	ldrh	r3, [r3, r2]
 8005c26:	b29b      	uxth	r3, r3
 8005c28:	001a      	movs	r2, r3
 8005c2a:	69bb      	ldr	r3, [r7, #24]
 8005c2c:	189b      	adds	r3, r3, r2
 8005c2e:	61bb      	str	r3, [r7, #24]
 8005c30:	68bb      	ldr	r3, [r7, #8]
 8005c32:	781b      	ldrb	r3, [r3, #0]
 8005c34:	00da      	lsls	r2, r3, #3
 8005c36:	69bb      	ldr	r3, [r7, #24]
 8005c38:	18d3      	adds	r3, r2, r3
 8005c3a:	4a9c      	ldr	r2, [pc, #624]	; (8005eac <HAL_PCD_EP_DB_Transmit+0x3a0>)
 8005c3c:	4694      	mov	ip, r2
 8005c3e:	4463      	add	r3, ip
 8005c40:	617b      	str	r3, [r7, #20]
 8005c42:	697b      	ldr	r3, [r7, #20]
 8005c44:	881b      	ldrh	r3, [r3, #0]
 8005c46:	b29b      	uxth	r3, r3
 8005c48:	4a96      	ldr	r2, [pc, #600]	; (8005ea4 <HAL_PCD_EP_DB_Transmit+0x398>)
 8005c4a:	4013      	ands	r3, r2
 8005c4c:	b29a      	uxth	r2, r3
 8005c4e:	697b      	ldr	r3, [r7, #20]
 8005c50:	801a      	strh	r2, [r3, #0]
 8005c52:	697b      	ldr	r3, [r7, #20]
 8005c54:	881b      	ldrh	r3, [r3, #0]
 8005c56:	b29b      	uxth	r3, r3
 8005c58:	4a93      	ldr	r2, [pc, #588]	; (8005ea8 <HAL_PCD_EP_DB_Transmit+0x39c>)
 8005c5a:	4313      	orrs	r3, r2
 8005c5c:	b29a      	uxth	r2, r3
 8005c5e:	697b      	ldr	r3, [r7, #20]
 8005c60:	801a      	strh	r2, [r3, #0]
 8005c62:	e018      	b.n	8005c96 <HAL_PCD_EP_DB_Transmit+0x18a>
 8005c64:	68bb      	ldr	r3, [r7, #8]
 8005c66:	785b      	ldrb	r3, [r3, #1]
 8005c68:	2b01      	cmp	r3, #1
 8005c6a:	d114      	bne.n	8005c96 <HAL_PCD_EP_DB_Transmit+0x18a>
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	2250      	movs	r2, #80	; 0x50
 8005c72:	5a9b      	ldrh	r3, [r3, r2]
 8005c74:	b29b      	uxth	r3, r3
 8005c76:	001a      	movs	r2, r3
 8005c78:	6a3b      	ldr	r3, [r7, #32]
 8005c7a:	189b      	adds	r3, r3, r2
 8005c7c:	623b      	str	r3, [r7, #32]
 8005c7e:	68bb      	ldr	r3, [r7, #8]
 8005c80:	781b      	ldrb	r3, [r3, #0]
 8005c82:	00da      	lsls	r2, r3, #3
 8005c84:	6a3b      	ldr	r3, [r7, #32]
 8005c86:	18d3      	adds	r3, r2, r3
 8005c88:	4a88      	ldr	r2, [pc, #544]	; (8005eac <HAL_PCD_EP_DB_Transmit+0x3a0>)
 8005c8a:	4694      	mov	ip, r2
 8005c8c:	4463      	add	r3, ip
 8005c8e:	61fb      	str	r3, [r7, #28]
 8005c90:	69fb      	ldr	r3, [r7, #28]
 8005c92:	2200      	movs	r2, #0
 8005c94:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8005c96:	68bb      	ldr	r3, [r7, #8]
 8005c98:	781a      	ldrb	r2, [r3, #0]
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	0011      	movs	r1, r2
 8005c9e:	0018      	movs	r0, r3
 8005ca0:	f007 fb02 	bl	800d2a8 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8005ca4:	1dbb      	adds	r3, r7, #6
 8005ca6:	881a      	ldrh	r2, [r3, #0]
 8005ca8:	2380      	movs	r3, #128	; 0x80
 8005caa:	01db      	lsls	r3, r3, #7
 8005cac:	4013      	ands	r3, r2
 8005cae:	d100      	bne.n	8005cb2 <HAL_PCD_EP_DB_Transmit+0x1a6>
 8005cb0:	e2d4      	b.n	800625c <HAL_PCD_EP_DB_Transmit+0x750>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	001a      	movs	r2, r3
 8005cb8:	68bb      	ldr	r3, [r7, #8]
 8005cba:	781b      	ldrb	r3, [r3, #0]
 8005cbc:	009b      	lsls	r3, r3, #2
 8005cbe:	18d3      	adds	r3, r2, r3
 8005cc0:	881b      	ldrh	r3, [r3, #0]
 8005cc2:	b29a      	uxth	r2, r3
 8005cc4:	2012      	movs	r0, #18
 8005cc6:	183b      	adds	r3, r7, r0
 8005cc8:	4979      	ldr	r1, [pc, #484]	; (8005eb0 <HAL_PCD_EP_DB_Transmit+0x3a4>)
 8005cca:	400a      	ands	r2, r1
 8005ccc:	801a      	strh	r2, [r3, #0]
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	001a      	movs	r2, r3
 8005cd4:	68bb      	ldr	r3, [r7, #8]
 8005cd6:	781b      	ldrb	r3, [r3, #0]
 8005cd8:	009b      	lsls	r3, r3, #2
 8005cda:	18d3      	adds	r3, r2, r3
 8005cdc:	183a      	adds	r2, r7, r0
 8005cde:	8812      	ldrh	r2, [r2, #0]
 8005ce0:	4974      	ldr	r1, [pc, #464]	; (8005eb4 <HAL_PCD_EP_DB_Transmit+0x3a8>)
 8005ce2:	430a      	orrs	r2, r1
 8005ce4:	b292      	uxth	r2, r2
 8005ce6:	801a      	strh	r2, [r3, #0]
 8005ce8:	e2b8      	b.n	800625c <HAL_PCD_EP_DB_Transmit+0x750>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8005cea:	1dbb      	adds	r3, r7, #6
 8005cec:	881a      	ldrh	r2, [r3, #0]
 8005cee:	2380      	movs	r3, #128	; 0x80
 8005cf0:	01db      	lsls	r3, r3, #7
 8005cf2:	4013      	ands	r3, r2
 8005cf4:	d01a      	beq.n	8005d2c <HAL_PCD_EP_DB_Transmit+0x220>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	001a      	movs	r2, r3
 8005cfc:	68bb      	ldr	r3, [r7, #8]
 8005cfe:	781b      	ldrb	r3, [r3, #0]
 8005d00:	009b      	lsls	r3, r3, #2
 8005d02:	18d3      	adds	r3, r2, r3
 8005d04:	881b      	ldrh	r3, [r3, #0]
 8005d06:	b29a      	uxth	r2, r3
 8005d08:	2044      	movs	r0, #68	; 0x44
 8005d0a:	183b      	adds	r3, r7, r0
 8005d0c:	4968      	ldr	r1, [pc, #416]	; (8005eb0 <HAL_PCD_EP_DB_Transmit+0x3a4>)
 8005d0e:	400a      	ands	r2, r1
 8005d10:	801a      	strh	r2, [r3, #0]
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	001a      	movs	r2, r3
 8005d18:	68bb      	ldr	r3, [r7, #8]
 8005d1a:	781b      	ldrb	r3, [r3, #0]
 8005d1c:	009b      	lsls	r3, r3, #2
 8005d1e:	18d3      	adds	r3, r2, r3
 8005d20:	183a      	adds	r2, r7, r0
 8005d22:	8812      	ldrh	r2, [r2, #0]
 8005d24:	4963      	ldr	r1, [pc, #396]	; (8005eb4 <HAL_PCD_EP_DB_Transmit+0x3a8>)
 8005d26:	430a      	orrs	r2, r1
 8005d28:	b292      	uxth	r2, r2
 8005d2a:	801a      	strh	r2, [r3, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8005d2c:	68bb      	ldr	r3, [r7, #8]
 8005d2e:	2224      	movs	r2, #36	; 0x24
 8005d30:	5c9b      	ldrb	r3, [r3, r2]
 8005d32:	2b01      	cmp	r3, #1
 8005d34:	d000      	beq.n	8005d38 <HAL_PCD_EP_DB_Transmit+0x22c>
 8005d36:	e291      	b.n	800625c <HAL_PCD_EP_DB_Transmit+0x750>
      {
        ep->xfer_buff += TxByteNbre;
 8005d38:	68bb      	ldr	r3, [r7, #8]
 8005d3a:	695a      	ldr	r2, [r3, #20]
 8005d3c:	214e      	movs	r1, #78	; 0x4e
 8005d3e:	187b      	adds	r3, r7, r1
 8005d40:	881b      	ldrh	r3, [r3, #0]
 8005d42:	18d2      	adds	r2, r2, r3
 8005d44:	68bb      	ldr	r3, [r7, #8]
 8005d46:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8005d48:	68bb      	ldr	r3, [r7, #8]
 8005d4a:	69da      	ldr	r2, [r3, #28]
 8005d4c:	187b      	adds	r3, r7, r1
 8005d4e:	881b      	ldrh	r3, [r3, #0]
 8005d50:	18d2      	adds	r2, r2, r3
 8005d52:	68bb      	ldr	r3, [r7, #8]
 8005d54:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8005d56:	68bb      	ldr	r3, [r7, #8]
 8005d58:	6a1a      	ldr	r2, [r3, #32]
 8005d5a:	68bb      	ldr	r3, [r7, #8]
 8005d5c:	691b      	ldr	r3, [r3, #16]
 8005d5e:	429a      	cmp	r2, r3
 8005d60:	d309      	bcc.n	8005d76 <HAL_PCD_EP_DB_Transmit+0x26a>
        {
          len = ep->maxpacket;
 8005d62:	68bb      	ldr	r3, [r7, #8]
 8005d64:	691b      	ldr	r3, [r3, #16]
 8005d66:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8005d68:	68bb      	ldr	r3, [r7, #8]
 8005d6a:	6a1a      	ldr	r2, [r3, #32]
 8005d6c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005d6e:	1ad2      	subs	r2, r2, r3
 8005d70:	68bb      	ldr	r3, [r7, #8]
 8005d72:	621a      	str	r2, [r3, #32]
 8005d74:	e016      	b.n	8005da4 <HAL_PCD_EP_DB_Transmit+0x298>
        }
        else if (ep->xfer_len_db == 0U)
 8005d76:	68bb      	ldr	r3, [r7, #8]
 8005d78:	6a1b      	ldr	r3, [r3, #32]
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d108      	bne.n	8005d90 <HAL_PCD_EP_DB_Transmit+0x284>
        {
          len = TxByteNbre;
 8005d7e:	234e      	movs	r3, #78	; 0x4e
 8005d80:	18fb      	adds	r3, r7, r3
 8005d82:	881b      	ldrh	r3, [r3, #0]
 8005d84:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8005d86:	68bb      	ldr	r3, [r7, #8]
 8005d88:	2224      	movs	r2, #36	; 0x24
 8005d8a:	2100      	movs	r1, #0
 8005d8c:	5499      	strb	r1, [r3, r2]
 8005d8e:	e009      	b.n	8005da4 <HAL_PCD_EP_DB_Transmit+0x298>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8005d90:	68bb      	ldr	r3, [r7, #8]
 8005d92:	2224      	movs	r2, #36	; 0x24
 8005d94:	2100      	movs	r1, #0
 8005d96:	5499      	strb	r1, [r3, r2]
          len = ep->xfer_len_db;
 8005d98:	68bb      	ldr	r3, [r7, #8]
 8005d9a:	6a1b      	ldr	r3, [r3, #32]
 8005d9c:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8005d9e:	68bb      	ldr	r3, [r7, #8]
 8005da0:	2200      	movs	r2, #0
 8005da2:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8005da4:	68bb      	ldr	r3, [r7, #8]
 8005da6:	785b      	ldrb	r3, [r3, #1]
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d150      	bne.n	8005e4e <HAL_PCD_EP_DB_Transmit+0x342>
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	63bb      	str	r3, [r7, #56]	; 0x38
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	2250      	movs	r2, #80	; 0x50
 8005db8:	5a9b      	ldrh	r3, [r3, r2]
 8005dba:	b29b      	uxth	r3, r3
 8005dbc:	001a      	movs	r2, r3
 8005dbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005dc0:	189b      	adds	r3, r3, r2
 8005dc2:	63bb      	str	r3, [r7, #56]	; 0x38
 8005dc4:	68bb      	ldr	r3, [r7, #8]
 8005dc6:	781b      	ldrb	r3, [r3, #0]
 8005dc8:	00da      	lsls	r2, r3, #3
 8005dca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005dcc:	18d3      	adds	r3, r2, r3
 8005dce:	4a34      	ldr	r2, [pc, #208]	; (8005ea0 <HAL_PCD_EP_DB_Transmit+0x394>)
 8005dd0:	4694      	mov	ip, r2
 8005dd2:	4463      	add	r3, ip
 8005dd4:	637b      	str	r3, [r7, #52]	; 0x34
 8005dd6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d110      	bne.n	8005dfe <HAL_PCD_EP_DB_Transmit+0x2f2>
 8005ddc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005dde:	881b      	ldrh	r3, [r3, #0]
 8005de0:	b29b      	uxth	r3, r3
 8005de2:	4a30      	ldr	r2, [pc, #192]	; (8005ea4 <HAL_PCD_EP_DB_Transmit+0x398>)
 8005de4:	4013      	ands	r3, r2
 8005de6:	b29a      	uxth	r2, r3
 8005de8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005dea:	801a      	strh	r2, [r3, #0]
 8005dec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005dee:	881b      	ldrh	r3, [r3, #0]
 8005df0:	b29b      	uxth	r3, r3
 8005df2:	4a2d      	ldr	r2, [pc, #180]	; (8005ea8 <HAL_PCD_EP_DB_Transmit+0x39c>)
 8005df4:	4313      	orrs	r3, r2
 8005df6:	b29a      	uxth	r2, r3
 8005df8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005dfa:	801a      	strh	r2, [r3, #0]
 8005dfc:	e044      	b.n	8005e88 <HAL_PCD_EP_DB_Transmit+0x37c>
 8005dfe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005e00:	2b3e      	cmp	r3, #62	; 0x3e
 8005e02:	d810      	bhi.n	8005e26 <HAL_PCD_EP_DB_Transmit+0x31a>
 8005e04:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005e06:	085b      	lsrs	r3, r3, #1
 8005e08:	64bb      	str	r3, [r7, #72]	; 0x48
 8005e0a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005e0c:	2201      	movs	r2, #1
 8005e0e:	4013      	ands	r3, r2
 8005e10:	d002      	beq.n	8005e18 <HAL_PCD_EP_DB_Transmit+0x30c>
 8005e12:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005e14:	3301      	adds	r3, #1
 8005e16:	64bb      	str	r3, [r7, #72]	; 0x48
 8005e18:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005e1a:	b29b      	uxth	r3, r3
 8005e1c:	029b      	lsls	r3, r3, #10
 8005e1e:	b29a      	uxth	r2, r3
 8005e20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e22:	801a      	strh	r2, [r3, #0]
 8005e24:	e030      	b.n	8005e88 <HAL_PCD_EP_DB_Transmit+0x37c>
 8005e26:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005e28:	095b      	lsrs	r3, r3, #5
 8005e2a:	64bb      	str	r3, [r7, #72]	; 0x48
 8005e2c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005e2e:	221f      	movs	r2, #31
 8005e30:	4013      	ands	r3, r2
 8005e32:	d102      	bne.n	8005e3a <HAL_PCD_EP_DB_Transmit+0x32e>
 8005e34:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005e36:	3b01      	subs	r3, #1
 8005e38:	64bb      	str	r3, [r7, #72]	; 0x48
 8005e3a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005e3c:	b29b      	uxth	r3, r3
 8005e3e:	029b      	lsls	r3, r3, #10
 8005e40:	b29b      	uxth	r3, r3
 8005e42:	4a19      	ldr	r2, [pc, #100]	; (8005ea8 <HAL_PCD_EP_DB_Transmit+0x39c>)
 8005e44:	4313      	orrs	r3, r2
 8005e46:	b29a      	uxth	r2, r3
 8005e48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e4a:	801a      	strh	r2, [r3, #0]
 8005e4c:	e01c      	b.n	8005e88 <HAL_PCD_EP_DB_Transmit+0x37c>
 8005e4e:	68bb      	ldr	r3, [r7, #8]
 8005e50:	785b      	ldrb	r3, [r3, #1]
 8005e52:	2b01      	cmp	r3, #1
 8005e54:	d118      	bne.n	8005e88 <HAL_PCD_EP_DB_Transmit+0x37c>
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	643b      	str	r3, [r7, #64]	; 0x40
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	2250      	movs	r2, #80	; 0x50
 8005e62:	5a9b      	ldrh	r3, [r3, r2]
 8005e64:	b29b      	uxth	r3, r3
 8005e66:	001a      	movs	r2, r3
 8005e68:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005e6a:	189b      	adds	r3, r3, r2
 8005e6c:	643b      	str	r3, [r7, #64]	; 0x40
 8005e6e:	68bb      	ldr	r3, [r7, #8]
 8005e70:	781b      	ldrb	r3, [r3, #0]
 8005e72:	00da      	lsls	r2, r3, #3
 8005e74:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005e76:	18d3      	adds	r3, r2, r3
 8005e78:	4a09      	ldr	r2, [pc, #36]	; (8005ea0 <HAL_PCD_EP_DB_Transmit+0x394>)
 8005e7a:	4694      	mov	ip, r2
 8005e7c:	4463      	add	r3, ip
 8005e7e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005e80:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005e82:	b29a      	uxth	r2, r3
 8005e84:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005e86:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	6818      	ldr	r0, [r3, #0]
 8005e8c:	68bb      	ldr	r3, [r7, #8]
 8005e8e:	6959      	ldr	r1, [r3, #20]
 8005e90:	68bb      	ldr	r3, [r7, #8]
 8005e92:	891a      	ldrh	r2, [r3, #8]
 8005e94:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005e96:	b29b      	uxth	r3, r3
 8005e98:	f005 f9be 	bl	800b218 <USB_WritePMA>
 8005e9c:	e1de      	b.n	800625c <HAL_PCD_EP_DB_Transmit+0x750>
 8005e9e:	46c0      	nop			; (mov r8, r8)
 8005ea0:	00000402 	.word	0x00000402
 8005ea4:	ffff83ff 	.word	0xffff83ff
 8005ea8:	ffff8000 	.word	0xffff8000
 8005eac:	00000406 	.word	0x00000406
 8005eb0:	ffff8f8f 	.word	0xffff8f8f
 8005eb4:	ffffc080 	.word	0xffffc080
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	2250      	movs	r2, #80	; 0x50
 8005ebe:	5a9b      	ldrh	r3, [r3, r2]
 8005ec0:	b29b      	uxth	r3, r3
 8005ec2:	001a      	movs	r2, r3
 8005ec4:	68bb      	ldr	r3, [r7, #8]
 8005ec6:	781b      	ldrb	r3, [r3, #0]
 8005ec8:	00db      	lsls	r3, r3, #3
 8005eca:	18d2      	adds	r2, r2, r3
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	18d3      	adds	r3, r2, r3
 8005ed2:	4aca      	ldr	r2, [pc, #808]	; (80061fc <HAL_PCD_EP_DB_Transmit+0x6f0>)
 8005ed4:	4694      	mov	ip, r2
 8005ed6:	4463      	add	r3, ip
 8005ed8:	881a      	ldrh	r2, [r3, #0]
 8005eda:	214e      	movs	r1, #78	; 0x4e
 8005edc:	187b      	adds	r3, r7, r1
 8005ede:	0592      	lsls	r2, r2, #22
 8005ee0:	0d92      	lsrs	r2, r2, #22
 8005ee2:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= TxByteNbre)
 8005ee4:	68bb      	ldr	r3, [r7, #8]
 8005ee6:	699a      	ldr	r2, [r3, #24]
 8005ee8:	187b      	adds	r3, r7, r1
 8005eea:	881b      	ldrh	r3, [r3, #0]
 8005eec:	429a      	cmp	r2, r3
 8005eee:	d307      	bcc.n	8005f00 <HAL_PCD_EP_DB_Transmit+0x3f4>
    {
      ep->xfer_len -= TxByteNbre;
 8005ef0:	68bb      	ldr	r3, [r7, #8]
 8005ef2:	699a      	ldr	r2, [r3, #24]
 8005ef4:	187b      	adds	r3, r7, r1
 8005ef6:	881b      	ldrh	r3, [r3, #0]
 8005ef8:	1ad2      	subs	r2, r2, r3
 8005efa:	68bb      	ldr	r3, [r7, #8]
 8005efc:	619a      	str	r2, [r3, #24]
 8005efe:	e002      	b.n	8005f06 <HAL_PCD_EP_DB_Transmit+0x3fa>
    }
    else
    {
      ep->xfer_len = 0U;
 8005f00:	68bb      	ldr	r3, [r7, #8]
 8005f02:	2200      	movs	r2, #0
 8005f04:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8005f06:	68bb      	ldr	r3, [r7, #8]
 8005f08:	699b      	ldr	r3, [r3, #24]
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d000      	beq.n	8005f10 <HAL_PCD_EP_DB_Transmit+0x404>
 8005f0e:	e0c0      	b.n	8006092 <HAL_PCD_EP_DB_Transmit+0x586>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005f10:	68bb      	ldr	r3, [r7, #8]
 8005f12:	785b      	ldrb	r3, [r3, #1]
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d125      	bne.n	8005f64 <HAL_PCD_EP_DB_Transmit+0x458>
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	2250      	movs	r2, #80	; 0x50
 8005f24:	5a9b      	ldrh	r3, [r3, r2]
 8005f26:	b29b      	uxth	r3, r3
 8005f28:	001a      	movs	r2, r3
 8005f2a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f2c:	189b      	adds	r3, r3, r2
 8005f2e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005f30:	68bb      	ldr	r3, [r7, #8]
 8005f32:	781b      	ldrb	r3, [r3, #0]
 8005f34:	00da      	lsls	r2, r3, #3
 8005f36:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f38:	18d3      	adds	r3, r2, r3
 8005f3a:	4ab1      	ldr	r2, [pc, #708]	; (8006200 <HAL_PCD_EP_DB_Transmit+0x6f4>)
 8005f3c:	4694      	mov	ip, r2
 8005f3e:	4463      	add	r3, ip
 8005f40:	66bb      	str	r3, [r7, #104]	; 0x68
 8005f42:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005f44:	881b      	ldrh	r3, [r3, #0]
 8005f46:	b29b      	uxth	r3, r3
 8005f48:	4aae      	ldr	r2, [pc, #696]	; (8006204 <HAL_PCD_EP_DB_Transmit+0x6f8>)
 8005f4a:	4013      	ands	r3, r2
 8005f4c:	b29a      	uxth	r2, r3
 8005f4e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005f50:	801a      	strh	r2, [r3, #0]
 8005f52:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005f54:	881b      	ldrh	r3, [r3, #0]
 8005f56:	b29b      	uxth	r3, r3
 8005f58:	4aab      	ldr	r2, [pc, #684]	; (8006208 <HAL_PCD_EP_DB_Transmit+0x6fc>)
 8005f5a:	4313      	orrs	r3, r2
 8005f5c:	b29a      	uxth	r2, r3
 8005f5e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005f60:	801a      	strh	r2, [r3, #0]
 8005f62:	e01b      	b.n	8005f9c <HAL_PCD_EP_DB_Transmit+0x490>
 8005f64:	68bb      	ldr	r3, [r7, #8]
 8005f66:	785b      	ldrb	r3, [r3, #1]
 8005f68:	2b01      	cmp	r3, #1
 8005f6a:	d117      	bne.n	8005f9c <HAL_PCD_EP_DB_Transmit+0x490>
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	677b      	str	r3, [r7, #116]	; 0x74
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	2250      	movs	r2, #80	; 0x50
 8005f78:	5a9b      	ldrh	r3, [r3, r2]
 8005f7a:	b29b      	uxth	r3, r3
 8005f7c:	001a      	movs	r2, r3
 8005f7e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005f80:	189b      	adds	r3, r3, r2
 8005f82:	677b      	str	r3, [r7, #116]	; 0x74
 8005f84:	68bb      	ldr	r3, [r7, #8]
 8005f86:	781b      	ldrb	r3, [r3, #0]
 8005f88:	00da      	lsls	r2, r3, #3
 8005f8a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005f8c:	18d3      	adds	r3, r2, r3
 8005f8e:	4a9c      	ldr	r2, [pc, #624]	; (8006200 <HAL_PCD_EP_DB_Transmit+0x6f4>)
 8005f90:	4694      	mov	ip, r2
 8005f92:	4463      	add	r3, ip
 8005f94:	673b      	str	r3, [r7, #112]	; 0x70
 8005f96:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005f98:	2200      	movs	r2, #0
 8005f9a:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	67bb      	str	r3, [r7, #120]	; 0x78
 8005fa2:	68bb      	ldr	r3, [r7, #8]
 8005fa4:	785b      	ldrb	r3, [r3, #1]
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d130      	bne.n	800600c <HAL_PCD_EP_DB_Transmit+0x500>
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	2180      	movs	r1, #128	; 0x80
 8005fb0:	187a      	adds	r2, r7, r1
 8005fb2:	6013      	str	r3, [r2, #0]
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	2250      	movs	r2, #80	; 0x50
 8005fba:	5a9b      	ldrh	r3, [r3, r2]
 8005fbc:	b29b      	uxth	r3, r3
 8005fbe:	001a      	movs	r2, r3
 8005fc0:	187b      	adds	r3, r7, r1
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	189b      	adds	r3, r3, r2
 8005fc6:	187a      	adds	r2, r7, r1
 8005fc8:	6013      	str	r3, [r2, #0]
 8005fca:	68bb      	ldr	r3, [r7, #8]
 8005fcc:	781b      	ldrb	r3, [r3, #0]
 8005fce:	00da      	lsls	r2, r3, #3
 8005fd0:	187b      	adds	r3, r7, r1
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	18d3      	adds	r3, r2, r3
 8005fd6:	4a89      	ldr	r2, [pc, #548]	; (80061fc <HAL_PCD_EP_DB_Transmit+0x6f0>)
 8005fd8:	4694      	mov	ip, r2
 8005fda:	4463      	add	r3, ip
 8005fdc:	2184      	movs	r1, #132	; 0x84
 8005fde:	187a      	adds	r2, r7, r1
 8005fe0:	6013      	str	r3, [r2, #0]
 8005fe2:	187b      	adds	r3, r7, r1
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	881b      	ldrh	r3, [r3, #0]
 8005fe8:	b29b      	uxth	r3, r3
 8005fea:	4a86      	ldr	r2, [pc, #536]	; (8006204 <HAL_PCD_EP_DB_Transmit+0x6f8>)
 8005fec:	4013      	ands	r3, r2
 8005fee:	b29a      	uxth	r2, r3
 8005ff0:	187b      	adds	r3, r7, r1
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	801a      	strh	r2, [r3, #0]
 8005ff6:	187b      	adds	r3, r7, r1
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	881b      	ldrh	r3, [r3, #0]
 8005ffc:	b29b      	uxth	r3, r3
 8005ffe:	4a82      	ldr	r2, [pc, #520]	; (8006208 <HAL_PCD_EP_DB_Transmit+0x6fc>)
 8006000:	4313      	orrs	r3, r2
 8006002:	b29a      	uxth	r2, r3
 8006004:	187b      	adds	r3, r7, r1
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	801a      	strh	r2, [r3, #0]
 800600a:	e018      	b.n	800603e <HAL_PCD_EP_DB_Transmit+0x532>
 800600c:	68bb      	ldr	r3, [r7, #8]
 800600e:	785b      	ldrb	r3, [r3, #1]
 8006010:	2b01      	cmp	r3, #1
 8006012:	d114      	bne.n	800603e <HAL_PCD_EP_DB_Transmit+0x532>
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	2250      	movs	r2, #80	; 0x50
 800601a:	5a9b      	ldrh	r3, [r3, r2]
 800601c:	b29b      	uxth	r3, r3
 800601e:	001a      	movs	r2, r3
 8006020:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006022:	189b      	adds	r3, r3, r2
 8006024:	67bb      	str	r3, [r7, #120]	; 0x78
 8006026:	68bb      	ldr	r3, [r7, #8]
 8006028:	781b      	ldrb	r3, [r3, #0]
 800602a:	00da      	lsls	r2, r3, #3
 800602c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800602e:	18d3      	adds	r3, r2, r3
 8006030:	4a72      	ldr	r2, [pc, #456]	; (80061fc <HAL_PCD_EP_DB_Transmit+0x6f0>)
 8006032:	4694      	mov	ip, r2
 8006034:	4463      	add	r3, ip
 8006036:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006038:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800603a:	2200      	movs	r2, #0
 800603c:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800603e:	68bb      	ldr	r3, [r7, #8]
 8006040:	781a      	ldrb	r2, [r3, #0]
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	0011      	movs	r1, r2
 8006046:	0018      	movs	r0, r3
 8006048:	f007 f92e 	bl	800d2a8 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800604c:	1dbb      	adds	r3, r7, #6
 800604e:	881a      	ldrh	r2, [r3, #0]
 8006050:	2380      	movs	r3, #128	; 0x80
 8006052:	01db      	lsls	r3, r3, #7
 8006054:	4013      	ands	r3, r2
 8006056:	d000      	beq.n	800605a <HAL_PCD_EP_DB_Transmit+0x54e>
 8006058:	e100      	b.n	800625c <HAL_PCD_EP_DB_Transmit+0x750>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	001a      	movs	r2, r3
 8006060:	68bb      	ldr	r3, [r7, #8]
 8006062:	781b      	ldrb	r3, [r3, #0]
 8006064:	009b      	lsls	r3, r3, #2
 8006066:	18d3      	adds	r3, r2, r3
 8006068:	881b      	ldrh	r3, [r3, #0]
 800606a:	b29a      	uxth	r2, r3
 800606c:	2046      	movs	r0, #70	; 0x46
 800606e:	183b      	adds	r3, r7, r0
 8006070:	4966      	ldr	r1, [pc, #408]	; (800620c <HAL_PCD_EP_DB_Transmit+0x700>)
 8006072:	400a      	ands	r2, r1
 8006074:	801a      	strh	r2, [r3, #0]
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	001a      	movs	r2, r3
 800607c:	68bb      	ldr	r3, [r7, #8]
 800607e:	781b      	ldrb	r3, [r3, #0]
 8006080:	009b      	lsls	r3, r3, #2
 8006082:	18d3      	adds	r3, r2, r3
 8006084:	183a      	adds	r2, r7, r0
 8006086:	8812      	ldrh	r2, [r2, #0]
 8006088:	4961      	ldr	r1, [pc, #388]	; (8006210 <HAL_PCD_EP_DB_Transmit+0x704>)
 800608a:	430a      	orrs	r2, r1
 800608c:	b292      	uxth	r2, r2
 800608e:	801a      	strh	r2, [r3, #0]
 8006090:	e0e4      	b.n	800625c <HAL_PCD_EP_DB_Transmit+0x750>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8006092:	1dbb      	adds	r3, r7, #6
 8006094:	881a      	ldrh	r2, [r3, #0]
 8006096:	2380      	movs	r3, #128	; 0x80
 8006098:	01db      	lsls	r3, r3, #7
 800609a:	4013      	ands	r3, r2
 800609c:	d11a      	bne.n	80060d4 <HAL_PCD_EP_DB_Transmit+0x5c8>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	001a      	movs	r2, r3
 80060a4:	68bb      	ldr	r3, [r7, #8]
 80060a6:	781b      	ldrb	r3, [r3, #0]
 80060a8:	009b      	lsls	r3, r3, #2
 80060aa:	18d3      	adds	r3, r2, r3
 80060ac:	881b      	ldrh	r3, [r3, #0]
 80060ae:	b29a      	uxth	r2, r3
 80060b0:	204c      	movs	r0, #76	; 0x4c
 80060b2:	183b      	adds	r3, r7, r0
 80060b4:	4955      	ldr	r1, [pc, #340]	; (800620c <HAL_PCD_EP_DB_Transmit+0x700>)
 80060b6:	400a      	ands	r2, r1
 80060b8:	801a      	strh	r2, [r3, #0]
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	001a      	movs	r2, r3
 80060c0:	68bb      	ldr	r3, [r7, #8]
 80060c2:	781b      	ldrb	r3, [r3, #0]
 80060c4:	009b      	lsls	r3, r3, #2
 80060c6:	18d3      	adds	r3, r2, r3
 80060c8:	183a      	adds	r2, r7, r0
 80060ca:	8812      	ldrh	r2, [r2, #0]
 80060cc:	4950      	ldr	r1, [pc, #320]	; (8006210 <HAL_PCD_EP_DB_Transmit+0x704>)
 80060ce:	430a      	orrs	r2, r1
 80060d0:	b292      	uxth	r2, r2
 80060d2:	801a      	strh	r2, [r3, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80060d4:	68bb      	ldr	r3, [r7, #8]
 80060d6:	2224      	movs	r2, #36	; 0x24
 80060d8:	5c9b      	ldrb	r3, [r3, r2]
 80060da:	2b01      	cmp	r3, #1
 80060dc:	d000      	beq.n	80060e0 <HAL_PCD_EP_DB_Transmit+0x5d4>
 80060de:	e0bd      	b.n	800625c <HAL_PCD_EP_DB_Transmit+0x750>
      {
        ep->xfer_buff += TxByteNbre;
 80060e0:	68bb      	ldr	r3, [r7, #8]
 80060e2:	695a      	ldr	r2, [r3, #20]
 80060e4:	214e      	movs	r1, #78	; 0x4e
 80060e6:	187b      	adds	r3, r7, r1
 80060e8:	881b      	ldrh	r3, [r3, #0]
 80060ea:	18d2      	adds	r2, r2, r3
 80060ec:	68bb      	ldr	r3, [r7, #8]
 80060ee:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 80060f0:	68bb      	ldr	r3, [r7, #8]
 80060f2:	69da      	ldr	r2, [r3, #28]
 80060f4:	187b      	adds	r3, r7, r1
 80060f6:	881b      	ldrh	r3, [r3, #0]
 80060f8:	18d2      	adds	r2, r2, r3
 80060fa:	68bb      	ldr	r3, [r7, #8]
 80060fc:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80060fe:	68bb      	ldr	r3, [r7, #8]
 8006100:	6a1a      	ldr	r2, [r3, #32]
 8006102:	68bb      	ldr	r3, [r7, #8]
 8006104:	691b      	ldr	r3, [r3, #16]
 8006106:	429a      	cmp	r2, r3
 8006108:	d309      	bcc.n	800611e <HAL_PCD_EP_DB_Transmit+0x612>
        {
          len = ep->maxpacket;
 800610a:	68bb      	ldr	r3, [r7, #8]
 800610c:	691b      	ldr	r3, [r3, #16]
 800610e:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8006110:	68bb      	ldr	r3, [r7, #8]
 8006112:	6a1a      	ldr	r2, [r3, #32]
 8006114:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006116:	1ad2      	subs	r2, r2, r3
 8006118:	68bb      	ldr	r3, [r7, #8]
 800611a:	621a      	str	r2, [r3, #32]
 800611c:	e016      	b.n	800614c <HAL_PCD_EP_DB_Transmit+0x640>
        }
        else if (ep->xfer_len_db == 0U)
 800611e:	68bb      	ldr	r3, [r7, #8]
 8006120:	6a1b      	ldr	r3, [r3, #32]
 8006122:	2b00      	cmp	r3, #0
 8006124:	d108      	bne.n	8006138 <HAL_PCD_EP_DB_Transmit+0x62c>
        {
          len = TxByteNbre;
 8006126:	234e      	movs	r3, #78	; 0x4e
 8006128:	18fb      	adds	r3, r7, r3
 800612a:	881b      	ldrh	r3, [r3, #0]
 800612c:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 800612e:	68bb      	ldr	r3, [r7, #8]
 8006130:	2224      	movs	r2, #36	; 0x24
 8006132:	2100      	movs	r1, #0
 8006134:	5499      	strb	r1, [r3, r2]
 8006136:	e009      	b.n	800614c <HAL_PCD_EP_DB_Transmit+0x640>
        }
        else
        {
          len = ep->xfer_len_db;
 8006138:	68bb      	ldr	r3, [r7, #8]
 800613a:	6a1b      	ldr	r3, [r3, #32]
 800613c:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 800613e:	68bb      	ldr	r3, [r7, #8]
 8006140:	2200      	movs	r2, #0
 8006142:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8006144:	68bb      	ldr	r3, [r7, #8]
 8006146:	2224      	movs	r2, #36	; 0x24
 8006148:	2100      	movs	r1, #0
 800614a:	5499      	strb	r1, [r3, r2]
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	667b      	str	r3, [r7, #100]	; 0x64
 8006152:	68bb      	ldr	r3, [r7, #8]
 8006154:	785b      	ldrb	r3, [r3, #1]
 8006156:	2b00      	cmp	r3, #0
 8006158:	d15c      	bne.n	8006214 <HAL_PCD_EP_DB_Transmit+0x708>
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	2250      	movs	r2, #80	; 0x50
 8006166:	5a9b      	ldrh	r3, [r3, r2]
 8006168:	b29b      	uxth	r3, r3
 800616a:	001a      	movs	r2, r3
 800616c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800616e:	189b      	adds	r3, r3, r2
 8006170:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006172:	68bb      	ldr	r3, [r7, #8]
 8006174:	781b      	ldrb	r3, [r3, #0]
 8006176:	00da      	lsls	r2, r3, #3
 8006178:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800617a:	18d3      	adds	r3, r2, r3
 800617c:	4a1f      	ldr	r2, [pc, #124]	; (80061fc <HAL_PCD_EP_DB_Transmit+0x6f0>)
 800617e:	4694      	mov	ip, r2
 8006180:	4463      	add	r3, ip
 8006182:	65bb      	str	r3, [r7, #88]	; 0x58
 8006184:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006186:	2b00      	cmp	r3, #0
 8006188:	d110      	bne.n	80061ac <HAL_PCD_EP_DB_Transmit+0x6a0>
 800618a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800618c:	881b      	ldrh	r3, [r3, #0]
 800618e:	b29b      	uxth	r3, r3
 8006190:	4a1c      	ldr	r2, [pc, #112]	; (8006204 <HAL_PCD_EP_DB_Transmit+0x6f8>)
 8006192:	4013      	ands	r3, r2
 8006194:	b29a      	uxth	r2, r3
 8006196:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006198:	801a      	strh	r2, [r3, #0]
 800619a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800619c:	881b      	ldrh	r3, [r3, #0]
 800619e:	b29b      	uxth	r3, r3
 80061a0:	4a19      	ldr	r2, [pc, #100]	; (8006208 <HAL_PCD_EP_DB_Transmit+0x6fc>)
 80061a2:	4313      	orrs	r3, r2
 80061a4:	b29a      	uxth	r2, r3
 80061a6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80061a8:	801a      	strh	r2, [r3, #0]
 80061aa:	e04d      	b.n	8006248 <HAL_PCD_EP_DB_Transmit+0x73c>
 80061ac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80061ae:	2b3e      	cmp	r3, #62	; 0x3e
 80061b0:	d810      	bhi.n	80061d4 <HAL_PCD_EP_DB_Transmit+0x6c8>
 80061b2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80061b4:	085b      	lsrs	r3, r3, #1
 80061b6:	657b      	str	r3, [r7, #84]	; 0x54
 80061b8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80061ba:	2201      	movs	r2, #1
 80061bc:	4013      	ands	r3, r2
 80061be:	d002      	beq.n	80061c6 <HAL_PCD_EP_DB_Transmit+0x6ba>
 80061c0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80061c2:	3301      	adds	r3, #1
 80061c4:	657b      	str	r3, [r7, #84]	; 0x54
 80061c6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80061c8:	b29b      	uxth	r3, r3
 80061ca:	029b      	lsls	r3, r3, #10
 80061cc:	b29a      	uxth	r2, r3
 80061ce:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80061d0:	801a      	strh	r2, [r3, #0]
 80061d2:	e039      	b.n	8006248 <HAL_PCD_EP_DB_Transmit+0x73c>
 80061d4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80061d6:	095b      	lsrs	r3, r3, #5
 80061d8:	657b      	str	r3, [r7, #84]	; 0x54
 80061da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80061dc:	221f      	movs	r2, #31
 80061de:	4013      	ands	r3, r2
 80061e0:	d102      	bne.n	80061e8 <HAL_PCD_EP_DB_Transmit+0x6dc>
 80061e2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80061e4:	3b01      	subs	r3, #1
 80061e6:	657b      	str	r3, [r7, #84]	; 0x54
 80061e8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80061ea:	b29b      	uxth	r3, r3
 80061ec:	029b      	lsls	r3, r3, #10
 80061ee:	b29b      	uxth	r3, r3
 80061f0:	4a05      	ldr	r2, [pc, #20]	; (8006208 <HAL_PCD_EP_DB_Transmit+0x6fc>)
 80061f2:	4313      	orrs	r3, r2
 80061f4:	b29a      	uxth	r2, r3
 80061f6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80061f8:	801a      	strh	r2, [r3, #0]
 80061fa:	e025      	b.n	8006248 <HAL_PCD_EP_DB_Transmit+0x73c>
 80061fc:	00000406 	.word	0x00000406
 8006200:	00000402 	.word	0x00000402
 8006204:	ffff83ff 	.word	0xffff83ff
 8006208:	ffff8000 	.word	0xffff8000
 800620c:	ffff8f8f 	.word	0xffff8f8f
 8006210:	ffffc080 	.word	0xffffc080
 8006214:	68bb      	ldr	r3, [r7, #8]
 8006216:	785b      	ldrb	r3, [r3, #1]
 8006218:	2b01      	cmp	r3, #1
 800621a:	d115      	bne.n	8006248 <HAL_PCD_EP_DB_Transmit+0x73c>
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	2250      	movs	r2, #80	; 0x50
 8006222:	5a9b      	ldrh	r3, [r3, r2]
 8006224:	b29b      	uxth	r3, r3
 8006226:	001a      	movs	r2, r3
 8006228:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800622a:	189b      	adds	r3, r3, r2
 800622c:	667b      	str	r3, [r7, #100]	; 0x64
 800622e:	68bb      	ldr	r3, [r7, #8]
 8006230:	781b      	ldrb	r3, [r3, #0]
 8006232:	00da      	lsls	r2, r3, #3
 8006234:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006236:	18d3      	adds	r3, r2, r3
 8006238:	4a1e      	ldr	r2, [pc, #120]	; (80062b4 <HAL_PCD_EP_DB_Transmit+0x7a8>)
 800623a:	4694      	mov	ip, r2
 800623c:	4463      	add	r3, ip
 800623e:	663b      	str	r3, [r7, #96]	; 0x60
 8006240:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006242:	b29a      	uxth	r2, r3
 8006244:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006246:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	6818      	ldr	r0, [r3, #0]
 800624c:	68bb      	ldr	r3, [r7, #8]
 800624e:	6959      	ldr	r1, [r3, #20]
 8006250:	68bb      	ldr	r3, [r7, #8]
 8006252:	895a      	ldrh	r2, [r3, #10]
 8006254:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006256:	b29b      	uxth	r3, r3
 8006258:	f004 ffde 	bl	800b218 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	001a      	movs	r2, r3
 8006262:	68bb      	ldr	r3, [r7, #8]
 8006264:	781b      	ldrb	r3, [r3, #0]
 8006266:	009b      	lsls	r3, r3, #2
 8006268:	18d3      	adds	r3, r2, r3
 800626a:	881b      	ldrh	r3, [r3, #0]
 800626c:	b29a      	uxth	r2, r3
 800626e:	2010      	movs	r0, #16
 8006270:	183b      	adds	r3, r7, r0
 8006272:	4911      	ldr	r1, [pc, #68]	; (80062b8 <HAL_PCD_EP_DB_Transmit+0x7ac>)
 8006274:	400a      	ands	r2, r1
 8006276:	801a      	strh	r2, [r3, #0]
 8006278:	183b      	adds	r3, r7, r0
 800627a:	183a      	adds	r2, r7, r0
 800627c:	8812      	ldrh	r2, [r2, #0]
 800627e:	2110      	movs	r1, #16
 8006280:	404a      	eors	r2, r1
 8006282:	801a      	strh	r2, [r3, #0]
 8006284:	183b      	adds	r3, r7, r0
 8006286:	183a      	adds	r2, r7, r0
 8006288:	8812      	ldrh	r2, [r2, #0]
 800628a:	2120      	movs	r1, #32
 800628c:	404a      	eors	r2, r1
 800628e:	801a      	strh	r2, [r3, #0]
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	001a      	movs	r2, r3
 8006296:	68bb      	ldr	r3, [r7, #8]
 8006298:	781b      	ldrb	r3, [r3, #0]
 800629a:	009b      	lsls	r3, r3, #2
 800629c:	18d3      	adds	r3, r2, r3
 800629e:	183a      	adds	r2, r7, r0
 80062a0:	8812      	ldrh	r2, [r2, #0]
 80062a2:	4906      	ldr	r1, [pc, #24]	; (80062bc <HAL_PCD_EP_DB_Transmit+0x7b0>)
 80062a4:	430a      	orrs	r2, r1
 80062a6:	b292      	uxth	r2, r2
 80062a8:	801a      	strh	r2, [r3, #0]

  return HAL_OK;
 80062aa:	2300      	movs	r3, #0
}
 80062ac:	0018      	movs	r0, r3
 80062ae:	46bd      	mov	sp, r7
 80062b0:	b022      	add	sp, #136	; 0x88
 80062b2:	bd80      	pop	{r7, pc}
 80062b4:	00000406 	.word	0x00000406
 80062b8:	ffff8fbf 	.word	0xffff8fbf
 80062bc:	ffff8080 	.word	0xffff8080

080062c0 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 80062c0:	b590      	push	{r4, r7, lr}
 80062c2:	b087      	sub	sp, #28
 80062c4:	af00      	add	r7, sp, #0
 80062c6:	60f8      	str	r0, [r7, #12]
 80062c8:	0008      	movs	r0, r1
 80062ca:	0011      	movs	r1, r2
 80062cc:	607b      	str	r3, [r7, #4]
 80062ce:	240a      	movs	r4, #10
 80062d0:	193b      	adds	r3, r7, r4
 80062d2:	1c02      	adds	r2, r0, #0
 80062d4:	801a      	strh	r2, [r3, #0]
 80062d6:	2308      	movs	r3, #8
 80062d8:	18fb      	adds	r3, r7, r3
 80062da:	1c0a      	adds	r2, r1, #0
 80062dc:	801a      	strh	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 80062de:	0021      	movs	r1, r4
 80062e0:	187b      	adds	r3, r7, r1
 80062e2:	881b      	ldrh	r3, [r3, #0]
 80062e4:	2280      	movs	r2, #128	; 0x80
 80062e6:	4013      	ands	r3, r2
 80062e8:	b29b      	uxth	r3, r3
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d00c      	beq.n	8006308 <HAL_PCDEx_PMAConfig+0x48>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80062ee:	187b      	adds	r3, r7, r1
 80062f0:	881b      	ldrh	r3, [r3, #0]
 80062f2:	2207      	movs	r2, #7
 80062f4:	4013      	ands	r3, r2
 80062f6:	1c5a      	adds	r2, r3, #1
 80062f8:	0013      	movs	r3, r2
 80062fa:	009b      	lsls	r3, r3, #2
 80062fc:	189b      	adds	r3, r3, r2
 80062fe:	00db      	lsls	r3, r3, #3
 8006300:	68fa      	ldr	r2, [r7, #12]
 8006302:	18d3      	adds	r3, r2, r3
 8006304:	617b      	str	r3, [r7, #20]
 8006306:	e00b      	b.n	8006320 <HAL_PCDEx_PMAConfig+0x60>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8006308:	230a      	movs	r3, #10
 800630a:	18fb      	adds	r3, r7, r3
 800630c:	881a      	ldrh	r2, [r3, #0]
 800630e:	0013      	movs	r3, r2
 8006310:	009b      	lsls	r3, r3, #2
 8006312:	189b      	adds	r3, r3, r2
 8006314:	00db      	lsls	r3, r3, #3
 8006316:	3369      	adds	r3, #105	; 0x69
 8006318:	33ff      	adds	r3, #255	; 0xff
 800631a:	68fa      	ldr	r2, [r7, #12]
 800631c:	18d3      	adds	r3, r2, r3
 800631e:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8006320:	2308      	movs	r3, #8
 8006322:	18fb      	adds	r3, r7, r3
 8006324:	881b      	ldrh	r3, [r3, #0]
 8006326:	2b00      	cmp	r3, #0
 8006328:	d107      	bne.n	800633a <HAL_PCDEx_PMAConfig+0x7a>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 800632a:	697b      	ldr	r3, [r7, #20]
 800632c:	2200      	movs	r2, #0
 800632e:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	b29a      	uxth	r2, r3
 8006334:	697b      	ldr	r3, [r7, #20]
 8006336:	80da      	strh	r2, [r3, #6]
 8006338:	e00b      	b.n	8006352 <HAL_PCDEx_PMAConfig+0x92>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 800633a:	697b      	ldr	r3, [r7, #20]
 800633c:	2201      	movs	r2, #1
 800633e:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	b29a      	uxth	r2, r3
 8006344:	697b      	ldr	r3, [r7, #20]
 8006346:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	0c1b      	lsrs	r3, r3, #16
 800634c:	b29a      	uxth	r2, r3
 800634e:	697b      	ldr	r3, [r7, #20]
 8006350:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8006352:	2300      	movs	r3, #0
}
 8006354:	0018      	movs	r0, r3
 8006356:	46bd      	mov	sp, r7
 8006358:	b007      	add	sp, #28
 800635a:	bd90      	pop	{r4, r7, pc}

0800635c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800635c:	b580      	push	{r7, lr}
 800635e:	b084      	sub	sp, #16
 8006360:	af00      	add	r7, sp, #0
 8006362:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 800636a:	687a      	ldr	r2, [r7, #4]
 800636c:	23ba      	movs	r3, #186	; 0xba
 800636e:	009b      	lsls	r3, r3, #2
 8006370:	2101      	movs	r1, #1
 8006372:	50d1      	str	r1, [r2, r3]
  hpcd->LPM_State = LPM_L0;
 8006374:	687a      	ldr	r2, [r7, #4]
 8006376:	23b8      	movs	r3, #184	; 0xb8
 8006378:	009b      	lsls	r3, r3, #2
 800637a:	2100      	movs	r1, #0
 800637c:	54d1      	strb	r1, [r2, r3]

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	2254      	movs	r2, #84	; 0x54
 8006382:	5a9b      	ldrh	r3, [r3, r2]
 8006384:	b29b      	uxth	r3, r3
 8006386:	2201      	movs	r2, #1
 8006388:	4313      	orrs	r3, r2
 800638a:	b299      	uxth	r1, r3
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	2254      	movs	r2, #84	; 0x54
 8006390:	5299      	strh	r1, [r3, r2]
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	2254      	movs	r2, #84	; 0x54
 8006396:	5a9b      	ldrh	r3, [r3, r2]
 8006398:	b29b      	uxth	r3, r3
 800639a:	2202      	movs	r2, #2
 800639c:	4313      	orrs	r3, r2
 800639e:	b299      	uxth	r1, r3
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	2254      	movs	r2, #84	; 0x54
 80063a4:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 80063a6:	2300      	movs	r3, #0
}
 80063a8:	0018      	movs	r0, r3
 80063aa:	46bd      	mov	sp, r7
 80063ac:	b004      	add	sp, #16
 80063ae:	bd80      	pop	{r7, pc}

080063b0 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80063b0:	b580      	push	{r7, lr}
 80063b2:	b082      	sub	sp, #8
 80063b4:	af00      	add	r7, sp, #0
 80063b6:	6078      	str	r0, [r7, #4]
 80063b8:	000a      	movs	r2, r1
 80063ba:	1cfb      	adds	r3, r7, #3
 80063bc:	701a      	strb	r2, [r3, #0]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80063be:	46c0      	nop			; (mov r8, r8)
 80063c0:	46bd      	mov	sp, r7
 80063c2:	b002      	add	sp, #8
 80063c4:	bd80      	pop	{r7, pc}
	...

080063c8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80063c8:	b580      	push	{r7, lr}
 80063ca:	b088      	sub	sp, #32
 80063cc:	af00      	add	r7, sp, #0
 80063ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d102      	bne.n	80063dc <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80063d6:	2301      	movs	r3, #1
 80063d8:	f000 fb76 	bl	8006ac8 <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	2201      	movs	r2, #1
 80063e2:	4013      	ands	r3, r2
 80063e4:	d100      	bne.n	80063e8 <HAL_RCC_OscConfig+0x20>
 80063e6:	e08e      	b.n	8006506 <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80063e8:	4bc5      	ldr	r3, [pc, #788]	; (8006700 <HAL_RCC_OscConfig+0x338>)
 80063ea:	685b      	ldr	r3, [r3, #4]
 80063ec:	220c      	movs	r2, #12
 80063ee:	4013      	ands	r3, r2
 80063f0:	2b04      	cmp	r3, #4
 80063f2:	d00e      	beq.n	8006412 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80063f4:	4bc2      	ldr	r3, [pc, #776]	; (8006700 <HAL_RCC_OscConfig+0x338>)
 80063f6:	685b      	ldr	r3, [r3, #4]
 80063f8:	220c      	movs	r2, #12
 80063fa:	4013      	ands	r3, r2
 80063fc:	2b08      	cmp	r3, #8
 80063fe:	d117      	bne.n	8006430 <HAL_RCC_OscConfig+0x68>
 8006400:	4bbf      	ldr	r3, [pc, #764]	; (8006700 <HAL_RCC_OscConfig+0x338>)
 8006402:	685a      	ldr	r2, [r3, #4]
 8006404:	23c0      	movs	r3, #192	; 0xc0
 8006406:	025b      	lsls	r3, r3, #9
 8006408:	401a      	ands	r2, r3
 800640a:	2380      	movs	r3, #128	; 0x80
 800640c:	025b      	lsls	r3, r3, #9
 800640e:	429a      	cmp	r2, r3
 8006410:	d10e      	bne.n	8006430 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006412:	4bbb      	ldr	r3, [pc, #748]	; (8006700 <HAL_RCC_OscConfig+0x338>)
 8006414:	681a      	ldr	r2, [r3, #0]
 8006416:	2380      	movs	r3, #128	; 0x80
 8006418:	029b      	lsls	r3, r3, #10
 800641a:	4013      	ands	r3, r2
 800641c:	d100      	bne.n	8006420 <HAL_RCC_OscConfig+0x58>
 800641e:	e071      	b.n	8006504 <HAL_RCC_OscConfig+0x13c>
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	685b      	ldr	r3, [r3, #4]
 8006424:	2b00      	cmp	r3, #0
 8006426:	d000      	beq.n	800642a <HAL_RCC_OscConfig+0x62>
 8006428:	e06c      	b.n	8006504 <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 800642a:	2301      	movs	r3, #1
 800642c:	f000 fb4c 	bl	8006ac8 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	685b      	ldr	r3, [r3, #4]
 8006434:	2b01      	cmp	r3, #1
 8006436:	d107      	bne.n	8006448 <HAL_RCC_OscConfig+0x80>
 8006438:	4bb1      	ldr	r3, [pc, #708]	; (8006700 <HAL_RCC_OscConfig+0x338>)
 800643a:	681a      	ldr	r2, [r3, #0]
 800643c:	4bb0      	ldr	r3, [pc, #704]	; (8006700 <HAL_RCC_OscConfig+0x338>)
 800643e:	2180      	movs	r1, #128	; 0x80
 8006440:	0249      	lsls	r1, r1, #9
 8006442:	430a      	orrs	r2, r1
 8006444:	601a      	str	r2, [r3, #0]
 8006446:	e02f      	b.n	80064a8 <HAL_RCC_OscConfig+0xe0>
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	685b      	ldr	r3, [r3, #4]
 800644c:	2b00      	cmp	r3, #0
 800644e:	d10c      	bne.n	800646a <HAL_RCC_OscConfig+0xa2>
 8006450:	4bab      	ldr	r3, [pc, #684]	; (8006700 <HAL_RCC_OscConfig+0x338>)
 8006452:	681a      	ldr	r2, [r3, #0]
 8006454:	4baa      	ldr	r3, [pc, #680]	; (8006700 <HAL_RCC_OscConfig+0x338>)
 8006456:	49ab      	ldr	r1, [pc, #684]	; (8006704 <HAL_RCC_OscConfig+0x33c>)
 8006458:	400a      	ands	r2, r1
 800645a:	601a      	str	r2, [r3, #0]
 800645c:	4ba8      	ldr	r3, [pc, #672]	; (8006700 <HAL_RCC_OscConfig+0x338>)
 800645e:	681a      	ldr	r2, [r3, #0]
 8006460:	4ba7      	ldr	r3, [pc, #668]	; (8006700 <HAL_RCC_OscConfig+0x338>)
 8006462:	49a9      	ldr	r1, [pc, #676]	; (8006708 <HAL_RCC_OscConfig+0x340>)
 8006464:	400a      	ands	r2, r1
 8006466:	601a      	str	r2, [r3, #0]
 8006468:	e01e      	b.n	80064a8 <HAL_RCC_OscConfig+0xe0>
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	685b      	ldr	r3, [r3, #4]
 800646e:	2b05      	cmp	r3, #5
 8006470:	d10e      	bne.n	8006490 <HAL_RCC_OscConfig+0xc8>
 8006472:	4ba3      	ldr	r3, [pc, #652]	; (8006700 <HAL_RCC_OscConfig+0x338>)
 8006474:	681a      	ldr	r2, [r3, #0]
 8006476:	4ba2      	ldr	r3, [pc, #648]	; (8006700 <HAL_RCC_OscConfig+0x338>)
 8006478:	2180      	movs	r1, #128	; 0x80
 800647a:	02c9      	lsls	r1, r1, #11
 800647c:	430a      	orrs	r2, r1
 800647e:	601a      	str	r2, [r3, #0]
 8006480:	4b9f      	ldr	r3, [pc, #636]	; (8006700 <HAL_RCC_OscConfig+0x338>)
 8006482:	681a      	ldr	r2, [r3, #0]
 8006484:	4b9e      	ldr	r3, [pc, #632]	; (8006700 <HAL_RCC_OscConfig+0x338>)
 8006486:	2180      	movs	r1, #128	; 0x80
 8006488:	0249      	lsls	r1, r1, #9
 800648a:	430a      	orrs	r2, r1
 800648c:	601a      	str	r2, [r3, #0]
 800648e:	e00b      	b.n	80064a8 <HAL_RCC_OscConfig+0xe0>
 8006490:	4b9b      	ldr	r3, [pc, #620]	; (8006700 <HAL_RCC_OscConfig+0x338>)
 8006492:	681a      	ldr	r2, [r3, #0]
 8006494:	4b9a      	ldr	r3, [pc, #616]	; (8006700 <HAL_RCC_OscConfig+0x338>)
 8006496:	499b      	ldr	r1, [pc, #620]	; (8006704 <HAL_RCC_OscConfig+0x33c>)
 8006498:	400a      	ands	r2, r1
 800649a:	601a      	str	r2, [r3, #0]
 800649c:	4b98      	ldr	r3, [pc, #608]	; (8006700 <HAL_RCC_OscConfig+0x338>)
 800649e:	681a      	ldr	r2, [r3, #0]
 80064a0:	4b97      	ldr	r3, [pc, #604]	; (8006700 <HAL_RCC_OscConfig+0x338>)
 80064a2:	4999      	ldr	r1, [pc, #612]	; (8006708 <HAL_RCC_OscConfig+0x340>)
 80064a4:	400a      	ands	r2, r1
 80064a6:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	685b      	ldr	r3, [r3, #4]
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d014      	beq.n	80064da <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80064b0:	f7fc ffdc 	bl	800346c <HAL_GetTick>
 80064b4:	0003      	movs	r3, r0
 80064b6:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80064b8:	e008      	b.n	80064cc <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80064ba:	f7fc ffd7 	bl	800346c <HAL_GetTick>
 80064be:	0002      	movs	r2, r0
 80064c0:	69bb      	ldr	r3, [r7, #24]
 80064c2:	1ad3      	subs	r3, r2, r3
 80064c4:	2b64      	cmp	r3, #100	; 0x64
 80064c6:	d901      	bls.n	80064cc <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 80064c8:	2303      	movs	r3, #3
 80064ca:	e2fd      	b.n	8006ac8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80064cc:	4b8c      	ldr	r3, [pc, #560]	; (8006700 <HAL_RCC_OscConfig+0x338>)
 80064ce:	681a      	ldr	r2, [r3, #0]
 80064d0:	2380      	movs	r3, #128	; 0x80
 80064d2:	029b      	lsls	r3, r3, #10
 80064d4:	4013      	ands	r3, r2
 80064d6:	d0f0      	beq.n	80064ba <HAL_RCC_OscConfig+0xf2>
 80064d8:	e015      	b.n	8006506 <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80064da:	f7fc ffc7 	bl	800346c <HAL_GetTick>
 80064de:	0003      	movs	r3, r0
 80064e0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80064e2:	e008      	b.n	80064f6 <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80064e4:	f7fc ffc2 	bl	800346c <HAL_GetTick>
 80064e8:	0002      	movs	r2, r0
 80064ea:	69bb      	ldr	r3, [r7, #24]
 80064ec:	1ad3      	subs	r3, r2, r3
 80064ee:	2b64      	cmp	r3, #100	; 0x64
 80064f0:	d901      	bls.n	80064f6 <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 80064f2:	2303      	movs	r3, #3
 80064f4:	e2e8      	b.n	8006ac8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80064f6:	4b82      	ldr	r3, [pc, #520]	; (8006700 <HAL_RCC_OscConfig+0x338>)
 80064f8:	681a      	ldr	r2, [r3, #0]
 80064fa:	2380      	movs	r3, #128	; 0x80
 80064fc:	029b      	lsls	r3, r3, #10
 80064fe:	4013      	ands	r3, r2
 8006500:	d1f0      	bne.n	80064e4 <HAL_RCC_OscConfig+0x11c>
 8006502:	e000      	b.n	8006506 <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006504:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	2202      	movs	r2, #2
 800650c:	4013      	ands	r3, r2
 800650e:	d100      	bne.n	8006512 <HAL_RCC_OscConfig+0x14a>
 8006510:	e06c      	b.n	80065ec <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8006512:	4b7b      	ldr	r3, [pc, #492]	; (8006700 <HAL_RCC_OscConfig+0x338>)
 8006514:	685b      	ldr	r3, [r3, #4]
 8006516:	220c      	movs	r2, #12
 8006518:	4013      	ands	r3, r2
 800651a:	d00e      	beq.n	800653a <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800651c:	4b78      	ldr	r3, [pc, #480]	; (8006700 <HAL_RCC_OscConfig+0x338>)
 800651e:	685b      	ldr	r3, [r3, #4]
 8006520:	220c      	movs	r2, #12
 8006522:	4013      	ands	r3, r2
 8006524:	2b08      	cmp	r3, #8
 8006526:	d11f      	bne.n	8006568 <HAL_RCC_OscConfig+0x1a0>
 8006528:	4b75      	ldr	r3, [pc, #468]	; (8006700 <HAL_RCC_OscConfig+0x338>)
 800652a:	685a      	ldr	r2, [r3, #4]
 800652c:	23c0      	movs	r3, #192	; 0xc0
 800652e:	025b      	lsls	r3, r3, #9
 8006530:	401a      	ands	r2, r3
 8006532:	2380      	movs	r3, #128	; 0x80
 8006534:	021b      	lsls	r3, r3, #8
 8006536:	429a      	cmp	r2, r3
 8006538:	d116      	bne.n	8006568 <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800653a:	4b71      	ldr	r3, [pc, #452]	; (8006700 <HAL_RCC_OscConfig+0x338>)
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	2202      	movs	r2, #2
 8006540:	4013      	ands	r3, r2
 8006542:	d005      	beq.n	8006550 <HAL_RCC_OscConfig+0x188>
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	68db      	ldr	r3, [r3, #12]
 8006548:	2b01      	cmp	r3, #1
 800654a:	d001      	beq.n	8006550 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 800654c:	2301      	movs	r3, #1
 800654e:	e2bb      	b.n	8006ac8 <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006550:	4b6b      	ldr	r3, [pc, #428]	; (8006700 <HAL_RCC_OscConfig+0x338>)
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	22f8      	movs	r2, #248	; 0xf8
 8006556:	4393      	bics	r3, r2
 8006558:	0019      	movs	r1, r3
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	691b      	ldr	r3, [r3, #16]
 800655e:	00da      	lsls	r2, r3, #3
 8006560:	4b67      	ldr	r3, [pc, #412]	; (8006700 <HAL_RCC_OscConfig+0x338>)
 8006562:	430a      	orrs	r2, r1
 8006564:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006566:	e041      	b.n	80065ec <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	68db      	ldr	r3, [r3, #12]
 800656c:	2b00      	cmp	r3, #0
 800656e:	d024      	beq.n	80065ba <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006570:	4b63      	ldr	r3, [pc, #396]	; (8006700 <HAL_RCC_OscConfig+0x338>)
 8006572:	681a      	ldr	r2, [r3, #0]
 8006574:	4b62      	ldr	r3, [pc, #392]	; (8006700 <HAL_RCC_OscConfig+0x338>)
 8006576:	2101      	movs	r1, #1
 8006578:	430a      	orrs	r2, r1
 800657a:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800657c:	f7fc ff76 	bl	800346c <HAL_GetTick>
 8006580:	0003      	movs	r3, r0
 8006582:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006584:	e008      	b.n	8006598 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006586:	f7fc ff71 	bl	800346c <HAL_GetTick>
 800658a:	0002      	movs	r2, r0
 800658c:	69bb      	ldr	r3, [r7, #24]
 800658e:	1ad3      	subs	r3, r2, r3
 8006590:	2b02      	cmp	r3, #2
 8006592:	d901      	bls.n	8006598 <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8006594:	2303      	movs	r3, #3
 8006596:	e297      	b.n	8006ac8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006598:	4b59      	ldr	r3, [pc, #356]	; (8006700 <HAL_RCC_OscConfig+0x338>)
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	2202      	movs	r2, #2
 800659e:	4013      	ands	r3, r2
 80065a0:	d0f1      	beq.n	8006586 <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80065a2:	4b57      	ldr	r3, [pc, #348]	; (8006700 <HAL_RCC_OscConfig+0x338>)
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	22f8      	movs	r2, #248	; 0xf8
 80065a8:	4393      	bics	r3, r2
 80065aa:	0019      	movs	r1, r3
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	691b      	ldr	r3, [r3, #16]
 80065b0:	00da      	lsls	r2, r3, #3
 80065b2:	4b53      	ldr	r3, [pc, #332]	; (8006700 <HAL_RCC_OscConfig+0x338>)
 80065b4:	430a      	orrs	r2, r1
 80065b6:	601a      	str	r2, [r3, #0]
 80065b8:	e018      	b.n	80065ec <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80065ba:	4b51      	ldr	r3, [pc, #324]	; (8006700 <HAL_RCC_OscConfig+0x338>)
 80065bc:	681a      	ldr	r2, [r3, #0]
 80065be:	4b50      	ldr	r3, [pc, #320]	; (8006700 <HAL_RCC_OscConfig+0x338>)
 80065c0:	2101      	movs	r1, #1
 80065c2:	438a      	bics	r2, r1
 80065c4:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80065c6:	f7fc ff51 	bl	800346c <HAL_GetTick>
 80065ca:	0003      	movs	r3, r0
 80065cc:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80065ce:	e008      	b.n	80065e2 <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80065d0:	f7fc ff4c 	bl	800346c <HAL_GetTick>
 80065d4:	0002      	movs	r2, r0
 80065d6:	69bb      	ldr	r3, [r7, #24]
 80065d8:	1ad3      	subs	r3, r2, r3
 80065da:	2b02      	cmp	r3, #2
 80065dc:	d901      	bls.n	80065e2 <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 80065de:	2303      	movs	r3, #3
 80065e0:	e272      	b.n	8006ac8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80065e2:	4b47      	ldr	r3, [pc, #284]	; (8006700 <HAL_RCC_OscConfig+0x338>)
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	2202      	movs	r2, #2
 80065e8:	4013      	ands	r3, r2
 80065ea:	d1f1      	bne.n	80065d0 <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	2208      	movs	r2, #8
 80065f2:	4013      	ands	r3, r2
 80065f4:	d036      	beq.n	8006664 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	69db      	ldr	r3, [r3, #28]
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d019      	beq.n	8006632 <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80065fe:	4b40      	ldr	r3, [pc, #256]	; (8006700 <HAL_RCC_OscConfig+0x338>)
 8006600:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006602:	4b3f      	ldr	r3, [pc, #252]	; (8006700 <HAL_RCC_OscConfig+0x338>)
 8006604:	2101      	movs	r1, #1
 8006606:	430a      	orrs	r2, r1
 8006608:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800660a:	f7fc ff2f 	bl	800346c <HAL_GetTick>
 800660e:	0003      	movs	r3, r0
 8006610:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006612:	e008      	b.n	8006626 <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006614:	f7fc ff2a 	bl	800346c <HAL_GetTick>
 8006618:	0002      	movs	r2, r0
 800661a:	69bb      	ldr	r3, [r7, #24]
 800661c:	1ad3      	subs	r3, r2, r3
 800661e:	2b02      	cmp	r3, #2
 8006620:	d901      	bls.n	8006626 <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 8006622:	2303      	movs	r3, #3
 8006624:	e250      	b.n	8006ac8 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006626:	4b36      	ldr	r3, [pc, #216]	; (8006700 <HAL_RCC_OscConfig+0x338>)
 8006628:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800662a:	2202      	movs	r2, #2
 800662c:	4013      	ands	r3, r2
 800662e:	d0f1      	beq.n	8006614 <HAL_RCC_OscConfig+0x24c>
 8006630:	e018      	b.n	8006664 <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006632:	4b33      	ldr	r3, [pc, #204]	; (8006700 <HAL_RCC_OscConfig+0x338>)
 8006634:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006636:	4b32      	ldr	r3, [pc, #200]	; (8006700 <HAL_RCC_OscConfig+0x338>)
 8006638:	2101      	movs	r1, #1
 800663a:	438a      	bics	r2, r1
 800663c:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800663e:	f7fc ff15 	bl	800346c <HAL_GetTick>
 8006642:	0003      	movs	r3, r0
 8006644:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006646:	e008      	b.n	800665a <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006648:	f7fc ff10 	bl	800346c <HAL_GetTick>
 800664c:	0002      	movs	r2, r0
 800664e:	69bb      	ldr	r3, [r7, #24]
 8006650:	1ad3      	subs	r3, r2, r3
 8006652:	2b02      	cmp	r3, #2
 8006654:	d901      	bls.n	800665a <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 8006656:	2303      	movs	r3, #3
 8006658:	e236      	b.n	8006ac8 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800665a:	4b29      	ldr	r3, [pc, #164]	; (8006700 <HAL_RCC_OscConfig+0x338>)
 800665c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800665e:	2202      	movs	r2, #2
 8006660:	4013      	ands	r3, r2
 8006662:	d1f1      	bne.n	8006648 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	2204      	movs	r2, #4
 800666a:	4013      	ands	r3, r2
 800666c:	d100      	bne.n	8006670 <HAL_RCC_OscConfig+0x2a8>
 800666e:	e0b5      	b.n	80067dc <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006670:	201f      	movs	r0, #31
 8006672:	183b      	adds	r3, r7, r0
 8006674:	2200      	movs	r2, #0
 8006676:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006678:	4b21      	ldr	r3, [pc, #132]	; (8006700 <HAL_RCC_OscConfig+0x338>)
 800667a:	69da      	ldr	r2, [r3, #28]
 800667c:	2380      	movs	r3, #128	; 0x80
 800667e:	055b      	lsls	r3, r3, #21
 8006680:	4013      	ands	r3, r2
 8006682:	d110      	bne.n	80066a6 <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006684:	4b1e      	ldr	r3, [pc, #120]	; (8006700 <HAL_RCC_OscConfig+0x338>)
 8006686:	69da      	ldr	r2, [r3, #28]
 8006688:	4b1d      	ldr	r3, [pc, #116]	; (8006700 <HAL_RCC_OscConfig+0x338>)
 800668a:	2180      	movs	r1, #128	; 0x80
 800668c:	0549      	lsls	r1, r1, #21
 800668e:	430a      	orrs	r2, r1
 8006690:	61da      	str	r2, [r3, #28]
 8006692:	4b1b      	ldr	r3, [pc, #108]	; (8006700 <HAL_RCC_OscConfig+0x338>)
 8006694:	69da      	ldr	r2, [r3, #28]
 8006696:	2380      	movs	r3, #128	; 0x80
 8006698:	055b      	lsls	r3, r3, #21
 800669a:	4013      	ands	r3, r2
 800669c:	60fb      	str	r3, [r7, #12]
 800669e:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80066a0:	183b      	adds	r3, r7, r0
 80066a2:	2201      	movs	r2, #1
 80066a4:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80066a6:	4b19      	ldr	r3, [pc, #100]	; (800670c <HAL_RCC_OscConfig+0x344>)
 80066a8:	681a      	ldr	r2, [r3, #0]
 80066aa:	2380      	movs	r3, #128	; 0x80
 80066ac:	005b      	lsls	r3, r3, #1
 80066ae:	4013      	ands	r3, r2
 80066b0:	d11a      	bne.n	80066e8 <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80066b2:	4b16      	ldr	r3, [pc, #88]	; (800670c <HAL_RCC_OscConfig+0x344>)
 80066b4:	681a      	ldr	r2, [r3, #0]
 80066b6:	4b15      	ldr	r3, [pc, #84]	; (800670c <HAL_RCC_OscConfig+0x344>)
 80066b8:	2180      	movs	r1, #128	; 0x80
 80066ba:	0049      	lsls	r1, r1, #1
 80066bc:	430a      	orrs	r2, r1
 80066be:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80066c0:	f7fc fed4 	bl	800346c <HAL_GetTick>
 80066c4:	0003      	movs	r3, r0
 80066c6:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80066c8:	e008      	b.n	80066dc <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80066ca:	f7fc fecf 	bl	800346c <HAL_GetTick>
 80066ce:	0002      	movs	r2, r0
 80066d0:	69bb      	ldr	r3, [r7, #24]
 80066d2:	1ad3      	subs	r3, r2, r3
 80066d4:	2b64      	cmp	r3, #100	; 0x64
 80066d6:	d901      	bls.n	80066dc <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 80066d8:	2303      	movs	r3, #3
 80066da:	e1f5      	b.n	8006ac8 <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80066dc:	4b0b      	ldr	r3, [pc, #44]	; (800670c <HAL_RCC_OscConfig+0x344>)
 80066de:	681a      	ldr	r2, [r3, #0]
 80066e0:	2380      	movs	r3, #128	; 0x80
 80066e2:	005b      	lsls	r3, r3, #1
 80066e4:	4013      	ands	r3, r2
 80066e6:	d0f0      	beq.n	80066ca <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	689b      	ldr	r3, [r3, #8]
 80066ec:	2b01      	cmp	r3, #1
 80066ee:	d10f      	bne.n	8006710 <HAL_RCC_OscConfig+0x348>
 80066f0:	4b03      	ldr	r3, [pc, #12]	; (8006700 <HAL_RCC_OscConfig+0x338>)
 80066f2:	6a1a      	ldr	r2, [r3, #32]
 80066f4:	4b02      	ldr	r3, [pc, #8]	; (8006700 <HAL_RCC_OscConfig+0x338>)
 80066f6:	2101      	movs	r1, #1
 80066f8:	430a      	orrs	r2, r1
 80066fa:	621a      	str	r2, [r3, #32]
 80066fc:	e036      	b.n	800676c <HAL_RCC_OscConfig+0x3a4>
 80066fe:	46c0      	nop			; (mov r8, r8)
 8006700:	40021000 	.word	0x40021000
 8006704:	fffeffff 	.word	0xfffeffff
 8006708:	fffbffff 	.word	0xfffbffff
 800670c:	40007000 	.word	0x40007000
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	689b      	ldr	r3, [r3, #8]
 8006714:	2b00      	cmp	r3, #0
 8006716:	d10c      	bne.n	8006732 <HAL_RCC_OscConfig+0x36a>
 8006718:	4bca      	ldr	r3, [pc, #808]	; (8006a44 <HAL_RCC_OscConfig+0x67c>)
 800671a:	6a1a      	ldr	r2, [r3, #32]
 800671c:	4bc9      	ldr	r3, [pc, #804]	; (8006a44 <HAL_RCC_OscConfig+0x67c>)
 800671e:	2101      	movs	r1, #1
 8006720:	438a      	bics	r2, r1
 8006722:	621a      	str	r2, [r3, #32]
 8006724:	4bc7      	ldr	r3, [pc, #796]	; (8006a44 <HAL_RCC_OscConfig+0x67c>)
 8006726:	6a1a      	ldr	r2, [r3, #32]
 8006728:	4bc6      	ldr	r3, [pc, #792]	; (8006a44 <HAL_RCC_OscConfig+0x67c>)
 800672a:	2104      	movs	r1, #4
 800672c:	438a      	bics	r2, r1
 800672e:	621a      	str	r2, [r3, #32]
 8006730:	e01c      	b.n	800676c <HAL_RCC_OscConfig+0x3a4>
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	689b      	ldr	r3, [r3, #8]
 8006736:	2b05      	cmp	r3, #5
 8006738:	d10c      	bne.n	8006754 <HAL_RCC_OscConfig+0x38c>
 800673a:	4bc2      	ldr	r3, [pc, #776]	; (8006a44 <HAL_RCC_OscConfig+0x67c>)
 800673c:	6a1a      	ldr	r2, [r3, #32]
 800673e:	4bc1      	ldr	r3, [pc, #772]	; (8006a44 <HAL_RCC_OscConfig+0x67c>)
 8006740:	2104      	movs	r1, #4
 8006742:	430a      	orrs	r2, r1
 8006744:	621a      	str	r2, [r3, #32]
 8006746:	4bbf      	ldr	r3, [pc, #764]	; (8006a44 <HAL_RCC_OscConfig+0x67c>)
 8006748:	6a1a      	ldr	r2, [r3, #32]
 800674a:	4bbe      	ldr	r3, [pc, #760]	; (8006a44 <HAL_RCC_OscConfig+0x67c>)
 800674c:	2101      	movs	r1, #1
 800674e:	430a      	orrs	r2, r1
 8006750:	621a      	str	r2, [r3, #32]
 8006752:	e00b      	b.n	800676c <HAL_RCC_OscConfig+0x3a4>
 8006754:	4bbb      	ldr	r3, [pc, #748]	; (8006a44 <HAL_RCC_OscConfig+0x67c>)
 8006756:	6a1a      	ldr	r2, [r3, #32]
 8006758:	4bba      	ldr	r3, [pc, #744]	; (8006a44 <HAL_RCC_OscConfig+0x67c>)
 800675a:	2101      	movs	r1, #1
 800675c:	438a      	bics	r2, r1
 800675e:	621a      	str	r2, [r3, #32]
 8006760:	4bb8      	ldr	r3, [pc, #736]	; (8006a44 <HAL_RCC_OscConfig+0x67c>)
 8006762:	6a1a      	ldr	r2, [r3, #32]
 8006764:	4bb7      	ldr	r3, [pc, #732]	; (8006a44 <HAL_RCC_OscConfig+0x67c>)
 8006766:	2104      	movs	r1, #4
 8006768:	438a      	bics	r2, r1
 800676a:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	689b      	ldr	r3, [r3, #8]
 8006770:	2b00      	cmp	r3, #0
 8006772:	d014      	beq.n	800679e <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006774:	f7fc fe7a 	bl	800346c <HAL_GetTick>
 8006778:	0003      	movs	r3, r0
 800677a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800677c:	e009      	b.n	8006792 <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800677e:	f7fc fe75 	bl	800346c <HAL_GetTick>
 8006782:	0002      	movs	r2, r0
 8006784:	69bb      	ldr	r3, [r7, #24]
 8006786:	1ad3      	subs	r3, r2, r3
 8006788:	4aaf      	ldr	r2, [pc, #700]	; (8006a48 <HAL_RCC_OscConfig+0x680>)
 800678a:	4293      	cmp	r3, r2
 800678c:	d901      	bls.n	8006792 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 800678e:	2303      	movs	r3, #3
 8006790:	e19a      	b.n	8006ac8 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006792:	4bac      	ldr	r3, [pc, #688]	; (8006a44 <HAL_RCC_OscConfig+0x67c>)
 8006794:	6a1b      	ldr	r3, [r3, #32]
 8006796:	2202      	movs	r2, #2
 8006798:	4013      	ands	r3, r2
 800679a:	d0f0      	beq.n	800677e <HAL_RCC_OscConfig+0x3b6>
 800679c:	e013      	b.n	80067c6 <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800679e:	f7fc fe65 	bl	800346c <HAL_GetTick>
 80067a2:	0003      	movs	r3, r0
 80067a4:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80067a6:	e009      	b.n	80067bc <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80067a8:	f7fc fe60 	bl	800346c <HAL_GetTick>
 80067ac:	0002      	movs	r2, r0
 80067ae:	69bb      	ldr	r3, [r7, #24]
 80067b0:	1ad3      	subs	r3, r2, r3
 80067b2:	4aa5      	ldr	r2, [pc, #660]	; (8006a48 <HAL_RCC_OscConfig+0x680>)
 80067b4:	4293      	cmp	r3, r2
 80067b6:	d901      	bls.n	80067bc <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 80067b8:	2303      	movs	r3, #3
 80067ba:	e185      	b.n	8006ac8 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80067bc:	4ba1      	ldr	r3, [pc, #644]	; (8006a44 <HAL_RCC_OscConfig+0x67c>)
 80067be:	6a1b      	ldr	r3, [r3, #32]
 80067c0:	2202      	movs	r2, #2
 80067c2:	4013      	ands	r3, r2
 80067c4:	d1f0      	bne.n	80067a8 <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80067c6:	231f      	movs	r3, #31
 80067c8:	18fb      	adds	r3, r7, r3
 80067ca:	781b      	ldrb	r3, [r3, #0]
 80067cc:	2b01      	cmp	r3, #1
 80067ce:	d105      	bne.n	80067dc <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80067d0:	4b9c      	ldr	r3, [pc, #624]	; (8006a44 <HAL_RCC_OscConfig+0x67c>)
 80067d2:	69da      	ldr	r2, [r3, #28]
 80067d4:	4b9b      	ldr	r3, [pc, #620]	; (8006a44 <HAL_RCC_OscConfig+0x67c>)
 80067d6:	499d      	ldr	r1, [pc, #628]	; (8006a4c <HAL_RCC_OscConfig+0x684>)
 80067d8:	400a      	ands	r2, r1
 80067da:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	2210      	movs	r2, #16
 80067e2:	4013      	ands	r3, r2
 80067e4:	d063      	beq.n	80068ae <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	695b      	ldr	r3, [r3, #20]
 80067ea:	2b01      	cmp	r3, #1
 80067ec:	d12a      	bne.n	8006844 <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80067ee:	4b95      	ldr	r3, [pc, #596]	; (8006a44 <HAL_RCC_OscConfig+0x67c>)
 80067f0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80067f2:	4b94      	ldr	r3, [pc, #592]	; (8006a44 <HAL_RCC_OscConfig+0x67c>)
 80067f4:	2104      	movs	r1, #4
 80067f6:	430a      	orrs	r2, r1
 80067f8:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 80067fa:	4b92      	ldr	r3, [pc, #584]	; (8006a44 <HAL_RCC_OscConfig+0x67c>)
 80067fc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80067fe:	4b91      	ldr	r3, [pc, #580]	; (8006a44 <HAL_RCC_OscConfig+0x67c>)
 8006800:	2101      	movs	r1, #1
 8006802:	430a      	orrs	r2, r1
 8006804:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006806:	f7fc fe31 	bl	800346c <HAL_GetTick>
 800680a:	0003      	movs	r3, r0
 800680c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800680e:	e008      	b.n	8006822 <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8006810:	f7fc fe2c 	bl	800346c <HAL_GetTick>
 8006814:	0002      	movs	r2, r0
 8006816:	69bb      	ldr	r3, [r7, #24]
 8006818:	1ad3      	subs	r3, r2, r3
 800681a:	2b02      	cmp	r3, #2
 800681c:	d901      	bls.n	8006822 <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 800681e:	2303      	movs	r3, #3
 8006820:	e152      	b.n	8006ac8 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8006822:	4b88      	ldr	r3, [pc, #544]	; (8006a44 <HAL_RCC_OscConfig+0x67c>)
 8006824:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006826:	2202      	movs	r2, #2
 8006828:	4013      	ands	r3, r2
 800682a:	d0f1      	beq.n	8006810 <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 800682c:	4b85      	ldr	r3, [pc, #532]	; (8006a44 <HAL_RCC_OscConfig+0x67c>)
 800682e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006830:	22f8      	movs	r2, #248	; 0xf8
 8006832:	4393      	bics	r3, r2
 8006834:	0019      	movs	r1, r3
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	699b      	ldr	r3, [r3, #24]
 800683a:	00da      	lsls	r2, r3, #3
 800683c:	4b81      	ldr	r3, [pc, #516]	; (8006a44 <HAL_RCC_OscConfig+0x67c>)
 800683e:	430a      	orrs	r2, r1
 8006840:	635a      	str	r2, [r3, #52]	; 0x34
 8006842:	e034      	b.n	80068ae <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	695b      	ldr	r3, [r3, #20]
 8006848:	3305      	adds	r3, #5
 800684a:	d111      	bne.n	8006870 <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 800684c:	4b7d      	ldr	r3, [pc, #500]	; (8006a44 <HAL_RCC_OscConfig+0x67c>)
 800684e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006850:	4b7c      	ldr	r3, [pc, #496]	; (8006a44 <HAL_RCC_OscConfig+0x67c>)
 8006852:	2104      	movs	r1, #4
 8006854:	438a      	bics	r2, r1
 8006856:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8006858:	4b7a      	ldr	r3, [pc, #488]	; (8006a44 <HAL_RCC_OscConfig+0x67c>)
 800685a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800685c:	22f8      	movs	r2, #248	; 0xf8
 800685e:	4393      	bics	r3, r2
 8006860:	0019      	movs	r1, r3
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	699b      	ldr	r3, [r3, #24]
 8006866:	00da      	lsls	r2, r3, #3
 8006868:	4b76      	ldr	r3, [pc, #472]	; (8006a44 <HAL_RCC_OscConfig+0x67c>)
 800686a:	430a      	orrs	r2, r1
 800686c:	635a      	str	r2, [r3, #52]	; 0x34
 800686e:	e01e      	b.n	80068ae <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8006870:	4b74      	ldr	r3, [pc, #464]	; (8006a44 <HAL_RCC_OscConfig+0x67c>)
 8006872:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006874:	4b73      	ldr	r3, [pc, #460]	; (8006a44 <HAL_RCC_OscConfig+0x67c>)
 8006876:	2104      	movs	r1, #4
 8006878:	430a      	orrs	r2, r1
 800687a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 800687c:	4b71      	ldr	r3, [pc, #452]	; (8006a44 <HAL_RCC_OscConfig+0x67c>)
 800687e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006880:	4b70      	ldr	r3, [pc, #448]	; (8006a44 <HAL_RCC_OscConfig+0x67c>)
 8006882:	2101      	movs	r1, #1
 8006884:	438a      	bics	r2, r1
 8006886:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006888:	f7fc fdf0 	bl	800346c <HAL_GetTick>
 800688c:	0003      	movs	r3, r0
 800688e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8006890:	e008      	b.n	80068a4 <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8006892:	f7fc fdeb 	bl	800346c <HAL_GetTick>
 8006896:	0002      	movs	r2, r0
 8006898:	69bb      	ldr	r3, [r7, #24]
 800689a:	1ad3      	subs	r3, r2, r3
 800689c:	2b02      	cmp	r3, #2
 800689e:	d901      	bls.n	80068a4 <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 80068a0:	2303      	movs	r3, #3
 80068a2:	e111      	b.n	8006ac8 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80068a4:	4b67      	ldr	r3, [pc, #412]	; (8006a44 <HAL_RCC_OscConfig+0x67c>)
 80068a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80068a8:	2202      	movs	r2, #2
 80068aa:	4013      	ands	r3, r2
 80068ac:	d1f1      	bne.n	8006892 <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	2220      	movs	r2, #32
 80068b4:	4013      	ands	r3, r2
 80068b6:	d05c      	beq.n	8006972 <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 80068b8:	4b62      	ldr	r3, [pc, #392]	; (8006a44 <HAL_RCC_OscConfig+0x67c>)
 80068ba:	685b      	ldr	r3, [r3, #4]
 80068bc:	220c      	movs	r2, #12
 80068be:	4013      	ands	r3, r2
 80068c0:	2b0c      	cmp	r3, #12
 80068c2:	d00e      	beq.n	80068e2 <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 80068c4:	4b5f      	ldr	r3, [pc, #380]	; (8006a44 <HAL_RCC_OscConfig+0x67c>)
 80068c6:	685b      	ldr	r3, [r3, #4]
 80068c8:	220c      	movs	r2, #12
 80068ca:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 80068cc:	2b08      	cmp	r3, #8
 80068ce:	d114      	bne.n	80068fa <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 80068d0:	4b5c      	ldr	r3, [pc, #368]	; (8006a44 <HAL_RCC_OscConfig+0x67c>)
 80068d2:	685a      	ldr	r2, [r3, #4]
 80068d4:	23c0      	movs	r3, #192	; 0xc0
 80068d6:	025b      	lsls	r3, r3, #9
 80068d8:	401a      	ands	r2, r3
 80068da:	23c0      	movs	r3, #192	; 0xc0
 80068dc:	025b      	lsls	r3, r3, #9
 80068de:	429a      	cmp	r2, r3
 80068e0:	d10b      	bne.n	80068fa <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 80068e2:	4b58      	ldr	r3, [pc, #352]	; (8006a44 <HAL_RCC_OscConfig+0x67c>)
 80068e4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80068e6:	2380      	movs	r3, #128	; 0x80
 80068e8:	025b      	lsls	r3, r3, #9
 80068ea:	4013      	ands	r3, r2
 80068ec:	d040      	beq.n	8006970 <HAL_RCC_OscConfig+0x5a8>
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	6a1b      	ldr	r3, [r3, #32]
 80068f2:	2b01      	cmp	r3, #1
 80068f4:	d03c      	beq.n	8006970 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 80068f6:	2301      	movs	r3, #1
 80068f8:	e0e6      	b.n	8006ac8 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	6a1b      	ldr	r3, [r3, #32]
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d01b      	beq.n	800693a <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8006902:	4b50      	ldr	r3, [pc, #320]	; (8006a44 <HAL_RCC_OscConfig+0x67c>)
 8006904:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006906:	4b4f      	ldr	r3, [pc, #316]	; (8006a44 <HAL_RCC_OscConfig+0x67c>)
 8006908:	2180      	movs	r1, #128	; 0x80
 800690a:	0249      	lsls	r1, r1, #9
 800690c:	430a      	orrs	r2, r1
 800690e:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006910:	f7fc fdac 	bl	800346c <HAL_GetTick>
 8006914:	0003      	movs	r3, r0
 8006916:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8006918:	e008      	b.n	800692c <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800691a:	f7fc fda7 	bl	800346c <HAL_GetTick>
 800691e:	0002      	movs	r2, r0
 8006920:	69bb      	ldr	r3, [r7, #24]
 8006922:	1ad3      	subs	r3, r2, r3
 8006924:	2b02      	cmp	r3, #2
 8006926:	d901      	bls.n	800692c <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 8006928:	2303      	movs	r3, #3
 800692a:	e0cd      	b.n	8006ac8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 800692c:	4b45      	ldr	r3, [pc, #276]	; (8006a44 <HAL_RCC_OscConfig+0x67c>)
 800692e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006930:	2380      	movs	r3, #128	; 0x80
 8006932:	025b      	lsls	r3, r3, #9
 8006934:	4013      	ands	r3, r2
 8006936:	d0f0      	beq.n	800691a <HAL_RCC_OscConfig+0x552>
 8006938:	e01b      	b.n	8006972 <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 800693a:	4b42      	ldr	r3, [pc, #264]	; (8006a44 <HAL_RCC_OscConfig+0x67c>)
 800693c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800693e:	4b41      	ldr	r3, [pc, #260]	; (8006a44 <HAL_RCC_OscConfig+0x67c>)
 8006940:	4943      	ldr	r1, [pc, #268]	; (8006a50 <HAL_RCC_OscConfig+0x688>)
 8006942:	400a      	ands	r2, r1
 8006944:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006946:	f7fc fd91 	bl	800346c <HAL_GetTick>
 800694a:	0003      	movs	r3, r0
 800694c:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 800694e:	e008      	b.n	8006962 <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006950:	f7fc fd8c 	bl	800346c <HAL_GetTick>
 8006954:	0002      	movs	r2, r0
 8006956:	69bb      	ldr	r3, [r7, #24]
 8006958:	1ad3      	subs	r3, r2, r3
 800695a:	2b02      	cmp	r3, #2
 800695c:	d901      	bls.n	8006962 <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 800695e:	2303      	movs	r3, #3
 8006960:	e0b2      	b.n	8006ac8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8006962:	4b38      	ldr	r3, [pc, #224]	; (8006a44 <HAL_RCC_OscConfig+0x67c>)
 8006964:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006966:	2380      	movs	r3, #128	; 0x80
 8006968:	025b      	lsls	r3, r3, #9
 800696a:	4013      	ands	r3, r2
 800696c:	d1f0      	bne.n	8006950 <HAL_RCC_OscConfig+0x588>
 800696e:	e000      	b.n	8006972 <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8006970:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006976:	2b00      	cmp	r3, #0
 8006978:	d100      	bne.n	800697c <HAL_RCC_OscConfig+0x5b4>
 800697a:	e0a4      	b.n	8006ac6 <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800697c:	4b31      	ldr	r3, [pc, #196]	; (8006a44 <HAL_RCC_OscConfig+0x67c>)
 800697e:	685b      	ldr	r3, [r3, #4]
 8006980:	220c      	movs	r2, #12
 8006982:	4013      	ands	r3, r2
 8006984:	2b08      	cmp	r3, #8
 8006986:	d100      	bne.n	800698a <HAL_RCC_OscConfig+0x5c2>
 8006988:	e078      	b.n	8006a7c <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800698e:	2b02      	cmp	r3, #2
 8006990:	d14c      	bne.n	8006a2c <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006992:	4b2c      	ldr	r3, [pc, #176]	; (8006a44 <HAL_RCC_OscConfig+0x67c>)
 8006994:	681a      	ldr	r2, [r3, #0]
 8006996:	4b2b      	ldr	r3, [pc, #172]	; (8006a44 <HAL_RCC_OscConfig+0x67c>)
 8006998:	492e      	ldr	r1, [pc, #184]	; (8006a54 <HAL_RCC_OscConfig+0x68c>)
 800699a:	400a      	ands	r2, r1
 800699c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800699e:	f7fc fd65 	bl	800346c <HAL_GetTick>
 80069a2:	0003      	movs	r3, r0
 80069a4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80069a6:	e008      	b.n	80069ba <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80069a8:	f7fc fd60 	bl	800346c <HAL_GetTick>
 80069ac:	0002      	movs	r2, r0
 80069ae:	69bb      	ldr	r3, [r7, #24]
 80069b0:	1ad3      	subs	r3, r2, r3
 80069b2:	2b02      	cmp	r3, #2
 80069b4:	d901      	bls.n	80069ba <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 80069b6:	2303      	movs	r3, #3
 80069b8:	e086      	b.n	8006ac8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80069ba:	4b22      	ldr	r3, [pc, #136]	; (8006a44 <HAL_RCC_OscConfig+0x67c>)
 80069bc:	681a      	ldr	r2, [r3, #0]
 80069be:	2380      	movs	r3, #128	; 0x80
 80069c0:	049b      	lsls	r3, r3, #18
 80069c2:	4013      	ands	r3, r2
 80069c4:	d1f0      	bne.n	80069a8 <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80069c6:	4b1f      	ldr	r3, [pc, #124]	; (8006a44 <HAL_RCC_OscConfig+0x67c>)
 80069c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069ca:	220f      	movs	r2, #15
 80069cc:	4393      	bics	r3, r2
 80069ce:	0019      	movs	r1, r3
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80069d4:	4b1b      	ldr	r3, [pc, #108]	; (8006a44 <HAL_RCC_OscConfig+0x67c>)
 80069d6:	430a      	orrs	r2, r1
 80069d8:	62da      	str	r2, [r3, #44]	; 0x2c
 80069da:	4b1a      	ldr	r3, [pc, #104]	; (8006a44 <HAL_RCC_OscConfig+0x67c>)
 80069dc:	685b      	ldr	r3, [r3, #4]
 80069de:	4a1e      	ldr	r2, [pc, #120]	; (8006a58 <HAL_RCC_OscConfig+0x690>)
 80069e0:	4013      	ands	r3, r2
 80069e2:	0019      	movs	r1, r3
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069ec:	431a      	orrs	r2, r3
 80069ee:	4b15      	ldr	r3, [pc, #84]	; (8006a44 <HAL_RCC_OscConfig+0x67c>)
 80069f0:	430a      	orrs	r2, r1
 80069f2:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80069f4:	4b13      	ldr	r3, [pc, #76]	; (8006a44 <HAL_RCC_OscConfig+0x67c>)
 80069f6:	681a      	ldr	r2, [r3, #0]
 80069f8:	4b12      	ldr	r3, [pc, #72]	; (8006a44 <HAL_RCC_OscConfig+0x67c>)
 80069fa:	2180      	movs	r1, #128	; 0x80
 80069fc:	0449      	lsls	r1, r1, #17
 80069fe:	430a      	orrs	r2, r1
 8006a00:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006a02:	f7fc fd33 	bl	800346c <HAL_GetTick>
 8006a06:	0003      	movs	r3, r0
 8006a08:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006a0a:	e008      	b.n	8006a1e <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006a0c:	f7fc fd2e 	bl	800346c <HAL_GetTick>
 8006a10:	0002      	movs	r2, r0
 8006a12:	69bb      	ldr	r3, [r7, #24]
 8006a14:	1ad3      	subs	r3, r2, r3
 8006a16:	2b02      	cmp	r3, #2
 8006a18:	d901      	bls.n	8006a1e <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 8006a1a:	2303      	movs	r3, #3
 8006a1c:	e054      	b.n	8006ac8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006a1e:	4b09      	ldr	r3, [pc, #36]	; (8006a44 <HAL_RCC_OscConfig+0x67c>)
 8006a20:	681a      	ldr	r2, [r3, #0]
 8006a22:	2380      	movs	r3, #128	; 0x80
 8006a24:	049b      	lsls	r3, r3, #18
 8006a26:	4013      	ands	r3, r2
 8006a28:	d0f0      	beq.n	8006a0c <HAL_RCC_OscConfig+0x644>
 8006a2a:	e04c      	b.n	8006ac6 <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006a2c:	4b05      	ldr	r3, [pc, #20]	; (8006a44 <HAL_RCC_OscConfig+0x67c>)
 8006a2e:	681a      	ldr	r2, [r3, #0]
 8006a30:	4b04      	ldr	r3, [pc, #16]	; (8006a44 <HAL_RCC_OscConfig+0x67c>)
 8006a32:	4908      	ldr	r1, [pc, #32]	; (8006a54 <HAL_RCC_OscConfig+0x68c>)
 8006a34:	400a      	ands	r2, r1
 8006a36:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006a38:	f7fc fd18 	bl	800346c <HAL_GetTick>
 8006a3c:	0003      	movs	r3, r0
 8006a3e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006a40:	e015      	b.n	8006a6e <HAL_RCC_OscConfig+0x6a6>
 8006a42:	46c0      	nop			; (mov r8, r8)
 8006a44:	40021000 	.word	0x40021000
 8006a48:	00001388 	.word	0x00001388
 8006a4c:	efffffff 	.word	0xefffffff
 8006a50:	fffeffff 	.word	0xfffeffff
 8006a54:	feffffff 	.word	0xfeffffff
 8006a58:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006a5c:	f7fc fd06 	bl	800346c <HAL_GetTick>
 8006a60:	0002      	movs	r2, r0
 8006a62:	69bb      	ldr	r3, [r7, #24]
 8006a64:	1ad3      	subs	r3, r2, r3
 8006a66:	2b02      	cmp	r3, #2
 8006a68:	d901      	bls.n	8006a6e <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 8006a6a:	2303      	movs	r3, #3
 8006a6c:	e02c      	b.n	8006ac8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006a6e:	4b18      	ldr	r3, [pc, #96]	; (8006ad0 <HAL_RCC_OscConfig+0x708>)
 8006a70:	681a      	ldr	r2, [r3, #0]
 8006a72:	2380      	movs	r3, #128	; 0x80
 8006a74:	049b      	lsls	r3, r3, #18
 8006a76:	4013      	ands	r3, r2
 8006a78:	d1f0      	bne.n	8006a5c <HAL_RCC_OscConfig+0x694>
 8006a7a:	e024      	b.n	8006ac6 <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a80:	2b01      	cmp	r3, #1
 8006a82:	d101      	bne.n	8006a88 <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 8006a84:	2301      	movs	r3, #1
 8006a86:	e01f      	b.n	8006ac8 <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8006a88:	4b11      	ldr	r3, [pc, #68]	; (8006ad0 <HAL_RCC_OscConfig+0x708>)
 8006a8a:	685b      	ldr	r3, [r3, #4]
 8006a8c:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8006a8e:	4b10      	ldr	r3, [pc, #64]	; (8006ad0 <HAL_RCC_OscConfig+0x708>)
 8006a90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a92:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8006a94:	697a      	ldr	r2, [r7, #20]
 8006a96:	23c0      	movs	r3, #192	; 0xc0
 8006a98:	025b      	lsls	r3, r3, #9
 8006a9a:	401a      	ands	r2, r3
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006aa0:	429a      	cmp	r2, r3
 8006aa2:	d10e      	bne.n	8006ac2 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8006aa4:	693b      	ldr	r3, [r7, #16]
 8006aa6:	220f      	movs	r2, #15
 8006aa8:	401a      	ands	r2, r3
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8006aae:	429a      	cmp	r2, r3
 8006ab0:	d107      	bne.n	8006ac2 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8006ab2:	697a      	ldr	r2, [r7, #20]
 8006ab4:	23f0      	movs	r3, #240	; 0xf0
 8006ab6:	039b      	lsls	r3, r3, #14
 8006ab8:	401a      	ands	r2, r3
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8006abe:	429a      	cmp	r2, r3
 8006ac0:	d001      	beq.n	8006ac6 <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 8006ac2:	2301      	movs	r3, #1
 8006ac4:	e000      	b.n	8006ac8 <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 8006ac6:	2300      	movs	r3, #0
}
 8006ac8:	0018      	movs	r0, r3
 8006aca:	46bd      	mov	sp, r7
 8006acc:	b008      	add	sp, #32
 8006ace:	bd80      	pop	{r7, pc}
 8006ad0:	40021000 	.word	0x40021000

08006ad4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006ad4:	b580      	push	{r7, lr}
 8006ad6:	b084      	sub	sp, #16
 8006ad8:	af00      	add	r7, sp, #0
 8006ada:	6078      	str	r0, [r7, #4]
 8006adc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d101      	bne.n	8006ae8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006ae4:	2301      	movs	r3, #1
 8006ae6:	e0bf      	b.n	8006c68 <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006ae8:	4b61      	ldr	r3, [pc, #388]	; (8006c70 <HAL_RCC_ClockConfig+0x19c>)
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	2201      	movs	r2, #1
 8006aee:	4013      	ands	r3, r2
 8006af0:	683a      	ldr	r2, [r7, #0]
 8006af2:	429a      	cmp	r2, r3
 8006af4:	d911      	bls.n	8006b1a <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006af6:	4b5e      	ldr	r3, [pc, #376]	; (8006c70 <HAL_RCC_ClockConfig+0x19c>)
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	2201      	movs	r2, #1
 8006afc:	4393      	bics	r3, r2
 8006afe:	0019      	movs	r1, r3
 8006b00:	4b5b      	ldr	r3, [pc, #364]	; (8006c70 <HAL_RCC_ClockConfig+0x19c>)
 8006b02:	683a      	ldr	r2, [r7, #0]
 8006b04:	430a      	orrs	r2, r1
 8006b06:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006b08:	4b59      	ldr	r3, [pc, #356]	; (8006c70 <HAL_RCC_ClockConfig+0x19c>)
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	2201      	movs	r2, #1
 8006b0e:	4013      	ands	r3, r2
 8006b10:	683a      	ldr	r2, [r7, #0]
 8006b12:	429a      	cmp	r2, r3
 8006b14:	d001      	beq.n	8006b1a <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8006b16:	2301      	movs	r3, #1
 8006b18:	e0a6      	b.n	8006c68 <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	2202      	movs	r2, #2
 8006b20:	4013      	ands	r3, r2
 8006b22:	d015      	beq.n	8006b50 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	2204      	movs	r2, #4
 8006b2a:	4013      	ands	r3, r2
 8006b2c:	d006      	beq.n	8006b3c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8006b2e:	4b51      	ldr	r3, [pc, #324]	; (8006c74 <HAL_RCC_ClockConfig+0x1a0>)
 8006b30:	685a      	ldr	r2, [r3, #4]
 8006b32:	4b50      	ldr	r3, [pc, #320]	; (8006c74 <HAL_RCC_ClockConfig+0x1a0>)
 8006b34:	21e0      	movs	r1, #224	; 0xe0
 8006b36:	00c9      	lsls	r1, r1, #3
 8006b38:	430a      	orrs	r2, r1
 8006b3a:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006b3c:	4b4d      	ldr	r3, [pc, #308]	; (8006c74 <HAL_RCC_ClockConfig+0x1a0>)
 8006b3e:	685b      	ldr	r3, [r3, #4]
 8006b40:	22f0      	movs	r2, #240	; 0xf0
 8006b42:	4393      	bics	r3, r2
 8006b44:	0019      	movs	r1, r3
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	689a      	ldr	r2, [r3, #8]
 8006b4a:	4b4a      	ldr	r3, [pc, #296]	; (8006c74 <HAL_RCC_ClockConfig+0x1a0>)
 8006b4c:	430a      	orrs	r2, r1
 8006b4e:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	2201      	movs	r2, #1
 8006b56:	4013      	ands	r3, r2
 8006b58:	d04c      	beq.n	8006bf4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	685b      	ldr	r3, [r3, #4]
 8006b5e:	2b01      	cmp	r3, #1
 8006b60:	d107      	bne.n	8006b72 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006b62:	4b44      	ldr	r3, [pc, #272]	; (8006c74 <HAL_RCC_ClockConfig+0x1a0>)
 8006b64:	681a      	ldr	r2, [r3, #0]
 8006b66:	2380      	movs	r3, #128	; 0x80
 8006b68:	029b      	lsls	r3, r3, #10
 8006b6a:	4013      	ands	r3, r2
 8006b6c:	d120      	bne.n	8006bb0 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8006b6e:	2301      	movs	r3, #1
 8006b70:	e07a      	b.n	8006c68 <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	685b      	ldr	r3, [r3, #4]
 8006b76:	2b02      	cmp	r3, #2
 8006b78:	d107      	bne.n	8006b8a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006b7a:	4b3e      	ldr	r3, [pc, #248]	; (8006c74 <HAL_RCC_ClockConfig+0x1a0>)
 8006b7c:	681a      	ldr	r2, [r3, #0]
 8006b7e:	2380      	movs	r3, #128	; 0x80
 8006b80:	049b      	lsls	r3, r3, #18
 8006b82:	4013      	ands	r3, r2
 8006b84:	d114      	bne.n	8006bb0 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8006b86:	2301      	movs	r3, #1
 8006b88:	e06e      	b.n	8006c68 <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	685b      	ldr	r3, [r3, #4]
 8006b8e:	2b03      	cmp	r3, #3
 8006b90:	d107      	bne.n	8006ba2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8006b92:	4b38      	ldr	r3, [pc, #224]	; (8006c74 <HAL_RCC_ClockConfig+0x1a0>)
 8006b94:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006b96:	2380      	movs	r3, #128	; 0x80
 8006b98:	025b      	lsls	r3, r3, #9
 8006b9a:	4013      	ands	r3, r2
 8006b9c:	d108      	bne.n	8006bb0 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8006b9e:	2301      	movs	r3, #1
 8006ba0:	e062      	b.n	8006c68 <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006ba2:	4b34      	ldr	r3, [pc, #208]	; (8006c74 <HAL_RCC_ClockConfig+0x1a0>)
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	2202      	movs	r2, #2
 8006ba8:	4013      	ands	r3, r2
 8006baa:	d101      	bne.n	8006bb0 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8006bac:	2301      	movs	r3, #1
 8006bae:	e05b      	b.n	8006c68 <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006bb0:	4b30      	ldr	r3, [pc, #192]	; (8006c74 <HAL_RCC_ClockConfig+0x1a0>)
 8006bb2:	685b      	ldr	r3, [r3, #4]
 8006bb4:	2203      	movs	r2, #3
 8006bb6:	4393      	bics	r3, r2
 8006bb8:	0019      	movs	r1, r3
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	685a      	ldr	r2, [r3, #4]
 8006bbe:	4b2d      	ldr	r3, [pc, #180]	; (8006c74 <HAL_RCC_ClockConfig+0x1a0>)
 8006bc0:	430a      	orrs	r2, r1
 8006bc2:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006bc4:	f7fc fc52 	bl	800346c <HAL_GetTick>
 8006bc8:	0003      	movs	r3, r0
 8006bca:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006bcc:	e009      	b.n	8006be2 <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006bce:	f7fc fc4d 	bl	800346c <HAL_GetTick>
 8006bd2:	0002      	movs	r2, r0
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	1ad3      	subs	r3, r2, r3
 8006bd8:	4a27      	ldr	r2, [pc, #156]	; (8006c78 <HAL_RCC_ClockConfig+0x1a4>)
 8006bda:	4293      	cmp	r3, r2
 8006bdc:	d901      	bls.n	8006be2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006bde:	2303      	movs	r3, #3
 8006be0:	e042      	b.n	8006c68 <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006be2:	4b24      	ldr	r3, [pc, #144]	; (8006c74 <HAL_RCC_ClockConfig+0x1a0>)
 8006be4:	685b      	ldr	r3, [r3, #4]
 8006be6:	220c      	movs	r2, #12
 8006be8:	401a      	ands	r2, r3
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	685b      	ldr	r3, [r3, #4]
 8006bee:	009b      	lsls	r3, r3, #2
 8006bf0:	429a      	cmp	r2, r3
 8006bf2:	d1ec      	bne.n	8006bce <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006bf4:	4b1e      	ldr	r3, [pc, #120]	; (8006c70 <HAL_RCC_ClockConfig+0x19c>)
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	2201      	movs	r2, #1
 8006bfa:	4013      	ands	r3, r2
 8006bfc:	683a      	ldr	r2, [r7, #0]
 8006bfe:	429a      	cmp	r2, r3
 8006c00:	d211      	bcs.n	8006c26 <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006c02:	4b1b      	ldr	r3, [pc, #108]	; (8006c70 <HAL_RCC_ClockConfig+0x19c>)
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	2201      	movs	r2, #1
 8006c08:	4393      	bics	r3, r2
 8006c0a:	0019      	movs	r1, r3
 8006c0c:	4b18      	ldr	r3, [pc, #96]	; (8006c70 <HAL_RCC_ClockConfig+0x19c>)
 8006c0e:	683a      	ldr	r2, [r7, #0]
 8006c10:	430a      	orrs	r2, r1
 8006c12:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006c14:	4b16      	ldr	r3, [pc, #88]	; (8006c70 <HAL_RCC_ClockConfig+0x19c>)
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	2201      	movs	r2, #1
 8006c1a:	4013      	ands	r3, r2
 8006c1c:	683a      	ldr	r2, [r7, #0]
 8006c1e:	429a      	cmp	r2, r3
 8006c20:	d001      	beq.n	8006c26 <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 8006c22:	2301      	movs	r3, #1
 8006c24:	e020      	b.n	8006c68 <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	2204      	movs	r2, #4
 8006c2c:	4013      	ands	r3, r2
 8006c2e:	d009      	beq.n	8006c44 <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8006c30:	4b10      	ldr	r3, [pc, #64]	; (8006c74 <HAL_RCC_ClockConfig+0x1a0>)
 8006c32:	685b      	ldr	r3, [r3, #4]
 8006c34:	4a11      	ldr	r2, [pc, #68]	; (8006c7c <HAL_RCC_ClockConfig+0x1a8>)
 8006c36:	4013      	ands	r3, r2
 8006c38:	0019      	movs	r1, r3
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	68da      	ldr	r2, [r3, #12]
 8006c3e:	4b0d      	ldr	r3, [pc, #52]	; (8006c74 <HAL_RCC_ClockConfig+0x1a0>)
 8006c40:	430a      	orrs	r2, r1
 8006c42:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8006c44:	f000 f820 	bl	8006c88 <HAL_RCC_GetSysClockFreq>
 8006c48:	0001      	movs	r1, r0
 8006c4a:	4b0a      	ldr	r3, [pc, #40]	; (8006c74 <HAL_RCC_ClockConfig+0x1a0>)
 8006c4c:	685b      	ldr	r3, [r3, #4]
 8006c4e:	091b      	lsrs	r3, r3, #4
 8006c50:	220f      	movs	r2, #15
 8006c52:	4013      	ands	r3, r2
 8006c54:	4a0a      	ldr	r2, [pc, #40]	; (8006c80 <HAL_RCC_ClockConfig+0x1ac>)
 8006c56:	5cd3      	ldrb	r3, [r2, r3]
 8006c58:	000a      	movs	r2, r1
 8006c5a:	40da      	lsrs	r2, r3
 8006c5c:	4b09      	ldr	r3, [pc, #36]	; (8006c84 <HAL_RCC_ClockConfig+0x1b0>)
 8006c5e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8006c60:	2003      	movs	r0, #3
 8006c62:	f7fc fbbd 	bl	80033e0 <HAL_InitTick>
  
  return HAL_OK;
 8006c66:	2300      	movs	r3, #0
}
 8006c68:	0018      	movs	r0, r3
 8006c6a:	46bd      	mov	sp, r7
 8006c6c:	b004      	add	sp, #16
 8006c6e:	bd80      	pop	{r7, pc}
 8006c70:	40022000 	.word	0x40022000
 8006c74:	40021000 	.word	0x40021000
 8006c78:	00001388 	.word	0x00001388
 8006c7c:	fffff8ff 	.word	0xfffff8ff
 8006c80:	0800e428 	.word	0x0800e428
 8006c84:	20000000 	.word	0x20000000

08006c88 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006c88:	b590      	push	{r4, r7, lr}
 8006c8a:	b08f      	sub	sp, #60	; 0x3c
 8006c8c:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8006c8e:	2314      	movs	r3, #20
 8006c90:	18fb      	adds	r3, r7, r3
 8006c92:	4a38      	ldr	r2, [pc, #224]	; (8006d74 <HAL_RCC_GetSysClockFreq+0xec>)
 8006c94:	ca13      	ldmia	r2!, {r0, r1, r4}
 8006c96:	c313      	stmia	r3!, {r0, r1, r4}
 8006c98:	6812      	ldr	r2, [r2, #0]
 8006c9a:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8006c9c:	1d3b      	adds	r3, r7, #4
 8006c9e:	4a36      	ldr	r2, [pc, #216]	; (8006d78 <HAL_RCC_GetSysClockFreq+0xf0>)
 8006ca0:	ca13      	ldmia	r2!, {r0, r1, r4}
 8006ca2:	c313      	stmia	r3!, {r0, r1, r4}
 8006ca4:	6812      	ldr	r2, [r2, #0]
 8006ca6:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8006ca8:	2300      	movs	r3, #0
 8006caa:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006cac:	2300      	movs	r3, #0
 8006cae:	62bb      	str	r3, [r7, #40]	; 0x28
 8006cb0:	2300      	movs	r3, #0
 8006cb2:	637b      	str	r3, [r7, #52]	; 0x34
 8006cb4:	2300      	movs	r3, #0
 8006cb6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8006cb8:	2300      	movs	r3, #0
 8006cba:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8006cbc:	4b2f      	ldr	r3, [pc, #188]	; (8006d7c <HAL_RCC_GetSysClockFreq+0xf4>)
 8006cbe:	685b      	ldr	r3, [r3, #4]
 8006cc0:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8006cc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cc4:	220c      	movs	r2, #12
 8006cc6:	4013      	ands	r3, r2
 8006cc8:	2b0c      	cmp	r3, #12
 8006cca:	d047      	beq.n	8006d5c <HAL_RCC_GetSysClockFreq+0xd4>
 8006ccc:	d849      	bhi.n	8006d62 <HAL_RCC_GetSysClockFreq+0xda>
 8006cce:	2b04      	cmp	r3, #4
 8006cd0:	d002      	beq.n	8006cd8 <HAL_RCC_GetSysClockFreq+0x50>
 8006cd2:	2b08      	cmp	r3, #8
 8006cd4:	d003      	beq.n	8006cde <HAL_RCC_GetSysClockFreq+0x56>
 8006cd6:	e044      	b.n	8006d62 <HAL_RCC_GetSysClockFreq+0xda>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8006cd8:	4b29      	ldr	r3, [pc, #164]	; (8006d80 <HAL_RCC_GetSysClockFreq+0xf8>)
 8006cda:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8006cdc:	e044      	b.n	8006d68 <HAL_RCC_GetSysClockFreq+0xe0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8006cde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ce0:	0c9b      	lsrs	r3, r3, #18
 8006ce2:	220f      	movs	r2, #15
 8006ce4:	4013      	ands	r3, r2
 8006ce6:	2214      	movs	r2, #20
 8006ce8:	18ba      	adds	r2, r7, r2
 8006cea:	5cd3      	ldrb	r3, [r2, r3]
 8006cec:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8006cee:	4b23      	ldr	r3, [pc, #140]	; (8006d7c <HAL_RCC_GetSysClockFreq+0xf4>)
 8006cf0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cf2:	220f      	movs	r2, #15
 8006cf4:	4013      	ands	r3, r2
 8006cf6:	1d3a      	adds	r2, r7, #4
 8006cf8:	5cd3      	ldrb	r3, [r2, r3]
 8006cfa:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8006cfc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006cfe:	23c0      	movs	r3, #192	; 0xc0
 8006d00:	025b      	lsls	r3, r3, #9
 8006d02:	401a      	ands	r2, r3
 8006d04:	2380      	movs	r3, #128	; 0x80
 8006d06:	025b      	lsls	r3, r3, #9
 8006d08:	429a      	cmp	r2, r3
 8006d0a:	d109      	bne.n	8006d20 <HAL_RCC_GetSysClockFreq+0x98>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8006d0c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006d0e:	481c      	ldr	r0, [pc, #112]	; (8006d80 <HAL_RCC_GetSysClockFreq+0xf8>)
 8006d10:	f7f9 fa0c 	bl	800012c <__udivsi3>
 8006d14:	0003      	movs	r3, r0
 8006d16:	001a      	movs	r2, r3
 8006d18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d1a:	4353      	muls	r3, r2
 8006d1c:	637b      	str	r3, [r7, #52]	; 0x34
 8006d1e:	e01a      	b.n	8006d56 <HAL_RCC_GetSysClockFreq+0xce>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8006d20:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006d22:	23c0      	movs	r3, #192	; 0xc0
 8006d24:	025b      	lsls	r3, r3, #9
 8006d26:	401a      	ands	r2, r3
 8006d28:	23c0      	movs	r3, #192	; 0xc0
 8006d2a:	025b      	lsls	r3, r3, #9
 8006d2c:	429a      	cmp	r2, r3
 8006d2e:	d109      	bne.n	8006d44 <HAL_RCC_GetSysClockFreq+0xbc>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8006d30:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006d32:	4814      	ldr	r0, [pc, #80]	; (8006d84 <HAL_RCC_GetSysClockFreq+0xfc>)
 8006d34:	f7f9 f9fa 	bl	800012c <__udivsi3>
 8006d38:	0003      	movs	r3, r0
 8006d3a:	001a      	movs	r2, r3
 8006d3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d3e:	4353      	muls	r3, r2
 8006d40:	637b      	str	r3, [r7, #52]	; 0x34
 8006d42:	e008      	b.n	8006d56 <HAL_RCC_GetSysClockFreq+0xce>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8006d44:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006d46:	4810      	ldr	r0, [pc, #64]	; (8006d88 <HAL_RCC_GetSysClockFreq+0x100>)
 8006d48:	f7f9 f9f0 	bl	800012c <__udivsi3>
 8006d4c:	0003      	movs	r3, r0
 8006d4e:	001a      	movs	r2, r3
 8006d50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d52:	4353      	muls	r3, r2
 8006d54:	637b      	str	r3, [r7, #52]	; 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 8006d56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d58:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8006d5a:	e005      	b.n	8006d68 <HAL_RCC_GetSysClockFreq+0xe0>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 8006d5c:	4b09      	ldr	r3, [pc, #36]	; (8006d84 <HAL_RCC_GetSysClockFreq+0xfc>)
 8006d5e:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8006d60:	e002      	b.n	8006d68 <HAL_RCC_GetSysClockFreq+0xe0>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8006d62:	4b09      	ldr	r3, [pc, #36]	; (8006d88 <HAL_RCC_GetSysClockFreq+0x100>)
 8006d64:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8006d66:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8006d68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8006d6a:	0018      	movs	r0, r3
 8006d6c:	46bd      	mov	sp, r7
 8006d6e:	b00f      	add	sp, #60	; 0x3c
 8006d70:	bd90      	pop	{r4, r7, pc}
 8006d72:	46c0      	nop			; (mov r8, r8)
 8006d74:	0800e2e0 	.word	0x0800e2e0
 8006d78:	0800e2f0 	.word	0x0800e2f0
 8006d7c:	40021000 	.word	0x40021000
 8006d80:	00f42400 	.word	0x00f42400
 8006d84:	02dc6c00 	.word	0x02dc6c00
 8006d88:	007a1200 	.word	0x007a1200

08006d8c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006d8c:	b580      	push	{r7, lr}
 8006d8e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006d90:	4b02      	ldr	r3, [pc, #8]	; (8006d9c <HAL_RCC_GetHCLKFreq+0x10>)
 8006d92:	681b      	ldr	r3, [r3, #0]
}
 8006d94:	0018      	movs	r0, r3
 8006d96:	46bd      	mov	sp, r7
 8006d98:	bd80      	pop	{r7, pc}
 8006d9a:	46c0      	nop			; (mov r8, r8)
 8006d9c:	20000000 	.word	0x20000000

08006da0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006da0:	b580      	push	{r7, lr}
 8006da2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8006da4:	f7ff fff2 	bl	8006d8c <HAL_RCC_GetHCLKFreq>
 8006da8:	0001      	movs	r1, r0
 8006daa:	4b06      	ldr	r3, [pc, #24]	; (8006dc4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006dac:	685b      	ldr	r3, [r3, #4]
 8006dae:	0a1b      	lsrs	r3, r3, #8
 8006db0:	2207      	movs	r2, #7
 8006db2:	4013      	ands	r3, r2
 8006db4:	4a04      	ldr	r2, [pc, #16]	; (8006dc8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006db6:	5cd3      	ldrb	r3, [r2, r3]
 8006db8:	40d9      	lsrs	r1, r3
 8006dba:	000b      	movs	r3, r1
}    
 8006dbc:	0018      	movs	r0, r3
 8006dbe:	46bd      	mov	sp, r7
 8006dc0:	bd80      	pop	{r7, pc}
 8006dc2:	46c0      	nop			; (mov r8, r8)
 8006dc4:	40021000 	.word	0x40021000
 8006dc8:	0800e438 	.word	0x0800e438

08006dcc <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006dcc:	b580      	push	{r7, lr}
 8006dce:	b086      	sub	sp, #24
 8006dd0:	af00      	add	r7, sp, #0
 8006dd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006dd4:	2300      	movs	r3, #0
 8006dd6:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8006dd8:	2300      	movs	r3, #0
 8006dda:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	681a      	ldr	r2, [r3, #0]
 8006de0:	2380      	movs	r3, #128	; 0x80
 8006de2:	025b      	lsls	r3, r3, #9
 8006de4:	4013      	ands	r3, r2
 8006de6:	d100      	bne.n	8006dea <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8006de8:	e08e      	b.n	8006f08 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8006dea:	2017      	movs	r0, #23
 8006dec:	183b      	adds	r3, r7, r0
 8006dee:	2200      	movs	r2, #0
 8006df0:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006df2:	4b6e      	ldr	r3, [pc, #440]	; (8006fac <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006df4:	69da      	ldr	r2, [r3, #28]
 8006df6:	2380      	movs	r3, #128	; 0x80
 8006df8:	055b      	lsls	r3, r3, #21
 8006dfa:	4013      	ands	r3, r2
 8006dfc:	d110      	bne.n	8006e20 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8006dfe:	4b6b      	ldr	r3, [pc, #428]	; (8006fac <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006e00:	69da      	ldr	r2, [r3, #28]
 8006e02:	4b6a      	ldr	r3, [pc, #424]	; (8006fac <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006e04:	2180      	movs	r1, #128	; 0x80
 8006e06:	0549      	lsls	r1, r1, #21
 8006e08:	430a      	orrs	r2, r1
 8006e0a:	61da      	str	r2, [r3, #28]
 8006e0c:	4b67      	ldr	r3, [pc, #412]	; (8006fac <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006e0e:	69da      	ldr	r2, [r3, #28]
 8006e10:	2380      	movs	r3, #128	; 0x80
 8006e12:	055b      	lsls	r3, r3, #21
 8006e14:	4013      	ands	r3, r2
 8006e16:	60bb      	str	r3, [r7, #8]
 8006e18:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006e1a:	183b      	adds	r3, r7, r0
 8006e1c:	2201      	movs	r2, #1
 8006e1e:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006e20:	4b63      	ldr	r3, [pc, #396]	; (8006fb0 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8006e22:	681a      	ldr	r2, [r3, #0]
 8006e24:	2380      	movs	r3, #128	; 0x80
 8006e26:	005b      	lsls	r3, r3, #1
 8006e28:	4013      	ands	r3, r2
 8006e2a:	d11a      	bne.n	8006e62 <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006e2c:	4b60      	ldr	r3, [pc, #384]	; (8006fb0 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8006e2e:	681a      	ldr	r2, [r3, #0]
 8006e30:	4b5f      	ldr	r3, [pc, #380]	; (8006fb0 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8006e32:	2180      	movs	r1, #128	; 0x80
 8006e34:	0049      	lsls	r1, r1, #1
 8006e36:	430a      	orrs	r2, r1
 8006e38:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006e3a:	f7fc fb17 	bl	800346c <HAL_GetTick>
 8006e3e:	0003      	movs	r3, r0
 8006e40:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006e42:	e008      	b.n	8006e56 <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006e44:	f7fc fb12 	bl	800346c <HAL_GetTick>
 8006e48:	0002      	movs	r2, r0
 8006e4a:	693b      	ldr	r3, [r7, #16]
 8006e4c:	1ad3      	subs	r3, r2, r3
 8006e4e:	2b64      	cmp	r3, #100	; 0x64
 8006e50:	d901      	bls.n	8006e56 <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 8006e52:	2303      	movs	r3, #3
 8006e54:	e0a6      	b.n	8006fa4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006e56:	4b56      	ldr	r3, [pc, #344]	; (8006fb0 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8006e58:	681a      	ldr	r2, [r3, #0]
 8006e5a:	2380      	movs	r3, #128	; 0x80
 8006e5c:	005b      	lsls	r3, r3, #1
 8006e5e:	4013      	ands	r3, r2
 8006e60:	d0f0      	beq.n	8006e44 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006e62:	4b52      	ldr	r3, [pc, #328]	; (8006fac <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006e64:	6a1a      	ldr	r2, [r3, #32]
 8006e66:	23c0      	movs	r3, #192	; 0xc0
 8006e68:	009b      	lsls	r3, r3, #2
 8006e6a:	4013      	ands	r3, r2
 8006e6c:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d034      	beq.n	8006ede <HAL_RCCEx_PeriphCLKConfig+0x112>
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	685a      	ldr	r2, [r3, #4]
 8006e78:	23c0      	movs	r3, #192	; 0xc0
 8006e7a:	009b      	lsls	r3, r3, #2
 8006e7c:	4013      	ands	r3, r2
 8006e7e:	68fa      	ldr	r2, [r7, #12]
 8006e80:	429a      	cmp	r2, r3
 8006e82:	d02c      	beq.n	8006ede <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006e84:	4b49      	ldr	r3, [pc, #292]	; (8006fac <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006e86:	6a1b      	ldr	r3, [r3, #32]
 8006e88:	4a4a      	ldr	r2, [pc, #296]	; (8006fb4 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8006e8a:	4013      	ands	r3, r2
 8006e8c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006e8e:	4b47      	ldr	r3, [pc, #284]	; (8006fac <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006e90:	6a1a      	ldr	r2, [r3, #32]
 8006e92:	4b46      	ldr	r3, [pc, #280]	; (8006fac <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006e94:	2180      	movs	r1, #128	; 0x80
 8006e96:	0249      	lsls	r1, r1, #9
 8006e98:	430a      	orrs	r2, r1
 8006e9a:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006e9c:	4b43      	ldr	r3, [pc, #268]	; (8006fac <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006e9e:	6a1a      	ldr	r2, [r3, #32]
 8006ea0:	4b42      	ldr	r3, [pc, #264]	; (8006fac <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006ea2:	4945      	ldr	r1, [pc, #276]	; (8006fb8 <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 8006ea4:	400a      	ands	r2, r1
 8006ea6:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8006ea8:	4b40      	ldr	r3, [pc, #256]	; (8006fac <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006eaa:	68fa      	ldr	r2, [r7, #12]
 8006eac:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	2201      	movs	r2, #1
 8006eb2:	4013      	ands	r3, r2
 8006eb4:	d013      	beq.n	8006ede <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006eb6:	f7fc fad9 	bl	800346c <HAL_GetTick>
 8006eba:	0003      	movs	r3, r0
 8006ebc:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006ebe:	e009      	b.n	8006ed4 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006ec0:	f7fc fad4 	bl	800346c <HAL_GetTick>
 8006ec4:	0002      	movs	r2, r0
 8006ec6:	693b      	ldr	r3, [r7, #16]
 8006ec8:	1ad3      	subs	r3, r2, r3
 8006eca:	4a3c      	ldr	r2, [pc, #240]	; (8006fbc <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 8006ecc:	4293      	cmp	r3, r2
 8006ece:	d901      	bls.n	8006ed4 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8006ed0:	2303      	movs	r3, #3
 8006ed2:	e067      	b.n	8006fa4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006ed4:	4b35      	ldr	r3, [pc, #212]	; (8006fac <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006ed6:	6a1b      	ldr	r3, [r3, #32]
 8006ed8:	2202      	movs	r2, #2
 8006eda:	4013      	ands	r3, r2
 8006edc:	d0f0      	beq.n	8006ec0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006ede:	4b33      	ldr	r3, [pc, #204]	; (8006fac <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006ee0:	6a1b      	ldr	r3, [r3, #32]
 8006ee2:	4a34      	ldr	r2, [pc, #208]	; (8006fb4 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8006ee4:	4013      	ands	r3, r2
 8006ee6:	0019      	movs	r1, r3
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	685a      	ldr	r2, [r3, #4]
 8006eec:	4b2f      	ldr	r3, [pc, #188]	; (8006fac <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006eee:	430a      	orrs	r2, r1
 8006ef0:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8006ef2:	2317      	movs	r3, #23
 8006ef4:	18fb      	adds	r3, r7, r3
 8006ef6:	781b      	ldrb	r3, [r3, #0]
 8006ef8:	2b01      	cmp	r3, #1
 8006efa:	d105      	bne.n	8006f08 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006efc:	4b2b      	ldr	r3, [pc, #172]	; (8006fac <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006efe:	69da      	ldr	r2, [r3, #28]
 8006f00:	4b2a      	ldr	r3, [pc, #168]	; (8006fac <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006f02:	492f      	ldr	r1, [pc, #188]	; (8006fc0 <HAL_RCCEx_PeriphCLKConfig+0x1f4>)
 8006f04:	400a      	ands	r2, r1
 8006f06:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	2201      	movs	r2, #1
 8006f0e:	4013      	ands	r3, r2
 8006f10:	d009      	beq.n	8006f26 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006f12:	4b26      	ldr	r3, [pc, #152]	; (8006fac <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006f14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f16:	2203      	movs	r2, #3
 8006f18:	4393      	bics	r3, r2
 8006f1a:	0019      	movs	r1, r3
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	689a      	ldr	r2, [r3, #8]
 8006f20:	4b22      	ldr	r3, [pc, #136]	; (8006fac <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006f22:	430a      	orrs	r2, r1
 8006f24:	631a      	str	r2, [r3, #48]	; 0x30
  }
  
#if defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	2202      	movs	r2, #2
 8006f2c:	4013      	ands	r3, r2
 8006f2e:	d009      	beq.n	8006f44 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006f30:	4b1e      	ldr	r3, [pc, #120]	; (8006fac <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006f32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f34:	4a23      	ldr	r2, [pc, #140]	; (8006fc4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8006f36:	4013      	ands	r3, r2
 8006f38:	0019      	movs	r1, r3
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	68da      	ldr	r2, [r3, #12]
 8006f3e:	4b1b      	ldr	r3, [pc, #108]	; (8006fac <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006f40:	430a      	orrs	r2, r1
 8006f42:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	2220      	movs	r2, #32
 8006f4a:	4013      	ands	r3, r2
 8006f4c:	d009      	beq.n	8006f62 <HAL_RCCEx_PeriphCLKConfig+0x196>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006f4e:	4b17      	ldr	r3, [pc, #92]	; (8006fac <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006f50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f52:	2210      	movs	r2, #16
 8006f54:	4393      	bics	r3, r2
 8006f56:	0019      	movs	r1, r3
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	691a      	ldr	r2, [r3, #16]
 8006f5c:	4b13      	ldr	r3, [pc, #76]	; (8006fac <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006f5e:	430a      	orrs	r2, r1
 8006f60:	631a      	str	r2, [r3, #48]	; 0x30
  }

#if defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F070x6)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	681a      	ldr	r2, [r3, #0]
 8006f66:	2380      	movs	r3, #128	; 0x80
 8006f68:	029b      	lsls	r3, r3, #10
 8006f6a:	4013      	ands	r3, r2
 8006f6c:	d009      	beq.n	8006f82 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006f6e:	4b0f      	ldr	r3, [pc, #60]	; (8006fac <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006f70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f72:	2280      	movs	r2, #128	; 0x80
 8006f74:	4393      	bics	r3, r2
 8006f76:	0019      	movs	r1, r3
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	699a      	ldr	r2, [r3, #24]
 8006f7c:	4b0b      	ldr	r3, [pc, #44]	; (8006fac <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006f7e:	430a      	orrs	r2, r1
 8006f80:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	681a      	ldr	r2, [r3, #0]
 8006f86:	2380      	movs	r3, #128	; 0x80
 8006f88:	00db      	lsls	r3, r3, #3
 8006f8a:	4013      	ands	r3, r2
 8006f8c:	d009      	beq.n	8006fa2 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8006f8e:	4b07      	ldr	r3, [pc, #28]	; (8006fac <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006f90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f92:	2240      	movs	r2, #64	; 0x40
 8006f94:	4393      	bics	r3, r2
 8006f96:	0019      	movs	r1, r3
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	695a      	ldr	r2, [r3, #20]
 8006f9c:	4b03      	ldr	r3, [pc, #12]	; (8006fac <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006f9e:	430a      	orrs	r2, r1
 8006fa0:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8006fa2:	2300      	movs	r3, #0
}
 8006fa4:	0018      	movs	r0, r3
 8006fa6:	46bd      	mov	sp, r7
 8006fa8:	b006      	add	sp, #24
 8006faa:	bd80      	pop	{r7, pc}
 8006fac:	40021000 	.word	0x40021000
 8006fb0:	40007000 	.word	0x40007000
 8006fb4:	fffffcff 	.word	0xfffffcff
 8006fb8:	fffeffff 	.word	0xfffeffff
 8006fbc:	00001388 	.word	0x00001388
 8006fc0:	efffffff 	.word	0xefffffff
 8006fc4:	fffcffff 	.word	0xfffcffff

08006fc8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006fc8:	b580      	push	{r7, lr}
 8006fca:	b084      	sub	sp, #16
 8006fcc:	af00      	add	r7, sp, #0
 8006fce:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d101      	bne.n	8006fda <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006fd6:	2301      	movs	r3, #1
 8006fd8:	e0a8      	b.n	800712c <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d109      	bne.n	8006ff6 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	685a      	ldr	r2, [r3, #4]
 8006fe6:	2382      	movs	r3, #130	; 0x82
 8006fe8:	005b      	lsls	r3, r3, #1
 8006fea:	429a      	cmp	r2, r3
 8006fec:	d009      	beq.n	8007002 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	2200      	movs	r2, #0
 8006ff2:	61da      	str	r2, [r3, #28]
 8006ff4:	e005      	b.n	8007002 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	2200      	movs	r2, #0
 8006ffa:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	2200      	movs	r2, #0
 8007000:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	2200      	movs	r2, #0
 8007006:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	225d      	movs	r2, #93	; 0x5d
 800700c:	5c9b      	ldrb	r3, [r3, r2]
 800700e:	b2db      	uxtb	r3, r3
 8007010:	2b00      	cmp	r3, #0
 8007012:	d107      	bne.n	8007024 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	225c      	movs	r2, #92	; 0x5c
 8007018:	2100      	movs	r1, #0
 800701a:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	0018      	movs	r0, r3
 8007020:	f7fb fd26 	bl	8002a70 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	225d      	movs	r2, #93	; 0x5d
 8007028:	2102      	movs	r1, #2
 800702a:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	681a      	ldr	r2, [r3, #0]
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	2140      	movs	r1, #64	; 0x40
 8007038:	438a      	bics	r2, r1
 800703a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	68da      	ldr	r2, [r3, #12]
 8007040:	23e0      	movs	r3, #224	; 0xe0
 8007042:	00db      	lsls	r3, r3, #3
 8007044:	429a      	cmp	r2, r3
 8007046:	d902      	bls.n	800704e <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8007048:	2300      	movs	r3, #0
 800704a:	60fb      	str	r3, [r7, #12]
 800704c:	e002      	b.n	8007054 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800704e:	2380      	movs	r3, #128	; 0x80
 8007050:	015b      	lsls	r3, r3, #5
 8007052:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	68da      	ldr	r2, [r3, #12]
 8007058:	23f0      	movs	r3, #240	; 0xf0
 800705a:	011b      	lsls	r3, r3, #4
 800705c:	429a      	cmp	r2, r3
 800705e:	d008      	beq.n	8007072 <HAL_SPI_Init+0xaa>
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	68da      	ldr	r2, [r3, #12]
 8007064:	23e0      	movs	r3, #224	; 0xe0
 8007066:	00db      	lsls	r3, r3, #3
 8007068:	429a      	cmp	r2, r3
 800706a:	d002      	beq.n	8007072 <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	2200      	movs	r2, #0
 8007070:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	685a      	ldr	r2, [r3, #4]
 8007076:	2382      	movs	r3, #130	; 0x82
 8007078:	005b      	lsls	r3, r3, #1
 800707a:	401a      	ands	r2, r3
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	6899      	ldr	r1, [r3, #8]
 8007080:	2384      	movs	r3, #132	; 0x84
 8007082:	021b      	lsls	r3, r3, #8
 8007084:	400b      	ands	r3, r1
 8007086:	431a      	orrs	r2, r3
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	691b      	ldr	r3, [r3, #16]
 800708c:	2102      	movs	r1, #2
 800708e:	400b      	ands	r3, r1
 8007090:	431a      	orrs	r2, r3
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	695b      	ldr	r3, [r3, #20]
 8007096:	2101      	movs	r1, #1
 8007098:	400b      	ands	r3, r1
 800709a:	431a      	orrs	r2, r3
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	6999      	ldr	r1, [r3, #24]
 80070a0:	2380      	movs	r3, #128	; 0x80
 80070a2:	009b      	lsls	r3, r3, #2
 80070a4:	400b      	ands	r3, r1
 80070a6:	431a      	orrs	r2, r3
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	69db      	ldr	r3, [r3, #28]
 80070ac:	2138      	movs	r1, #56	; 0x38
 80070ae:	400b      	ands	r3, r1
 80070b0:	431a      	orrs	r2, r3
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	6a1b      	ldr	r3, [r3, #32]
 80070b6:	2180      	movs	r1, #128	; 0x80
 80070b8:	400b      	ands	r3, r1
 80070ba:	431a      	orrs	r2, r3
 80070bc:	0011      	movs	r1, r2
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80070c2:	2380      	movs	r3, #128	; 0x80
 80070c4:	019b      	lsls	r3, r3, #6
 80070c6:	401a      	ands	r2, r3
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	430a      	orrs	r2, r1
 80070ce:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	699b      	ldr	r3, [r3, #24]
 80070d4:	0c1b      	lsrs	r3, r3, #16
 80070d6:	2204      	movs	r2, #4
 80070d8:	401a      	ands	r2, r3
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070de:	2110      	movs	r1, #16
 80070e0:	400b      	ands	r3, r1
 80070e2:	431a      	orrs	r2, r3
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80070e8:	2108      	movs	r1, #8
 80070ea:	400b      	ands	r3, r1
 80070ec:	431a      	orrs	r2, r3
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	68d9      	ldr	r1, [r3, #12]
 80070f2:	23f0      	movs	r3, #240	; 0xf0
 80070f4:	011b      	lsls	r3, r3, #4
 80070f6:	400b      	ands	r3, r1
 80070f8:	431a      	orrs	r2, r3
 80070fa:	0011      	movs	r1, r2
 80070fc:	68fa      	ldr	r2, [r7, #12]
 80070fe:	2380      	movs	r3, #128	; 0x80
 8007100:	015b      	lsls	r3, r3, #5
 8007102:	401a      	ands	r2, r3
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	430a      	orrs	r2, r1
 800710a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	69da      	ldr	r2, [r3, #28]
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	4907      	ldr	r1, [pc, #28]	; (8007134 <HAL_SPI_Init+0x16c>)
 8007118:	400a      	ands	r2, r1
 800711a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	2200      	movs	r2, #0
 8007120:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	225d      	movs	r2, #93	; 0x5d
 8007126:	2101      	movs	r1, #1
 8007128:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800712a:	2300      	movs	r3, #0
}
 800712c:	0018      	movs	r0, r3
 800712e:	46bd      	mov	sp, r7
 8007130:	b004      	add	sp, #16
 8007132:	bd80      	pop	{r7, pc}
 8007134:	fffff7ff 	.word	0xfffff7ff

08007138 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007138:	b580      	push	{r7, lr}
 800713a:	b088      	sub	sp, #32
 800713c:	af00      	add	r7, sp, #0
 800713e:	60f8      	str	r0, [r7, #12]
 8007140:	60b9      	str	r1, [r7, #8]
 8007142:	603b      	str	r3, [r7, #0]
 8007144:	1dbb      	adds	r3, r7, #6
 8007146:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007148:	231f      	movs	r3, #31
 800714a:	18fb      	adds	r3, r7, r3
 800714c:	2200      	movs	r2, #0
 800714e:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	225c      	movs	r2, #92	; 0x5c
 8007154:	5c9b      	ldrb	r3, [r3, r2]
 8007156:	2b01      	cmp	r3, #1
 8007158:	d101      	bne.n	800715e <HAL_SPI_Transmit+0x26>
 800715a:	2302      	movs	r3, #2
 800715c:	e140      	b.n	80073e0 <HAL_SPI_Transmit+0x2a8>
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	225c      	movs	r2, #92	; 0x5c
 8007162:	2101      	movs	r1, #1
 8007164:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007166:	f7fc f981 	bl	800346c <HAL_GetTick>
 800716a:	0003      	movs	r3, r0
 800716c:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 800716e:	2316      	movs	r3, #22
 8007170:	18fb      	adds	r3, r7, r3
 8007172:	1dba      	adds	r2, r7, #6
 8007174:	8812      	ldrh	r2, [r2, #0]
 8007176:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	225d      	movs	r2, #93	; 0x5d
 800717c:	5c9b      	ldrb	r3, [r3, r2]
 800717e:	b2db      	uxtb	r3, r3
 8007180:	2b01      	cmp	r3, #1
 8007182:	d004      	beq.n	800718e <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 8007184:	231f      	movs	r3, #31
 8007186:	18fb      	adds	r3, r7, r3
 8007188:	2202      	movs	r2, #2
 800718a:	701a      	strb	r2, [r3, #0]
    goto error;
 800718c:	e11d      	b.n	80073ca <HAL_SPI_Transmit+0x292>
  }

  if ((pData == NULL) || (Size == 0U))
 800718e:	68bb      	ldr	r3, [r7, #8]
 8007190:	2b00      	cmp	r3, #0
 8007192:	d003      	beq.n	800719c <HAL_SPI_Transmit+0x64>
 8007194:	1dbb      	adds	r3, r7, #6
 8007196:	881b      	ldrh	r3, [r3, #0]
 8007198:	2b00      	cmp	r3, #0
 800719a:	d104      	bne.n	80071a6 <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 800719c:	231f      	movs	r3, #31
 800719e:	18fb      	adds	r3, r7, r3
 80071a0:	2201      	movs	r2, #1
 80071a2:	701a      	strb	r2, [r3, #0]
    goto error;
 80071a4:	e111      	b.n	80073ca <HAL_SPI_Transmit+0x292>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	225d      	movs	r2, #93	; 0x5d
 80071aa:	2103      	movs	r1, #3
 80071ac:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	2200      	movs	r2, #0
 80071b2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	68ba      	ldr	r2, [r7, #8]
 80071b8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	1dba      	adds	r2, r7, #6
 80071be:	8812      	ldrh	r2, [r2, #0]
 80071c0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	1dba      	adds	r2, r7, #6
 80071c6:	8812      	ldrh	r2, [r2, #0]
 80071c8:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	2200      	movs	r2, #0
 80071ce:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	2244      	movs	r2, #68	; 0x44
 80071d4:	2100      	movs	r1, #0
 80071d6:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	2246      	movs	r2, #70	; 0x46
 80071dc:	2100      	movs	r1, #0
 80071de:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	2200      	movs	r2, #0
 80071e4:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	2200      	movs	r2, #0
 80071ea:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	689a      	ldr	r2, [r3, #8]
 80071f0:	2380      	movs	r3, #128	; 0x80
 80071f2:	021b      	lsls	r3, r3, #8
 80071f4:	429a      	cmp	r2, r3
 80071f6:	d110      	bne.n	800721a <HAL_SPI_Transmit+0xe2>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	681a      	ldr	r2, [r3, #0]
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	2140      	movs	r1, #64	; 0x40
 8007204:	438a      	bics	r2, r1
 8007206:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	681a      	ldr	r2, [r3, #0]
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	2180      	movs	r1, #128	; 0x80
 8007214:	01c9      	lsls	r1, r1, #7
 8007216:	430a      	orrs	r2, r1
 8007218:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	2240      	movs	r2, #64	; 0x40
 8007222:	4013      	ands	r3, r2
 8007224:	2b40      	cmp	r3, #64	; 0x40
 8007226:	d007      	beq.n	8007238 <HAL_SPI_Transmit+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	681a      	ldr	r2, [r3, #0]
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	2140      	movs	r1, #64	; 0x40
 8007234:	430a      	orrs	r2, r1
 8007236:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	68da      	ldr	r2, [r3, #12]
 800723c:	23e0      	movs	r3, #224	; 0xe0
 800723e:	00db      	lsls	r3, r3, #3
 8007240:	429a      	cmp	r2, r3
 8007242:	d94e      	bls.n	80072e2 <HAL_SPI_Transmit+0x1aa>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	685b      	ldr	r3, [r3, #4]
 8007248:	2b00      	cmp	r3, #0
 800724a:	d004      	beq.n	8007256 <HAL_SPI_Transmit+0x11e>
 800724c:	2316      	movs	r3, #22
 800724e:	18fb      	adds	r3, r7, r3
 8007250:	881b      	ldrh	r3, [r3, #0]
 8007252:	2b01      	cmp	r3, #1
 8007254:	d13f      	bne.n	80072d6 <HAL_SPI_Transmit+0x19e>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800725a:	881a      	ldrh	r2, [r3, #0]
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007266:	1c9a      	adds	r2, r3, #2
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007270:	b29b      	uxth	r3, r3
 8007272:	3b01      	subs	r3, #1
 8007274:	b29a      	uxth	r2, r3
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800727a:	e02c      	b.n	80072d6 <HAL_SPI_Transmit+0x19e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	689b      	ldr	r3, [r3, #8]
 8007282:	2202      	movs	r2, #2
 8007284:	4013      	ands	r3, r2
 8007286:	2b02      	cmp	r3, #2
 8007288:	d112      	bne.n	80072b0 <HAL_SPI_Transmit+0x178>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800728e:	881a      	ldrh	r2, [r3, #0]
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800729a:	1c9a      	adds	r2, r3, #2
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80072a4:	b29b      	uxth	r3, r3
 80072a6:	3b01      	subs	r3, #1
 80072a8:	b29a      	uxth	r2, r3
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	87da      	strh	r2, [r3, #62]	; 0x3e
 80072ae:	e012      	b.n	80072d6 <HAL_SPI_Transmit+0x19e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80072b0:	f7fc f8dc 	bl	800346c <HAL_GetTick>
 80072b4:	0002      	movs	r2, r0
 80072b6:	69bb      	ldr	r3, [r7, #24]
 80072b8:	1ad3      	subs	r3, r2, r3
 80072ba:	683a      	ldr	r2, [r7, #0]
 80072bc:	429a      	cmp	r2, r3
 80072be:	d802      	bhi.n	80072c6 <HAL_SPI_Transmit+0x18e>
 80072c0:	683b      	ldr	r3, [r7, #0]
 80072c2:	3301      	adds	r3, #1
 80072c4:	d102      	bne.n	80072cc <HAL_SPI_Transmit+0x194>
 80072c6:	683b      	ldr	r3, [r7, #0]
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	d104      	bne.n	80072d6 <HAL_SPI_Transmit+0x19e>
        {
          errorcode = HAL_TIMEOUT;
 80072cc:	231f      	movs	r3, #31
 80072ce:	18fb      	adds	r3, r7, r3
 80072d0:	2203      	movs	r2, #3
 80072d2:	701a      	strb	r2, [r3, #0]
          goto error;
 80072d4:	e079      	b.n	80073ca <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80072da:	b29b      	uxth	r3, r3
 80072dc:	2b00      	cmp	r3, #0
 80072de:	d1cd      	bne.n	800727c <HAL_SPI_Transmit+0x144>
 80072e0:	e04f      	b.n	8007382 <HAL_SPI_Transmit+0x24a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	685b      	ldr	r3, [r3, #4]
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d004      	beq.n	80072f4 <HAL_SPI_Transmit+0x1bc>
 80072ea:	2316      	movs	r3, #22
 80072ec:	18fb      	adds	r3, r7, r3
 80072ee:	881b      	ldrh	r3, [r3, #0]
 80072f0:	2b01      	cmp	r3, #1
 80072f2:	d141      	bne.n	8007378 <HAL_SPI_Transmit+0x240>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	330c      	adds	r3, #12
 80072fe:	7812      	ldrb	r2, [r2, #0]
 8007300:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007306:	1c5a      	adds	r2, r3, #1
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007310:	b29b      	uxth	r3, r3
 8007312:	3b01      	subs	r3, #1
 8007314:	b29a      	uxth	r2, r3
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while (hspi->TxXferCount > 0U)
 800731a:	e02d      	b.n	8007378 <HAL_SPI_Transmit+0x240>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	689b      	ldr	r3, [r3, #8]
 8007322:	2202      	movs	r2, #2
 8007324:	4013      	ands	r3, r2
 8007326:	2b02      	cmp	r3, #2
 8007328:	d113      	bne.n	8007352 <HAL_SPI_Transmit+0x21a>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	330c      	adds	r3, #12
 8007334:	7812      	ldrb	r2, [r2, #0]
 8007336:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800733c:	1c5a      	adds	r2, r3, #1
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007346:	b29b      	uxth	r3, r3
 8007348:	3b01      	subs	r3, #1
 800734a:	b29a      	uxth	r2, r3
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007350:	e012      	b.n	8007378 <HAL_SPI_Transmit+0x240>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007352:	f7fc f88b 	bl	800346c <HAL_GetTick>
 8007356:	0002      	movs	r2, r0
 8007358:	69bb      	ldr	r3, [r7, #24]
 800735a:	1ad3      	subs	r3, r2, r3
 800735c:	683a      	ldr	r2, [r7, #0]
 800735e:	429a      	cmp	r2, r3
 8007360:	d802      	bhi.n	8007368 <HAL_SPI_Transmit+0x230>
 8007362:	683b      	ldr	r3, [r7, #0]
 8007364:	3301      	adds	r3, #1
 8007366:	d102      	bne.n	800736e <HAL_SPI_Transmit+0x236>
 8007368:	683b      	ldr	r3, [r7, #0]
 800736a:	2b00      	cmp	r3, #0
 800736c:	d104      	bne.n	8007378 <HAL_SPI_Transmit+0x240>
        {
          errorcode = HAL_TIMEOUT;
 800736e:	231f      	movs	r3, #31
 8007370:	18fb      	adds	r3, r7, r3
 8007372:	2203      	movs	r2, #3
 8007374:	701a      	strb	r2, [r3, #0]
          goto error;
 8007376:	e028      	b.n	80073ca <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800737c:	b29b      	uxth	r3, r3
 800737e:	2b00      	cmp	r3, #0
 8007380:	d1cc      	bne.n	800731c <HAL_SPI_Transmit+0x1e4>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007382:	69ba      	ldr	r2, [r7, #24]
 8007384:	6839      	ldr	r1, [r7, #0]
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	0018      	movs	r0, r3
 800738a:	f000 fb2f 	bl	80079ec <SPI_EndRxTxTransaction>
 800738e:	1e03      	subs	r3, r0, #0
 8007390:	d002      	beq.n	8007398 <HAL_SPI_Transmit+0x260>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	2220      	movs	r2, #32
 8007396:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	689b      	ldr	r3, [r3, #8]
 800739c:	2b00      	cmp	r3, #0
 800739e:	d10a      	bne.n	80073b6 <HAL_SPI_Transmit+0x27e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80073a0:	2300      	movs	r3, #0
 80073a2:	613b      	str	r3, [r7, #16]
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	68db      	ldr	r3, [r3, #12]
 80073aa:	613b      	str	r3, [r7, #16]
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	689b      	ldr	r3, [r3, #8]
 80073b2:	613b      	str	r3, [r7, #16]
 80073b4:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	d004      	beq.n	80073c8 <HAL_SPI_Transmit+0x290>
  {
    errorcode = HAL_ERROR;
 80073be:	231f      	movs	r3, #31
 80073c0:	18fb      	adds	r3, r7, r3
 80073c2:	2201      	movs	r2, #1
 80073c4:	701a      	strb	r2, [r3, #0]
 80073c6:	e000      	b.n	80073ca <HAL_SPI_Transmit+0x292>
  }

error:
 80073c8:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	225d      	movs	r2, #93	; 0x5d
 80073ce:	2101      	movs	r1, #1
 80073d0:	5499      	strb	r1, [r3, r2]
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	225c      	movs	r2, #92	; 0x5c
 80073d6:	2100      	movs	r1, #0
 80073d8:	5499      	strb	r1, [r3, r2]
  return errorcode;
 80073da:	231f      	movs	r3, #31
 80073dc:	18fb      	adds	r3, r7, r3
 80073de:	781b      	ldrb	r3, [r3, #0]
}
 80073e0:	0018      	movs	r0, r3
 80073e2:	46bd      	mov	sp, r7
 80073e4:	b008      	add	sp, #32
 80073e6:	bd80      	pop	{r7, pc}

080073e8 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80073e8:	b580      	push	{r7, lr}
 80073ea:	b08a      	sub	sp, #40	; 0x28
 80073ec:	af00      	add	r7, sp, #0
 80073ee:	60f8      	str	r0, [r7, #12]
 80073f0:	60b9      	str	r1, [r7, #8]
 80073f2:	607a      	str	r2, [r7, #4]
 80073f4:	001a      	movs	r2, r3
 80073f6:	1cbb      	adds	r3, r7, #2
 80073f8:	801a      	strh	r2, [r3, #0]
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80073fa:	2301      	movs	r3, #1
 80073fc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80073fe:	2323      	movs	r3, #35	; 0x23
 8007400:	18fb      	adds	r3, r7, r3
 8007402:	2200      	movs	r2, #0
 8007404:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	225c      	movs	r2, #92	; 0x5c
 800740a:	5c9b      	ldrb	r3, [r3, r2]
 800740c:	2b01      	cmp	r3, #1
 800740e:	d101      	bne.n	8007414 <HAL_SPI_TransmitReceive+0x2c>
 8007410:	2302      	movs	r3, #2
 8007412:	e1b5      	b.n	8007780 <HAL_SPI_TransmitReceive+0x398>
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	225c      	movs	r2, #92	; 0x5c
 8007418:	2101      	movs	r1, #1
 800741a:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800741c:	f7fc f826 	bl	800346c <HAL_GetTick>
 8007420:	0003      	movs	r3, r0
 8007422:	61fb      	str	r3, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8007424:	201b      	movs	r0, #27
 8007426:	183b      	adds	r3, r7, r0
 8007428:	68fa      	ldr	r2, [r7, #12]
 800742a:	215d      	movs	r1, #93	; 0x5d
 800742c:	5c52      	ldrb	r2, [r2, r1]
 800742e:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	685b      	ldr	r3, [r3, #4]
 8007434:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8007436:	2312      	movs	r3, #18
 8007438:	18fb      	adds	r3, r7, r3
 800743a:	1cba      	adds	r2, r7, #2
 800743c:	8812      	ldrh	r2, [r2, #0]
 800743e:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8007440:	183b      	adds	r3, r7, r0
 8007442:	781b      	ldrb	r3, [r3, #0]
 8007444:	2b01      	cmp	r3, #1
 8007446:	d011      	beq.n	800746c <HAL_SPI_TransmitReceive+0x84>
 8007448:	697a      	ldr	r2, [r7, #20]
 800744a:	2382      	movs	r3, #130	; 0x82
 800744c:	005b      	lsls	r3, r3, #1
 800744e:	429a      	cmp	r2, r3
 8007450:	d107      	bne.n	8007462 <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	689b      	ldr	r3, [r3, #8]
 8007456:	2b00      	cmp	r3, #0
 8007458:	d103      	bne.n	8007462 <HAL_SPI_TransmitReceive+0x7a>
 800745a:	183b      	adds	r3, r7, r0
 800745c:	781b      	ldrb	r3, [r3, #0]
 800745e:	2b04      	cmp	r3, #4
 8007460:	d004      	beq.n	800746c <HAL_SPI_TransmitReceive+0x84>
  {
    errorcode = HAL_BUSY;
 8007462:	2323      	movs	r3, #35	; 0x23
 8007464:	18fb      	adds	r3, r7, r3
 8007466:	2202      	movs	r2, #2
 8007468:	701a      	strb	r2, [r3, #0]
    goto error;
 800746a:	e17e      	b.n	800776a <HAL_SPI_TransmitReceive+0x382>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800746c:	68bb      	ldr	r3, [r7, #8]
 800746e:	2b00      	cmp	r3, #0
 8007470:	d006      	beq.n	8007480 <HAL_SPI_TransmitReceive+0x98>
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	2b00      	cmp	r3, #0
 8007476:	d003      	beq.n	8007480 <HAL_SPI_TransmitReceive+0x98>
 8007478:	1cbb      	adds	r3, r7, #2
 800747a:	881b      	ldrh	r3, [r3, #0]
 800747c:	2b00      	cmp	r3, #0
 800747e:	d104      	bne.n	800748a <HAL_SPI_TransmitReceive+0xa2>
  {
    errorcode = HAL_ERROR;
 8007480:	2323      	movs	r3, #35	; 0x23
 8007482:	18fb      	adds	r3, r7, r3
 8007484:	2201      	movs	r2, #1
 8007486:	701a      	strb	r2, [r3, #0]
    goto error;
 8007488:	e16f      	b.n	800776a <HAL_SPI_TransmitReceive+0x382>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	225d      	movs	r2, #93	; 0x5d
 800748e:	5c9b      	ldrb	r3, [r3, r2]
 8007490:	b2db      	uxtb	r3, r3
 8007492:	2b04      	cmp	r3, #4
 8007494:	d003      	beq.n	800749e <HAL_SPI_TransmitReceive+0xb6>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	225d      	movs	r2, #93	; 0x5d
 800749a:	2105      	movs	r1, #5
 800749c:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	2200      	movs	r2, #0
 80074a2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	687a      	ldr	r2, [r7, #4]
 80074a8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	1cba      	adds	r2, r7, #2
 80074ae:	2146      	movs	r1, #70	; 0x46
 80074b0:	8812      	ldrh	r2, [r2, #0]
 80074b2:	525a      	strh	r2, [r3, r1]
  hspi->RxXferSize  = Size;
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	1cba      	adds	r2, r7, #2
 80074b8:	2144      	movs	r1, #68	; 0x44
 80074ba:	8812      	ldrh	r2, [r2, #0]
 80074bc:	525a      	strh	r2, [r3, r1]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	68ba      	ldr	r2, [r7, #8]
 80074c2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	1cba      	adds	r2, r7, #2
 80074c8:	8812      	ldrh	r2, [r2, #0]
 80074ca:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	1cba      	adds	r2, r7, #2
 80074d0:	8812      	ldrh	r2, [r2, #0]
 80074d2:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	2200      	movs	r2, #0
 80074d8:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	2200      	movs	r2, #0
 80074de:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	68da      	ldr	r2, [r3, #12]
 80074e4:	23e0      	movs	r3, #224	; 0xe0
 80074e6:	00db      	lsls	r3, r3, #3
 80074e8:	429a      	cmp	r2, r3
 80074ea:	d908      	bls.n	80074fe <HAL_SPI_TransmitReceive+0x116>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	685a      	ldr	r2, [r3, #4]
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	49a4      	ldr	r1, [pc, #656]	; (8007788 <HAL_SPI_TransmitReceive+0x3a0>)
 80074f8:	400a      	ands	r2, r1
 80074fa:	605a      	str	r2, [r3, #4]
 80074fc:	e008      	b.n	8007510 <HAL_SPI_TransmitReceive+0x128>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	685a      	ldr	r2, [r3, #4]
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	2180      	movs	r1, #128	; 0x80
 800750a:	0149      	lsls	r1, r1, #5
 800750c:	430a      	orrs	r2, r1
 800750e:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	2240      	movs	r2, #64	; 0x40
 8007518:	4013      	ands	r3, r2
 800751a:	2b40      	cmp	r3, #64	; 0x40
 800751c:	d007      	beq.n	800752e <HAL_SPI_TransmitReceive+0x146>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	681a      	ldr	r2, [r3, #0]
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	2140      	movs	r1, #64	; 0x40
 800752a:	430a      	orrs	r2, r1
 800752c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	68da      	ldr	r2, [r3, #12]
 8007532:	23e0      	movs	r3, #224	; 0xe0
 8007534:	00db      	lsls	r3, r3, #3
 8007536:	429a      	cmp	r2, r3
 8007538:	d800      	bhi.n	800753c <HAL_SPI_TransmitReceive+0x154>
 800753a:	e07f      	b.n	800763c <HAL_SPI_TransmitReceive+0x254>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	685b      	ldr	r3, [r3, #4]
 8007540:	2b00      	cmp	r3, #0
 8007542:	d005      	beq.n	8007550 <HAL_SPI_TransmitReceive+0x168>
 8007544:	2312      	movs	r3, #18
 8007546:	18fb      	adds	r3, r7, r3
 8007548:	881b      	ldrh	r3, [r3, #0]
 800754a:	2b01      	cmp	r3, #1
 800754c:	d000      	beq.n	8007550 <HAL_SPI_TransmitReceive+0x168>
 800754e:	e069      	b.n	8007624 <HAL_SPI_TransmitReceive+0x23c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007554:	881a      	ldrh	r2, [r3, #0]
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007560:	1c9a      	adds	r2, r3, #2
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800756a:	b29b      	uxth	r3, r3
 800756c:	3b01      	subs	r3, #1
 800756e:	b29a      	uxth	r2, r3
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007574:	e056      	b.n	8007624 <HAL_SPI_TransmitReceive+0x23c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	689b      	ldr	r3, [r3, #8]
 800757c:	2202      	movs	r2, #2
 800757e:	4013      	ands	r3, r2
 8007580:	2b02      	cmp	r3, #2
 8007582:	d11b      	bne.n	80075bc <HAL_SPI_TransmitReceive+0x1d4>
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007588:	b29b      	uxth	r3, r3
 800758a:	2b00      	cmp	r3, #0
 800758c:	d016      	beq.n	80075bc <HAL_SPI_TransmitReceive+0x1d4>
 800758e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007590:	2b01      	cmp	r3, #1
 8007592:	d113      	bne.n	80075bc <HAL_SPI_TransmitReceive+0x1d4>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007598:	881a      	ldrh	r2, [r3, #0]
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075a4:	1c9a      	adds	r2, r3, #2
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80075ae:	b29b      	uxth	r3, r3
 80075b0:	3b01      	subs	r3, #1
 80075b2:	b29a      	uxth	r2, r3
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80075b8:	2300      	movs	r3, #0
 80075ba:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	689b      	ldr	r3, [r3, #8]
 80075c2:	2201      	movs	r2, #1
 80075c4:	4013      	ands	r3, r2
 80075c6:	2b01      	cmp	r3, #1
 80075c8:	d11c      	bne.n	8007604 <HAL_SPI_TransmitReceive+0x21c>
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	2246      	movs	r2, #70	; 0x46
 80075ce:	5a9b      	ldrh	r3, [r3, r2]
 80075d0:	b29b      	uxth	r3, r3
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	d016      	beq.n	8007604 <HAL_SPI_TransmitReceive+0x21c>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	68da      	ldr	r2, [r3, #12]
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075e0:	b292      	uxth	r2, r2
 80075e2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075e8:	1c9a      	adds	r2, r3, #2
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	2246      	movs	r2, #70	; 0x46
 80075f2:	5a9b      	ldrh	r3, [r3, r2]
 80075f4:	b29b      	uxth	r3, r3
 80075f6:	3b01      	subs	r3, #1
 80075f8:	b299      	uxth	r1, r3
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	2246      	movs	r2, #70	; 0x46
 80075fe:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007600:	2301      	movs	r3, #1
 8007602:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8007604:	f7fb ff32 	bl	800346c <HAL_GetTick>
 8007608:	0002      	movs	r2, r0
 800760a:	69fb      	ldr	r3, [r7, #28]
 800760c:	1ad3      	subs	r3, r2, r3
 800760e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007610:	429a      	cmp	r2, r3
 8007612:	d807      	bhi.n	8007624 <HAL_SPI_TransmitReceive+0x23c>
 8007614:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007616:	3301      	adds	r3, #1
 8007618:	d004      	beq.n	8007624 <HAL_SPI_TransmitReceive+0x23c>
      {
        errorcode = HAL_TIMEOUT;
 800761a:	2323      	movs	r3, #35	; 0x23
 800761c:	18fb      	adds	r3, r7, r3
 800761e:	2203      	movs	r2, #3
 8007620:	701a      	strb	r2, [r3, #0]
        goto error;
 8007622:	e0a2      	b.n	800776a <HAL_SPI_TransmitReceive+0x382>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007628:	b29b      	uxth	r3, r3
 800762a:	2b00      	cmp	r3, #0
 800762c:	d1a3      	bne.n	8007576 <HAL_SPI_TransmitReceive+0x18e>
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	2246      	movs	r2, #70	; 0x46
 8007632:	5a9b      	ldrh	r3, [r3, r2]
 8007634:	b29b      	uxth	r3, r3
 8007636:	2b00      	cmp	r3, #0
 8007638:	d19d      	bne.n	8007576 <HAL_SPI_TransmitReceive+0x18e>
 800763a:	e085      	b.n	8007748 <HAL_SPI_TransmitReceive+0x360>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800763c:	68fb      	ldr	r3, [r7, #12]
 800763e:	685b      	ldr	r3, [r3, #4]
 8007640:	2b00      	cmp	r3, #0
 8007642:	d005      	beq.n	8007650 <HAL_SPI_TransmitReceive+0x268>
 8007644:	2312      	movs	r3, #18
 8007646:	18fb      	adds	r3, r7, r3
 8007648:	881b      	ldrh	r3, [r3, #0]
 800764a:	2b01      	cmp	r3, #1
 800764c:	d000      	beq.n	8007650 <HAL_SPI_TransmitReceive+0x268>
 800764e:	e070      	b.n	8007732 <HAL_SPI_TransmitReceive+0x34a>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	330c      	adds	r3, #12
 800765a:	7812      	ldrb	r2, [r2, #0]
 800765c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007662:	1c5a      	adds	r2, r3, #1
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800766c:	b29b      	uxth	r3, r3
 800766e:	3b01      	subs	r3, #1
 8007670:	b29a      	uxth	r2, r3
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007676:	e05c      	b.n	8007732 <HAL_SPI_TransmitReceive+0x34a>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	689b      	ldr	r3, [r3, #8]
 800767e:	2202      	movs	r2, #2
 8007680:	4013      	ands	r3, r2
 8007682:	2b02      	cmp	r3, #2
 8007684:	d11c      	bne.n	80076c0 <HAL_SPI_TransmitReceive+0x2d8>
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800768a:	b29b      	uxth	r3, r3
 800768c:	2b00      	cmp	r3, #0
 800768e:	d017      	beq.n	80076c0 <HAL_SPI_TransmitReceive+0x2d8>
 8007690:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007692:	2b01      	cmp	r3, #1
 8007694:	d114      	bne.n	80076c0 <HAL_SPI_TransmitReceive+0x2d8>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	330c      	adds	r3, #12
 80076a0:	7812      	ldrb	r2, [r2, #0]
 80076a2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076a8:	1c5a      	adds	r2, r3, #1
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80076b2:	b29b      	uxth	r3, r3
 80076b4:	3b01      	subs	r3, #1
 80076b6:	b29a      	uxth	r2, r3
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80076bc:	2300      	movs	r3, #0
 80076be:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	689b      	ldr	r3, [r3, #8]
 80076c6:	2201      	movs	r2, #1
 80076c8:	4013      	ands	r3, r2
 80076ca:	2b01      	cmp	r3, #1
 80076cc:	d11e      	bne.n	800770c <HAL_SPI_TransmitReceive+0x324>
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	2246      	movs	r2, #70	; 0x46
 80076d2:	5a9b      	ldrh	r3, [r3, r2]
 80076d4:	b29b      	uxth	r3, r3
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d018      	beq.n	800770c <HAL_SPI_TransmitReceive+0x324>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	330c      	adds	r3, #12
 80076e0:	001a      	movs	r2, r3
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076e6:	7812      	ldrb	r2, [r2, #0]
 80076e8:	b2d2      	uxtb	r2, r2
 80076ea:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076f0:	1c5a      	adds	r2, r3, #1
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	2246      	movs	r2, #70	; 0x46
 80076fa:	5a9b      	ldrh	r3, [r3, r2]
 80076fc:	b29b      	uxth	r3, r3
 80076fe:	3b01      	subs	r3, #1
 8007700:	b299      	uxth	r1, r3
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	2246      	movs	r2, #70	; 0x46
 8007706:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007708:	2301      	movs	r3, #1
 800770a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800770c:	f7fb feae 	bl	800346c <HAL_GetTick>
 8007710:	0002      	movs	r2, r0
 8007712:	69fb      	ldr	r3, [r7, #28]
 8007714:	1ad3      	subs	r3, r2, r3
 8007716:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007718:	429a      	cmp	r2, r3
 800771a:	d802      	bhi.n	8007722 <HAL_SPI_TransmitReceive+0x33a>
 800771c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800771e:	3301      	adds	r3, #1
 8007720:	d102      	bne.n	8007728 <HAL_SPI_TransmitReceive+0x340>
 8007722:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007724:	2b00      	cmp	r3, #0
 8007726:	d104      	bne.n	8007732 <HAL_SPI_TransmitReceive+0x34a>
      {
        errorcode = HAL_TIMEOUT;
 8007728:	2323      	movs	r3, #35	; 0x23
 800772a:	18fb      	adds	r3, r7, r3
 800772c:	2203      	movs	r2, #3
 800772e:	701a      	strb	r2, [r3, #0]
        goto error;
 8007730:	e01b      	b.n	800776a <HAL_SPI_TransmitReceive+0x382>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007736:	b29b      	uxth	r3, r3
 8007738:	2b00      	cmp	r3, #0
 800773a:	d19d      	bne.n	8007678 <HAL_SPI_TransmitReceive+0x290>
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	2246      	movs	r2, #70	; 0x46
 8007740:	5a9b      	ldrh	r3, [r3, r2]
 8007742:	b29b      	uxth	r3, r3
 8007744:	2b00      	cmp	r3, #0
 8007746:	d197      	bne.n	8007678 <HAL_SPI_TransmitReceive+0x290>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007748:	69fa      	ldr	r2, [r7, #28]
 800774a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	0018      	movs	r0, r3
 8007750:	f000 f94c 	bl	80079ec <SPI_EndRxTxTransaction>
 8007754:	1e03      	subs	r3, r0, #0
 8007756:	d007      	beq.n	8007768 <HAL_SPI_TransmitReceive+0x380>
  {
    errorcode = HAL_ERROR;
 8007758:	2323      	movs	r3, #35	; 0x23
 800775a:	18fb      	adds	r3, r7, r3
 800775c:	2201      	movs	r2, #1
 800775e:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	2220      	movs	r2, #32
 8007764:	661a      	str	r2, [r3, #96]	; 0x60
 8007766:	e000      	b.n	800776a <HAL_SPI_TransmitReceive+0x382>
  }

error :
 8007768:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	225d      	movs	r2, #93	; 0x5d
 800776e:	2101      	movs	r1, #1
 8007770:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	225c      	movs	r2, #92	; 0x5c
 8007776:	2100      	movs	r1, #0
 8007778:	5499      	strb	r1, [r3, r2]
  return errorcode;
 800777a:	2323      	movs	r3, #35	; 0x23
 800777c:	18fb      	adds	r3, r7, r3
 800777e:	781b      	ldrb	r3, [r3, #0]
}
 8007780:	0018      	movs	r0, r3
 8007782:	46bd      	mov	sp, r7
 8007784:	b00a      	add	sp, #40	; 0x28
 8007786:	bd80      	pop	{r7, pc}
 8007788:	ffffefff 	.word	0xffffefff

0800778c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800778c:	b580      	push	{r7, lr}
 800778e:	b088      	sub	sp, #32
 8007790:	af00      	add	r7, sp, #0
 8007792:	60f8      	str	r0, [r7, #12]
 8007794:	60b9      	str	r1, [r7, #8]
 8007796:	603b      	str	r3, [r7, #0]
 8007798:	1dfb      	adds	r3, r7, #7
 800779a:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800779c:	f7fb fe66 	bl	800346c <HAL_GetTick>
 80077a0:	0002      	movs	r2, r0
 80077a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077a4:	1a9b      	subs	r3, r3, r2
 80077a6:	683a      	ldr	r2, [r7, #0]
 80077a8:	18d3      	adds	r3, r2, r3
 80077aa:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80077ac:	f7fb fe5e 	bl	800346c <HAL_GetTick>
 80077b0:	0003      	movs	r3, r0
 80077b2:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80077b4:	4b3a      	ldr	r3, [pc, #232]	; (80078a0 <SPI_WaitFlagStateUntilTimeout+0x114>)
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	015b      	lsls	r3, r3, #5
 80077ba:	0d1b      	lsrs	r3, r3, #20
 80077bc:	69fa      	ldr	r2, [r7, #28]
 80077be:	4353      	muls	r3, r2
 80077c0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80077c2:	e058      	b.n	8007876 <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 80077c4:	683b      	ldr	r3, [r7, #0]
 80077c6:	3301      	adds	r3, #1
 80077c8:	d055      	beq.n	8007876 <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80077ca:	f7fb fe4f 	bl	800346c <HAL_GetTick>
 80077ce:	0002      	movs	r2, r0
 80077d0:	69bb      	ldr	r3, [r7, #24]
 80077d2:	1ad3      	subs	r3, r2, r3
 80077d4:	69fa      	ldr	r2, [r7, #28]
 80077d6:	429a      	cmp	r2, r3
 80077d8:	d902      	bls.n	80077e0 <SPI_WaitFlagStateUntilTimeout+0x54>
 80077da:	69fb      	ldr	r3, [r7, #28]
 80077dc:	2b00      	cmp	r3, #0
 80077de:	d142      	bne.n	8007866 <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	685a      	ldr	r2, [r3, #4]
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	21e0      	movs	r1, #224	; 0xe0
 80077ec:	438a      	bics	r2, r1
 80077ee:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	685a      	ldr	r2, [r3, #4]
 80077f4:	2382      	movs	r3, #130	; 0x82
 80077f6:	005b      	lsls	r3, r3, #1
 80077f8:	429a      	cmp	r2, r3
 80077fa:	d113      	bne.n	8007824 <SPI_WaitFlagStateUntilTimeout+0x98>
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	689a      	ldr	r2, [r3, #8]
 8007800:	2380      	movs	r3, #128	; 0x80
 8007802:	021b      	lsls	r3, r3, #8
 8007804:	429a      	cmp	r2, r3
 8007806:	d005      	beq.n	8007814 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	689a      	ldr	r2, [r3, #8]
 800780c:	2380      	movs	r3, #128	; 0x80
 800780e:	00db      	lsls	r3, r3, #3
 8007810:	429a      	cmp	r2, r3
 8007812:	d107      	bne.n	8007824 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	681a      	ldr	r2, [r3, #0]
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	2140      	movs	r1, #64	; 0x40
 8007820:	438a      	bics	r2, r1
 8007822:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007828:	2380      	movs	r3, #128	; 0x80
 800782a:	019b      	lsls	r3, r3, #6
 800782c:	429a      	cmp	r2, r3
 800782e:	d110      	bne.n	8007852 <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	681a      	ldr	r2, [r3, #0]
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	491a      	ldr	r1, [pc, #104]	; (80078a4 <SPI_WaitFlagStateUntilTimeout+0x118>)
 800783c:	400a      	ands	r2, r1
 800783e:	601a      	str	r2, [r3, #0]
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	681a      	ldr	r2, [r3, #0]
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	2180      	movs	r1, #128	; 0x80
 800784c:	0189      	lsls	r1, r1, #6
 800784e:	430a      	orrs	r2, r1
 8007850:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	225d      	movs	r2, #93	; 0x5d
 8007856:	2101      	movs	r1, #1
 8007858:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	225c      	movs	r2, #92	; 0x5c
 800785e:	2100      	movs	r1, #0
 8007860:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8007862:	2303      	movs	r3, #3
 8007864:	e017      	b.n	8007896 <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8007866:	697b      	ldr	r3, [r7, #20]
 8007868:	2b00      	cmp	r3, #0
 800786a:	d101      	bne.n	8007870 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 800786c:	2300      	movs	r3, #0
 800786e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8007870:	697b      	ldr	r3, [r7, #20]
 8007872:	3b01      	subs	r3, #1
 8007874:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	689b      	ldr	r3, [r3, #8]
 800787c:	68ba      	ldr	r2, [r7, #8]
 800787e:	4013      	ands	r3, r2
 8007880:	68ba      	ldr	r2, [r7, #8]
 8007882:	1ad3      	subs	r3, r2, r3
 8007884:	425a      	negs	r2, r3
 8007886:	4153      	adcs	r3, r2
 8007888:	b2db      	uxtb	r3, r3
 800788a:	001a      	movs	r2, r3
 800788c:	1dfb      	adds	r3, r7, #7
 800788e:	781b      	ldrb	r3, [r3, #0]
 8007890:	429a      	cmp	r2, r3
 8007892:	d197      	bne.n	80077c4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8007894:	2300      	movs	r3, #0
}
 8007896:	0018      	movs	r0, r3
 8007898:	46bd      	mov	sp, r7
 800789a:	b008      	add	sp, #32
 800789c:	bd80      	pop	{r7, pc}
 800789e:	46c0      	nop			; (mov r8, r8)
 80078a0:	20000000 	.word	0x20000000
 80078a4:	ffffdfff 	.word	0xffffdfff

080078a8 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80078a8:	b580      	push	{r7, lr}
 80078aa:	b08a      	sub	sp, #40	; 0x28
 80078ac:	af00      	add	r7, sp, #0
 80078ae:	60f8      	str	r0, [r7, #12]
 80078b0:	60b9      	str	r1, [r7, #8]
 80078b2:	607a      	str	r2, [r7, #4]
 80078b4:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80078b6:	2317      	movs	r3, #23
 80078b8:	18fb      	adds	r3, r7, r3
 80078ba:	2200      	movs	r2, #0
 80078bc:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80078be:	f7fb fdd5 	bl	800346c <HAL_GetTick>
 80078c2:	0002      	movs	r2, r0
 80078c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078c6:	1a9b      	subs	r3, r3, r2
 80078c8:	683a      	ldr	r2, [r7, #0]
 80078ca:	18d3      	adds	r3, r2, r3
 80078cc:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 80078ce:	f7fb fdcd 	bl	800346c <HAL_GetTick>
 80078d2:	0003      	movs	r3, r0
 80078d4:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	330c      	adds	r3, #12
 80078dc:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80078de:	4b41      	ldr	r3, [pc, #260]	; (80079e4 <SPI_WaitFifoStateUntilTimeout+0x13c>)
 80078e0:	681a      	ldr	r2, [r3, #0]
 80078e2:	0013      	movs	r3, r2
 80078e4:	009b      	lsls	r3, r3, #2
 80078e6:	189b      	adds	r3, r3, r2
 80078e8:	00da      	lsls	r2, r3, #3
 80078ea:	1ad3      	subs	r3, r2, r3
 80078ec:	0d1b      	lsrs	r3, r3, #20
 80078ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80078f0:	4353      	muls	r3, r2
 80078f2:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80078f4:	e068      	b.n	80079c8 <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80078f6:	68ba      	ldr	r2, [r7, #8]
 80078f8:	23c0      	movs	r3, #192	; 0xc0
 80078fa:	00db      	lsls	r3, r3, #3
 80078fc:	429a      	cmp	r2, r3
 80078fe:	d10a      	bne.n	8007916 <SPI_WaitFifoStateUntilTimeout+0x6e>
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	2b00      	cmp	r3, #0
 8007904:	d107      	bne.n	8007916 <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8007906:	69fb      	ldr	r3, [r7, #28]
 8007908:	781b      	ldrb	r3, [r3, #0]
 800790a:	b2da      	uxtb	r2, r3
 800790c:	2117      	movs	r1, #23
 800790e:	187b      	adds	r3, r7, r1
 8007910:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8007912:	187b      	adds	r3, r7, r1
 8007914:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8007916:	683b      	ldr	r3, [r7, #0]
 8007918:	3301      	adds	r3, #1
 800791a:	d055      	beq.n	80079c8 <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800791c:	f7fb fda6 	bl	800346c <HAL_GetTick>
 8007920:	0002      	movs	r2, r0
 8007922:	6a3b      	ldr	r3, [r7, #32]
 8007924:	1ad3      	subs	r3, r2, r3
 8007926:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007928:	429a      	cmp	r2, r3
 800792a:	d902      	bls.n	8007932 <SPI_WaitFifoStateUntilTimeout+0x8a>
 800792c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800792e:	2b00      	cmp	r3, #0
 8007930:	d142      	bne.n	80079b8 <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	685a      	ldr	r2, [r3, #4]
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	21e0      	movs	r1, #224	; 0xe0
 800793e:	438a      	bics	r2, r1
 8007940:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	685a      	ldr	r2, [r3, #4]
 8007946:	2382      	movs	r3, #130	; 0x82
 8007948:	005b      	lsls	r3, r3, #1
 800794a:	429a      	cmp	r2, r3
 800794c:	d113      	bne.n	8007976 <SPI_WaitFifoStateUntilTimeout+0xce>
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	689a      	ldr	r2, [r3, #8]
 8007952:	2380      	movs	r3, #128	; 0x80
 8007954:	021b      	lsls	r3, r3, #8
 8007956:	429a      	cmp	r2, r3
 8007958:	d005      	beq.n	8007966 <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	689a      	ldr	r2, [r3, #8]
 800795e:	2380      	movs	r3, #128	; 0x80
 8007960:	00db      	lsls	r3, r3, #3
 8007962:	429a      	cmp	r2, r3
 8007964:	d107      	bne.n	8007976 <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	681a      	ldr	r2, [r3, #0]
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	2140      	movs	r1, #64	; 0x40
 8007972:	438a      	bics	r2, r1
 8007974:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007976:	68fb      	ldr	r3, [r7, #12]
 8007978:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800797a:	2380      	movs	r3, #128	; 0x80
 800797c:	019b      	lsls	r3, r3, #6
 800797e:	429a      	cmp	r2, r3
 8007980:	d110      	bne.n	80079a4 <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	681a      	ldr	r2, [r3, #0]
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	4916      	ldr	r1, [pc, #88]	; (80079e8 <SPI_WaitFifoStateUntilTimeout+0x140>)
 800798e:	400a      	ands	r2, r1
 8007990:	601a      	str	r2, [r3, #0]
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	681a      	ldr	r2, [r3, #0]
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	2180      	movs	r1, #128	; 0x80
 800799e:	0189      	lsls	r1, r1, #6
 80079a0:	430a      	orrs	r2, r1
 80079a2:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	225d      	movs	r2, #93	; 0x5d
 80079a8:	2101      	movs	r1, #1
 80079aa:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	225c      	movs	r2, #92	; 0x5c
 80079b0:	2100      	movs	r1, #0
 80079b2:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80079b4:	2303      	movs	r3, #3
 80079b6:	e010      	b.n	80079da <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80079b8:	69bb      	ldr	r3, [r7, #24]
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	d101      	bne.n	80079c2 <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 80079be:	2300      	movs	r3, #0
 80079c0:	627b      	str	r3, [r7, #36]	; 0x24
      }      
      count--;
 80079c2:	69bb      	ldr	r3, [r7, #24]
 80079c4:	3b01      	subs	r3, #1
 80079c6:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	689b      	ldr	r3, [r3, #8]
 80079ce:	68ba      	ldr	r2, [r7, #8]
 80079d0:	4013      	ands	r3, r2
 80079d2:	687a      	ldr	r2, [r7, #4]
 80079d4:	429a      	cmp	r2, r3
 80079d6:	d18e      	bne.n	80078f6 <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 80079d8:	2300      	movs	r3, #0
}
 80079da:	0018      	movs	r0, r3
 80079dc:	46bd      	mov	sp, r7
 80079de:	b00a      	add	sp, #40	; 0x28
 80079e0:	bd80      	pop	{r7, pc}
 80079e2:	46c0      	nop			; (mov r8, r8)
 80079e4:	20000000 	.word	0x20000000
 80079e8:	ffffdfff 	.word	0xffffdfff

080079ec <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80079ec:	b580      	push	{r7, lr}
 80079ee:	b086      	sub	sp, #24
 80079f0:	af02      	add	r7, sp, #8
 80079f2:	60f8      	str	r0, [r7, #12]
 80079f4:	60b9      	str	r1, [r7, #8]
 80079f6:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80079f8:	68ba      	ldr	r2, [r7, #8]
 80079fa:	23c0      	movs	r3, #192	; 0xc0
 80079fc:	0159      	lsls	r1, r3, #5
 80079fe:	68f8      	ldr	r0, [r7, #12]
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	9300      	str	r3, [sp, #0]
 8007a04:	0013      	movs	r3, r2
 8007a06:	2200      	movs	r2, #0
 8007a08:	f7ff ff4e 	bl	80078a8 <SPI_WaitFifoStateUntilTimeout>
 8007a0c:	1e03      	subs	r3, r0, #0
 8007a0e:	d007      	beq.n	8007a20 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007a14:	2220      	movs	r2, #32
 8007a16:	431a      	orrs	r2, r3
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8007a1c:	2303      	movs	r3, #3
 8007a1e:	e027      	b.n	8007a70 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007a20:	68ba      	ldr	r2, [r7, #8]
 8007a22:	68f8      	ldr	r0, [r7, #12]
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	9300      	str	r3, [sp, #0]
 8007a28:	0013      	movs	r3, r2
 8007a2a:	2200      	movs	r2, #0
 8007a2c:	2180      	movs	r1, #128	; 0x80
 8007a2e:	f7ff fead 	bl	800778c <SPI_WaitFlagStateUntilTimeout>
 8007a32:	1e03      	subs	r3, r0, #0
 8007a34:	d007      	beq.n	8007a46 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007a36:	68fb      	ldr	r3, [r7, #12]
 8007a38:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007a3a:	2220      	movs	r2, #32
 8007a3c:	431a      	orrs	r2, r3
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8007a42:	2303      	movs	r3, #3
 8007a44:	e014      	b.n	8007a70 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007a46:	68ba      	ldr	r2, [r7, #8]
 8007a48:	23c0      	movs	r3, #192	; 0xc0
 8007a4a:	00d9      	lsls	r1, r3, #3
 8007a4c:	68f8      	ldr	r0, [r7, #12]
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	9300      	str	r3, [sp, #0]
 8007a52:	0013      	movs	r3, r2
 8007a54:	2200      	movs	r2, #0
 8007a56:	f7ff ff27 	bl	80078a8 <SPI_WaitFifoStateUntilTimeout>
 8007a5a:	1e03      	subs	r3, r0, #0
 8007a5c:	d007      	beq.n	8007a6e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007a62:	2220      	movs	r2, #32
 8007a64:	431a      	orrs	r2, r3
 8007a66:	68fb      	ldr	r3, [r7, #12]
 8007a68:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8007a6a:	2303      	movs	r3, #3
 8007a6c:	e000      	b.n	8007a70 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8007a6e:	2300      	movs	r3, #0
}
 8007a70:	0018      	movs	r0, r3
 8007a72:	46bd      	mov	sp, r7
 8007a74:	b004      	add	sp, #16
 8007a76:	bd80      	pop	{r7, pc}

08007a78 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007a78:	b580      	push	{r7, lr}
 8007a7a:	b082      	sub	sp, #8
 8007a7c:	af00      	add	r7, sp, #0
 8007a7e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d101      	bne.n	8007a8a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007a86:	2301      	movs	r3, #1
 8007a88:	e042      	b.n	8007b10 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	223d      	movs	r2, #61	; 0x3d
 8007a8e:	5c9b      	ldrb	r3, [r3, r2]
 8007a90:	b2db      	uxtb	r3, r3
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	d107      	bne.n	8007aa6 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	223c      	movs	r2, #60	; 0x3c
 8007a9a:	2100      	movs	r1, #0
 8007a9c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	0018      	movs	r0, r3
 8007aa2:	f7fb f833 	bl	8002b0c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	223d      	movs	r2, #61	; 0x3d
 8007aaa:	2102      	movs	r1, #2
 8007aac:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	681a      	ldr	r2, [r3, #0]
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	3304      	adds	r3, #4
 8007ab6:	0019      	movs	r1, r3
 8007ab8:	0010      	movs	r0, r2
 8007aba:	f000 fa65 	bl	8007f88 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	2246      	movs	r2, #70	; 0x46
 8007ac2:	2101      	movs	r1, #1
 8007ac4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	223e      	movs	r2, #62	; 0x3e
 8007aca:	2101      	movs	r1, #1
 8007acc:	5499      	strb	r1, [r3, r2]
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	223f      	movs	r2, #63	; 0x3f
 8007ad2:	2101      	movs	r1, #1
 8007ad4:	5499      	strb	r1, [r3, r2]
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	2240      	movs	r2, #64	; 0x40
 8007ada:	2101      	movs	r1, #1
 8007adc:	5499      	strb	r1, [r3, r2]
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	2241      	movs	r2, #65	; 0x41
 8007ae2:	2101      	movs	r1, #1
 8007ae4:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	2242      	movs	r2, #66	; 0x42
 8007aea:	2101      	movs	r1, #1
 8007aec:	5499      	strb	r1, [r3, r2]
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	2243      	movs	r2, #67	; 0x43
 8007af2:	2101      	movs	r1, #1
 8007af4:	5499      	strb	r1, [r3, r2]
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	2244      	movs	r2, #68	; 0x44
 8007afa:	2101      	movs	r1, #1
 8007afc:	5499      	strb	r1, [r3, r2]
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	2245      	movs	r2, #69	; 0x45
 8007b02:	2101      	movs	r1, #1
 8007b04:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	223d      	movs	r2, #61	; 0x3d
 8007b0a:	2101      	movs	r1, #1
 8007b0c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007b0e:	2300      	movs	r3, #0
}
 8007b10:	0018      	movs	r0, r3
 8007b12:	46bd      	mov	sp, r7
 8007b14:	b002      	add	sp, #8
 8007b16:	bd80      	pop	{r7, pc}

08007b18 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007b18:	b580      	push	{r7, lr}
 8007b1a:	b084      	sub	sp, #16
 8007b1c:	af00      	add	r7, sp, #0
 8007b1e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	223d      	movs	r2, #61	; 0x3d
 8007b24:	5c9b      	ldrb	r3, [r3, r2]
 8007b26:	b2db      	uxtb	r3, r3
 8007b28:	2b01      	cmp	r3, #1
 8007b2a:	d001      	beq.n	8007b30 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007b2c:	2301      	movs	r3, #1
 8007b2e:	e03b      	b.n	8007ba8 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	223d      	movs	r2, #61	; 0x3d
 8007b34:	2102      	movs	r1, #2
 8007b36:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	68da      	ldr	r2, [r3, #12]
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	2101      	movs	r1, #1
 8007b44:	430a      	orrs	r2, r1
 8007b46:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	4a18      	ldr	r2, [pc, #96]	; (8007bb0 <HAL_TIM_Base_Start_IT+0x98>)
 8007b4e:	4293      	cmp	r3, r2
 8007b50:	d00f      	beq.n	8007b72 <HAL_TIM_Base_Start_IT+0x5a>
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	681a      	ldr	r2, [r3, #0]
 8007b56:	2380      	movs	r3, #128	; 0x80
 8007b58:	05db      	lsls	r3, r3, #23
 8007b5a:	429a      	cmp	r2, r3
 8007b5c:	d009      	beq.n	8007b72 <HAL_TIM_Base_Start_IT+0x5a>
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	4a14      	ldr	r2, [pc, #80]	; (8007bb4 <HAL_TIM_Base_Start_IT+0x9c>)
 8007b64:	4293      	cmp	r3, r2
 8007b66:	d004      	beq.n	8007b72 <HAL_TIM_Base_Start_IT+0x5a>
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	4a12      	ldr	r2, [pc, #72]	; (8007bb8 <HAL_TIM_Base_Start_IT+0xa0>)
 8007b6e:	4293      	cmp	r3, r2
 8007b70:	d111      	bne.n	8007b96 <HAL_TIM_Base_Start_IT+0x7e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	689b      	ldr	r3, [r3, #8]
 8007b78:	2207      	movs	r2, #7
 8007b7a:	4013      	ands	r3, r2
 8007b7c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	2b06      	cmp	r3, #6
 8007b82:	d010      	beq.n	8007ba6 <HAL_TIM_Base_Start_IT+0x8e>
    {
      __HAL_TIM_ENABLE(htim);
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	681a      	ldr	r2, [r3, #0]
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	2101      	movs	r1, #1
 8007b90:	430a      	orrs	r2, r1
 8007b92:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007b94:	e007      	b.n	8007ba6 <HAL_TIM_Base_Start_IT+0x8e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	681a      	ldr	r2, [r3, #0]
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	2101      	movs	r1, #1
 8007ba2:	430a      	orrs	r2, r1
 8007ba4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007ba6:	2300      	movs	r3, #0
}
 8007ba8:	0018      	movs	r0, r3
 8007baa:	46bd      	mov	sp, r7
 8007bac:	b004      	add	sp, #16
 8007bae:	bd80      	pop	{r7, pc}
 8007bb0:	40012c00 	.word	0x40012c00
 8007bb4:	40000400 	.word	0x40000400
 8007bb8:	40014000 	.word	0x40014000

08007bbc <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8007bbc:	b580      	push	{r7, lr}
 8007bbe:	b082      	sub	sp, #8
 8007bc0:	af00      	add	r7, sp, #0
 8007bc2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	d101      	bne.n	8007bce <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8007bca:	2301      	movs	r3, #1
 8007bcc:	e042      	b.n	8007c54 <HAL_TIM_OC_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	223d      	movs	r2, #61	; 0x3d
 8007bd2:	5c9b      	ldrb	r3, [r3, r2]
 8007bd4:	b2db      	uxtb	r3, r3
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	d107      	bne.n	8007bea <HAL_TIM_OC_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	223c      	movs	r2, #60	; 0x3c
 8007bde:	2100      	movs	r1, #0
 8007be0:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	0018      	movs	r0, r3
 8007be6:	f000 f839 	bl	8007c5c <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	223d      	movs	r2, #61	; 0x3d
 8007bee:	2102      	movs	r1, #2
 8007bf0:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	681a      	ldr	r2, [r3, #0]
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	3304      	adds	r3, #4
 8007bfa:	0019      	movs	r1, r3
 8007bfc:	0010      	movs	r0, r2
 8007bfe:	f000 f9c3 	bl	8007f88 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	2246      	movs	r2, #70	; 0x46
 8007c06:	2101      	movs	r1, #1
 8007c08:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	223e      	movs	r2, #62	; 0x3e
 8007c0e:	2101      	movs	r1, #1
 8007c10:	5499      	strb	r1, [r3, r2]
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	223f      	movs	r2, #63	; 0x3f
 8007c16:	2101      	movs	r1, #1
 8007c18:	5499      	strb	r1, [r3, r2]
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	2240      	movs	r2, #64	; 0x40
 8007c1e:	2101      	movs	r1, #1
 8007c20:	5499      	strb	r1, [r3, r2]
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	2241      	movs	r2, #65	; 0x41
 8007c26:	2101      	movs	r1, #1
 8007c28:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	2242      	movs	r2, #66	; 0x42
 8007c2e:	2101      	movs	r1, #1
 8007c30:	5499      	strb	r1, [r3, r2]
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	2243      	movs	r2, #67	; 0x43
 8007c36:	2101      	movs	r1, #1
 8007c38:	5499      	strb	r1, [r3, r2]
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	2244      	movs	r2, #68	; 0x44
 8007c3e:	2101      	movs	r1, #1
 8007c40:	5499      	strb	r1, [r3, r2]
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	2245      	movs	r2, #69	; 0x45
 8007c46:	2101      	movs	r1, #1
 8007c48:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	223d      	movs	r2, #61	; 0x3d
 8007c4e:	2101      	movs	r1, #1
 8007c50:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007c52:	2300      	movs	r3, #0
}
 8007c54:	0018      	movs	r0, r3
 8007c56:	46bd      	mov	sp, r7
 8007c58:	b002      	add	sp, #8
 8007c5a:	bd80      	pop	{r7, pc}

08007c5c <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8007c5c:	b580      	push	{r7, lr}
 8007c5e:	b082      	sub	sp, #8
 8007c60:	af00      	add	r7, sp, #0
 8007c62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8007c64:	46c0      	nop			; (mov r8, r8)
 8007c66:	46bd      	mov	sp, r7
 8007c68:	b002      	add	sp, #8
 8007c6a:	bd80      	pop	{r7, pc}

08007c6c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007c6c:	b580      	push	{r7, lr}
 8007c6e:	b082      	sub	sp, #8
 8007c70:	af00      	add	r7, sp, #0
 8007c72:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	691b      	ldr	r3, [r3, #16]
 8007c7a:	2202      	movs	r2, #2
 8007c7c:	4013      	ands	r3, r2
 8007c7e:	2b02      	cmp	r3, #2
 8007c80:	d124      	bne.n	8007ccc <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	68db      	ldr	r3, [r3, #12]
 8007c88:	2202      	movs	r2, #2
 8007c8a:	4013      	ands	r3, r2
 8007c8c:	2b02      	cmp	r3, #2
 8007c8e:	d11d      	bne.n	8007ccc <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	2203      	movs	r2, #3
 8007c96:	4252      	negs	r2, r2
 8007c98:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	2201      	movs	r2, #1
 8007c9e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	699b      	ldr	r3, [r3, #24]
 8007ca6:	2203      	movs	r2, #3
 8007ca8:	4013      	ands	r3, r2
 8007caa:	d004      	beq.n	8007cb6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	0018      	movs	r0, r3
 8007cb0:	f000 f952 	bl	8007f58 <HAL_TIM_IC_CaptureCallback>
 8007cb4:	e007      	b.n	8007cc6 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	0018      	movs	r0, r3
 8007cba:	f000 f945 	bl	8007f48 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	0018      	movs	r0, r3
 8007cc2:	f000 f951 	bl	8007f68 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	2200      	movs	r2, #0
 8007cca:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	691b      	ldr	r3, [r3, #16]
 8007cd2:	2204      	movs	r2, #4
 8007cd4:	4013      	ands	r3, r2
 8007cd6:	2b04      	cmp	r3, #4
 8007cd8:	d125      	bne.n	8007d26 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	68db      	ldr	r3, [r3, #12]
 8007ce0:	2204      	movs	r2, #4
 8007ce2:	4013      	ands	r3, r2
 8007ce4:	2b04      	cmp	r3, #4
 8007ce6:	d11e      	bne.n	8007d26 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	2205      	movs	r2, #5
 8007cee:	4252      	negs	r2, r2
 8007cf0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	2202      	movs	r2, #2
 8007cf6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	699a      	ldr	r2, [r3, #24]
 8007cfe:	23c0      	movs	r3, #192	; 0xc0
 8007d00:	009b      	lsls	r3, r3, #2
 8007d02:	4013      	ands	r3, r2
 8007d04:	d004      	beq.n	8007d10 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	0018      	movs	r0, r3
 8007d0a:	f000 f925 	bl	8007f58 <HAL_TIM_IC_CaptureCallback>
 8007d0e:	e007      	b.n	8007d20 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	0018      	movs	r0, r3
 8007d14:	f000 f918 	bl	8007f48 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	0018      	movs	r0, r3
 8007d1c:	f000 f924 	bl	8007f68 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	2200      	movs	r2, #0
 8007d24:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	691b      	ldr	r3, [r3, #16]
 8007d2c:	2208      	movs	r2, #8
 8007d2e:	4013      	ands	r3, r2
 8007d30:	2b08      	cmp	r3, #8
 8007d32:	d124      	bne.n	8007d7e <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	68db      	ldr	r3, [r3, #12]
 8007d3a:	2208      	movs	r2, #8
 8007d3c:	4013      	ands	r3, r2
 8007d3e:	2b08      	cmp	r3, #8
 8007d40:	d11d      	bne.n	8007d7e <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	2209      	movs	r2, #9
 8007d48:	4252      	negs	r2, r2
 8007d4a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	2204      	movs	r2, #4
 8007d50:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	69db      	ldr	r3, [r3, #28]
 8007d58:	2203      	movs	r2, #3
 8007d5a:	4013      	ands	r3, r2
 8007d5c:	d004      	beq.n	8007d68 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	0018      	movs	r0, r3
 8007d62:	f000 f8f9 	bl	8007f58 <HAL_TIM_IC_CaptureCallback>
 8007d66:	e007      	b.n	8007d78 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	0018      	movs	r0, r3
 8007d6c:	f000 f8ec 	bl	8007f48 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	0018      	movs	r0, r3
 8007d74:	f000 f8f8 	bl	8007f68 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	2200      	movs	r2, #0
 8007d7c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	691b      	ldr	r3, [r3, #16]
 8007d84:	2210      	movs	r2, #16
 8007d86:	4013      	ands	r3, r2
 8007d88:	2b10      	cmp	r3, #16
 8007d8a:	d125      	bne.n	8007dd8 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	68db      	ldr	r3, [r3, #12]
 8007d92:	2210      	movs	r2, #16
 8007d94:	4013      	ands	r3, r2
 8007d96:	2b10      	cmp	r3, #16
 8007d98:	d11e      	bne.n	8007dd8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	2211      	movs	r2, #17
 8007da0:	4252      	negs	r2, r2
 8007da2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	2208      	movs	r2, #8
 8007da8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	69da      	ldr	r2, [r3, #28]
 8007db0:	23c0      	movs	r3, #192	; 0xc0
 8007db2:	009b      	lsls	r3, r3, #2
 8007db4:	4013      	ands	r3, r2
 8007db6:	d004      	beq.n	8007dc2 <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	0018      	movs	r0, r3
 8007dbc:	f000 f8cc 	bl	8007f58 <HAL_TIM_IC_CaptureCallback>
 8007dc0:	e007      	b.n	8007dd2 <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	0018      	movs	r0, r3
 8007dc6:	f000 f8bf 	bl	8007f48 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	0018      	movs	r0, r3
 8007dce:	f000 f8cb 	bl	8007f68 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	2200      	movs	r2, #0
 8007dd6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	691b      	ldr	r3, [r3, #16]
 8007dde:	2201      	movs	r2, #1
 8007de0:	4013      	ands	r3, r2
 8007de2:	2b01      	cmp	r3, #1
 8007de4:	d10f      	bne.n	8007e06 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	68db      	ldr	r3, [r3, #12]
 8007dec:	2201      	movs	r2, #1
 8007dee:	4013      	ands	r3, r2
 8007df0:	2b01      	cmp	r3, #1
 8007df2:	d108      	bne.n	8007e06 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	2202      	movs	r2, #2
 8007dfa:	4252      	negs	r2, r2
 8007dfc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	0018      	movs	r0, r3
 8007e02:	f7f9 fa01 	bl	8001208 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	691b      	ldr	r3, [r3, #16]
 8007e0c:	2280      	movs	r2, #128	; 0x80
 8007e0e:	4013      	ands	r3, r2
 8007e10:	2b80      	cmp	r3, #128	; 0x80
 8007e12:	d10f      	bne.n	8007e34 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	68db      	ldr	r3, [r3, #12]
 8007e1a:	2280      	movs	r2, #128	; 0x80
 8007e1c:	4013      	ands	r3, r2
 8007e1e:	2b80      	cmp	r3, #128	; 0x80
 8007e20:	d108      	bne.n	8007e34 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	2281      	movs	r2, #129	; 0x81
 8007e28:	4252      	negs	r2, r2
 8007e2a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	0018      	movs	r0, r3
 8007e30:	f000 fb2e 	bl	8008490 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	691b      	ldr	r3, [r3, #16]
 8007e3a:	2240      	movs	r2, #64	; 0x40
 8007e3c:	4013      	ands	r3, r2
 8007e3e:	2b40      	cmp	r3, #64	; 0x40
 8007e40:	d10f      	bne.n	8007e62 <HAL_TIM_IRQHandler+0x1f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	68db      	ldr	r3, [r3, #12]
 8007e48:	2240      	movs	r2, #64	; 0x40
 8007e4a:	4013      	ands	r3, r2
 8007e4c:	2b40      	cmp	r3, #64	; 0x40
 8007e4e:	d108      	bne.n	8007e62 <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	2241      	movs	r2, #65	; 0x41
 8007e56:	4252      	negs	r2, r2
 8007e58:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	0018      	movs	r0, r3
 8007e5e:	f000 f88b 	bl	8007f78 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	691b      	ldr	r3, [r3, #16]
 8007e68:	2220      	movs	r2, #32
 8007e6a:	4013      	ands	r3, r2
 8007e6c:	2b20      	cmp	r3, #32
 8007e6e:	d10f      	bne.n	8007e90 <HAL_TIM_IRQHandler+0x224>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	68db      	ldr	r3, [r3, #12]
 8007e76:	2220      	movs	r2, #32
 8007e78:	4013      	ands	r3, r2
 8007e7a:	2b20      	cmp	r3, #32
 8007e7c:	d108      	bne.n	8007e90 <HAL_TIM_IRQHandler+0x224>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	2221      	movs	r2, #33	; 0x21
 8007e84:	4252      	negs	r2, r2
 8007e86:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	0018      	movs	r0, r3
 8007e8c:	f000 faf8 	bl	8008480 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007e90:	46c0      	nop			; (mov r8, r8)
 8007e92:	46bd      	mov	sp, r7
 8007e94:	b002      	add	sp, #8
 8007e96:	bd80      	pop	{r7, pc}

08007e98 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8007e98:	b580      	push	{r7, lr}
 8007e9a:	b086      	sub	sp, #24
 8007e9c:	af00      	add	r7, sp, #0
 8007e9e:	60f8      	str	r0, [r7, #12]
 8007ea0:	60b9      	str	r1, [r7, #8]
 8007ea2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007ea4:	2317      	movs	r3, #23
 8007ea6:	18fb      	adds	r3, r7, r3
 8007ea8:	2200      	movs	r2, #0
 8007eaa:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	223c      	movs	r2, #60	; 0x3c
 8007eb0:	5c9b      	ldrb	r3, [r3, r2]
 8007eb2:	2b01      	cmp	r3, #1
 8007eb4:	d101      	bne.n	8007eba <HAL_TIM_OC_ConfigChannel+0x22>
 8007eb6:	2302      	movs	r3, #2
 8007eb8:	e042      	b.n	8007f40 <HAL_TIM_OC_ConfigChannel+0xa8>
 8007eba:	68fb      	ldr	r3, [r7, #12]
 8007ebc:	223c      	movs	r2, #60	; 0x3c
 8007ebe:	2101      	movs	r1, #1
 8007ec0:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	2b0c      	cmp	r3, #12
 8007ec6:	d027      	beq.n	8007f18 <HAL_TIM_OC_ConfigChannel+0x80>
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	2b0c      	cmp	r3, #12
 8007ecc:	d82c      	bhi.n	8007f28 <HAL_TIM_OC_ConfigChannel+0x90>
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	2b08      	cmp	r3, #8
 8007ed2:	d019      	beq.n	8007f08 <HAL_TIM_OC_ConfigChannel+0x70>
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	2b08      	cmp	r3, #8
 8007ed8:	d826      	bhi.n	8007f28 <HAL_TIM_OC_ConfigChannel+0x90>
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	d003      	beq.n	8007ee8 <HAL_TIM_OC_ConfigChannel+0x50>
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	2b04      	cmp	r3, #4
 8007ee4:	d008      	beq.n	8007ef8 <HAL_TIM_OC_ConfigChannel+0x60>
 8007ee6:	e01f      	b.n	8007f28 <HAL_TIM_OC_ConfigChannel+0x90>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	68ba      	ldr	r2, [r7, #8]
 8007eee:	0011      	movs	r1, r2
 8007ef0:	0018      	movs	r0, r3
 8007ef2:	f000 f8c9 	bl	8008088 <TIM_OC1_SetConfig>
      break;
 8007ef6:	e01c      	b.n	8007f32 <HAL_TIM_OC_ConfigChannel+0x9a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007ef8:	68fb      	ldr	r3, [r7, #12]
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	68ba      	ldr	r2, [r7, #8]
 8007efe:	0011      	movs	r1, r2
 8007f00:	0018      	movs	r0, r3
 8007f02:	f000 f949 	bl	8008198 <TIM_OC2_SetConfig>
      break;
 8007f06:	e014      	b.n	8007f32 <HAL_TIM_OC_ConfigChannel+0x9a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007f08:	68fb      	ldr	r3, [r7, #12]
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	68ba      	ldr	r2, [r7, #8]
 8007f0e:	0011      	movs	r1, r2
 8007f10:	0018      	movs	r0, r3
 8007f12:	f000 f9c5 	bl	80082a0 <TIM_OC3_SetConfig>
      break;
 8007f16:	e00c      	b.n	8007f32 <HAL_TIM_OC_ConfigChannel+0x9a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007f18:	68fb      	ldr	r3, [r7, #12]
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	68ba      	ldr	r2, [r7, #8]
 8007f1e:	0011      	movs	r1, r2
 8007f20:	0018      	movs	r0, r3
 8007f22:	f000 fa43 	bl	80083ac <TIM_OC4_SetConfig>
      break;
 8007f26:	e004      	b.n	8007f32 <HAL_TIM_OC_ConfigChannel+0x9a>
    }

    default:
      status = HAL_ERROR;
 8007f28:	2317      	movs	r3, #23
 8007f2a:	18fb      	adds	r3, r7, r3
 8007f2c:	2201      	movs	r2, #1
 8007f2e:	701a      	strb	r2, [r3, #0]
      break;
 8007f30:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8007f32:	68fb      	ldr	r3, [r7, #12]
 8007f34:	223c      	movs	r2, #60	; 0x3c
 8007f36:	2100      	movs	r1, #0
 8007f38:	5499      	strb	r1, [r3, r2]

  return status;
 8007f3a:	2317      	movs	r3, #23
 8007f3c:	18fb      	adds	r3, r7, r3
 8007f3e:	781b      	ldrb	r3, [r3, #0]
}
 8007f40:	0018      	movs	r0, r3
 8007f42:	46bd      	mov	sp, r7
 8007f44:	b006      	add	sp, #24
 8007f46:	bd80      	pop	{r7, pc}

08007f48 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007f48:	b580      	push	{r7, lr}
 8007f4a:	b082      	sub	sp, #8
 8007f4c:	af00      	add	r7, sp, #0
 8007f4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007f50:	46c0      	nop			; (mov r8, r8)
 8007f52:	46bd      	mov	sp, r7
 8007f54:	b002      	add	sp, #8
 8007f56:	bd80      	pop	{r7, pc}

08007f58 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007f58:	b580      	push	{r7, lr}
 8007f5a:	b082      	sub	sp, #8
 8007f5c:	af00      	add	r7, sp, #0
 8007f5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007f60:	46c0      	nop			; (mov r8, r8)
 8007f62:	46bd      	mov	sp, r7
 8007f64:	b002      	add	sp, #8
 8007f66:	bd80      	pop	{r7, pc}

08007f68 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007f68:	b580      	push	{r7, lr}
 8007f6a:	b082      	sub	sp, #8
 8007f6c:	af00      	add	r7, sp, #0
 8007f6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007f70:	46c0      	nop			; (mov r8, r8)
 8007f72:	46bd      	mov	sp, r7
 8007f74:	b002      	add	sp, #8
 8007f76:	bd80      	pop	{r7, pc}

08007f78 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007f78:	b580      	push	{r7, lr}
 8007f7a:	b082      	sub	sp, #8
 8007f7c:	af00      	add	r7, sp, #0
 8007f7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007f80:	46c0      	nop			; (mov r8, r8)
 8007f82:	46bd      	mov	sp, r7
 8007f84:	b002      	add	sp, #8
 8007f86:	bd80      	pop	{r7, pc}

08007f88 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007f88:	b580      	push	{r7, lr}
 8007f8a:	b084      	sub	sp, #16
 8007f8c:	af00      	add	r7, sp, #0
 8007f8e:	6078      	str	r0, [r7, #4]
 8007f90:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	4a34      	ldr	r2, [pc, #208]	; (800806c <TIM_Base_SetConfig+0xe4>)
 8007f9c:	4293      	cmp	r3, r2
 8007f9e:	d008      	beq.n	8007fb2 <TIM_Base_SetConfig+0x2a>
 8007fa0:	687a      	ldr	r2, [r7, #4]
 8007fa2:	2380      	movs	r3, #128	; 0x80
 8007fa4:	05db      	lsls	r3, r3, #23
 8007fa6:	429a      	cmp	r2, r3
 8007fa8:	d003      	beq.n	8007fb2 <TIM_Base_SetConfig+0x2a>
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	4a30      	ldr	r2, [pc, #192]	; (8008070 <TIM_Base_SetConfig+0xe8>)
 8007fae:	4293      	cmp	r3, r2
 8007fb0:	d108      	bne.n	8007fc4 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007fb2:	68fb      	ldr	r3, [r7, #12]
 8007fb4:	2270      	movs	r2, #112	; 0x70
 8007fb6:	4393      	bics	r3, r2
 8007fb8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007fba:	683b      	ldr	r3, [r7, #0]
 8007fbc:	685b      	ldr	r3, [r3, #4]
 8007fbe:	68fa      	ldr	r2, [r7, #12]
 8007fc0:	4313      	orrs	r3, r2
 8007fc2:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	4a29      	ldr	r2, [pc, #164]	; (800806c <TIM_Base_SetConfig+0xe4>)
 8007fc8:	4293      	cmp	r3, r2
 8007fca:	d018      	beq.n	8007ffe <TIM_Base_SetConfig+0x76>
 8007fcc:	687a      	ldr	r2, [r7, #4]
 8007fce:	2380      	movs	r3, #128	; 0x80
 8007fd0:	05db      	lsls	r3, r3, #23
 8007fd2:	429a      	cmp	r2, r3
 8007fd4:	d013      	beq.n	8007ffe <TIM_Base_SetConfig+0x76>
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	4a25      	ldr	r2, [pc, #148]	; (8008070 <TIM_Base_SetConfig+0xe8>)
 8007fda:	4293      	cmp	r3, r2
 8007fdc:	d00f      	beq.n	8007ffe <TIM_Base_SetConfig+0x76>
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	4a24      	ldr	r2, [pc, #144]	; (8008074 <TIM_Base_SetConfig+0xec>)
 8007fe2:	4293      	cmp	r3, r2
 8007fe4:	d00b      	beq.n	8007ffe <TIM_Base_SetConfig+0x76>
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	4a23      	ldr	r2, [pc, #140]	; (8008078 <TIM_Base_SetConfig+0xf0>)
 8007fea:	4293      	cmp	r3, r2
 8007fec:	d007      	beq.n	8007ffe <TIM_Base_SetConfig+0x76>
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	4a22      	ldr	r2, [pc, #136]	; (800807c <TIM_Base_SetConfig+0xf4>)
 8007ff2:	4293      	cmp	r3, r2
 8007ff4:	d003      	beq.n	8007ffe <TIM_Base_SetConfig+0x76>
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	4a21      	ldr	r2, [pc, #132]	; (8008080 <TIM_Base_SetConfig+0xf8>)
 8007ffa:	4293      	cmp	r3, r2
 8007ffc:	d108      	bne.n	8008010 <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007ffe:	68fb      	ldr	r3, [r7, #12]
 8008000:	4a20      	ldr	r2, [pc, #128]	; (8008084 <TIM_Base_SetConfig+0xfc>)
 8008002:	4013      	ands	r3, r2
 8008004:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008006:	683b      	ldr	r3, [r7, #0]
 8008008:	68db      	ldr	r3, [r3, #12]
 800800a:	68fa      	ldr	r2, [r7, #12]
 800800c:	4313      	orrs	r3, r2
 800800e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008010:	68fb      	ldr	r3, [r7, #12]
 8008012:	2280      	movs	r2, #128	; 0x80
 8008014:	4393      	bics	r3, r2
 8008016:	001a      	movs	r2, r3
 8008018:	683b      	ldr	r3, [r7, #0]
 800801a:	695b      	ldr	r3, [r3, #20]
 800801c:	4313      	orrs	r3, r2
 800801e:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	68fa      	ldr	r2, [r7, #12]
 8008024:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008026:	683b      	ldr	r3, [r7, #0]
 8008028:	689a      	ldr	r2, [r3, #8]
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800802e:	683b      	ldr	r3, [r7, #0]
 8008030:	681a      	ldr	r2, [r3, #0]
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	4a0c      	ldr	r2, [pc, #48]	; (800806c <TIM_Base_SetConfig+0xe4>)
 800803a:	4293      	cmp	r3, r2
 800803c:	d00b      	beq.n	8008056 <TIM_Base_SetConfig+0xce>
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	4a0d      	ldr	r2, [pc, #52]	; (8008078 <TIM_Base_SetConfig+0xf0>)
 8008042:	4293      	cmp	r3, r2
 8008044:	d007      	beq.n	8008056 <TIM_Base_SetConfig+0xce>
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	4a0c      	ldr	r2, [pc, #48]	; (800807c <TIM_Base_SetConfig+0xf4>)
 800804a:	4293      	cmp	r3, r2
 800804c:	d003      	beq.n	8008056 <TIM_Base_SetConfig+0xce>
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	4a0b      	ldr	r2, [pc, #44]	; (8008080 <TIM_Base_SetConfig+0xf8>)
 8008052:	4293      	cmp	r3, r2
 8008054:	d103      	bne.n	800805e <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008056:	683b      	ldr	r3, [r7, #0]
 8008058:	691a      	ldr	r2, [r3, #16]
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	2201      	movs	r2, #1
 8008062:	615a      	str	r2, [r3, #20]
}
 8008064:	46c0      	nop			; (mov r8, r8)
 8008066:	46bd      	mov	sp, r7
 8008068:	b004      	add	sp, #16
 800806a:	bd80      	pop	{r7, pc}
 800806c:	40012c00 	.word	0x40012c00
 8008070:	40000400 	.word	0x40000400
 8008074:	40002000 	.word	0x40002000
 8008078:	40014000 	.word	0x40014000
 800807c:	40014400 	.word	0x40014400
 8008080:	40014800 	.word	0x40014800
 8008084:	fffffcff 	.word	0xfffffcff

08008088 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008088:	b580      	push	{r7, lr}
 800808a:	b086      	sub	sp, #24
 800808c:	af00      	add	r7, sp, #0
 800808e:	6078      	str	r0, [r7, #4]
 8008090:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	6a1b      	ldr	r3, [r3, #32]
 8008096:	2201      	movs	r2, #1
 8008098:	4393      	bics	r3, r2
 800809a:	001a      	movs	r2, r3
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	6a1b      	ldr	r3, [r3, #32]
 80080a4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	685b      	ldr	r3, [r3, #4]
 80080aa:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	699b      	ldr	r3, [r3, #24]
 80080b0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80080b2:	68fb      	ldr	r3, [r7, #12]
 80080b4:	2270      	movs	r2, #112	; 0x70
 80080b6:	4393      	bics	r3, r2
 80080b8:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80080ba:	68fb      	ldr	r3, [r7, #12]
 80080bc:	2203      	movs	r2, #3
 80080be:	4393      	bics	r3, r2
 80080c0:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80080c2:	683b      	ldr	r3, [r7, #0]
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	68fa      	ldr	r2, [r7, #12]
 80080c8:	4313      	orrs	r3, r2
 80080ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80080cc:	697b      	ldr	r3, [r7, #20]
 80080ce:	2202      	movs	r2, #2
 80080d0:	4393      	bics	r3, r2
 80080d2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80080d4:	683b      	ldr	r3, [r7, #0]
 80080d6:	689b      	ldr	r3, [r3, #8]
 80080d8:	697a      	ldr	r2, [r7, #20]
 80080da:	4313      	orrs	r3, r2
 80080dc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	4a27      	ldr	r2, [pc, #156]	; (8008180 <TIM_OC1_SetConfig+0xf8>)
 80080e2:	4293      	cmp	r3, r2
 80080e4:	d00b      	beq.n	80080fe <TIM_OC1_SetConfig+0x76>
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	4a26      	ldr	r2, [pc, #152]	; (8008184 <TIM_OC1_SetConfig+0xfc>)
 80080ea:	4293      	cmp	r3, r2
 80080ec:	d007      	beq.n	80080fe <TIM_OC1_SetConfig+0x76>
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	4a25      	ldr	r2, [pc, #148]	; (8008188 <TIM_OC1_SetConfig+0x100>)
 80080f2:	4293      	cmp	r3, r2
 80080f4:	d003      	beq.n	80080fe <TIM_OC1_SetConfig+0x76>
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	4a24      	ldr	r2, [pc, #144]	; (800818c <TIM_OC1_SetConfig+0x104>)
 80080fa:	4293      	cmp	r3, r2
 80080fc:	d10c      	bne.n	8008118 <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80080fe:	697b      	ldr	r3, [r7, #20]
 8008100:	2208      	movs	r2, #8
 8008102:	4393      	bics	r3, r2
 8008104:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008106:	683b      	ldr	r3, [r7, #0]
 8008108:	68db      	ldr	r3, [r3, #12]
 800810a:	697a      	ldr	r2, [r7, #20]
 800810c:	4313      	orrs	r3, r2
 800810e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008110:	697b      	ldr	r3, [r7, #20]
 8008112:	2204      	movs	r2, #4
 8008114:	4393      	bics	r3, r2
 8008116:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	4a19      	ldr	r2, [pc, #100]	; (8008180 <TIM_OC1_SetConfig+0xf8>)
 800811c:	4293      	cmp	r3, r2
 800811e:	d00b      	beq.n	8008138 <TIM_OC1_SetConfig+0xb0>
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	4a18      	ldr	r2, [pc, #96]	; (8008184 <TIM_OC1_SetConfig+0xfc>)
 8008124:	4293      	cmp	r3, r2
 8008126:	d007      	beq.n	8008138 <TIM_OC1_SetConfig+0xb0>
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	4a17      	ldr	r2, [pc, #92]	; (8008188 <TIM_OC1_SetConfig+0x100>)
 800812c:	4293      	cmp	r3, r2
 800812e:	d003      	beq.n	8008138 <TIM_OC1_SetConfig+0xb0>
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	4a16      	ldr	r2, [pc, #88]	; (800818c <TIM_OC1_SetConfig+0x104>)
 8008134:	4293      	cmp	r3, r2
 8008136:	d111      	bne.n	800815c <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008138:	693b      	ldr	r3, [r7, #16]
 800813a:	4a15      	ldr	r2, [pc, #84]	; (8008190 <TIM_OC1_SetConfig+0x108>)
 800813c:	4013      	ands	r3, r2
 800813e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008140:	693b      	ldr	r3, [r7, #16]
 8008142:	4a14      	ldr	r2, [pc, #80]	; (8008194 <TIM_OC1_SetConfig+0x10c>)
 8008144:	4013      	ands	r3, r2
 8008146:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008148:	683b      	ldr	r3, [r7, #0]
 800814a:	695b      	ldr	r3, [r3, #20]
 800814c:	693a      	ldr	r2, [r7, #16]
 800814e:	4313      	orrs	r3, r2
 8008150:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008152:	683b      	ldr	r3, [r7, #0]
 8008154:	699b      	ldr	r3, [r3, #24]
 8008156:	693a      	ldr	r2, [r7, #16]
 8008158:	4313      	orrs	r3, r2
 800815a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	693a      	ldr	r2, [r7, #16]
 8008160:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	68fa      	ldr	r2, [r7, #12]
 8008166:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008168:	683b      	ldr	r3, [r7, #0]
 800816a:	685a      	ldr	r2, [r3, #4]
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	697a      	ldr	r2, [r7, #20]
 8008174:	621a      	str	r2, [r3, #32]
}
 8008176:	46c0      	nop			; (mov r8, r8)
 8008178:	46bd      	mov	sp, r7
 800817a:	b006      	add	sp, #24
 800817c:	bd80      	pop	{r7, pc}
 800817e:	46c0      	nop			; (mov r8, r8)
 8008180:	40012c00 	.word	0x40012c00
 8008184:	40014000 	.word	0x40014000
 8008188:	40014400 	.word	0x40014400
 800818c:	40014800 	.word	0x40014800
 8008190:	fffffeff 	.word	0xfffffeff
 8008194:	fffffdff 	.word	0xfffffdff

08008198 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008198:	b580      	push	{r7, lr}
 800819a:	b086      	sub	sp, #24
 800819c:	af00      	add	r7, sp, #0
 800819e:	6078      	str	r0, [r7, #4]
 80081a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	6a1b      	ldr	r3, [r3, #32]
 80081a6:	2210      	movs	r2, #16
 80081a8:	4393      	bics	r3, r2
 80081aa:	001a      	movs	r2, r3
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	6a1b      	ldr	r3, [r3, #32]
 80081b4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	685b      	ldr	r3, [r3, #4]
 80081ba:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	699b      	ldr	r3, [r3, #24]
 80081c0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80081c2:	68fb      	ldr	r3, [r7, #12]
 80081c4:	4a2e      	ldr	r2, [pc, #184]	; (8008280 <TIM_OC2_SetConfig+0xe8>)
 80081c6:	4013      	ands	r3, r2
 80081c8:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80081ca:	68fb      	ldr	r3, [r7, #12]
 80081cc:	4a2d      	ldr	r2, [pc, #180]	; (8008284 <TIM_OC2_SetConfig+0xec>)
 80081ce:	4013      	ands	r3, r2
 80081d0:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80081d2:	683b      	ldr	r3, [r7, #0]
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	021b      	lsls	r3, r3, #8
 80081d8:	68fa      	ldr	r2, [r7, #12]
 80081da:	4313      	orrs	r3, r2
 80081dc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80081de:	697b      	ldr	r3, [r7, #20]
 80081e0:	2220      	movs	r2, #32
 80081e2:	4393      	bics	r3, r2
 80081e4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80081e6:	683b      	ldr	r3, [r7, #0]
 80081e8:	689b      	ldr	r3, [r3, #8]
 80081ea:	011b      	lsls	r3, r3, #4
 80081ec:	697a      	ldr	r2, [r7, #20]
 80081ee:	4313      	orrs	r3, r2
 80081f0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	4a24      	ldr	r2, [pc, #144]	; (8008288 <TIM_OC2_SetConfig+0xf0>)
 80081f6:	4293      	cmp	r3, r2
 80081f8:	d10d      	bne.n	8008216 <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80081fa:	697b      	ldr	r3, [r7, #20]
 80081fc:	2280      	movs	r2, #128	; 0x80
 80081fe:	4393      	bics	r3, r2
 8008200:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008202:	683b      	ldr	r3, [r7, #0]
 8008204:	68db      	ldr	r3, [r3, #12]
 8008206:	011b      	lsls	r3, r3, #4
 8008208:	697a      	ldr	r2, [r7, #20]
 800820a:	4313      	orrs	r3, r2
 800820c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800820e:	697b      	ldr	r3, [r7, #20]
 8008210:	2240      	movs	r2, #64	; 0x40
 8008212:	4393      	bics	r3, r2
 8008214:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	4a1b      	ldr	r2, [pc, #108]	; (8008288 <TIM_OC2_SetConfig+0xf0>)
 800821a:	4293      	cmp	r3, r2
 800821c:	d00b      	beq.n	8008236 <TIM_OC2_SetConfig+0x9e>
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	4a1a      	ldr	r2, [pc, #104]	; (800828c <TIM_OC2_SetConfig+0xf4>)
 8008222:	4293      	cmp	r3, r2
 8008224:	d007      	beq.n	8008236 <TIM_OC2_SetConfig+0x9e>
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	4a19      	ldr	r2, [pc, #100]	; (8008290 <TIM_OC2_SetConfig+0xf8>)
 800822a:	4293      	cmp	r3, r2
 800822c:	d003      	beq.n	8008236 <TIM_OC2_SetConfig+0x9e>
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	4a18      	ldr	r2, [pc, #96]	; (8008294 <TIM_OC2_SetConfig+0xfc>)
 8008232:	4293      	cmp	r3, r2
 8008234:	d113      	bne.n	800825e <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008236:	693b      	ldr	r3, [r7, #16]
 8008238:	4a17      	ldr	r2, [pc, #92]	; (8008298 <TIM_OC2_SetConfig+0x100>)
 800823a:	4013      	ands	r3, r2
 800823c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800823e:	693b      	ldr	r3, [r7, #16]
 8008240:	4a16      	ldr	r2, [pc, #88]	; (800829c <TIM_OC2_SetConfig+0x104>)
 8008242:	4013      	ands	r3, r2
 8008244:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008246:	683b      	ldr	r3, [r7, #0]
 8008248:	695b      	ldr	r3, [r3, #20]
 800824a:	009b      	lsls	r3, r3, #2
 800824c:	693a      	ldr	r2, [r7, #16]
 800824e:	4313      	orrs	r3, r2
 8008250:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008252:	683b      	ldr	r3, [r7, #0]
 8008254:	699b      	ldr	r3, [r3, #24]
 8008256:	009b      	lsls	r3, r3, #2
 8008258:	693a      	ldr	r2, [r7, #16]
 800825a:	4313      	orrs	r3, r2
 800825c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	693a      	ldr	r2, [r7, #16]
 8008262:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	68fa      	ldr	r2, [r7, #12]
 8008268:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800826a:	683b      	ldr	r3, [r7, #0]
 800826c:	685a      	ldr	r2, [r3, #4]
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	697a      	ldr	r2, [r7, #20]
 8008276:	621a      	str	r2, [r3, #32]
}
 8008278:	46c0      	nop			; (mov r8, r8)
 800827a:	46bd      	mov	sp, r7
 800827c:	b006      	add	sp, #24
 800827e:	bd80      	pop	{r7, pc}
 8008280:	ffff8fff 	.word	0xffff8fff
 8008284:	fffffcff 	.word	0xfffffcff
 8008288:	40012c00 	.word	0x40012c00
 800828c:	40014000 	.word	0x40014000
 8008290:	40014400 	.word	0x40014400
 8008294:	40014800 	.word	0x40014800
 8008298:	fffffbff 	.word	0xfffffbff
 800829c:	fffff7ff 	.word	0xfffff7ff

080082a0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80082a0:	b580      	push	{r7, lr}
 80082a2:	b086      	sub	sp, #24
 80082a4:	af00      	add	r7, sp, #0
 80082a6:	6078      	str	r0, [r7, #4]
 80082a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	6a1b      	ldr	r3, [r3, #32]
 80082ae:	4a35      	ldr	r2, [pc, #212]	; (8008384 <TIM_OC3_SetConfig+0xe4>)
 80082b0:	401a      	ands	r2, r3
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	6a1b      	ldr	r3, [r3, #32]
 80082ba:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	685b      	ldr	r3, [r3, #4]
 80082c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	69db      	ldr	r3, [r3, #28]
 80082c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80082c8:	68fb      	ldr	r3, [r7, #12]
 80082ca:	2270      	movs	r2, #112	; 0x70
 80082cc:	4393      	bics	r3, r2
 80082ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80082d0:	68fb      	ldr	r3, [r7, #12]
 80082d2:	2203      	movs	r2, #3
 80082d4:	4393      	bics	r3, r2
 80082d6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80082d8:	683b      	ldr	r3, [r7, #0]
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	68fa      	ldr	r2, [r7, #12]
 80082de:	4313      	orrs	r3, r2
 80082e0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80082e2:	697b      	ldr	r3, [r7, #20]
 80082e4:	4a28      	ldr	r2, [pc, #160]	; (8008388 <TIM_OC3_SetConfig+0xe8>)
 80082e6:	4013      	ands	r3, r2
 80082e8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80082ea:	683b      	ldr	r3, [r7, #0]
 80082ec:	689b      	ldr	r3, [r3, #8]
 80082ee:	021b      	lsls	r3, r3, #8
 80082f0:	697a      	ldr	r2, [r7, #20]
 80082f2:	4313      	orrs	r3, r2
 80082f4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	4a24      	ldr	r2, [pc, #144]	; (800838c <TIM_OC3_SetConfig+0xec>)
 80082fa:	4293      	cmp	r3, r2
 80082fc:	d10d      	bne.n	800831a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80082fe:	697b      	ldr	r3, [r7, #20]
 8008300:	4a23      	ldr	r2, [pc, #140]	; (8008390 <TIM_OC3_SetConfig+0xf0>)
 8008302:	4013      	ands	r3, r2
 8008304:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008306:	683b      	ldr	r3, [r7, #0]
 8008308:	68db      	ldr	r3, [r3, #12]
 800830a:	021b      	lsls	r3, r3, #8
 800830c:	697a      	ldr	r2, [r7, #20]
 800830e:	4313      	orrs	r3, r2
 8008310:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008312:	697b      	ldr	r3, [r7, #20]
 8008314:	4a1f      	ldr	r2, [pc, #124]	; (8008394 <TIM_OC3_SetConfig+0xf4>)
 8008316:	4013      	ands	r3, r2
 8008318:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	4a1b      	ldr	r2, [pc, #108]	; (800838c <TIM_OC3_SetConfig+0xec>)
 800831e:	4293      	cmp	r3, r2
 8008320:	d00b      	beq.n	800833a <TIM_OC3_SetConfig+0x9a>
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	4a1c      	ldr	r2, [pc, #112]	; (8008398 <TIM_OC3_SetConfig+0xf8>)
 8008326:	4293      	cmp	r3, r2
 8008328:	d007      	beq.n	800833a <TIM_OC3_SetConfig+0x9a>
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	4a1b      	ldr	r2, [pc, #108]	; (800839c <TIM_OC3_SetConfig+0xfc>)
 800832e:	4293      	cmp	r3, r2
 8008330:	d003      	beq.n	800833a <TIM_OC3_SetConfig+0x9a>
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	4a1a      	ldr	r2, [pc, #104]	; (80083a0 <TIM_OC3_SetConfig+0x100>)
 8008336:	4293      	cmp	r3, r2
 8008338:	d113      	bne.n	8008362 <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800833a:	693b      	ldr	r3, [r7, #16]
 800833c:	4a19      	ldr	r2, [pc, #100]	; (80083a4 <TIM_OC3_SetConfig+0x104>)
 800833e:	4013      	ands	r3, r2
 8008340:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008342:	693b      	ldr	r3, [r7, #16]
 8008344:	4a18      	ldr	r2, [pc, #96]	; (80083a8 <TIM_OC3_SetConfig+0x108>)
 8008346:	4013      	ands	r3, r2
 8008348:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800834a:	683b      	ldr	r3, [r7, #0]
 800834c:	695b      	ldr	r3, [r3, #20]
 800834e:	011b      	lsls	r3, r3, #4
 8008350:	693a      	ldr	r2, [r7, #16]
 8008352:	4313      	orrs	r3, r2
 8008354:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008356:	683b      	ldr	r3, [r7, #0]
 8008358:	699b      	ldr	r3, [r3, #24]
 800835a:	011b      	lsls	r3, r3, #4
 800835c:	693a      	ldr	r2, [r7, #16]
 800835e:	4313      	orrs	r3, r2
 8008360:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	693a      	ldr	r2, [r7, #16]
 8008366:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	68fa      	ldr	r2, [r7, #12]
 800836c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800836e:	683b      	ldr	r3, [r7, #0]
 8008370:	685a      	ldr	r2, [r3, #4]
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	697a      	ldr	r2, [r7, #20]
 800837a:	621a      	str	r2, [r3, #32]
}
 800837c:	46c0      	nop			; (mov r8, r8)
 800837e:	46bd      	mov	sp, r7
 8008380:	b006      	add	sp, #24
 8008382:	bd80      	pop	{r7, pc}
 8008384:	fffffeff 	.word	0xfffffeff
 8008388:	fffffdff 	.word	0xfffffdff
 800838c:	40012c00 	.word	0x40012c00
 8008390:	fffff7ff 	.word	0xfffff7ff
 8008394:	fffffbff 	.word	0xfffffbff
 8008398:	40014000 	.word	0x40014000
 800839c:	40014400 	.word	0x40014400
 80083a0:	40014800 	.word	0x40014800
 80083a4:	ffffefff 	.word	0xffffefff
 80083a8:	ffffdfff 	.word	0xffffdfff

080083ac <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80083ac:	b580      	push	{r7, lr}
 80083ae:	b086      	sub	sp, #24
 80083b0:	af00      	add	r7, sp, #0
 80083b2:	6078      	str	r0, [r7, #4]
 80083b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	6a1b      	ldr	r3, [r3, #32]
 80083ba:	4a28      	ldr	r2, [pc, #160]	; (800845c <TIM_OC4_SetConfig+0xb0>)
 80083bc:	401a      	ands	r2, r3
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	6a1b      	ldr	r3, [r3, #32]
 80083c6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	685b      	ldr	r3, [r3, #4]
 80083cc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	69db      	ldr	r3, [r3, #28]
 80083d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80083d4:	68fb      	ldr	r3, [r7, #12]
 80083d6:	4a22      	ldr	r2, [pc, #136]	; (8008460 <TIM_OC4_SetConfig+0xb4>)
 80083d8:	4013      	ands	r3, r2
 80083da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80083dc:	68fb      	ldr	r3, [r7, #12]
 80083de:	4a21      	ldr	r2, [pc, #132]	; (8008464 <TIM_OC4_SetConfig+0xb8>)
 80083e0:	4013      	ands	r3, r2
 80083e2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80083e4:	683b      	ldr	r3, [r7, #0]
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	021b      	lsls	r3, r3, #8
 80083ea:	68fa      	ldr	r2, [r7, #12]
 80083ec:	4313      	orrs	r3, r2
 80083ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80083f0:	693b      	ldr	r3, [r7, #16]
 80083f2:	4a1d      	ldr	r2, [pc, #116]	; (8008468 <TIM_OC4_SetConfig+0xbc>)
 80083f4:	4013      	ands	r3, r2
 80083f6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80083f8:	683b      	ldr	r3, [r7, #0]
 80083fa:	689b      	ldr	r3, [r3, #8]
 80083fc:	031b      	lsls	r3, r3, #12
 80083fe:	693a      	ldr	r2, [r7, #16]
 8008400:	4313      	orrs	r3, r2
 8008402:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	4a19      	ldr	r2, [pc, #100]	; (800846c <TIM_OC4_SetConfig+0xc0>)
 8008408:	4293      	cmp	r3, r2
 800840a:	d00b      	beq.n	8008424 <TIM_OC4_SetConfig+0x78>
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	4a18      	ldr	r2, [pc, #96]	; (8008470 <TIM_OC4_SetConfig+0xc4>)
 8008410:	4293      	cmp	r3, r2
 8008412:	d007      	beq.n	8008424 <TIM_OC4_SetConfig+0x78>
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	4a17      	ldr	r2, [pc, #92]	; (8008474 <TIM_OC4_SetConfig+0xc8>)
 8008418:	4293      	cmp	r3, r2
 800841a:	d003      	beq.n	8008424 <TIM_OC4_SetConfig+0x78>
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	4a16      	ldr	r2, [pc, #88]	; (8008478 <TIM_OC4_SetConfig+0xcc>)
 8008420:	4293      	cmp	r3, r2
 8008422:	d109      	bne.n	8008438 <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008424:	697b      	ldr	r3, [r7, #20]
 8008426:	4a15      	ldr	r2, [pc, #84]	; (800847c <TIM_OC4_SetConfig+0xd0>)
 8008428:	4013      	ands	r3, r2
 800842a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800842c:	683b      	ldr	r3, [r7, #0]
 800842e:	695b      	ldr	r3, [r3, #20]
 8008430:	019b      	lsls	r3, r3, #6
 8008432:	697a      	ldr	r2, [r7, #20]
 8008434:	4313      	orrs	r3, r2
 8008436:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	697a      	ldr	r2, [r7, #20]
 800843c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	68fa      	ldr	r2, [r7, #12]
 8008442:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008444:	683b      	ldr	r3, [r7, #0]
 8008446:	685a      	ldr	r2, [r3, #4]
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	693a      	ldr	r2, [r7, #16]
 8008450:	621a      	str	r2, [r3, #32]
}
 8008452:	46c0      	nop			; (mov r8, r8)
 8008454:	46bd      	mov	sp, r7
 8008456:	b006      	add	sp, #24
 8008458:	bd80      	pop	{r7, pc}
 800845a:	46c0      	nop			; (mov r8, r8)
 800845c:	ffffefff 	.word	0xffffefff
 8008460:	ffff8fff 	.word	0xffff8fff
 8008464:	fffffcff 	.word	0xfffffcff
 8008468:	ffffdfff 	.word	0xffffdfff
 800846c:	40012c00 	.word	0x40012c00
 8008470:	40014000 	.word	0x40014000
 8008474:	40014400 	.word	0x40014400
 8008478:	40014800 	.word	0x40014800
 800847c:	ffffbfff 	.word	0xffffbfff

08008480 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008480:	b580      	push	{r7, lr}
 8008482:	b082      	sub	sp, #8
 8008484:	af00      	add	r7, sp, #0
 8008486:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008488:	46c0      	nop			; (mov r8, r8)
 800848a:	46bd      	mov	sp, r7
 800848c:	b002      	add	sp, #8
 800848e:	bd80      	pop	{r7, pc}

08008490 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008490:	b580      	push	{r7, lr}
 8008492:	b082      	sub	sp, #8
 8008494:	af00      	add	r7, sp, #0
 8008496:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008498:	46c0      	nop			; (mov r8, r8)
 800849a:	46bd      	mov	sp, r7
 800849c:	b002      	add	sp, #8
 800849e:	bd80      	pop	{r7, pc}

080084a0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80084a0:	b580      	push	{r7, lr}
 80084a2:	b082      	sub	sp, #8
 80084a4:	af00      	add	r7, sp, #0
 80084a6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	2b00      	cmp	r3, #0
 80084ac:	d101      	bne.n	80084b2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80084ae:	2301      	movs	r3, #1
 80084b0:	e044      	b.n	800853c <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80084b6:	2b00      	cmp	r3, #0
 80084b8:	d107      	bne.n	80084ca <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	2274      	movs	r2, #116	; 0x74
 80084be:	2100      	movs	r1, #0
 80084c0:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	0018      	movs	r0, r3
 80084c6:	f7fa fb49 	bl	8002b5c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	2224      	movs	r2, #36	; 0x24
 80084ce:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	681a      	ldr	r2, [r3, #0]
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	2101      	movs	r1, #1
 80084dc:	438a      	bics	r2, r1
 80084de:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	0018      	movs	r0, r3
 80084e4:	f000 fb24 	bl	8008b30 <UART_SetConfig>
 80084e8:	0003      	movs	r3, r0
 80084ea:	2b01      	cmp	r3, #1
 80084ec:	d101      	bne.n	80084f2 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80084ee:	2301      	movs	r3, #1
 80084f0:	e024      	b.n	800853c <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	d003      	beq.n	8008502 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	0018      	movs	r0, r3
 80084fe:	f000 fc9f 	bl	8008e40 <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	685a      	ldr	r2, [r3, #4]
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	490d      	ldr	r1, [pc, #52]	; (8008544 <HAL_UART_Init+0xa4>)
 800850e:	400a      	ands	r2, r1
 8008510:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	689a      	ldr	r2, [r3, #8]
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	212a      	movs	r1, #42	; 0x2a
 800851e:	438a      	bics	r2, r1
 8008520:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	681a      	ldr	r2, [r3, #0]
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	2101      	movs	r1, #1
 800852e:	430a      	orrs	r2, r1
 8008530:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	0018      	movs	r0, r3
 8008536:	f000 fd37 	bl	8008fa8 <UART_CheckIdleState>
 800853a:	0003      	movs	r3, r0
}
 800853c:	0018      	movs	r0, r3
 800853e:	46bd      	mov	sp, r7
 8008540:	b002      	add	sp, #8
 8008542:	bd80      	pop	{r7, pc}
 8008544:	ffffb7ff 	.word	0xffffb7ff

08008548 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008548:	b590      	push	{r4, r7, lr}
 800854a:	b0ab      	sub	sp, #172	; 0xac
 800854c:	af00      	add	r7, sp, #0
 800854e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	69db      	ldr	r3, [r3, #28]
 8008556:	22a4      	movs	r2, #164	; 0xa4
 8008558:	18b9      	adds	r1, r7, r2
 800855a:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	20a0      	movs	r0, #160	; 0xa0
 8008564:	1839      	adds	r1, r7, r0
 8008566:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	689b      	ldr	r3, [r3, #8]
 800856e:	219c      	movs	r1, #156	; 0x9c
 8008570:	1879      	adds	r1, r7, r1
 8008572:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8008574:	0011      	movs	r1, r2
 8008576:	18bb      	adds	r3, r7, r2
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	4a99      	ldr	r2, [pc, #612]	; (80087e0 <HAL_UART_IRQHandler+0x298>)
 800857c:	4013      	ands	r3, r2
 800857e:	2298      	movs	r2, #152	; 0x98
 8008580:	18bc      	adds	r4, r7, r2
 8008582:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 8008584:	18bb      	adds	r3, r7, r2
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	2b00      	cmp	r3, #0
 800858a:	d114      	bne.n	80085b6 <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800858c:	187b      	adds	r3, r7, r1
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	2220      	movs	r2, #32
 8008592:	4013      	ands	r3, r2
 8008594:	d00f      	beq.n	80085b6 <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8008596:	183b      	adds	r3, r7, r0
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	2220      	movs	r2, #32
 800859c:	4013      	ands	r3, r2
 800859e:	d00a      	beq.n	80085b6 <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80085a4:	2b00      	cmp	r3, #0
 80085a6:	d100      	bne.n	80085aa <HAL_UART_IRQHandler+0x62>
 80085a8:	e296      	b.n	8008ad8 <HAL_UART_IRQHandler+0x590>
      {
        huart->RxISR(huart);
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80085ae:	687a      	ldr	r2, [r7, #4]
 80085b0:	0010      	movs	r0, r2
 80085b2:	4798      	blx	r3
      }
      return;
 80085b4:	e290      	b.n	8008ad8 <HAL_UART_IRQHandler+0x590>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80085b6:	2398      	movs	r3, #152	; 0x98
 80085b8:	18fb      	adds	r3, r7, r3
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	2b00      	cmp	r3, #0
 80085be:	d100      	bne.n	80085c2 <HAL_UART_IRQHandler+0x7a>
 80085c0:	e114      	b.n	80087ec <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80085c2:	239c      	movs	r3, #156	; 0x9c
 80085c4:	18fb      	adds	r3, r7, r3
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	2201      	movs	r2, #1
 80085ca:	4013      	ands	r3, r2
 80085cc:	d106      	bne.n	80085dc <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80085ce:	23a0      	movs	r3, #160	; 0xa0
 80085d0:	18fb      	adds	r3, r7, r3
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	4a83      	ldr	r2, [pc, #524]	; (80087e4 <HAL_UART_IRQHandler+0x29c>)
 80085d6:	4013      	ands	r3, r2
 80085d8:	d100      	bne.n	80085dc <HAL_UART_IRQHandler+0x94>
 80085da:	e107      	b.n	80087ec <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80085dc:	23a4      	movs	r3, #164	; 0xa4
 80085de:	18fb      	adds	r3, r7, r3
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	2201      	movs	r2, #1
 80085e4:	4013      	ands	r3, r2
 80085e6:	d012      	beq.n	800860e <HAL_UART_IRQHandler+0xc6>
 80085e8:	23a0      	movs	r3, #160	; 0xa0
 80085ea:	18fb      	adds	r3, r7, r3
 80085ec:	681a      	ldr	r2, [r3, #0]
 80085ee:	2380      	movs	r3, #128	; 0x80
 80085f0:	005b      	lsls	r3, r3, #1
 80085f2:	4013      	ands	r3, r2
 80085f4:	d00b      	beq.n	800860e <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	2201      	movs	r2, #1
 80085fc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	2280      	movs	r2, #128	; 0x80
 8008602:	589b      	ldr	r3, [r3, r2]
 8008604:	2201      	movs	r2, #1
 8008606:	431a      	orrs	r2, r3
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	2180      	movs	r1, #128	; 0x80
 800860c:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800860e:	23a4      	movs	r3, #164	; 0xa4
 8008610:	18fb      	adds	r3, r7, r3
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	2202      	movs	r2, #2
 8008616:	4013      	ands	r3, r2
 8008618:	d011      	beq.n	800863e <HAL_UART_IRQHandler+0xf6>
 800861a:	239c      	movs	r3, #156	; 0x9c
 800861c:	18fb      	adds	r3, r7, r3
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	2201      	movs	r2, #1
 8008622:	4013      	ands	r3, r2
 8008624:	d00b      	beq.n	800863e <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	681b      	ldr	r3, [r3, #0]
 800862a:	2202      	movs	r2, #2
 800862c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	2280      	movs	r2, #128	; 0x80
 8008632:	589b      	ldr	r3, [r3, r2]
 8008634:	2204      	movs	r2, #4
 8008636:	431a      	orrs	r2, r3
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	2180      	movs	r1, #128	; 0x80
 800863c:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800863e:	23a4      	movs	r3, #164	; 0xa4
 8008640:	18fb      	adds	r3, r7, r3
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	2204      	movs	r2, #4
 8008646:	4013      	ands	r3, r2
 8008648:	d011      	beq.n	800866e <HAL_UART_IRQHandler+0x126>
 800864a:	239c      	movs	r3, #156	; 0x9c
 800864c:	18fb      	adds	r3, r7, r3
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	2201      	movs	r2, #1
 8008652:	4013      	ands	r3, r2
 8008654:	d00b      	beq.n	800866e <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	2204      	movs	r2, #4
 800865c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	2280      	movs	r2, #128	; 0x80
 8008662:	589b      	ldr	r3, [r3, r2]
 8008664:	2202      	movs	r2, #2
 8008666:	431a      	orrs	r2, r3
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	2180      	movs	r1, #128	; 0x80
 800866c:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800866e:	23a4      	movs	r3, #164	; 0xa4
 8008670:	18fb      	adds	r3, r7, r3
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	2208      	movs	r2, #8
 8008676:	4013      	ands	r3, r2
 8008678:	d017      	beq.n	80086aa <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800867a:	23a0      	movs	r3, #160	; 0xa0
 800867c:	18fb      	adds	r3, r7, r3
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	2220      	movs	r2, #32
 8008682:	4013      	ands	r3, r2
 8008684:	d105      	bne.n	8008692 <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8008686:	239c      	movs	r3, #156	; 0x9c
 8008688:	18fb      	adds	r3, r7, r3
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	2201      	movs	r2, #1
 800868e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8008690:	d00b      	beq.n	80086aa <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	2208      	movs	r2, #8
 8008698:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	2280      	movs	r2, #128	; 0x80
 800869e:	589b      	ldr	r3, [r3, r2]
 80086a0:	2208      	movs	r2, #8
 80086a2:	431a      	orrs	r2, r3
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	2180      	movs	r1, #128	; 0x80
 80086a8:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80086aa:	23a4      	movs	r3, #164	; 0xa4
 80086ac:	18fb      	adds	r3, r7, r3
 80086ae:	681a      	ldr	r2, [r3, #0]
 80086b0:	2380      	movs	r3, #128	; 0x80
 80086b2:	011b      	lsls	r3, r3, #4
 80086b4:	4013      	ands	r3, r2
 80086b6:	d013      	beq.n	80086e0 <HAL_UART_IRQHandler+0x198>
 80086b8:	23a0      	movs	r3, #160	; 0xa0
 80086ba:	18fb      	adds	r3, r7, r3
 80086bc:	681a      	ldr	r2, [r3, #0]
 80086be:	2380      	movs	r3, #128	; 0x80
 80086c0:	04db      	lsls	r3, r3, #19
 80086c2:	4013      	ands	r3, r2
 80086c4:	d00c      	beq.n	80086e0 <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	2280      	movs	r2, #128	; 0x80
 80086cc:	0112      	lsls	r2, r2, #4
 80086ce:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	2280      	movs	r2, #128	; 0x80
 80086d4:	589b      	ldr	r3, [r3, r2]
 80086d6:	2220      	movs	r2, #32
 80086d8:	431a      	orrs	r2, r3
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	2180      	movs	r1, #128	; 0x80
 80086de:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	2280      	movs	r2, #128	; 0x80
 80086e4:	589b      	ldr	r3, [r3, r2]
 80086e6:	2b00      	cmp	r3, #0
 80086e8:	d100      	bne.n	80086ec <HAL_UART_IRQHandler+0x1a4>
 80086ea:	e1f7      	b.n	8008adc <HAL_UART_IRQHandler+0x594>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80086ec:	23a4      	movs	r3, #164	; 0xa4
 80086ee:	18fb      	adds	r3, r7, r3
 80086f0:	681b      	ldr	r3, [r3, #0]
 80086f2:	2220      	movs	r2, #32
 80086f4:	4013      	ands	r3, r2
 80086f6:	d00e      	beq.n	8008716 <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80086f8:	23a0      	movs	r3, #160	; 0xa0
 80086fa:	18fb      	adds	r3, r7, r3
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	2220      	movs	r2, #32
 8008700:	4013      	ands	r3, r2
 8008702:	d008      	beq.n	8008716 <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008708:	2b00      	cmp	r3, #0
 800870a:	d004      	beq.n	8008716 <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008710:	687a      	ldr	r2, [r7, #4]
 8008712:	0010      	movs	r0, r2
 8008714:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	2280      	movs	r2, #128	; 0x80
 800871a:	589b      	ldr	r3, [r3, r2]
 800871c:	2194      	movs	r1, #148	; 0x94
 800871e:	187a      	adds	r2, r7, r1
 8008720:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	689b      	ldr	r3, [r3, #8]
 8008728:	2240      	movs	r2, #64	; 0x40
 800872a:	4013      	ands	r3, r2
 800872c:	2b40      	cmp	r3, #64	; 0x40
 800872e:	d004      	beq.n	800873a <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8008730:	187b      	adds	r3, r7, r1
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	2228      	movs	r2, #40	; 0x28
 8008736:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008738:	d047      	beq.n	80087ca <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	0018      	movs	r0, r3
 800873e:	f000 fd3f 	bl	80091c0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	689b      	ldr	r3, [r3, #8]
 8008748:	2240      	movs	r2, #64	; 0x40
 800874a:	4013      	ands	r3, r2
 800874c:	2b40      	cmp	r3, #64	; 0x40
 800874e:	d137      	bne.n	80087c0 <HAL_UART_IRQHandler+0x278>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008750:	f3ef 8310 	mrs	r3, PRIMASK
 8008754:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 8008756:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008758:	2090      	movs	r0, #144	; 0x90
 800875a:	183a      	adds	r2, r7, r0
 800875c:	6013      	str	r3, [r2, #0]
 800875e:	2301      	movs	r3, #1
 8008760:	667b      	str	r3, [r7, #100]	; 0x64
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008762:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008764:	f383 8810 	msr	PRIMASK, r3
}
 8008768:	46c0      	nop			; (mov r8, r8)
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	689a      	ldr	r2, [r3, #8]
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	2140      	movs	r1, #64	; 0x40
 8008776:	438a      	bics	r2, r1
 8008778:	609a      	str	r2, [r3, #8]
 800877a:	183b      	adds	r3, r7, r0
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008780:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008782:	f383 8810 	msr	PRIMASK, r3
}
 8008786:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800878c:	2b00      	cmp	r3, #0
 800878e:	d012      	beq.n	80087b6 <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008794:	4a14      	ldr	r2, [pc, #80]	; (80087e8 <HAL_UART_IRQHandler+0x2a0>)
 8008796:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800879c:	0018      	movs	r0, r3
 800879e:	f7fb fd71 	bl	8004284 <HAL_DMA_Abort_IT>
 80087a2:	1e03      	subs	r3, r0, #0
 80087a4:	d01a      	beq.n	80087dc <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80087aa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80087b0:	0018      	movs	r0, r3
 80087b2:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80087b4:	e012      	b.n	80087dc <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	0018      	movs	r0, r3
 80087ba:	f000 f9a5 	bl	8008b08 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80087be:	e00d      	b.n	80087dc <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	0018      	movs	r0, r3
 80087c4:	f000 f9a0 	bl	8008b08 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80087c8:	e008      	b.n	80087dc <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	0018      	movs	r0, r3
 80087ce:	f000 f99b 	bl	8008b08 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	2280      	movs	r2, #128	; 0x80
 80087d6:	2100      	movs	r1, #0
 80087d8:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 80087da:	e17f      	b.n	8008adc <HAL_UART_IRQHandler+0x594>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80087dc:	46c0      	nop			; (mov r8, r8)
    return;
 80087de:	e17d      	b.n	8008adc <HAL_UART_IRQHandler+0x594>
 80087e0:	0000080f 	.word	0x0000080f
 80087e4:	04000120 	.word	0x04000120
 80087e8:	08009285 	.word	0x08009285

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80087f0:	2b01      	cmp	r3, #1
 80087f2:	d000      	beq.n	80087f6 <HAL_UART_IRQHandler+0x2ae>
 80087f4:	e131      	b.n	8008a5a <HAL_UART_IRQHandler+0x512>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80087f6:	23a4      	movs	r3, #164	; 0xa4
 80087f8:	18fb      	adds	r3, r7, r3
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	2210      	movs	r2, #16
 80087fe:	4013      	ands	r3, r2
 8008800:	d100      	bne.n	8008804 <HAL_UART_IRQHandler+0x2bc>
 8008802:	e12a      	b.n	8008a5a <HAL_UART_IRQHandler+0x512>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8008804:	23a0      	movs	r3, #160	; 0xa0
 8008806:	18fb      	adds	r3, r7, r3
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	2210      	movs	r2, #16
 800880c:	4013      	ands	r3, r2
 800880e:	d100      	bne.n	8008812 <HAL_UART_IRQHandler+0x2ca>
 8008810:	e123      	b.n	8008a5a <HAL_UART_IRQHandler+0x512>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	2210      	movs	r2, #16
 8008818:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	681b      	ldr	r3, [r3, #0]
 800881e:	689b      	ldr	r3, [r3, #8]
 8008820:	2240      	movs	r2, #64	; 0x40
 8008822:	4013      	ands	r3, r2
 8008824:	2b40      	cmp	r3, #64	; 0x40
 8008826:	d000      	beq.n	800882a <HAL_UART_IRQHandler+0x2e2>
 8008828:	e09b      	b.n	8008962 <HAL_UART_IRQHandler+0x41a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	685a      	ldr	r2, [r3, #4]
 8008832:	217e      	movs	r1, #126	; 0x7e
 8008834:	187b      	adds	r3, r7, r1
 8008836:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8008838:	187b      	adds	r3, r7, r1
 800883a:	881b      	ldrh	r3, [r3, #0]
 800883c:	2b00      	cmp	r3, #0
 800883e:	d100      	bne.n	8008842 <HAL_UART_IRQHandler+0x2fa>
 8008840:	e14e      	b.n	8008ae0 <HAL_UART_IRQHandler+0x598>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	2258      	movs	r2, #88	; 0x58
 8008846:	5a9b      	ldrh	r3, [r3, r2]
 8008848:	187a      	adds	r2, r7, r1
 800884a:	8812      	ldrh	r2, [r2, #0]
 800884c:	429a      	cmp	r2, r3
 800884e:	d300      	bcc.n	8008852 <HAL_UART_IRQHandler+0x30a>
 8008850:	e146      	b.n	8008ae0 <HAL_UART_IRQHandler+0x598>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	187a      	adds	r2, r7, r1
 8008856:	215a      	movs	r1, #90	; 0x5a
 8008858:	8812      	ldrh	r2, [r2, #0]
 800885a:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008860:	699b      	ldr	r3, [r3, #24]
 8008862:	2b20      	cmp	r3, #32
 8008864:	d06e      	beq.n	8008944 <HAL_UART_IRQHandler+0x3fc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008866:	f3ef 8310 	mrs	r3, PRIMASK
 800886a:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 800886c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800886e:	67bb      	str	r3, [r7, #120]	; 0x78
 8008870:	2301      	movs	r3, #1
 8008872:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008874:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008876:	f383 8810 	msr	PRIMASK, r3
}
 800887a:	46c0      	nop			; (mov r8, r8)
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	681a      	ldr	r2, [r3, #0]
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	499a      	ldr	r1, [pc, #616]	; (8008af0 <HAL_UART_IRQHandler+0x5a8>)
 8008888:	400a      	ands	r2, r1
 800888a:	601a      	str	r2, [r3, #0]
 800888c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800888e:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008890:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008892:	f383 8810 	msr	PRIMASK, r3
}
 8008896:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008898:	f3ef 8310 	mrs	r3, PRIMASK
 800889c:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 800889e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80088a0:	677b      	str	r3, [r7, #116]	; 0x74
 80088a2:	2301      	movs	r3, #1
 80088a4:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80088a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80088a8:	f383 8810 	msr	PRIMASK, r3
}
 80088ac:	46c0      	nop			; (mov r8, r8)
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	689a      	ldr	r2, [r3, #8]
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	2101      	movs	r1, #1
 80088ba:	438a      	bics	r2, r1
 80088bc:	609a      	str	r2, [r3, #8]
 80088be:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80088c0:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80088c2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80088c4:	f383 8810 	msr	PRIMASK, r3
}
 80088c8:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80088ca:	f3ef 8310 	mrs	r3, PRIMASK
 80088ce:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 80088d0:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80088d2:	673b      	str	r3, [r7, #112]	; 0x70
 80088d4:	2301      	movs	r3, #1
 80088d6:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80088d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80088da:	f383 8810 	msr	PRIMASK, r3
}
 80088de:	46c0      	nop			; (mov r8, r8)
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	689a      	ldr	r2, [r3, #8]
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	2140      	movs	r1, #64	; 0x40
 80088ec:	438a      	bics	r2, r1
 80088ee:	609a      	str	r2, [r3, #8]
 80088f0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80088f2:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80088f4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80088f6:	f383 8810 	msr	PRIMASK, r3
}
 80088fa:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	2220      	movs	r2, #32
 8008900:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	2200      	movs	r2, #0
 8008906:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008908:	f3ef 8310 	mrs	r3, PRIMASK
 800890c:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 800890e:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008910:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008912:	2301      	movs	r3, #1
 8008914:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008916:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008918:	f383 8810 	msr	PRIMASK, r3
}
 800891c:	46c0      	nop			; (mov r8, r8)
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	681b      	ldr	r3, [r3, #0]
 8008922:	681a      	ldr	r2, [r3, #0]
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	2110      	movs	r1, #16
 800892a:	438a      	bics	r2, r1
 800892c:	601a      	str	r2, [r3, #0]
 800892e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008930:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008932:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008934:	f383 8810 	msr	PRIMASK, r3
}
 8008938:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800893e:	0018      	movs	r0, r3
 8008940:	f7fb fc68 	bl	8004214 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	2258      	movs	r2, #88	; 0x58
 8008948:	5a9a      	ldrh	r2, [r3, r2]
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	215a      	movs	r1, #90	; 0x5a
 800894e:	5a5b      	ldrh	r3, [r3, r1]
 8008950:	b29b      	uxth	r3, r3
 8008952:	1ad3      	subs	r3, r2, r3
 8008954:	b29a      	uxth	r2, r3
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	0011      	movs	r1, r2
 800895a:	0018      	movs	r0, r3
 800895c:	f000 f8dc 	bl	8008b18 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008960:	e0be      	b.n	8008ae0 <HAL_UART_IRQHandler+0x598>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	2258      	movs	r2, #88	; 0x58
 8008966:	5a99      	ldrh	r1, [r3, r2]
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	225a      	movs	r2, #90	; 0x5a
 800896c:	5a9b      	ldrh	r3, [r3, r2]
 800896e:	b29a      	uxth	r2, r3
 8008970:	208e      	movs	r0, #142	; 0x8e
 8008972:	183b      	adds	r3, r7, r0
 8008974:	1a8a      	subs	r2, r1, r2
 8008976:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	225a      	movs	r2, #90	; 0x5a
 800897c:	5a9b      	ldrh	r3, [r3, r2]
 800897e:	b29b      	uxth	r3, r3
 8008980:	2b00      	cmp	r3, #0
 8008982:	d100      	bne.n	8008986 <HAL_UART_IRQHandler+0x43e>
 8008984:	e0ae      	b.n	8008ae4 <HAL_UART_IRQHandler+0x59c>
          && (nb_rx_data > 0U))
 8008986:	183b      	adds	r3, r7, r0
 8008988:	881b      	ldrh	r3, [r3, #0]
 800898a:	2b00      	cmp	r3, #0
 800898c:	d100      	bne.n	8008990 <HAL_UART_IRQHandler+0x448>
 800898e:	e0a9      	b.n	8008ae4 <HAL_UART_IRQHandler+0x59c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008990:	f3ef 8310 	mrs	r3, PRIMASK
 8008994:	60fb      	str	r3, [r7, #12]
  return(result);
 8008996:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008998:	2488      	movs	r4, #136	; 0x88
 800899a:	193a      	adds	r2, r7, r4
 800899c:	6013      	str	r3, [r2, #0]
 800899e:	2301      	movs	r3, #1
 80089a0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80089a2:	693b      	ldr	r3, [r7, #16]
 80089a4:	f383 8810 	msr	PRIMASK, r3
}
 80089a8:	46c0      	nop			; (mov r8, r8)
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	681b      	ldr	r3, [r3, #0]
 80089ae:	681a      	ldr	r2, [r3, #0]
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	494f      	ldr	r1, [pc, #316]	; (8008af4 <HAL_UART_IRQHandler+0x5ac>)
 80089b6:	400a      	ands	r2, r1
 80089b8:	601a      	str	r2, [r3, #0]
 80089ba:	193b      	adds	r3, r7, r4
 80089bc:	681b      	ldr	r3, [r3, #0]
 80089be:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80089c0:	697b      	ldr	r3, [r7, #20]
 80089c2:	f383 8810 	msr	PRIMASK, r3
}
 80089c6:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80089c8:	f3ef 8310 	mrs	r3, PRIMASK
 80089cc:	61bb      	str	r3, [r7, #24]
  return(result);
 80089ce:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80089d0:	2484      	movs	r4, #132	; 0x84
 80089d2:	193a      	adds	r2, r7, r4
 80089d4:	6013      	str	r3, [r2, #0]
 80089d6:	2301      	movs	r3, #1
 80089d8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80089da:	69fb      	ldr	r3, [r7, #28]
 80089dc:	f383 8810 	msr	PRIMASK, r3
}
 80089e0:	46c0      	nop			; (mov r8, r8)
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	681b      	ldr	r3, [r3, #0]
 80089e6:	689a      	ldr	r2, [r3, #8]
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	2101      	movs	r1, #1
 80089ee:	438a      	bics	r2, r1
 80089f0:	609a      	str	r2, [r3, #8]
 80089f2:	193b      	adds	r3, r7, r4
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80089f8:	6a3b      	ldr	r3, [r7, #32]
 80089fa:	f383 8810 	msr	PRIMASK, r3
}
 80089fe:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	2220      	movs	r2, #32
 8008a04:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	2200      	movs	r2, #0
 8008a0a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	2200      	movs	r2, #0
 8008a10:	665a      	str	r2, [r3, #100]	; 0x64
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008a12:	f3ef 8310 	mrs	r3, PRIMASK
 8008a16:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8008a18:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008a1a:	2480      	movs	r4, #128	; 0x80
 8008a1c:	193a      	adds	r2, r7, r4
 8008a1e:	6013      	str	r3, [r2, #0]
 8008a20:	2301      	movs	r3, #1
 8008a22:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008a24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a26:	f383 8810 	msr	PRIMASK, r3
}
 8008a2a:	46c0      	nop			; (mov r8, r8)
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	681b      	ldr	r3, [r3, #0]
 8008a30:	681a      	ldr	r2, [r3, #0]
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	681b      	ldr	r3, [r3, #0]
 8008a36:	2110      	movs	r1, #16
 8008a38:	438a      	bics	r2, r1
 8008a3a:	601a      	str	r2, [r3, #0]
 8008a3c:	193b      	adds	r3, r7, r4
 8008a3e:	681b      	ldr	r3, [r3, #0]
 8008a40:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008a42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a44:	f383 8810 	msr	PRIMASK, r3
}
 8008a48:	46c0      	nop			; (mov r8, r8)
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008a4a:	183b      	adds	r3, r7, r0
 8008a4c:	881a      	ldrh	r2, [r3, #0]
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	0011      	movs	r1, r2
 8008a52:	0018      	movs	r0, r3
 8008a54:	f000 f860 	bl	8008b18 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008a58:	e044      	b.n	8008ae4 <HAL_UART_IRQHandler+0x59c>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8008a5a:	23a4      	movs	r3, #164	; 0xa4
 8008a5c:	18fb      	adds	r3, r7, r3
 8008a5e:	681a      	ldr	r2, [r3, #0]
 8008a60:	2380      	movs	r3, #128	; 0x80
 8008a62:	035b      	lsls	r3, r3, #13
 8008a64:	4013      	ands	r3, r2
 8008a66:	d010      	beq.n	8008a8a <HAL_UART_IRQHandler+0x542>
 8008a68:	239c      	movs	r3, #156	; 0x9c
 8008a6a:	18fb      	adds	r3, r7, r3
 8008a6c:	681a      	ldr	r2, [r3, #0]
 8008a6e:	2380      	movs	r3, #128	; 0x80
 8008a70:	03db      	lsls	r3, r3, #15
 8008a72:	4013      	ands	r3, r2
 8008a74:	d009      	beq.n	8008a8a <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	681b      	ldr	r3, [r3, #0]
 8008a7a:	2280      	movs	r2, #128	; 0x80
 8008a7c:	0352      	lsls	r2, r2, #13
 8008a7e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	0018      	movs	r0, r3
 8008a84:	f000 fc40 	bl	8009308 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008a88:	e02f      	b.n	8008aea <HAL_UART_IRQHandler+0x5a2>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8008a8a:	23a4      	movs	r3, #164	; 0xa4
 8008a8c:	18fb      	adds	r3, r7, r3
 8008a8e:	681b      	ldr	r3, [r3, #0]
 8008a90:	2280      	movs	r2, #128	; 0x80
 8008a92:	4013      	ands	r3, r2
 8008a94:	d00f      	beq.n	8008ab6 <HAL_UART_IRQHandler+0x56e>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8008a96:	23a0      	movs	r3, #160	; 0xa0
 8008a98:	18fb      	adds	r3, r7, r3
 8008a9a:	681b      	ldr	r3, [r3, #0]
 8008a9c:	2280      	movs	r2, #128	; 0x80
 8008a9e:	4013      	ands	r3, r2
 8008aa0:	d009      	beq.n	8008ab6 <HAL_UART_IRQHandler+0x56e>
  {
    if (huart->TxISR != NULL)
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008aa6:	2b00      	cmp	r3, #0
 8008aa8:	d01e      	beq.n	8008ae8 <HAL_UART_IRQHandler+0x5a0>
    {
      huart->TxISR(huart);
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008aae:	687a      	ldr	r2, [r7, #4]
 8008ab0:	0010      	movs	r0, r2
 8008ab2:	4798      	blx	r3
    }
    return;
 8008ab4:	e018      	b.n	8008ae8 <HAL_UART_IRQHandler+0x5a0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8008ab6:	23a4      	movs	r3, #164	; 0xa4
 8008ab8:	18fb      	adds	r3, r7, r3
 8008aba:	681b      	ldr	r3, [r3, #0]
 8008abc:	2240      	movs	r2, #64	; 0x40
 8008abe:	4013      	ands	r3, r2
 8008ac0:	d013      	beq.n	8008aea <HAL_UART_IRQHandler+0x5a2>
 8008ac2:	23a0      	movs	r3, #160	; 0xa0
 8008ac4:	18fb      	adds	r3, r7, r3
 8008ac6:	681b      	ldr	r3, [r3, #0]
 8008ac8:	2240      	movs	r2, #64	; 0x40
 8008aca:	4013      	ands	r3, r2
 8008acc:	d00d      	beq.n	8008aea <HAL_UART_IRQHandler+0x5a2>
  {
    UART_EndTransmit_IT(huart);
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	0018      	movs	r0, r3
 8008ad2:	f000 fbee 	bl	80092b2 <UART_EndTransmit_IT>
    return;
 8008ad6:	e008      	b.n	8008aea <HAL_UART_IRQHandler+0x5a2>
      return;
 8008ad8:	46c0      	nop			; (mov r8, r8)
 8008ada:	e006      	b.n	8008aea <HAL_UART_IRQHandler+0x5a2>
    return;
 8008adc:	46c0      	nop			; (mov r8, r8)
 8008ade:	e004      	b.n	8008aea <HAL_UART_IRQHandler+0x5a2>
      return;
 8008ae0:	46c0      	nop			; (mov r8, r8)
 8008ae2:	e002      	b.n	8008aea <HAL_UART_IRQHandler+0x5a2>
      return;
 8008ae4:	46c0      	nop			; (mov r8, r8)
 8008ae6:	e000      	b.n	8008aea <HAL_UART_IRQHandler+0x5a2>
    return;
 8008ae8:	46c0      	nop			; (mov r8, r8)
  }

}
 8008aea:	46bd      	mov	sp, r7
 8008aec:	b02b      	add	sp, #172	; 0xac
 8008aee:	bd90      	pop	{r4, r7, pc}
 8008af0:	fffffeff 	.word	0xfffffeff
 8008af4:	fffffedf 	.word	0xfffffedf

08008af8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008af8:	b580      	push	{r7, lr}
 8008afa:	b082      	sub	sp, #8
 8008afc:	af00      	add	r7, sp, #0
 8008afe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8008b00:	46c0      	nop			; (mov r8, r8)
 8008b02:	46bd      	mov	sp, r7
 8008b04:	b002      	add	sp, #8
 8008b06:	bd80      	pop	{r7, pc}

08008b08 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008b08:	b580      	push	{r7, lr}
 8008b0a:	b082      	sub	sp, #8
 8008b0c:	af00      	add	r7, sp, #0
 8008b0e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8008b10:	46c0      	nop			; (mov r8, r8)
 8008b12:	46bd      	mov	sp, r7
 8008b14:	b002      	add	sp, #8
 8008b16:	bd80      	pop	{r7, pc}

08008b18 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008b18:	b580      	push	{r7, lr}
 8008b1a:	b082      	sub	sp, #8
 8008b1c:	af00      	add	r7, sp, #0
 8008b1e:	6078      	str	r0, [r7, #4]
 8008b20:	000a      	movs	r2, r1
 8008b22:	1cbb      	adds	r3, r7, #2
 8008b24:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008b26:	46c0      	nop			; (mov r8, r8)
 8008b28:	46bd      	mov	sp, r7
 8008b2a:	b002      	add	sp, #8
 8008b2c:	bd80      	pop	{r7, pc}
	...

08008b30 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008b30:	b580      	push	{r7, lr}
 8008b32:	b088      	sub	sp, #32
 8008b34:	af00      	add	r7, sp, #0
 8008b36:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008b38:	231e      	movs	r3, #30
 8008b3a:	18fb      	adds	r3, r7, r3
 8008b3c:	2200      	movs	r2, #0
 8008b3e:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	689a      	ldr	r2, [r3, #8]
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	691b      	ldr	r3, [r3, #16]
 8008b48:	431a      	orrs	r2, r3
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	695b      	ldr	r3, [r3, #20]
 8008b4e:	431a      	orrs	r2, r3
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	69db      	ldr	r3, [r3, #28]
 8008b54:	4313      	orrs	r3, r2
 8008b56:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	681b      	ldr	r3, [r3, #0]
 8008b5e:	4aaf      	ldr	r2, [pc, #700]	; (8008e1c <UART_SetConfig+0x2ec>)
 8008b60:	4013      	ands	r3, r2
 8008b62:	0019      	movs	r1, r3
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	697a      	ldr	r2, [r7, #20]
 8008b6a:	430a      	orrs	r2, r1
 8008b6c:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	681b      	ldr	r3, [r3, #0]
 8008b72:	685b      	ldr	r3, [r3, #4]
 8008b74:	4aaa      	ldr	r2, [pc, #680]	; (8008e20 <UART_SetConfig+0x2f0>)
 8008b76:	4013      	ands	r3, r2
 8008b78:	0019      	movs	r1, r3
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	68da      	ldr	r2, [r3, #12]
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	681b      	ldr	r3, [r3, #0]
 8008b82:	430a      	orrs	r2, r1
 8008b84:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	699b      	ldr	r3, [r3, #24]
 8008b8a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	6a1b      	ldr	r3, [r3, #32]
 8008b90:	697a      	ldr	r2, [r7, #20]
 8008b92:	4313      	orrs	r3, r2
 8008b94:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	681b      	ldr	r3, [r3, #0]
 8008b9a:	689b      	ldr	r3, [r3, #8]
 8008b9c:	4aa1      	ldr	r2, [pc, #644]	; (8008e24 <UART_SetConfig+0x2f4>)
 8008b9e:	4013      	ands	r3, r2
 8008ba0:	0019      	movs	r1, r3
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	681b      	ldr	r3, [r3, #0]
 8008ba6:	697a      	ldr	r2, [r7, #20]
 8008ba8:	430a      	orrs	r2, r1
 8008baa:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	4a9d      	ldr	r2, [pc, #628]	; (8008e28 <UART_SetConfig+0x2f8>)
 8008bb2:	4293      	cmp	r3, r2
 8008bb4:	d127      	bne.n	8008c06 <UART_SetConfig+0xd6>
 8008bb6:	4b9d      	ldr	r3, [pc, #628]	; (8008e2c <UART_SetConfig+0x2fc>)
 8008bb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008bba:	2203      	movs	r2, #3
 8008bbc:	4013      	ands	r3, r2
 8008bbe:	2b03      	cmp	r3, #3
 8008bc0:	d00d      	beq.n	8008bde <UART_SetConfig+0xae>
 8008bc2:	d81b      	bhi.n	8008bfc <UART_SetConfig+0xcc>
 8008bc4:	2b02      	cmp	r3, #2
 8008bc6:	d014      	beq.n	8008bf2 <UART_SetConfig+0xc2>
 8008bc8:	d818      	bhi.n	8008bfc <UART_SetConfig+0xcc>
 8008bca:	2b00      	cmp	r3, #0
 8008bcc:	d002      	beq.n	8008bd4 <UART_SetConfig+0xa4>
 8008bce:	2b01      	cmp	r3, #1
 8008bd0:	d00a      	beq.n	8008be8 <UART_SetConfig+0xb8>
 8008bd2:	e013      	b.n	8008bfc <UART_SetConfig+0xcc>
 8008bd4:	231f      	movs	r3, #31
 8008bd6:	18fb      	adds	r3, r7, r3
 8008bd8:	2200      	movs	r2, #0
 8008bda:	701a      	strb	r2, [r3, #0]
 8008bdc:	e065      	b.n	8008caa <UART_SetConfig+0x17a>
 8008bde:	231f      	movs	r3, #31
 8008be0:	18fb      	adds	r3, r7, r3
 8008be2:	2202      	movs	r2, #2
 8008be4:	701a      	strb	r2, [r3, #0]
 8008be6:	e060      	b.n	8008caa <UART_SetConfig+0x17a>
 8008be8:	231f      	movs	r3, #31
 8008bea:	18fb      	adds	r3, r7, r3
 8008bec:	2204      	movs	r2, #4
 8008bee:	701a      	strb	r2, [r3, #0]
 8008bf0:	e05b      	b.n	8008caa <UART_SetConfig+0x17a>
 8008bf2:	231f      	movs	r3, #31
 8008bf4:	18fb      	adds	r3, r7, r3
 8008bf6:	2208      	movs	r2, #8
 8008bf8:	701a      	strb	r2, [r3, #0]
 8008bfa:	e056      	b.n	8008caa <UART_SetConfig+0x17a>
 8008bfc:	231f      	movs	r3, #31
 8008bfe:	18fb      	adds	r3, r7, r3
 8008c00:	2210      	movs	r2, #16
 8008c02:	701a      	strb	r2, [r3, #0]
 8008c04:	e051      	b.n	8008caa <UART_SetConfig+0x17a>
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	4a89      	ldr	r2, [pc, #548]	; (8008e30 <UART_SetConfig+0x300>)
 8008c0c:	4293      	cmp	r3, r2
 8008c0e:	d134      	bne.n	8008c7a <UART_SetConfig+0x14a>
 8008c10:	4b86      	ldr	r3, [pc, #536]	; (8008e2c <UART_SetConfig+0x2fc>)
 8008c12:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008c14:	23c0      	movs	r3, #192	; 0xc0
 8008c16:	029b      	lsls	r3, r3, #10
 8008c18:	4013      	ands	r3, r2
 8008c1a:	22c0      	movs	r2, #192	; 0xc0
 8008c1c:	0292      	lsls	r2, r2, #10
 8008c1e:	4293      	cmp	r3, r2
 8008c20:	d017      	beq.n	8008c52 <UART_SetConfig+0x122>
 8008c22:	22c0      	movs	r2, #192	; 0xc0
 8008c24:	0292      	lsls	r2, r2, #10
 8008c26:	4293      	cmp	r3, r2
 8008c28:	d822      	bhi.n	8008c70 <UART_SetConfig+0x140>
 8008c2a:	2280      	movs	r2, #128	; 0x80
 8008c2c:	0292      	lsls	r2, r2, #10
 8008c2e:	4293      	cmp	r3, r2
 8008c30:	d019      	beq.n	8008c66 <UART_SetConfig+0x136>
 8008c32:	2280      	movs	r2, #128	; 0x80
 8008c34:	0292      	lsls	r2, r2, #10
 8008c36:	4293      	cmp	r3, r2
 8008c38:	d81a      	bhi.n	8008c70 <UART_SetConfig+0x140>
 8008c3a:	2b00      	cmp	r3, #0
 8008c3c:	d004      	beq.n	8008c48 <UART_SetConfig+0x118>
 8008c3e:	2280      	movs	r2, #128	; 0x80
 8008c40:	0252      	lsls	r2, r2, #9
 8008c42:	4293      	cmp	r3, r2
 8008c44:	d00a      	beq.n	8008c5c <UART_SetConfig+0x12c>
 8008c46:	e013      	b.n	8008c70 <UART_SetConfig+0x140>
 8008c48:	231f      	movs	r3, #31
 8008c4a:	18fb      	adds	r3, r7, r3
 8008c4c:	2200      	movs	r2, #0
 8008c4e:	701a      	strb	r2, [r3, #0]
 8008c50:	e02b      	b.n	8008caa <UART_SetConfig+0x17a>
 8008c52:	231f      	movs	r3, #31
 8008c54:	18fb      	adds	r3, r7, r3
 8008c56:	2202      	movs	r2, #2
 8008c58:	701a      	strb	r2, [r3, #0]
 8008c5a:	e026      	b.n	8008caa <UART_SetConfig+0x17a>
 8008c5c:	231f      	movs	r3, #31
 8008c5e:	18fb      	adds	r3, r7, r3
 8008c60:	2204      	movs	r2, #4
 8008c62:	701a      	strb	r2, [r3, #0]
 8008c64:	e021      	b.n	8008caa <UART_SetConfig+0x17a>
 8008c66:	231f      	movs	r3, #31
 8008c68:	18fb      	adds	r3, r7, r3
 8008c6a:	2208      	movs	r2, #8
 8008c6c:	701a      	strb	r2, [r3, #0]
 8008c6e:	e01c      	b.n	8008caa <UART_SetConfig+0x17a>
 8008c70:	231f      	movs	r3, #31
 8008c72:	18fb      	adds	r3, r7, r3
 8008c74:	2210      	movs	r2, #16
 8008c76:	701a      	strb	r2, [r3, #0]
 8008c78:	e017      	b.n	8008caa <UART_SetConfig+0x17a>
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	681b      	ldr	r3, [r3, #0]
 8008c7e:	4a6d      	ldr	r2, [pc, #436]	; (8008e34 <UART_SetConfig+0x304>)
 8008c80:	4293      	cmp	r3, r2
 8008c82:	d104      	bne.n	8008c8e <UART_SetConfig+0x15e>
 8008c84:	231f      	movs	r3, #31
 8008c86:	18fb      	adds	r3, r7, r3
 8008c88:	2200      	movs	r2, #0
 8008c8a:	701a      	strb	r2, [r3, #0]
 8008c8c:	e00d      	b.n	8008caa <UART_SetConfig+0x17a>
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	681b      	ldr	r3, [r3, #0]
 8008c92:	4a69      	ldr	r2, [pc, #420]	; (8008e38 <UART_SetConfig+0x308>)
 8008c94:	4293      	cmp	r3, r2
 8008c96:	d104      	bne.n	8008ca2 <UART_SetConfig+0x172>
 8008c98:	231f      	movs	r3, #31
 8008c9a:	18fb      	adds	r3, r7, r3
 8008c9c:	2200      	movs	r2, #0
 8008c9e:	701a      	strb	r2, [r3, #0]
 8008ca0:	e003      	b.n	8008caa <UART_SetConfig+0x17a>
 8008ca2:	231f      	movs	r3, #31
 8008ca4:	18fb      	adds	r3, r7, r3
 8008ca6:	2210      	movs	r2, #16
 8008ca8:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	69da      	ldr	r2, [r3, #28]
 8008cae:	2380      	movs	r3, #128	; 0x80
 8008cb0:	021b      	lsls	r3, r3, #8
 8008cb2:	429a      	cmp	r2, r3
 8008cb4:	d15d      	bne.n	8008d72 <UART_SetConfig+0x242>
  {
    switch (clocksource)
 8008cb6:	231f      	movs	r3, #31
 8008cb8:	18fb      	adds	r3, r7, r3
 8008cba:	781b      	ldrb	r3, [r3, #0]
 8008cbc:	2b08      	cmp	r3, #8
 8008cbe:	d015      	beq.n	8008cec <UART_SetConfig+0x1bc>
 8008cc0:	dc18      	bgt.n	8008cf4 <UART_SetConfig+0x1c4>
 8008cc2:	2b04      	cmp	r3, #4
 8008cc4:	d00d      	beq.n	8008ce2 <UART_SetConfig+0x1b2>
 8008cc6:	dc15      	bgt.n	8008cf4 <UART_SetConfig+0x1c4>
 8008cc8:	2b00      	cmp	r3, #0
 8008cca:	d002      	beq.n	8008cd2 <UART_SetConfig+0x1a2>
 8008ccc:	2b02      	cmp	r3, #2
 8008cce:	d005      	beq.n	8008cdc <UART_SetConfig+0x1ac>
 8008cd0:	e010      	b.n	8008cf4 <UART_SetConfig+0x1c4>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008cd2:	f7fe f865 	bl	8006da0 <HAL_RCC_GetPCLK1Freq>
 8008cd6:	0003      	movs	r3, r0
 8008cd8:	61bb      	str	r3, [r7, #24]
        break;
 8008cda:	e012      	b.n	8008d02 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008cdc:	4b57      	ldr	r3, [pc, #348]	; (8008e3c <UART_SetConfig+0x30c>)
 8008cde:	61bb      	str	r3, [r7, #24]
        break;
 8008ce0:	e00f      	b.n	8008d02 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008ce2:	f7fd ffd1 	bl	8006c88 <HAL_RCC_GetSysClockFreq>
 8008ce6:	0003      	movs	r3, r0
 8008ce8:	61bb      	str	r3, [r7, #24]
        break;
 8008cea:	e00a      	b.n	8008d02 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008cec:	2380      	movs	r3, #128	; 0x80
 8008cee:	021b      	lsls	r3, r3, #8
 8008cf0:	61bb      	str	r3, [r7, #24]
        break;
 8008cf2:	e006      	b.n	8008d02 <UART_SetConfig+0x1d2>
      default:
        pclk = 0U;
 8008cf4:	2300      	movs	r3, #0
 8008cf6:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8008cf8:	231e      	movs	r3, #30
 8008cfa:	18fb      	adds	r3, r7, r3
 8008cfc:	2201      	movs	r2, #1
 8008cfe:	701a      	strb	r2, [r3, #0]
        break;
 8008d00:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008d02:	69bb      	ldr	r3, [r7, #24]
 8008d04:	2b00      	cmp	r3, #0
 8008d06:	d100      	bne.n	8008d0a <UART_SetConfig+0x1da>
 8008d08:	e07b      	b.n	8008e02 <UART_SetConfig+0x2d2>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8008d0a:	69bb      	ldr	r3, [r7, #24]
 8008d0c:	005a      	lsls	r2, r3, #1
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	685b      	ldr	r3, [r3, #4]
 8008d12:	085b      	lsrs	r3, r3, #1
 8008d14:	18d2      	adds	r2, r2, r3
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	685b      	ldr	r3, [r3, #4]
 8008d1a:	0019      	movs	r1, r3
 8008d1c:	0010      	movs	r0, r2
 8008d1e:	f7f7 fa05 	bl	800012c <__udivsi3>
 8008d22:	0003      	movs	r3, r0
 8008d24:	b29b      	uxth	r3, r3
 8008d26:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008d28:	693b      	ldr	r3, [r7, #16]
 8008d2a:	2b0f      	cmp	r3, #15
 8008d2c:	d91c      	bls.n	8008d68 <UART_SetConfig+0x238>
 8008d2e:	693a      	ldr	r2, [r7, #16]
 8008d30:	2380      	movs	r3, #128	; 0x80
 8008d32:	025b      	lsls	r3, r3, #9
 8008d34:	429a      	cmp	r2, r3
 8008d36:	d217      	bcs.n	8008d68 <UART_SetConfig+0x238>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008d38:	693b      	ldr	r3, [r7, #16]
 8008d3a:	b29a      	uxth	r2, r3
 8008d3c:	200e      	movs	r0, #14
 8008d3e:	183b      	adds	r3, r7, r0
 8008d40:	210f      	movs	r1, #15
 8008d42:	438a      	bics	r2, r1
 8008d44:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008d46:	693b      	ldr	r3, [r7, #16]
 8008d48:	085b      	lsrs	r3, r3, #1
 8008d4a:	b29b      	uxth	r3, r3
 8008d4c:	2207      	movs	r2, #7
 8008d4e:	4013      	ands	r3, r2
 8008d50:	b299      	uxth	r1, r3
 8008d52:	183b      	adds	r3, r7, r0
 8008d54:	183a      	adds	r2, r7, r0
 8008d56:	8812      	ldrh	r2, [r2, #0]
 8008d58:	430a      	orrs	r2, r1
 8008d5a:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	681b      	ldr	r3, [r3, #0]
 8008d60:	183a      	adds	r2, r7, r0
 8008d62:	8812      	ldrh	r2, [r2, #0]
 8008d64:	60da      	str	r2, [r3, #12]
 8008d66:	e04c      	b.n	8008e02 <UART_SetConfig+0x2d2>
      }
      else
      {
        ret = HAL_ERROR;
 8008d68:	231e      	movs	r3, #30
 8008d6a:	18fb      	adds	r3, r7, r3
 8008d6c:	2201      	movs	r2, #1
 8008d6e:	701a      	strb	r2, [r3, #0]
 8008d70:	e047      	b.n	8008e02 <UART_SetConfig+0x2d2>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008d72:	231f      	movs	r3, #31
 8008d74:	18fb      	adds	r3, r7, r3
 8008d76:	781b      	ldrb	r3, [r3, #0]
 8008d78:	2b08      	cmp	r3, #8
 8008d7a:	d015      	beq.n	8008da8 <UART_SetConfig+0x278>
 8008d7c:	dc18      	bgt.n	8008db0 <UART_SetConfig+0x280>
 8008d7e:	2b04      	cmp	r3, #4
 8008d80:	d00d      	beq.n	8008d9e <UART_SetConfig+0x26e>
 8008d82:	dc15      	bgt.n	8008db0 <UART_SetConfig+0x280>
 8008d84:	2b00      	cmp	r3, #0
 8008d86:	d002      	beq.n	8008d8e <UART_SetConfig+0x25e>
 8008d88:	2b02      	cmp	r3, #2
 8008d8a:	d005      	beq.n	8008d98 <UART_SetConfig+0x268>
 8008d8c:	e010      	b.n	8008db0 <UART_SetConfig+0x280>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008d8e:	f7fe f807 	bl	8006da0 <HAL_RCC_GetPCLK1Freq>
 8008d92:	0003      	movs	r3, r0
 8008d94:	61bb      	str	r3, [r7, #24]
        break;
 8008d96:	e012      	b.n	8008dbe <UART_SetConfig+0x28e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008d98:	4b28      	ldr	r3, [pc, #160]	; (8008e3c <UART_SetConfig+0x30c>)
 8008d9a:	61bb      	str	r3, [r7, #24]
        break;
 8008d9c:	e00f      	b.n	8008dbe <UART_SetConfig+0x28e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008d9e:	f7fd ff73 	bl	8006c88 <HAL_RCC_GetSysClockFreq>
 8008da2:	0003      	movs	r3, r0
 8008da4:	61bb      	str	r3, [r7, #24]
        break;
 8008da6:	e00a      	b.n	8008dbe <UART_SetConfig+0x28e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008da8:	2380      	movs	r3, #128	; 0x80
 8008daa:	021b      	lsls	r3, r3, #8
 8008dac:	61bb      	str	r3, [r7, #24]
        break;
 8008dae:	e006      	b.n	8008dbe <UART_SetConfig+0x28e>
      default:
        pclk = 0U;
 8008db0:	2300      	movs	r3, #0
 8008db2:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8008db4:	231e      	movs	r3, #30
 8008db6:	18fb      	adds	r3, r7, r3
 8008db8:	2201      	movs	r2, #1
 8008dba:	701a      	strb	r2, [r3, #0]
        break;
 8008dbc:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8008dbe:	69bb      	ldr	r3, [r7, #24]
 8008dc0:	2b00      	cmp	r3, #0
 8008dc2:	d01e      	beq.n	8008e02 <UART_SetConfig+0x2d2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	685b      	ldr	r3, [r3, #4]
 8008dc8:	085a      	lsrs	r2, r3, #1
 8008dca:	69bb      	ldr	r3, [r7, #24]
 8008dcc:	18d2      	adds	r2, r2, r3
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	685b      	ldr	r3, [r3, #4]
 8008dd2:	0019      	movs	r1, r3
 8008dd4:	0010      	movs	r0, r2
 8008dd6:	f7f7 f9a9 	bl	800012c <__udivsi3>
 8008dda:	0003      	movs	r3, r0
 8008ddc:	b29b      	uxth	r3, r3
 8008dde:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008de0:	693b      	ldr	r3, [r7, #16]
 8008de2:	2b0f      	cmp	r3, #15
 8008de4:	d909      	bls.n	8008dfa <UART_SetConfig+0x2ca>
 8008de6:	693a      	ldr	r2, [r7, #16]
 8008de8:	2380      	movs	r3, #128	; 0x80
 8008dea:	025b      	lsls	r3, r3, #9
 8008dec:	429a      	cmp	r2, r3
 8008dee:	d204      	bcs.n	8008dfa <UART_SetConfig+0x2ca>
      {
        huart->Instance->BRR = usartdiv;
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	681b      	ldr	r3, [r3, #0]
 8008df4:	693a      	ldr	r2, [r7, #16]
 8008df6:	60da      	str	r2, [r3, #12]
 8008df8:	e003      	b.n	8008e02 <UART_SetConfig+0x2d2>
      }
      else
      {
        ret = HAL_ERROR;
 8008dfa:	231e      	movs	r3, #30
 8008dfc:	18fb      	adds	r3, r7, r3
 8008dfe:	2201      	movs	r2, #1
 8008e00:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	2200      	movs	r2, #0
 8008e06:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	2200      	movs	r2, #0
 8008e0c:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8008e0e:	231e      	movs	r3, #30
 8008e10:	18fb      	adds	r3, r7, r3
 8008e12:	781b      	ldrb	r3, [r3, #0]
}
 8008e14:	0018      	movs	r0, r3
 8008e16:	46bd      	mov	sp, r7
 8008e18:	b008      	add	sp, #32
 8008e1a:	bd80      	pop	{r7, pc}
 8008e1c:	efff69f3 	.word	0xefff69f3
 8008e20:	ffffcfff 	.word	0xffffcfff
 8008e24:	fffff4ff 	.word	0xfffff4ff
 8008e28:	40013800 	.word	0x40013800
 8008e2c:	40021000 	.word	0x40021000
 8008e30:	40004400 	.word	0x40004400
 8008e34:	40004800 	.word	0x40004800
 8008e38:	40004c00 	.word	0x40004c00
 8008e3c:	007a1200 	.word	0x007a1200

08008e40 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008e40:	b580      	push	{r7, lr}
 8008e42:	b082      	sub	sp, #8
 8008e44:	af00      	add	r7, sp, #0
 8008e46:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e4c:	2201      	movs	r2, #1
 8008e4e:	4013      	ands	r3, r2
 8008e50:	d00b      	beq.n	8008e6a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	681b      	ldr	r3, [r3, #0]
 8008e56:	685b      	ldr	r3, [r3, #4]
 8008e58:	4a4a      	ldr	r2, [pc, #296]	; (8008f84 <UART_AdvFeatureConfig+0x144>)
 8008e5a:	4013      	ands	r3, r2
 8008e5c:	0019      	movs	r1, r3
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	681b      	ldr	r3, [r3, #0]
 8008e66:	430a      	orrs	r2, r1
 8008e68:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e6e:	2202      	movs	r2, #2
 8008e70:	4013      	ands	r3, r2
 8008e72:	d00b      	beq.n	8008e8c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	681b      	ldr	r3, [r3, #0]
 8008e78:	685b      	ldr	r3, [r3, #4]
 8008e7a:	4a43      	ldr	r2, [pc, #268]	; (8008f88 <UART_AdvFeatureConfig+0x148>)
 8008e7c:	4013      	ands	r3, r2
 8008e7e:	0019      	movs	r1, r3
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	681b      	ldr	r3, [r3, #0]
 8008e88:	430a      	orrs	r2, r1
 8008e8a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e90:	2204      	movs	r2, #4
 8008e92:	4013      	ands	r3, r2
 8008e94:	d00b      	beq.n	8008eae <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	681b      	ldr	r3, [r3, #0]
 8008e9a:	685b      	ldr	r3, [r3, #4]
 8008e9c:	4a3b      	ldr	r2, [pc, #236]	; (8008f8c <UART_AdvFeatureConfig+0x14c>)
 8008e9e:	4013      	ands	r3, r2
 8008ea0:	0019      	movs	r1, r3
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	430a      	orrs	r2, r1
 8008eac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008eb2:	2208      	movs	r2, #8
 8008eb4:	4013      	ands	r3, r2
 8008eb6:	d00b      	beq.n	8008ed0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	681b      	ldr	r3, [r3, #0]
 8008ebc:	685b      	ldr	r3, [r3, #4]
 8008ebe:	4a34      	ldr	r2, [pc, #208]	; (8008f90 <UART_AdvFeatureConfig+0x150>)
 8008ec0:	4013      	ands	r3, r2
 8008ec2:	0019      	movs	r1, r3
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	681b      	ldr	r3, [r3, #0]
 8008ecc:	430a      	orrs	r2, r1
 8008ece:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ed4:	2210      	movs	r2, #16
 8008ed6:	4013      	ands	r3, r2
 8008ed8:	d00b      	beq.n	8008ef2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	681b      	ldr	r3, [r3, #0]
 8008ede:	689b      	ldr	r3, [r3, #8]
 8008ee0:	4a2c      	ldr	r2, [pc, #176]	; (8008f94 <UART_AdvFeatureConfig+0x154>)
 8008ee2:	4013      	ands	r3, r2
 8008ee4:	0019      	movs	r1, r3
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	681b      	ldr	r3, [r3, #0]
 8008eee:	430a      	orrs	r2, r1
 8008ef0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ef6:	2220      	movs	r2, #32
 8008ef8:	4013      	ands	r3, r2
 8008efa:	d00b      	beq.n	8008f14 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	681b      	ldr	r3, [r3, #0]
 8008f00:	689b      	ldr	r3, [r3, #8]
 8008f02:	4a25      	ldr	r2, [pc, #148]	; (8008f98 <UART_AdvFeatureConfig+0x158>)
 8008f04:	4013      	ands	r3, r2
 8008f06:	0019      	movs	r1, r3
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	681b      	ldr	r3, [r3, #0]
 8008f10:	430a      	orrs	r2, r1
 8008f12:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f18:	2240      	movs	r2, #64	; 0x40
 8008f1a:	4013      	ands	r3, r2
 8008f1c:	d01d      	beq.n	8008f5a <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	681b      	ldr	r3, [r3, #0]
 8008f22:	685b      	ldr	r3, [r3, #4]
 8008f24:	4a1d      	ldr	r2, [pc, #116]	; (8008f9c <UART_AdvFeatureConfig+0x15c>)
 8008f26:	4013      	ands	r3, r2
 8008f28:	0019      	movs	r1, r3
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	681b      	ldr	r3, [r3, #0]
 8008f32:	430a      	orrs	r2, r1
 8008f34:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008f3a:	2380      	movs	r3, #128	; 0x80
 8008f3c:	035b      	lsls	r3, r3, #13
 8008f3e:	429a      	cmp	r2, r3
 8008f40:	d10b      	bne.n	8008f5a <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	681b      	ldr	r3, [r3, #0]
 8008f46:	685b      	ldr	r3, [r3, #4]
 8008f48:	4a15      	ldr	r2, [pc, #84]	; (8008fa0 <UART_AdvFeatureConfig+0x160>)
 8008f4a:	4013      	ands	r3, r2
 8008f4c:	0019      	movs	r1, r3
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	681b      	ldr	r3, [r3, #0]
 8008f56:	430a      	orrs	r2, r1
 8008f58:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f5e:	2280      	movs	r2, #128	; 0x80
 8008f60:	4013      	ands	r3, r2
 8008f62:	d00b      	beq.n	8008f7c <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	681b      	ldr	r3, [r3, #0]
 8008f68:	685b      	ldr	r3, [r3, #4]
 8008f6a:	4a0e      	ldr	r2, [pc, #56]	; (8008fa4 <UART_AdvFeatureConfig+0x164>)
 8008f6c:	4013      	ands	r3, r2
 8008f6e:	0019      	movs	r1, r3
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	681b      	ldr	r3, [r3, #0]
 8008f78:	430a      	orrs	r2, r1
 8008f7a:	605a      	str	r2, [r3, #4]
  }
}
 8008f7c:	46c0      	nop			; (mov r8, r8)
 8008f7e:	46bd      	mov	sp, r7
 8008f80:	b002      	add	sp, #8
 8008f82:	bd80      	pop	{r7, pc}
 8008f84:	fffdffff 	.word	0xfffdffff
 8008f88:	fffeffff 	.word	0xfffeffff
 8008f8c:	fffbffff 	.word	0xfffbffff
 8008f90:	ffff7fff 	.word	0xffff7fff
 8008f94:	ffffefff 	.word	0xffffefff
 8008f98:	ffffdfff 	.word	0xffffdfff
 8008f9c:	ffefffff 	.word	0xffefffff
 8008fa0:	ff9fffff 	.word	0xff9fffff
 8008fa4:	fff7ffff 	.word	0xfff7ffff

08008fa8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008fa8:	b580      	push	{r7, lr}
 8008faa:	b086      	sub	sp, #24
 8008fac:	af02      	add	r7, sp, #8
 8008fae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	2280      	movs	r2, #128	; 0x80
 8008fb4:	2100      	movs	r1, #0
 8008fb6:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008fb8:	f7fa fa58 	bl	800346c <HAL_GetTick>
 8008fbc:	0003      	movs	r3, r0
 8008fbe:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	681b      	ldr	r3, [r3, #0]
 8008fc4:	681b      	ldr	r3, [r3, #0]
 8008fc6:	2208      	movs	r2, #8
 8008fc8:	4013      	ands	r3, r2
 8008fca:	2b08      	cmp	r3, #8
 8008fcc:	d10c      	bne.n	8008fe8 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008fce:	68fb      	ldr	r3, [r7, #12]
 8008fd0:	2280      	movs	r2, #128	; 0x80
 8008fd2:	0391      	lsls	r1, r2, #14
 8008fd4:	6878      	ldr	r0, [r7, #4]
 8008fd6:	4a17      	ldr	r2, [pc, #92]	; (8009034 <UART_CheckIdleState+0x8c>)
 8008fd8:	9200      	str	r2, [sp, #0]
 8008fda:	2200      	movs	r2, #0
 8008fdc:	f000 f82c 	bl	8009038 <UART_WaitOnFlagUntilTimeout>
 8008fe0:	1e03      	subs	r3, r0, #0
 8008fe2:	d001      	beq.n	8008fe8 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008fe4:	2303      	movs	r3, #3
 8008fe6:	e021      	b.n	800902c <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	681b      	ldr	r3, [r3, #0]
 8008fec:	681b      	ldr	r3, [r3, #0]
 8008fee:	2204      	movs	r2, #4
 8008ff0:	4013      	ands	r3, r2
 8008ff2:	2b04      	cmp	r3, #4
 8008ff4:	d10c      	bne.n	8009010 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008ff6:	68fb      	ldr	r3, [r7, #12]
 8008ff8:	2280      	movs	r2, #128	; 0x80
 8008ffa:	03d1      	lsls	r1, r2, #15
 8008ffc:	6878      	ldr	r0, [r7, #4]
 8008ffe:	4a0d      	ldr	r2, [pc, #52]	; (8009034 <UART_CheckIdleState+0x8c>)
 8009000:	9200      	str	r2, [sp, #0]
 8009002:	2200      	movs	r2, #0
 8009004:	f000 f818 	bl	8009038 <UART_WaitOnFlagUntilTimeout>
 8009008:	1e03      	subs	r3, r0, #0
 800900a:	d001      	beq.n	8009010 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800900c:	2303      	movs	r3, #3
 800900e:	e00d      	b.n	800902c <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	2220      	movs	r2, #32
 8009014:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	2220      	movs	r2, #32
 800901a:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	2200      	movs	r2, #0
 8009020:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	2274      	movs	r2, #116	; 0x74
 8009026:	2100      	movs	r1, #0
 8009028:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800902a:	2300      	movs	r3, #0
}
 800902c:	0018      	movs	r0, r3
 800902e:	46bd      	mov	sp, r7
 8009030:	b004      	add	sp, #16
 8009032:	bd80      	pop	{r7, pc}
 8009034:	01ffffff 	.word	0x01ffffff

08009038 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009038:	b580      	push	{r7, lr}
 800903a:	b094      	sub	sp, #80	; 0x50
 800903c:	af00      	add	r7, sp, #0
 800903e:	60f8      	str	r0, [r7, #12]
 8009040:	60b9      	str	r1, [r7, #8]
 8009042:	603b      	str	r3, [r7, #0]
 8009044:	1dfb      	adds	r3, r7, #7
 8009046:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009048:	e0a3      	b.n	8009192 <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800904a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800904c:	3301      	adds	r3, #1
 800904e:	d100      	bne.n	8009052 <UART_WaitOnFlagUntilTimeout+0x1a>
 8009050:	e09f      	b.n	8009192 <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009052:	f7fa fa0b 	bl	800346c <HAL_GetTick>
 8009056:	0002      	movs	r2, r0
 8009058:	683b      	ldr	r3, [r7, #0]
 800905a:	1ad3      	subs	r3, r2, r3
 800905c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800905e:	429a      	cmp	r2, r3
 8009060:	d302      	bcc.n	8009068 <UART_WaitOnFlagUntilTimeout+0x30>
 8009062:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009064:	2b00      	cmp	r3, #0
 8009066:	d13d      	bne.n	80090e4 <UART_WaitOnFlagUntilTimeout+0xac>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009068:	f3ef 8310 	mrs	r3, PRIMASK
 800906c:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 800906e:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8009070:	647b      	str	r3, [r7, #68]	; 0x44
 8009072:	2301      	movs	r3, #1
 8009074:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009076:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009078:	f383 8810 	msr	PRIMASK, r3
}
 800907c:	46c0      	nop			; (mov r8, r8)
 800907e:	68fb      	ldr	r3, [r7, #12]
 8009080:	681b      	ldr	r3, [r3, #0]
 8009082:	681a      	ldr	r2, [r3, #0]
 8009084:	68fb      	ldr	r3, [r7, #12]
 8009086:	681b      	ldr	r3, [r3, #0]
 8009088:	494c      	ldr	r1, [pc, #304]	; (80091bc <UART_WaitOnFlagUntilTimeout+0x184>)
 800908a:	400a      	ands	r2, r1
 800908c:	601a      	str	r2, [r3, #0]
 800908e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009090:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009092:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009094:	f383 8810 	msr	PRIMASK, r3
}
 8009098:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800909a:	f3ef 8310 	mrs	r3, PRIMASK
 800909e:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 80090a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80090a2:	643b      	str	r3, [r7, #64]	; 0x40
 80090a4:	2301      	movs	r3, #1
 80090a6:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80090a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090aa:	f383 8810 	msr	PRIMASK, r3
}
 80090ae:	46c0      	nop			; (mov r8, r8)
 80090b0:	68fb      	ldr	r3, [r7, #12]
 80090b2:	681b      	ldr	r3, [r3, #0]
 80090b4:	689a      	ldr	r2, [r3, #8]
 80090b6:	68fb      	ldr	r3, [r7, #12]
 80090b8:	681b      	ldr	r3, [r3, #0]
 80090ba:	2101      	movs	r1, #1
 80090bc:	438a      	bics	r2, r1
 80090be:	609a      	str	r2, [r3, #8]
 80090c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80090c2:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80090c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80090c6:	f383 8810 	msr	PRIMASK, r3
}
 80090ca:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 80090cc:	68fb      	ldr	r3, [r7, #12]
 80090ce:	2220      	movs	r2, #32
 80090d0:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80090d2:	68fb      	ldr	r3, [r7, #12]
 80090d4:	2220      	movs	r2, #32
 80090d6:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80090d8:	68fb      	ldr	r3, [r7, #12]
 80090da:	2274      	movs	r2, #116	; 0x74
 80090dc:	2100      	movs	r1, #0
 80090de:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80090e0:	2303      	movs	r3, #3
 80090e2:	e067      	b.n	80091b4 <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80090e4:	68fb      	ldr	r3, [r7, #12]
 80090e6:	681b      	ldr	r3, [r3, #0]
 80090e8:	681b      	ldr	r3, [r3, #0]
 80090ea:	2204      	movs	r2, #4
 80090ec:	4013      	ands	r3, r2
 80090ee:	d050      	beq.n	8009192 <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80090f0:	68fb      	ldr	r3, [r7, #12]
 80090f2:	681b      	ldr	r3, [r3, #0]
 80090f4:	69da      	ldr	r2, [r3, #28]
 80090f6:	2380      	movs	r3, #128	; 0x80
 80090f8:	011b      	lsls	r3, r3, #4
 80090fa:	401a      	ands	r2, r3
 80090fc:	2380      	movs	r3, #128	; 0x80
 80090fe:	011b      	lsls	r3, r3, #4
 8009100:	429a      	cmp	r2, r3
 8009102:	d146      	bne.n	8009192 <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009104:	68fb      	ldr	r3, [r7, #12]
 8009106:	681b      	ldr	r3, [r3, #0]
 8009108:	2280      	movs	r2, #128	; 0x80
 800910a:	0112      	lsls	r2, r2, #4
 800910c:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800910e:	f3ef 8310 	mrs	r3, PRIMASK
 8009112:	613b      	str	r3, [r7, #16]
  return(result);
 8009114:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8009116:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009118:	2301      	movs	r3, #1
 800911a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800911c:	697b      	ldr	r3, [r7, #20]
 800911e:	f383 8810 	msr	PRIMASK, r3
}
 8009122:	46c0      	nop			; (mov r8, r8)
 8009124:	68fb      	ldr	r3, [r7, #12]
 8009126:	681b      	ldr	r3, [r3, #0]
 8009128:	681a      	ldr	r2, [r3, #0]
 800912a:	68fb      	ldr	r3, [r7, #12]
 800912c:	681b      	ldr	r3, [r3, #0]
 800912e:	4923      	ldr	r1, [pc, #140]	; (80091bc <UART_WaitOnFlagUntilTimeout+0x184>)
 8009130:	400a      	ands	r2, r1
 8009132:	601a      	str	r2, [r3, #0]
 8009134:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009136:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009138:	69bb      	ldr	r3, [r7, #24]
 800913a:	f383 8810 	msr	PRIMASK, r3
}
 800913e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009140:	f3ef 8310 	mrs	r3, PRIMASK
 8009144:	61fb      	str	r3, [r7, #28]
  return(result);
 8009146:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009148:	64bb      	str	r3, [r7, #72]	; 0x48
 800914a:	2301      	movs	r3, #1
 800914c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800914e:	6a3b      	ldr	r3, [r7, #32]
 8009150:	f383 8810 	msr	PRIMASK, r3
}
 8009154:	46c0      	nop			; (mov r8, r8)
 8009156:	68fb      	ldr	r3, [r7, #12]
 8009158:	681b      	ldr	r3, [r3, #0]
 800915a:	689a      	ldr	r2, [r3, #8]
 800915c:	68fb      	ldr	r3, [r7, #12]
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	2101      	movs	r1, #1
 8009162:	438a      	bics	r2, r1
 8009164:	609a      	str	r2, [r3, #8]
 8009166:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009168:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800916a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800916c:	f383 8810 	msr	PRIMASK, r3
}
 8009170:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8009172:	68fb      	ldr	r3, [r7, #12]
 8009174:	2220      	movs	r2, #32
 8009176:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8009178:	68fb      	ldr	r3, [r7, #12]
 800917a:	2220      	movs	r2, #32
 800917c:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800917e:	68fb      	ldr	r3, [r7, #12]
 8009180:	2280      	movs	r2, #128	; 0x80
 8009182:	2120      	movs	r1, #32
 8009184:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009186:	68fb      	ldr	r3, [r7, #12]
 8009188:	2274      	movs	r2, #116	; 0x74
 800918a:	2100      	movs	r1, #0
 800918c:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800918e:	2303      	movs	r3, #3
 8009190:	e010      	b.n	80091b4 <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009192:	68fb      	ldr	r3, [r7, #12]
 8009194:	681b      	ldr	r3, [r3, #0]
 8009196:	69db      	ldr	r3, [r3, #28]
 8009198:	68ba      	ldr	r2, [r7, #8]
 800919a:	4013      	ands	r3, r2
 800919c:	68ba      	ldr	r2, [r7, #8]
 800919e:	1ad3      	subs	r3, r2, r3
 80091a0:	425a      	negs	r2, r3
 80091a2:	4153      	adcs	r3, r2
 80091a4:	b2db      	uxtb	r3, r3
 80091a6:	001a      	movs	r2, r3
 80091a8:	1dfb      	adds	r3, r7, #7
 80091aa:	781b      	ldrb	r3, [r3, #0]
 80091ac:	429a      	cmp	r2, r3
 80091ae:	d100      	bne.n	80091b2 <UART_WaitOnFlagUntilTimeout+0x17a>
 80091b0:	e74b      	b.n	800904a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80091b2:	2300      	movs	r3, #0
}
 80091b4:	0018      	movs	r0, r3
 80091b6:	46bd      	mov	sp, r7
 80091b8:	b014      	add	sp, #80	; 0x50
 80091ba:	bd80      	pop	{r7, pc}
 80091bc:	fffffe5f 	.word	0xfffffe5f

080091c0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80091c0:	b580      	push	{r7, lr}
 80091c2:	b08e      	sub	sp, #56	; 0x38
 80091c4:	af00      	add	r7, sp, #0
 80091c6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80091c8:	f3ef 8310 	mrs	r3, PRIMASK
 80091cc:	617b      	str	r3, [r7, #20]
  return(result);
 80091ce:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80091d0:	637b      	str	r3, [r7, #52]	; 0x34
 80091d2:	2301      	movs	r3, #1
 80091d4:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80091d6:	69bb      	ldr	r3, [r7, #24]
 80091d8:	f383 8810 	msr	PRIMASK, r3
}
 80091dc:	46c0      	nop			; (mov r8, r8)
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	681b      	ldr	r3, [r3, #0]
 80091e2:	681a      	ldr	r2, [r3, #0]
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	4925      	ldr	r1, [pc, #148]	; (8009280 <UART_EndRxTransfer+0xc0>)
 80091ea:	400a      	ands	r2, r1
 80091ec:	601a      	str	r2, [r3, #0]
 80091ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80091f0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80091f2:	69fb      	ldr	r3, [r7, #28]
 80091f4:	f383 8810 	msr	PRIMASK, r3
}
 80091f8:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80091fa:	f3ef 8310 	mrs	r3, PRIMASK
 80091fe:	623b      	str	r3, [r7, #32]
  return(result);
 8009200:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009202:	633b      	str	r3, [r7, #48]	; 0x30
 8009204:	2301      	movs	r3, #1
 8009206:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009208:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800920a:	f383 8810 	msr	PRIMASK, r3
}
 800920e:	46c0      	nop			; (mov r8, r8)
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	681b      	ldr	r3, [r3, #0]
 8009214:	689a      	ldr	r2, [r3, #8]
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	681b      	ldr	r3, [r3, #0]
 800921a:	2101      	movs	r1, #1
 800921c:	438a      	bics	r2, r1
 800921e:	609a      	str	r2, [r3, #8]
 8009220:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009222:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009224:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009226:	f383 8810 	msr	PRIMASK, r3
}
 800922a:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009230:	2b01      	cmp	r3, #1
 8009232:	d118      	bne.n	8009266 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009234:	f3ef 8310 	mrs	r3, PRIMASK
 8009238:	60bb      	str	r3, [r7, #8]
  return(result);
 800923a:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800923c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800923e:	2301      	movs	r3, #1
 8009240:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009242:	68fb      	ldr	r3, [r7, #12]
 8009244:	f383 8810 	msr	PRIMASK, r3
}
 8009248:	46c0      	nop			; (mov r8, r8)
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	681b      	ldr	r3, [r3, #0]
 800924e:	681a      	ldr	r2, [r3, #0]
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	681b      	ldr	r3, [r3, #0]
 8009254:	2110      	movs	r1, #16
 8009256:	438a      	bics	r2, r1
 8009258:	601a      	str	r2, [r3, #0]
 800925a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800925c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800925e:	693b      	ldr	r3, [r7, #16]
 8009260:	f383 8810 	msr	PRIMASK, r3
}
 8009264:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	2220      	movs	r2, #32
 800926a:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	2200      	movs	r2, #0
 8009270:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	2200      	movs	r2, #0
 8009276:	665a      	str	r2, [r3, #100]	; 0x64
}
 8009278:	46c0      	nop			; (mov r8, r8)
 800927a:	46bd      	mov	sp, r7
 800927c:	b00e      	add	sp, #56	; 0x38
 800927e:	bd80      	pop	{r7, pc}
 8009280:	fffffedf 	.word	0xfffffedf

08009284 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009284:	b580      	push	{r7, lr}
 8009286:	b084      	sub	sp, #16
 8009288:	af00      	add	r7, sp, #0
 800928a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009290:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8009292:	68fb      	ldr	r3, [r7, #12]
 8009294:	225a      	movs	r2, #90	; 0x5a
 8009296:	2100      	movs	r1, #0
 8009298:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 800929a:	68fb      	ldr	r3, [r7, #12]
 800929c:	2252      	movs	r2, #82	; 0x52
 800929e:	2100      	movs	r1, #0
 80092a0:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80092a2:	68fb      	ldr	r3, [r7, #12]
 80092a4:	0018      	movs	r0, r3
 80092a6:	f7ff fc2f 	bl	8008b08 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80092aa:	46c0      	nop			; (mov r8, r8)
 80092ac:	46bd      	mov	sp, r7
 80092ae:	b004      	add	sp, #16
 80092b0:	bd80      	pop	{r7, pc}

080092b2 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80092b2:	b580      	push	{r7, lr}
 80092b4:	b086      	sub	sp, #24
 80092b6:	af00      	add	r7, sp, #0
 80092b8:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80092ba:	f3ef 8310 	mrs	r3, PRIMASK
 80092be:	60bb      	str	r3, [r7, #8]
  return(result);
 80092c0:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80092c2:	617b      	str	r3, [r7, #20]
 80092c4:	2301      	movs	r3, #1
 80092c6:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80092c8:	68fb      	ldr	r3, [r7, #12]
 80092ca:	f383 8810 	msr	PRIMASK, r3
}
 80092ce:	46c0      	nop			; (mov r8, r8)
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	681b      	ldr	r3, [r3, #0]
 80092d4:	681a      	ldr	r2, [r3, #0]
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	681b      	ldr	r3, [r3, #0]
 80092da:	2140      	movs	r1, #64	; 0x40
 80092dc:	438a      	bics	r2, r1
 80092de:	601a      	str	r2, [r3, #0]
 80092e0:	697b      	ldr	r3, [r7, #20]
 80092e2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80092e4:	693b      	ldr	r3, [r7, #16]
 80092e6:	f383 8810 	msr	PRIMASK, r3
}
 80092ea:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	2220      	movs	r2, #32
 80092f0:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	2200      	movs	r2, #0
 80092f6:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	0018      	movs	r0, r3
 80092fc:	f7ff fbfc 	bl	8008af8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009300:	46c0      	nop			; (mov r8, r8)
 8009302:	46bd      	mov	sp, r7
 8009304:	b006      	add	sp, #24
 8009306:	bd80      	pop	{r7, pc}

08009308 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8009308:	b580      	push	{r7, lr}
 800930a:	b082      	sub	sp, #8
 800930c:	af00      	add	r7, sp, #0
 800930e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8009310:	46c0      	nop			; (mov r8, r8)
 8009312:	46bd      	mov	sp, r7
 8009314:	b002      	add	sp, #8
 8009316:	bd80      	pop	{r7, pc}

08009318 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8009318:	b580      	push	{r7, lr}
 800931a:	b084      	sub	sp, #16
 800931c:	af00      	add	r7, sp, #0
 800931e:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	2244      	movs	r2, #68	; 0x44
 8009324:	2100      	movs	r1, #0
 8009326:	5299      	strh	r1, [r3, r2]

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8009328:	4b05      	ldr	r3, [pc, #20]	; (8009340 <USB_EnableGlobalInt+0x28>)
 800932a:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 800932c:	68fb      	ldr	r3, [r7, #12]
 800932e:	b299      	uxth	r1, r3
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	2240      	movs	r2, #64	; 0x40
 8009334:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8009336:	2300      	movs	r3, #0
}
 8009338:	0018      	movs	r0, r3
 800933a:	46bd      	mov	sp, r7
 800933c:	b004      	add	sp, #16
 800933e:	bd80      	pop	{r7, pc}
 8009340:	0000bf80 	.word	0x0000bf80

08009344 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8009344:	b580      	push	{r7, lr}
 8009346:	b084      	sub	sp, #16
 8009348:	af00      	add	r7, sp, #0
 800934a:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800934c:	4b09      	ldr	r3, [pc, #36]	; (8009374 <USB_DisableGlobalInt+0x30>)
 800934e:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	2240      	movs	r2, #64	; 0x40
 8009354:	5a9b      	ldrh	r3, [r3, r2]
 8009356:	b29b      	uxth	r3, r3
 8009358:	68fa      	ldr	r2, [r7, #12]
 800935a:	b292      	uxth	r2, r2
 800935c:	43d2      	mvns	r2, r2
 800935e:	b292      	uxth	r2, r2
 8009360:	4013      	ands	r3, r2
 8009362:	b299      	uxth	r1, r3
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	2240      	movs	r2, #64	; 0x40
 8009368:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 800936a:	2300      	movs	r3, #0
}
 800936c:	0018      	movs	r0, r3
 800936e:	46bd      	mov	sp, r7
 8009370:	b004      	add	sp, #16
 8009372:	bd80      	pop	{r7, pc}
 8009374:	0000bf80 	.word	0x0000bf80

08009378 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8009378:	b084      	sub	sp, #16
 800937a:	b590      	push	{r4, r7, lr}
 800937c:	b083      	sub	sp, #12
 800937e:	af00      	add	r7, sp, #0
 8009380:	6078      	str	r0, [r7, #4]
 8009382:	2004      	movs	r0, #4
 8009384:	2410      	movs	r4, #16
 8009386:	1900      	adds	r0, r0, r4
 8009388:	2408      	movs	r4, #8
 800938a:	46a4      	mov	ip, r4
 800938c:	44bc      	add	ip, r7
 800938e:	4460      	add	r0, ip
 8009390:	6001      	str	r1, [r0, #0]
 8009392:	6042      	str	r2, [r0, #4]
 8009394:	6083      	str	r3, [r0, #8]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	2240      	movs	r2, #64	; 0x40
 800939a:	2101      	movs	r1, #1
 800939c:	5299      	strh	r1, [r3, r2]

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	2240      	movs	r2, #64	; 0x40
 80093a2:	2100      	movs	r1, #0
 80093a4:	5299      	strh	r1, [r3, r2]

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	2244      	movs	r2, #68	; 0x44
 80093aa:	2100      	movs	r1, #0
 80093ac:	5299      	strh	r1, [r3, r2]

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	2250      	movs	r2, #80	; 0x50
 80093b2:	2100      	movs	r1, #0
 80093b4:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 80093b6:	2300      	movs	r3, #0
}
 80093b8:	0018      	movs	r0, r3
 80093ba:	46bd      	mov	sp, r7
 80093bc:	b003      	add	sp, #12
 80093be:	bc90      	pop	{r4, r7}
 80093c0:	bc08      	pop	{r3}
 80093c2:	b004      	add	sp, #16
 80093c4:	4718      	bx	r3
	...

080093c8 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80093c8:	b580      	push	{r7, lr}
 80093ca:	b09c      	sub	sp, #112	; 0x70
 80093cc:	af00      	add	r7, sp, #0
 80093ce:	6078      	str	r0, [r7, #4]
 80093d0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 80093d2:	236f      	movs	r3, #111	; 0x6f
 80093d4:	18fb      	adds	r3, r7, r3
 80093d6:	2200      	movs	r2, #0
 80093d8:	701a      	strb	r2, [r3, #0]
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80093da:	687a      	ldr	r2, [r7, #4]
 80093dc:	683b      	ldr	r3, [r7, #0]
 80093de:	781b      	ldrb	r3, [r3, #0]
 80093e0:	009b      	lsls	r3, r3, #2
 80093e2:	18d3      	adds	r3, r2, r3
 80093e4:	881b      	ldrh	r3, [r3, #0]
 80093e6:	b29a      	uxth	r2, r3
 80093e8:	236c      	movs	r3, #108	; 0x6c
 80093ea:	18fb      	adds	r3, r7, r3
 80093ec:	49cf      	ldr	r1, [pc, #828]	; (800972c <USB_ActivateEndpoint+0x364>)
 80093ee:	400a      	ands	r2, r1
 80093f0:	801a      	strh	r2, [r3, #0]

  /* initialize Endpoint */
  switch (ep->type)
 80093f2:	683b      	ldr	r3, [r7, #0]
 80093f4:	78db      	ldrb	r3, [r3, #3]
 80093f6:	2b03      	cmp	r3, #3
 80093f8:	d017      	beq.n	800942a <USB_ActivateEndpoint+0x62>
 80093fa:	dc28      	bgt.n	800944e <USB_ActivateEndpoint+0x86>
 80093fc:	2b02      	cmp	r3, #2
 80093fe:	d00e      	beq.n	800941e <USB_ActivateEndpoint+0x56>
 8009400:	dc25      	bgt.n	800944e <USB_ActivateEndpoint+0x86>
 8009402:	2b00      	cmp	r3, #0
 8009404:	d002      	beq.n	800940c <USB_ActivateEndpoint+0x44>
 8009406:	2b01      	cmp	r3, #1
 8009408:	d018      	beq.n	800943c <USB_ActivateEndpoint+0x74>
 800940a:	e020      	b.n	800944e <USB_ActivateEndpoint+0x86>
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 800940c:	226c      	movs	r2, #108	; 0x6c
 800940e:	18bb      	adds	r3, r7, r2
 8009410:	18ba      	adds	r2, r7, r2
 8009412:	8812      	ldrh	r2, [r2, #0]
 8009414:	2180      	movs	r1, #128	; 0x80
 8009416:	0089      	lsls	r1, r1, #2
 8009418:	430a      	orrs	r2, r1
 800941a:	801a      	strh	r2, [r3, #0]
      break;
 800941c:	e01c      	b.n	8009458 <USB_ActivateEndpoint+0x90>

    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
 800941e:	226c      	movs	r2, #108	; 0x6c
 8009420:	18bb      	adds	r3, r7, r2
 8009422:	18ba      	adds	r2, r7, r2
 8009424:	8812      	ldrh	r2, [r2, #0]
 8009426:	801a      	strh	r2, [r3, #0]
      break;
 8009428:	e016      	b.n	8009458 <USB_ActivateEndpoint+0x90>

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800942a:	226c      	movs	r2, #108	; 0x6c
 800942c:	18bb      	adds	r3, r7, r2
 800942e:	18ba      	adds	r2, r7, r2
 8009430:	8812      	ldrh	r2, [r2, #0]
 8009432:	21c0      	movs	r1, #192	; 0xc0
 8009434:	00c9      	lsls	r1, r1, #3
 8009436:	430a      	orrs	r2, r1
 8009438:	801a      	strh	r2, [r3, #0]
      break;
 800943a:	e00d      	b.n	8009458 <USB_ActivateEndpoint+0x90>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 800943c:	226c      	movs	r2, #108	; 0x6c
 800943e:	18bb      	adds	r3, r7, r2
 8009440:	18ba      	adds	r2, r7, r2
 8009442:	8812      	ldrh	r2, [r2, #0]
 8009444:	2180      	movs	r1, #128	; 0x80
 8009446:	00c9      	lsls	r1, r1, #3
 8009448:	430a      	orrs	r2, r1
 800944a:	801a      	strh	r2, [r3, #0]
      break;
 800944c:	e004      	b.n	8009458 <USB_ActivateEndpoint+0x90>

    default:
      ret = HAL_ERROR;
 800944e:	236f      	movs	r3, #111	; 0x6f
 8009450:	18fb      	adds	r3, r7, r3
 8009452:	2201      	movs	r2, #1
 8009454:	701a      	strb	r2, [r3, #0]
      break;
 8009456:	46c0      	nop			; (mov r8, r8)
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8009458:	687a      	ldr	r2, [r7, #4]
 800945a:	683b      	ldr	r3, [r7, #0]
 800945c:	781b      	ldrb	r3, [r3, #0]
 800945e:	009b      	lsls	r3, r3, #2
 8009460:	18d3      	adds	r3, r2, r3
 8009462:	226c      	movs	r2, #108	; 0x6c
 8009464:	18ba      	adds	r2, r7, r2
 8009466:	8812      	ldrh	r2, [r2, #0]
 8009468:	49b1      	ldr	r1, [pc, #708]	; (8009730 <USB_ActivateEndpoint+0x368>)
 800946a:	430a      	orrs	r2, r1
 800946c:	b292      	uxth	r2, r2
 800946e:	801a      	strh	r2, [r3, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8009470:	687a      	ldr	r2, [r7, #4]
 8009472:	683b      	ldr	r3, [r7, #0]
 8009474:	781b      	ldrb	r3, [r3, #0]
 8009476:	009b      	lsls	r3, r3, #2
 8009478:	18d3      	adds	r3, r2, r3
 800947a:	881b      	ldrh	r3, [r3, #0]
 800947c:	b29b      	uxth	r3, r3
 800947e:	b21b      	sxth	r3, r3
 8009480:	4aac      	ldr	r2, [pc, #688]	; (8009734 <USB_ActivateEndpoint+0x36c>)
 8009482:	4013      	ands	r3, r2
 8009484:	b21a      	sxth	r2, r3
 8009486:	683b      	ldr	r3, [r7, #0]
 8009488:	781b      	ldrb	r3, [r3, #0]
 800948a:	b21b      	sxth	r3, r3
 800948c:	4313      	orrs	r3, r2
 800948e:	b21a      	sxth	r2, r3
 8009490:	2166      	movs	r1, #102	; 0x66
 8009492:	187b      	adds	r3, r7, r1
 8009494:	801a      	strh	r2, [r3, #0]
 8009496:	687a      	ldr	r2, [r7, #4]
 8009498:	683b      	ldr	r3, [r7, #0]
 800949a:	781b      	ldrb	r3, [r3, #0]
 800949c:	009b      	lsls	r3, r3, #2
 800949e:	18d3      	adds	r3, r2, r3
 80094a0:	187a      	adds	r2, r7, r1
 80094a2:	8812      	ldrh	r2, [r2, #0]
 80094a4:	49a2      	ldr	r1, [pc, #648]	; (8009730 <USB_ActivateEndpoint+0x368>)
 80094a6:	430a      	orrs	r2, r1
 80094a8:	b292      	uxth	r2, r2
 80094aa:	801a      	strh	r2, [r3, #0]

  if (ep->doublebuffer == 0U)
 80094ac:	683b      	ldr	r3, [r7, #0]
 80094ae:	7b1b      	ldrb	r3, [r3, #12]
 80094b0:	2b00      	cmp	r3, #0
 80094b2:	d000      	beq.n	80094b6 <USB_ActivateEndpoint+0xee>
 80094b4:	e150      	b.n	8009758 <USB_ActivateEndpoint+0x390>
  {
    if (ep->is_in != 0U)
 80094b6:	683b      	ldr	r3, [r7, #0]
 80094b8:	785b      	ldrb	r3, [r3, #1]
 80094ba:	2b00      	cmp	r3, #0
 80094bc:	d100      	bne.n	80094c0 <USB_ActivateEndpoint+0xf8>
 80094be:	e07a      	b.n	80095b6 <USB_ActivateEndpoint+0x1ee>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	61bb      	str	r3, [r7, #24]
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	2250      	movs	r2, #80	; 0x50
 80094c8:	5a9b      	ldrh	r3, [r3, r2]
 80094ca:	b29b      	uxth	r3, r3
 80094cc:	001a      	movs	r2, r3
 80094ce:	69bb      	ldr	r3, [r7, #24]
 80094d0:	189b      	adds	r3, r3, r2
 80094d2:	61bb      	str	r3, [r7, #24]
 80094d4:	683b      	ldr	r3, [r7, #0]
 80094d6:	781b      	ldrb	r3, [r3, #0]
 80094d8:	00da      	lsls	r2, r3, #3
 80094da:	69bb      	ldr	r3, [r7, #24]
 80094dc:	18d3      	adds	r3, r2, r3
 80094de:	2280      	movs	r2, #128	; 0x80
 80094e0:	00d2      	lsls	r2, r2, #3
 80094e2:	4694      	mov	ip, r2
 80094e4:	4463      	add	r3, ip
 80094e6:	617b      	str	r3, [r7, #20]
 80094e8:	683b      	ldr	r3, [r7, #0]
 80094ea:	88db      	ldrh	r3, [r3, #6]
 80094ec:	085b      	lsrs	r3, r3, #1
 80094ee:	b29b      	uxth	r3, r3
 80094f0:	18db      	adds	r3, r3, r3
 80094f2:	b29a      	uxth	r2, r3
 80094f4:	697b      	ldr	r3, [r7, #20]
 80094f6:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80094f8:	687a      	ldr	r2, [r7, #4]
 80094fa:	683b      	ldr	r3, [r7, #0]
 80094fc:	781b      	ldrb	r3, [r3, #0]
 80094fe:	009b      	lsls	r3, r3, #2
 8009500:	18d2      	adds	r2, r2, r3
 8009502:	2112      	movs	r1, #18
 8009504:	187b      	adds	r3, r7, r1
 8009506:	8812      	ldrh	r2, [r2, #0]
 8009508:	801a      	strh	r2, [r3, #0]
 800950a:	187b      	adds	r3, r7, r1
 800950c:	881b      	ldrh	r3, [r3, #0]
 800950e:	2240      	movs	r2, #64	; 0x40
 8009510:	4013      	ands	r3, r2
 8009512:	d016      	beq.n	8009542 <USB_ActivateEndpoint+0x17a>
 8009514:	687a      	ldr	r2, [r7, #4]
 8009516:	683b      	ldr	r3, [r7, #0]
 8009518:	781b      	ldrb	r3, [r3, #0]
 800951a:	009b      	lsls	r3, r3, #2
 800951c:	18d3      	adds	r3, r2, r3
 800951e:	881b      	ldrh	r3, [r3, #0]
 8009520:	b29a      	uxth	r2, r3
 8009522:	2010      	movs	r0, #16
 8009524:	183b      	adds	r3, r7, r0
 8009526:	4983      	ldr	r1, [pc, #524]	; (8009734 <USB_ActivateEndpoint+0x36c>)
 8009528:	400a      	ands	r2, r1
 800952a:	801a      	strh	r2, [r3, #0]
 800952c:	687a      	ldr	r2, [r7, #4]
 800952e:	683b      	ldr	r3, [r7, #0]
 8009530:	781b      	ldrb	r3, [r3, #0]
 8009532:	009b      	lsls	r3, r3, #2
 8009534:	18d3      	adds	r3, r2, r3
 8009536:	183a      	adds	r2, r7, r0
 8009538:	8812      	ldrh	r2, [r2, #0]
 800953a:	497f      	ldr	r1, [pc, #508]	; (8009738 <USB_ActivateEndpoint+0x370>)
 800953c:	430a      	orrs	r2, r1
 800953e:	b292      	uxth	r2, r2
 8009540:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 8009542:	683b      	ldr	r3, [r7, #0]
 8009544:	78db      	ldrb	r3, [r3, #3]
 8009546:	2b01      	cmp	r3, #1
 8009548:	d01d      	beq.n	8009586 <USB_ActivateEndpoint+0x1be>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800954a:	687a      	ldr	r2, [r7, #4]
 800954c:	683b      	ldr	r3, [r7, #0]
 800954e:	781b      	ldrb	r3, [r3, #0]
 8009550:	009b      	lsls	r3, r3, #2
 8009552:	18d3      	adds	r3, r2, r3
 8009554:	881b      	ldrh	r3, [r3, #0]
 8009556:	b29a      	uxth	r2, r3
 8009558:	200c      	movs	r0, #12
 800955a:	183b      	adds	r3, r7, r0
 800955c:	4977      	ldr	r1, [pc, #476]	; (800973c <USB_ActivateEndpoint+0x374>)
 800955e:	400a      	ands	r2, r1
 8009560:	801a      	strh	r2, [r3, #0]
 8009562:	183b      	adds	r3, r7, r0
 8009564:	183a      	adds	r2, r7, r0
 8009566:	8812      	ldrh	r2, [r2, #0]
 8009568:	2120      	movs	r1, #32
 800956a:	404a      	eors	r2, r1
 800956c:	801a      	strh	r2, [r3, #0]
 800956e:	687a      	ldr	r2, [r7, #4]
 8009570:	683b      	ldr	r3, [r7, #0]
 8009572:	781b      	ldrb	r3, [r3, #0]
 8009574:	009b      	lsls	r3, r3, #2
 8009576:	18d3      	adds	r3, r2, r3
 8009578:	183a      	adds	r2, r7, r0
 800957a:	8812      	ldrh	r2, [r2, #0]
 800957c:	496c      	ldr	r1, [pc, #432]	; (8009730 <USB_ActivateEndpoint+0x368>)
 800957e:	430a      	orrs	r2, r1
 8009580:	b292      	uxth	r2, r2
 8009582:	801a      	strh	r2, [r3, #0]
 8009584:	e27a      	b.n	8009a7c <USB_ActivateEndpoint+0x6b4>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8009586:	687a      	ldr	r2, [r7, #4]
 8009588:	683b      	ldr	r3, [r7, #0]
 800958a:	781b      	ldrb	r3, [r3, #0]
 800958c:	009b      	lsls	r3, r3, #2
 800958e:	18d3      	adds	r3, r2, r3
 8009590:	881b      	ldrh	r3, [r3, #0]
 8009592:	b29a      	uxth	r2, r3
 8009594:	200e      	movs	r0, #14
 8009596:	183b      	adds	r3, r7, r0
 8009598:	4968      	ldr	r1, [pc, #416]	; (800973c <USB_ActivateEndpoint+0x374>)
 800959a:	400a      	ands	r2, r1
 800959c:	801a      	strh	r2, [r3, #0]
 800959e:	687a      	ldr	r2, [r7, #4]
 80095a0:	683b      	ldr	r3, [r7, #0]
 80095a2:	781b      	ldrb	r3, [r3, #0]
 80095a4:	009b      	lsls	r3, r3, #2
 80095a6:	18d3      	adds	r3, r2, r3
 80095a8:	183a      	adds	r2, r7, r0
 80095aa:	8812      	ldrh	r2, [r2, #0]
 80095ac:	4960      	ldr	r1, [pc, #384]	; (8009730 <USB_ActivateEndpoint+0x368>)
 80095ae:	430a      	orrs	r2, r1
 80095b0:	b292      	uxth	r2, r2
 80095b2:	801a      	strh	r2, [r3, #0]
 80095b4:	e262      	b.n	8009a7c <USB_ActivateEndpoint+0x6b4>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	633b      	str	r3, [r7, #48]	; 0x30
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	2250      	movs	r2, #80	; 0x50
 80095be:	5a9b      	ldrh	r3, [r3, r2]
 80095c0:	b29b      	uxth	r3, r3
 80095c2:	001a      	movs	r2, r3
 80095c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095c6:	189b      	adds	r3, r3, r2
 80095c8:	633b      	str	r3, [r7, #48]	; 0x30
 80095ca:	683b      	ldr	r3, [r7, #0]
 80095cc:	781b      	ldrb	r3, [r3, #0]
 80095ce:	00da      	lsls	r2, r3, #3
 80095d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095d2:	18d3      	adds	r3, r2, r3
 80095d4:	4a5a      	ldr	r2, [pc, #360]	; (8009740 <USB_ActivateEndpoint+0x378>)
 80095d6:	4694      	mov	ip, r2
 80095d8:	4463      	add	r3, ip
 80095da:	62fb      	str	r3, [r7, #44]	; 0x2c
 80095dc:	683b      	ldr	r3, [r7, #0]
 80095de:	88db      	ldrh	r3, [r3, #6]
 80095e0:	085b      	lsrs	r3, r3, #1
 80095e2:	b29b      	uxth	r3, r3
 80095e4:	18db      	adds	r3, r3, r3
 80095e6:	b29a      	uxth	r2, r3
 80095e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80095ea:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	62bb      	str	r3, [r7, #40]	; 0x28
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	2250      	movs	r2, #80	; 0x50
 80095f4:	5a9b      	ldrh	r3, [r3, r2]
 80095f6:	b29b      	uxth	r3, r3
 80095f8:	001a      	movs	r2, r3
 80095fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095fc:	189b      	adds	r3, r3, r2
 80095fe:	62bb      	str	r3, [r7, #40]	; 0x28
 8009600:	683b      	ldr	r3, [r7, #0]
 8009602:	781b      	ldrb	r3, [r3, #0]
 8009604:	00da      	lsls	r2, r3, #3
 8009606:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009608:	18d3      	adds	r3, r2, r3
 800960a:	4a4e      	ldr	r2, [pc, #312]	; (8009744 <USB_ActivateEndpoint+0x37c>)
 800960c:	4694      	mov	ip, r2
 800960e:	4463      	add	r3, ip
 8009610:	627b      	str	r3, [r7, #36]	; 0x24
 8009612:	683b      	ldr	r3, [r7, #0]
 8009614:	691b      	ldr	r3, [r3, #16]
 8009616:	2b00      	cmp	r3, #0
 8009618:	d110      	bne.n	800963c <USB_ActivateEndpoint+0x274>
 800961a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800961c:	881b      	ldrh	r3, [r3, #0]
 800961e:	b29b      	uxth	r3, r3
 8009620:	4a49      	ldr	r2, [pc, #292]	; (8009748 <USB_ActivateEndpoint+0x380>)
 8009622:	4013      	ands	r3, r2
 8009624:	b29a      	uxth	r2, r3
 8009626:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009628:	801a      	strh	r2, [r3, #0]
 800962a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800962c:	881b      	ldrh	r3, [r3, #0]
 800962e:	b29b      	uxth	r3, r3
 8009630:	4a46      	ldr	r2, [pc, #280]	; (800974c <USB_ActivateEndpoint+0x384>)
 8009632:	4313      	orrs	r3, r2
 8009634:	b29a      	uxth	r2, r3
 8009636:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009638:	801a      	strh	r2, [r3, #0]
 800963a:	e02b      	b.n	8009694 <USB_ActivateEndpoint+0x2cc>
 800963c:	683b      	ldr	r3, [r7, #0]
 800963e:	691b      	ldr	r3, [r3, #16]
 8009640:	2b3e      	cmp	r3, #62	; 0x3e
 8009642:	d812      	bhi.n	800966a <USB_ActivateEndpoint+0x2a2>
 8009644:	683b      	ldr	r3, [r7, #0]
 8009646:	691b      	ldr	r3, [r3, #16]
 8009648:	085b      	lsrs	r3, r3, #1
 800964a:	66bb      	str	r3, [r7, #104]	; 0x68
 800964c:	683b      	ldr	r3, [r7, #0]
 800964e:	691b      	ldr	r3, [r3, #16]
 8009650:	2201      	movs	r2, #1
 8009652:	4013      	ands	r3, r2
 8009654:	d002      	beq.n	800965c <USB_ActivateEndpoint+0x294>
 8009656:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009658:	3301      	adds	r3, #1
 800965a:	66bb      	str	r3, [r7, #104]	; 0x68
 800965c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800965e:	b29b      	uxth	r3, r3
 8009660:	029b      	lsls	r3, r3, #10
 8009662:	b29a      	uxth	r2, r3
 8009664:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009666:	801a      	strh	r2, [r3, #0]
 8009668:	e014      	b.n	8009694 <USB_ActivateEndpoint+0x2cc>
 800966a:	683b      	ldr	r3, [r7, #0]
 800966c:	691b      	ldr	r3, [r3, #16]
 800966e:	095b      	lsrs	r3, r3, #5
 8009670:	66bb      	str	r3, [r7, #104]	; 0x68
 8009672:	683b      	ldr	r3, [r7, #0]
 8009674:	691b      	ldr	r3, [r3, #16]
 8009676:	221f      	movs	r2, #31
 8009678:	4013      	ands	r3, r2
 800967a:	d102      	bne.n	8009682 <USB_ActivateEndpoint+0x2ba>
 800967c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800967e:	3b01      	subs	r3, #1
 8009680:	66bb      	str	r3, [r7, #104]	; 0x68
 8009682:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009684:	b29b      	uxth	r3, r3
 8009686:	029b      	lsls	r3, r3, #10
 8009688:	b29b      	uxth	r3, r3
 800968a:	4a30      	ldr	r2, [pc, #192]	; (800974c <USB_ActivateEndpoint+0x384>)
 800968c:	4313      	orrs	r3, r2
 800968e:	b29a      	uxth	r2, r3
 8009690:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009692:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009694:	687a      	ldr	r2, [r7, #4]
 8009696:	683b      	ldr	r3, [r7, #0]
 8009698:	781b      	ldrb	r3, [r3, #0]
 800969a:	009b      	lsls	r3, r3, #2
 800969c:	18d2      	adds	r2, r2, r3
 800969e:	2122      	movs	r1, #34	; 0x22
 80096a0:	187b      	adds	r3, r7, r1
 80096a2:	8812      	ldrh	r2, [r2, #0]
 80096a4:	801a      	strh	r2, [r3, #0]
 80096a6:	187b      	adds	r3, r7, r1
 80096a8:	881a      	ldrh	r2, [r3, #0]
 80096aa:	2380      	movs	r3, #128	; 0x80
 80096ac:	01db      	lsls	r3, r3, #7
 80096ae:	4013      	ands	r3, r2
 80096b0:	d016      	beq.n	80096e0 <USB_ActivateEndpoint+0x318>
 80096b2:	687a      	ldr	r2, [r7, #4]
 80096b4:	683b      	ldr	r3, [r7, #0]
 80096b6:	781b      	ldrb	r3, [r3, #0]
 80096b8:	009b      	lsls	r3, r3, #2
 80096ba:	18d3      	adds	r3, r2, r3
 80096bc:	881b      	ldrh	r3, [r3, #0]
 80096be:	b29a      	uxth	r2, r3
 80096c0:	2020      	movs	r0, #32
 80096c2:	183b      	adds	r3, r7, r0
 80096c4:	491b      	ldr	r1, [pc, #108]	; (8009734 <USB_ActivateEndpoint+0x36c>)
 80096c6:	400a      	ands	r2, r1
 80096c8:	801a      	strh	r2, [r3, #0]
 80096ca:	687a      	ldr	r2, [r7, #4]
 80096cc:	683b      	ldr	r3, [r7, #0]
 80096ce:	781b      	ldrb	r3, [r3, #0]
 80096d0:	009b      	lsls	r3, r3, #2
 80096d2:	18d3      	adds	r3, r2, r3
 80096d4:	183a      	adds	r2, r7, r0
 80096d6:	8812      	ldrh	r2, [r2, #0]
 80096d8:	491d      	ldr	r1, [pc, #116]	; (8009750 <USB_ActivateEndpoint+0x388>)
 80096da:	430a      	orrs	r2, r1
 80096dc:	b292      	uxth	r2, r2
 80096de:	801a      	strh	r2, [r3, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80096e0:	687a      	ldr	r2, [r7, #4]
 80096e2:	683b      	ldr	r3, [r7, #0]
 80096e4:	781b      	ldrb	r3, [r3, #0]
 80096e6:	009b      	lsls	r3, r3, #2
 80096e8:	18d3      	adds	r3, r2, r3
 80096ea:	881b      	ldrh	r3, [r3, #0]
 80096ec:	b29a      	uxth	r2, r3
 80096ee:	201e      	movs	r0, #30
 80096f0:	183b      	adds	r3, r7, r0
 80096f2:	4918      	ldr	r1, [pc, #96]	; (8009754 <USB_ActivateEndpoint+0x38c>)
 80096f4:	400a      	ands	r2, r1
 80096f6:	801a      	strh	r2, [r3, #0]
 80096f8:	183b      	adds	r3, r7, r0
 80096fa:	183a      	adds	r2, r7, r0
 80096fc:	8812      	ldrh	r2, [r2, #0]
 80096fe:	2180      	movs	r1, #128	; 0x80
 8009700:	0149      	lsls	r1, r1, #5
 8009702:	404a      	eors	r2, r1
 8009704:	801a      	strh	r2, [r3, #0]
 8009706:	183b      	adds	r3, r7, r0
 8009708:	183a      	adds	r2, r7, r0
 800970a:	8812      	ldrh	r2, [r2, #0]
 800970c:	2180      	movs	r1, #128	; 0x80
 800970e:	0189      	lsls	r1, r1, #6
 8009710:	404a      	eors	r2, r1
 8009712:	801a      	strh	r2, [r3, #0]
 8009714:	687a      	ldr	r2, [r7, #4]
 8009716:	683b      	ldr	r3, [r7, #0]
 8009718:	781b      	ldrb	r3, [r3, #0]
 800971a:	009b      	lsls	r3, r3, #2
 800971c:	18d3      	adds	r3, r2, r3
 800971e:	183a      	adds	r2, r7, r0
 8009720:	8812      	ldrh	r2, [r2, #0]
 8009722:	4903      	ldr	r1, [pc, #12]	; (8009730 <USB_ActivateEndpoint+0x368>)
 8009724:	430a      	orrs	r2, r1
 8009726:	b292      	uxth	r2, r2
 8009728:	801a      	strh	r2, [r3, #0]
 800972a:	e1a7      	b.n	8009a7c <USB_ActivateEndpoint+0x6b4>
 800972c:	ffff898f 	.word	0xffff898f
 8009730:	ffff8080 	.word	0xffff8080
 8009734:	ffff8f8f 	.word	0xffff8f8f
 8009738:	ffff80c0 	.word	0xffff80c0
 800973c:	ffff8fbf 	.word	0xffff8fbf
 8009740:	00000404 	.word	0x00000404
 8009744:	00000406 	.word	0x00000406
 8009748:	ffff83ff 	.word	0xffff83ff
 800974c:	ffff8000 	.word	0xffff8000
 8009750:	ffffc080 	.word	0xffffc080
 8009754:	ffffbf8f 	.word	0xffffbf8f
    }
  }
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8009758:	683b      	ldr	r3, [r7, #0]
 800975a:	78db      	ldrb	r3, [r3, #3]
 800975c:	2b02      	cmp	r3, #2
 800975e:	d117      	bne.n	8009790 <USB_ActivateEndpoint+0x3c8>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8009760:	687a      	ldr	r2, [r7, #4]
 8009762:	683b      	ldr	r3, [r7, #0]
 8009764:	781b      	ldrb	r3, [r3, #0]
 8009766:	009b      	lsls	r3, r3, #2
 8009768:	18d3      	adds	r3, r2, r3
 800976a:	881b      	ldrh	r3, [r3, #0]
 800976c:	b29a      	uxth	r2, r3
 800976e:	2062      	movs	r0, #98	; 0x62
 8009770:	183b      	adds	r3, r7, r0
 8009772:	49c6      	ldr	r1, [pc, #792]	; (8009a8c <USB_ActivateEndpoint+0x6c4>)
 8009774:	400a      	ands	r2, r1
 8009776:	801a      	strh	r2, [r3, #0]
 8009778:	687a      	ldr	r2, [r7, #4]
 800977a:	683b      	ldr	r3, [r7, #0]
 800977c:	781b      	ldrb	r3, [r3, #0]
 800977e:	009b      	lsls	r3, r3, #2
 8009780:	18d3      	adds	r3, r2, r3
 8009782:	183a      	adds	r2, r7, r0
 8009784:	8812      	ldrh	r2, [r2, #0]
 8009786:	49c2      	ldr	r1, [pc, #776]	; (8009a90 <USB_ActivateEndpoint+0x6c8>)
 8009788:	430a      	orrs	r2, r1
 800978a:	b292      	uxth	r2, r2
 800978c:	801a      	strh	r2, [r3, #0]
 800978e:	e016      	b.n	80097be <USB_ActivateEndpoint+0x3f6>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8009790:	687a      	ldr	r2, [r7, #4]
 8009792:	683b      	ldr	r3, [r7, #0]
 8009794:	781b      	ldrb	r3, [r3, #0]
 8009796:	009b      	lsls	r3, r3, #2
 8009798:	18d3      	adds	r3, r2, r3
 800979a:	881b      	ldrh	r3, [r3, #0]
 800979c:	b29a      	uxth	r2, r3
 800979e:	2064      	movs	r0, #100	; 0x64
 80097a0:	183b      	adds	r3, r7, r0
 80097a2:	49bc      	ldr	r1, [pc, #752]	; (8009a94 <USB_ActivateEndpoint+0x6cc>)
 80097a4:	400a      	ands	r2, r1
 80097a6:	801a      	strh	r2, [r3, #0]
 80097a8:	687a      	ldr	r2, [r7, #4]
 80097aa:	683b      	ldr	r3, [r7, #0]
 80097ac:	781b      	ldrb	r3, [r3, #0]
 80097ae:	009b      	lsls	r3, r3, #2
 80097b0:	18d3      	adds	r3, r2, r3
 80097b2:	183a      	adds	r2, r7, r0
 80097b4:	8812      	ldrh	r2, [r2, #0]
 80097b6:	49b8      	ldr	r1, [pc, #736]	; (8009a98 <USB_ActivateEndpoint+0x6d0>)
 80097b8:	430a      	orrs	r2, r1
 80097ba:	b292      	uxth	r2, r2
 80097bc:	801a      	strh	r2, [r3, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	2250      	movs	r2, #80	; 0x50
 80097c6:	5a9b      	ldrh	r3, [r3, r2]
 80097c8:	b29b      	uxth	r3, r3
 80097ca:	001a      	movs	r2, r3
 80097cc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80097ce:	189b      	adds	r3, r3, r2
 80097d0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80097d2:	683b      	ldr	r3, [r7, #0]
 80097d4:	781b      	ldrb	r3, [r3, #0]
 80097d6:	00da      	lsls	r2, r3, #3
 80097d8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80097da:	18d3      	adds	r3, r2, r3
 80097dc:	2280      	movs	r2, #128	; 0x80
 80097de:	00d2      	lsls	r2, r2, #3
 80097e0:	4694      	mov	ip, r2
 80097e2:	4463      	add	r3, ip
 80097e4:	65bb      	str	r3, [r7, #88]	; 0x58
 80097e6:	683b      	ldr	r3, [r7, #0]
 80097e8:	891b      	ldrh	r3, [r3, #8]
 80097ea:	085b      	lsrs	r3, r3, #1
 80097ec:	b29b      	uxth	r3, r3
 80097ee:	18db      	adds	r3, r3, r3
 80097f0:	b29a      	uxth	r2, r3
 80097f2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80097f4:	801a      	strh	r2, [r3, #0]
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	657b      	str	r3, [r7, #84]	; 0x54
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	2250      	movs	r2, #80	; 0x50
 80097fe:	5a9b      	ldrh	r3, [r3, r2]
 8009800:	b29b      	uxth	r3, r3
 8009802:	001a      	movs	r2, r3
 8009804:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009806:	189b      	adds	r3, r3, r2
 8009808:	657b      	str	r3, [r7, #84]	; 0x54
 800980a:	683b      	ldr	r3, [r7, #0]
 800980c:	781b      	ldrb	r3, [r3, #0]
 800980e:	00da      	lsls	r2, r3, #3
 8009810:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009812:	18d3      	adds	r3, r2, r3
 8009814:	4aa1      	ldr	r2, [pc, #644]	; (8009a9c <USB_ActivateEndpoint+0x6d4>)
 8009816:	4694      	mov	ip, r2
 8009818:	4463      	add	r3, ip
 800981a:	653b      	str	r3, [r7, #80]	; 0x50
 800981c:	683b      	ldr	r3, [r7, #0]
 800981e:	895b      	ldrh	r3, [r3, #10]
 8009820:	085b      	lsrs	r3, r3, #1
 8009822:	b29b      	uxth	r3, r3
 8009824:	18db      	adds	r3, r3, r3
 8009826:	b29a      	uxth	r2, r3
 8009828:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800982a:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 800982c:	683b      	ldr	r3, [r7, #0]
 800982e:	785b      	ldrb	r3, [r3, #1]
 8009830:	2b00      	cmp	r3, #0
 8009832:	d000      	beq.n	8009836 <USB_ActivateEndpoint+0x46e>
 8009834:	e087      	b.n	8009946 <USB_ActivateEndpoint+0x57e>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009836:	687a      	ldr	r2, [r7, #4]
 8009838:	683b      	ldr	r3, [r7, #0]
 800983a:	781b      	ldrb	r3, [r3, #0]
 800983c:	009b      	lsls	r3, r3, #2
 800983e:	18d2      	adds	r2, r2, r3
 8009840:	2140      	movs	r1, #64	; 0x40
 8009842:	187b      	adds	r3, r7, r1
 8009844:	8812      	ldrh	r2, [r2, #0]
 8009846:	801a      	strh	r2, [r3, #0]
 8009848:	187b      	adds	r3, r7, r1
 800984a:	881a      	ldrh	r2, [r3, #0]
 800984c:	2380      	movs	r3, #128	; 0x80
 800984e:	01db      	lsls	r3, r3, #7
 8009850:	4013      	ands	r3, r2
 8009852:	d016      	beq.n	8009882 <USB_ActivateEndpoint+0x4ba>
 8009854:	687a      	ldr	r2, [r7, #4]
 8009856:	683b      	ldr	r3, [r7, #0]
 8009858:	781b      	ldrb	r3, [r3, #0]
 800985a:	009b      	lsls	r3, r3, #2
 800985c:	18d3      	adds	r3, r2, r3
 800985e:	881b      	ldrh	r3, [r3, #0]
 8009860:	b29a      	uxth	r2, r3
 8009862:	203e      	movs	r0, #62	; 0x3e
 8009864:	183b      	adds	r3, r7, r0
 8009866:	4989      	ldr	r1, [pc, #548]	; (8009a8c <USB_ActivateEndpoint+0x6c4>)
 8009868:	400a      	ands	r2, r1
 800986a:	801a      	strh	r2, [r3, #0]
 800986c:	687a      	ldr	r2, [r7, #4]
 800986e:	683b      	ldr	r3, [r7, #0]
 8009870:	781b      	ldrb	r3, [r3, #0]
 8009872:	009b      	lsls	r3, r3, #2
 8009874:	18d3      	adds	r3, r2, r3
 8009876:	183a      	adds	r2, r7, r0
 8009878:	8812      	ldrh	r2, [r2, #0]
 800987a:	4989      	ldr	r1, [pc, #548]	; (8009aa0 <USB_ActivateEndpoint+0x6d8>)
 800987c:	430a      	orrs	r2, r1
 800987e:	b292      	uxth	r2, r2
 8009880:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009882:	687a      	ldr	r2, [r7, #4]
 8009884:	683b      	ldr	r3, [r7, #0]
 8009886:	781b      	ldrb	r3, [r3, #0]
 8009888:	009b      	lsls	r3, r3, #2
 800988a:	18d2      	adds	r2, r2, r3
 800988c:	213c      	movs	r1, #60	; 0x3c
 800988e:	187b      	adds	r3, r7, r1
 8009890:	8812      	ldrh	r2, [r2, #0]
 8009892:	801a      	strh	r2, [r3, #0]
 8009894:	187b      	adds	r3, r7, r1
 8009896:	881b      	ldrh	r3, [r3, #0]
 8009898:	2240      	movs	r2, #64	; 0x40
 800989a:	4013      	ands	r3, r2
 800989c:	d016      	beq.n	80098cc <USB_ActivateEndpoint+0x504>
 800989e:	687a      	ldr	r2, [r7, #4]
 80098a0:	683b      	ldr	r3, [r7, #0]
 80098a2:	781b      	ldrb	r3, [r3, #0]
 80098a4:	009b      	lsls	r3, r3, #2
 80098a6:	18d3      	adds	r3, r2, r3
 80098a8:	881b      	ldrh	r3, [r3, #0]
 80098aa:	b29a      	uxth	r2, r3
 80098ac:	203a      	movs	r0, #58	; 0x3a
 80098ae:	183b      	adds	r3, r7, r0
 80098b0:	4976      	ldr	r1, [pc, #472]	; (8009a8c <USB_ActivateEndpoint+0x6c4>)
 80098b2:	400a      	ands	r2, r1
 80098b4:	801a      	strh	r2, [r3, #0]
 80098b6:	687a      	ldr	r2, [r7, #4]
 80098b8:	683b      	ldr	r3, [r7, #0]
 80098ba:	781b      	ldrb	r3, [r3, #0]
 80098bc:	009b      	lsls	r3, r3, #2
 80098be:	18d3      	adds	r3, r2, r3
 80098c0:	183a      	adds	r2, r7, r0
 80098c2:	8812      	ldrh	r2, [r2, #0]
 80098c4:	4977      	ldr	r1, [pc, #476]	; (8009aa4 <USB_ActivateEndpoint+0x6dc>)
 80098c6:	430a      	orrs	r2, r1
 80098c8:	b292      	uxth	r2, r2
 80098ca:	801a      	strh	r2, [r3, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80098cc:	687a      	ldr	r2, [r7, #4]
 80098ce:	683b      	ldr	r3, [r7, #0]
 80098d0:	781b      	ldrb	r3, [r3, #0]
 80098d2:	009b      	lsls	r3, r3, #2
 80098d4:	18d3      	adds	r3, r2, r3
 80098d6:	881b      	ldrh	r3, [r3, #0]
 80098d8:	b29a      	uxth	r2, r3
 80098da:	2038      	movs	r0, #56	; 0x38
 80098dc:	183b      	adds	r3, r7, r0
 80098de:	4972      	ldr	r1, [pc, #456]	; (8009aa8 <USB_ActivateEndpoint+0x6e0>)
 80098e0:	400a      	ands	r2, r1
 80098e2:	801a      	strh	r2, [r3, #0]
 80098e4:	183b      	adds	r3, r7, r0
 80098e6:	183a      	adds	r2, r7, r0
 80098e8:	8812      	ldrh	r2, [r2, #0]
 80098ea:	2180      	movs	r1, #128	; 0x80
 80098ec:	0149      	lsls	r1, r1, #5
 80098ee:	404a      	eors	r2, r1
 80098f0:	801a      	strh	r2, [r3, #0]
 80098f2:	183b      	adds	r3, r7, r0
 80098f4:	183a      	adds	r2, r7, r0
 80098f6:	8812      	ldrh	r2, [r2, #0]
 80098f8:	2180      	movs	r1, #128	; 0x80
 80098fa:	0189      	lsls	r1, r1, #6
 80098fc:	404a      	eors	r2, r1
 80098fe:	801a      	strh	r2, [r3, #0]
 8009900:	687a      	ldr	r2, [r7, #4]
 8009902:	683b      	ldr	r3, [r7, #0]
 8009904:	781b      	ldrb	r3, [r3, #0]
 8009906:	009b      	lsls	r3, r3, #2
 8009908:	18d3      	adds	r3, r2, r3
 800990a:	183a      	adds	r2, r7, r0
 800990c:	8812      	ldrh	r2, [r2, #0]
 800990e:	4962      	ldr	r1, [pc, #392]	; (8009a98 <USB_ActivateEndpoint+0x6d0>)
 8009910:	430a      	orrs	r2, r1
 8009912:	b292      	uxth	r2, r2
 8009914:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8009916:	687a      	ldr	r2, [r7, #4]
 8009918:	683b      	ldr	r3, [r7, #0]
 800991a:	781b      	ldrb	r3, [r3, #0]
 800991c:	009b      	lsls	r3, r3, #2
 800991e:	18d3      	adds	r3, r2, r3
 8009920:	881b      	ldrh	r3, [r3, #0]
 8009922:	b29a      	uxth	r2, r3
 8009924:	2036      	movs	r0, #54	; 0x36
 8009926:	183b      	adds	r3, r7, r0
 8009928:	4960      	ldr	r1, [pc, #384]	; (8009aac <USB_ActivateEndpoint+0x6e4>)
 800992a:	400a      	ands	r2, r1
 800992c:	801a      	strh	r2, [r3, #0]
 800992e:	687a      	ldr	r2, [r7, #4]
 8009930:	683b      	ldr	r3, [r7, #0]
 8009932:	781b      	ldrb	r3, [r3, #0]
 8009934:	009b      	lsls	r3, r3, #2
 8009936:	18d3      	adds	r3, r2, r3
 8009938:	183a      	adds	r2, r7, r0
 800993a:	8812      	ldrh	r2, [r2, #0]
 800993c:	4956      	ldr	r1, [pc, #344]	; (8009a98 <USB_ActivateEndpoint+0x6d0>)
 800993e:	430a      	orrs	r2, r1
 8009940:	b292      	uxth	r2, r2
 8009942:	801a      	strh	r2, [r3, #0]
 8009944:	e09a      	b.n	8009a7c <USB_ActivateEndpoint+0x6b4>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009946:	687a      	ldr	r2, [r7, #4]
 8009948:	683b      	ldr	r3, [r7, #0]
 800994a:	781b      	ldrb	r3, [r3, #0]
 800994c:	009b      	lsls	r3, r3, #2
 800994e:	18d2      	adds	r2, r2, r3
 8009950:	214e      	movs	r1, #78	; 0x4e
 8009952:	187b      	adds	r3, r7, r1
 8009954:	8812      	ldrh	r2, [r2, #0]
 8009956:	801a      	strh	r2, [r3, #0]
 8009958:	187b      	adds	r3, r7, r1
 800995a:	881a      	ldrh	r2, [r3, #0]
 800995c:	2380      	movs	r3, #128	; 0x80
 800995e:	01db      	lsls	r3, r3, #7
 8009960:	4013      	ands	r3, r2
 8009962:	d016      	beq.n	8009992 <USB_ActivateEndpoint+0x5ca>
 8009964:	687a      	ldr	r2, [r7, #4]
 8009966:	683b      	ldr	r3, [r7, #0]
 8009968:	781b      	ldrb	r3, [r3, #0]
 800996a:	009b      	lsls	r3, r3, #2
 800996c:	18d3      	adds	r3, r2, r3
 800996e:	881b      	ldrh	r3, [r3, #0]
 8009970:	b29a      	uxth	r2, r3
 8009972:	204c      	movs	r0, #76	; 0x4c
 8009974:	183b      	adds	r3, r7, r0
 8009976:	4945      	ldr	r1, [pc, #276]	; (8009a8c <USB_ActivateEndpoint+0x6c4>)
 8009978:	400a      	ands	r2, r1
 800997a:	801a      	strh	r2, [r3, #0]
 800997c:	687a      	ldr	r2, [r7, #4]
 800997e:	683b      	ldr	r3, [r7, #0]
 8009980:	781b      	ldrb	r3, [r3, #0]
 8009982:	009b      	lsls	r3, r3, #2
 8009984:	18d3      	adds	r3, r2, r3
 8009986:	183a      	adds	r2, r7, r0
 8009988:	8812      	ldrh	r2, [r2, #0]
 800998a:	4945      	ldr	r1, [pc, #276]	; (8009aa0 <USB_ActivateEndpoint+0x6d8>)
 800998c:	430a      	orrs	r2, r1
 800998e:	b292      	uxth	r2, r2
 8009990:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009992:	687a      	ldr	r2, [r7, #4]
 8009994:	683b      	ldr	r3, [r7, #0]
 8009996:	781b      	ldrb	r3, [r3, #0]
 8009998:	009b      	lsls	r3, r3, #2
 800999a:	18d2      	adds	r2, r2, r3
 800999c:	214a      	movs	r1, #74	; 0x4a
 800999e:	187b      	adds	r3, r7, r1
 80099a0:	8812      	ldrh	r2, [r2, #0]
 80099a2:	801a      	strh	r2, [r3, #0]
 80099a4:	187b      	adds	r3, r7, r1
 80099a6:	881b      	ldrh	r3, [r3, #0]
 80099a8:	2240      	movs	r2, #64	; 0x40
 80099aa:	4013      	ands	r3, r2
 80099ac:	d016      	beq.n	80099dc <USB_ActivateEndpoint+0x614>
 80099ae:	687a      	ldr	r2, [r7, #4]
 80099b0:	683b      	ldr	r3, [r7, #0]
 80099b2:	781b      	ldrb	r3, [r3, #0]
 80099b4:	009b      	lsls	r3, r3, #2
 80099b6:	18d3      	adds	r3, r2, r3
 80099b8:	881b      	ldrh	r3, [r3, #0]
 80099ba:	b29a      	uxth	r2, r3
 80099bc:	2048      	movs	r0, #72	; 0x48
 80099be:	183b      	adds	r3, r7, r0
 80099c0:	4932      	ldr	r1, [pc, #200]	; (8009a8c <USB_ActivateEndpoint+0x6c4>)
 80099c2:	400a      	ands	r2, r1
 80099c4:	801a      	strh	r2, [r3, #0]
 80099c6:	687a      	ldr	r2, [r7, #4]
 80099c8:	683b      	ldr	r3, [r7, #0]
 80099ca:	781b      	ldrb	r3, [r3, #0]
 80099cc:	009b      	lsls	r3, r3, #2
 80099ce:	18d3      	adds	r3, r2, r3
 80099d0:	183a      	adds	r2, r7, r0
 80099d2:	8812      	ldrh	r2, [r2, #0]
 80099d4:	4933      	ldr	r1, [pc, #204]	; (8009aa4 <USB_ActivateEndpoint+0x6dc>)
 80099d6:	430a      	orrs	r2, r1
 80099d8:	b292      	uxth	r2, r2
 80099da:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 80099dc:	683b      	ldr	r3, [r7, #0]
 80099de:	78db      	ldrb	r3, [r3, #3]
 80099e0:	2b01      	cmp	r3, #1
 80099e2:	d01d      	beq.n	8009a20 <USB_ActivateEndpoint+0x658>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80099e4:	687a      	ldr	r2, [r7, #4]
 80099e6:	683b      	ldr	r3, [r7, #0]
 80099e8:	781b      	ldrb	r3, [r3, #0]
 80099ea:	009b      	lsls	r3, r3, #2
 80099ec:	18d3      	adds	r3, r2, r3
 80099ee:	881b      	ldrh	r3, [r3, #0]
 80099f0:	b29a      	uxth	r2, r3
 80099f2:	2044      	movs	r0, #68	; 0x44
 80099f4:	183b      	adds	r3, r7, r0
 80099f6:	492d      	ldr	r1, [pc, #180]	; (8009aac <USB_ActivateEndpoint+0x6e4>)
 80099f8:	400a      	ands	r2, r1
 80099fa:	801a      	strh	r2, [r3, #0]
 80099fc:	183b      	adds	r3, r7, r0
 80099fe:	183a      	adds	r2, r7, r0
 8009a00:	8812      	ldrh	r2, [r2, #0]
 8009a02:	2120      	movs	r1, #32
 8009a04:	404a      	eors	r2, r1
 8009a06:	801a      	strh	r2, [r3, #0]
 8009a08:	687a      	ldr	r2, [r7, #4]
 8009a0a:	683b      	ldr	r3, [r7, #0]
 8009a0c:	781b      	ldrb	r3, [r3, #0]
 8009a0e:	009b      	lsls	r3, r3, #2
 8009a10:	18d3      	adds	r3, r2, r3
 8009a12:	183a      	adds	r2, r7, r0
 8009a14:	8812      	ldrh	r2, [r2, #0]
 8009a16:	4920      	ldr	r1, [pc, #128]	; (8009a98 <USB_ActivateEndpoint+0x6d0>)
 8009a18:	430a      	orrs	r2, r1
 8009a1a:	b292      	uxth	r2, r2
 8009a1c:	801a      	strh	r2, [r3, #0]
 8009a1e:	e016      	b.n	8009a4e <USB_ActivateEndpoint+0x686>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8009a20:	687a      	ldr	r2, [r7, #4]
 8009a22:	683b      	ldr	r3, [r7, #0]
 8009a24:	781b      	ldrb	r3, [r3, #0]
 8009a26:	009b      	lsls	r3, r3, #2
 8009a28:	18d3      	adds	r3, r2, r3
 8009a2a:	881b      	ldrh	r3, [r3, #0]
 8009a2c:	b29a      	uxth	r2, r3
 8009a2e:	2046      	movs	r0, #70	; 0x46
 8009a30:	183b      	adds	r3, r7, r0
 8009a32:	491e      	ldr	r1, [pc, #120]	; (8009aac <USB_ActivateEndpoint+0x6e4>)
 8009a34:	400a      	ands	r2, r1
 8009a36:	801a      	strh	r2, [r3, #0]
 8009a38:	687a      	ldr	r2, [r7, #4]
 8009a3a:	683b      	ldr	r3, [r7, #0]
 8009a3c:	781b      	ldrb	r3, [r3, #0]
 8009a3e:	009b      	lsls	r3, r3, #2
 8009a40:	18d3      	adds	r3, r2, r3
 8009a42:	183a      	adds	r2, r7, r0
 8009a44:	8812      	ldrh	r2, [r2, #0]
 8009a46:	4914      	ldr	r1, [pc, #80]	; (8009a98 <USB_ActivateEndpoint+0x6d0>)
 8009a48:	430a      	orrs	r2, r1
 8009a4a:	b292      	uxth	r2, r2
 8009a4c:	801a      	strh	r2, [r3, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8009a4e:	687a      	ldr	r2, [r7, #4]
 8009a50:	683b      	ldr	r3, [r7, #0]
 8009a52:	781b      	ldrb	r3, [r3, #0]
 8009a54:	009b      	lsls	r3, r3, #2
 8009a56:	18d3      	adds	r3, r2, r3
 8009a58:	881b      	ldrh	r3, [r3, #0]
 8009a5a:	b29a      	uxth	r2, r3
 8009a5c:	2042      	movs	r0, #66	; 0x42
 8009a5e:	183b      	adds	r3, r7, r0
 8009a60:	4911      	ldr	r1, [pc, #68]	; (8009aa8 <USB_ActivateEndpoint+0x6e0>)
 8009a62:	400a      	ands	r2, r1
 8009a64:	801a      	strh	r2, [r3, #0]
 8009a66:	687a      	ldr	r2, [r7, #4]
 8009a68:	683b      	ldr	r3, [r7, #0]
 8009a6a:	781b      	ldrb	r3, [r3, #0]
 8009a6c:	009b      	lsls	r3, r3, #2
 8009a6e:	18d3      	adds	r3, r2, r3
 8009a70:	183a      	adds	r2, r7, r0
 8009a72:	8812      	ldrh	r2, [r2, #0]
 8009a74:	4908      	ldr	r1, [pc, #32]	; (8009a98 <USB_ActivateEndpoint+0x6d0>)
 8009a76:	430a      	orrs	r2, r1
 8009a78:	b292      	uxth	r2, r2
 8009a7a:	801a      	strh	r2, [r3, #0]
    }
  }

  return ret;
 8009a7c:	236f      	movs	r3, #111	; 0x6f
 8009a7e:	18fb      	adds	r3, r7, r3
 8009a80:	781b      	ldrb	r3, [r3, #0]
}
 8009a82:	0018      	movs	r0, r3
 8009a84:	46bd      	mov	sp, r7
 8009a86:	b01c      	add	sp, #112	; 0x70
 8009a88:	bd80      	pop	{r7, pc}
 8009a8a:	46c0      	nop			; (mov r8, r8)
 8009a8c:	ffff8f8f 	.word	0xffff8f8f
 8009a90:	ffff8180 	.word	0xffff8180
 8009a94:	ffff8e8f 	.word	0xffff8e8f
 8009a98:	ffff8080 	.word	0xffff8080
 8009a9c:	00000404 	.word	0x00000404
 8009aa0:	ffffc080 	.word	0xffffc080
 8009aa4:	ffff80c0 	.word	0xffff80c0
 8009aa8:	ffffbf8f 	.word	0xffffbf8f
 8009aac:	ffff8fbf 	.word	0xffff8fbf

08009ab0 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8009ab0:	b580      	push	{r7, lr}
 8009ab2:	b08c      	sub	sp, #48	; 0x30
 8009ab4:	af00      	add	r7, sp, #0
 8009ab6:	6078      	str	r0, [r7, #4]
 8009ab8:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8009aba:	683b      	ldr	r3, [r7, #0]
 8009abc:	7b1b      	ldrb	r3, [r3, #12]
 8009abe:	2b00      	cmp	r3, #0
 8009ac0:	d000      	beq.n	8009ac4 <USB_DeactivateEndpoint+0x14>
 8009ac2:	e07e      	b.n	8009bc2 <USB_DeactivateEndpoint+0x112>
  {
    if (ep->is_in != 0U)
 8009ac4:	683b      	ldr	r3, [r7, #0]
 8009ac6:	785b      	ldrb	r3, [r3, #1]
 8009ac8:	2b00      	cmp	r3, #0
 8009aca:	d03c      	beq.n	8009b46 <USB_DeactivateEndpoint+0x96>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009acc:	687a      	ldr	r2, [r7, #4]
 8009ace:	683b      	ldr	r3, [r7, #0]
 8009ad0:	781b      	ldrb	r3, [r3, #0]
 8009ad2:	009b      	lsls	r3, r3, #2
 8009ad4:	18d2      	adds	r2, r2, r3
 8009ad6:	210c      	movs	r1, #12
 8009ad8:	187b      	adds	r3, r7, r1
 8009ada:	8812      	ldrh	r2, [r2, #0]
 8009adc:	801a      	strh	r2, [r3, #0]
 8009ade:	187b      	adds	r3, r7, r1
 8009ae0:	881b      	ldrh	r3, [r3, #0]
 8009ae2:	2240      	movs	r2, #64	; 0x40
 8009ae4:	4013      	ands	r3, r2
 8009ae6:	d016      	beq.n	8009b16 <USB_DeactivateEndpoint+0x66>
 8009ae8:	687a      	ldr	r2, [r7, #4]
 8009aea:	683b      	ldr	r3, [r7, #0]
 8009aec:	781b      	ldrb	r3, [r3, #0]
 8009aee:	009b      	lsls	r3, r3, #2
 8009af0:	18d3      	adds	r3, r2, r3
 8009af2:	881b      	ldrh	r3, [r3, #0]
 8009af4:	b29a      	uxth	r2, r3
 8009af6:	200a      	movs	r0, #10
 8009af8:	183b      	adds	r3, r7, r0
 8009afa:	49c7      	ldr	r1, [pc, #796]	; (8009e18 <USB_DeactivateEndpoint+0x368>)
 8009afc:	400a      	ands	r2, r1
 8009afe:	801a      	strh	r2, [r3, #0]
 8009b00:	687a      	ldr	r2, [r7, #4]
 8009b02:	683b      	ldr	r3, [r7, #0]
 8009b04:	781b      	ldrb	r3, [r3, #0]
 8009b06:	009b      	lsls	r3, r3, #2
 8009b08:	18d3      	adds	r3, r2, r3
 8009b0a:	183a      	adds	r2, r7, r0
 8009b0c:	8812      	ldrh	r2, [r2, #0]
 8009b0e:	49c3      	ldr	r1, [pc, #780]	; (8009e1c <USB_DeactivateEndpoint+0x36c>)
 8009b10:	430a      	orrs	r2, r1
 8009b12:	b292      	uxth	r2, r2
 8009b14:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8009b16:	687a      	ldr	r2, [r7, #4]
 8009b18:	683b      	ldr	r3, [r7, #0]
 8009b1a:	781b      	ldrb	r3, [r3, #0]
 8009b1c:	009b      	lsls	r3, r3, #2
 8009b1e:	18d3      	adds	r3, r2, r3
 8009b20:	881b      	ldrh	r3, [r3, #0]
 8009b22:	b29a      	uxth	r2, r3
 8009b24:	2008      	movs	r0, #8
 8009b26:	183b      	adds	r3, r7, r0
 8009b28:	49bd      	ldr	r1, [pc, #756]	; (8009e20 <USB_DeactivateEndpoint+0x370>)
 8009b2a:	400a      	ands	r2, r1
 8009b2c:	801a      	strh	r2, [r3, #0]
 8009b2e:	687a      	ldr	r2, [r7, #4]
 8009b30:	683b      	ldr	r3, [r7, #0]
 8009b32:	781b      	ldrb	r3, [r3, #0]
 8009b34:	009b      	lsls	r3, r3, #2
 8009b36:	18d3      	adds	r3, r2, r3
 8009b38:	183a      	adds	r2, r7, r0
 8009b3a:	8812      	ldrh	r2, [r2, #0]
 8009b3c:	49b9      	ldr	r1, [pc, #740]	; (8009e24 <USB_DeactivateEndpoint+0x374>)
 8009b3e:	430a      	orrs	r2, r1
 8009b40:	b292      	uxth	r2, r2
 8009b42:	801a      	strh	r2, [r3, #0]
 8009b44:	e163      	b.n	8009e0e <USB_DeactivateEndpoint+0x35e>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009b46:	687a      	ldr	r2, [r7, #4]
 8009b48:	683b      	ldr	r3, [r7, #0]
 8009b4a:	781b      	ldrb	r3, [r3, #0]
 8009b4c:	009b      	lsls	r3, r3, #2
 8009b4e:	18d2      	adds	r2, r2, r3
 8009b50:	2112      	movs	r1, #18
 8009b52:	187b      	adds	r3, r7, r1
 8009b54:	8812      	ldrh	r2, [r2, #0]
 8009b56:	801a      	strh	r2, [r3, #0]
 8009b58:	187b      	adds	r3, r7, r1
 8009b5a:	881a      	ldrh	r2, [r3, #0]
 8009b5c:	2380      	movs	r3, #128	; 0x80
 8009b5e:	01db      	lsls	r3, r3, #7
 8009b60:	4013      	ands	r3, r2
 8009b62:	d016      	beq.n	8009b92 <USB_DeactivateEndpoint+0xe2>
 8009b64:	687a      	ldr	r2, [r7, #4]
 8009b66:	683b      	ldr	r3, [r7, #0]
 8009b68:	781b      	ldrb	r3, [r3, #0]
 8009b6a:	009b      	lsls	r3, r3, #2
 8009b6c:	18d3      	adds	r3, r2, r3
 8009b6e:	881b      	ldrh	r3, [r3, #0]
 8009b70:	b29a      	uxth	r2, r3
 8009b72:	2010      	movs	r0, #16
 8009b74:	183b      	adds	r3, r7, r0
 8009b76:	49a8      	ldr	r1, [pc, #672]	; (8009e18 <USB_DeactivateEndpoint+0x368>)
 8009b78:	400a      	ands	r2, r1
 8009b7a:	801a      	strh	r2, [r3, #0]
 8009b7c:	687a      	ldr	r2, [r7, #4]
 8009b7e:	683b      	ldr	r3, [r7, #0]
 8009b80:	781b      	ldrb	r3, [r3, #0]
 8009b82:	009b      	lsls	r3, r3, #2
 8009b84:	18d3      	adds	r3, r2, r3
 8009b86:	183a      	adds	r2, r7, r0
 8009b88:	8812      	ldrh	r2, [r2, #0]
 8009b8a:	49a7      	ldr	r1, [pc, #668]	; (8009e28 <USB_DeactivateEndpoint+0x378>)
 8009b8c:	430a      	orrs	r2, r1
 8009b8e:	b292      	uxth	r2, r2
 8009b90:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8009b92:	687a      	ldr	r2, [r7, #4]
 8009b94:	683b      	ldr	r3, [r7, #0]
 8009b96:	781b      	ldrb	r3, [r3, #0]
 8009b98:	009b      	lsls	r3, r3, #2
 8009b9a:	18d3      	adds	r3, r2, r3
 8009b9c:	881b      	ldrh	r3, [r3, #0]
 8009b9e:	b29a      	uxth	r2, r3
 8009ba0:	200e      	movs	r0, #14
 8009ba2:	183b      	adds	r3, r7, r0
 8009ba4:	49a1      	ldr	r1, [pc, #644]	; (8009e2c <USB_DeactivateEndpoint+0x37c>)
 8009ba6:	400a      	ands	r2, r1
 8009ba8:	801a      	strh	r2, [r3, #0]
 8009baa:	687a      	ldr	r2, [r7, #4]
 8009bac:	683b      	ldr	r3, [r7, #0]
 8009bae:	781b      	ldrb	r3, [r3, #0]
 8009bb0:	009b      	lsls	r3, r3, #2
 8009bb2:	18d3      	adds	r3, r2, r3
 8009bb4:	183a      	adds	r2, r7, r0
 8009bb6:	8812      	ldrh	r2, [r2, #0]
 8009bb8:	499a      	ldr	r1, [pc, #616]	; (8009e24 <USB_DeactivateEndpoint+0x374>)
 8009bba:	430a      	orrs	r2, r1
 8009bbc:	b292      	uxth	r2, r2
 8009bbe:	801a      	strh	r2, [r3, #0]
 8009bc0:	e125      	b.n	8009e0e <USB_DeactivateEndpoint+0x35e>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8009bc2:	683b      	ldr	r3, [r7, #0]
 8009bc4:	785b      	ldrb	r3, [r3, #1]
 8009bc6:	2b00      	cmp	r3, #0
 8009bc8:	d000      	beq.n	8009bcc <USB_DeactivateEndpoint+0x11c>
 8009bca:	e090      	b.n	8009cee <USB_DeactivateEndpoint+0x23e>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009bcc:	687a      	ldr	r2, [r7, #4]
 8009bce:	683b      	ldr	r3, [r7, #0]
 8009bd0:	781b      	ldrb	r3, [r3, #0]
 8009bd2:	009b      	lsls	r3, r3, #2
 8009bd4:	18d2      	adds	r2, r2, r3
 8009bd6:	2120      	movs	r1, #32
 8009bd8:	187b      	adds	r3, r7, r1
 8009bda:	8812      	ldrh	r2, [r2, #0]
 8009bdc:	801a      	strh	r2, [r3, #0]
 8009bde:	187b      	adds	r3, r7, r1
 8009be0:	881a      	ldrh	r2, [r3, #0]
 8009be2:	2380      	movs	r3, #128	; 0x80
 8009be4:	01db      	lsls	r3, r3, #7
 8009be6:	4013      	ands	r3, r2
 8009be8:	d016      	beq.n	8009c18 <USB_DeactivateEndpoint+0x168>
 8009bea:	687a      	ldr	r2, [r7, #4]
 8009bec:	683b      	ldr	r3, [r7, #0]
 8009bee:	781b      	ldrb	r3, [r3, #0]
 8009bf0:	009b      	lsls	r3, r3, #2
 8009bf2:	18d3      	adds	r3, r2, r3
 8009bf4:	881b      	ldrh	r3, [r3, #0]
 8009bf6:	b29a      	uxth	r2, r3
 8009bf8:	201e      	movs	r0, #30
 8009bfa:	183b      	adds	r3, r7, r0
 8009bfc:	4986      	ldr	r1, [pc, #536]	; (8009e18 <USB_DeactivateEndpoint+0x368>)
 8009bfe:	400a      	ands	r2, r1
 8009c00:	801a      	strh	r2, [r3, #0]
 8009c02:	687a      	ldr	r2, [r7, #4]
 8009c04:	683b      	ldr	r3, [r7, #0]
 8009c06:	781b      	ldrb	r3, [r3, #0]
 8009c08:	009b      	lsls	r3, r3, #2
 8009c0a:	18d3      	adds	r3, r2, r3
 8009c0c:	183a      	adds	r2, r7, r0
 8009c0e:	8812      	ldrh	r2, [r2, #0]
 8009c10:	4985      	ldr	r1, [pc, #532]	; (8009e28 <USB_DeactivateEndpoint+0x378>)
 8009c12:	430a      	orrs	r2, r1
 8009c14:	b292      	uxth	r2, r2
 8009c16:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009c18:	687a      	ldr	r2, [r7, #4]
 8009c1a:	683b      	ldr	r3, [r7, #0]
 8009c1c:	781b      	ldrb	r3, [r3, #0]
 8009c1e:	009b      	lsls	r3, r3, #2
 8009c20:	18d2      	adds	r2, r2, r3
 8009c22:	211c      	movs	r1, #28
 8009c24:	187b      	adds	r3, r7, r1
 8009c26:	8812      	ldrh	r2, [r2, #0]
 8009c28:	801a      	strh	r2, [r3, #0]
 8009c2a:	187b      	adds	r3, r7, r1
 8009c2c:	881b      	ldrh	r3, [r3, #0]
 8009c2e:	2240      	movs	r2, #64	; 0x40
 8009c30:	4013      	ands	r3, r2
 8009c32:	d016      	beq.n	8009c62 <USB_DeactivateEndpoint+0x1b2>
 8009c34:	687a      	ldr	r2, [r7, #4]
 8009c36:	683b      	ldr	r3, [r7, #0]
 8009c38:	781b      	ldrb	r3, [r3, #0]
 8009c3a:	009b      	lsls	r3, r3, #2
 8009c3c:	18d3      	adds	r3, r2, r3
 8009c3e:	881b      	ldrh	r3, [r3, #0]
 8009c40:	b29a      	uxth	r2, r3
 8009c42:	201a      	movs	r0, #26
 8009c44:	183b      	adds	r3, r7, r0
 8009c46:	4974      	ldr	r1, [pc, #464]	; (8009e18 <USB_DeactivateEndpoint+0x368>)
 8009c48:	400a      	ands	r2, r1
 8009c4a:	801a      	strh	r2, [r3, #0]
 8009c4c:	687a      	ldr	r2, [r7, #4]
 8009c4e:	683b      	ldr	r3, [r7, #0]
 8009c50:	781b      	ldrb	r3, [r3, #0]
 8009c52:	009b      	lsls	r3, r3, #2
 8009c54:	18d3      	adds	r3, r2, r3
 8009c56:	183a      	adds	r2, r7, r0
 8009c58:	8812      	ldrh	r2, [r2, #0]
 8009c5a:	4970      	ldr	r1, [pc, #448]	; (8009e1c <USB_DeactivateEndpoint+0x36c>)
 8009c5c:	430a      	orrs	r2, r1
 8009c5e:	b292      	uxth	r2, r2
 8009c60:	801a      	strh	r2, [r3, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8009c62:	687a      	ldr	r2, [r7, #4]
 8009c64:	683b      	ldr	r3, [r7, #0]
 8009c66:	781b      	ldrb	r3, [r3, #0]
 8009c68:	009b      	lsls	r3, r3, #2
 8009c6a:	18d3      	adds	r3, r2, r3
 8009c6c:	881b      	ldrh	r3, [r3, #0]
 8009c6e:	b29a      	uxth	r2, r3
 8009c70:	2018      	movs	r0, #24
 8009c72:	183b      	adds	r3, r7, r0
 8009c74:	4968      	ldr	r1, [pc, #416]	; (8009e18 <USB_DeactivateEndpoint+0x368>)
 8009c76:	400a      	ands	r2, r1
 8009c78:	801a      	strh	r2, [r3, #0]
 8009c7a:	687a      	ldr	r2, [r7, #4]
 8009c7c:	683b      	ldr	r3, [r7, #0]
 8009c7e:	781b      	ldrb	r3, [r3, #0]
 8009c80:	009b      	lsls	r3, r3, #2
 8009c82:	18d3      	adds	r3, r2, r3
 8009c84:	183a      	adds	r2, r7, r0
 8009c86:	8812      	ldrh	r2, [r2, #0]
 8009c88:	4964      	ldr	r1, [pc, #400]	; (8009e1c <USB_DeactivateEndpoint+0x36c>)
 8009c8a:	430a      	orrs	r2, r1
 8009c8c:	b292      	uxth	r2, r2
 8009c8e:	801a      	strh	r2, [r3, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8009c90:	687a      	ldr	r2, [r7, #4]
 8009c92:	683b      	ldr	r3, [r7, #0]
 8009c94:	781b      	ldrb	r3, [r3, #0]
 8009c96:	009b      	lsls	r3, r3, #2
 8009c98:	18d3      	adds	r3, r2, r3
 8009c9a:	881b      	ldrh	r3, [r3, #0]
 8009c9c:	b29a      	uxth	r2, r3
 8009c9e:	2016      	movs	r0, #22
 8009ca0:	183b      	adds	r3, r7, r0
 8009ca2:	4962      	ldr	r1, [pc, #392]	; (8009e2c <USB_DeactivateEndpoint+0x37c>)
 8009ca4:	400a      	ands	r2, r1
 8009ca6:	801a      	strh	r2, [r3, #0]
 8009ca8:	687a      	ldr	r2, [r7, #4]
 8009caa:	683b      	ldr	r3, [r7, #0]
 8009cac:	781b      	ldrb	r3, [r3, #0]
 8009cae:	009b      	lsls	r3, r3, #2
 8009cb0:	18d3      	adds	r3, r2, r3
 8009cb2:	183a      	adds	r2, r7, r0
 8009cb4:	8812      	ldrh	r2, [r2, #0]
 8009cb6:	495b      	ldr	r1, [pc, #364]	; (8009e24 <USB_DeactivateEndpoint+0x374>)
 8009cb8:	430a      	orrs	r2, r1
 8009cba:	b292      	uxth	r2, r2
 8009cbc:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8009cbe:	687a      	ldr	r2, [r7, #4]
 8009cc0:	683b      	ldr	r3, [r7, #0]
 8009cc2:	781b      	ldrb	r3, [r3, #0]
 8009cc4:	009b      	lsls	r3, r3, #2
 8009cc6:	18d3      	adds	r3, r2, r3
 8009cc8:	881b      	ldrh	r3, [r3, #0]
 8009cca:	b29a      	uxth	r2, r3
 8009ccc:	2014      	movs	r0, #20
 8009cce:	183b      	adds	r3, r7, r0
 8009cd0:	4953      	ldr	r1, [pc, #332]	; (8009e20 <USB_DeactivateEndpoint+0x370>)
 8009cd2:	400a      	ands	r2, r1
 8009cd4:	801a      	strh	r2, [r3, #0]
 8009cd6:	687a      	ldr	r2, [r7, #4]
 8009cd8:	683b      	ldr	r3, [r7, #0]
 8009cda:	781b      	ldrb	r3, [r3, #0]
 8009cdc:	009b      	lsls	r3, r3, #2
 8009cde:	18d3      	adds	r3, r2, r3
 8009ce0:	183a      	adds	r2, r7, r0
 8009ce2:	8812      	ldrh	r2, [r2, #0]
 8009ce4:	494f      	ldr	r1, [pc, #316]	; (8009e24 <USB_DeactivateEndpoint+0x374>)
 8009ce6:	430a      	orrs	r2, r1
 8009ce8:	b292      	uxth	r2, r2
 8009cea:	801a      	strh	r2, [r3, #0]
 8009cec:	e08f      	b.n	8009e0e <USB_DeactivateEndpoint+0x35e>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009cee:	687a      	ldr	r2, [r7, #4]
 8009cf0:	683b      	ldr	r3, [r7, #0]
 8009cf2:	781b      	ldrb	r3, [r3, #0]
 8009cf4:	009b      	lsls	r3, r3, #2
 8009cf6:	18d2      	adds	r2, r2, r3
 8009cf8:	212e      	movs	r1, #46	; 0x2e
 8009cfa:	187b      	adds	r3, r7, r1
 8009cfc:	8812      	ldrh	r2, [r2, #0]
 8009cfe:	801a      	strh	r2, [r3, #0]
 8009d00:	187b      	adds	r3, r7, r1
 8009d02:	881a      	ldrh	r2, [r3, #0]
 8009d04:	2380      	movs	r3, #128	; 0x80
 8009d06:	01db      	lsls	r3, r3, #7
 8009d08:	4013      	ands	r3, r2
 8009d0a:	d016      	beq.n	8009d3a <USB_DeactivateEndpoint+0x28a>
 8009d0c:	687a      	ldr	r2, [r7, #4]
 8009d0e:	683b      	ldr	r3, [r7, #0]
 8009d10:	781b      	ldrb	r3, [r3, #0]
 8009d12:	009b      	lsls	r3, r3, #2
 8009d14:	18d3      	adds	r3, r2, r3
 8009d16:	881b      	ldrh	r3, [r3, #0]
 8009d18:	b29a      	uxth	r2, r3
 8009d1a:	202c      	movs	r0, #44	; 0x2c
 8009d1c:	183b      	adds	r3, r7, r0
 8009d1e:	493e      	ldr	r1, [pc, #248]	; (8009e18 <USB_DeactivateEndpoint+0x368>)
 8009d20:	400a      	ands	r2, r1
 8009d22:	801a      	strh	r2, [r3, #0]
 8009d24:	687a      	ldr	r2, [r7, #4]
 8009d26:	683b      	ldr	r3, [r7, #0]
 8009d28:	781b      	ldrb	r3, [r3, #0]
 8009d2a:	009b      	lsls	r3, r3, #2
 8009d2c:	18d3      	adds	r3, r2, r3
 8009d2e:	183a      	adds	r2, r7, r0
 8009d30:	8812      	ldrh	r2, [r2, #0]
 8009d32:	493d      	ldr	r1, [pc, #244]	; (8009e28 <USB_DeactivateEndpoint+0x378>)
 8009d34:	430a      	orrs	r2, r1
 8009d36:	b292      	uxth	r2, r2
 8009d38:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009d3a:	687a      	ldr	r2, [r7, #4]
 8009d3c:	683b      	ldr	r3, [r7, #0]
 8009d3e:	781b      	ldrb	r3, [r3, #0]
 8009d40:	009b      	lsls	r3, r3, #2
 8009d42:	18d2      	adds	r2, r2, r3
 8009d44:	212a      	movs	r1, #42	; 0x2a
 8009d46:	187b      	adds	r3, r7, r1
 8009d48:	8812      	ldrh	r2, [r2, #0]
 8009d4a:	801a      	strh	r2, [r3, #0]
 8009d4c:	187b      	adds	r3, r7, r1
 8009d4e:	881b      	ldrh	r3, [r3, #0]
 8009d50:	2240      	movs	r2, #64	; 0x40
 8009d52:	4013      	ands	r3, r2
 8009d54:	d016      	beq.n	8009d84 <USB_DeactivateEndpoint+0x2d4>
 8009d56:	687a      	ldr	r2, [r7, #4]
 8009d58:	683b      	ldr	r3, [r7, #0]
 8009d5a:	781b      	ldrb	r3, [r3, #0]
 8009d5c:	009b      	lsls	r3, r3, #2
 8009d5e:	18d3      	adds	r3, r2, r3
 8009d60:	881b      	ldrh	r3, [r3, #0]
 8009d62:	b29a      	uxth	r2, r3
 8009d64:	2028      	movs	r0, #40	; 0x28
 8009d66:	183b      	adds	r3, r7, r0
 8009d68:	492b      	ldr	r1, [pc, #172]	; (8009e18 <USB_DeactivateEndpoint+0x368>)
 8009d6a:	400a      	ands	r2, r1
 8009d6c:	801a      	strh	r2, [r3, #0]
 8009d6e:	687a      	ldr	r2, [r7, #4]
 8009d70:	683b      	ldr	r3, [r7, #0]
 8009d72:	781b      	ldrb	r3, [r3, #0]
 8009d74:	009b      	lsls	r3, r3, #2
 8009d76:	18d3      	adds	r3, r2, r3
 8009d78:	183a      	adds	r2, r7, r0
 8009d7a:	8812      	ldrh	r2, [r2, #0]
 8009d7c:	4927      	ldr	r1, [pc, #156]	; (8009e1c <USB_DeactivateEndpoint+0x36c>)
 8009d7e:	430a      	orrs	r2, r1
 8009d80:	b292      	uxth	r2, r2
 8009d82:	801a      	strh	r2, [r3, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8009d84:	687a      	ldr	r2, [r7, #4]
 8009d86:	683b      	ldr	r3, [r7, #0]
 8009d88:	781b      	ldrb	r3, [r3, #0]
 8009d8a:	009b      	lsls	r3, r3, #2
 8009d8c:	18d3      	adds	r3, r2, r3
 8009d8e:	881b      	ldrh	r3, [r3, #0]
 8009d90:	b29a      	uxth	r2, r3
 8009d92:	2026      	movs	r0, #38	; 0x26
 8009d94:	183b      	adds	r3, r7, r0
 8009d96:	4920      	ldr	r1, [pc, #128]	; (8009e18 <USB_DeactivateEndpoint+0x368>)
 8009d98:	400a      	ands	r2, r1
 8009d9a:	801a      	strh	r2, [r3, #0]
 8009d9c:	687a      	ldr	r2, [r7, #4]
 8009d9e:	683b      	ldr	r3, [r7, #0]
 8009da0:	781b      	ldrb	r3, [r3, #0]
 8009da2:	009b      	lsls	r3, r3, #2
 8009da4:	18d3      	adds	r3, r2, r3
 8009da6:	183a      	adds	r2, r7, r0
 8009da8:	8812      	ldrh	r2, [r2, #0]
 8009daa:	491f      	ldr	r1, [pc, #124]	; (8009e28 <USB_DeactivateEndpoint+0x378>)
 8009dac:	430a      	orrs	r2, r1
 8009dae:	b292      	uxth	r2, r2
 8009db0:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8009db2:	687a      	ldr	r2, [r7, #4]
 8009db4:	683b      	ldr	r3, [r7, #0]
 8009db6:	781b      	ldrb	r3, [r3, #0]
 8009db8:	009b      	lsls	r3, r3, #2
 8009dba:	18d3      	adds	r3, r2, r3
 8009dbc:	881b      	ldrh	r3, [r3, #0]
 8009dbe:	b29a      	uxth	r2, r3
 8009dc0:	2024      	movs	r0, #36	; 0x24
 8009dc2:	183b      	adds	r3, r7, r0
 8009dc4:	4916      	ldr	r1, [pc, #88]	; (8009e20 <USB_DeactivateEndpoint+0x370>)
 8009dc6:	400a      	ands	r2, r1
 8009dc8:	801a      	strh	r2, [r3, #0]
 8009dca:	687a      	ldr	r2, [r7, #4]
 8009dcc:	683b      	ldr	r3, [r7, #0]
 8009dce:	781b      	ldrb	r3, [r3, #0]
 8009dd0:	009b      	lsls	r3, r3, #2
 8009dd2:	18d3      	adds	r3, r2, r3
 8009dd4:	183a      	adds	r2, r7, r0
 8009dd6:	8812      	ldrh	r2, [r2, #0]
 8009dd8:	4912      	ldr	r1, [pc, #72]	; (8009e24 <USB_DeactivateEndpoint+0x374>)
 8009dda:	430a      	orrs	r2, r1
 8009ddc:	b292      	uxth	r2, r2
 8009dde:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8009de0:	687a      	ldr	r2, [r7, #4]
 8009de2:	683b      	ldr	r3, [r7, #0]
 8009de4:	781b      	ldrb	r3, [r3, #0]
 8009de6:	009b      	lsls	r3, r3, #2
 8009de8:	18d3      	adds	r3, r2, r3
 8009dea:	881b      	ldrh	r3, [r3, #0]
 8009dec:	b29a      	uxth	r2, r3
 8009dee:	2022      	movs	r0, #34	; 0x22
 8009df0:	183b      	adds	r3, r7, r0
 8009df2:	490e      	ldr	r1, [pc, #56]	; (8009e2c <USB_DeactivateEndpoint+0x37c>)
 8009df4:	400a      	ands	r2, r1
 8009df6:	801a      	strh	r2, [r3, #0]
 8009df8:	687a      	ldr	r2, [r7, #4]
 8009dfa:	683b      	ldr	r3, [r7, #0]
 8009dfc:	781b      	ldrb	r3, [r3, #0]
 8009dfe:	009b      	lsls	r3, r3, #2
 8009e00:	18d3      	adds	r3, r2, r3
 8009e02:	183a      	adds	r2, r7, r0
 8009e04:	8812      	ldrh	r2, [r2, #0]
 8009e06:	4907      	ldr	r1, [pc, #28]	; (8009e24 <USB_DeactivateEndpoint+0x374>)
 8009e08:	430a      	orrs	r2, r1
 8009e0a:	b292      	uxth	r2, r2
 8009e0c:	801a      	strh	r2, [r3, #0]
    }
  }

  return HAL_OK;
 8009e0e:	2300      	movs	r3, #0
}
 8009e10:	0018      	movs	r0, r3
 8009e12:	46bd      	mov	sp, r7
 8009e14:	b00c      	add	sp, #48	; 0x30
 8009e16:	bd80      	pop	{r7, pc}
 8009e18:	ffff8f8f 	.word	0xffff8f8f
 8009e1c:	ffff80c0 	.word	0xffff80c0
 8009e20:	ffff8fbf 	.word	0xffff8fbf
 8009e24:	ffff8080 	.word	0xffff8080
 8009e28:	ffffc080 	.word	0xffffc080
 8009e2c:	ffffbf8f 	.word	0xffffbf8f

08009e30 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8009e30:	b590      	push	{r4, r7, lr}
 8009e32:	b0c3      	sub	sp, #268	; 0x10c
 8009e34:	af00      	add	r7, sp, #0
 8009e36:	6078      	str	r0, [r7, #4]
 8009e38:	6039      	str	r1, [r7, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8009e3a:	683b      	ldr	r3, [r7, #0]
 8009e3c:	785b      	ldrb	r3, [r3, #1]
 8009e3e:	2b01      	cmp	r3, #1
 8009e40:	d001      	beq.n	8009e46 <USB_EPStartXfer+0x16>
 8009e42:	f000 fcef 	bl	800a824 <USB_EPStartXfer+0x9f4>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8009e46:	683b      	ldr	r3, [r7, #0]
 8009e48:	699a      	ldr	r2, [r3, #24]
 8009e4a:	683b      	ldr	r3, [r7, #0]
 8009e4c:	691b      	ldr	r3, [r3, #16]
 8009e4e:	429a      	cmp	r2, r3
 8009e50:	d905      	bls.n	8009e5e <USB_EPStartXfer+0x2e>
    {
      len = ep->maxpacket;
 8009e52:	683b      	ldr	r3, [r7, #0]
 8009e54:	691b      	ldr	r3, [r3, #16]
 8009e56:	1d7a      	adds	r2, r7, #5
 8009e58:	32ff      	adds	r2, #255	; 0xff
 8009e5a:	6013      	str	r3, [r2, #0]
 8009e5c:	e004      	b.n	8009e68 <USB_EPStartXfer+0x38>
    }
    else
    {
      len = ep->xfer_len;
 8009e5e:	683b      	ldr	r3, [r7, #0]
 8009e60:	699b      	ldr	r3, [r3, #24]
 8009e62:	1d7a      	adds	r2, r7, #5
 8009e64:	32ff      	adds	r2, #255	; 0xff
 8009e66:	6013      	str	r3, [r2, #0]
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8009e68:	683b      	ldr	r3, [r7, #0]
 8009e6a:	7b1b      	ldrb	r3, [r3, #12]
 8009e6c:	2b00      	cmp	r3, #0
 8009e6e:	d125      	bne.n	8009ebc <USB_EPStartXfer+0x8c>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8009e70:	683b      	ldr	r3, [r7, #0]
 8009e72:	6959      	ldr	r1, [r3, #20]
 8009e74:	683b      	ldr	r3, [r7, #0]
 8009e76:	88da      	ldrh	r2, [r3, #6]
 8009e78:	1d7b      	adds	r3, r7, #5
 8009e7a:	33ff      	adds	r3, #255	; 0xff
 8009e7c:	681b      	ldr	r3, [r3, #0]
 8009e7e:	b29b      	uxth	r3, r3
 8009e80:	6878      	ldr	r0, [r7, #4]
 8009e82:	f001 f9c9 	bl	800b218 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	613b      	str	r3, [r7, #16]
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	2250      	movs	r2, #80	; 0x50
 8009e8e:	5a9b      	ldrh	r3, [r3, r2]
 8009e90:	b29b      	uxth	r3, r3
 8009e92:	001a      	movs	r2, r3
 8009e94:	693b      	ldr	r3, [r7, #16]
 8009e96:	189b      	adds	r3, r3, r2
 8009e98:	613b      	str	r3, [r7, #16]
 8009e9a:	683b      	ldr	r3, [r7, #0]
 8009e9c:	781b      	ldrb	r3, [r3, #0]
 8009e9e:	00da      	lsls	r2, r3, #3
 8009ea0:	693b      	ldr	r3, [r7, #16]
 8009ea2:	18d3      	adds	r3, r2, r3
 8009ea4:	4acc      	ldr	r2, [pc, #816]	; (800a1d8 <USB_EPStartXfer+0x3a8>)
 8009ea6:	4694      	mov	ip, r2
 8009ea8:	4463      	add	r3, ip
 8009eaa:	60fb      	str	r3, [r7, #12]
 8009eac:	1d7b      	adds	r3, r7, #5
 8009eae:	33ff      	adds	r3, #255	; 0xff
 8009eb0:	681b      	ldr	r3, [r3, #0]
 8009eb2:	b29a      	uxth	r2, r3
 8009eb4:	68fb      	ldr	r3, [r7, #12]
 8009eb6:	801a      	strh	r2, [r3, #0]
 8009eb8:	f000 fc8f 	bl	800a7da <USB_EPStartXfer+0x9aa>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8009ebc:	683b      	ldr	r3, [r7, #0]
 8009ebe:	78db      	ldrb	r3, [r3, #3]
 8009ec0:	2b02      	cmp	r3, #2
 8009ec2:	d000      	beq.n	8009ec6 <USB_EPStartXfer+0x96>
 8009ec4:	e33a      	b.n	800a53c <USB_EPStartXfer+0x70c>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8009ec6:	683b      	ldr	r3, [r7, #0]
 8009ec8:	6a1a      	ldr	r2, [r3, #32]
 8009eca:	683b      	ldr	r3, [r7, #0]
 8009ecc:	691b      	ldr	r3, [r3, #16]
 8009ece:	429a      	cmp	r2, r3
 8009ed0:	d800      	bhi.n	8009ed4 <USB_EPStartXfer+0xa4>
 8009ed2:	e2df      	b.n	800a494 <USB_EPStartXfer+0x664>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8009ed4:	687a      	ldr	r2, [r7, #4]
 8009ed6:	683b      	ldr	r3, [r7, #0]
 8009ed8:	781b      	ldrb	r3, [r3, #0]
 8009eda:	009b      	lsls	r3, r3, #2
 8009edc:	18d3      	adds	r3, r2, r3
 8009ede:	881b      	ldrh	r3, [r3, #0]
 8009ee0:	b29a      	uxth	r2, r3
 8009ee2:	2056      	movs	r0, #86	; 0x56
 8009ee4:	183b      	adds	r3, r7, r0
 8009ee6:	49bd      	ldr	r1, [pc, #756]	; (800a1dc <USB_EPStartXfer+0x3ac>)
 8009ee8:	400a      	ands	r2, r1
 8009eea:	801a      	strh	r2, [r3, #0]
 8009eec:	687a      	ldr	r2, [r7, #4]
 8009eee:	683b      	ldr	r3, [r7, #0]
 8009ef0:	781b      	ldrb	r3, [r3, #0]
 8009ef2:	009b      	lsls	r3, r3, #2
 8009ef4:	18d3      	adds	r3, r2, r3
 8009ef6:	183a      	adds	r2, r7, r0
 8009ef8:	8812      	ldrh	r2, [r2, #0]
 8009efa:	49b9      	ldr	r1, [pc, #740]	; (800a1e0 <USB_EPStartXfer+0x3b0>)
 8009efc:	430a      	orrs	r2, r1
 8009efe:	b292      	uxth	r2, r2
 8009f00:	801a      	strh	r2, [r3, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8009f02:	683b      	ldr	r3, [r7, #0]
 8009f04:	6a1a      	ldr	r2, [r3, #32]
 8009f06:	1d7b      	adds	r3, r7, #5
 8009f08:	33ff      	adds	r3, #255	; 0xff
 8009f0a:	681b      	ldr	r3, [r3, #0]
 8009f0c:	1ad2      	subs	r2, r2, r3
 8009f0e:	683b      	ldr	r3, [r7, #0]
 8009f10:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8009f12:	687a      	ldr	r2, [r7, #4]
 8009f14:	683b      	ldr	r3, [r7, #0]
 8009f16:	781b      	ldrb	r3, [r3, #0]
 8009f18:	009b      	lsls	r3, r3, #2
 8009f1a:	18d3      	adds	r3, r2, r3
 8009f1c:	881b      	ldrh	r3, [r3, #0]
 8009f1e:	b29b      	uxth	r3, r3
 8009f20:	001a      	movs	r2, r3
 8009f22:	2340      	movs	r3, #64	; 0x40
 8009f24:	4013      	ands	r3, r2
 8009f26:	d100      	bne.n	8009f2a <USB_EPStartXfer+0xfa>
 8009f28:	e162      	b.n	800a1f0 <USB_EPStartXfer+0x3c0>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	633b      	str	r3, [r7, #48]	; 0x30
 8009f2e:	683b      	ldr	r3, [r7, #0]
 8009f30:	785b      	ldrb	r3, [r3, #1]
 8009f32:	2b00      	cmp	r3, #0
 8009f34:	d16a      	bne.n	800a00c <USB_EPStartXfer+0x1dc>
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	62bb      	str	r3, [r7, #40]	; 0x28
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	2250      	movs	r2, #80	; 0x50
 8009f3e:	5a9b      	ldrh	r3, [r3, r2]
 8009f40:	b29b      	uxth	r3, r3
 8009f42:	001a      	movs	r2, r3
 8009f44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f46:	189b      	adds	r3, r3, r2
 8009f48:	62bb      	str	r3, [r7, #40]	; 0x28
 8009f4a:	683b      	ldr	r3, [r7, #0]
 8009f4c:	781b      	ldrb	r3, [r3, #0]
 8009f4e:	00da      	lsls	r2, r3, #3
 8009f50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f52:	18d3      	adds	r3, r2, r3
 8009f54:	4aa3      	ldr	r2, [pc, #652]	; (800a1e4 <USB_EPStartXfer+0x3b4>)
 8009f56:	4694      	mov	ip, r2
 8009f58:	4463      	add	r3, ip
 8009f5a:	627b      	str	r3, [r7, #36]	; 0x24
 8009f5c:	1d7b      	adds	r3, r7, #5
 8009f5e:	33ff      	adds	r3, #255	; 0xff
 8009f60:	681b      	ldr	r3, [r3, #0]
 8009f62:	2b00      	cmp	r3, #0
 8009f64:	d110      	bne.n	8009f88 <USB_EPStartXfer+0x158>
 8009f66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f68:	881b      	ldrh	r3, [r3, #0]
 8009f6a:	b29b      	uxth	r3, r3
 8009f6c:	4a9e      	ldr	r2, [pc, #632]	; (800a1e8 <USB_EPStartXfer+0x3b8>)
 8009f6e:	4013      	ands	r3, r2
 8009f70:	b29a      	uxth	r2, r3
 8009f72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f74:	801a      	strh	r2, [r3, #0]
 8009f76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f78:	881b      	ldrh	r3, [r3, #0]
 8009f7a:	b29b      	uxth	r3, r3
 8009f7c:	4a9b      	ldr	r2, [pc, #620]	; (800a1ec <USB_EPStartXfer+0x3bc>)
 8009f7e:	4313      	orrs	r3, r2
 8009f80:	b29a      	uxth	r2, r3
 8009f82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f84:	801a      	strh	r2, [r3, #0]
 8009f86:	e05c      	b.n	800a042 <USB_EPStartXfer+0x212>
 8009f88:	1d7b      	adds	r3, r7, #5
 8009f8a:	33ff      	adds	r3, #255	; 0xff
 8009f8c:	681b      	ldr	r3, [r3, #0]
 8009f8e:	2b3e      	cmp	r3, #62	; 0x3e
 8009f90:	d81c      	bhi.n	8009fcc <USB_EPStartXfer+0x19c>
 8009f92:	1d7b      	adds	r3, r7, #5
 8009f94:	33ff      	adds	r3, #255	; 0xff
 8009f96:	681b      	ldr	r3, [r3, #0]
 8009f98:	085b      	lsrs	r3, r3, #1
 8009f9a:	1c7a      	adds	r2, r7, #1
 8009f9c:	32ff      	adds	r2, #255	; 0xff
 8009f9e:	6013      	str	r3, [r2, #0]
 8009fa0:	1d7b      	adds	r3, r7, #5
 8009fa2:	33ff      	adds	r3, #255	; 0xff
 8009fa4:	681b      	ldr	r3, [r3, #0]
 8009fa6:	2201      	movs	r2, #1
 8009fa8:	4013      	ands	r3, r2
 8009faa:	d006      	beq.n	8009fba <USB_EPStartXfer+0x18a>
 8009fac:	1c7b      	adds	r3, r7, #1
 8009fae:	33ff      	adds	r3, #255	; 0xff
 8009fb0:	681b      	ldr	r3, [r3, #0]
 8009fb2:	3301      	adds	r3, #1
 8009fb4:	1c7a      	adds	r2, r7, #1
 8009fb6:	32ff      	adds	r2, #255	; 0xff
 8009fb8:	6013      	str	r3, [r2, #0]
 8009fba:	1c7b      	adds	r3, r7, #1
 8009fbc:	33ff      	adds	r3, #255	; 0xff
 8009fbe:	681b      	ldr	r3, [r3, #0]
 8009fc0:	b29b      	uxth	r3, r3
 8009fc2:	029b      	lsls	r3, r3, #10
 8009fc4:	b29a      	uxth	r2, r3
 8009fc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fc8:	801a      	strh	r2, [r3, #0]
 8009fca:	e03a      	b.n	800a042 <USB_EPStartXfer+0x212>
 8009fcc:	1d7b      	adds	r3, r7, #5
 8009fce:	33ff      	adds	r3, #255	; 0xff
 8009fd0:	681b      	ldr	r3, [r3, #0]
 8009fd2:	095b      	lsrs	r3, r3, #5
 8009fd4:	1c7a      	adds	r2, r7, #1
 8009fd6:	32ff      	adds	r2, #255	; 0xff
 8009fd8:	6013      	str	r3, [r2, #0]
 8009fda:	1d7b      	adds	r3, r7, #5
 8009fdc:	33ff      	adds	r3, #255	; 0xff
 8009fde:	681b      	ldr	r3, [r3, #0]
 8009fe0:	221f      	movs	r2, #31
 8009fe2:	4013      	ands	r3, r2
 8009fe4:	d106      	bne.n	8009ff4 <USB_EPStartXfer+0x1c4>
 8009fe6:	1c7b      	adds	r3, r7, #1
 8009fe8:	33ff      	adds	r3, #255	; 0xff
 8009fea:	681b      	ldr	r3, [r3, #0]
 8009fec:	3b01      	subs	r3, #1
 8009fee:	1c7a      	adds	r2, r7, #1
 8009ff0:	32ff      	adds	r2, #255	; 0xff
 8009ff2:	6013      	str	r3, [r2, #0]
 8009ff4:	1c7b      	adds	r3, r7, #1
 8009ff6:	33ff      	adds	r3, #255	; 0xff
 8009ff8:	681b      	ldr	r3, [r3, #0]
 8009ffa:	b29b      	uxth	r3, r3
 8009ffc:	029b      	lsls	r3, r3, #10
 8009ffe:	b29b      	uxth	r3, r3
 800a000:	4a7a      	ldr	r2, [pc, #488]	; (800a1ec <USB_EPStartXfer+0x3bc>)
 800a002:	4313      	orrs	r3, r2
 800a004:	b29a      	uxth	r2, r3
 800a006:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a008:	801a      	strh	r2, [r3, #0]
 800a00a:	e01a      	b.n	800a042 <USB_EPStartXfer+0x212>
 800a00c:	683b      	ldr	r3, [r7, #0]
 800a00e:	785b      	ldrb	r3, [r3, #1]
 800a010:	2b01      	cmp	r3, #1
 800a012:	d116      	bne.n	800a042 <USB_EPStartXfer+0x212>
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	2250      	movs	r2, #80	; 0x50
 800a018:	5a9b      	ldrh	r3, [r3, r2]
 800a01a:	b29b      	uxth	r3, r3
 800a01c:	001a      	movs	r2, r3
 800a01e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a020:	189b      	adds	r3, r3, r2
 800a022:	633b      	str	r3, [r7, #48]	; 0x30
 800a024:	683b      	ldr	r3, [r7, #0]
 800a026:	781b      	ldrb	r3, [r3, #0]
 800a028:	00da      	lsls	r2, r3, #3
 800a02a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a02c:	18d3      	adds	r3, r2, r3
 800a02e:	4a6d      	ldr	r2, [pc, #436]	; (800a1e4 <USB_EPStartXfer+0x3b4>)
 800a030:	4694      	mov	ip, r2
 800a032:	4463      	add	r3, ip
 800a034:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a036:	1d7b      	adds	r3, r7, #5
 800a038:	33ff      	adds	r3, #255	; 0xff
 800a03a:	681b      	ldr	r3, [r3, #0]
 800a03c:	b29a      	uxth	r2, r3
 800a03e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a040:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800a042:	2076      	movs	r0, #118	; 0x76
 800a044:	183b      	adds	r3, r7, r0
 800a046:	683a      	ldr	r2, [r7, #0]
 800a048:	8952      	ldrh	r2, [r2, #10]
 800a04a:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a04c:	683b      	ldr	r3, [r7, #0]
 800a04e:	6959      	ldr	r1, [r3, #20]
 800a050:	1d7b      	adds	r3, r7, #5
 800a052:	33ff      	adds	r3, #255	; 0xff
 800a054:	681b      	ldr	r3, [r3, #0]
 800a056:	b29c      	uxth	r4, r3
 800a058:	183b      	adds	r3, r7, r0
 800a05a:	881a      	ldrh	r2, [r3, #0]
 800a05c:	6878      	ldr	r0, [r7, #4]
 800a05e:	0023      	movs	r3, r4
 800a060:	f001 f8da 	bl	800b218 <USB_WritePMA>
            ep->xfer_buff += len;
 800a064:	683b      	ldr	r3, [r7, #0]
 800a066:	695a      	ldr	r2, [r3, #20]
 800a068:	1d7b      	adds	r3, r7, #5
 800a06a:	33ff      	adds	r3, #255	; 0xff
 800a06c:	681b      	ldr	r3, [r3, #0]
 800a06e:	18d2      	adds	r2, r2, r3
 800a070:	683b      	ldr	r3, [r7, #0]
 800a072:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800a074:	683b      	ldr	r3, [r7, #0]
 800a076:	6a1a      	ldr	r2, [r3, #32]
 800a078:	683b      	ldr	r3, [r7, #0]
 800a07a:	691b      	ldr	r3, [r3, #16]
 800a07c:	429a      	cmp	r2, r3
 800a07e:	d908      	bls.n	800a092 <USB_EPStartXfer+0x262>
            {
              ep->xfer_len_db -= len;
 800a080:	683b      	ldr	r3, [r7, #0]
 800a082:	6a1a      	ldr	r2, [r3, #32]
 800a084:	1d7b      	adds	r3, r7, #5
 800a086:	33ff      	adds	r3, #255	; 0xff
 800a088:	681b      	ldr	r3, [r3, #0]
 800a08a:	1ad2      	subs	r2, r2, r3
 800a08c:	683b      	ldr	r3, [r7, #0]
 800a08e:	621a      	str	r2, [r3, #32]
 800a090:	e007      	b.n	800a0a2 <USB_EPStartXfer+0x272>
            }
            else
            {
              len = ep->xfer_len_db;
 800a092:	683b      	ldr	r3, [r7, #0]
 800a094:	6a1b      	ldr	r3, [r3, #32]
 800a096:	1d7a      	adds	r2, r7, #5
 800a098:	32ff      	adds	r2, #255	; 0xff
 800a09a:	6013      	str	r3, [r2, #0]
              ep->xfer_len_db = 0U;
 800a09c:	683b      	ldr	r3, [r7, #0]
 800a09e:	2200      	movs	r2, #0
 800a0a0:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800a0a2:	683b      	ldr	r3, [r7, #0]
 800a0a4:	785b      	ldrb	r3, [r3, #1]
 800a0a6:	2b00      	cmp	r3, #0
 800a0a8:	d166      	bne.n	800a178 <USB_EPStartXfer+0x348>
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	61bb      	str	r3, [r7, #24]
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	2250      	movs	r2, #80	; 0x50
 800a0b2:	5a9b      	ldrh	r3, [r3, r2]
 800a0b4:	b29b      	uxth	r3, r3
 800a0b6:	001a      	movs	r2, r3
 800a0b8:	69bb      	ldr	r3, [r7, #24]
 800a0ba:	189b      	adds	r3, r3, r2
 800a0bc:	61bb      	str	r3, [r7, #24]
 800a0be:	683b      	ldr	r3, [r7, #0]
 800a0c0:	781b      	ldrb	r3, [r3, #0]
 800a0c2:	00da      	lsls	r2, r3, #3
 800a0c4:	69bb      	ldr	r3, [r7, #24]
 800a0c6:	18d3      	adds	r3, r2, r3
 800a0c8:	4a43      	ldr	r2, [pc, #268]	; (800a1d8 <USB_EPStartXfer+0x3a8>)
 800a0ca:	4694      	mov	ip, r2
 800a0cc:	4463      	add	r3, ip
 800a0ce:	617b      	str	r3, [r7, #20]
 800a0d0:	1d7b      	adds	r3, r7, #5
 800a0d2:	33ff      	adds	r3, #255	; 0xff
 800a0d4:	681b      	ldr	r3, [r3, #0]
 800a0d6:	2b00      	cmp	r3, #0
 800a0d8:	d110      	bne.n	800a0fc <USB_EPStartXfer+0x2cc>
 800a0da:	697b      	ldr	r3, [r7, #20]
 800a0dc:	881b      	ldrh	r3, [r3, #0]
 800a0de:	b29b      	uxth	r3, r3
 800a0e0:	4a41      	ldr	r2, [pc, #260]	; (800a1e8 <USB_EPStartXfer+0x3b8>)
 800a0e2:	4013      	ands	r3, r2
 800a0e4:	b29a      	uxth	r2, r3
 800a0e6:	697b      	ldr	r3, [r7, #20]
 800a0e8:	801a      	strh	r2, [r3, #0]
 800a0ea:	697b      	ldr	r3, [r7, #20]
 800a0ec:	881b      	ldrh	r3, [r3, #0]
 800a0ee:	b29b      	uxth	r3, r3
 800a0f0:	4a3e      	ldr	r2, [pc, #248]	; (800a1ec <USB_EPStartXfer+0x3bc>)
 800a0f2:	4313      	orrs	r3, r2
 800a0f4:	b29a      	uxth	r2, r3
 800a0f6:	697b      	ldr	r3, [r7, #20]
 800a0f8:	801a      	strh	r2, [r3, #0]
 800a0fa:	e05a      	b.n	800a1b2 <USB_EPStartXfer+0x382>
 800a0fc:	1d7b      	adds	r3, r7, #5
 800a0fe:	33ff      	adds	r3, #255	; 0xff
 800a100:	681b      	ldr	r3, [r3, #0]
 800a102:	2b3e      	cmp	r3, #62	; 0x3e
 800a104:	d81a      	bhi.n	800a13c <USB_EPStartXfer+0x30c>
 800a106:	1d7b      	adds	r3, r7, #5
 800a108:	33ff      	adds	r3, #255	; 0xff
 800a10a:	681b      	ldr	r3, [r3, #0]
 800a10c:	085b      	lsrs	r3, r3, #1
 800a10e:	21fc      	movs	r1, #252	; 0xfc
 800a110:	187a      	adds	r2, r7, r1
 800a112:	6013      	str	r3, [r2, #0]
 800a114:	1d7b      	adds	r3, r7, #5
 800a116:	33ff      	adds	r3, #255	; 0xff
 800a118:	681b      	ldr	r3, [r3, #0]
 800a11a:	2201      	movs	r2, #1
 800a11c:	4013      	ands	r3, r2
 800a11e:	d004      	beq.n	800a12a <USB_EPStartXfer+0x2fa>
 800a120:	187b      	adds	r3, r7, r1
 800a122:	681b      	ldr	r3, [r3, #0]
 800a124:	3301      	adds	r3, #1
 800a126:	187a      	adds	r2, r7, r1
 800a128:	6013      	str	r3, [r2, #0]
 800a12a:	23fc      	movs	r3, #252	; 0xfc
 800a12c:	18fb      	adds	r3, r7, r3
 800a12e:	681b      	ldr	r3, [r3, #0]
 800a130:	b29b      	uxth	r3, r3
 800a132:	029b      	lsls	r3, r3, #10
 800a134:	b29a      	uxth	r2, r3
 800a136:	697b      	ldr	r3, [r7, #20]
 800a138:	801a      	strh	r2, [r3, #0]
 800a13a:	e03a      	b.n	800a1b2 <USB_EPStartXfer+0x382>
 800a13c:	1d7b      	adds	r3, r7, #5
 800a13e:	33ff      	adds	r3, #255	; 0xff
 800a140:	681b      	ldr	r3, [r3, #0]
 800a142:	095b      	lsrs	r3, r3, #5
 800a144:	21fc      	movs	r1, #252	; 0xfc
 800a146:	187a      	adds	r2, r7, r1
 800a148:	6013      	str	r3, [r2, #0]
 800a14a:	1d7b      	adds	r3, r7, #5
 800a14c:	33ff      	adds	r3, #255	; 0xff
 800a14e:	681b      	ldr	r3, [r3, #0]
 800a150:	221f      	movs	r2, #31
 800a152:	4013      	ands	r3, r2
 800a154:	d104      	bne.n	800a160 <USB_EPStartXfer+0x330>
 800a156:	187b      	adds	r3, r7, r1
 800a158:	681b      	ldr	r3, [r3, #0]
 800a15a:	3b01      	subs	r3, #1
 800a15c:	187a      	adds	r2, r7, r1
 800a15e:	6013      	str	r3, [r2, #0]
 800a160:	23fc      	movs	r3, #252	; 0xfc
 800a162:	18fb      	adds	r3, r7, r3
 800a164:	681b      	ldr	r3, [r3, #0]
 800a166:	b29b      	uxth	r3, r3
 800a168:	029b      	lsls	r3, r3, #10
 800a16a:	b29b      	uxth	r3, r3
 800a16c:	4a1f      	ldr	r2, [pc, #124]	; (800a1ec <USB_EPStartXfer+0x3bc>)
 800a16e:	4313      	orrs	r3, r2
 800a170:	b29a      	uxth	r2, r3
 800a172:	697b      	ldr	r3, [r7, #20]
 800a174:	801a      	strh	r2, [r3, #0]
 800a176:	e01c      	b.n	800a1b2 <USB_EPStartXfer+0x382>
 800a178:	683b      	ldr	r3, [r7, #0]
 800a17a:	785b      	ldrb	r3, [r3, #1]
 800a17c:	2b01      	cmp	r3, #1
 800a17e:	d118      	bne.n	800a1b2 <USB_EPStartXfer+0x382>
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	623b      	str	r3, [r7, #32]
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	2250      	movs	r2, #80	; 0x50
 800a188:	5a9b      	ldrh	r3, [r3, r2]
 800a18a:	b29b      	uxth	r3, r3
 800a18c:	001a      	movs	r2, r3
 800a18e:	6a3b      	ldr	r3, [r7, #32]
 800a190:	189b      	adds	r3, r3, r2
 800a192:	623b      	str	r3, [r7, #32]
 800a194:	683b      	ldr	r3, [r7, #0]
 800a196:	781b      	ldrb	r3, [r3, #0]
 800a198:	00da      	lsls	r2, r3, #3
 800a19a:	6a3b      	ldr	r3, [r7, #32]
 800a19c:	18d3      	adds	r3, r2, r3
 800a19e:	4a0e      	ldr	r2, [pc, #56]	; (800a1d8 <USB_EPStartXfer+0x3a8>)
 800a1a0:	4694      	mov	ip, r2
 800a1a2:	4463      	add	r3, ip
 800a1a4:	61fb      	str	r3, [r7, #28]
 800a1a6:	1d7b      	adds	r3, r7, #5
 800a1a8:	33ff      	adds	r3, #255	; 0xff
 800a1aa:	681b      	ldr	r3, [r3, #0]
 800a1ac:	b29a      	uxth	r2, r3
 800a1ae:	69fb      	ldr	r3, [r7, #28]
 800a1b0:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800a1b2:	2076      	movs	r0, #118	; 0x76
 800a1b4:	183b      	adds	r3, r7, r0
 800a1b6:	683a      	ldr	r2, [r7, #0]
 800a1b8:	8912      	ldrh	r2, [r2, #8]
 800a1ba:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a1bc:	683b      	ldr	r3, [r7, #0]
 800a1be:	6959      	ldr	r1, [r3, #20]
 800a1c0:	1d7b      	adds	r3, r7, #5
 800a1c2:	33ff      	adds	r3, #255	; 0xff
 800a1c4:	681b      	ldr	r3, [r3, #0]
 800a1c6:	b29c      	uxth	r4, r3
 800a1c8:	183b      	adds	r3, r7, r0
 800a1ca:	881a      	ldrh	r2, [r3, #0]
 800a1cc:	6878      	ldr	r0, [r7, #4]
 800a1ce:	0023      	movs	r3, r4
 800a1d0:	f001 f822 	bl	800b218 <USB_WritePMA>
 800a1d4:	e301      	b.n	800a7da <USB_EPStartXfer+0x9aa>
 800a1d6:	46c0      	nop			; (mov r8, r8)
 800a1d8:	00000402 	.word	0x00000402
 800a1dc:	ffff8f8f 	.word	0xffff8f8f
 800a1e0:	ffff8180 	.word	0xffff8180
 800a1e4:	00000406 	.word	0x00000406
 800a1e8:	ffff83ff 	.word	0xffff83ff
 800a1ec:	ffff8000 	.word	0xffff8000
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800a1f0:	683b      	ldr	r3, [r7, #0]
 800a1f2:	785b      	ldrb	r3, [r3, #1]
 800a1f4:	2b00      	cmp	r3, #0
 800a1f6:	d166      	bne.n	800a2c6 <USB_EPStartXfer+0x496>
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	64bb      	str	r3, [r7, #72]	; 0x48
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	2250      	movs	r2, #80	; 0x50
 800a200:	5a9b      	ldrh	r3, [r3, r2]
 800a202:	b29b      	uxth	r3, r3
 800a204:	001a      	movs	r2, r3
 800a206:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a208:	189b      	adds	r3, r3, r2
 800a20a:	64bb      	str	r3, [r7, #72]	; 0x48
 800a20c:	683b      	ldr	r3, [r7, #0]
 800a20e:	781b      	ldrb	r3, [r3, #0]
 800a210:	00da      	lsls	r2, r3, #3
 800a212:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a214:	18d3      	adds	r3, r2, r3
 800a216:	4ac3      	ldr	r2, [pc, #780]	; (800a524 <USB_EPStartXfer+0x6f4>)
 800a218:	4694      	mov	ip, r2
 800a21a:	4463      	add	r3, ip
 800a21c:	647b      	str	r3, [r7, #68]	; 0x44
 800a21e:	1d7b      	adds	r3, r7, #5
 800a220:	33ff      	adds	r3, #255	; 0xff
 800a222:	681b      	ldr	r3, [r3, #0]
 800a224:	2b00      	cmp	r3, #0
 800a226:	d110      	bne.n	800a24a <USB_EPStartXfer+0x41a>
 800a228:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a22a:	881b      	ldrh	r3, [r3, #0]
 800a22c:	b29b      	uxth	r3, r3
 800a22e:	4abe      	ldr	r2, [pc, #760]	; (800a528 <USB_EPStartXfer+0x6f8>)
 800a230:	4013      	ands	r3, r2
 800a232:	b29a      	uxth	r2, r3
 800a234:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a236:	801a      	strh	r2, [r3, #0]
 800a238:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a23a:	881b      	ldrh	r3, [r3, #0]
 800a23c:	b29b      	uxth	r3, r3
 800a23e:	4abb      	ldr	r2, [pc, #748]	; (800a52c <USB_EPStartXfer+0x6fc>)
 800a240:	4313      	orrs	r3, r2
 800a242:	b29a      	uxth	r2, r3
 800a244:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a246:	801a      	strh	r2, [r3, #0]
 800a248:	e05a      	b.n	800a300 <USB_EPStartXfer+0x4d0>
 800a24a:	1d7b      	adds	r3, r7, #5
 800a24c:	33ff      	adds	r3, #255	; 0xff
 800a24e:	681b      	ldr	r3, [r3, #0]
 800a250:	2b3e      	cmp	r3, #62	; 0x3e
 800a252:	d81a      	bhi.n	800a28a <USB_EPStartXfer+0x45a>
 800a254:	1d7b      	adds	r3, r7, #5
 800a256:	33ff      	adds	r3, #255	; 0xff
 800a258:	681b      	ldr	r3, [r3, #0]
 800a25a:	085b      	lsrs	r3, r3, #1
 800a25c:	21f8      	movs	r1, #248	; 0xf8
 800a25e:	187a      	adds	r2, r7, r1
 800a260:	6013      	str	r3, [r2, #0]
 800a262:	1d7b      	adds	r3, r7, #5
 800a264:	33ff      	adds	r3, #255	; 0xff
 800a266:	681b      	ldr	r3, [r3, #0]
 800a268:	2201      	movs	r2, #1
 800a26a:	4013      	ands	r3, r2
 800a26c:	d004      	beq.n	800a278 <USB_EPStartXfer+0x448>
 800a26e:	187b      	adds	r3, r7, r1
 800a270:	681b      	ldr	r3, [r3, #0]
 800a272:	3301      	adds	r3, #1
 800a274:	187a      	adds	r2, r7, r1
 800a276:	6013      	str	r3, [r2, #0]
 800a278:	23f8      	movs	r3, #248	; 0xf8
 800a27a:	18fb      	adds	r3, r7, r3
 800a27c:	681b      	ldr	r3, [r3, #0]
 800a27e:	b29b      	uxth	r3, r3
 800a280:	029b      	lsls	r3, r3, #10
 800a282:	b29a      	uxth	r2, r3
 800a284:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a286:	801a      	strh	r2, [r3, #0]
 800a288:	e03a      	b.n	800a300 <USB_EPStartXfer+0x4d0>
 800a28a:	1d7b      	adds	r3, r7, #5
 800a28c:	33ff      	adds	r3, #255	; 0xff
 800a28e:	681b      	ldr	r3, [r3, #0]
 800a290:	095b      	lsrs	r3, r3, #5
 800a292:	21f8      	movs	r1, #248	; 0xf8
 800a294:	187a      	adds	r2, r7, r1
 800a296:	6013      	str	r3, [r2, #0]
 800a298:	1d7b      	adds	r3, r7, #5
 800a29a:	33ff      	adds	r3, #255	; 0xff
 800a29c:	681b      	ldr	r3, [r3, #0]
 800a29e:	221f      	movs	r2, #31
 800a2a0:	4013      	ands	r3, r2
 800a2a2:	d104      	bne.n	800a2ae <USB_EPStartXfer+0x47e>
 800a2a4:	187b      	adds	r3, r7, r1
 800a2a6:	681b      	ldr	r3, [r3, #0]
 800a2a8:	3b01      	subs	r3, #1
 800a2aa:	187a      	adds	r2, r7, r1
 800a2ac:	6013      	str	r3, [r2, #0]
 800a2ae:	23f8      	movs	r3, #248	; 0xf8
 800a2b0:	18fb      	adds	r3, r7, r3
 800a2b2:	681b      	ldr	r3, [r3, #0]
 800a2b4:	b29b      	uxth	r3, r3
 800a2b6:	029b      	lsls	r3, r3, #10
 800a2b8:	b29b      	uxth	r3, r3
 800a2ba:	4a9c      	ldr	r2, [pc, #624]	; (800a52c <USB_EPStartXfer+0x6fc>)
 800a2bc:	4313      	orrs	r3, r2
 800a2be:	b29a      	uxth	r2, r3
 800a2c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a2c2:	801a      	strh	r2, [r3, #0]
 800a2c4:	e01c      	b.n	800a300 <USB_EPStartXfer+0x4d0>
 800a2c6:	683b      	ldr	r3, [r7, #0]
 800a2c8:	785b      	ldrb	r3, [r3, #1]
 800a2ca:	2b01      	cmp	r3, #1
 800a2cc:	d118      	bne.n	800a300 <USB_EPStartXfer+0x4d0>
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	653b      	str	r3, [r7, #80]	; 0x50
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	2250      	movs	r2, #80	; 0x50
 800a2d6:	5a9b      	ldrh	r3, [r3, r2]
 800a2d8:	b29b      	uxth	r3, r3
 800a2da:	001a      	movs	r2, r3
 800a2dc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a2de:	189b      	adds	r3, r3, r2
 800a2e0:	653b      	str	r3, [r7, #80]	; 0x50
 800a2e2:	683b      	ldr	r3, [r7, #0]
 800a2e4:	781b      	ldrb	r3, [r3, #0]
 800a2e6:	00da      	lsls	r2, r3, #3
 800a2e8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a2ea:	18d3      	adds	r3, r2, r3
 800a2ec:	4a8d      	ldr	r2, [pc, #564]	; (800a524 <USB_EPStartXfer+0x6f4>)
 800a2ee:	4694      	mov	ip, r2
 800a2f0:	4463      	add	r3, ip
 800a2f2:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a2f4:	1d7b      	adds	r3, r7, #5
 800a2f6:	33ff      	adds	r3, #255	; 0xff
 800a2f8:	681b      	ldr	r3, [r3, #0]
 800a2fa:	b29a      	uxth	r2, r3
 800a2fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a2fe:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800a300:	2076      	movs	r0, #118	; 0x76
 800a302:	183b      	adds	r3, r7, r0
 800a304:	683a      	ldr	r2, [r7, #0]
 800a306:	8912      	ldrh	r2, [r2, #8]
 800a308:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a30a:	683b      	ldr	r3, [r7, #0]
 800a30c:	6959      	ldr	r1, [r3, #20]
 800a30e:	1d7b      	adds	r3, r7, #5
 800a310:	33ff      	adds	r3, #255	; 0xff
 800a312:	681b      	ldr	r3, [r3, #0]
 800a314:	b29c      	uxth	r4, r3
 800a316:	183b      	adds	r3, r7, r0
 800a318:	881a      	ldrh	r2, [r3, #0]
 800a31a:	6878      	ldr	r0, [r7, #4]
 800a31c:	0023      	movs	r3, r4
 800a31e:	f000 ff7b 	bl	800b218 <USB_WritePMA>
            ep->xfer_buff += len;
 800a322:	683b      	ldr	r3, [r7, #0]
 800a324:	695a      	ldr	r2, [r3, #20]
 800a326:	1d7b      	adds	r3, r7, #5
 800a328:	33ff      	adds	r3, #255	; 0xff
 800a32a:	681b      	ldr	r3, [r3, #0]
 800a32c:	18d2      	adds	r2, r2, r3
 800a32e:	683b      	ldr	r3, [r7, #0]
 800a330:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800a332:	683b      	ldr	r3, [r7, #0]
 800a334:	6a1a      	ldr	r2, [r3, #32]
 800a336:	683b      	ldr	r3, [r7, #0]
 800a338:	691b      	ldr	r3, [r3, #16]
 800a33a:	429a      	cmp	r2, r3
 800a33c:	d908      	bls.n	800a350 <USB_EPStartXfer+0x520>
            {
              ep->xfer_len_db -= len;
 800a33e:	683b      	ldr	r3, [r7, #0]
 800a340:	6a1a      	ldr	r2, [r3, #32]
 800a342:	1d7b      	adds	r3, r7, #5
 800a344:	33ff      	adds	r3, #255	; 0xff
 800a346:	681b      	ldr	r3, [r3, #0]
 800a348:	1ad2      	subs	r2, r2, r3
 800a34a:	683b      	ldr	r3, [r7, #0]
 800a34c:	621a      	str	r2, [r3, #32]
 800a34e:	e007      	b.n	800a360 <USB_EPStartXfer+0x530>
            }
            else
            {
              len = ep->xfer_len_db;
 800a350:	683b      	ldr	r3, [r7, #0]
 800a352:	6a1b      	ldr	r3, [r3, #32]
 800a354:	1d7a      	adds	r2, r7, #5
 800a356:	32ff      	adds	r2, #255	; 0xff
 800a358:	6013      	str	r3, [r2, #0]
              ep->xfer_len_db = 0U;
 800a35a:	683b      	ldr	r3, [r7, #0]
 800a35c:	2200      	movs	r2, #0
 800a35e:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	643b      	str	r3, [r7, #64]	; 0x40
 800a364:	683b      	ldr	r3, [r7, #0]
 800a366:	785b      	ldrb	r3, [r3, #1]
 800a368:	2b00      	cmp	r3, #0
 800a36a:	d166      	bne.n	800a43a <USB_EPStartXfer+0x60a>
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	63bb      	str	r3, [r7, #56]	; 0x38
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	2250      	movs	r2, #80	; 0x50
 800a374:	5a9b      	ldrh	r3, [r3, r2]
 800a376:	b29b      	uxth	r3, r3
 800a378:	001a      	movs	r2, r3
 800a37a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a37c:	189b      	adds	r3, r3, r2
 800a37e:	63bb      	str	r3, [r7, #56]	; 0x38
 800a380:	683b      	ldr	r3, [r7, #0]
 800a382:	781b      	ldrb	r3, [r3, #0]
 800a384:	00da      	lsls	r2, r3, #3
 800a386:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a388:	18d3      	adds	r3, r2, r3
 800a38a:	4a69      	ldr	r2, [pc, #420]	; (800a530 <USB_EPStartXfer+0x700>)
 800a38c:	4694      	mov	ip, r2
 800a38e:	4463      	add	r3, ip
 800a390:	637b      	str	r3, [r7, #52]	; 0x34
 800a392:	1d7b      	adds	r3, r7, #5
 800a394:	33ff      	adds	r3, #255	; 0xff
 800a396:	681b      	ldr	r3, [r3, #0]
 800a398:	2b00      	cmp	r3, #0
 800a39a:	d110      	bne.n	800a3be <USB_EPStartXfer+0x58e>
 800a39c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a39e:	881b      	ldrh	r3, [r3, #0]
 800a3a0:	b29b      	uxth	r3, r3
 800a3a2:	4a61      	ldr	r2, [pc, #388]	; (800a528 <USB_EPStartXfer+0x6f8>)
 800a3a4:	4013      	ands	r3, r2
 800a3a6:	b29a      	uxth	r2, r3
 800a3a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a3aa:	801a      	strh	r2, [r3, #0]
 800a3ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a3ae:	881b      	ldrh	r3, [r3, #0]
 800a3b0:	b29b      	uxth	r3, r3
 800a3b2:	4a5e      	ldr	r2, [pc, #376]	; (800a52c <USB_EPStartXfer+0x6fc>)
 800a3b4:	4313      	orrs	r3, r2
 800a3b6:	b29a      	uxth	r2, r3
 800a3b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a3ba:	801a      	strh	r2, [r3, #0]
 800a3bc:	e058      	b.n	800a470 <USB_EPStartXfer+0x640>
 800a3be:	1d7b      	adds	r3, r7, #5
 800a3c0:	33ff      	adds	r3, #255	; 0xff
 800a3c2:	681b      	ldr	r3, [r3, #0]
 800a3c4:	2b3e      	cmp	r3, #62	; 0x3e
 800a3c6:	d81a      	bhi.n	800a3fe <USB_EPStartXfer+0x5ce>
 800a3c8:	1d7b      	adds	r3, r7, #5
 800a3ca:	33ff      	adds	r3, #255	; 0xff
 800a3cc:	681b      	ldr	r3, [r3, #0]
 800a3ce:	085b      	lsrs	r3, r3, #1
 800a3d0:	21f4      	movs	r1, #244	; 0xf4
 800a3d2:	187a      	adds	r2, r7, r1
 800a3d4:	6013      	str	r3, [r2, #0]
 800a3d6:	1d7b      	adds	r3, r7, #5
 800a3d8:	33ff      	adds	r3, #255	; 0xff
 800a3da:	681b      	ldr	r3, [r3, #0]
 800a3dc:	2201      	movs	r2, #1
 800a3de:	4013      	ands	r3, r2
 800a3e0:	d004      	beq.n	800a3ec <USB_EPStartXfer+0x5bc>
 800a3e2:	187b      	adds	r3, r7, r1
 800a3e4:	681b      	ldr	r3, [r3, #0]
 800a3e6:	3301      	adds	r3, #1
 800a3e8:	187a      	adds	r2, r7, r1
 800a3ea:	6013      	str	r3, [r2, #0]
 800a3ec:	23f4      	movs	r3, #244	; 0xf4
 800a3ee:	18fb      	adds	r3, r7, r3
 800a3f0:	681b      	ldr	r3, [r3, #0]
 800a3f2:	b29b      	uxth	r3, r3
 800a3f4:	029b      	lsls	r3, r3, #10
 800a3f6:	b29a      	uxth	r2, r3
 800a3f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a3fa:	801a      	strh	r2, [r3, #0]
 800a3fc:	e038      	b.n	800a470 <USB_EPStartXfer+0x640>
 800a3fe:	1d7b      	adds	r3, r7, #5
 800a400:	33ff      	adds	r3, #255	; 0xff
 800a402:	681b      	ldr	r3, [r3, #0]
 800a404:	095b      	lsrs	r3, r3, #5
 800a406:	21f4      	movs	r1, #244	; 0xf4
 800a408:	187a      	adds	r2, r7, r1
 800a40a:	6013      	str	r3, [r2, #0]
 800a40c:	1d7b      	adds	r3, r7, #5
 800a40e:	33ff      	adds	r3, #255	; 0xff
 800a410:	681b      	ldr	r3, [r3, #0]
 800a412:	221f      	movs	r2, #31
 800a414:	4013      	ands	r3, r2
 800a416:	d104      	bne.n	800a422 <USB_EPStartXfer+0x5f2>
 800a418:	187b      	adds	r3, r7, r1
 800a41a:	681b      	ldr	r3, [r3, #0]
 800a41c:	3b01      	subs	r3, #1
 800a41e:	187a      	adds	r2, r7, r1
 800a420:	6013      	str	r3, [r2, #0]
 800a422:	23f4      	movs	r3, #244	; 0xf4
 800a424:	18fb      	adds	r3, r7, r3
 800a426:	681b      	ldr	r3, [r3, #0]
 800a428:	b29b      	uxth	r3, r3
 800a42a:	029b      	lsls	r3, r3, #10
 800a42c:	b29b      	uxth	r3, r3
 800a42e:	4a3f      	ldr	r2, [pc, #252]	; (800a52c <USB_EPStartXfer+0x6fc>)
 800a430:	4313      	orrs	r3, r2
 800a432:	b29a      	uxth	r2, r3
 800a434:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a436:	801a      	strh	r2, [r3, #0]
 800a438:	e01a      	b.n	800a470 <USB_EPStartXfer+0x640>
 800a43a:	683b      	ldr	r3, [r7, #0]
 800a43c:	785b      	ldrb	r3, [r3, #1]
 800a43e:	2b01      	cmp	r3, #1
 800a440:	d116      	bne.n	800a470 <USB_EPStartXfer+0x640>
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	2250      	movs	r2, #80	; 0x50
 800a446:	5a9b      	ldrh	r3, [r3, r2]
 800a448:	b29b      	uxth	r3, r3
 800a44a:	001a      	movs	r2, r3
 800a44c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a44e:	189b      	adds	r3, r3, r2
 800a450:	643b      	str	r3, [r7, #64]	; 0x40
 800a452:	683b      	ldr	r3, [r7, #0]
 800a454:	781b      	ldrb	r3, [r3, #0]
 800a456:	00da      	lsls	r2, r3, #3
 800a458:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a45a:	18d3      	adds	r3, r2, r3
 800a45c:	4a34      	ldr	r2, [pc, #208]	; (800a530 <USB_EPStartXfer+0x700>)
 800a45e:	4694      	mov	ip, r2
 800a460:	4463      	add	r3, ip
 800a462:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a464:	1d7b      	adds	r3, r7, #5
 800a466:	33ff      	adds	r3, #255	; 0xff
 800a468:	681b      	ldr	r3, [r3, #0]
 800a46a:	b29a      	uxth	r2, r3
 800a46c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a46e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800a470:	2076      	movs	r0, #118	; 0x76
 800a472:	183b      	adds	r3, r7, r0
 800a474:	683a      	ldr	r2, [r7, #0]
 800a476:	8952      	ldrh	r2, [r2, #10]
 800a478:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a47a:	683b      	ldr	r3, [r7, #0]
 800a47c:	6959      	ldr	r1, [r3, #20]
 800a47e:	1d7b      	adds	r3, r7, #5
 800a480:	33ff      	adds	r3, #255	; 0xff
 800a482:	681b      	ldr	r3, [r3, #0]
 800a484:	b29c      	uxth	r4, r3
 800a486:	183b      	adds	r3, r7, r0
 800a488:	881a      	ldrh	r2, [r3, #0]
 800a48a:	6878      	ldr	r0, [r7, #4]
 800a48c:	0023      	movs	r3, r4
 800a48e:	f000 fec3 	bl	800b218 <USB_WritePMA>
 800a492:	e1a2      	b.n	800a7da <USB_EPStartXfer+0x9aa>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800a494:	683b      	ldr	r3, [r7, #0]
 800a496:	6a1b      	ldr	r3, [r3, #32]
 800a498:	1d7a      	adds	r2, r7, #5
 800a49a:	32ff      	adds	r2, #255	; 0xff
 800a49c:	6013      	str	r3, [r2, #0]

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 800a49e:	687a      	ldr	r2, [r7, #4]
 800a4a0:	683b      	ldr	r3, [r7, #0]
 800a4a2:	781b      	ldrb	r3, [r3, #0]
 800a4a4:	009b      	lsls	r3, r3, #2
 800a4a6:	18d3      	adds	r3, r2, r3
 800a4a8:	881b      	ldrh	r3, [r3, #0]
 800a4aa:	b29a      	uxth	r2, r3
 800a4ac:	2062      	movs	r0, #98	; 0x62
 800a4ae:	183b      	adds	r3, r7, r0
 800a4b0:	4920      	ldr	r1, [pc, #128]	; (800a534 <USB_EPStartXfer+0x704>)
 800a4b2:	400a      	ands	r2, r1
 800a4b4:	801a      	strh	r2, [r3, #0]
 800a4b6:	687a      	ldr	r2, [r7, #4]
 800a4b8:	683b      	ldr	r3, [r7, #0]
 800a4ba:	781b      	ldrb	r3, [r3, #0]
 800a4bc:	009b      	lsls	r3, r3, #2
 800a4be:	18d3      	adds	r3, r2, r3
 800a4c0:	183a      	adds	r2, r7, r0
 800a4c2:	8812      	ldrh	r2, [r2, #0]
 800a4c4:	491c      	ldr	r1, [pc, #112]	; (800a538 <USB_EPStartXfer+0x708>)
 800a4c6:	430a      	orrs	r2, r1
 800a4c8:	b292      	uxth	r2, r2
 800a4ca:	801a      	strh	r2, [r3, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	2250      	movs	r2, #80	; 0x50
 800a4d4:	5a9b      	ldrh	r3, [r3, r2]
 800a4d6:	b29b      	uxth	r3, r3
 800a4d8:	001a      	movs	r2, r3
 800a4da:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a4dc:	189b      	adds	r3, r3, r2
 800a4de:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a4e0:	683b      	ldr	r3, [r7, #0]
 800a4e2:	781b      	ldrb	r3, [r3, #0]
 800a4e4:	00da      	lsls	r2, r3, #3
 800a4e6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a4e8:	18d3      	adds	r3, r2, r3
 800a4ea:	4a0e      	ldr	r2, [pc, #56]	; (800a524 <USB_EPStartXfer+0x6f4>)
 800a4ec:	4694      	mov	ip, r2
 800a4ee:	4463      	add	r3, ip
 800a4f0:	65bb      	str	r3, [r7, #88]	; 0x58
 800a4f2:	1d7b      	adds	r3, r7, #5
 800a4f4:	33ff      	adds	r3, #255	; 0xff
 800a4f6:	681b      	ldr	r3, [r3, #0]
 800a4f8:	b29a      	uxth	r2, r3
 800a4fa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a4fc:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800a4fe:	2076      	movs	r0, #118	; 0x76
 800a500:	183b      	adds	r3, r7, r0
 800a502:	683a      	ldr	r2, [r7, #0]
 800a504:	8912      	ldrh	r2, [r2, #8]
 800a506:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a508:	683b      	ldr	r3, [r7, #0]
 800a50a:	6959      	ldr	r1, [r3, #20]
 800a50c:	1d7b      	adds	r3, r7, #5
 800a50e:	33ff      	adds	r3, #255	; 0xff
 800a510:	681b      	ldr	r3, [r3, #0]
 800a512:	b29c      	uxth	r4, r3
 800a514:	183b      	adds	r3, r7, r0
 800a516:	881a      	ldrh	r2, [r3, #0]
 800a518:	6878      	ldr	r0, [r7, #4]
 800a51a:	0023      	movs	r3, r4
 800a51c:	f000 fe7c 	bl	800b218 <USB_WritePMA>
 800a520:	e15b      	b.n	800a7da <USB_EPStartXfer+0x9aa>
 800a522:	46c0      	nop			; (mov r8, r8)
 800a524:	00000402 	.word	0x00000402
 800a528:	ffff83ff 	.word	0xffff83ff
 800a52c:	ffff8000 	.word	0xffff8000
 800a530:	00000406 	.word	0x00000406
 800a534:	ffff8e8f 	.word	0xffff8e8f
 800a538:	ffff8080 	.word	0xffff8080
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 800a53c:	683b      	ldr	r3, [r7, #0]
 800a53e:	6a1a      	ldr	r2, [r3, #32]
 800a540:	1d7b      	adds	r3, r7, #5
 800a542:	33ff      	adds	r3, #255	; 0xff
 800a544:	681b      	ldr	r3, [r3, #0]
 800a546:	1ad2      	subs	r2, r2, r3
 800a548:	683b      	ldr	r3, [r7, #0]
 800a54a:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800a54c:	687a      	ldr	r2, [r7, #4]
 800a54e:	683b      	ldr	r3, [r7, #0]
 800a550:	781b      	ldrb	r3, [r3, #0]
 800a552:	009b      	lsls	r3, r3, #2
 800a554:	18d3      	adds	r3, r2, r3
 800a556:	881b      	ldrh	r3, [r3, #0]
 800a558:	b29b      	uxth	r3, r3
 800a55a:	001a      	movs	r2, r3
 800a55c:	2340      	movs	r3, #64	; 0x40
 800a55e:	4013      	ands	r3, r2
 800a560:	d100      	bne.n	800a564 <USB_EPStartXfer+0x734>
 800a562:	e099      	b.n	800a698 <USB_EPStartXfer+0x868>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	673b      	str	r3, [r7, #112]	; 0x70
 800a568:	683b      	ldr	r3, [r7, #0]
 800a56a:	785b      	ldrb	r3, [r3, #1]
 800a56c:	2b00      	cmp	r3, #0
 800a56e:	d166      	bne.n	800a63e <USB_EPStartXfer+0x80e>
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	66bb      	str	r3, [r7, #104]	; 0x68
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	2250      	movs	r2, #80	; 0x50
 800a578:	5a9b      	ldrh	r3, [r3, r2]
 800a57a:	b29b      	uxth	r3, r3
 800a57c:	001a      	movs	r2, r3
 800a57e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800a580:	189b      	adds	r3, r3, r2
 800a582:	66bb      	str	r3, [r7, #104]	; 0x68
 800a584:	683b      	ldr	r3, [r7, #0]
 800a586:	781b      	ldrb	r3, [r3, #0]
 800a588:	00da      	lsls	r2, r3, #3
 800a58a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800a58c:	18d3      	adds	r3, r2, r3
 800a58e:	4ad0      	ldr	r2, [pc, #832]	; (800a8d0 <USB_EPStartXfer+0xaa0>)
 800a590:	4694      	mov	ip, r2
 800a592:	4463      	add	r3, ip
 800a594:	667b      	str	r3, [r7, #100]	; 0x64
 800a596:	1d7b      	adds	r3, r7, #5
 800a598:	33ff      	adds	r3, #255	; 0xff
 800a59a:	681b      	ldr	r3, [r3, #0]
 800a59c:	2b00      	cmp	r3, #0
 800a59e:	d110      	bne.n	800a5c2 <USB_EPStartXfer+0x792>
 800a5a0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a5a2:	881b      	ldrh	r3, [r3, #0]
 800a5a4:	b29b      	uxth	r3, r3
 800a5a6:	4acb      	ldr	r2, [pc, #812]	; (800a8d4 <USB_EPStartXfer+0xaa4>)
 800a5a8:	4013      	ands	r3, r2
 800a5aa:	b29a      	uxth	r2, r3
 800a5ac:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a5ae:	801a      	strh	r2, [r3, #0]
 800a5b0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a5b2:	881b      	ldrh	r3, [r3, #0]
 800a5b4:	b29b      	uxth	r3, r3
 800a5b6:	4ac8      	ldr	r2, [pc, #800]	; (800a8d8 <USB_EPStartXfer+0xaa8>)
 800a5b8:	4313      	orrs	r3, r2
 800a5ba:	b29a      	uxth	r2, r3
 800a5bc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a5be:	801a      	strh	r2, [r3, #0]
 800a5c0:	e058      	b.n	800a674 <USB_EPStartXfer+0x844>
 800a5c2:	1d7b      	adds	r3, r7, #5
 800a5c4:	33ff      	adds	r3, #255	; 0xff
 800a5c6:	681b      	ldr	r3, [r3, #0]
 800a5c8:	2b3e      	cmp	r3, #62	; 0x3e
 800a5ca:	d81a      	bhi.n	800a602 <USB_EPStartXfer+0x7d2>
 800a5cc:	1d7b      	adds	r3, r7, #5
 800a5ce:	33ff      	adds	r3, #255	; 0xff
 800a5d0:	681b      	ldr	r3, [r3, #0]
 800a5d2:	085b      	lsrs	r3, r3, #1
 800a5d4:	21f0      	movs	r1, #240	; 0xf0
 800a5d6:	187a      	adds	r2, r7, r1
 800a5d8:	6013      	str	r3, [r2, #0]
 800a5da:	1d7b      	adds	r3, r7, #5
 800a5dc:	33ff      	adds	r3, #255	; 0xff
 800a5de:	681b      	ldr	r3, [r3, #0]
 800a5e0:	2201      	movs	r2, #1
 800a5e2:	4013      	ands	r3, r2
 800a5e4:	d004      	beq.n	800a5f0 <USB_EPStartXfer+0x7c0>
 800a5e6:	187b      	adds	r3, r7, r1
 800a5e8:	681b      	ldr	r3, [r3, #0]
 800a5ea:	3301      	adds	r3, #1
 800a5ec:	187a      	adds	r2, r7, r1
 800a5ee:	6013      	str	r3, [r2, #0]
 800a5f0:	23f0      	movs	r3, #240	; 0xf0
 800a5f2:	18fb      	adds	r3, r7, r3
 800a5f4:	681b      	ldr	r3, [r3, #0]
 800a5f6:	b29b      	uxth	r3, r3
 800a5f8:	029b      	lsls	r3, r3, #10
 800a5fa:	b29a      	uxth	r2, r3
 800a5fc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a5fe:	801a      	strh	r2, [r3, #0]
 800a600:	e038      	b.n	800a674 <USB_EPStartXfer+0x844>
 800a602:	1d7b      	adds	r3, r7, #5
 800a604:	33ff      	adds	r3, #255	; 0xff
 800a606:	681b      	ldr	r3, [r3, #0]
 800a608:	095b      	lsrs	r3, r3, #5
 800a60a:	21f0      	movs	r1, #240	; 0xf0
 800a60c:	187a      	adds	r2, r7, r1
 800a60e:	6013      	str	r3, [r2, #0]
 800a610:	1d7b      	adds	r3, r7, #5
 800a612:	33ff      	adds	r3, #255	; 0xff
 800a614:	681b      	ldr	r3, [r3, #0]
 800a616:	221f      	movs	r2, #31
 800a618:	4013      	ands	r3, r2
 800a61a:	d104      	bne.n	800a626 <USB_EPStartXfer+0x7f6>
 800a61c:	187b      	adds	r3, r7, r1
 800a61e:	681b      	ldr	r3, [r3, #0]
 800a620:	3b01      	subs	r3, #1
 800a622:	187a      	adds	r2, r7, r1
 800a624:	6013      	str	r3, [r2, #0]
 800a626:	23f0      	movs	r3, #240	; 0xf0
 800a628:	18fb      	adds	r3, r7, r3
 800a62a:	681b      	ldr	r3, [r3, #0]
 800a62c:	b29b      	uxth	r3, r3
 800a62e:	029b      	lsls	r3, r3, #10
 800a630:	b29b      	uxth	r3, r3
 800a632:	4aa9      	ldr	r2, [pc, #676]	; (800a8d8 <USB_EPStartXfer+0xaa8>)
 800a634:	4313      	orrs	r3, r2
 800a636:	b29a      	uxth	r2, r3
 800a638:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a63a:	801a      	strh	r2, [r3, #0]
 800a63c:	e01a      	b.n	800a674 <USB_EPStartXfer+0x844>
 800a63e:	683b      	ldr	r3, [r7, #0]
 800a640:	785b      	ldrb	r3, [r3, #1]
 800a642:	2b01      	cmp	r3, #1
 800a644:	d116      	bne.n	800a674 <USB_EPStartXfer+0x844>
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	2250      	movs	r2, #80	; 0x50
 800a64a:	5a9b      	ldrh	r3, [r3, r2]
 800a64c:	b29b      	uxth	r3, r3
 800a64e:	001a      	movs	r2, r3
 800a650:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a652:	189b      	adds	r3, r3, r2
 800a654:	673b      	str	r3, [r7, #112]	; 0x70
 800a656:	683b      	ldr	r3, [r7, #0]
 800a658:	781b      	ldrb	r3, [r3, #0]
 800a65a:	00da      	lsls	r2, r3, #3
 800a65c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a65e:	18d3      	adds	r3, r2, r3
 800a660:	4a9b      	ldr	r2, [pc, #620]	; (800a8d0 <USB_EPStartXfer+0xaa0>)
 800a662:	4694      	mov	ip, r2
 800a664:	4463      	add	r3, ip
 800a666:	66fb      	str	r3, [r7, #108]	; 0x6c
 800a668:	1d7b      	adds	r3, r7, #5
 800a66a:	33ff      	adds	r3, #255	; 0xff
 800a66c:	681b      	ldr	r3, [r3, #0]
 800a66e:	b29a      	uxth	r2, r3
 800a670:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a672:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800a674:	2076      	movs	r0, #118	; 0x76
 800a676:	183b      	adds	r3, r7, r0
 800a678:	683a      	ldr	r2, [r7, #0]
 800a67a:	8952      	ldrh	r2, [r2, #10]
 800a67c:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a67e:	683b      	ldr	r3, [r7, #0]
 800a680:	6959      	ldr	r1, [r3, #20]
 800a682:	1d7b      	adds	r3, r7, #5
 800a684:	33ff      	adds	r3, #255	; 0xff
 800a686:	681b      	ldr	r3, [r3, #0]
 800a688:	b29c      	uxth	r4, r3
 800a68a:	183b      	adds	r3, r7, r0
 800a68c:	881a      	ldrh	r2, [r3, #0]
 800a68e:	6878      	ldr	r0, [r7, #4]
 800a690:	0023      	movs	r3, r4
 800a692:	f000 fdc1 	bl	800b218 <USB_WritePMA>
 800a696:	e0a0      	b.n	800a7da <USB_EPStartXfer+0x9aa>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800a698:	683b      	ldr	r3, [r7, #0]
 800a69a:	785b      	ldrb	r3, [r3, #1]
 800a69c:	2b00      	cmp	r3, #0
 800a69e:	d166      	bne.n	800a76e <USB_EPStartXfer+0x93e>
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	67fb      	str	r3, [r7, #124]	; 0x7c
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	2250      	movs	r2, #80	; 0x50
 800a6a8:	5a9b      	ldrh	r3, [r3, r2]
 800a6aa:	b29b      	uxth	r3, r3
 800a6ac:	001a      	movs	r2, r3
 800a6ae:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800a6b0:	189b      	adds	r3, r3, r2
 800a6b2:	67fb      	str	r3, [r7, #124]	; 0x7c
 800a6b4:	683b      	ldr	r3, [r7, #0]
 800a6b6:	781b      	ldrb	r3, [r3, #0]
 800a6b8:	00da      	lsls	r2, r3, #3
 800a6ba:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800a6bc:	18d3      	adds	r3, r2, r3
 800a6be:	4a87      	ldr	r2, [pc, #540]	; (800a8dc <USB_EPStartXfer+0xaac>)
 800a6c0:	4694      	mov	ip, r2
 800a6c2:	4463      	add	r3, ip
 800a6c4:	67bb      	str	r3, [r7, #120]	; 0x78
 800a6c6:	1d7b      	adds	r3, r7, #5
 800a6c8:	33ff      	adds	r3, #255	; 0xff
 800a6ca:	681b      	ldr	r3, [r3, #0]
 800a6cc:	2b00      	cmp	r3, #0
 800a6ce:	d110      	bne.n	800a6f2 <USB_EPStartXfer+0x8c2>
 800a6d0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a6d2:	881b      	ldrh	r3, [r3, #0]
 800a6d4:	b29b      	uxth	r3, r3
 800a6d6:	4a7f      	ldr	r2, [pc, #508]	; (800a8d4 <USB_EPStartXfer+0xaa4>)
 800a6d8:	4013      	ands	r3, r2
 800a6da:	b29a      	uxth	r2, r3
 800a6dc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a6de:	801a      	strh	r2, [r3, #0]
 800a6e0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a6e2:	881b      	ldrh	r3, [r3, #0]
 800a6e4:	b29b      	uxth	r3, r3
 800a6e6:	4a7c      	ldr	r2, [pc, #496]	; (800a8d8 <USB_EPStartXfer+0xaa8>)
 800a6e8:	4313      	orrs	r3, r2
 800a6ea:	b29a      	uxth	r2, r3
 800a6ec:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a6ee:	801a      	strh	r2, [r3, #0]
 800a6f0:	e062      	b.n	800a7b8 <USB_EPStartXfer+0x988>
 800a6f2:	1d7b      	adds	r3, r7, #5
 800a6f4:	33ff      	adds	r3, #255	; 0xff
 800a6f6:	681b      	ldr	r3, [r3, #0]
 800a6f8:	2b3e      	cmp	r3, #62	; 0x3e
 800a6fa:	d81a      	bhi.n	800a732 <USB_EPStartXfer+0x902>
 800a6fc:	1d7b      	adds	r3, r7, #5
 800a6fe:	33ff      	adds	r3, #255	; 0xff
 800a700:	681b      	ldr	r3, [r3, #0]
 800a702:	085b      	lsrs	r3, r3, #1
 800a704:	21ec      	movs	r1, #236	; 0xec
 800a706:	187a      	adds	r2, r7, r1
 800a708:	6013      	str	r3, [r2, #0]
 800a70a:	1d7b      	adds	r3, r7, #5
 800a70c:	33ff      	adds	r3, #255	; 0xff
 800a70e:	681b      	ldr	r3, [r3, #0]
 800a710:	2201      	movs	r2, #1
 800a712:	4013      	ands	r3, r2
 800a714:	d004      	beq.n	800a720 <USB_EPStartXfer+0x8f0>
 800a716:	187b      	adds	r3, r7, r1
 800a718:	681b      	ldr	r3, [r3, #0]
 800a71a:	3301      	adds	r3, #1
 800a71c:	187a      	adds	r2, r7, r1
 800a71e:	6013      	str	r3, [r2, #0]
 800a720:	23ec      	movs	r3, #236	; 0xec
 800a722:	18fb      	adds	r3, r7, r3
 800a724:	681b      	ldr	r3, [r3, #0]
 800a726:	b29b      	uxth	r3, r3
 800a728:	029b      	lsls	r3, r3, #10
 800a72a:	b29a      	uxth	r2, r3
 800a72c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a72e:	801a      	strh	r2, [r3, #0]
 800a730:	e042      	b.n	800a7b8 <USB_EPStartXfer+0x988>
 800a732:	1d7b      	adds	r3, r7, #5
 800a734:	33ff      	adds	r3, #255	; 0xff
 800a736:	681b      	ldr	r3, [r3, #0]
 800a738:	095b      	lsrs	r3, r3, #5
 800a73a:	21ec      	movs	r1, #236	; 0xec
 800a73c:	187a      	adds	r2, r7, r1
 800a73e:	6013      	str	r3, [r2, #0]
 800a740:	1d7b      	adds	r3, r7, #5
 800a742:	33ff      	adds	r3, #255	; 0xff
 800a744:	681b      	ldr	r3, [r3, #0]
 800a746:	221f      	movs	r2, #31
 800a748:	4013      	ands	r3, r2
 800a74a:	d104      	bne.n	800a756 <USB_EPStartXfer+0x926>
 800a74c:	187b      	adds	r3, r7, r1
 800a74e:	681b      	ldr	r3, [r3, #0]
 800a750:	3b01      	subs	r3, #1
 800a752:	187a      	adds	r2, r7, r1
 800a754:	6013      	str	r3, [r2, #0]
 800a756:	23ec      	movs	r3, #236	; 0xec
 800a758:	18fb      	adds	r3, r7, r3
 800a75a:	681b      	ldr	r3, [r3, #0]
 800a75c:	b29b      	uxth	r3, r3
 800a75e:	029b      	lsls	r3, r3, #10
 800a760:	b29b      	uxth	r3, r3
 800a762:	4a5d      	ldr	r2, [pc, #372]	; (800a8d8 <USB_EPStartXfer+0xaa8>)
 800a764:	4313      	orrs	r3, r2
 800a766:	b29a      	uxth	r2, r3
 800a768:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a76a:	801a      	strh	r2, [r3, #0]
 800a76c:	e024      	b.n	800a7b8 <USB_EPStartXfer+0x988>
 800a76e:	683b      	ldr	r3, [r7, #0]
 800a770:	785b      	ldrb	r3, [r3, #1]
 800a772:	2b01      	cmp	r3, #1
 800a774:	d120      	bne.n	800a7b8 <USB_EPStartXfer+0x988>
 800a776:	687b      	ldr	r3, [r7, #4]
 800a778:	2184      	movs	r1, #132	; 0x84
 800a77a:	187a      	adds	r2, r7, r1
 800a77c:	6013      	str	r3, [r2, #0]
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	2250      	movs	r2, #80	; 0x50
 800a782:	5a9b      	ldrh	r3, [r3, r2]
 800a784:	b29b      	uxth	r3, r3
 800a786:	001a      	movs	r2, r3
 800a788:	187b      	adds	r3, r7, r1
 800a78a:	681b      	ldr	r3, [r3, #0]
 800a78c:	189b      	adds	r3, r3, r2
 800a78e:	187a      	adds	r2, r7, r1
 800a790:	6013      	str	r3, [r2, #0]
 800a792:	683b      	ldr	r3, [r7, #0]
 800a794:	781b      	ldrb	r3, [r3, #0]
 800a796:	00da      	lsls	r2, r3, #3
 800a798:	187b      	adds	r3, r7, r1
 800a79a:	681b      	ldr	r3, [r3, #0]
 800a79c:	18d3      	adds	r3, r2, r3
 800a79e:	4a4f      	ldr	r2, [pc, #316]	; (800a8dc <USB_EPStartXfer+0xaac>)
 800a7a0:	4694      	mov	ip, r2
 800a7a2:	4463      	add	r3, ip
 800a7a4:	2180      	movs	r1, #128	; 0x80
 800a7a6:	187a      	adds	r2, r7, r1
 800a7a8:	6013      	str	r3, [r2, #0]
 800a7aa:	1d7b      	adds	r3, r7, #5
 800a7ac:	33ff      	adds	r3, #255	; 0xff
 800a7ae:	681b      	ldr	r3, [r3, #0]
 800a7b0:	b29a      	uxth	r2, r3
 800a7b2:	187b      	adds	r3, r7, r1
 800a7b4:	681b      	ldr	r3, [r3, #0]
 800a7b6:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800a7b8:	2076      	movs	r0, #118	; 0x76
 800a7ba:	183b      	adds	r3, r7, r0
 800a7bc:	683a      	ldr	r2, [r7, #0]
 800a7be:	8912      	ldrh	r2, [r2, #8]
 800a7c0:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a7c2:	683b      	ldr	r3, [r7, #0]
 800a7c4:	6959      	ldr	r1, [r3, #20]
 800a7c6:	1d7b      	adds	r3, r7, #5
 800a7c8:	33ff      	adds	r3, #255	; 0xff
 800a7ca:	681b      	ldr	r3, [r3, #0]
 800a7cc:	b29c      	uxth	r4, r3
 800a7ce:	183b      	adds	r3, r7, r0
 800a7d0:	881a      	ldrh	r2, [r3, #0]
 800a7d2:	6878      	ldr	r0, [r7, #4]
 800a7d4:	0023      	movs	r3, r4
 800a7d6:	f000 fd1f 	bl	800b218 <USB_WritePMA>
        }
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800a7da:	687a      	ldr	r2, [r7, #4]
 800a7dc:	683b      	ldr	r3, [r7, #0]
 800a7de:	781b      	ldrb	r3, [r3, #0]
 800a7e0:	009b      	lsls	r3, r3, #2
 800a7e2:	18d3      	adds	r3, r2, r3
 800a7e4:	881b      	ldrh	r3, [r3, #0]
 800a7e6:	b29a      	uxth	r2, r3
 800a7e8:	200a      	movs	r0, #10
 800a7ea:	183b      	adds	r3, r7, r0
 800a7ec:	493c      	ldr	r1, [pc, #240]	; (800a8e0 <USB_EPStartXfer+0xab0>)
 800a7ee:	400a      	ands	r2, r1
 800a7f0:	801a      	strh	r2, [r3, #0]
 800a7f2:	183b      	adds	r3, r7, r0
 800a7f4:	183a      	adds	r2, r7, r0
 800a7f6:	8812      	ldrh	r2, [r2, #0]
 800a7f8:	2110      	movs	r1, #16
 800a7fa:	404a      	eors	r2, r1
 800a7fc:	801a      	strh	r2, [r3, #0]
 800a7fe:	183b      	adds	r3, r7, r0
 800a800:	183a      	adds	r2, r7, r0
 800a802:	8812      	ldrh	r2, [r2, #0]
 800a804:	2120      	movs	r1, #32
 800a806:	404a      	eors	r2, r1
 800a808:	801a      	strh	r2, [r3, #0]
 800a80a:	687a      	ldr	r2, [r7, #4]
 800a80c:	683b      	ldr	r3, [r7, #0]
 800a80e:	781b      	ldrb	r3, [r3, #0]
 800a810:	009b      	lsls	r3, r3, #2
 800a812:	18d3      	adds	r3, r2, r3
 800a814:	183a      	adds	r2, r7, r0
 800a816:	8812      	ldrh	r2, [r2, #0]
 800a818:	4932      	ldr	r1, [pc, #200]	; (800a8e4 <USB_EPStartXfer+0xab4>)
 800a81a:	430a      	orrs	r2, r1
 800a81c:	b292      	uxth	r2, r2
 800a81e:	801a      	strh	r2, [r3, #0]
 800a820:	f000 fbaf 	bl	800af82 <USB_EPStartXfer+0x1152>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800a824:	683b      	ldr	r3, [r7, #0]
 800a826:	7b1b      	ldrb	r3, [r3, #12]
 800a828:	2b00      	cmp	r3, #0
 800a82a:	d000      	beq.n	800a82e <USB_EPStartXfer+0x9fe>
 800a82c:	e09e      	b.n	800a96c <USB_EPStartXfer+0xb3c>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800a82e:	683b      	ldr	r3, [r7, #0]
 800a830:	699a      	ldr	r2, [r3, #24]
 800a832:	683b      	ldr	r3, [r7, #0]
 800a834:	691b      	ldr	r3, [r3, #16]
 800a836:	429a      	cmp	r2, r3
 800a838:	d90d      	bls.n	800a856 <USB_EPStartXfer+0xa26>
      {
        len = ep->maxpacket;
 800a83a:	683b      	ldr	r3, [r7, #0]
 800a83c:	691b      	ldr	r3, [r3, #16]
 800a83e:	1d7a      	adds	r2, r7, #5
 800a840:	32ff      	adds	r2, #255	; 0xff
 800a842:	6013      	str	r3, [r2, #0]
        ep->xfer_len -= len;
 800a844:	683b      	ldr	r3, [r7, #0]
 800a846:	699a      	ldr	r2, [r3, #24]
 800a848:	1d7b      	adds	r3, r7, #5
 800a84a:	33ff      	adds	r3, #255	; 0xff
 800a84c:	681b      	ldr	r3, [r3, #0]
 800a84e:	1ad2      	subs	r2, r2, r3
 800a850:	683b      	ldr	r3, [r7, #0]
 800a852:	619a      	str	r2, [r3, #24]
 800a854:	e007      	b.n	800a866 <USB_EPStartXfer+0xa36>
      }
      else
      {
        len = ep->xfer_len;
 800a856:	683b      	ldr	r3, [r7, #0]
 800a858:	699b      	ldr	r3, [r3, #24]
 800a85a:	1d7a      	adds	r2, r7, #5
 800a85c:	32ff      	adds	r2, #255	; 0xff
 800a85e:	6013      	str	r3, [r2, #0]
        ep->xfer_len = 0U;
 800a860:	683b      	ldr	r3, [r7, #0]
 800a862:	2200      	movs	r2, #0
 800a864:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	2190      	movs	r1, #144	; 0x90
 800a86a:	187a      	adds	r2, r7, r1
 800a86c:	6013      	str	r3, [r2, #0]
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	2250      	movs	r2, #80	; 0x50
 800a872:	5a9b      	ldrh	r3, [r3, r2]
 800a874:	b29b      	uxth	r3, r3
 800a876:	001a      	movs	r2, r3
 800a878:	187b      	adds	r3, r7, r1
 800a87a:	681b      	ldr	r3, [r3, #0]
 800a87c:	189b      	adds	r3, r3, r2
 800a87e:	187a      	adds	r2, r7, r1
 800a880:	6013      	str	r3, [r2, #0]
 800a882:	683b      	ldr	r3, [r7, #0]
 800a884:	781b      	ldrb	r3, [r3, #0]
 800a886:	00da      	lsls	r2, r3, #3
 800a888:	187b      	adds	r3, r7, r1
 800a88a:	681b      	ldr	r3, [r3, #0]
 800a88c:	18d3      	adds	r3, r2, r3
 800a88e:	4a10      	ldr	r2, [pc, #64]	; (800a8d0 <USB_EPStartXfer+0xaa0>)
 800a890:	4694      	mov	ip, r2
 800a892:	4463      	add	r3, ip
 800a894:	218c      	movs	r1, #140	; 0x8c
 800a896:	187a      	adds	r2, r7, r1
 800a898:	6013      	str	r3, [r2, #0]
 800a89a:	1d7b      	adds	r3, r7, #5
 800a89c:	33ff      	adds	r3, #255	; 0xff
 800a89e:	681b      	ldr	r3, [r3, #0]
 800a8a0:	2b00      	cmp	r3, #0
 800a8a2:	d121      	bne.n	800a8e8 <USB_EPStartXfer+0xab8>
 800a8a4:	187b      	adds	r3, r7, r1
 800a8a6:	681b      	ldr	r3, [r3, #0]
 800a8a8:	881b      	ldrh	r3, [r3, #0]
 800a8aa:	b29b      	uxth	r3, r3
 800a8ac:	4a09      	ldr	r2, [pc, #36]	; (800a8d4 <USB_EPStartXfer+0xaa4>)
 800a8ae:	4013      	ands	r3, r2
 800a8b0:	b29a      	uxth	r2, r3
 800a8b2:	187b      	adds	r3, r7, r1
 800a8b4:	681b      	ldr	r3, [r3, #0]
 800a8b6:	801a      	strh	r2, [r3, #0]
 800a8b8:	187b      	adds	r3, r7, r1
 800a8ba:	681b      	ldr	r3, [r3, #0]
 800a8bc:	881b      	ldrh	r3, [r3, #0]
 800a8be:	b29b      	uxth	r3, r3
 800a8c0:	4a05      	ldr	r2, [pc, #20]	; (800a8d8 <USB_EPStartXfer+0xaa8>)
 800a8c2:	4313      	orrs	r3, r2
 800a8c4:	b29a      	uxth	r2, r3
 800a8c6:	187b      	adds	r3, r7, r1
 800a8c8:	681b      	ldr	r3, [r3, #0]
 800a8ca:	801a      	strh	r2, [r3, #0]
 800a8cc:	e334      	b.n	800af38 <USB_EPStartXfer+0x1108>
 800a8ce:	46c0      	nop			; (mov r8, r8)
 800a8d0:	00000406 	.word	0x00000406
 800a8d4:	ffff83ff 	.word	0xffff83ff
 800a8d8:	ffff8000 	.word	0xffff8000
 800a8dc:	00000402 	.word	0x00000402
 800a8e0:	ffff8fbf 	.word	0xffff8fbf
 800a8e4:	ffff8080 	.word	0xffff8080
 800a8e8:	1d7b      	adds	r3, r7, #5
 800a8ea:	33ff      	adds	r3, #255	; 0xff
 800a8ec:	681b      	ldr	r3, [r3, #0]
 800a8ee:	2b3e      	cmp	r3, #62	; 0x3e
 800a8f0:	d81c      	bhi.n	800a92c <USB_EPStartXfer+0xafc>
 800a8f2:	1d7b      	adds	r3, r7, #5
 800a8f4:	33ff      	adds	r3, #255	; 0xff
 800a8f6:	681b      	ldr	r3, [r3, #0]
 800a8f8:	085b      	lsrs	r3, r3, #1
 800a8fa:	21e8      	movs	r1, #232	; 0xe8
 800a8fc:	187a      	adds	r2, r7, r1
 800a8fe:	6013      	str	r3, [r2, #0]
 800a900:	1d7b      	adds	r3, r7, #5
 800a902:	33ff      	adds	r3, #255	; 0xff
 800a904:	681b      	ldr	r3, [r3, #0]
 800a906:	2201      	movs	r2, #1
 800a908:	4013      	ands	r3, r2
 800a90a:	d004      	beq.n	800a916 <USB_EPStartXfer+0xae6>
 800a90c:	187b      	adds	r3, r7, r1
 800a90e:	681b      	ldr	r3, [r3, #0]
 800a910:	3301      	adds	r3, #1
 800a912:	187a      	adds	r2, r7, r1
 800a914:	6013      	str	r3, [r2, #0]
 800a916:	23e8      	movs	r3, #232	; 0xe8
 800a918:	18fb      	adds	r3, r7, r3
 800a91a:	681b      	ldr	r3, [r3, #0]
 800a91c:	b29b      	uxth	r3, r3
 800a91e:	029b      	lsls	r3, r3, #10
 800a920:	b29a      	uxth	r2, r3
 800a922:	238c      	movs	r3, #140	; 0x8c
 800a924:	18fb      	adds	r3, r7, r3
 800a926:	681b      	ldr	r3, [r3, #0]
 800a928:	801a      	strh	r2, [r3, #0]
 800a92a:	e305      	b.n	800af38 <USB_EPStartXfer+0x1108>
 800a92c:	1d7b      	adds	r3, r7, #5
 800a92e:	33ff      	adds	r3, #255	; 0xff
 800a930:	681b      	ldr	r3, [r3, #0]
 800a932:	095b      	lsrs	r3, r3, #5
 800a934:	21e8      	movs	r1, #232	; 0xe8
 800a936:	187a      	adds	r2, r7, r1
 800a938:	6013      	str	r3, [r2, #0]
 800a93a:	1d7b      	adds	r3, r7, #5
 800a93c:	33ff      	adds	r3, #255	; 0xff
 800a93e:	681b      	ldr	r3, [r3, #0]
 800a940:	221f      	movs	r2, #31
 800a942:	4013      	ands	r3, r2
 800a944:	d104      	bne.n	800a950 <USB_EPStartXfer+0xb20>
 800a946:	187b      	adds	r3, r7, r1
 800a948:	681b      	ldr	r3, [r3, #0]
 800a94a:	3b01      	subs	r3, #1
 800a94c:	187a      	adds	r2, r7, r1
 800a94e:	6013      	str	r3, [r2, #0]
 800a950:	23e8      	movs	r3, #232	; 0xe8
 800a952:	18fb      	adds	r3, r7, r3
 800a954:	681b      	ldr	r3, [r3, #0]
 800a956:	b29b      	uxth	r3, r3
 800a958:	029b      	lsls	r3, r3, #10
 800a95a:	b29b      	uxth	r3, r3
 800a95c:	4aca      	ldr	r2, [pc, #808]	; (800ac88 <USB_EPStartXfer+0xe58>)
 800a95e:	4313      	orrs	r3, r2
 800a960:	b29a      	uxth	r2, r3
 800a962:	238c      	movs	r3, #140	; 0x8c
 800a964:	18fb      	adds	r3, r7, r3
 800a966:	681b      	ldr	r3, [r3, #0]
 800a968:	801a      	strh	r2, [r3, #0]
 800a96a:	e2e5      	b.n	800af38 <USB_EPStartXfer+0x1108>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800a96c:	683b      	ldr	r3, [r7, #0]
 800a96e:	78db      	ldrb	r3, [r3, #3]
 800a970:	2b02      	cmp	r3, #2
 800a972:	d000      	beq.n	800a976 <USB_EPStartXfer+0xb46>
 800a974:	e16f      	b.n	800ac56 <USB_EPStartXfer+0xe26>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800a976:	683b      	ldr	r3, [r7, #0]
 800a978:	785b      	ldrb	r3, [r3, #1]
 800a97a:	2b00      	cmp	r3, #0
 800a97c:	d16f      	bne.n	800aa5e <USB_EPStartXfer+0xc2e>
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	21ac      	movs	r1, #172	; 0xac
 800a982:	187a      	adds	r2, r7, r1
 800a984:	6013      	str	r3, [r2, #0]
 800a986:	687b      	ldr	r3, [r7, #4]
 800a988:	2250      	movs	r2, #80	; 0x50
 800a98a:	5a9b      	ldrh	r3, [r3, r2]
 800a98c:	b29b      	uxth	r3, r3
 800a98e:	001a      	movs	r2, r3
 800a990:	187b      	adds	r3, r7, r1
 800a992:	681b      	ldr	r3, [r3, #0]
 800a994:	189b      	adds	r3, r3, r2
 800a996:	187a      	adds	r2, r7, r1
 800a998:	6013      	str	r3, [r2, #0]
 800a99a:	683b      	ldr	r3, [r7, #0]
 800a99c:	781b      	ldrb	r3, [r3, #0]
 800a99e:	00da      	lsls	r2, r3, #3
 800a9a0:	187b      	adds	r3, r7, r1
 800a9a2:	681b      	ldr	r3, [r3, #0]
 800a9a4:	18d3      	adds	r3, r2, r3
 800a9a6:	4ab9      	ldr	r2, [pc, #740]	; (800ac8c <USB_EPStartXfer+0xe5c>)
 800a9a8:	4694      	mov	ip, r2
 800a9aa:	4463      	add	r3, ip
 800a9ac:	21a8      	movs	r1, #168	; 0xa8
 800a9ae:	187a      	adds	r2, r7, r1
 800a9b0:	6013      	str	r3, [r2, #0]
 800a9b2:	683b      	ldr	r3, [r7, #0]
 800a9b4:	691b      	ldr	r3, [r3, #16]
 800a9b6:	2b00      	cmp	r3, #0
 800a9b8:	d114      	bne.n	800a9e4 <USB_EPStartXfer+0xbb4>
 800a9ba:	187b      	adds	r3, r7, r1
 800a9bc:	681b      	ldr	r3, [r3, #0]
 800a9be:	881b      	ldrh	r3, [r3, #0]
 800a9c0:	b29b      	uxth	r3, r3
 800a9c2:	4ab3      	ldr	r2, [pc, #716]	; (800ac90 <USB_EPStartXfer+0xe60>)
 800a9c4:	4013      	ands	r3, r2
 800a9c6:	b29a      	uxth	r2, r3
 800a9c8:	187b      	adds	r3, r7, r1
 800a9ca:	681b      	ldr	r3, [r3, #0]
 800a9cc:	801a      	strh	r2, [r3, #0]
 800a9ce:	187b      	adds	r3, r7, r1
 800a9d0:	681b      	ldr	r3, [r3, #0]
 800a9d2:	881b      	ldrh	r3, [r3, #0]
 800a9d4:	b29b      	uxth	r3, r3
 800a9d6:	4aac      	ldr	r2, [pc, #688]	; (800ac88 <USB_EPStartXfer+0xe58>)
 800a9d8:	4313      	orrs	r3, r2
 800a9da:	b29a      	uxth	r2, r3
 800a9dc:	187b      	adds	r3, r7, r1
 800a9de:	681b      	ldr	r3, [r3, #0]
 800a9e0:	801a      	strh	r2, [r3, #0]
 800a9e2:	e060      	b.n	800aaa6 <USB_EPStartXfer+0xc76>
 800a9e4:	683b      	ldr	r3, [r7, #0]
 800a9e6:	691b      	ldr	r3, [r3, #16]
 800a9e8:	2b3e      	cmp	r3, #62	; 0x3e
 800a9ea:	d81a      	bhi.n	800aa22 <USB_EPStartXfer+0xbf2>
 800a9ec:	683b      	ldr	r3, [r7, #0]
 800a9ee:	691b      	ldr	r3, [r3, #16]
 800a9f0:	085b      	lsrs	r3, r3, #1
 800a9f2:	21e4      	movs	r1, #228	; 0xe4
 800a9f4:	187a      	adds	r2, r7, r1
 800a9f6:	6013      	str	r3, [r2, #0]
 800a9f8:	683b      	ldr	r3, [r7, #0]
 800a9fa:	691b      	ldr	r3, [r3, #16]
 800a9fc:	2201      	movs	r2, #1
 800a9fe:	4013      	ands	r3, r2
 800aa00:	d004      	beq.n	800aa0c <USB_EPStartXfer+0xbdc>
 800aa02:	187b      	adds	r3, r7, r1
 800aa04:	681b      	ldr	r3, [r3, #0]
 800aa06:	3301      	adds	r3, #1
 800aa08:	187a      	adds	r2, r7, r1
 800aa0a:	6013      	str	r3, [r2, #0]
 800aa0c:	23e4      	movs	r3, #228	; 0xe4
 800aa0e:	18fb      	adds	r3, r7, r3
 800aa10:	681b      	ldr	r3, [r3, #0]
 800aa12:	b29b      	uxth	r3, r3
 800aa14:	029b      	lsls	r3, r3, #10
 800aa16:	b29a      	uxth	r2, r3
 800aa18:	23a8      	movs	r3, #168	; 0xa8
 800aa1a:	18fb      	adds	r3, r7, r3
 800aa1c:	681b      	ldr	r3, [r3, #0]
 800aa1e:	801a      	strh	r2, [r3, #0]
 800aa20:	e041      	b.n	800aaa6 <USB_EPStartXfer+0xc76>
 800aa22:	683b      	ldr	r3, [r7, #0]
 800aa24:	691b      	ldr	r3, [r3, #16]
 800aa26:	095b      	lsrs	r3, r3, #5
 800aa28:	21e4      	movs	r1, #228	; 0xe4
 800aa2a:	187a      	adds	r2, r7, r1
 800aa2c:	6013      	str	r3, [r2, #0]
 800aa2e:	683b      	ldr	r3, [r7, #0]
 800aa30:	691b      	ldr	r3, [r3, #16]
 800aa32:	221f      	movs	r2, #31
 800aa34:	4013      	ands	r3, r2
 800aa36:	d104      	bne.n	800aa42 <USB_EPStartXfer+0xc12>
 800aa38:	187b      	adds	r3, r7, r1
 800aa3a:	681b      	ldr	r3, [r3, #0]
 800aa3c:	3b01      	subs	r3, #1
 800aa3e:	187a      	adds	r2, r7, r1
 800aa40:	6013      	str	r3, [r2, #0]
 800aa42:	23e4      	movs	r3, #228	; 0xe4
 800aa44:	18fb      	adds	r3, r7, r3
 800aa46:	681b      	ldr	r3, [r3, #0]
 800aa48:	b29b      	uxth	r3, r3
 800aa4a:	029b      	lsls	r3, r3, #10
 800aa4c:	b29b      	uxth	r3, r3
 800aa4e:	4a8e      	ldr	r2, [pc, #568]	; (800ac88 <USB_EPStartXfer+0xe58>)
 800aa50:	4313      	orrs	r3, r2
 800aa52:	b29a      	uxth	r2, r3
 800aa54:	23a8      	movs	r3, #168	; 0xa8
 800aa56:	18fb      	adds	r3, r7, r3
 800aa58:	681b      	ldr	r3, [r3, #0]
 800aa5a:	801a      	strh	r2, [r3, #0]
 800aa5c:	e023      	b.n	800aaa6 <USB_EPStartXfer+0xc76>
 800aa5e:	683b      	ldr	r3, [r7, #0]
 800aa60:	785b      	ldrb	r3, [r3, #1]
 800aa62:	2b01      	cmp	r3, #1
 800aa64:	d11f      	bne.n	800aaa6 <USB_EPStartXfer+0xc76>
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	21b4      	movs	r1, #180	; 0xb4
 800aa6a:	187a      	adds	r2, r7, r1
 800aa6c:	6013      	str	r3, [r2, #0]
 800aa6e:	687b      	ldr	r3, [r7, #4]
 800aa70:	2250      	movs	r2, #80	; 0x50
 800aa72:	5a9b      	ldrh	r3, [r3, r2]
 800aa74:	b29b      	uxth	r3, r3
 800aa76:	001a      	movs	r2, r3
 800aa78:	187b      	adds	r3, r7, r1
 800aa7a:	681b      	ldr	r3, [r3, #0]
 800aa7c:	189b      	adds	r3, r3, r2
 800aa7e:	187a      	adds	r2, r7, r1
 800aa80:	6013      	str	r3, [r2, #0]
 800aa82:	683b      	ldr	r3, [r7, #0]
 800aa84:	781b      	ldrb	r3, [r3, #0]
 800aa86:	00da      	lsls	r2, r3, #3
 800aa88:	187b      	adds	r3, r7, r1
 800aa8a:	681b      	ldr	r3, [r3, #0]
 800aa8c:	18d3      	adds	r3, r2, r3
 800aa8e:	4a7f      	ldr	r2, [pc, #508]	; (800ac8c <USB_EPStartXfer+0xe5c>)
 800aa90:	4694      	mov	ip, r2
 800aa92:	4463      	add	r3, ip
 800aa94:	21b0      	movs	r1, #176	; 0xb0
 800aa96:	187a      	adds	r2, r7, r1
 800aa98:	6013      	str	r3, [r2, #0]
 800aa9a:	683b      	ldr	r3, [r7, #0]
 800aa9c:	691b      	ldr	r3, [r3, #16]
 800aa9e:	b29a      	uxth	r2, r3
 800aaa0:	187b      	adds	r3, r7, r1
 800aaa2:	681b      	ldr	r3, [r3, #0]
 800aaa4:	801a      	strh	r2, [r3, #0]
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	22a4      	movs	r2, #164	; 0xa4
 800aaaa:	18ba      	adds	r2, r7, r2
 800aaac:	6013      	str	r3, [r2, #0]
 800aaae:	683b      	ldr	r3, [r7, #0]
 800aab0:	785b      	ldrb	r3, [r3, #1]
 800aab2:	2b00      	cmp	r3, #0
 800aab4:	d16f      	bne.n	800ab96 <USB_EPStartXfer+0xd66>
 800aab6:	687b      	ldr	r3, [r7, #4]
 800aab8:	219c      	movs	r1, #156	; 0x9c
 800aaba:	187a      	adds	r2, r7, r1
 800aabc:	6013      	str	r3, [r2, #0]
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	2250      	movs	r2, #80	; 0x50
 800aac2:	5a9b      	ldrh	r3, [r3, r2]
 800aac4:	b29b      	uxth	r3, r3
 800aac6:	001a      	movs	r2, r3
 800aac8:	187b      	adds	r3, r7, r1
 800aaca:	681b      	ldr	r3, [r3, #0]
 800aacc:	189b      	adds	r3, r3, r2
 800aace:	187a      	adds	r2, r7, r1
 800aad0:	6013      	str	r3, [r2, #0]
 800aad2:	683b      	ldr	r3, [r7, #0]
 800aad4:	781b      	ldrb	r3, [r3, #0]
 800aad6:	00da      	lsls	r2, r3, #3
 800aad8:	187b      	adds	r3, r7, r1
 800aada:	681b      	ldr	r3, [r3, #0]
 800aadc:	18d3      	adds	r3, r2, r3
 800aade:	4a6d      	ldr	r2, [pc, #436]	; (800ac94 <USB_EPStartXfer+0xe64>)
 800aae0:	4694      	mov	ip, r2
 800aae2:	4463      	add	r3, ip
 800aae4:	2198      	movs	r1, #152	; 0x98
 800aae6:	187a      	adds	r2, r7, r1
 800aae8:	6013      	str	r3, [r2, #0]
 800aaea:	683b      	ldr	r3, [r7, #0]
 800aaec:	691b      	ldr	r3, [r3, #16]
 800aaee:	2b00      	cmp	r3, #0
 800aaf0:	d114      	bne.n	800ab1c <USB_EPStartXfer+0xcec>
 800aaf2:	187b      	adds	r3, r7, r1
 800aaf4:	681b      	ldr	r3, [r3, #0]
 800aaf6:	881b      	ldrh	r3, [r3, #0]
 800aaf8:	b29b      	uxth	r3, r3
 800aafa:	4a65      	ldr	r2, [pc, #404]	; (800ac90 <USB_EPStartXfer+0xe60>)
 800aafc:	4013      	ands	r3, r2
 800aafe:	b29a      	uxth	r2, r3
 800ab00:	187b      	adds	r3, r7, r1
 800ab02:	681b      	ldr	r3, [r3, #0]
 800ab04:	801a      	strh	r2, [r3, #0]
 800ab06:	187b      	adds	r3, r7, r1
 800ab08:	681b      	ldr	r3, [r3, #0]
 800ab0a:	881b      	ldrh	r3, [r3, #0]
 800ab0c:	b29b      	uxth	r3, r3
 800ab0e:	4a5e      	ldr	r2, [pc, #376]	; (800ac88 <USB_EPStartXfer+0xe58>)
 800ab10:	4313      	orrs	r3, r2
 800ab12:	b29a      	uxth	r2, r3
 800ab14:	187b      	adds	r3, r7, r1
 800ab16:	681b      	ldr	r3, [r3, #0]
 800ab18:	801a      	strh	r2, [r3, #0]
 800ab1a:	e05d      	b.n	800abd8 <USB_EPStartXfer+0xda8>
 800ab1c:	683b      	ldr	r3, [r7, #0]
 800ab1e:	691b      	ldr	r3, [r3, #16]
 800ab20:	2b3e      	cmp	r3, #62	; 0x3e
 800ab22:	d81a      	bhi.n	800ab5a <USB_EPStartXfer+0xd2a>
 800ab24:	683b      	ldr	r3, [r7, #0]
 800ab26:	691b      	ldr	r3, [r3, #16]
 800ab28:	085b      	lsrs	r3, r3, #1
 800ab2a:	21e0      	movs	r1, #224	; 0xe0
 800ab2c:	187a      	adds	r2, r7, r1
 800ab2e:	6013      	str	r3, [r2, #0]
 800ab30:	683b      	ldr	r3, [r7, #0]
 800ab32:	691b      	ldr	r3, [r3, #16]
 800ab34:	2201      	movs	r2, #1
 800ab36:	4013      	ands	r3, r2
 800ab38:	d004      	beq.n	800ab44 <USB_EPStartXfer+0xd14>
 800ab3a:	187b      	adds	r3, r7, r1
 800ab3c:	681b      	ldr	r3, [r3, #0]
 800ab3e:	3301      	adds	r3, #1
 800ab40:	187a      	adds	r2, r7, r1
 800ab42:	6013      	str	r3, [r2, #0]
 800ab44:	23e0      	movs	r3, #224	; 0xe0
 800ab46:	18fb      	adds	r3, r7, r3
 800ab48:	681b      	ldr	r3, [r3, #0]
 800ab4a:	b29b      	uxth	r3, r3
 800ab4c:	029b      	lsls	r3, r3, #10
 800ab4e:	b29a      	uxth	r2, r3
 800ab50:	2398      	movs	r3, #152	; 0x98
 800ab52:	18fb      	adds	r3, r7, r3
 800ab54:	681b      	ldr	r3, [r3, #0]
 800ab56:	801a      	strh	r2, [r3, #0]
 800ab58:	e03e      	b.n	800abd8 <USB_EPStartXfer+0xda8>
 800ab5a:	683b      	ldr	r3, [r7, #0]
 800ab5c:	691b      	ldr	r3, [r3, #16]
 800ab5e:	095b      	lsrs	r3, r3, #5
 800ab60:	21e0      	movs	r1, #224	; 0xe0
 800ab62:	187a      	adds	r2, r7, r1
 800ab64:	6013      	str	r3, [r2, #0]
 800ab66:	683b      	ldr	r3, [r7, #0]
 800ab68:	691b      	ldr	r3, [r3, #16]
 800ab6a:	221f      	movs	r2, #31
 800ab6c:	4013      	ands	r3, r2
 800ab6e:	d104      	bne.n	800ab7a <USB_EPStartXfer+0xd4a>
 800ab70:	187b      	adds	r3, r7, r1
 800ab72:	681b      	ldr	r3, [r3, #0]
 800ab74:	3b01      	subs	r3, #1
 800ab76:	187a      	adds	r2, r7, r1
 800ab78:	6013      	str	r3, [r2, #0]
 800ab7a:	23e0      	movs	r3, #224	; 0xe0
 800ab7c:	18fb      	adds	r3, r7, r3
 800ab7e:	681b      	ldr	r3, [r3, #0]
 800ab80:	b29b      	uxth	r3, r3
 800ab82:	029b      	lsls	r3, r3, #10
 800ab84:	b29b      	uxth	r3, r3
 800ab86:	4a40      	ldr	r2, [pc, #256]	; (800ac88 <USB_EPStartXfer+0xe58>)
 800ab88:	4313      	orrs	r3, r2
 800ab8a:	b29a      	uxth	r2, r3
 800ab8c:	2398      	movs	r3, #152	; 0x98
 800ab8e:	18fb      	adds	r3, r7, r3
 800ab90:	681b      	ldr	r3, [r3, #0]
 800ab92:	801a      	strh	r2, [r3, #0]
 800ab94:	e020      	b.n	800abd8 <USB_EPStartXfer+0xda8>
 800ab96:	683b      	ldr	r3, [r7, #0]
 800ab98:	785b      	ldrb	r3, [r3, #1]
 800ab9a:	2b01      	cmp	r3, #1
 800ab9c:	d11c      	bne.n	800abd8 <USB_EPStartXfer+0xda8>
 800ab9e:	687b      	ldr	r3, [r7, #4]
 800aba0:	2250      	movs	r2, #80	; 0x50
 800aba2:	5a9b      	ldrh	r3, [r3, r2]
 800aba4:	b29b      	uxth	r3, r3
 800aba6:	001a      	movs	r2, r3
 800aba8:	21a4      	movs	r1, #164	; 0xa4
 800abaa:	187b      	adds	r3, r7, r1
 800abac:	681b      	ldr	r3, [r3, #0]
 800abae:	189b      	adds	r3, r3, r2
 800abb0:	187a      	adds	r2, r7, r1
 800abb2:	6013      	str	r3, [r2, #0]
 800abb4:	683b      	ldr	r3, [r7, #0]
 800abb6:	781b      	ldrb	r3, [r3, #0]
 800abb8:	00da      	lsls	r2, r3, #3
 800abba:	187b      	adds	r3, r7, r1
 800abbc:	681b      	ldr	r3, [r3, #0]
 800abbe:	18d3      	adds	r3, r2, r3
 800abc0:	4a34      	ldr	r2, [pc, #208]	; (800ac94 <USB_EPStartXfer+0xe64>)
 800abc2:	4694      	mov	ip, r2
 800abc4:	4463      	add	r3, ip
 800abc6:	21a0      	movs	r1, #160	; 0xa0
 800abc8:	187a      	adds	r2, r7, r1
 800abca:	6013      	str	r3, [r2, #0]
 800abcc:	683b      	ldr	r3, [r7, #0]
 800abce:	691b      	ldr	r3, [r3, #16]
 800abd0:	b29a      	uxth	r2, r3
 800abd2:	187b      	adds	r3, r7, r1
 800abd4:	681b      	ldr	r3, [r3, #0]
 800abd6:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800abd8:	683b      	ldr	r3, [r7, #0]
 800abda:	69db      	ldr	r3, [r3, #28]
 800abdc:	2b00      	cmp	r3, #0
 800abde:	d100      	bne.n	800abe2 <USB_EPStartXfer+0xdb2>
 800abe0:	e1aa      	b.n	800af38 <USB_EPStartXfer+0x1108>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800abe2:	687a      	ldr	r2, [r7, #4]
 800abe4:	683b      	ldr	r3, [r7, #0]
 800abe6:	781b      	ldrb	r3, [r3, #0]
 800abe8:	009b      	lsls	r3, r3, #2
 800abea:	18d2      	adds	r2, r2, r3
 800abec:	2196      	movs	r1, #150	; 0x96
 800abee:	187b      	adds	r3, r7, r1
 800abf0:	8812      	ldrh	r2, [r2, #0]
 800abf2:	801a      	strh	r2, [r3, #0]

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800abf4:	187b      	adds	r3, r7, r1
 800abf6:	881a      	ldrh	r2, [r3, #0]
 800abf8:	2380      	movs	r3, #128	; 0x80
 800abfa:	01db      	lsls	r3, r3, #7
 800abfc:	4013      	ands	r3, r2
 800abfe:	d004      	beq.n	800ac0a <USB_EPStartXfer+0xdda>
 800ac00:	187b      	adds	r3, r7, r1
 800ac02:	881b      	ldrh	r3, [r3, #0]
 800ac04:	2240      	movs	r2, #64	; 0x40
 800ac06:	4013      	ands	r3, r2
 800ac08:	d10d      	bne.n	800ac26 <USB_EPStartXfer+0xdf6>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800ac0a:	2196      	movs	r1, #150	; 0x96
 800ac0c:	187b      	adds	r3, r7, r1
 800ac0e:	881a      	ldrh	r2, [r3, #0]
 800ac10:	2380      	movs	r3, #128	; 0x80
 800ac12:	01db      	lsls	r3, r3, #7
 800ac14:	4013      	ands	r3, r2
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800ac16:	d000      	beq.n	800ac1a <USB_EPStartXfer+0xdea>
 800ac18:	e18e      	b.n	800af38 <USB_EPStartXfer+0x1108>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800ac1a:	187b      	adds	r3, r7, r1
 800ac1c:	881b      	ldrh	r3, [r3, #0]
 800ac1e:	2240      	movs	r2, #64	; 0x40
 800ac20:	4013      	ands	r3, r2
 800ac22:	d000      	beq.n	800ac26 <USB_EPStartXfer+0xdf6>
 800ac24:	e188      	b.n	800af38 <USB_EPStartXfer+0x1108>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 800ac26:	687a      	ldr	r2, [r7, #4]
 800ac28:	683b      	ldr	r3, [r7, #0]
 800ac2a:	781b      	ldrb	r3, [r3, #0]
 800ac2c:	009b      	lsls	r3, r3, #2
 800ac2e:	18d3      	adds	r3, r2, r3
 800ac30:	881b      	ldrh	r3, [r3, #0]
 800ac32:	b29a      	uxth	r2, r3
 800ac34:	2094      	movs	r0, #148	; 0x94
 800ac36:	183b      	adds	r3, r7, r0
 800ac38:	4917      	ldr	r1, [pc, #92]	; (800ac98 <USB_EPStartXfer+0xe68>)
 800ac3a:	400a      	ands	r2, r1
 800ac3c:	801a      	strh	r2, [r3, #0]
 800ac3e:	687a      	ldr	r2, [r7, #4]
 800ac40:	683b      	ldr	r3, [r7, #0]
 800ac42:	781b      	ldrb	r3, [r3, #0]
 800ac44:	009b      	lsls	r3, r3, #2
 800ac46:	18d3      	adds	r3, r2, r3
 800ac48:	183a      	adds	r2, r7, r0
 800ac4a:	8812      	ldrh	r2, [r2, #0]
 800ac4c:	4913      	ldr	r1, [pc, #76]	; (800ac9c <USB_EPStartXfer+0xe6c>)
 800ac4e:	430a      	orrs	r2, r1
 800ac50:	b292      	uxth	r2, r2
 800ac52:	801a      	strh	r2, [r3, #0]
 800ac54:	e170      	b.n	800af38 <USB_EPStartXfer+0x1108>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800ac56:	683b      	ldr	r3, [r7, #0]
 800ac58:	78db      	ldrb	r3, [r3, #3]
 800ac5a:	2b01      	cmp	r3, #1
 800ac5c:	d000      	beq.n	800ac60 <USB_EPStartXfer+0xe30>
 800ac5e:	e169      	b.n	800af34 <USB_EPStartXfer+0x1104>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800ac60:	683b      	ldr	r3, [r7, #0]
 800ac62:	699a      	ldr	r2, [r3, #24]
 800ac64:	683b      	ldr	r3, [r7, #0]
 800ac66:	691b      	ldr	r3, [r3, #16]
 800ac68:	429a      	cmp	r2, r3
 800ac6a:	d919      	bls.n	800aca0 <USB_EPStartXfer+0xe70>
        {
          len = ep->maxpacket;
 800ac6c:	683b      	ldr	r3, [r7, #0]
 800ac6e:	691b      	ldr	r3, [r3, #16]
 800ac70:	1d7a      	adds	r2, r7, #5
 800ac72:	32ff      	adds	r2, #255	; 0xff
 800ac74:	6013      	str	r3, [r2, #0]
          ep->xfer_len -= len;
 800ac76:	683b      	ldr	r3, [r7, #0]
 800ac78:	699a      	ldr	r2, [r3, #24]
 800ac7a:	1d7b      	adds	r3, r7, #5
 800ac7c:	33ff      	adds	r3, #255	; 0xff
 800ac7e:	681b      	ldr	r3, [r3, #0]
 800ac80:	1ad2      	subs	r2, r2, r3
 800ac82:	683b      	ldr	r3, [r7, #0]
 800ac84:	619a      	str	r2, [r3, #24]
 800ac86:	e013      	b.n	800acb0 <USB_EPStartXfer+0xe80>
 800ac88:	ffff8000 	.word	0xffff8000
 800ac8c:	00000402 	.word	0x00000402
 800ac90:	ffff83ff 	.word	0xffff83ff
 800ac94:	00000406 	.word	0x00000406
 800ac98:	ffff8f8f 	.word	0xffff8f8f
 800ac9c:	ffff80c0 	.word	0xffff80c0
        }
        else
        {
          len = ep->xfer_len;
 800aca0:	683b      	ldr	r3, [r7, #0]
 800aca2:	699b      	ldr	r3, [r3, #24]
 800aca4:	1d7a      	adds	r2, r7, #5
 800aca6:	32ff      	adds	r2, #255	; 0xff
 800aca8:	6013      	str	r3, [r2, #0]
          ep->xfer_len = 0U;
 800acaa:	683b      	ldr	r3, [r7, #0]
 800acac:	2200      	movs	r2, #0
 800acae:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800acb0:	683b      	ldr	r3, [r7, #0]
 800acb2:	785b      	ldrb	r3, [r3, #1]
 800acb4:	2b00      	cmp	r3, #0
 800acb6:	d000      	beq.n	800acba <USB_EPStartXfer+0xe8a>
 800acb8:	e075      	b.n	800ada6 <USB_EPStartXfer+0xf76>
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	21cc      	movs	r1, #204	; 0xcc
 800acbe:	187a      	adds	r2, r7, r1
 800acc0:	6013      	str	r3, [r2, #0]
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	2250      	movs	r2, #80	; 0x50
 800acc6:	5a9b      	ldrh	r3, [r3, r2]
 800acc8:	b29b      	uxth	r3, r3
 800acca:	001a      	movs	r2, r3
 800accc:	187b      	adds	r3, r7, r1
 800acce:	681b      	ldr	r3, [r3, #0]
 800acd0:	189b      	adds	r3, r3, r2
 800acd2:	187a      	adds	r2, r7, r1
 800acd4:	6013      	str	r3, [r2, #0]
 800acd6:	683b      	ldr	r3, [r7, #0]
 800acd8:	781b      	ldrb	r3, [r3, #0]
 800acda:	00da      	lsls	r2, r3, #3
 800acdc:	187b      	adds	r3, r7, r1
 800acde:	681b      	ldr	r3, [r3, #0]
 800ace0:	18d3      	adds	r3, r2, r3
 800ace2:	4aaa      	ldr	r2, [pc, #680]	; (800af8c <USB_EPStartXfer+0x115c>)
 800ace4:	4694      	mov	ip, r2
 800ace6:	4463      	add	r3, ip
 800ace8:	21c8      	movs	r1, #200	; 0xc8
 800acea:	187a      	adds	r2, r7, r1
 800acec:	6013      	str	r3, [r2, #0]
 800acee:	1d7b      	adds	r3, r7, #5
 800acf0:	33ff      	adds	r3, #255	; 0xff
 800acf2:	681b      	ldr	r3, [r3, #0]
 800acf4:	2b00      	cmp	r3, #0
 800acf6:	d114      	bne.n	800ad22 <USB_EPStartXfer+0xef2>
 800acf8:	187b      	adds	r3, r7, r1
 800acfa:	681b      	ldr	r3, [r3, #0]
 800acfc:	881b      	ldrh	r3, [r3, #0]
 800acfe:	b29b      	uxth	r3, r3
 800ad00:	4aa3      	ldr	r2, [pc, #652]	; (800af90 <USB_EPStartXfer+0x1160>)
 800ad02:	4013      	ands	r3, r2
 800ad04:	b29a      	uxth	r2, r3
 800ad06:	187b      	adds	r3, r7, r1
 800ad08:	681b      	ldr	r3, [r3, #0]
 800ad0a:	801a      	strh	r2, [r3, #0]
 800ad0c:	187b      	adds	r3, r7, r1
 800ad0e:	681b      	ldr	r3, [r3, #0]
 800ad10:	881b      	ldrh	r3, [r3, #0]
 800ad12:	b29b      	uxth	r3, r3
 800ad14:	4a9f      	ldr	r2, [pc, #636]	; (800af94 <USB_EPStartXfer+0x1164>)
 800ad16:	4313      	orrs	r3, r2
 800ad18:	b29a      	uxth	r2, r3
 800ad1a:	187b      	adds	r3, r7, r1
 800ad1c:	681b      	ldr	r3, [r3, #0]
 800ad1e:	801a      	strh	r2, [r3, #0]
 800ad20:	e066      	b.n	800adf0 <USB_EPStartXfer+0xfc0>
 800ad22:	1d7b      	adds	r3, r7, #5
 800ad24:	33ff      	adds	r3, #255	; 0xff
 800ad26:	681b      	ldr	r3, [r3, #0]
 800ad28:	2b3e      	cmp	r3, #62	; 0x3e
 800ad2a:	d81c      	bhi.n	800ad66 <USB_EPStartXfer+0xf36>
 800ad2c:	1d7b      	adds	r3, r7, #5
 800ad2e:	33ff      	adds	r3, #255	; 0xff
 800ad30:	681b      	ldr	r3, [r3, #0]
 800ad32:	085b      	lsrs	r3, r3, #1
 800ad34:	21dc      	movs	r1, #220	; 0xdc
 800ad36:	187a      	adds	r2, r7, r1
 800ad38:	6013      	str	r3, [r2, #0]
 800ad3a:	1d7b      	adds	r3, r7, #5
 800ad3c:	33ff      	adds	r3, #255	; 0xff
 800ad3e:	681b      	ldr	r3, [r3, #0]
 800ad40:	2201      	movs	r2, #1
 800ad42:	4013      	ands	r3, r2
 800ad44:	d004      	beq.n	800ad50 <USB_EPStartXfer+0xf20>
 800ad46:	187b      	adds	r3, r7, r1
 800ad48:	681b      	ldr	r3, [r3, #0]
 800ad4a:	3301      	adds	r3, #1
 800ad4c:	187a      	adds	r2, r7, r1
 800ad4e:	6013      	str	r3, [r2, #0]
 800ad50:	23dc      	movs	r3, #220	; 0xdc
 800ad52:	18fb      	adds	r3, r7, r3
 800ad54:	681b      	ldr	r3, [r3, #0]
 800ad56:	b29b      	uxth	r3, r3
 800ad58:	029b      	lsls	r3, r3, #10
 800ad5a:	b29a      	uxth	r2, r3
 800ad5c:	23c8      	movs	r3, #200	; 0xc8
 800ad5e:	18fb      	adds	r3, r7, r3
 800ad60:	681b      	ldr	r3, [r3, #0]
 800ad62:	801a      	strh	r2, [r3, #0]
 800ad64:	e044      	b.n	800adf0 <USB_EPStartXfer+0xfc0>
 800ad66:	1d7b      	adds	r3, r7, #5
 800ad68:	33ff      	adds	r3, #255	; 0xff
 800ad6a:	681b      	ldr	r3, [r3, #0]
 800ad6c:	095b      	lsrs	r3, r3, #5
 800ad6e:	21dc      	movs	r1, #220	; 0xdc
 800ad70:	187a      	adds	r2, r7, r1
 800ad72:	6013      	str	r3, [r2, #0]
 800ad74:	1d7b      	adds	r3, r7, #5
 800ad76:	33ff      	adds	r3, #255	; 0xff
 800ad78:	681b      	ldr	r3, [r3, #0]
 800ad7a:	221f      	movs	r2, #31
 800ad7c:	4013      	ands	r3, r2
 800ad7e:	d104      	bne.n	800ad8a <USB_EPStartXfer+0xf5a>
 800ad80:	187b      	adds	r3, r7, r1
 800ad82:	681b      	ldr	r3, [r3, #0]
 800ad84:	3b01      	subs	r3, #1
 800ad86:	187a      	adds	r2, r7, r1
 800ad88:	6013      	str	r3, [r2, #0]
 800ad8a:	23dc      	movs	r3, #220	; 0xdc
 800ad8c:	18fb      	adds	r3, r7, r3
 800ad8e:	681b      	ldr	r3, [r3, #0]
 800ad90:	b29b      	uxth	r3, r3
 800ad92:	029b      	lsls	r3, r3, #10
 800ad94:	b29b      	uxth	r3, r3
 800ad96:	4a7f      	ldr	r2, [pc, #508]	; (800af94 <USB_EPStartXfer+0x1164>)
 800ad98:	4313      	orrs	r3, r2
 800ad9a:	b29a      	uxth	r2, r3
 800ad9c:	23c8      	movs	r3, #200	; 0xc8
 800ad9e:	18fb      	adds	r3, r7, r3
 800ada0:	681b      	ldr	r3, [r3, #0]
 800ada2:	801a      	strh	r2, [r3, #0]
 800ada4:	e024      	b.n	800adf0 <USB_EPStartXfer+0xfc0>
 800ada6:	683b      	ldr	r3, [r7, #0]
 800ada8:	785b      	ldrb	r3, [r3, #1]
 800adaa:	2b01      	cmp	r3, #1
 800adac:	d120      	bne.n	800adf0 <USB_EPStartXfer+0xfc0>
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	21d4      	movs	r1, #212	; 0xd4
 800adb2:	187a      	adds	r2, r7, r1
 800adb4:	6013      	str	r3, [r2, #0]
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	2250      	movs	r2, #80	; 0x50
 800adba:	5a9b      	ldrh	r3, [r3, r2]
 800adbc:	b29b      	uxth	r3, r3
 800adbe:	001a      	movs	r2, r3
 800adc0:	187b      	adds	r3, r7, r1
 800adc2:	681b      	ldr	r3, [r3, #0]
 800adc4:	189b      	adds	r3, r3, r2
 800adc6:	187a      	adds	r2, r7, r1
 800adc8:	6013      	str	r3, [r2, #0]
 800adca:	683b      	ldr	r3, [r7, #0]
 800adcc:	781b      	ldrb	r3, [r3, #0]
 800adce:	00da      	lsls	r2, r3, #3
 800add0:	187b      	adds	r3, r7, r1
 800add2:	681b      	ldr	r3, [r3, #0]
 800add4:	18d3      	adds	r3, r2, r3
 800add6:	4a6d      	ldr	r2, [pc, #436]	; (800af8c <USB_EPStartXfer+0x115c>)
 800add8:	4694      	mov	ip, r2
 800adda:	4463      	add	r3, ip
 800addc:	21d0      	movs	r1, #208	; 0xd0
 800adde:	187a      	adds	r2, r7, r1
 800ade0:	6013      	str	r3, [r2, #0]
 800ade2:	1d7b      	adds	r3, r7, #5
 800ade4:	33ff      	adds	r3, #255	; 0xff
 800ade6:	681b      	ldr	r3, [r3, #0]
 800ade8:	b29a      	uxth	r2, r3
 800adea:	187b      	adds	r3, r7, r1
 800adec:	681b      	ldr	r3, [r3, #0]
 800adee:	801a      	strh	r2, [r3, #0]
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	22c4      	movs	r2, #196	; 0xc4
 800adf4:	18ba      	adds	r2, r7, r2
 800adf6:	6013      	str	r3, [r2, #0]
 800adf8:	683b      	ldr	r3, [r7, #0]
 800adfa:	785b      	ldrb	r3, [r3, #1]
 800adfc:	2b00      	cmp	r3, #0
 800adfe:	d000      	beq.n	800ae02 <USB_EPStartXfer+0xfd2>
 800ae00:	e075      	b.n	800aeee <USB_EPStartXfer+0x10be>
 800ae02:	687b      	ldr	r3, [r7, #4]
 800ae04:	21bc      	movs	r1, #188	; 0xbc
 800ae06:	187a      	adds	r2, r7, r1
 800ae08:	6013      	str	r3, [r2, #0]
 800ae0a:	687b      	ldr	r3, [r7, #4]
 800ae0c:	2250      	movs	r2, #80	; 0x50
 800ae0e:	5a9b      	ldrh	r3, [r3, r2]
 800ae10:	b29b      	uxth	r3, r3
 800ae12:	001a      	movs	r2, r3
 800ae14:	187b      	adds	r3, r7, r1
 800ae16:	681b      	ldr	r3, [r3, #0]
 800ae18:	189b      	adds	r3, r3, r2
 800ae1a:	187a      	adds	r2, r7, r1
 800ae1c:	6013      	str	r3, [r2, #0]
 800ae1e:	683b      	ldr	r3, [r7, #0]
 800ae20:	781b      	ldrb	r3, [r3, #0]
 800ae22:	00da      	lsls	r2, r3, #3
 800ae24:	187b      	adds	r3, r7, r1
 800ae26:	681b      	ldr	r3, [r3, #0]
 800ae28:	18d3      	adds	r3, r2, r3
 800ae2a:	4a5b      	ldr	r2, [pc, #364]	; (800af98 <USB_EPStartXfer+0x1168>)
 800ae2c:	4694      	mov	ip, r2
 800ae2e:	4463      	add	r3, ip
 800ae30:	21b8      	movs	r1, #184	; 0xb8
 800ae32:	187a      	adds	r2, r7, r1
 800ae34:	6013      	str	r3, [r2, #0]
 800ae36:	1d7b      	adds	r3, r7, #5
 800ae38:	33ff      	adds	r3, #255	; 0xff
 800ae3a:	681b      	ldr	r3, [r3, #0]
 800ae3c:	2b00      	cmp	r3, #0
 800ae3e:	d114      	bne.n	800ae6a <USB_EPStartXfer+0x103a>
 800ae40:	187b      	adds	r3, r7, r1
 800ae42:	681b      	ldr	r3, [r3, #0]
 800ae44:	881b      	ldrh	r3, [r3, #0]
 800ae46:	b29b      	uxth	r3, r3
 800ae48:	4a51      	ldr	r2, [pc, #324]	; (800af90 <USB_EPStartXfer+0x1160>)
 800ae4a:	4013      	ands	r3, r2
 800ae4c:	b29a      	uxth	r2, r3
 800ae4e:	187b      	adds	r3, r7, r1
 800ae50:	681b      	ldr	r3, [r3, #0]
 800ae52:	801a      	strh	r2, [r3, #0]
 800ae54:	187b      	adds	r3, r7, r1
 800ae56:	681b      	ldr	r3, [r3, #0]
 800ae58:	881b      	ldrh	r3, [r3, #0]
 800ae5a:	b29b      	uxth	r3, r3
 800ae5c:	4a4d      	ldr	r2, [pc, #308]	; (800af94 <USB_EPStartXfer+0x1164>)
 800ae5e:	4313      	orrs	r3, r2
 800ae60:	b29a      	uxth	r2, r3
 800ae62:	187b      	adds	r3, r7, r1
 800ae64:	681b      	ldr	r3, [r3, #0]
 800ae66:	801a      	strh	r2, [r3, #0]
 800ae68:	e066      	b.n	800af38 <USB_EPStartXfer+0x1108>
 800ae6a:	1d7b      	adds	r3, r7, #5
 800ae6c:	33ff      	adds	r3, #255	; 0xff
 800ae6e:	681b      	ldr	r3, [r3, #0]
 800ae70:	2b3e      	cmp	r3, #62	; 0x3e
 800ae72:	d81c      	bhi.n	800aeae <USB_EPStartXfer+0x107e>
 800ae74:	1d7b      	adds	r3, r7, #5
 800ae76:	33ff      	adds	r3, #255	; 0xff
 800ae78:	681b      	ldr	r3, [r3, #0]
 800ae7a:	085b      	lsrs	r3, r3, #1
 800ae7c:	21d8      	movs	r1, #216	; 0xd8
 800ae7e:	187a      	adds	r2, r7, r1
 800ae80:	6013      	str	r3, [r2, #0]
 800ae82:	1d7b      	adds	r3, r7, #5
 800ae84:	33ff      	adds	r3, #255	; 0xff
 800ae86:	681b      	ldr	r3, [r3, #0]
 800ae88:	2201      	movs	r2, #1
 800ae8a:	4013      	ands	r3, r2
 800ae8c:	d004      	beq.n	800ae98 <USB_EPStartXfer+0x1068>
 800ae8e:	187b      	adds	r3, r7, r1
 800ae90:	681b      	ldr	r3, [r3, #0]
 800ae92:	3301      	adds	r3, #1
 800ae94:	187a      	adds	r2, r7, r1
 800ae96:	6013      	str	r3, [r2, #0]
 800ae98:	23d8      	movs	r3, #216	; 0xd8
 800ae9a:	18fb      	adds	r3, r7, r3
 800ae9c:	681b      	ldr	r3, [r3, #0]
 800ae9e:	b29b      	uxth	r3, r3
 800aea0:	029b      	lsls	r3, r3, #10
 800aea2:	b29a      	uxth	r2, r3
 800aea4:	23b8      	movs	r3, #184	; 0xb8
 800aea6:	18fb      	adds	r3, r7, r3
 800aea8:	681b      	ldr	r3, [r3, #0]
 800aeaa:	801a      	strh	r2, [r3, #0]
 800aeac:	e044      	b.n	800af38 <USB_EPStartXfer+0x1108>
 800aeae:	1d7b      	adds	r3, r7, #5
 800aeb0:	33ff      	adds	r3, #255	; 0xff
 800aeb2:	681b      	ldr	r3, [r3, #0]
 800aeb4:	095b      	lsrs	r3, r3, #5
 800aeb6:	21d8      	movs	r1, #216	; 0xd8
 800aeb8:	187a      	adds	r2, r7, r1
 800aeba:	6013      	str	r3, [r2, #0]
 800aebc:	1d7b      	adds	r3, r7, #5
 800aebe:	33ff      	adds	r3, #255	; 0xff
 800aec0:	681b      	ldr	r3, [r3, #0]
 800aec2:	221f      	movs	r2, #31
 800aec4:	4013      	ands	r3, r2
 800aec6:	d104      	bne.n	800aed2 <USB_EPStartXfer+0x10a2>
 800aec8:	187b      	adds	r3, r7, r1
 800aeca:	681b      	ldr	r3, [r3, #0]
 800aecc:	3b01      	subs	r3, #1
 800aece:	187a      	adds	r2, r7, r1
 800aed0:	6013      	str	r3, [r2, #0]
 800aed2:	23d8      	movs	r3, #216	; 0xd8
 800aed4:	18fb      	adds	r3, r7, r3
 800aed6:	681b      	ldr	r3, [r3, #0]
 800aed8:	b29b      	uxth	r3, r3
 800aeda:	029b      	lsls	r3, r3, #10
 800aedc:	b29b      	uxth	r3, r3
 800aede:	4a2d      	ldr	r2, [pc, #180]	; (800af94 <USB_EPStartXfer+0x1164>)
 800aee0:	4313      	orrs	r3, r2
 800aee2:	b29a      	uxth	r2, r3
 800aee4:	23b8      	movs	r3, #184	; 0xb8
 800aee6:	18fb      	adds	r3, r7, r3
 800aee8:	681b      	ldr	r3, [r3, #0]
 800aeea:	801a      	strh	r2, [r3, #0]
 800aeec:	e024      	b.n	800af38 <USB_EPStartXfer+0x1108>
 800aeee:	683b      	ldr	r3, [r7, #0]
 800aef0:	785b      	ldrb	r3, [r3, #1]
 800aef2:	2b01      	cmp	r3, #1
 800aef4:	d120      	bne.n	800af38 <USB_EPStartXfer+0x1108>
 800aef6:	687b      	ldr	r3, [r7, #4]
 800aef8:	2250      	movs	r2, #80	; 0x50
 800aefa:	5a9b      	ldrh	r3, [r3, r2]
 800aefc:	b29b      	uxth	r3, r3
 800aefe:	001a      	movs	r2, r3
 800af00:	21c4      	movs	r1, #196	; 0xc4
 800af02:	187b      	adds	r3, r7, r1
 800af04:	681b      	ldr	r3, [r3, #0]
 800af06:	189b      	adds	r3, r3, r2
 800af08:	187a      	adds	r2, r7, r1
 800af0a:	6013      	str	r3, [r2, #0]
 800af0c:	683b      	ldr	r3, [r7, #0]
 800af0e:	781b      	ldrb	r3, [r3, #0]
 800af10:	00da      	lsls	r2, r3, #3
 800af12:	187b      	adds	r3, r7, r1
 800af14:	681b      	ldr	r3, [r3, #0]
 800af16:	18d3      	adds	r3, r2, r3
 800af18:	4a1f      	ldr	r2, [pc, #124]	; (800af98 <USB_EPStartXfer+0x1168>)
 800af1a:	4694      	mov	ip, r2
 800af1c:	4463      	add	r3, ip
 800af1e:	21c0      	movs	r1, #192	; 0xc0
 800af20:	187a      	adds	r2, r7, r1
 800af22:	6013      	str	r3, [r2, #0]
 800af24:	1d7b      	adds	r3, r7, #5
 800af26:	33ff      	adds	r3, #255	; 0xff
 800af28:	681b      	ldr	r3, [r3, #0]
 800af2a:	b29a      	uxth	r2, r3
 800af2c:	187b      	adds	r3, r7, r1
 800af2e:	681b      	ldr	r3, [r3, #0]
 800af30:	801a      	strh	r2, [r3, #0]
 800af32:	e001      	b.n	800af38 <USB_EPStartXfer+0x1108>
      }
      else
      {
        return HAL_ERROR;
 800af34:	2301      	movs	r3, #1
 800af36:	e025      	b.n	800af84 <USB_EPStartXfer+0x1154>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800af38:	687a      	ldr	r2, [r7, #4]
 800af3a:	683b      	ldr	r3, [r7, #0]
 800af3c:	781b      	ldrb	r3, [r3, #0]
 800af3e:	009b      	lsls	r3, r3, #2
 800af40:	18d3      	adds	r3, r2, r3
 800af42:	881b      	ldrh	r3, [r3, #0]
 800af44:	b29a      	uxth	r2, r3
 800af46:	208a      	movs	r0, #138	; 0x8a
 800af48:	183b      	adds	r3, r7, r0
 800af4a:	4914      	ldr	r1, [pc, #80]	; (800af9c <USB_EPStartXfer+0x116c>)
 800af4c:	400a      	ands	r2, r1
 800af4e:	801a      	strh	r2, [r3, #0]
 800af50:	183b      	adds	r3, r7, r0
 800af52:	183a      	adds	r2, r7, r0
 800af54:	8812      	ldrh	r2, [r2, #0]
 800af56:	2180      	movs	r1, #128	; 0x80
 800af58:	0149      	lsls	r1, r1, #5
 800af5a:	404a      	eors	r2, r1
 800af5c:	801a      	strh	r2, [r3, #0]
 800af5e:	183b      	adds	r3, r7, r0
 800af60:	183a      	adds	r2, r7, r0
 800af62:	8812      	ldrh	r2, [r2, #0]
 800af64:	2180      	movs	r1, #128	; 0x80
 800af66:	0189      	lsls	r1, r1, #6
 800af68:	404a      	eors	r2, r1
 800af6a:	801a      	strh	r2, [r3, #0]
 800af6c:	687a      	ldr	r2, [r7, #4]
 800af6e:	683b      	ldr	r3, [r7, #0]
 800af70:	781b      	ldrb	r3, [r3, #0]
 800af72:	009b      	lsls	r3, r3, #2
 800af74:	18d3      	adds	r3, r2, r3
 800af76:	183a      	adds	r2, r7, r0
 800af78:	8812      	ldrh	r2, [r2, #0]
 800af7a:	4909      	ldr	r1, [pc, #36]	; (800afa0 <USB_EPStartXfer+0x1170>)
 800af7c:	430a      	orrs	r2, r1
 800af7e:	b292      	uxth	r2, r2
 800af80:	801a      	strh	r2, [r3, #0]
  }

  return HAL_OK;
 800af82:	2300      	movs	r3, #0
}
 800af84:	0018      	movs	r0, r3
 800af86:	46bd      	mov	sp, r7
 800af88:	b043      	add	sp, #268	; 0x10c
 800af8a:	bd90      	pop	{r4, r7, pc}
 800af8c:	00000402 	.word	0x00000402
 800af90:	ffff83ff 	.word	0xffff83ff
 800af94:	ffff8000 	.word	0xffff8000
 800af98:	00000406 	.word	0x00000406
 800af9c:	ffffbf8f 	.word	0xffffbf8f
 800afa0:	ffff8080 	.word	0xffff8080

0800afa4 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800afa4:	b580      	push	{r7, lr}
 800afa6:	b084      	sub	sp, #16
 800afa8:	af00      	add	r7, sp, #0
 800afaa:	6078      	str	r0, [r7, #4]
 800afac:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800afae:	683b      	ldr	r3, [r7, #0]
 800afb0:	785b      	ldrb	r3, [r3, #1]
 800afb2:	2b00      	cmp	r3, #0
 800afb4:	d01d      	beq.n	800aff2 <USB_EPSetStall+0x4e>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800afb6:	687a      	ldr	r2, [r7, #4]
 800afb8:	683b      	ldr	r3, [r7, #0]
 800afba:	781b      	ldrb	r3, [r3, #0]
 800afbc:	009b      	lsls	r3, r3, #2
 800afbe:	18d3      	adds	r3, r2, r3
 800afc0:	881b      	ldrh	r3, [r3, #0]
 800afc2:	b29a      	uxth	r2, r3
 800afc4:	200c      	movs	r0, #12
 800afc6:	183b      	adds	r3, r7, r0
 800afc8:	491b      	ldr	r1, [pc, #108]	; (800b038 <USB_EPSetStall+0x94>)
 800afca:	400a      	ands	r2, r1
 800afcc:	801a      	strh	r2, [r3, #0]
 800afce:	183b      	adds	r3, r7, r0
 800afd0:	183a      	adds	r2, r7, r0
 800afd2:	8812      	ldrh	r2, [r2, #0]
 800afd4:	2110      	movs	r1, #16
 800afd6:	404a      	eors	r2, r1
 800afd8:	801a      	strh	r2, [r3, #0]
 800afda:	687a      	ldr	r2, [r7, #4]
 800afdc:	683b      	ldr	r3, [r7, #0]
 800afde:	781b      	ldrb	r3, [r3, #0]
 800afe0:	009b      	lsls	r3, r3, #2
 800afe2:	18d3      	adds	r3, r2, r3
 800afe4:	183a      	adds	r2, r7, r0
 800afe6:	8812      	ldrh	r2, [r2, #0]
 800afe8:	4914      	ldr	r1, [pc, #80]	; (800b03c <USB_EPSetStall+0x98>)
 800afea:	430a      	orrs	r2, r1
 800afec:	b292      	uxth	r2, r2
 800afee:	801a      	strh	r2, [r3, #0]
 800aff0:	e01d      	b.n	800b02e <USB_EPSetStall+0x8a>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800aff2:	687a      	ldr	r2, [r7, #4]
 800aff4:	683b      	ldr	r3, [r7, #0]
 800aff6:	781b      	ldrb	r3, [r3, #0]
 800aff8:	009b      	lsls	r3, r3, #2
 800affa:	18d3      	adds	r3, r2, r3
 800affc:	881b      	ldrh	r3, [r3, #0]
 800affe:	b29a      	uxth	r2, r3
 800b000:	200e      	movs	r0, #14
 800b002:	183b      	adds	r3, r7, r0
 800b004:	490e      	ldr	r1, [pc, #56]	; (800b040 <USB_EPSetStall+0x9c>)
 800b006:	400a      	ands	r2, r1
 800b008:	801a      	strh	r2, [r3, #0]
 800b00a:	183b      	adds	r3, r7, r0
 800b00c:	183a      	adds	r2, r7, r0
 800b00e:	8812      	ldrh	r2, [r2, #0]
 800b010:	2180      	movs	r1, #128	; 0x80
 800b012:	0149      	lsls	r1, r1, #5
 800b014:	404a      	eors	r2, r1
 800b016:	801a      	strh	r2, [r3, #0]
 800b018:	687a      	ldr	r2, [r7, #4]
 800b01a:	683b      	ldr	r3, [r7, #0]
 800b01c:	781b      	ldrb	r3, [r3, #0]
 800b01e:	009b      	lsls	r3, r3, #2
 800b020:	18d3      	adds	r3, r2, r3
 800b022:	183a      	adds	r2, r7, r0
 800b024:	8812      	ldrh	r2, [r2, #0]
 800b026:	4905      	ldr	r1, [pc, #20]	; (800b03c <USB_EPSetStall+0x98>)
 800b028:	430a      	orrs	r2, r1
 800b02a:	b292      	uxth	r2, r2
 800b02c:	801a      	strh	r2, [r3, #0]
  }

  return HAL_OK;
 800b02e:	2300      	movs	r3, #0
}
 800b030:	0018      	movs	r0, r3
 800b032:	46bd      	mov	sp, r7
 800b034:	b004      	add	sp, #16
 800b036:	bd80      	pop	{r7, pc}
 800b038:	ffff8fbf 	.word	0xffff8fbf
 800b03c:	ffff8080 	.word	0xffff8080
 800b040:	ffffbf8f 	.word	0xffffbf8f

0800b044 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800b044:	b580      	push	{r7, lr}
 800b046:	b086      	sub	sp, #24
 800b048:	af00      	add	r7, sp, #0
 800b04a:	6078      	str	r0, [r7, #4]
 800b04c:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800b04e:	683b      	ldr	r3, [r7, #0]
 800b050:	7b1b      	ldrb	r3, [r3, #12]
 800b052:	2b00      	cmp	r3, #0
 800b054:	d000      	beq.n	800b058 <USB_EPClearStall+0x14>
 800b056:	e095      	b.n	800b184 <USB_EPClearStall+0x140>
  {
    if (ep->is_in != 0U)
 800b058:	683b      	ldr	r3, [r7, #0]
 800b05a:	785b      	ldrb	r3, [r3, #1]
 800b05c:	2b00      	cmp	r3, #0
 800b05e:	d046      	beq.n	800b0ee <USB_EPClearStall+0xaa>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800b060:	687a      	ldr	r2, [r7, #4]
 800b062:	683b      	ldr	r3, [r7, #0]
 800b064:	781b      	ldrb	r3, [r3, #0]
 800b066:	009b      	lsls	r3, r3, #2
 800b068:	18d2      	adds	r2, r2, r3
 800b06a:	2110      	movs	r1, #16
 800b06c:	187b      	adds	r3, r7, r1
 800b06e:	8812      	ldrh	r2, [r2, #0]
 800b070:	801a      	strh	r2, [r3, #0]
 800b072:	187b      	adds	r3, r7, r1
 800b074:	881b      	ldrh	r3, [r3, #0]
 800b076:	2240      	movs	r2, #64	; 0x40
 800b078:	4013      	ands	r3, r2
 800b07a:	d016      	beq.n	800b0aa <USB_EPClearStall+0x66>
 800b07c:	687a      	ldr	r2, [r7, #4]
 800b07e:	683b      	ldr	r3, [r7, #0]
 800b080:	781b      	ldrb	r3, [r3, #0]
 800b082:	009b      	lsls	r3, r3, #2
 800b084:	18d3      	adds	r3, r2, r3
 800b086:	881b      	ldrh	r3, [r3, #0]
 800b088:	b29a      	uxth	r2, r3
 800b08a:	200e      	movs	r0, #14
 800b08c:	183b      	adds	r3, r7, r0
 800b08e:	4940      	ldr	r1, [pc, #256]	; (800b190 <USB_EPClearStall+0x14c>)
 800b090:	400a      	ands	r2, r1
 800b092:	801a      	strh	r2, [r3, #0]
 800b094:	687a      	ldr	r2, [r7, #4]
 800b096:	683b      	ldr	r3, [r7, #0]
 800b098:	781b      	ldrb	r3, [r3, #0]
 800b09a:	009b      	lsls	r3, r3, #2
 800b09c:	18d3      	adds	r3, r2, r3
 800b09e:	183a      	adds	r2, r7, r0
 800b0a0:	8812      	ldrh	r2, [r2, #0]
 800b0a2:	493c      	ldr	r1, [pc, #240]	; (800b194 <USB_EPClearStall+0x150>)
 800b0a4:	430a      	orrs	r2, r1
 800b0a6:	b292      	uxth	r2, r2
 800b0a8:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 800b0aa:	683b      	ldr	r3, [r7, #0]
 800b0ac:	78db      	ldrb	r3, [r3, #3]
 800b0ae:	2b01      	cmp	r3, #1
 800b0b0:	d068      	beq.n	800b184 <USB_EPClearStall+0x140>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800b0b2:	687a      	ldr	r2, [r7, #4]
 800b0b4:	683b      	ldr	r3, [r7, #0]
 800b0b6:	781b      	ldrb	r3, [r3, #0]
 800b0b8:	009b      	lsls	r3, r3, #2
 800b0ba:	18d3      	adds	r3, r2, r3
 800b0bc:	881b      	ldrh	r3, [r3, #0]
 800b0be:	b29a      	uxth	r2, r3
 800b0c0:	200c      	movs	r0, #12
 800b0c2:	183b      	adds	r3, r7, r0
 800b0c4:	4934      	ldr	r1, [pc, #208]	; (800b198 <USB_EPClearStall+0x154>)
 800b0c6:	400a      	ands	r2, r1
 800b0c8:	801a      	strh	r2, [r3, #0]
 800b0ca:	183b      	adds	r3, r7, r0
 800b0cc:	183a      	adds	r2, r7, r0
 800b0ce:	8812      	ldrh	r2, [r2, #0]
 800b0d0:	2120      	movs	r1, #32
 800b0d2:	404a      	eors	r2, r1
 800b0d4:	801a      	strh	r2, [r3, #0]
 800b0d6:	687a      	ldr	r2, [r7, #4]
 800b0d8:	683b      	ldr	r3, [r7, #0]
 800b0da:	781b      	ldrb	r3, [r3, #0]
 800b0dc:	009b      	lsls	r3, r3, #2
 800b0de:	18d3      	adds	r3, r2, r3
 800b0e0:	183a      	adds	r2, r7, r0
 800b0e2:	8812      	ldrh	r2, [r2, #0]
 800b0e4:	492d      	ldr	r1, [pc, #180]	; (800b19c <USB_EPClearStall+0x158>)
 800b0e6:	430a      	orrs	r2, r1
 800b0e8:	b292      	uxth	r2, r2
 800b0ea:	801a      	strh	r2, [r3, #0]
 800b0ec:	e04a      	b.n	800b184 <USB_EPClearStall+0x140>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800b0ee:	687a      	ldr	r2, [r7, #4]
 800b0f0:	683b      	ldr	r3, [r7, #0]
 800b0f2:	781b      	ldrb	r3, [r3, #0]
 800b0f4:	009b      	lsls	r3, r3, #2
 800b0f6:	18d2      	adds	r2, r2, r3
 800b0f8:	2116      	movs	r1, #22
 800b0fa:	187b      	adds	r3, r7, r1
 800b0fc:	8812      	ldrh	r2, [r2, #0]
 800b0fe:	801a      	strh	r2, [r3, #0]
 800b100:	187b      	adds	r3, r7, r1
 800b102:	881a      	ldrh	r2, [r3, #0]
 800b104:	2380      	movs	r3, #128	; 0x80
 800b106:	01db      	lsls	r3, r3, #7
 800b108:	4013      	ands	r3, r2
 800b10a:	d016      	beq.n	800b13a <USB_EPClearStall+0xf6>
 800b10c:	687a      	ldr	r2, [r7, #4]
 800b10e:	683b      	ldr	r3, [r7, #0]
 800b110:	781b      	ldrb	r3, [r3, #0]
 800b112:	009b      	lsls	r3, r3, #2
 800b114:	18d3      	adds	r3, r2, r3
 800b116:	881b      	ldrh	r3, [r3, #0]
 800b118:	b29a      	uxth	r2, r3
 800b11a:	2014      	movs	r0, #20
 800b11c:	183b      	adds	r3, r7, r0
 800b11e:	491c      	ldr	r1, [pc, #112]	; (800b190 <USB_EPClearStall+0x14c>)
 800b120:	400a      	ands	r2, r1
 800b122:	801a      	strh	r2, [r3, #0]
 800b124:	687a      	ldr	r2, [r7, #4]
 800b126:	683b      	ldr	r3, [r7, #0]
 800b128:	781b      	ldrb	r3, [r3, #0]
 800b12a:	009b      	lsls	r3, r3, #2
 800b12c:	18d3      	adds	r3, r2, r3
 800b12e:	183a      	adds	r2, r7, r0
 800b130:	8812      	ldrh	r2, [r2, #0]
 800b132:	491b      	ldr	r1, [pc, #108]	; (800b1a0 <USB_EPClearStall+0x15c>)
 800b134:	430a      	orrs	r2, r1
 800b136:	b292      	uxth	r2, r2
 800b138:	801a      	strh	r2, [r3, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800b13a:	687a      	ldr	r2, [r7, #4]
 800b13c:	683b      	ldr	r3, [r7, #0]
 800b13e:	781b      	ldrb	r3, [r3, #0]
 800b140:	009b      	lsls	r3, r3, #2
 800b142:	18d3      	adds	r3, r2, r3
 800b144:	881b      	ldrh	r3, [r3, #0]
 800b146:	b29a      	uxth	r2, r3
 800b148:	2012      	movs	r0, #18
 800b14a:	183b      	adds	r3, r7, r0
 800b14c:	4915      	ldr	r1, [pc, #84]	; (800b1a4 <USB_EPClearStall+0x160>)
 800b14e:	400a      	ands	r2, r1
 800b150:	801a      	strh	r2, [r3, #0]
 800b152:	183b      	adds	r3, r7, r0
 800b154:	183a      	adds	r2, r7, r0
 800b156:	8812      	ldrh	r2, [r2, #0]
 800b158:	2180      	movs	r1, #128	; 0x80
 800b15a:	0149      	lsls	r1, r1, #5
 800b15c:	404a      	eors	r2, r1
 800b15e:	801a      	strh	r2, [r3, #0]
 800b160:	183b      	adds	r3, r7, r0
 800b162:	183a      	adds	r2, r7, r0
 800b164:	8812      	ldrh	r2, [r2, #0]
 800b166:	2180      	movs	r1, #128	; 0x80
 800b168:	0189      	lsls	r1, r1, #6
 800b16a:	404a      	eors	r2, r1
 800b16c:	801a      	strh	r2, [r3, #0]
 800b16e:	687a      	ldr	r2, [r7, #4]
 800b170:	683b      	ldr	r3, [r7, #0]
 800b172:	781b      	ldrb	r3, [r3, #0]
 800b174:	009b      	lsls	r3, r3, #2
 800b176:	18d3      	adds	r3, r2, r3
 800b178:	183a      	adds	r2, r7, r0
 800b17a:	8812      	ldrh	r2, [r2, #0]
 800b17c:	4907      	ldr	r1, [pc, #28]	; (800b19c <USB_EPClearStall+0x158>)
 800b17e:	430a      	orrs	r2, r1
 800b180:	b292      	uxth	r2, r2
 800b182:	801a      	strh	r2, [r3, #0]
    }
  }

  return HAL_OK;
 800b184:	2300      	movs	r3, #0
}
 800b186:	0018      	movs	r0, r3
 800b188:	46bd      	mov	sp, r7
 800b18a:	b006      	add	sp, #24
 800b18c:	bd80      	pop	{r7, pc}
 800b18e:	46c0      	nop			; (mov r8, r8)
 800b190:	ffff8f8f 	.word	0xffff8f8f
 800b194:	ffff80c0 	.word	0xffff80c0
 800b198:	ffff8fbf 	.word	0xffff8fbf
 800b19c:	ffff8080 	.word	0xffff8080
 800b1a0:	ffffc080 	.word	0xffffc080
 800b1a4:	ffffbf8f 	.word	0xffffbf8f

0800b1a8 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800b1a8:	b580      	push	{r7, lr}
 800b1aa:	b082      	sub	sp, #8
 800b1ac:	af00      	add	r7, sp, #0
 800b1ae:	6078      	str	r0, [r7, #4]
 800b1b0:	000a      	movs	r2, r1
 800b1b2:	1cfb      	adds	r3, r7, #3
 800b1b4:	701a      	strb	r2, [r3, #0]
  if (address == 0U)
 800b1b6:	1cfb      	adds	r3, r7, #3
 800b1b8:	781b      	ldrb	r3, [r3, #0]
 800b1ba:	2b00      	cmp	r3, #0
 800b1bc:	d103      	bne.n	800b1c6 <USB_SetDevAddress+0x1e>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800b1be:	687b      	ldr	r3, [r7, #4]
 800b1c0:	224c      	movs	r2, #76	; 0x4c
 800b1c2:	2180      	movs	r1, #128	; 0x80
 800b1c4:	5299      	strh	r1, [r3, r2]
  }

  return HAL_OK;
 800b1c6:	2300      	movs	r3, #0
}
 800b1c8:	0018      	movs	r0, r3
 800b1ca:	46bd      	mov	sp, r7
 800b1cc:	b002      	add	sp, #8
 800b1ce:	bd80      	pop	{r7, pc}

0800b1d0 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800b1d0:	b580      	push	{r7, lr}
 800b1d2:	b082      	sub	sp, #8
 800b1d4:	af00      	add	r7, sp, #0
 800b1d6:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 800b1d8:	687b      	ldr	r3, [r7, #4]
 800b1da:	2258      	movs	r2, #88	; 0x58
 800b1dc:	5a9b      	ldrh	r3, [r3, r2]
 800b1de:	b29b      	uxth	r3, r3
 800b1e0:	4a05      	ldr	r2, [pc, #20]	; (800b1f8 <USB_DevConnect+0x28>)
 800b1e2:	4313      	orrs	r3, r2
 800b1e4:	b299      	uxth	r1, r3
 800b1e6:	687b      	ldr	r3, [r7, #4]
 800b1e8:	2258      	movs	r2, #88	; 0x58
 800b1ea:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 800b1ec:	2300      	movs	r3, #0
}
 800b1ee:	0018      	movs	r0, r3
 800b1f0:	46bd      	mov	sp, r7
 800b1f2:	b002      	add	sp, #8
 800b1f4:	bd80      	pop	{r7, pc}
 800b1f6:	46c0      	nop			; (mov r8, r8)
 800b1f8:	ffff8000 	.word	0xffff8000

0800b1fc <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 800b1fc:	b580      	push	{r7, lr}
 800b1fe:	b084      	sub	sp, #16
 800b200:	af00      	add	r7, sp, #0
 800b202:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800b204:	687b      	ldr	r3, [r7, #4]
 800b206:	2244      	movs	r2, #68	; 0x44
 800b208:	5a9b      	ldrh	r3, [r3, r2]
 800b20a:	b29b      	uxth	r3, r3
 800b20c:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800b20e:	68fb      	ldr	r3, [r7, #12]
}
 800b210:	0018      	movs	r0, r3
 800b212:	46bd      	mov	sp, r7
 800b214:	b004      	add	sp, #16
 800b216:	bd80      	pop	{r7, pc}

0800b218 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800b218:	b580      	push	{r7, lr}
 800b21a:	b08c      	sub	sp, #48	; 0x30
 800b21c:	af00      	add	r7, sp, #0
 800b21e:	60f8      	str	r0, [r7, #12]
 800b220:	60b9      	str	r1, [r7, #8]
 800b222:	0019      	movs	r1, r3
 800b224:	1dbb      	adds	r3, r7, #6
 800b226:	801a      	strh	r2, [r3, #0]
 800b228:	1d3b      	adds	r3, r7, #4
 800b22a:	1c0a      	adds	r2, r1, #0
 800b22c:	801a      	strh	r2, [r3, #0]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800b22e:	1d3b      	adds	r3, r7, #4
 800b230:	881b      	ldrh	r3, [r3, #0]
 800b232:	3301      	adds	r3, #1
 800b234:	085b      	lsrs	r3, r3, #1
 800b236:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 800b238:	68fb      	ldr	r3, [r7, #12]
 800b23a:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800b23c:	68bb      	ldr	r3, [r7, #8]
 800b23e:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800b240:	1dbb      	adds	r3, r7, #6
 800b242:	881a      	ldrh	r2, [r3, #0]
 800b244:	69fb      	ldr	r3, [r7, #28]
 800b246:	18d3      	adds	r3, r2, r3
 800b248:	2280      	movs	r2, #128	; 0x80
 800b24a:	00d2      	lsls	r2, r2, #3
 800b24c:	4694      	mov	ip, r2
 800b24e:	4463      	add	r3, ip
 800b250:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 800b252:	6a3b      	ldr	r3, [r7, #32]
 800b254:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b256:	e01b      	b.n	800b290 <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 800b258:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b25a:	781b      	ldrb	r3, [r3, #0]
 800b25c:	61bb      	str	r3, [r7, #24]
    pBuf++;
 800b25e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b260:	3301      	adds	r3, #1
 800b262:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 800b264:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b266:	781b      	ldrb	r3, [r3, #0]
 800b268:	b29b      	uxth	r3, r3
 800b26a:	021b      	lsls	r3, r3, #8
 800b26c:	b29b      	uxth	r3, r3
 800b26e:	001a      	movs	r2, r3
 800b270:	69bb      	ldr	r3, [r7, #24]
 800b272:	4313      	orrs	r3, r2
 800b274:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 800b276:	697b      	ldr	r3, [r7, #20]
 800b278:	b29a      	uxth	r2, r3
 800b27a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b27c:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800b27e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b280:	3302      	adds	r3, #2
 800b282:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
#endif

    pBuf++;
 800b284:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b286:	3301      	adds	r3, #1
 800b288:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 800b28a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b28c:	3b01      	subs	r3, #1
 800b28e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b290:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b292:	2b00      	cmp	r3, #0
 800b294:	d1e0      	bne.n	800b258 <USB_WritePMA+0x40>
  }
}
 800b296:	46c0      	nop			; (mov r8, r8)
 800b298:	46c0      	nop			; (mov r8, r8)
 800b29a:	46bd      	mov	sp, r7
 800b29c:	b00c      	add	sp, #48	; 0x30
 800b29e:	bd80      	pop	{r7, pc}

0800b2a0 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800b2a0:	b580      	push	{r7, lr}
 800b2a2:	b08a      	sub	sp, #40	; 0x28
 800b2a4:	af00      	add	r7, sp, #0
 800b2a6:	60f8      	str	r0, [r7, #12]
 800b2a8:	60b9      	str	r1, [r7, #8]
 800b2aa:	0019      	movs	r1, r3
 800b2ac:	1dbb      	adds	r3, r7, #6
 800b2ae:	801a      	strh	r2, [r3, #0]
 800b2b0:	1d3b      	adds	r3, r7, #4
 800b2b2:	1c0a      	adds	r2, r1, #0
 800b2b4:	801a      	strh	r2, [r3, #0]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800b2b6:	1d3b      	adds	r3, r7, #4
 800b2b8:	881b      	ldrh	r3, [r3, #0]
 800b2ba:	085b      	lsrs	r3, r3, #1
 800b2bc:	b29b      	uxth	r3, r3
 800b2be:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800b2c0:	68fb      	ldr	r3, [r7, #12]
 800b2c2:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800b2c4:	68bb      	ldr	r3, [r7, #8]
 800b2c6:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800b2c8:	1dbb      	adds	r3, r7, #6
 800b2ca:	881a      	ldrh	r2, [r3, #0]
 800b2cc:	697b      	ldr	r3, [r7, #20]
 800b2ce:	18d3      	adds	r3, r2, r3
 800b2d0:	2280      	movs	r2, #128	; 0x80
 800b2d2:	00d2      	lsls	r2, r2, #3
 800b2d4:	4694      	mov	ip, r2
 800b2d6:	4463      	add	r3, ip
 800b2d8:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 800b2da:	69bb      	ldr	r3, [r7, #24]
 800b2dc:	627b      	str	r3, [r7, #36]	; 0x24
 800b2de:	e018      	b.n	800b312 <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 800b2e0:	6a3b      	ldr	r3, [r7, #32]
 800b2e2:	881b      	ldrh	r3, [r3, #0]
 800b2e4:	b29b      	uxth	r3, r3
 800b2e6:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800b2e8:	6a3b      	ldr	r3, [r7, #32]
 800b2ea:	3302      	adds	r3, #2
 800b2ec:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800b2ee:	693b      	ldr	r3, [r7, #16]
 800b2f0:	b2da      	uxtb	r2, r3
 800b2f2:	69fb      	ldr	r3, [r7, #28]
 800b2f4:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800b2f6:	69fb      	ldr	r3, [r7, #28]
 800b2f8:	3301      	adds	r3, #1
 800b2fa:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 800b2fc:	693b      	ldr	r3, [r7, #16]
 800b2fe:	0a1b      	lsrs	r3, r3, #8
 800b300:	b2da      	uxtb	r2, r3
 800b302:	69fb      	ldr	r3, [r7, #28]
 800b304:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800b306:	69fb      	ldr	r3, [r7, #28]
 800b308:	3301      	adds	r3, #1
 800b30a:	61fb      	str	r3, [r7, #28]
  for (i = n; i != 0U; i--)
 800b30c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b30e:	3b01      	subs	r3, #1
 800b310:	627b      	str	r3, [r7, #36]	; 0x24
 800b312:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b314:	2b00      	cmp	r3, #0
 800b316:	d1e3      	bne.n	800b2e0 <USB_ReadPMA+0x40>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif
  }

  if ((wNBytes % 2U) != 0U)
 800b318:	1d3b      	adds	r3, r7, #4
 800b31a:	881b      	ldrh	r3, [r3, #0]
 800b31c:	2201      	movs	r2, #1
 800b31e:	4013      	ands	r3, r2
 800b320:	b29b      	uxth	r3, r3
 800b322:	2b00      	cmp	r3, #0
 800b324:	d007      	beq.n	800b336 <USB_ReadPMA+0x96>
  {
    temp = *pdwVal;
 800b326:	6a3b      	ldr	r3, [r7, #32]
 800b328:	881b      	ldrh	r3, [r3, #0]
 800b32a:	b29b      	uxth	r3, r3
 800b32c:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800b32e:	693b      	ldr	r3, [r7, #16]
 800b330:	b2da      	uxtb	r2, r3
 800b332:	69fb      	ldr	r3, [r7, #28]
 800b334:	701a      	strb	r2, [r3, #0]
  }
}
 800b336:	46c0      	nop			; (mov r8, r8)
 800b338:	46bd      	mov	sp, r7
 800b33a:	b00a      	add	sp, #40	; 0x28
 800b33c:	bd80      	pop	{r7, pc}

0800b33e <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b33e:	b580      	push	{r7, lr}
 800b340:	b084      	sub	sp, #16
 800b342:	af00      	add	r7, sp, #0
 800b344:	6078      	str	r0, [r7, #4]
 800b346:	000a      	movs	r2, r1
 800b348:	1cfb      	adds	r3, r7, #3
 800b34a:	701a      	strb	r2, [r3, #0]
  uint8_t ret = 0U;
 800b34c:	230f      	movs	r3, #15
 800b34e:	18fb      	adds	r3, r7, r3
 800b350:	2200      	movs	r2, #0
 800b352:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b354:	687b      	ldr	r3, [r7, #4]
 800b356:	7c1b      	ldrb	r3, [r3, #16]
 800b358:	2b00      	cmp	r3, #0
 800b35a:	d116      	bne.n	800b38a <USBD_CDC_Init+0x4c>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800b35c:	2380      	movs	r3, #128	; 0x80
 800b35e:	009b      	lsls	r3, r3, #2
 800b360:	6878      	ldr	r0, [r7, #4]
 800b362:	2202      	movs	r2, #2
 800b364:	2181      	movs	r1, #129	; 0x81
 800b366:	f002 f8b4 	bl	800d4d2 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800b36a:	687b      	ldr	r3, [r7, #4]
 800b36c:	2201      	movs	r2, #1
 800b36e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800b370:	2380      	movs	r3, #128	; 0x80
 800b372:	009b      	lsls	r3, r3, #2
 800b374:	6878      	ldr	r0, [r7, #4]
 800b376:	2202      	movs	r2, #2
 800b378:	2101      	movs	r1, #1
 800b37a:	f002 f8aa 	bl	800d4d2 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800b37e:	687a      	ldr	r2, [r7, #4]
 800b380:	23b6      	movs	r3, #182	; 0xb6
 800b382:	005b      	lsls	r3, r3, #1
 800b384:	2101      	movs	r1, #1
 800b386:	50d1      	str	r1, [r2, r3]
 800b388:	e013      	b.n	800b3b2 <USBD_CDC_Init+0x74>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800b38a:	6878      	ldr	r0, [r7, #4]
 800b38c:	2340      	movs	r3, #64	; 0x40
 800b38e:	2202      	movs	r2, #2
 800b390:	2181      	movs	r1, #129	; 0x81
 800b392:	f002 f89e 	bl	800d4d2 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800b396:	687b      	ldr	r3, [r7, #4]
 800b398:	2201      	movs	r2, #1
 800b39a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800b39c:	6878      	ldr	r0, [r7, #4]
 800b39e:	2340      	movs	r3, #64	; 0x40
 800b3a0:	2202      	movs	r2, #2
 800b3a2:	2101      	movs	r1, #1
 800b3a4:	f002 f895 	bl	800d4d2 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800b3a8:	687a      	ldr	r2, [r7, #4]
 800b3aa:	23b6      	movs	r3, #182	; 0xb6
 800b3ac:	005b      	lsls	r3, r3, #1
 800b3ae:	2101      	movs	r1, #1
 800b3b0:	50d1      	str	r1, [r2, r3]
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800b3b2:	6878      	ldr	r0, [r7, #4]
 800b3b4:	2308      	movs	r3, #8
 800b3b6:	2203      	movs	r2, #3
 800b3b8:	2182      	movs	r1, #130	; 0x82
 800b3ba:	f002 f88a 	bl	800d4d2 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800b3be:	687b      	ldr	r3, [r7, #4]
 800b3c0:	2201      	movs	r2, #1
 800b3c2:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800b3c4:	2387      	movs	r3, #135	; 0x87
 800b3c6:	009b      	lsls	r3, r3, #2
 800b3c8:	0018      	movs	r0, r3
 800b3ca:	f002 fa1b 	bl	800d804 <USBD_static_malloc>
 800b3ce:	0001      	movs	r1, r0
 800b3d0:	687a      	ldr	r2, [r7, #4]
 800b3d2:	23ae      	movs	r3, #174	; 0xae
 800b3d4:	009b      	lsls	r3, r3, #2
 800b3d6:	50d1      	str	r1, [r2, r3]

  if (pdev->pClassData == NULL)
 800b3d8:	687a      	ldr	r2, [r7, #4]
 800b3da:	23ae      	movs	r3, #174	; 0xae
 800b3dc:	009b      	lsls	r3, r3, #2
 800b3de:	58d3      	ldr	r3, [r2, r3]
 800b3e0:	2b00      	cmp	r3, #0
 800b3e2:	d104      	bne.n	800b3ee <USBD_CDC_Init+0xb0>
  {
    ret = 1U;
 800b3e4:	230f      	movs	r3, #15
 800b3e6:	18fb      	adds	r3, r7, r3
 800b3e8:	2201      	movs	r2, #1
 800b3ea:	701a      	strb	r2, [r3, #0]
 800b3ec:	e02c      	b.n	800b448 <USBD_CDC_Init+0x10a>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800b3ee:	687a      	ldr	r2, [r7, #4]
 800b3f0:	23ae      	movs	r3, #174	; 0xae
 800b3f2:	009b      	lsls	r3, r3, #2
 800b3f4:	58d3      	ldr	r3, [r2, r3]
 800b3f6:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800b3f8:	687a      	ldr	r2, [r7, #4]
 800b3fa:	23af      	movs	r3, #175	; 0xaf
 800b3fc:	009b      	lsls	r3, r3, #2
 800b3fe:	58d3      	ldr	r3, [r2, r3]
 800b400:	681b      	ldr	r3, [r3, #0]
 800b402:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 800b404:	68ba      	ldr	r2, [r7, #8]
 800b406:	2385      	movs	r3, #133	; 0x85
 800b408:	009b      	lsls	r3, r3, #2
 800b40a:	2100      	movs	r1, #0
 800b40c:	50d1      	str	r1, [r2, r3]
    hcdc->RxState = 0U;
 800b40e:	68ba      	ldr	r2, [r7, #8]
 800b410:	2386      	movs	r3, #134	; 0x86
 800b412:	009b      	lsls	r3, r3, #2
 800b414:	2100      	movs	r1, #0
 800b416:	50d1      	str	r1, [r2, r3]

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b418:	687b      	ldr	r3, [r7, #4]
 800b41a:	7c1b      	ldrb	r3, [r3, #16]
 800b41c:	2b00      	cmp	r3, #0
 800b41e:	d10a      	bne.n	800b436 <USBD_CDC_Init+0xf8>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800b420:	68ba      	ldr	r2, [r7, #8]
 800b422:	2381      	movs	r3, #129	; 0x81
 800b424:	009b      	lsls	r3, r3, #2
 800b426:	58d2      	ldr	r2, [r2, r3]
 800b428:	2380      	movs	r3, #128	; 0x80
 800b42a:	009b      	lsls	r3, r3, #2
 800b42c:	6878      	ldr	r0, [r7, #4]
 800b42e:	2101      	movs	r1, #1
 800b430:	f002 f99a 	bl	800d768 <USBD_LL_PrepareReceive>
 800b434:	e008      	b.n	800b448 <USBD_CDC_Init+0x10a>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800b436:	68ba      	ldr	r2, [r7, #8]
 800b438:	2381      	movs	r3, #129	; 0x81
 800b43a:	009b      	lsls	r3, r3, #2
 800b43c:	58d2      	ldr	r2, [r2, r3]
 800b43e:	6878      	ldr	r0, [r7, #4]
 800b440:	2340      	movs	r3, #64	; 0x40
 800b442:	2101      	movs	r1, #1
 800b444:	f002 f990 	bl	800d768 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 800b448:	230f      	movs	r3, #15
 800b44a:	18fb      	adds	r3, r7, r3
 800b44c:	781b      	ldrb	r3, [r3, #0]
}
 800b44e:	0018      	movs	r0, r3
 800b450:	46bd      	mov	sp, r7
 800b452:	b004      	add	sp, #16
 800b454:	bd80      	pop	{r7, pc}

0800b456 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b456:	b580      	push	{r7, lr}
 800b458:	b084      	sub	sp, #16
 800b45a:	af00      	add	r7, sp, #0
 800b45c:	6078      	str	r0, [r7, #4]
 800b45e:	000a      	movs	r2, r1
 800b460:	1cfb      	adds	r3, r7, #3
 800b462:	701a      	strb	r2, [r3, #0]
  uint8_t ret = 0U;
 800b464:	230f      	movs	r3, #15
 800b466:	18fb      	adds	r3, r7, r3
 800b468:	2200      	movs	r2, #0
 800b46a:	701a      	strb	r2, [r3, #0]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800b46c:	687b      	ldr	r3, [r7, #4]
 800b46e:	2181      	movs	r1, #129	; 0x81
 800b470:	0018      	movs	r0, r3
 800b472:	f002 f865 	bl	800d540 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800b476:	687b      	ldr	r3, [r7, #4]
 800b478:	2200      	movs	r2, #0
 800b47a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800b47c:	687b      	ldr	r3, [r7, #4]
 800b47e:	2101      	movs	r1, #1
 800b480:	0018      	movs	r0, r3
 800b482:	f002 f85d 	bl	800d540 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800b486:	687a      	ldr	r2, [r7, #4]
 800b488:	23b6      	movs	r3, #182	; 0xb6
 800b48a:	005b      	lsls	r3, r3, #1
 800b48c:	2100      	movs	r1, #0
 800b48e:	50d1      	str	r1, [r2, r3]

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800b490:	687b      	ldr	r3, [r7, #4]
 800b492:	2182      	movs	r1, #130	; 0x82
 800b494:	0018      	movs	r0, r3
 800b496:	f002 f853 	bl	800d540 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800b49a:	687b      	ldr	r3, [r7, #4]
 800b49c:	2200      	movs	r2, #0
 800b49e:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800b4a0:	687a      	ldr	r2, [r7, #4]
 800b4a2:	23ae      	movs	r3, #174	; 0xae
 800b4a4:	009b      	lsls	r3, r3, #2
 800b4a6:	58d3      	ldr	r3, [r2, r3]
 800b4a8:	2b00      	cmp	r3, #0
 800b4aa:	d011      	beq.n	800b4d0 <USBD_CDC_DeInit+0x7a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800b4ac:	687a      	ldr	r2, [r7, #4]
 800b4ae:	23af      	movs	r3, #175	; 0xaf
 800b4b0:	009b      	lsls	r3, r3, #2
 800b4b2:	58d3      	ldr	r3, [r2, r3]
 800b4b4:	685b      	ldr	r3, [r3, #4]
 800b4b6:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 800b4b8:	687a      	ldr	r2, [r7, #4]
 800b4ba:	23ae      	movs	r3, #174	; 0xae
 800b4bc:	009b      	lsls	r3, r3, #2
 800b4be:	58d3      	ldr	r3, [r2, r3]
 800b4c0:	0018      	movs	r0, r3
 800b4c2:	f002 f9ab 	bl	800d81c <USBD_static_free>
    pdev->pClassData = NULL;
 800b4c6:	687a      	ldr	r2, [r7, #4]
 800b4c8:	23ae      	movs	r3, #174	; 0xae
 800b4ca:	009b      	lsls	r3, r3, #2
 800b4cc:	2100      	movs	r1, #0
 800b4ce:	50d1      	str	r1, [r2, r3]
  }

  return ret;
 800b4d0:	230f      	movs	r3, #15
 800b4d2:	18fb      	adds	r3, r7, r3
 800b4d4:	781b      	ldrb	r3, [r3, #0]
}
 800b4d6:	0018      	movs	r0, r3
 800b4d8:	46bd      	mov	sp, r7
 800b4da:	b004      	add	sp, #16
 800b4dc:	bd80      	pop	{r7, pc}
	...

0800b4e0 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800b4e0:	b580      	push	{r7, lr}
 800b4e2:	b086      	sub	sp, #24
 800b4e4:	af00      	add	r7, sp, #0
 800b4e6:	6078      	str	r0, [r7, #4]
 800b4e8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800b4ea:	687a      	ldr	r2, [r7, #4]
 800b4ec:	23ae      	movs	r3, #174	; 0xae
 800b4ee:	009b      	lsls	r3, r3, #2
 800b4f0:	58d3      	ldr	r3, [r2, r3]
 800b4f2:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 800b4f4:	230f      	movs	r3, #15
 800b4f6:	18fb      	adds	r3, r7, r3
 800b4f8:	2200      	movs	r2, #0
 800b4fa:	701a      	strb	r2, [r3, #0]
  uint16_t status_info = 0U;
 800b4fc:	230c      	movs	r3, #12
 800b4fe:	18fb      	adds	r3, r7, r3
 800b500:	2200      	movs	r2, #0
 800b502:	801a      	strh	r2, [r3, #0]
  uint8_t ret = USBD_OK;
 800b504:	2317      	movs	r3, #23
 800b506:	18fb      	adds	r3, r7, r3
 800b508:	2200      	movs	r2, #0
 800b50a:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b50c:	683b      	ldr	r3, [r7, #0]
 800b50e:	781b      	ldrb	r3, [r3, #0]
 800b510:	001a      	movs	r2, r3
 800b512:	2360      	movs	r3, #96	; 0x60
 800b514:	4013      	ands	r3, r2
 800b516:	d03d      	beq.n	800b594 <USBD_CDC_Setup+0xb4>
 800b518:	2b20      	cmp	r3, #32
 800b51a:	d000      	beq.n	800b51e <USBD_CDC_Setup+0x3e>
 800b51c:	e094      	b.n	800b648 <USBD_CDC_Setup+0x168>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 800b51e:	683b      	ldr	r3, [r7, #0]
 800b520:	88db      	ldrh	r3, [r3, #6]
 800b522:	2b00      	cmp	r3, #0
 800b524:	d02b      	beq.n	800b57e <USBD_CDC_Setup+0x9e>
      {
        if (req->bmRequest & 0x80U)
 800b526:	683b      	ldr	r3, [r7, #0]
 800b528:	781b      	ldrb	r3, [r3, #0]
 800b52a:	b25b      	sxtb	r3, r3
 800b52c:	2b00      	cmp	r3, #0
 800b52e:	da12      	bge.n	800b556 <USBD_CDC_Setup+0x76>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800b530:	687a      	ldr	r2, [r7, #4]
 800b532:	23af      	movs	r3, #175	; 0xaf
 800b534:	009b      	lsls	r3, r3, #2
 800b536:	58d3      	ldr	r3, [r2, r3]
 800b538:	689b      	ldr	r3, [r3, #8]
 800b53a:	683a      	ldr	r2, [r7, #0]
 800b53c:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 800b53e:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800b540:	683a      	ldr	r2, [r7, #0]
 800b542:	88d2      	ldrh	r2, [r2, #6]
 800b544:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800b546:	6939      	ldr	r1, [r7, #16]
 800b548:	683b      	ldr	r3, [r7, #0]
 800b54a:	88da      	ldrh	r2, [r3, #6]
 800b54c:	687b      	ldr	r3, [r7, #4]
 800b54e:	0018      	movs	r0, r3
 800b550:	f001 fbb2 	bl	800ccb8 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 800b554:	e083      	b.n	800b65e <USBD_CDC_Setup+0x17e>
          hcdc->CmdOpCode = req->bRequest;
 800b556:	683b      	ldr	r3, [r7, #0]
 800b558:	7859      	ldrb	r1, [r3, #1]
 800b55a:	693a      	ldr	r2, [r7, #16]
 800b55c:	2380      	movs	r3, #128	; 0x80
 800b55e:	009b      	lsls	r3, r3, #2
 800b560:	54d1      	strb	r1, [r2, r3]
          hcdc->CmdLength = (uint8_t)req->wLength;
 800b562:	683b      	ldr	r3, [r7, #0]
 800b564:	88db      	ldrh	r3, [r3, #6]
 800b566:	b2d9      	uxtb	r1, r3
 800b568:	693b      	ldr	r3, [r7, #16]
 800b56a:	4a40      	ldr	r2, [pc, #256]	; (800b66c <USBD_CDC_Setup+0x18c>)
 800b56c:	5499      	strb	r1, [r3, r2]
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800b56e:	6939      	ldr	r1, [r7, #16]
 800b570:	683b      	ldr	r3, [r7, #0]
 800b572:	88da      	ldrh	r2, [r3, #6]
 800b574:	687b      	ldr	r3, [r7, #4]
 800b576:	0018      	movs	r0, r3
 800b578:	f001 fbd1 	bl	800cd1e <USBD_CtlPrepareRx>
      break;
 800b57c:	e06f      	b.n	800b65e <USBD_CDC_Setup+0x17e>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800b57e:	687a      	ldr	r2, [r7, #4]
 800b580:	23af      	movs	r3, #175	; 0xaf
 800b582:	009b      	lsls	r3, r3, #2
 800b584:	58d3      	ldr	r3, [r2, r3]
 800b586:	689b      	ldr	r3, [r3, #8]
 800b588:	683a      	ldr	r2, [r7, #0]
 800b58a:	7850      	ldrb	r0, [r2, #1]
 800b58c:	6839      	ldr	r1, [r7, #0]
 800b58e:	2200      	movs	r2, #0
 800b590:	4798      	blx	r3
      break;
 800b592:	e064      	b.n	800b65e <USBD_CDC_Setup+0x17e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b594:	683b      	ldr	r3, [r7, #0]
 800b596:	785b      	ldrb	r3, [r3, #1]
 800b598:	2b0b      	cmp	r3, #11
 800b59a:	d037      	beq.n	800b60c <USBD_CDC_Setup+0x12c>
 800b59c:	dc47      	bgt.n	800b62e <USBD_CDC_Setup+0x14e>
 800b59e:	2b00      	cmp	r3, #0
 800b5a0:	d002      	beq.n	800b5a8 <USBD_CDC_Setup+0xc8>
 800b5a2:	2b0a      	cmp	r3, #10
 800b5a4:	d019      	beq.n	800b5da <USBD_CDC_Setup+0xfa>
 800b5a6:	e042      	b.n	800b62e <USBD_CDC_Setup+0x14e>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b5a8:	687a      	ldr	r2, [r7, #4]
 800b5aa:	23a7      	movs	r3, #167	; 0xa7
 800b5ac:	009b      	lsls	r3, r3, #2
 800b5ae:	5cd3      	ldrb	r3, [r2, r3]
 800b5b0:	2b03      	cmp	r3, #3
 800b5b2:	d107      	bne.n	800b5c4 <USBD_CDC_Setup+0xe4>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 800b5b4:	230c      	movs	r3, #12
 800b5b6:	18f9      	adds	r1, r7, r3
 800b5b8:	687b      	ldr	r3, [r7, #4]
 800b5ba:	2202      	movs	r2, #2
 800b5bc:	0018      	movs	r0, r3
 800b5be:	f001 fb7b 	bl	800ccb8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800b5c2:	e040      	b.n	800b646 <USBD_CDC_Setup+0x166>
            USBD_CtlError(pdev, req);
 800b5c4:	683a      	ldr	r2, [r7, #0]
 800b5c6:	687b      	ldr	r3, [r7, #4]
 800b5c8:	0011      	movs	r1, r2
 800b5ca:	0018      	movs	r0, r3
 800b5cc:	f001 faf6 	bl	800cbbc <USBD_CtlError>
            ret = USBD_FAIL;
 800b5d0:	2317      	movs	r3, #23
 800b5d2:	18fb      	adds	r3, r7, r3
 800b5d4:	2202      	movs	r2, #2
 800b5d6:	701a      	strb	r2, [r3, #0]
          break;
 800b5d8:	e035      	b.n	800b646 <USBD_CDC_Setup+0x166>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b5da:	687a      	ldr	r2, [r7, #4]
 800b5dc:	23a7      	movs	r3, #167	; 0xa7
 800b5de:	009b      	lsls	r3, r3, #2
 800b5e0:	5cd3      	ldrb	r3, [r2, r3]
 800b5e2:	2b03      	cmp	r3, #3
 800b5e4:	d107      	bne.n	800b5f6 <USBD_CDC_Setup+0x116>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 800b5e6:	230f      	movs	r3, #15
 800b5e8:	18f9      	adds	r1, r7, r3
 800b5ea:	687b      	ldr	r3, [r7, #4]
 800b5ec:	2201      	movs	r2, #1
 800b5ee:	0018      	movs	r0, r3
 800b5f0:	f001 fb62 	bl	800ccb8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800b5f4:	e027      	b.n	800b646 <USBD_CDC_Setup+0x166>
            USBD_CtlError(pdev, req);
 800b5f6:	683a      	ldr	r2, [r7, #0]
 800b5f8:	687b      	ldr	r3, [r7, #4]
 800b5fa:	0011      	movs	r1, r2
 800b5fc:	0018      	movs	r0, r3
 800b5fe:	f001 fadd 	bl	800cbbc <USBD_CtlError>
            ret = USBD_FAIL;
 800b602:	2317      	movs	r3, #23
 800b604:	18fb      	adds	r3, r7, r3
 800b606:	2202      	movs	r2, #2
 800b608:	701a      	strb	r2, [r3, #0]
          break;
 800b60a:	e01c      	b.n	800b646 <USBD_CDC_Setup+0x166>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800b60c:	687a      	ldr	r2, [r7, #4]
 800b60e:	23a7      	movs	r3, #167	; 0xa7
 800b610:	009b      	lsls	r3, r3, #2
 800b612:	5cd3      	ldrb	r3, [r2, r3]
 800b614:	2b03      	cmp	r3, #3
 800b616:	d015      	beq.n	800b644 <USBD_CDC_Setup+0x164>
          {
            USBD_CtlError(pdev, req);
 800b618:	683a      	ldr	r2, [r7, #0]
 800b61a:	687b      	ldr	r3, [r7, #4]
 800b61c:	0011      	movs	r1, r2
 800b61e:	0018      	movs	r0, r3
 800b620:	f001 facc 	bl	800cbbc <USBD_CtlError>
            ret = USBD_FAIL;
 800b624:	2317      	movs	r3, #23
 800b626:	18fb      	adds	r3, r7, r3
 800b628:	2202      	movs	r2, #2
 800b62a:	701a      	strb	r2, [r3, #0]
          }
          break;
 800b62c:	e00a      	b.n	800b644 <USBD_CDC_Setup+0x164>

        default:
          USBD_CtlError(pdev, req);
 800b62e:	683a      	ldr	r2, [r7, #0]
 800b630:	687b      	ldr	r3, [r7, #4]
 800b632:	0011      	movs	r1, r2
 800b634:	0018      	movs	r0, r3
 800b636:	f001 fac1 	bl	800cbbc <USBD_CtlError>
          ret = USBD_FAIL;
 800b63a:	2317      	movs	r3, #23
 800b63c:	18fb      	adds	r3, r7, r3
 800b63e:	2202      	movs	r2, #2
 800b640:	701a      	strb	r2, [r3, #0]
          break;
 800b642:	e000      	b.n	800b646 <USBD_CDC_Setup+0x166>
          break;
 800b644:	46c0      	nop			; (mov r8, r8)
      }
      break;
 800b646:	e00a      	b.n	800b65e <USBD_CDC_Setup+0x17e>

    default:
      USBD_CtlError(pdev, req);
 800b648:	683a      	ldr	r2, [r7, #0]
 800b64a:	687b      	ldr	r3, [r7, #4]
 800b64c:	0011      	movs	r1, r2
 800b64e:	0018      	movs	r0, r3
 800b650:	f001 fab4 	bl	800cbbc <USBD_CtlError>
      ret = USBD_FAIL;
 800b654:	2317      	movs	r3, #23
 800b656:	18fb      	adds	r3, r7, r3
 800b658:	2202      	movs	r2, #2
 800b65a:	701a      	strb	r2, [r3, #0]
      break;
 800b65c:	46c0      	nop			; (mov r8, r8)
  }

  return ret;
 800b65e:	2317      	movs	r3, #23
 800b660:	18fb      	adds	r3, r7, r3
 800b662:	781b      	ldrb	r3, [r3, #0]
}
 800b664:	0018      	movs	r0, r3
 800b666:	46bd      	mov	sp, r7
 800b668:	b006      	add	sp, #24
 800b66a:	bd80      	pop	{r7, pc}
 800b66c:	00000201 	.word	0x00000201

0800b670 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800b670:	b580      	push	{r7, lr}
 800b672:	b084      	sub	sp, #16
 800b674:	af00      	add	r7, sp, #0
 800b676:	6078      	str	r0, [r7, #4]
 800b678:	000a      	movs	r2, r1
 800b67a:	1cfb      	adds	r3, r7, #3
 800b67c:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800b67e:	687a      	ldr	r2, [r7, #4]
 800b680:	23ae      	movs	r3, #174	; 0xae
 800b682:	009b      	lsls	r3, r3, #2
 800b684:	58d3      	ldr	r3, [r2, r3]
 800b686:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800b688:	687a      	ldr	r2, [r7, #4]
 800b68a:	23b0      	movs	r3, #176	; 0xb0
 800b68c:	009b      	lsls	r3, r3, #2
 800b68e:	58d3      	ldr	r3, [r2, r3]
 800b690:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 800b692:	687a      	ldr	r2, [r7, #4]
 800b694:	23ae      	movs	r3, #174	; 0xae
 800b696:	009b      	lsls	r3, r3, #2
 800b698:	58d3      	ldr	r3, [r2, r3]
 800b69a:	2b00      	cmp	r3, #0
 800b69c:	d03e      	beq.n	800b71c <USBD_CDC_DataIn+0xac>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800b69e:	1cfb      	adds	r3, r7, #3
 800b6a0:	781a      	ldrb	r2, [r3, #0]
 800b6a2:	6879      	ldr	r1, [r7, #4]
 800b6a4:	0013      	movs	r3, r2
 800b6a6:	009b      	lsls	r3, r3, #2
 800b6a8:	189b      	adds	r3, r3, r2
 800b6aa:	009b      	lsls	r3, r3, #2
 800b6ac:	18cb      	adds	r3, r1, r3
 800b6ae:	331c      	adds	r3, #28
 800b6b0:	681b      	ldr	r3, [r3, #0]
 800b6b2:	2b00      	cmp	r3, #0
 800b6b4:	d02b      	beq.n	800b70e <USBD_CDC_DataIn+0x9e>
 800b6b6:	1cfb      	adds	r3, r7, #3
 800b6b8:	781a      	ldrb	r2, [r3, #0]
 800b6ba:	6879      	ldr	r1, [r7, #4]
 800b6bc:	0013      	movs	r3, r2
 800b6be:	009b      	lsls	r3, r3, #2
 800b6c0:	189b      	adds	r3, r3, r2
 800b6c2:	009b      	lsls	r3, r3, #2
 800b6c4:	18cb      	adds	r3, r1, r3
 800b6c6:	331c      	adds	r3, #28
 800b6c8:	6818      	ldr	r0, [r3, #0]
 800b6ca:	1cfb      	adds	r3, r7, #3
 800b6cc:	781a      	ldrb	r2, [r3, #0]
 800b6ce:	68b9      	ldr	r1, [r7, #8]
 800b6d0:	0013      	movs	r3, r2
 800b6d2:	009b      	lsls	r3, r3, #2
 800b6d4:	189b      	adds	r3, r3, r2
 800b6d6:	00db      	lsls	r3, r3, #3
 800b6d8:	18cb      	adds	r3, r1, r3
 800b6da:	3338      	adds	r3, #56	; 0x38
 800b6dc:	681b      	ldr	r3, [r3, #0]
 800b6de:	0019      	movs	r1, r3
 800b6e0:	f7f4 fdaa 	bl	8000238 <__aeabi_uidivmod>
 800b6e4:	1e0b      	subs	r3, r1, #0
 800b6e6:	d112      	bne.n	800b70e <USBD_CDC_DataIn+0x9e>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 800b6e8:	1cfb      	adds	r3, r7, #3
 800b6ea:	781a      	ldrb	r2, [r3, #0]
 800b6ec:	6879      	ldr	r1, [r7, #4]
 800b6ee:	0013      	movs	r3, r2
 800b6f0:	009b      	lsls	r3, r3, #2
 800b6f2:	189b      	adds	r3, r3, r2
 800b6f4:	009b      	lsls	r3, r3, #2
 800b6f6:	18cb      	adds	r3, r1, r3
 800b6f8:	331c      	adds	r3, #28
 800b6fa:	2200      	movs	r2, #0
 800b6fc:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800b6fe:	1cfb      	adds	r3, r7, #3
 800b700:	7819      	ldrb	r1, [r3, #0]
 800b702:	6878      	ldr	r0, [r7, #4]
 800b704:	2300      	movs	r3, #0
 800b706:	2200      	movs	r2, #0
 800b708:	f001 fff7 	bl	800d6fa <USBD_LL_Transmit>
 800b70c:	e004      	b.n	800b718 <USBD_CDC_DataIn+0xa8>
    }
    else
    {
      hcdc->TxState = 0U;
 800b70e:	68fa      	ldr	r2, [r7, #12]
 800b710:	2385      	movs	r3, #133	; 0x85
 800b712:	009b      	lsls	r3, r3, #2
 800b714:	2100      	movs	r1, #0
 800b716:	50d1      	str	r1, [r2, r3]
    }
    return USBD_OK;
 800b718:	2300      	movs	r3, #0
 800b71a:	e000      	b.n	800b71e <USBD_CDC_DataIn+0xae>
  }
  else
  {
    return USBD_FAIL;
 800b71c:	2302      	movs	r3, #2
  }
}
 800b71e:	0018      	movs	r0, r3
 800b720:	46bd      	mov	sp, r7
 800b722:	b004      	add	sp, #16
 800b724:	bd80      	pop	{r7, pc}

0800b726 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800b726:	b580      	push	{r7, lr}
 800b728:	b084      	sub	sp, #16
 800b72a:	af00      	add	r7, sp, #0
 800b72c:	6078      	str	r0, [r7, #4]
 800b72e:	000a      	movs	r2, r1
 800b730:	1cfb      	adds	r3, r7, #3
 800b732:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800b734:	687a      	ldr	r2, [r7, #4]
 800b736:	23ae      	movs	r3, #174	; 0xae
 800b738:	009b      	lsls	r3, r3, #2
 800b73a:	58d3      	ldr	r3, [r2, r3]
 800b73c:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800b73e:	1cfb      	adds	r3, r7, #3
 800b740:	781a      	ldrb	r2, [r3, #0]
 800b742:	687b      	ldr	r3, [r7, #4]
 800b744:	0011      	movs	r1, r2
 800b746:	0018      	movs	r0, r3
 800b748:	f002 f845 	bl	800d7d6 <USBD_LL_GetRxDataSize>
 800b74c:	0001      	movs	r1, r0
 800b74e:	68fa      	ldr	r2, [r7, #12]
 800b750:	2383      	movs	r3, #131	; 0x83
 800b752:	009b      	lsls	r3, r3, #2
 800b754:	50d1      	str	r1, [r2, r3]

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 800b756:	687a      	ldr	r2, [r7, #4]
 800b758:	23ae      	movs	r3, #174	; 0xae
 800b75a:	009b      	lsls	r3, r3, #2
 800b75c:	58d3      	ldr	r3, [r2, r3]
 800b75e:	2b00      	cmp	r3, #0
 800b760:	d011      	beq.n	800b786 <USBD_CDC_DataOut+0x60>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800b762:	687a      	ldr	r2, [r7, #4]
 800b764:	23af      	movs	r3, #175	; 0xaf
 800b766:	009b      	lsls	r3, r3, #2
 800b768:	58d3      	ldr	r3, [r2, r3]
 800b76a:	68da      	ldr	r2, [r3, #12]
 800b76c:	68f9      	ldr	r1, [r7, #12]
 800b76e:	2381      	movs	r3, #129	; 0x81
 800b770:	009b      	lsls	r3, r3, #2
 800b772:	58c8      	ldr	r0, [r1, r3]
 800b774:	68fb      	ldr	r3, [r7, #12]
 800b776:	2183      	movs	r1, #131	; 0x83
 800b778:	0089      	lsls	r1, r1, #2
 800b77a:	468c      	mov	ip, r1
 800b77c:	4463      	add	r3, ip
 800b77e:	0019      	movs	r1, r3
 800b780:	4790      	blx	r2

    return USBD_OK;
 800b782:	2300      	movs	r3, #0
 800b784:	e000      	b.n	800b788 <USBD_CDC_DataOut+0x62>
  }
  else
  {
    return USBD_FAIL;
 800b786:	2302      	movs	r3, #2
  }
}
 800b788:	0018      	movs	r0, r3
 800b78a:	46bd      	mov	sp, r7
 800b78c:	b004      	add	sp, #16
 800b78e:	bd80      	pop	{r7, pc}

0800b790 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800b790:	b590      	push	{r4, r7, lr}
 800b792:	b085      	sub	sp, #20
 800b794:	af00      	add	r7, sp, #0
 800b796:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800b798:	687a      	ldr	r2, [r7, #4]
 800b79a:	23ae      	movs	r3, #174	; 0xae
 800b79c:	009b      	lsls	r3, r3, #2
 800b79e:	58d3      	ldr	r3, [r2, r3]
 800b7a0:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800b7a2:	687a      	ldr	r2, [r7, #4]
 800b7a4:	23af      	movs	r3, #175	; 0xaf
 800b7a6:	009b      	lsls	r3, r3, #2
 800b7a8:	58d3      	ldr	r3, [r2, r3]
 800b7aa:	2b00      	cmp	r3, #0
 800b7ac:	d019      	beq.n	800b7e2 <USBD_CDC_EP0_RxReady+0x52>
 800b7ae:	68fa      	ldr	r2, [r7, #12]
 800b7b0:	2380      	movs	r3, #128	; 0x80
 800b7b2:	009b      	lsls	r3, r3, #2
 800b7b4:	5cd3      	ldrb	r3, [r2, r3]
 800b7b6:	2bff      	cmp	r3, #255	; 0xff
 800b7b8:	d013      	beq.n	800b7e2 <USBD_CDC_EP0_RxReady+0x52>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800b7ba:	687a      	ldr	r2, [r7, #4]
 800b7bc:	23af      	movs	r3, #175	; 0xaf
 800b7be:	009b      	lsls	r3, r3, #2
 800b7c0:	58d3      	ldr	r3, [r2, r3]
 800b7c2:	689b      	ldr	r3, [r3, #8]
 800b7c4:	68f9      	ldr	r1, [r7, #12]
 800b7c6:	2280      	movs	r2, #128	; 0x80
 800b7c8:	0092      	lsls	r2, r2, #2
 800b7ca:	5c88      	ldrb	r0, [r1, r2]
                                                      (uint8_t *)(void *)hcdc->data,
 800b7cc:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800b7ce:	68fa      	ldr	r2, [r7, #12]
 800b7d0:	4c06      	ldr	r4, [pc, #24]	; (800b7ec <USBD_CDC_EP0_RxReady+0x5c>)
 800b7d2:	5d12      	ldrb	r2, [r2, r4]
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800b7d4:	b292      	uxth	r2, r2
 800b7d6:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800b7d8:	68fa      	ldr	r2, [r7, #12]
 800b7da:	2380      	movs	r3, #128	; 0x80
 800b7dc:	009b      	lsls	r3, r3, #2
 800b7de:	21ff      	movs	r1, #255	; 0xff
 800b7e0:	54d1      	strb	r1, [r2, r3]

  }
  return USBD_OK;
 800b7e2:	2300      	movs	r3, #0
}
 800b7e4:	0018      	movs	r0, r3
 800b7e6:	46bd      	mov	sp, r7
 800b7e8:	b005      	add	sp, #20
 800b7ea:	bd90      	pop	{r4, r7, pc}
 800b7ec:	00000201 	.word	0x00000201

0800b7f0 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800b7f0:	b580      	push	{r7, lr}
 800b7f2:	b082      	sub	sp, #8
 800b7f4:	af00      	add	r7, sp, #0
 800b7f6:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 800b7f8:	687b      	ldr	r3, [r7, #4]
 800b7fa:	2243      	movs	r2, #67	; 0x43
 800b7fc:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 800b7fe:	4b02      	ldr	r3, [pc, #8]	; (800b808 <USBD_CDC_GetFSCfgDesc+0x18>)
}
 800b800:	0018      	movs	r0, r3
 800b802:	46bd      	mov	sp, r7
 800b804:	b002      	add	sp, #8
 800b806:	bd80      	pop	{r7, pc}
 800b808:	20000094 	.word	0x20000094

0800b80c <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800b80c:	b580      	push	{r7, lr}
 800b80e:	b082      	sub	sp, #8
 800b810:	af00      	add	r7, sp, #0
 800b812:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 800b814:	687b      	ldr	r3, [r7, #4]
 800b816:	2243      	movs	r2, #67	; 0x43
 800b818:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 800b81a:	4b02      	ldr	r3, [pc, #8]	; (800b824 <USBD_CDC_GetHSCfgDesc+0x18>)
}
 800b81c:	0018      	movs	r0, r3
 800b81e:	46bd      	mov	sp, r7
 800b820:	b002      	add	sp, #8
 800b822:	bd80      	pop	{r7, pc}
 800b824:	20000050 	.word	0x20000050

0800b828 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800b828:	b580      	push	{r7, lr}
 800b82a:	b082      	sub	sp, #8
 800b82c:	af00      	add	r7, sp, #0
 800b82e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800b830:	687b      	ldr	r3, [r7, #4]
 800b832:	2243      	movs	r2, #67	; 0x43
 800b834:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 800b836:	4b02      	ldr	r3, [pc, #8]	; (800b840 <USBD_CDC_GetOtherSpeedCfgDesc+0x18>)
}
 800b838:	0018      	movs	r0, r3
 800b83a:	46bd      	mov	sp, r7
 800b83c:	b002      	add	sp, #8
 800b83e:	bd80      	pop	{r7, pc}
 800b840:	200000d8 	.word	0x200000d8

0800b844 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800b844:	b580      	push	{r7, lr}
 800b846:	b082      	sub	sp, #8
 800b848:	af00      	add	r7, sp, #0
 800b84a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 800b84c:	687b      	ldr	r3, [r7, #4]
 800b84e:	220a      	movs	r2, #10
 800b850:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 800b852:	4b02      	ldr	r3, [pc, #8]	; (800b85c <USBD_CDC_GetDeviceQualifierDescriptor+0x18>)
}
 800b854:	0018      	movs	r0, r3
 800b856:	46bd      	mov	sp, r7
 800b858:	b002      	add	sp, #8
 800b85a:	bd80      	pop	{r7, pc}
 800b85c:	2000000c 	.word	0x2000000c

0800b860 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 800b860:	b580      	push	{r7, lr}
 800b862:	b084      	sub	sp, #16
 800b864:	af00      	add	r7, sp, #0
 800b866:	6078      	str	r0, [r7, #4]
 800b868:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 800b86a:	200f      	movs	r0, #15
 800b86c:	183b      	adds	r3, r7, r0
 800b86e:	2202      	movs	r2, #2
 800b870:	701a      	strb	r2, [r3, #0]

  if (fops != NULL)
 800b872:	683b      	ldr	r3, [r7, #0]
 800b874:	2b00      	cmp	r3, #0
 800b876:	d007      	beq.n	800b888 <USBD_CDC_RegisterInterface+0x28>
  {
    pdev->pUserData = fops;
 800b878:	687a      	ldr	r2, [r7, #4]
 800b87a:	23af      	movs	r3, #175	; 0xaf
 800b87c:	009b      	lsls	r3, r3, #2
 800b87e:	6839      	ldr	r1, [r7, #0]
 800b880:	50d1      	str	r1, [r2, r3]
    ret = USBD_OK;
 800b882:	183b      	adds	r3, r7, r0
 800b884:	2200      	movs	r2, #0
 800b886:	701a      	strb	r2, [r3, #0]
  }

  return ret;
 800b888:	230f      	movs	r3, #15
 800b88a:	18fb      	adds	r3, r7, r3
 800b88c:	781b      	ldrb	r3, [r3, #0]
}
 800b88e:	0018      	movs	r0, r3
 800b890:	46bd      	mov	sp, r7
 800b892:	b004      	add	sp, #16
 800b894:	bd80      	pop	{r7, pc}

0800b896 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 800b896:	b580      	push	{r7, lr}
 800b898:	b086      	sub	sp, #24
 800b89a:	af00      	add	r7, sp, #0
 800b89c:	60f8      	str	r0, [r7, #12]
 800b89e:	60b9      	str	r1, [r7, #8]
 800b8a0:	1dbb      	adds	r3, r7, #6
 800b8a2:	801a      	strh	r2, [r3, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800b8a4:	68fa      	ldr	r2, [r7, #12]
 800b8a6:	23ae      	movs	r3, #174	; 0xae
 800b8a8:	009b      	lsls	r3, r3, #2
 800b8aa:	58d3      	ldr	r3, [r2, r3]
 800b8ac:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800b8ae:	697a      	ldr	r2, [r7, #20]
 800b8b0:	2382      	movs	r3, #130	; 0x82
 800b8b2:	009b      	lsls	r3, r3, #2
 800b8b4:	68b9      	ldr	r1, [r7, #8]
 800b8b6:	50d1      	str	r1, [r2, r3]
  hcdc->TxLength = length;
 800b8b8:	1dbb      	adds	r3, r7, #6
 800b8ba:	8819      	ldrh	r1, [r3, #0]
 800b8bc:	697a      	ldr	r2, [r7, #20]
 800b8be:	2384      	movs	r3, #132	; 0x84
 800b8c0:	009b      	lsls	r3, r3, #2
 800b8c2:	50d1      	str	r1, [r2, r3]

  return USBD_OK;
 800b8c4:	2300      	movs	r3, #0
}
 800b8c6:	0018      	movs	r0, r3
 800b8c8:	46bd      	mov	sp, r7
 800b8ca:	b006      	add	sp, #24
 800b8cc:	bd80      	pop	{r7, pc}

0800b8ce <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 800b8ce:	b580      	push	{r7, lr}
 800b8d0:	b084      	sub	sp, #16
 800b8d2:	af00      	add	r7, sp, #0
 800b8d4:	6078      	str	r0, [r7, #4]
 800b8d6:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800b8d8:	687a      	ldr	r2, [r7, #4]
 800b8da:	23ae      	movs	r3, #174	; 0xae
 800b8dc:	009b      	lsls	r3, r3, #2
 800b8de:	58d3      	ldr	r3, [r2, r3]
 800b8e0:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 800b8e2:	68fa      	ldr	r2, [r7, #12]
 800b8e4:	2381      	movs	r3, #129	; 0x81
 800b8e6:	009b      	lsls	r3, r3, #2
 800b8e8:	6839      	ldr	r1, [r7, #0]
 800b8ea:	50d1      	str	r1, [r2, r3]

  return USBD_OK;
 800b8ec:	2300      	movs	r3, #0
}
 800b8ee:	0018      	movs	r0, r3
 800b8f0:	46bd      	mov	sp, r7
 800b8f2:	b004      	add	sp, #16
 800b8f4:	bd80      	pop	{r7, pc}

0800b8f6 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800b8f6:	b580      	push	{r7, lr}
 800b8f8:	b084      	sub	sp, #16
 800b8fa:	af00      	add	r7, sp, #0
 800b8fc:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800b8fe:	687a      	ldr	r2, [r7, #4]
 800b900:	23ae      	movs	r3, #174	; 0xae
 800b902:	009b      	lsls	r3, r3, #2
 800b904:	58d3      	ldr	r3, [r2, r3]
 800b906:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 800b908:	687a      	ldr	r2, [r7, #4]
 800b90a:	23ae      	movs	r3, #174	; 0xae
 800b90c:	009b      	lsls	r3, r3, #2
 800b90e:	58d3      	ldr	r3, [r2, r3]
 800b910:	2b00      	cmp	r3, #0
 800b912:	d022      	beq.n	800b95a <USBD_CDC_TransmitPacket+0x64>
  {
    if (hcdc->TxState == 0U)
 800b914:	68fa      	ldr	r2, [r7, #12]
 800b916:	2385      	movs	r3, #133	; 0x85
 800b918:	009b      	lsls	r3, r3, #2
 800b91a:	58d3      	ldr	r3, [r2, r3]
 800b91c:	2b00      	cmp	r3, #0
 800b91e:	d11a      	bne.n	800b956 <USBD_CDC_TransmitPacket+0x60>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 800b920:	68fa      	ldr	r2, [r7, #12]
 800b922:	2385      	movs	r3, #133	; 0x85
 800b924:	009b      	lsls	r3, r3, #2
 800b926:	2101      	movs	r1, #1
 800b928:	50d1      	str	r1, [r2, r3]

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800b92a:	68fa      	ldr	r2, [r7, #12]
 800b92c:	2384      	movs	r3, #132	; 0x84
 800b92e:	009b      	lsls	r3, r3, #2
 800b930:	58d2      	ldr	r2, [r2, r3]
 800b932:	687b      	ldr	r3, [r7, #4]
 800b934:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800b936:	68fa      	ldr	r2, [r7, #12]
 800b938:	2382      	movs	r3, #130	; 0x82
 800b93a:	009b      	lsls	r3, r3, #2
 800b93c:	58d1      	ldr	r1, [r2, r3]
                       (uint16_t)hcdc->TxLength);
 800b93e:	68fa      	ldr	r2, [r7, #12]
 800b940:	2384      	movs	r3, #132	; 0x84
 800b942:	009b      	lsls	r3, r3, #2
 800b944:	58d3      	ldr	r3, [r2, r3]
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800b946:	b29b      	uxth	r3, r3
 800b948:	6878      	ldr	r0, [r7, #4]
 800b94a:	000a      	movs	r2, r1
 800b94c:	2181      	movs	r1, #129	; 0x81
 800b94e:	f001 fed4 	bl	800d6fa <USBD_LL_Transmit>

      return USBD_OK;
 800b952:	2300      	movs	r3, #0
 800b954:	e002      	b.n	800b95c <USBD_CDC_TransmitPacket+0x66>
    }
    else
    {
      return USBD_BUSY;
 800b956:	2301      	movs	r3, #1
 800b958:	e000      	b.n	800b95c <USBD_CDC_TransmitPacket+0x66>
    }
  }
  else
  {
    return USBD_FAIL;
 800b95a:	2302      	movs	r3, #2
  }
}
 800b95c:	0018      	movs	r0, r3
 800b95e:	46bd      	mov	sp, r7
 800b960:	b004      	add	sp, #16
 800b962:	bd80      	pop	{r7, pc}

0800b964 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800b964:	b580      	push	{r7, lr}
 800b966:	b084      	sub	sp, #16
 800b968:	af00      	add	r7, sp, #0
 800b96a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800b96c:	687a      	ldr	r2, [r7, #4]
 800b96e:	23ae      	movs	r3, #174	; 0xae
 800b970:	009b      	lsls	r3, r3, #2
 800b972:	58d3      	ldr	r3, [r2, r3]
 800b974:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 800b976:	687a      	ldr	r2, [r7, #4]
 800b978:	23ae      	movs	r3, #174	; 0xae
 800b97a:	009b      	lsls	r3, r3, #2
 800b97c:	58d3      	ldr	r3, [r2, r3]
 800b97e:	2b00      	cmp	r3, #0
 800b980:	d019      	beq.n	800b9b6 <USBD_CDC_ReceivePacket+0x52>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b982:	687b      	ldr	r3, [r7, #4]
 800b984:	7c1b      	ldrb	r3, [r3, #16]
 800b986:	2b00      	cmp	r3, #0
 800b988:	d10a      	bne.n	800b9a0 <USBD_CDC_ReceivePacket+0x3c>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800b98a:	68fa      	ldr	r2, [r7, #12]
 800b98c:	2381      	movs	r3, #129	; 0x81
 800b98e:	009b      	lsls	r3, r3, #2
 800b990:	58d2      	ldr	r2, [r2, r3]
 800b992:	2380      	movs	r3, #128	; 0x80
 800b994:	009b      	lsls	r3, r3, #2
 800b996:	6878      	ldr	r0, [r7, #4]
 800b998:	2101      	movs	r1, #1
 800b99a:	f001 fee5 	bl	800d768 <USBD_LL_PrepareReceive>
 800b99e:	e008      	b.n	800b9b2 <USBD_CDC_ReceivePacket+0x4e>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800b9a0:	68fa      	ldr	r2, [r7, #12]
 800b9a2:	2381      	movs	r3, #129	; 0x81
 800b9a4:	009b      	lsls	r3, r3, #2
 800b9a6:	58d2      	ldr	r2, [r2, r3]
 800b9a8:	6878      	ldr	r0, [r7, #4]
 800b9aa:	2340      	movs	r3, #64	; 0x40
 800b9ac:	2101      	movs	r1, #1
 800b9ae:	f001 fedb 	bl	800d768 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 800b9b2:	2300      	movs	r3, #0
 800b9b4:	e000      	b.n	800b9b8 <USBD_CDC_ReceivePacket+0x54>
  }
  else
  {
    return USBD_FAIL;
 800b9b6:	2302      	movs	r3, #2
  }
}
 800b9b8:	0018      	movs	r0, r3
 800b9ba:	46bd      	mov	sp, r7
 800b9bc:	b004      	add	sp, #16
 800b9be:	bd80      	pop	{r7, pc}

0800b9c0 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800b9c0:	b580      	push	{r7, lr}
 800b9c2:	b084      	sub	sp, #16
 800b9c4:	af00      	add	r7, sp, #0
 800b9c6:	60f8      	str	r0, [r7, #12]
 800b9c8:	60b9      	str	r1, [r7, #8]
 800b9ca:	1dfb      	adds	r3, r7, #7
 800b9cc:	701a      	strb	r2, [r3, #0]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800b9ce:	68fb      	ldr	r3, [r7, #12]
 800b9d0:	2b00      	cmp	r3, #0
 800b9d2:	d101      	bne.n	800b9d8 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800b9d4:	2302      	movs	r3, #2
 800b9d6:	e020      	b.n	800ba1a <USBD_Init+0x5a>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 800b9d8:	68fa      	ldr	r2, [r7, #12]
 800b9da:	23ad      	movs	r3, #173	; 0xad
 800b9dc:	009b      	lsls	r3, r3, #2
 800b9de:	58d3      	ldr	r3, [r2, r3]
 800b9e0:	2b00      	cmp	r3, #0
 800b9e2:	d004      	beq.n	800b9ee <USBD_Init+0x2e>
  {
    pdev->pClass = NULL;
 800b9e4:	68fa      	ldr	r2, [r7, #12]
 800b9e6:	23ad      	movs	r3, #173	; 0xad
 800b9e8:	009b      	lsls	r3, r3, #2
 800b9ea:	2100      	movs	r1, #0
 800b9ec:	50d1      	str	r1, [r2, r3]
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800b9ee:	68bb      	ldr	r3, [r7, #8]
 800b9f0:	2b00      	cmp	r3, #0
 800b9f2:	d004      	beq.n	800b9fe <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800b9f4:	68fa      	ldr	r2, [r7, #12]
 800b9f6:	23ac      	movs	r3, #172	; 0xac
 800b9f8:	009b      	lsls	r3, r3, #2
 800b9fa:	68b9      	ldr	r1, [r7, #8]
 800b9fc:	50d1      	str	r1, [r2, r3]
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b9fe:	68fa      	ldr	r2, [r7, #12]
 800ba00:	23a7      	movs	r3, #167	; 0xa7
 800ba02:	009b      	lsls	r3, r3, #2
 800ba04:	2101      	movs	r1, #1
 800ba06:	54d1      	strb	r1, [r2, r3]
  pdev->id = id;
 800ba08:	68fb      	ldr	r3, [r7, #12]
 800ba0a:	1dfa      	adds	r2, r7, #7
 800ba0c:	7812      	ldrb	r2, [r2, #0]
 800ba0e:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800ba10:	68fb      	ldr	r3, [r7, #12]
 800ba12:	0018      	movs	r0, r3
 800ba14:	f001 fcd4 	bl	800d3c0 <USBD_LL_Init>

  return USBD_OK;
 800ba18:	2300      	movs	r3, #0
}
 800ba1a:	0018      	movs	r0, r3
 800ba1c:	46bd      	mov	sp, r7
 800ba1e:	b004      	add	sp, #16
 800ba20:	bd80      	pop	{r7, pc}

0800ba22 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800ba22:	b580      	push	{r7, lr}
 800ba24:	b084      	sub	sp, #16
 800ba26:	af00      	add	r7, sp, #0
 800ba28:	6078      	str	r0, [r7, #4]
 800ba2a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 800ba2c:	200f      	movs	r0, #15
 800ba2e:	183b      	adds	r3, r7, r0
 800ba30:	2200      	movs	r2, #0
 800ba32:	701a      	strb	r2, [r3, #0]
  if (pclass != NULL)
 800ba34:	683b      	ldr	r3, [r7, #0]
 800ba36:	2b00      	cmp	r3, #0
 800ba38:	d008      	beq.n	800ba4c <USBD_RegisterClass+0x2a>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 800ba3a:	687a      	ldr	r2, [r7, #4]
 800ba3c:	23ad      	movs	r3, #173	; 0xad
 800ba3e:	009b      	lsls	r3, r3, #2
 800ba40:	6839      	ldr	r1, [r7, #0]
 800ba42:	50d1      	str	r1, [r2, r3]
    status = USBD_OK;
 800ba44:	183b      	adds	r3, r7, r0
 800ba46:	2200      	movs	r2, #0
 800ba48:	701a      	strb	r2, [r3, #0]
 800ba4a:	e003      	b.n	800ba54 <USBD_RegisterClass+0x32>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 800ba4c:	230f      	movs	r3, #15
 800ba4e:	18fb      	adds	r3, r7, r3
 800ba50:	2202      	movs	r2, #2
 800ba52:	701a      	strb	r2, [r3, #0]
  }

  return status;
 800ba54:	230f      	movs	r3, #15
 800ba56:	18fb      	adds	r3, r7, r3
 800ba58:	781b      	ldrb	r3, [r3, #0]
}
 800ba5a:	0018      	movs	r0, r3
 800ba5c:	46bd      	mov	sp, r7
 800ba5e:	b004      	add	sp, #16
 800ba60:	bd80      	pop	{r7, pc}

0800ba62 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 800ba62:	b580      	push	{r7, lr}
 800ba64:	b082      	sub	sp, #8
 800ba66:	af00      	add	r7, sp, #0
 800ba68:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 800ba6a:	687b      	ldr	r3, [r7, #4]
 800ba6c:	0018      	movs	r0, r3
 800ba6e:	f001 fd0b 	bl	800d488 <USBD_LL_Start>

  return USBD_OK;
 800ba72:	2300      	movs	r3, #0
}
 800ba74:	0018      	movs	r0, r3
 800ba76:	46bd      	mov	sp, r7
 800ba78:	b002      	add	sp, #8
 800ba7a:	bd80      	pop	{r7, pc}

0800ba7c <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800ba7c:	b580      	push	{r7, lr}
 800ba7e:	b082      	sub	sp, #8
 800ba80:	af00      	add	r7, sp, #0
 800ba82:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800ba84:	2300      	movs	r3, #0
}
 800ba86:	0018      	movs	r0, r3
 800ba88:	46bd      	mov	sp, r7
 800ba8a:	b002      	add	sp, #8
 800ba8c:	bd80      	pop	{r7, pc}

0800ba8e <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800ba8e:	b590      	push	{r4, r7, lr}
 800ba90:	b085      	sub	sp, #20
 800ba92:	af00      	add	r7, sp, #0
 800ba94:	6078      	str	r0, [r7, #4]
 800ba96:	000a      	movs	r2, r1
 800ba98:	1cfb      	adds	r3, r7, #3
 800ba9a:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800ba9c:	240f      	movs	r4, #15
 800ba9e:	193b      	adds	r3, r7, r4
 800baa0:	2202      	movs	r2, #2
 800baa2:	701a      	strb	r2, [r3, #0]

  if (pdev->pClass != NULL)
 800baa4:	687a      	ldr	r2, [r7, #4]
 800baa6:	23ad      	movs	r3, #173	; 0xad
 800baa8:	009b      	lsls	r3, r3, #2
 800baaa:	58d3      	ldr	r3, [r2, r3]
 800baac:	2b00      	cmp	r3, #0
 800baae:	d00e      	beq.n	800bace <USBD_SetClassConfig+0x40>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 800bab0:	687a      	ldr	r2, [r7, #4]
 800bab2:	23ad      	movs	r3, #173	; 0xad
 800bab4:	009b      	lsls	r3, r3, #2
 800bab6:	58d3      	ldr	r3, [r2, r3]
 800bab8:	681b      	ldr	r3, [r3, #0]
 800baba:	1cfa      	adds	r2, r7, #3
 800babc:	7811      	ldrb	r1, [r2, #0]
 800babe:	687a      	ldr	r2, [r7, #4]
 800bac0:	0010      	movs	r0, r2
 800bac2:	4798      	blx	r3
 800bac4:	1e03      	subs	r3, r0, #0
 800bac6:	d102      	bne.n	800bace <USBD_SetClassConfig+0x40>
    {
      ret = USBD_OK;
 800bac8:	193b      	adds	r3, r7, r4
 800baca:	2200      	movs	r2, #0
 800bacc:	701a      	strb	r2, [r3, #0]
    }
  }

  return ret;
 800bace:	230f      	movs	r3, #15
 800bad0:	18fb      	adds	r3, r7, r3
 800bad2:	781b      	ldrb	r3, [r3, #0]
}
 800bad4:	0018      	movs	r0, r3
 800bad6:	46bd      	mov	sp, r7
 800bad8:	b005      	add	sp, #20
 800bada:	bd90      	pop	{r4, r7, pc}

0800badc <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800badc:	b580      	push	{r7, lr}
 800bade:	b082      	sub	sp, #8
 800bae0:	af00      	add	r7, sp, #0
 800bae2:	6078      	str	r0, [r7, #4]
 800bae4:	000a      	movs	r2, r1
 800bae6:	1cfb      	adds	r3, r7, #3
 800bae8:	701a      	strb	r2, [r3, #0]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 800baea:	687a      	ldr	r2, [r7, #4]
 800baec:	23ad      	movs	r3, #173	; 0xad
 800baee:	009b      	lsls	r3, r3, #2
 800baf0:	58d3      	ldr	r3, [r2, r3]
 800baf2:	685b      	ldr	r3, [r3, #4]
 800baf4:	1cfa      	adds	r2, r7, #3
 800baf6:	7811      	ldrb	r1, [r2, #0]
 800baf8:	687a      	ldr	r2, [r7, #4]
 800bafa:	0010      	movs	r0, r2
 800bafc:	4798      	blx	r3

  return USBD_OK;
 800bafe:	2300      	movs	r3, #0
}
 800bb00:	0018      	movs	r0, r3
 800bb02:	46bd      	mov	sp, r7
 800bb04:	b002      	add	sp, #8
 800bb06:	bd80      	pop	{r7, pc}

0800bb08 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800bb08:	b580      	push	{r7, lr}
 800bb0a:	b082      	sub	sp, #8
 800bb0c:	af00      	add	r7, sp, #0
 800bb0e:	6078      	str	r0, [r7, #4]
 800bb10:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800bb12:	687b      	ldr	r3, [r7, #4]
 800bb14:	22aa      	movs	r2, #170	; 0xaa
 800bb16:	0092      	lsls	r2, r2, #2
 800bb18:	4694      	mov	ip, r2
 800bb1a:	4463      	add	r3, ip
 800bb1c:	683a      	ldr	r2, [r7, #0]
 800bb1e:	0011      	movs	r1, r2
 800bb20:	0018      	movs	r0, r3
 800bb22:	f001 f810 	bl	800cb46 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800bb26:	687a      	ldr	r2, [r7, #4]
 800bb28:	23a5      	movs	r3, #165	; 0xa5
 800bb2a:	009b      	lsls	r3, r3, #2
 800bb2c:	2101      	movs	r1, #1
 800bb2e:	50d1      	str	r1, [r2, r3]

  pdev->ep0_data_len = pdev->request.wLength;
 800bb30:	687b      	ldr	r3, [r7, #4]
 800bb32:	4a23      	ldr	r2, [pc, #140]	; (800bbc0 <USBD_LL_SetupStage+0xb8>)
 800bb34:	5a9b      	ldrh	r3, [r3, r2]
 800bb36:	0019      	movs	r1, r3
 800bb38:	687a      	ldr	r2, [r7, #4]
 800bb3a:	23a6      	movs	r3, #166	; 0xa6
 800bb3c:	009b      	lsls	r3, r3, #2
 800bb3e:	50d1      	str	r1, [r2, r3]

  switch (pdev->request.bmRequest & 0x1FU)
 800bb40:	687a      	ldr	r2, [r7, #4]
 800bb42:	23aa      	movs	r3, #170	; 0xaa
 800bb44:	009b      	lsls	r3, r3, #2
 800bb46:	5cd3      	ldrb	r3, [r2, r3]
 800bb48:	001a      	movs	r2, r3
 800bb4a:	231f      	movs	r3, #31
 800bb4c:	4013      	ands	r3, r2
 800bb4e:	2b02      	cmp	r3, #2
 800bb50:	d019      	beq.n	800bb86 <USBD_LL_SetupStage+0x7e>
 800bb52:	d822      	bhi.n	800bb9a <USBD_LL_SetupStage+0x92>
 800bb54:	2b00      	cmp	r3, #0
 800bb56:	d002      	beq.n	800bb5e <USBD_LL_SetupStage+0x56>
 800bb58:	2b01      	cmp	r3, #1
 800bb5a:	d00a      	beq.n	800bb72 <USBD_LL_SetupStage+0x6a>
 800bb5c:	e01d      	b.n	800bb9a <USBD_LL_SetupStage+0x92>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 800bb5e:	687b      	ldr	r3, [r7, #4]
 800bb60:	22aa      	movs	r2, #170	; 0xaa
 800bb62:	0092      	lsls	r2, r2, #2
 800bb64:	189a      	adds	r2, r3, r2
 800bb66:	687b      	ldr	r3, [r7, #4]
 800bb68:	0011      	movs	r1, r2
 800bb6a:	0018      	movs	r0, r3
 800bb6c:	f000 fa10 	bl	800bf90 <USBD_StdDevReq>
      break;
 800bb70:	e020      	b.n	800bbb4 <USBD_LL_SetupStage+0xac>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 800bb72:	687b      	ldr	r3, [r7, #4]
 800bb74:	22aa      	movs	r2, #170	; 0xaa
 800bb76:	0092      	lsls	r2, r2, #2
 800bb78:	189a      	adds	r2, r3, r2
 800bb7a:	687b      	ldr	r3, [r7, #4]
 800bb7c:	0011      	movs	r1, r2
 800bb7e:	0018      	movs	r0, r3
 800bb80:	f000 fa78 	bl	800c074 <USBD_StdItfReq>
      break;
 800bb84:	e016      	b.n	800bbb4 <USBD_LL_SetupStage+0xac>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 800bb86:	687b      	ldr	r3, [r7, #4]
 800bb88:	22aa      	movs	r2, #170	; 0xaa
 800bb8a:	0092      	lsls	r2, r2, #2
 800bb8c:	189a      	adds	r2, r3, r2
 800bb8e:	687b      	ldr	r3, [r7, #4]
 800bb90:	0011      	movs	r1, r2
 800bb92:	0018      	movs	r0, r3
 800bb94:	f000 fac5 	bl	800c122 <USBD_StdEPReq>
      break;
 800bb98:	e00c      	b.n	800bbb4 <USBD_LL_SetupStage+0xac>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800bb9a:	687a      	ldr	r2, [r7, #4]
 800bb9c:	23aa      	movs	r3, #170	; 0xaa
 800bb9e:	009b      	lsls	r3, r3, #2
 800bba0:	5cd3      	ldrb	r3, [r2, r3]
 800bba2:	227f      	movs	r2, #127	; 0x7f
 800bba4:	4393      	bics	r3, r2
 800bba6:	b2da      	uxtb	r2, r3
 800bba8:	687b      	ldr	r3, [r7, #4]
 800bbaa:	0011      	movs	r1, r2
 800bbac:	0018      	movs	r0, r3
 800bbae:	f001 fcf2 	bl	800d596 <USBD_LL_StallEP>
      break;
 800bbb2:	46c0      	nop			; (mov r8, r8)
  }

  return USBD_OK;
 800bbb4:	2300      	movs	r3, #0
}
 800bbb6:	0018      	movs	r0, r3
 800bbb8:	46bd      	mov	sp, r7
 800bbba:	b002      	add	sp, #8
 800bbbc:	bd80      	pop	{r7, pc}
 800bbbe:	46c0      	nop			; (mov r8, r8)
 800bbc0:	000002ae 	.word	0x000002ae

0800bbc4 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800bbc4:	b580      	push	{r7, lr}
 800bbc6:	b086      	sub	sp, #24
 800bbc8:	af00      	add	r7, sp, #0
 800bbca:	60f8      	str	r0, [r7, #12]
 800bbcc:	607a      	str	r2, [r7, #4]
 800bbce:	200b      	movs	r0, #11
 800bbd0:	183b      	adds	r3, r7, r0
 800bbd2:	1c0a      	adds	r2, r1, #0
 800bbd4:	701a      	strb	r2, [r3, #0]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800bbd6:	183b      	adds	r3, r7, r0
 800bbd8:	781b      	ldrb	r3, [r3, #0]
 800bbda:	2b00      	cmp	r3, #0
 800bbdc:	d154      	bne.n	800bc88 <USBD_LL_DataOutStage+0xc4>
  {
    pep = &pdev->ep_out[0];
 800bbde:	68fb      	ldr	r3, [r7, #12]
 800bbe0:	3355      	adds	r3, #85	; 0x55
 800bbe2:	33ff      	adds	r3, #255	; 0xff
 800bbe4:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800bbe6:	68fa      	ldr	r2, [r7, #12]
 800bbe8:	23a5      	movs	r3, #165	; 0xa5
 800bbea:	009b      	lsls	r3, r3, #2
 800bbec:	58d3      	ldr	r3, [r2, r3]
 800bbee:	2b03      	cmp	r3, #3
 800bbf0:	d139      	bne.n	800bc66 <USBD_LL_DataOutStage+0xa2>
    {
      if (pep->rem_length > pep->maxpacket)
 800bbf2:	697b      	ldr	r3, [r7, #20]
 800bbf4:	68da      	ldr	r2, [r3, #12]
 800bbf6:	697b      	ldr	r3, [r7, #20]
 800bbf8:	691b      	ldr	r3, [r3, #16]
 800bbfa:	429a      	cmp	r2, r3
 800bbfc:	d919      	bls.n	800bc32 <USBD_LL_DataOutStage+0x6e>
      {
        pep->rem_length -= pep->maxpacket;
 800bbfe:	697b      	ldr	r3, [r7, #20]
 800bc00:	68da      	ldr	r2, [r3, #12]
 800bc02:	697b      	ldr	r3, [r7, #20]
 800bc04:	691b      	ldr	r3, [r3, #16]
 800bc06:	1ad2      	subs	r2, r2, r3
 800bc08:	697b      	ldr	r3, [r7, #20]
 800bc0a:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800bc0c:	697b      	ldr	r3, [r7, #20]
 800bc0e:	68da      	ldr	r2, [r3, #12]
 800bc10:	697b      	ldr	r3, [r7, #20]
 800bc12:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800bc14:	429a      	cmp	r2, r3
 800bc16:	d203      	bcs.n	800bc20 <USBD_LL_DataOutStage+0x5c>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800bc18:	697b      	ldr	r3, [r7, #20]
 800bc1a:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 800bc1c:	b29b      	uxth	r3, r3
 800bc1e:	e002      	b.n	800bc26 <USBD_LL_DataOutStage+0x62>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800bc20:	697b      	ldr	r3, [r7, #20]
 800bc22:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800bc24:	b29b      	uxth	r3, r3
 800bc26:	6879      	ldr	r1, [r7, #4]
 800bc28:	68f8      	ldr	r0, [r7, #12]
 800bc2a:	001a      	movs	r2, r3
 800bc2c:	f001 f89b 	bl	800cd66 <USBD_CtlContinueRx>
 800bc30:	e045      	b.n	800bcbe <USBD_LL_DataOutStage+0xfa>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800bc32:	68fa      	ldr	r2, [r7, #12]
 800bc34:	23ad      	movs	r3, #173	; 0xad
 800bc36:	009b      	lsls	r3, r3, #2
 800bc38:	58d3      	ldr	r3, [r2, r3]
 800bc3a:	691b      	ldr	r3, [r3, #16]
 800bc3c:	2b00      	cmp	r3, #0
 800bc3e:	d00d      	beq.n	800bc5c <USBD_LL_DataOutStage+0x98>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800bc40:	68fa      	ldr	r2, [r7, #12]
 800bc42:	23a7      	movs	r3, #167	; 0xa7
 800bc44:	009b      	lsls	r3, r3, #2
 800bc46:	5cd3      	ldrb	r3, [r2, r3]
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800bc48:	2b03      	cmp	r3, #3
 800bc4a:	d107      	bne.n	800bc5c <USBD_LL_DataOutStage+0x98>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800bc4c:	68fa      	ldr	r2, [r7, #12]
 800bc4e:	23ad      	movs	r3, #173	; 0xad
 800bc50:	009b      	lsls	r3, r3, #2
 800bc52:	58d3      	ldr	r3, [r2, r3]
 800bc54:	691b      	ldr	r3, [r3, #16]
 800bc56:	68fa      	ldr	r2, [r7, #12]
 800bc58:	0010      	movs	r0, r2
 800bc5a:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 800bc5c:	68fb      	ldr	r3, [r7, #12]
 800bc5e:	0018      	movs	r0, r3
 800bc60:	f001 f894 	bl	800cd8c <USBD_CtlSendStatus>
 800bc64:	e02b      	b.n	800bcbe <USBD_LL_DataOutStage+0xfa>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 800bc66:	68fa      	ldr	r2, [r7, #12]
 800bc68:	23a5      	movs	r3, #165	; 0xa5
 800bc6a:	009b      	lsls	r3, r3, #2
 800bc6c:	58d3      	ldr	r3, [r2, r3]
 800bc6e:	2b05      	cmp	r3, #5
 800bc70:	d125      	bne.n	800bcbe <USBD_LL_DataOutStage+0xfa>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 800bc72:	68fa      	ldr	r2, [r7, #12]
 800bc74:	23a5      	movs	r3, #165	; 0xa5
 800bc76:	009b      	lsls	r3, r3, #2
 800bc78:	2100      	movs	r1, #0
 800bc7a:	50d1      	str	r1, [r2, r3]
        USBD_LL_StallEP(pdev, 0U);
 800bc7c:	68fb      	ldr	r3, [r7, #12]
 800bc7e:	2100      	movs	r1, #0
 800bc80:	0018      	movs	r0, r3
 800bc82:	f001 fc88 	bl	800d596 <USBD_LL_StallEP>
 800bc86:	e01a      	b.n	800bcbe <USBD_LL_DataOutStage+0xfa>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800bc88:	68fa      	ldr	r2, [r7, #12]
 800bc8a:	23ad      	movs	r3, #173	; 0xad
 800bc8c:	009b      	lsls	r3, r3, #2
 800bc8e:	58d3      	ldr	r3, [r2, r3]
 800bc90:	699b      	ldr	r3, [r3, #24]
 800bc92:	2b00      	cmp	r3, #0
 800bc94:	d011      	beq.n	800bcba <USBD_LL_DataOutStage+0xf6>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800bc96:	68fa      	ldr	r2, [r7, #12]
 800bc98:	23a7      	movs	r3, #167	; 0xa7
 800bc9a:	009b      	lsls	r3, r3, #2
 800bc9c:	5cd3      	ldrb	r3, [r2, r3]
  else if ((pdev->pClass->DataOut != NULL) &&
 800bc9e:	2b03      	cmp	r3, #3
 800bca0:	d10b      	bne.n	800bcba <USBD_LL_DataOutStage+0xf6>
  {
    pdev->pClass->DataOut(pdev, epnum);
 800bca2:	68fa      	ldr	r2, [r7, #12]
 800bca4:	23ad      	movs	r3, #173	; 0xad
 800bca6:	009b      	lsls	r3, r3, #2
 800bca8:	58d3      	ldr	r3, [r2, r3]
 800bcaa:	699b      	ldr	r3, [r3, #24]
 800bcac:	220b      	movs	r2, #11
 800bcae:	18ba      	adds	r2, r7, r2
 800bcb0:	7811      	ldrb	r1, [r2, #0]
 800bcb2:	68fa      	ldr	r2, [r7, #12]
 800bcb4:	0010      	movs	r0, r2
 800bcb6:	4798      	blx	r3
 800bcb8:	e001      	b.n	800bcbe <USBD_LL_DataOutStage+0xfa>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800bcba:	2302      	movs	r3, #2
 800bcbc:	e000      	b.n	800bcc0 <USBD_LL_DataOutStage+0xfc>
  }

  return USBD_OK;
 800bcbe:	2300      	movs	r3, #0
}
 800bcc0:	0018      	movs	r0, r3
 800bcc2:	46bd      	mov	sp, r7
 800bcc4:	b006      	add	sp, #24
 800bcc6:	bd80      	pop	{r7, pc}

0800bcc8 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800bcc8:	b580      	push	{r7, lr}
 800bcca:	b086      	sub	sp, #24
 800bccc:	af00      	add	r7, sp, #0
 800bcce:	60f8      	str	r0, [r7, #12]
 800bcd0:	607a      	str	r2, [r7, #4]
 800bcd2:	200b      	movs	r0, #11
 800bcd4:	183b      	adds	r3, r7, r0
 800bcd6:	1c0a      	adds	r2, r1, #0
 800bcd8:	701a      	strb	r2, [r3, #0]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800bcda:	183b      	adds	r3, r7, r0
 800bcdc:	781b      	ldrb	r3, [r3, #0]
 800bcde:	2b00      	cmp	r3, #0
 800bce0:	d000      	beq.n	800bce4 <USBD_LL_DataInStage+0x1c>
 800bce2:	e08e      	b.n	800be02 <USBD_LL_DataInStage+0x13a>
  {
    pep = &pdev->ep_in[0];
 800bce4:	68fb      	ldr	r3, [r7, #12]
 800bce6:	3314      	adds	r3, #20
 800bce8:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800bcea:	68fa      	ldr	r2, [r7, #12]
 800bcec:	23a5      	movs	r3, #165	; 0xa5
 800bcee:	009b      	lsls	r3, r3, #2
 800bcf0:	58d3      	ldr	r3, [r2, r3]
 800bcf2:	2b02      	cmp	r3, #2
 800bcf4:	d164      	bne.n	800bdc0 <USBD_LL_DataInStage+0xf8>
    {
      if (pep->rem_length > pep->maxpacket)
 800bcf6:	697b      	ldr	r3, [r7, #20]
 800bcf8:	68da      	ldr	r2, [r3, #12]
 800bcfa:	697b      	ldr	r3, [r7, #20]
 800bcfc:	691b      	ldr	r3, [r3, #16]
 800bcfe:	429a      	cmp	r2, r3
 800bd00:	d915      	bls.n	800bd2e <USBD_LL_DataInStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 800bd02:	697b      	ldr	r3, [r7, #20]
 800bd04:	68da      	ldr	r2, [r3, #12]
 800bd06:	697b      	ldr	r3, [r7, #20]
 800bd08:	691b      	ldr	r3, [r3, #16]
 800bd0a:	1ad2      	subs	r2, r2, r3
 800bd0c:	697b      	ldr	r3, [r7, #20]
 800bd0e:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 800bd10:	697b      	ldr	r3, [r7, #20]
 800bd12:	68db      	ldr	r3, [r3, #12]
 800bd14:	b29a      	uxth	r2, r3
 800bd16:	6879      	ldr	r1, [r7, #4]
 800bd18:	68fb      	ldr	r3, [r7, #12]
 800bd1a:	0018      	movs	r0, r3
 800bd1c:	f000 ffec 	bl	800ccf8 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800bd20:	68f8      	ldr	r0, [r7, #12]
 800bd22:	2300      	movs	r3, #0
 800bd24:	2200      	movs	r2, #0
 800bd26:	2100      	movs	r1, #0
 800bd28:	f001 fd1e 	bl	800d768 <USBD_LL_PrepareReceive>
 800bd2c:	e059      	b.n	800bde2 <USBD_LL_DataInStage+0x11a>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800bd2e:	697b      	ldr	r3, [r7, #20]
 800bd30:	689a      	ldr	r2, [r3, #8]
 800bd32:	697b      	ldr	r3, [r7, #20]
 800bd34:	691b      	ldr	r3, [r3, #16]
 800bd36:	0019      	movs	r1, r3
 800bd38:	0010      	movs	r0, r2
 800bd3a:	f7f4 fa7d 	bl	8000238 <__aeabi_uidivmod>
 800bd3e:	1e0b      	subs	r3, r1, #0
 800bd40:	d11f      	bne.n	800bd82 <USBD_LL_DataInStage+0xba>
            (pep->total_length >= pep->maxpacket) &&
 800bd42:	697b      	ldr	r3, [r7, #20]
 800bd44:	689a      	ldr	r2, [r3, #8]
 800bd46:	697b      	ldr	r3, [r7, #20]
 800bd48:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800bd4a:	429a      	cmp	r2, r3
 800bd4c:	d319      	bcc.n	800bd82 <USBD_LL_DataInStage+0xba>
            (pep->total_length < pdev->ep0_data_len))
 800bd4e:	697b      	ldr	r3, [r7, #20]
 800bd50:	689a      	ldr	r2, [r3, #8]
 800bd52:	68f9      	ldr	r1, [r7, #12]
 800bd54:	23a6      	movs	r3, #166	; 0xa6
 800bd56:	009b      	lsls	r3, r3, #2
 800bd58:	58cb      	ldr	r3, [r1, r3]
            (pep->total_length >= pep->maxpacket) &&
 800bd5a:	429a      	cmp	r2, r3
 800bd5c:	d211      	bcs.n	800bd82 <USBD_LL_DataInStage+0xba>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800bd5e:	68fb      	ldr	r3, [r7, #12]
 800bd60:	2200      	movs	r2, #0
 800bd62:	2100      	movs	r1, #0
 800bd64:	0018      	movs	r0, r3
 800bd66:	f000 ffc7 	bl	800ccf8 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800bd6a:	68fa      	ldr	r2, [r7, #12]
 800bd6c:	23a6      	movs	r3, #166	; 0xa6
 800bd6e:	009b      	lsls	r3, r3, #2
 800bd70:	2100      	movs	r1, #0
 800bd72:	50d1      	str	r1, [r2, r3]

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800bd74:	68f8      	ldr	r0, [r7, #12]
 800bd76:	2300      	movs	r3, #0
 800bd78:	2200      	movs	r2, #0
 800bd7a:	2100      	movs	r1, #0
 800bd7c:	f001 fcf4 	bl	800d768 <USBD_LL_PrepareReceive>
 800bd80:	e02f      	b.n	800bde2 <USBD_LL_DataInStage+0x11a>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800bd82:	68fa      	ldr	r2, [r7, #12]
 800bd84:	23ad      	movs	r3, #173	; 0xad
 800bd86:	009b      	lsls	r3, r3, #2
 800bd88:	58d3      	ldr	r3, [r2, r3]
 800bd8a:	68db      	ldr	r3, [r3, #12]
 800bd8c:	2b00      	cmp	r3, #0
 800bd8e:	d00d      	beq.n	800bdac <USBD_LL_DataInStage+0xe4>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800bd90:	68fa      	ldr	r2, [r7, #12]
 800bd92:	23a7      	movs	r3, #167	; 0xa7
 800bd94:	009b      	lsls	r3, r3, #2
 800bd96:	5cd3      	ldrb	r3, [r2, r3]
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800bd98:	2b03      	cmp	r3, #3
 800bd9a:	d107      	bne.n	800bdac <USBD_LL_DataInStage+0xe4>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800bd9c:	68fa      	ldr	r2, [r7, #12]
 800bd9e:	23ad      	movs	r3, #173	; 0xad
 800bda0:	009b      	lsls	r3, r3, #2
 800bda2:	58d3      	ldr	r3, [r2, r3]
 800bda4:	68db      	ldr	r3, [r3, #12]
 800bda6:	68fa      	ldr	r2, [r7, #12]
 800bda8:	0010      	movs	r0, r2
 800bdaa:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 800bdac:	68fb      	ldr	r3, [r7, #12]
 800bdae:	2180      	movs	r1, #128	; 0x80
 800bdb0:	0018      	movs	r0, r3
 800bdb2:	f001 fbf0 	bl	800d596 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800bdb6:	68fb      	ldr	r3, [r7, #12]
 800bdb8:	0018      	movs	r0, r3
 800bdba:	f000 fffb 	bl	800cdb4 <USBD_CtlReceiveStatus>
 800bdbe:	e010      	b.n	800bde2 <USBD_LL_DataInStage+0x11a>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800bdc0:	68fa      	ldr	r2, [r7, #12]
 800bdc2:	23a5      	movs	r3, #165	; 0xa5
 800bdc4:	009b      	lsls	r3, r3, #2
 800bdc6:	58d3      	ldr	r3, [r2, r3]
 800bdc8:	2b04      	cmp	r3, #4
 800bdca:	d005      	beq.n	800bdd8 <USBD_LL_DataInStage+0x110>
          (pdev->ep0_state == USBD_EP0_IDLE))
 800bdcc:	68fa      	ldr	r2, [r7, #12]
 800bdce:	23a5      	movs	r3, #165	; 0xa5
 800bdd0:	009b      	lsls	r3, r3, #2
 800bdd2:	58d3      	ldr	r3, [r2, r3]
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800bdd4:	2b00      	cmp	r3, #0
 800bdd6:	d104      	bne.n	800bde2 <USBD_LL_DataInStage+0x11a>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 800bdd8:	68fb      	ldr	r3, [r7, #12]
 800bdda:	2180      	movs	r1, #128	; 0x80
 800bddc:	0018      	movs	r0, r3
 800bdde:	f001 fbda 	bl	800d596 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 800bde2:	68fa      	ldr	r2, [r7, #12]
 800bde4:	23a8      	movs	r3, #168	; 0xa8
 800bde6:	009b      	lsls	r3, r3, #2
 800bde8:	5cd3      	ldrb	r3, [r2, r3]
 800bdea:	2b01      	cmp	r3, #1
 800bdec:	d124      	bne.n	800be38 <USBD_LL_DataInStage+0x170>
    {
      USBD_RunTestMode(pdev);
 800bdee:	68fb      	ldr	r3, [r7, #12]
 800bdf0:	0018      	movs	r0, r3
 800bdf2:	f7ff fe43 	bl	800ba7c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800bdf6:	68fa      	ldr	r2, [r7, #12]
 800bdf8:	23a8      	movs	r3, #168	; 0xa8
 800bdfa:	009b      	lsls	r3, r3, #2
 800bdfc:	2100      	movs	r1, #0
 800bdfe:	54d1      	strb	r1, [r2, r3]
 800be00:	e01a      	b.n	800be38 <USBD_LL_DataInStage+0x170>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800be02:	68fa      	ldr	r2, [r7, #12]
 800be04:	23ad      	movs	r3, #173	; 0xad
 800be06:	009b      	lsls	r3, r3, #2
 800be08:	58d3      	ldr	r3, [r2, r3]
 800be0a:	695b      	ldr	r3, [r3, #20]
 800be0c:	2b00      	cmp	r3, #0
 800be0e:	d011      	beq.n	800be34 <USBD_LL_DataInStage+0x16c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800be10:	68fa      	ldr	r2, [r7, #12]
 800be12:	23a7      	movs	r3, #167	; 0xa7
 800be14:	009b      	lsls	r3, r3, #2
 800be16:	5cd3      	ldrb	r3, [r2, r3]
  else if ((pdev->pClass->DataIn != NULL) &&
 800be18:	2b03      	cmp	r3, #3
 800be1a:	d10b      	bne.n	800be34 <USBD_LL_DataInStage+0x16c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 800be1c:	68fa      	ldr	r2, [r7, #12]
 800be1e:	23ad      	movs	r3, #173	; 0xad
 800be20:	009b      	lsls	r3, r3, #2
 800be22:	58d3      	ldr	r3, [r2, r3]
 800be24:	695b      	ldr	r3, [r3, #20]
 800be26:	220b      	movs	r2, #11
 800be28:	18ba      	adds	r2, r7, r2
 800be2a:	7811      	ldrb	r1, [r2, #0]
 800be2c:	68fa      	ldr	r2, [r7, #12]
 800be2e:	0010      	movs	r0, r2
 800be30:	4798      	blx	r3
 800be32:	e001      	b.n	800be38 <USBD_LL_DataInStage+0x170>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800be34:	2302      	movs	r3, #2
 800be36:	e000      	b.n	800be3a <USBD_LL_DataInStage+0x172>
  }

  return USBD_OK;
 800be38:	2300      	movs	r3, #0
}
 800be3a:	0018      	movs	r0, r3
 800be3c:	46bd      	mov	sp, r7
 800be3e:	b006      	add	sp, #24
 800be40:	bd80      	pop	{r7, pc}

0800be42 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800be42:	b580      	push	{r7, lr}
 800be44:	b082      	sub	sp, #8
 800be46:	af00      	add	r7, sp, #0
 800be48:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800be4a:	6878      	ldr	r0, [r7, #4]
 800be4c:	2340      	movs	r3, #64	; 0x40
 800be4e:	2200      	movs	r2, #0
 800be50:	2100      	movs	r1, #0
 800be52:	f001 fb3e 	bl	800d4d2 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800be56:	687a      	ldr	r2, [r7, #4]
 800be58:	23ac      	movs	r3, #172	; 0xac
 800be5a:	005b      	lsls	r3, r3, #1
 800be5c:	2101      	movs	r1, #1
 800be5e:	50d1      	str	r1, [r2, r3]

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800be60:	687a      	ldr	r2, [r7, #4]
 800be62:	23b2      	movs	r3, #178	; 0xb2
 800be64:	005b      	lsls	r3, r3, #1
 800be66:	2140      	movs	r1, #64	; 0x40
 800be68:	50d1      	str	r1, [r2, r3]

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800be6a:	6878      	ldr	r0, [r7, #4]
 800be6c:	2340      	movs	r3, #64	; 0x40
 800be6e:	2200      	movs	r2, #0
 800be70:	2180      	movs	r1, #128	; 0x80
 800be72:	f001 fb2e 	bl	800d4d2 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800be76:	687b      	ldr	r3, [r7, #4]
 800be78:	2201      	movs	r2, #1
 800be7a:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800be7c:	687b      	ldr	r3, [r7, #4]
 800be7e:	2240      	movs	r2, #64	; 0x40
 800be80:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800be82:	687a      	ldr	r2, [r7, #4]
 800be84:	23a7      	movs	r3, #167	; 0xa7
 800be86:	009b      	lsls	r3, r3, #2
 800be88:	2101      	movs	r1, #1
 800be8a:	54d1      	strb	r1, [r2, r3]
  pdev->ep0_state = USBD_EP0_IDLE;
 800be8c:	687a      	ldr	r2, [r7, #4]
 800be8e:	23a5      	movs	r3, #165	; 0xa5
 800be90:	009b      	lsls	r3, r3, #2
 800be92:	2100      	movs	r1, #0
 800be94:	50d1      	str	r1, [r2, r3]
  pdev->dev_config = 0U;
 800be96:	687b      	ldr	r3, [r7, #4]
 800be98:	2200      	movs	r2, #0
 800be9a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800be9c:	687a      	ldr	r2, [r7, #4]
 800be9e:	23a9      	movs	r3, #169	; 0xa9
 800bea0:	009b      	lsls	r3, r3, #2
 800bea2:	2100      	movs	r1, #0
 800bea4:	50d1      	str	r1, [r2, r3]

  if (pdev->pClassData)
 800bea6:	687a      	ldr	r2, [r7, #4]
 800bea8:	23ae      	movs	r3, #174	; 0xae
 800beaa:	009b      	lsls	r3, r3, #2
 800beac:	58d3      	ldr	r3, [r2, r3]
 800beae:	2b00      	cmp	r3, #0
 800beb0:	d00a      	beq.n	800bec8 <USBD_LL_Reset+0x86>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800beb2:	687a      	ldr	r2, [r7, #4]
 800beb4:	23ad      	movs	r3, #173	; 0xad
 800beb6:	009b      	lsls	r3, r3, #2
 800beb8:	58d3      	ldr	r3, [r2, r3]
 800beba:	685a      	ldr	r2, [r3, #4]
 800bebc:	687b      	ldr	r3, [r7, #4]
 800bebe:	685b      	ldr	r3, [r3, #4]
 800bec0:	b2d9      	uxtb	r1, r3
 800bec2:	687b      	ldr	r3, [r7, #4]
 800bec4:	0018      	movs	r0, r3
 800bec6:	4790      	blx	r2
  }

  return USBD_OK;
 800bec8:	2300      	movs	r3, #0
}
 800beca:	0018      	movs	r0, r3
 800becc:	46bd      	mov	sp, r7
 800bece:	b002      	add	sp, #8
 800bed0:	bd80      	pop	{r7, pc}

0800bed2 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800bed2:	b580      	push	{r7, lr}
 800bed4:	b082      	sub	sp, #8
 800bed6:	af00      	add	r7, sp, #0
 800bed8:	6078      	str	r0, [r7, #4]
 800beda:	000a      	movs	r2, r1
 800bedc:	1cfb      	adds	r3, r7, #3
 800bede:	701a      	strb	r2, [r3, #0]
  pdev->dev_speed = speed;
 800bee0:	687b      	ldr	r3, [r7, #4]
 800bee2:	1cfa      	adds	r2, r7, #3
 800bee4:	7812      	ldrb	r2, [r2, #0]
 800bee6:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800bee8:	2300      	movs	r3, #0
}
 800beea:	0018      	movs	r0, r3
 800beec:	46bd      	mov	sp, r7
 800beee:	b002      	add	sp, #8
 800bef0:	bd80      	pop	{r7, pc}
	...

0800bef4 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800bef4:	b580      	push	{r7, lr}
 800bef6:	b082      	sub	sp, #8
 800bef8:	af00      	add	r7, sp, #0
 800befa:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 800befc:	687a      	ldr	r2, [r7, #4]
 800befe:	23a7      	movs	r3, #167	; 0xa7
 800bf00:	009b      	lsls	r3, r3, #2
 800bf02:	5cd1      	ldrb	r1, [r2, r3]
 800bf04:	687b      	ldr	r3, [r7, #4]
 800bf06:	4a06      	ldr	r2, [pc, #24]	; (800bf20 <USBD_LL_Suspend+0x2c>)
 800bf08:	5499      	strb	r1, [r3, r2]
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800bf0a:	687a      	ldr	r2, [r7, #4]
 800bf0c:	23a7      	movs	r3, #167	; 0xa7
 800bf0e:	009b      	lsls	r3, r3, #2
 800bf10:	2104      	movs	r1, #4
 800bf12:	54d1      	strb	r1, [r2, r3]

  return USBD_OK;
 800bf14:	2300      	movs	r3, #0
}
 800bf16:	0018      	movs	r0, r3
 800bf18:	46bd      	mov	sp, r7
 800bf1a:	b002      	add	sp, #8
 800bf1c:	bd80      	pop	{r7, pc}
 800bf1e:	46c0      	nop			; (mov r8, r8)
 800bf20:	0000029d 	.word	0x0000029d

0800bf24 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800bf24:	b580      	push	{r7, lr}
 800bf26:	b082      	sub	sp, #8
 800bf28:	af00      	add	r7, sp, #0
 800bf2a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800bf2c:	687a      	ldr	r2, [r7, #4]
 800bf2e:	23a7      	movs	r3, #167	; 0xa7
 800bf30:	009b      	lsls	r3, r3, #2
 800bf32:	5cd3      	ldrb	r3, [r2, r3]
 800bf34:	2b04      	cmp	r3, #4
 800bf36:	d106      	bne.n	800bf46 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800bf38:	687b      	ldr	r3, [r7, #4]
 800bf3a:	4a05      	ldr	r2, [pc, #20]	; (800bf50 <USBD_LL_Resume+0x2c>)
 800bf3c:	5c99      	ldrb	r1, [r3, r2]
 800bf3e:	687a      	ldr	r2, [r7, #4]
 800bf40:	23a7      	movs	r3, #167	; 0xa7
 800bf42:	009b      	lsls	r3, r3, #2
 800bf44:	54d1      	strb	r1, [r2, r3]
  }

  return USBD_OK;
 800bf46:	2300      	movs	r3, #0
}
 800bf48:	0018      	movs	r0, r3
 800bf4a:	46bd      	mov	sp, r7
 800bf4c:	b002      	add	sp, #8
 800bf4e:	bd80      	pop	{r7, pc}
 800bf50:	0000029d 	.word	0x0000029d

0800bf54 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800bf54:	b580      	push	{r7, lr}
 800bf56:	b082      	sub	sp, #8
 800bf58:	af00      	add	r7, sp, #0
 800bf5a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bf5c:	687a      	ldr	r2, [r7, #4]
 800bf5e:	23a7      	movs	r3, #167	; 0xa7
 800bf60:	009b      	lsls	r3, r3, #2
 800bf62:	5cd3      	ldrb	r3, [r2, r3]
 800bf64:	2b03      	cmp	r3, #3
 800bf66:	d10e      	bne.n	800bf86 <USBD_LL_SOF+0x32>
  {
    if (pdev->pClass->SOF != NULL)
 800bf68:	687a      	ldr	r2, [r7, #4]
 800bf6a:	23ad      	movs	r3, #173	; 0xad
 800bf6c:	009b      	lsls	r3, r3, #2
 800bf6e:	58d3      	ldr	r3, [r2, r3]
 800bf70:	69db      	ldr	r3, [r3, #28]
 800bf72:	2b00      	cmp	r3, #0
 800bf74:	d007      	beq.n	800bf86 <USBD_LL_SOF+0x32>
    {
      pdev->pClass->SOF(pdev);
 800bf76:	687a      	ldr	r2, [r7, #4]
 800bf78:	23ad      	movs	r3, #173	; 0xad
 800bf7a:	009b      	lsls	r3, r3, #2
 800bf7c:	58d3      	ldr	r3, [r2, r3]
 800bf7e:	69db      	ldr	r3, [r3, #28]
 800bf80:	687a      	ldr	r2, [r7, #4]
 800bf82:	0010      	movs	r0, r2
 800bf84:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800bf86:	2300      	movs	r3, #0
}
 800bf88:	0018      	movs	r0, r3
 800bf8a:	46bd      	mov	sp, r7
 800bf8c:	b002      	add	sp, #8
 800bf8e:	bd80      	pop	{r7, pc}

0800bf90 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 800bf90:	b580      	push	{r7, lr}
 800bf92:	b084      	sub	sp, #16
 800bf94:	af00      	add	r7, sp, #0
 800bf96:	6078      	str	r0, [r7, #4]
 800bf98:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800bf9a:	230f      	movs	r3, #15
 800bf9c:	18fb      	adds	r3, r7, r3
 800bf9e:	2200      	movs	r2, #0
 800bfa0:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800bfa2:	683b      	ldr	r3, [r7, #0]
 800bfa4:	781b      	ldrb	r3, [r3, #0]
 800bfa6:	001a      	movs	r2, r3
 800bfa8:	2360      	movs	r3, #96	; 0x60
 800bfaa:	4013      	ands	r3, r2
 800bfac:	2b40      	cmp	r3, #64	; 0x40
 800bfae:	d004      	beq.n	800bfba <USBD_StdDevReq+0x2a>
 800bfb0:	d84f      	bhi.n	800c052 <USBD_StdDevReq+0xc2>
 800bfb2:	2b00      	cmp	r3, #0
 800bfb4:	d00b      	beq.n	800bfce <USBD_StdDevReq+0x3e>
 800bfb6:	2b20      	cmp	r3, #32
 800bfb8:	d14b      	bne.n	800c052 <USBD_StdDevReq+0xc2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800bfba:	687a      	ldr	r2, [r7, #4]
 800bfbc:	23ad      	movs	r3, #173	; 0xad
 800bfbe:	009b      	lsls	r3, r3, #2
 800bfc0:	58d3      	ldr	r3, [r2, r3]
 800bfc2:	689b      	ldr	r3, [r3, #8]
 800bfc4:	6839      	ldr	r1, [r7, #0]
 800bfc6:	687a      	ldr	r2, [r7, #4]
 800bfc8:	0010      	movs	r0, r2
 800bfca:	4798      	blx	r3
      break;
 800bfcc:	e048      	b.n	800c060 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800bfce:	683b      	ldr	r3, [r7, #0]
 800bfd0:	785b      	ldrb	r3, [r3, #1]
 800bfd2:	2b09      	cmp	r3, #9
 800bfd4:	d835      	bhi.n	800c042 <USBD_StdDevReq+0xb2>
 800bfd6:	009a      	lsls	r2, r3, #2
 800bfd8:	4b25      	ldr	r3, [pc, #148]	; (800c070 <USBD_StdDevReq+0xe0>)
 800bfda:	18d3      	adds	r3, r2, r3
 800bfdc:	681b      	ldr	r3, [r3, #0]
 800bfde:	469f      	mov	pc, r3
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800bfe0:	683a      	ldr	r2, [r7, #0]
 800bfe2:	687b      	ldr	r3, [r7, #4]
 800bfe4:	0011      	movs	r1, r2
 800bfe6:	0018      	movs	r0, r3
 800bfe8:	f000 fa52 	bl	800c490 <USBD_GetDescriptor>
          break;
 800bfec:	e030      	b.n	800c050 <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800bfee:	683a      	ldr	r2, [r7, #0]
 800bff0:	687b      	ldr	r3, [r7, #4]
 800bff2:	0011      	movs	r1, r2
 800bff4:	0018      	movs	r0, r3
 800bff6:	f000 fbfd 	bl	800c7f4 <USBD_SetAddress>
          break;
 800bffa:	e029      	b.n	800c050 <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 800bffc:	683a      	ldr	r2, [r7, #0]
 800bffe:	687b      	ldr	r3, [r7, #4]
 800c000:	0011      	movs	r1, r2
 800c002:	0018      	movs	r0, r3
 800c004:	f000 fc4a 	bl	800c89c <USBD_SetConfig>
          break;
 800c008:	e022      	b.n	800c050 <USBD_StdDevReq+0xc0>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800c00a:	683a      	ldr	r2, [r7, #0]
 800c00c:	687b      	ldr	r3, [r7, #4]
 800c00e:	0011      	movs	r1, r2
 800c010:	0018      	movs	r0, r3
 800c012:	f000 fce7 	bl	800c9e4 <USBD_GetConfig>
          break;
 800c016:	e01b      	b.n	800c050 <USBD_StdDevReq+0xc0>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800c018:	683a      	ldr	r2, [r7, #0]
 800c01a:	687b      	ldr	r3, [r7, #4]
 800c01c:	0011      	movs	r1, r2
 800c01e:	0018      	movs	r0, r3
 800c020:	f000 fd1b 	bl	800ca5a <USBD_GetStatus>
          break;
 800c024:	e014      	b.n	800c050 <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800c026:	683a      	ldr	r2, [r7, #0]
 800c028:	687b      	ldr	r3, [r7, #4]
 800c02a:	0011      	movs	r1, r2
 800c02c:	0018      	movs	r0, r3
 800c02e:	f000 fd4e 	bl	800cace <USBD_SetFeature>
          break;
 800c032:	e00d      	b.n	800c050 <USBD_StdDevReq+0xc0>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800c034:	683a      	ldr	r2, [r7, #0]
 800c036:	687b      	ldr	r3, [r7, #4]
 800c038:	0011      	movs	r1, r2
 800c03a:	0018      	movs	r0, r3
 800c03c:	f000 fd5d 	bl	800cafa <USBD_ClrFeature>
          break;
 800c040:	e006      	b.n	800c050 <USBD_StdDevReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800c042:	683a      	ldr	r2, [r7, #0]
 800c044:	687b      	ldr	r3, [r7, #4]
 800c046:	0011      	movs	r1, r2
 800c048:	0018      	movs	r0, r3
 800c04a:	f000 fdb7 	bl	800cbbc <USBD_CtlError>
          break;
 800c04e:	46c0      	nop			; (mov r8, r8)
      }
      break;
 800c050:	e006      	b.n	800c060 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800c052:	683a      	ldr	r2, [r7, #0]
 800c054:	687b      	ldr	r3, [r7, #4]
 800c056:	0011      	movs	r1, r2
 800c058:	0018      	movs	r0, r3
 800c05a:	f000 fdaf 	bl	800cbbc <USBD_CtlError>
      break;
 800c05e:	46c0      	nop			; (mov r8, r8)
  }

  return ret;
 800c060:	230f      	movs	r3, #15
 800c062:	18fb      	adds	r3, r7, r3
 800c064:	781b      	ldrb	r3, [r3, #0]
}
 800c066:	0018      	movs	r0, r3
 800c068:	46bd      	mov	sp, r7
 800c06a:	b004      	add	sp, #16
 800c06c:	bd80      	pop	{r7, pc}
 800c06e:	46c0      	nop			; (mov r8, r8)
 800c070:	0800e474 	.word	0x0800e474

0800c074 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 800c074:	b5b0      	push	{r4, r5, r7, lr}
 800c076:	b084      	sub	sp, #16
 800c078:	af00      	add	r7, sp, #0
 800c07a:	6078      	str	r0, [r7, #4]
 800c07c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c07e:	230f      	movs	r3, #15
 800c080:	18fb      	adds	r3, r7, r3
 800c082:	2200      	movs	r2, #0
 800c084:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c086:	683b      	ldr	r3, [r7, #0]
 800c088:	781b      	ldrb	r3, [r3, #0]
 800c08a:	001a      	movs	r2, r3
 800c08c:	2360      	movs	r3, #96	; 0x60
 800c08e:	4013      	ands	r3, r2
 800c090:	2b40      	cmp	r3, #64	; 0x40
 800c092:	d004      	beq.n	800c09e <USBD_StdItfReq+0x2a>
 800c094:	d839      	bhi.n	800c10a <USBD_StdItfReq+0x96>
 800c096:	2b00      	cmp	r3, #0
 800c098:	d001      	beq.n	800c09e <USBD_StdItfReq+0x2a>
 800c09a:	2b20      	cmp	r3, #32
 800c09c:	d135      	bne.n	800c10a <USBD_StdItfReq+0x96>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800c09e:	687a      	ldr	r2, [r7, #4]
 800c0a0:	23a7      	movs	r3, #167	; 0xa7
 800c0a2:	009b      	lsls	r3, r3, #2
 800c0a4:	5cd3      	ldrb	r3, [r2, r3]
 800c0a6:	3b01      	subs	r3, #1
 800c0a8:	2b02      	cmp	r3, #2
 800c0aa:	d825      	bhi.n	800c0f8 <USBD_StdItfReq+0x84>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800c0ac:	683b      	ldr	r3, [r7, #0]
 800c0ae:	889b      	ldrh	r3, [r3, #4]
 800c0b0:	b2db      	uxtb	r3, r3
 800c0b2:	2b01      	cmp	r3, #1
 800c0b4:	d819      	bhi.n	800c0ea <USBD_StdItfReq+0x76>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800c0b6:	687a      	ldr	r2, [r7, #4]
 800c0b8:	23ad      	movs	r3, #173	; 0xad
 800c0ba:	009b      	lsls	r3, r3, #2
 800c0bc:	58d3      	ldr	r3, [r2, r3]
 800c0be:	689b      	ldr	r3, [r3, #8]
 800c0c0:	250f      	movs	r5, #15
 800c0c2:	197c      	adds	r4, r7, r5
 800c0c4:	6839      	ldr	r1, [r7, #0]
 800c0c6:	687a      	ldr	r2, [r7, #4]
 800c0c8:	0010      	movs	r0, r2
 800c0ca:	4798      	blx	r3
 800c0cc:	0003      	movs	r3, r0
 800c0ce:	7023      	strb	r3, [r4, #0]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800c0d0:	683b      	ldr	r3, [r7, #0]
 800c0d2:	88db      	ldrh	r3, [r3, #6]
 800c0d4:	2b00      	cmp	r3, #0
 800c0d6:	d116      	bne.n	800c106 <USBD_StdItfReq+0x92>
 800c0d8:	197b      	adds	r3, r7, r5
 800c0da:	781b      	ldrb	r3, [r3, #0]
 800c0dc:	2b00      	cmp	r3, #0
 800c0de:	d112      	bne.n	800c106 <USBD_StdItfReq+0x92>
            {
              USBD_CtlSendStatus(pdev);
 800c0e0:	687b      	ldr	r3, [r7, #4]
 800c0e2:	0018      	movs	r0, r3
 800c0e4:	f000 fe52 	bl	800cd8c <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800c0e8:	e00d      	b.n	800c106 <USBD_StdItfReq+0x92>
            USBD_CtlError(pdev, req);
 800c0ea:	683a      	ldr	r2, [r7, #0]
 800c0ec:	687b      	ldr	r3, [r7, #4]
 800c0ee:	0011      	movs	r1, r2
 800c0f0:	0018      	movs	r0, r3
 800c0f2:	f000 fd63 	bl	800cbbc <USBD_CtlError>
          break;
 800c0f6:	e006      	b.n	800c106 <USBD_StdItfReq+0x92>

        default:
          USBD_CtlError(pdev, req);
 800c0f8:	683a      	ldr	r2, [r7, #0]
 800c0fa:	687b      	ldr	r3, [r7, #4]
 800c0fc:	0011      	movs	r1, r2
 800c0fe:	0018      	movs	r0, r3
 800c100:	f000 fd5c 	bl	800cbbc <USBD_CtlError>
          break;
 800c104:	e000      	b.n	800c108 <USBD_StdItfReq+0x94>
          break;
 800c106:	46c0      	nop			; (mov r8, r8)
      }
      break;
 800c108:	e006      	b.n	800c118 <USBD_StdItfReq+0xa4>

    default:
      USBD_CtlError(pdev, req);
 800c10a:	683a      	ldr	r2, [r7, #0]
 800c10c:	687b      	ldr	r3, [r7, #4]
 800c10e:	0011      	movs	r1, r2
 800c110:	0018      	movs	r0, r3
 800c112:	f000 fd53 	bl	800cbbc <USBD_CtlError>
      break;
 800c116:	46c0      	nop			; (mov r8, r8)
  }

  return USBD_OK;
 800c118:	2300      	movs	r3, #0
}
 800c11a:	0018      	movs	r0, r3
 800c11c:	46bd      	mov	sp, r7
 800c11e:	b004      	add	sp, #16
 800c120:	bdb0      	pop	{r4, r5, r7, pc}

0800c122 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 800c122:	b5b0      	push	{r4, r5, r7, lr}
 800c124:	b084      	sub	sp, #16
 800c126:	af00      	add	r7, sp, #0
 800c128:	6078      	str	r0, [r7, #4]
 800c12a:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800c12c:	230f      	movs	r3, #15
 800c12e:	18fb      	adds	r3, r7, r3
 800c130:	2200      	movs	r2, #0
 800c132:	701a      	strb	r2, [r3, #0]
  ep_addr  = LOBYTE(req->wIndex);
 800c134:	683b      	ldr	r3, [r7, #0]
 800c136:	889a      	ldrh	r2, [r3, #4]
 800c138:	230e      	movs	r3, #14
 800c13a:	18fb      	adds	r3, r7, r3
 800c13c:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c13e:	683b      	ldr	r3, [r7, #0]
 800c140:	781b      	ldrb	r3, [r3, #0]
 800c142:	001a      	movs	r2, r3
 800c144:	2360      	movs	r3, #96	; 0x60
 800c146:	4013      	ands	r3, r2
 800c148:	2b40      	cmp	r3, #64	; 0x40
 800c14a:	d006      	beq.n	800c15a <USBD_StdEPReq+0x38>
 800c14c:	d900      	bls.n	800c150 <USBD_StdEPReq+0x2e>
 800c14e:	e190      	b.n	800c472 <USBD_StdEPReq+0x350>
 800c150:	2b00      	cmp	r3, #0
 800c152:	d00c      	beq.n	800c16e <USBD_StdEPReq+0x4c>
 800c154:	2b20      	cmp	r3, #32
 800c156:	d000      	beq.n	800c15a <USBD_StdEPReq+0x38>
 800c158:	e18b      	b.n	800c472 <USBD_StdEPReq+0x350>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800c15a:	687a      	ldr	r2, [r7, #4]
 800c15c:	23ad      	movs	r3, #173	; 0xad
 800c15e:	009b      	lsls	r3, r3, #2
 800c160:	58d3      	ldr	r3, [r2, r3]
 800c162:	689b      	ldr	r3, [r3, #8]
 800c164:	6839      	ldr	r1, [r7, #0]
 800c166:	687a      	ldr	r2, [r7, #4]
 800c168:	0010      	movs	r0, r2
 800c16a:	4798      	blx	r3
      break;
 800c16c:	e188      	b.n	800c480 <USBD_StdEPReq+0x35e>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 800c16e:	683b      	ldr	r3, [r7, #0]
 800c170:	781b      	ldrb	r3, [r3, #0]
 800c172:	001a      	movs	r2, r3
 800c174:	2360      	movs	r3, #96	; 0x60
 800c176:	4013      	ands	r3, r2
 800c178:	2b20      	cmp	r3, #32
 800c17a:	d10f      	bne.n	800c19c <USBD_StdEPReq+0x7a>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800c17c:	687a      	ldr	r2, [r7, #4]
 800c17e:	23ad      	movs	r3, #173	; 0xad
 800c180:	009b      	lsls	r3, r3, #2
 800c182:	58d3      	ldr	r3, [r2, r3]
 800c184:	689b      	ldr	r3, [r3, #8]
 800c186:	250f      	movs	r5, #15
 800c188:	197c      	adds	r4, r7, r5
 800c18a:	6839      	ldr	r1, [r7, #0]
 800c18c:	687a      	ldr	r2, [r7, #4]
 800c18e:	0010      	movs	r0, r2
 800c190:	4798      	blx	r3
 800c192:	0003      	movs	r3, r0
 800c194:	7023      	strb	r3, [r4, #0]

        return ret;
 800c196:	197b      	adds	r3, r7, r5
 800c198:	781b      	ldrb	r3, [r3, #0]
 800c19a:	e174      	b.n	800c486 <USBD_StdEPReq+0x364>
      }

      switch (req->bRequest)
 800c19c:	683b      	ldr	r3, [r7, #0]
 800c19e:	785b      	ldrb	r3, [r3, #1]
 800c1a0:	2b03      	cmp	r3, #3
 800c1a2:	d007      	beq.n	800c1b4 <USBD_StdEPReq+0x92>
 800c1a4:	dd00      	ble.n	800c1a8 <USBD_StdEPReq+0x86>
 800c1a6:	e15c      	b.n	800c462 <USBD_StdEPReq+0x340>
 800c1a8:	2b00      	cmp	r3, #0
 800c1aa:	d100      	bne.n	800c1ae <USBD_StdEPReq+0x8c>
 800c1ac:	e092      	b.n	800c2d4 <USBD_StdEPReq+0x1b2>
 800c1ae:	2b01      	cmp	r3, #1
 800c1b0:	d04b      	beq.n	800c24a <USBD_StdEPReq+0x128>
 800c1b2:	e156      	b.n	800c462 <USBD_StdEPReq+0x340>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800c1b4:	687a      	ldr	r2, [r7, #4]
 800c1b6:	23a7      	movs	r3, #167	; 0xa7
 800c1b8:	009b      	lsls	r3, r3, #2
 800c1ba:	5cd3      	ldrb	r3, [r2, r3]
 800c1bc:	2b02      	cmp	r3, #2
 800c1be:	d002      	beq.n	800c1c6 <USBD_StdEPReq+0xa4>
 800c1c0:	2b03      	cmp	r3, #3
 800c1c2:	d01d      	beq.n	800c200 <USBD_StdEPReq+0xde>
 800c1c4:	e039      	b.n	800c23a <USBD_StdEPReq+0x118>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c1c6:	220e      	movs	r2, #14
 800c1c8:	18bb      	adds	r3, r7, r2
 800c1ca:	781b      	ldrb	r3, [r3, #0]
 800c1cc:	2b00      	cmp	r3, #0
 800c1ce:	d010      	beq.n	800c1f2 <USBD_StdEPReq+0xd0>
 800c1d0:	18bb      	adds	r3, r7, r2
 800c1d2:	781b      	ldrb	r3, [r3, #0]
 800c1d4:	2b80      	cmp	r3, #128	; 0x80
 800c1d6:	d00c      	beq.n	800c1f2 <USBD_StdEPReq+0xd0>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800c1d8:	18bb      	adds	r3, r7, r2
 800c1da:	781a      	ldrb	r2, [r3, #0]
 800c1dc:	687b      	ldr	r3, [r7, #4]
 800c1de:	0011      	movs	r1, r2
 800c1e0:	0018      	movs	r0, r3
 800c1e2:	f001 f9d8 	bl	800d596 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800c1e6:	687b      	ldr	r3, [r7, #4]
 800c1e8:	2180      	movs	r1, #128	; 0x80
 800c1ea:	0018      	movs	r0, r3
 800c1ec:	f001 f9d3 	bl	800d596 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800c1f0:	e02a      	b.n	800c248 <USBD_StdEPReq+0x126>
                USBD_CtlError(pdev, req);
 800c1f2:	683a      	ldr	r2, [r7, #0]
 800c1f4:	687b      	ldr	r3, [r7, #4]
 800c1f6:	0011      	movs	r1, r2
 800c1f8:	0018      	movs	r0, r3
 800c1fa:	f000 fcdf 	bl	800cbbc <USBD_CtlError>
              break;
 800c1fe:	e023      	b.n	800c248 <USBD_StdEPReq+0x126>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800c200:	683b      	ldr	r3, [r7, #0]
 800c202:	885b      	ldrh	r3, [r3, #2]
 800c204:	2b00      	cmp	r3, #0
 800c206:	d113      	bne.n	800c230 <USBD_StdEPReq+0x10e>
              {
                if ((ep_addr != 0x00U) &&
 800c208:	220e      	movs	r2, #14
 800c20a:	18bb      	adds	r3, r7, r2
 800c20c:	781b      	ldrb	r3, [r3, #0]
 800c20e:	2b00      	cmp	r3, #0
 800c210:	d00e      	beq.n	800c230 <USBD_StdEPReq+0x10e>
 800c212:	18bb      	adds	r3, r7, r2
 800c214:	781b      	ldrb	r3, [r3, #0]
 800c216:	2b80      	cmp	r3, #128	; 0x80
 800c218:	d00a      	beq.n	800c230 <USBD_StdEPReq+0x10e>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800c21a:	683b      	ldr	r3, [r7, #0]
 800c21c:	88db      	ldrh	r3, [r3, #6]
 800c21e:	2b00      	cmp	r3, #0
 800c220:	d106      	bne.n	800c230 <USBD_StdEPReq+0x10e>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 800c222:	18bb      	adds	r3, r7, r2
 800c224:	781a      	ldrb	r2, [r3, #0]
 800c226:	687b      	ldr	r3, [r7, #4]
 800c228:	0011      	movs	r1, r2
 800c22a:	0018      	movs	r0, r3
 800c22c:	f001 f9b3 	bl	800d596 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 800c230:	687b      	ldr	r3, [r7, #4]
 800c232:	0018      	movs	r0, r3
 800c234:	f000 fdaa 	bl	800cd8c <USBD_CtlSendStatus>

              break;
 800c238:	e006      	b.n	800c248 <USBD_StdEPReq+0x126>

            default:
              USBD_CtlError(pdev, req);
 800c23a:	683a      	ldr	r2, [r7, #0]
 800c23c:	687b      	ldr	r3, [r7, #4]
 800c23e:	0011      	movs	r1, r2
 800c240:	0018      	movs	r0, r3
 800c242:	f000 fcbb 	bl	800cbbc <USBD_CtlError>
              break;
 800c246:	46c0      	nop			; (mov r8, r8)
          }
          break;
 800c248:	e112      	b.n	800c470 <USBD_StdEPReq+0x34e>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800c24a:	687a      	ldr	r2, [r7, #4]
 800c24c:	23a7      	movs	r3, #167	; 0xa7
 800c24e:	009b      	lsls	r3, r3, #2
 800c250:	5cd3      	ldrb	r3, [r2, r3]
 800c252:	2b02      	cmp	r3, #2
 800c254:	d002      	beq.n	800c25c <USBD_StdEPReq+0x13a>
 800c256:	2b03      	cmp	r3, #3
 800c258:	d01d      	beq.n	800c296 <USBD_StdEPReq+0x174>
 800c25a:	e032      	b.n	800c2c2 <USBD_StdEPReq+0x1a0>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c25c:	220e      	movs	r2, #14
 800c25e:	18bb      	adds	r3, r7, r2
 800c260:	781b      	ldrb	r3, [r3, #0]
 800c262:	2b00      	cmp	r3, #0
 800c264:	d010      	beq.n	800c288 <USBD_StdEPReq+0x166>
 800c266:	18bb      	adds	r3, r7, r2
 800c268:	781b      	ldrb	r3, [r3, #0]
 800c26a:	2b80      	cmp	r3, #128	; 0x80
 800c26c:	d00c      	beq.n	800c288 <USBD_StdEPReq+0x166>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800c26e:	18bb      	adds	r3, r7, r2
 800c270:	781a      	ldrb	r2, [r3, #0]
 800c272:	687b      	ldr	r3, [r7, #4]
 800c274:	0011      	movs	r1, r2
 800c276:	0018      	movs	r0, r3
 800c278:	f001 f98d 	bl	800d596 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800c27c:	687b      	ldr	r3, [r7, #4]
 800c27e:	2180      	movs	r1, #128	; 0x80
 800c280:	0018      	movs	r0, r3
 800c282:	f001 f988 	bl	800d596 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800c286:	e024      	b.n	800c2d2 <USBD_StdEPReq+0x1b0>
                USBD_CtlError(pdev, req);
 800c288:	683a      	ldr	r2, [r7, #0]
 800c28a:	687b      	ldr	r3, [r7, #4]
 800c28c:	0011      	movs	r1, r2
 800c28e:	0018      	movs	r0, r3
 800c290:	f000 fc94 	bl	800cbbc <USBD_CtlError>
              break;
 800c294:	e01d      	b.n	800c2d2 <USBD_StdEPReq+0x1b0>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800c296:	683b      	ldr	r3, [r7, #0]
 800c298:	885b      	ldrh	r3, [r3, #2]
 800c29a:	2b00      	cmp	r3, #0
 800c29c:	d118      	bne.n	800c2d0 <USBD_StdEPReq+0x1ae>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800c29e:	210e      	movs	r1, #14
 800c2a0:	187b      	adds	r3, r7, r1
 800c2a2:	781b      	ldrb	r3, [r3, #0]
 800c2a4:	227f      	movs	r2, #127	; 0x7f
 800c2a6:	4013      	ands	r3, r2
 800c2a8:	d006      	beq.n	800c2b8 <USBD_StdEPReq+0x196>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 800c2aa:	187b      	adds	r3, r7, r1
 800c2ac:	781a      	ldrb	r2, [r3, #0]
 800c2ae:	687b      	ldr	r3, [r7, #4]
 800c2b0:	0011      	movs	r1, r2
 800c2b2:	0018      	movs	r0, r3
 800c2b4:	f001 f99a 	bl	800d5ec <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 800c2b8:	687b      	ldr	r3, [r7, #4]
 800c2ba:	0018      	movs	r0, r3
 800c2bc:	f000 fd66 	bl	800cd8c <USBD_CtlSendStatus>
              }
              break;
 800c2c0:	e006      	b.n	800c2d0 <USBD_StdEPReq+0x1ae>

            default:
              USBD_CtlError(pdev, req);
 800c2c2:	683a      	ldr	r2, [r7, #0]
 800c2c4:	687b      	ldr	r3, [r7, #4]
 800c2c6:	0011      	movs	r1, r2
 800c2c8:	0018      	movs	r0, r3
 800c2ca:	f000 fc77 	bl	800cbbc <USBD_CtlError>
              break;
 800c2ce:	e000      	b.n	800c2d2 <USBD_StdEPReq+0x1b0>
              break;
 800c2d0:	46c0      	nop			; (mov r8, r8)
          }
          break;
 800c2d2:	e0cd      	b.n	800c470 <USBD_StdEPReq+0x34e>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800c2d4:	687a      	ldr	r2, [r7, #4]
 800c2d6:	23a7      	movs	r3, #167	; 0xa7
 800c2d8:	009b      	lsls	r3, r3, #2
 800c2da:	5cd3      	ldrb	r3, [r2, r3]
 800c2dc:	2b02      	cmp	r3, #2
 800c2de:	d002      	beq.n	800c2e6 <USBD_StdEPReq+0x1c4>
 800c2e0:	2b03      	cmp	r3, #3
 800c2e2:	d03c      	beq.n	800c35e <USBD_StdEPReq+0x23c>
 800c2e4:	e0b5      	b.n	800c452 <USBD_StdEPReq+0x330>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c2e6:	220e      	movs	r2, #14
 800c2e8:	18bb      	adds	r3, r7, r2
 800c2ea:	781b      	ldrb	r3, [r3, #0]
 800c2ec:	2b00      	cmp	r3, #0
 800c2ee:	d00a      	beq.n	800c306 <USBD_StdEPReq+0x1e4>
 800c2f0:	18bb      	adds	r3, r7, r2
 800c2f2:	781b      	ldrb	r3, [r3, #0]
 800c2f4:	2b80      	cmp	r3, #128	; 0x80
 800c2f6:	d006      	beq.n	800c306 <USBD_StdEPReq+0x1e4>
              {
                USBD_CtlError(pdev, req);
 800c2f8:	683a      	ldr	r2, [r7, #0]
 800c2fa:	687b      	ldr	r3, [r7, #4]
 800c2fc:	0011      	movs	r1, r2
 800c2fe:	0018      	movs	r0, r3
 800c300:	f000 fc5c 	bl	800cbbc <USBD_CtlError>
                break;
 800c304:	e0ac      	b.n	800c460 <USBD_StdEPReq+0x33e>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c306:	220e      	movs	r2, #14
 800c308:	18bb      	adds	r3, r7, r2
 800c30a:	781b      	ldrb	r3, [r3, #0]
 800c30c:	b25b      	sxtb	r3, r3
 800c30e:	2b00      	cmp	r3, #0
 800c310:	da0c      	bge.n	800c32c <USBD_StdEPReq+0x20a>
 800c312:	18bb      	adds	r3, r7, r2
 800c314:	781b      	ldrb	r3, [r3, #0]
 800c316:	227f      	movs	r2, #127	; 0x7f
 800c318:	401a      	ands	r2, r3
 800c31a:	0013      	movs	r3, r2
 800c31c:	009b      	lsls	r3, r3, #2
 800c31e:	189b      	adds	r3, r3, r2
 800c320:	009b      	lsls	r3, r3, #2
 800c322:	3310      	adds	r3, #16
 800c324:	687a      	ldr	r2, [r7, #4]
 800c326:	18d3      	adds	r3, r2, r3
 800c328:	3304      	adds	r3, #4
 800c32a:	e00d      	b.n	800c348 <USBD_StdEPReq+0x226>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800c32c:	230e      	movs	r3, #14
 800c32e:	18fb      	adds	r3, r7, r3
 800c330:	781b      	ldrb	r3, [r3, #0]
 800c332:	227f      	movs	r2, #127	; 0x7f
 800c334:	401a      	ands	r2, r3
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c336:	0013      	movs	r3, r2
 800c338:	009b      	lsls	r3, r3, #2
 800c33a:	189b      	adds	r3, r3, r2
 800c33c:	009b      	lsls	r3, r3, #2
 800c33e:	3351      	adds	r3, #81	; 0x51
 800c340:	33ff      	adds	r3, #255	; 0xff
 800c342:	687a      	ldr	r2, [r7, #4]
 800c344:	18d3      	adds	r3, r2, r3
 800c346:	3304      	adds	r3, #4
 800c348:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800c34a:	68bb      	ldr	r3, [r7, #8]
 800c34c:	2200      	movs	r2, #0
 800c34e:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800c350:	68b9      	ldr	r1, [r7, #8]
 800c352:	687b      	ldr	r3, [r7, #4]
 800c354:	2202      	movs	r2, #2
 800c356:	0018      	movs	r0, r3
 800c358:	f000 fcae 	bl	800ccb8 <USBD_CtlSendData>
              break;
 800c35c:	e080      	b.n	800c460 <USBD_StdEPReq+0x33e>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800c35e:	220e      	movs	r2, #14
 800c360:	18bb      	adds	r3, r7, r2
 800c362:	781b      	ldrb	r3, [r3, #0]
 800c364:	b25b      	sxtb	r3, r3
 800c366:	2b00      	cmp	r3, #0
 800c368:	da14      	bge.n	800c394 <USBD_StdEPReq+0x272>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800c36a:	18bb      	adds	r3, r7, r2
 800c36c:	781b      	ldrb	r3, [r3, #0]
 800c36e:	220f      	movs	r2, #15
 800c370:	401a      	ands	r2, r3
 800c372:	6879      	ldr	r1, [r7, #4]
 800c374:	0013      	movs	r3, r2
 800c376:	009b      	lsls	r3, r3, #2
 800c378:	189b      	adds	r3, r3, r2
 800c37a:	009b      	lsls	r3, r3, #2
 800c37c:	18cb      	adds	r3, r1, r3
 800c37e:	3318      	adds	r3, #24
 800c380:	681b      	ldr	r3, [r3, #0]
 800c382:	2b00      	cmp	r3, #0
 800c384:	d11e      	bne.n	800c3c4 <USBD_StdEPReq+0x2a2>
                {
                  USBD_CtlError(pdev, req);
 800c386:	683a      	ldr	r2, [r7, #0]
 800c388:	687b      	ldr	r3, [r7, #4]
 800c38a:	0011      	movs	r1, r2
 800c38c:	0018      	movs	r0, r3
 800c38e:	f000 fc15 	bl	800cbbc <USBD_CtlError>
                  break;
 800c392:	e065      	b.n	800c460 <USBD_StdEPReq+0x33e>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800c394:	230e      	movs	r3, #14
 800c396:	18fb      	adds	r3, r7, r3
 800c398:	781b      	ldrb	r3, [r3, #0]
 800c39a:	220f      	movs	r2, #15
 800c39c:	401a      	ands	r2, r3
 800c39e:	6878      	ldr	r0, [r7, #4]
 800c3a0:	23ac      	movs	r3, #172	; 0xac
 800c3a2:	0059      	lsls	r1, r3, #1
 800c3a4:	0013      	movs	r3, r2
 800c3a6:	009b      	lsls	r3, r3, #2
 800c3a8:	189b      	adds	r3, r3, r2
 800c3aa:	009b      	lsls	r3, r3, #2
 800c3ac:	18c3      	adds	r3, r0, r3
 800c3ae:	185b      	adds	r3, r3, r1
 800c3b0:	681b      	ldr	r3, [r3, #0]
 800c3b2:	2b00      	cmp	r3, #0
 800c3b4:	d106      	bne.n	800c3c4 <USBD_StdEPReq+0x2a2>
                {
                  USBD_CtlError(pdev, req);
 800c3b6:	683a      	ldr	r2, [r7, #0]
 800c3b8:	687b      	ldr	r3, [r7, #4]
 800c3ba:	0011      	movs	r1, r2
 800c3bc:	0018      	movs	r0, r3
 800c3be:	f000 fbfd 	bl	800cbbc <USBD_CtlError>
                  break;
 800c3c2:	e04d      	b.n	800c460 <USBD_StdEPReq+0x33e>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c3c4:	220e      	movs	r2, #14
 800c3c6:	18bb      	adds	r3, r7, r2
 800c3c8:	781b      	ldrb	r3, [r3, #0]
 800c3ca:	b25b      	sxtb	r3, r3
 800c3cc:	2b00      	cmp	r3, #0
 800c3ce:	da0c      	bge.n	800c3ea <USBD_StdEPReq+0x2c8>
 800c3d0:	18bb      	adds	r3, r7, r2
 800c3d2:	781b      	ldrb	r3, [r3, #0]
 800c3d4:	227f      	movs	r2, #127	; 0x7f
 800c3d6:	401a      	ands	r2, r3
 800c3d8:	0013      	movs	r3, r2
 800c3da:	009b      	lsls	r3, r3, #2
 800c3dc:	189b      	adds	r3, r3, r2
 800c3de:	009b      	lsls	r3, r3, #2
 800c3e0:	3310      	adds	r3, #16
 800c3e2:	687a      	ldr	r2, [r7, #4]
 800c3e4:	18d3      	adds	r3, r2, r3
 800c3e6:	3304      	adds	r3, #4
 800c3e8:	e00d      	b.n	800c406 <USBD_StdEPReq+0x2e4>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800c3ea:	230e      	movs	r3, #14
 800c3ec:	18fb      	adds	r3, r7, r3
 800c3ee:	781b      	ldrb	r3, [r3, #0]
 800c3f0:	227f      	movs	r2, #127	; 0x7f
 800c3f2:	401a      	ands	r2, r3
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c3f4:	0013      	movs	r3, r2
 800c3f6:	009b      	lsls	r3, r3, #2
 800c3f8:	189b      	adds	r3, r3, r2
 800c3fa:	009b      	lsls	r3, r3, #2
 800c3fc:	3351      	adds	r3, #81	; 0x51
 800c3fe:	33ff      	adds	r3, #255	; 0xff
 800c400:	687a      	ldr	r2, [r7, #4]
 800c402:	18d3      	adds	r3, r2, r3
 800c404:	3304      	adds	r3, #4
 800c406:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800c408:	220e      	movs	r2, #14
 800c40a:	18bb      	adds	r3, r7, r2
 800c40c:	781b      	ldrb	r3, [r3, #0]
 800c40e:	2b00      	cmp	r3, #0
 800c410:	d003      	beq.n	800c41a <USBD_StdEPReq+0x2f8>
 800c412:	18bb      	adds	r3, r7, r2
 800c414:	781b      	ldrb	r3, [r3, #0]
 800c416:	2b80      	cmp	r3, #128	; 0x80
 800c418:	d103      	bne.n	800c422 <USBD_StdEPReq+0x300>
              {
                pep->status = 0x0000U;
 800c41a:	68bb      	ldr	r3, [r7, #8]
 800c41c:	2200      	movs	r2, #0
 800c41e:	601a      	str	r2, [r3, #0]
 800c420:	e010      	b.n	800c444 <USBD_StdEPReq+0x322>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 800c422:	230e      	movs	r3, #14
 800c424:	18fb      	adds	r3, r7, r3
 800c426:	781a      	ldrb	r2, [r3, #0]
 800c428:	687b      	ldr	r3, [r7, #4]
 800c42a:	0011      	movs	r1, r2
 800c42c:	0018      	movs	r0, r3
 800c42e:	f001 f908 	bl	800d642 <USBD_LL_IsStallEP>
 800c432:	1e03      	subs	r3, r0, #0
 800c434:	d003      	beq.n	800c43e <USBD_StdEPReq+0x31c>
              {
                pep->status = 0x0001U;
 800c436:	68bb      	ldr	r3, [r7, #8]
 800c438:	2201      	movs	r2, #1
 800c43a:	601a      	str	r2, [r3, #0]
 800c43c:	e002      	b.n	800c444 <USBD_StdEPReq+0x322>
              }
              else
              {
                pep->status = 0x0000U;
 800c43e:	68bb      	ldr	r3, [r7, #8]
 800c440:	2200      	movs	r2, #0
 800c442:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800c444:	68b9      	ldr	r1, [r7, #8]
 800c446:	687b      	ldr	r3, [r7, #4]
 800c448:	2202      	movs	r2, #2
 800c44a:	0018      	movs	r0, r3
 800c44c:	f000 fc34 	bl	800ccb8 <USBD_CtlSendData>
              break;
 800c450:	e006      	b.n	800c460 <USBD_StdEPReq+0x33e>

            default:
              USBD_CtlError(pdev, req);
 800c452:	683a      	ldr	r2, [r7, #0]
 800c454:	687b      	ldr	r3, [r7, #4]
 800c456:	0011      	movs	r1, r2
 800c458:	0018      	movs	r0, r3
 800c45a:	f000 fbaf 	bl	800cbbc <USBD_CtlError>
              break;
 800c45e:	46c0      	nop			; (mov r8, r8)
          }
          break;
 800c460:	e006      	b.n	800c470 <USBD_StdEPReq+0x34e>

        default:
          USBD_CtlError(pdev, req);
 800c462:	683a      	ldr	r2, [r7, #0]
 800c464:	687b      	ldr	r3, [r7, #4]
 800c466:	0011      	movs	r1, r2
 800c468:	0018      	movs	r0, r3
 800c46a:	f000 fba7 	bl	800cbbc <USBD_CtlError>
          break;
 800c46e:	46c0      	nop			; (mov r8, r8)
      }
      break;
 800c470:	e006      	b.n	800c480 <USBD_StdEPReq+0x35e>

    default:
      USBD_CtlError(pdev, req);
 800c472:	683a      	ldr	r2, [r7, #0]
 800c474:	687b      	ldr	r3, [r7, #4]
 800c476:	0011      	movs	r1, r2
 800c478:	0018      	movs	r0, r3
 800c47a:	f000 fb9f 	bl	800cbbc <USBD_CtlError>
      break;
 800c47e:	46c0      	nop			; (mov r8, r8)
  }

  return ret;
 800c480:	230f      	movs	r3, #15
 800c482:	18fb      	adds	r3, r7, r3
 800c484:	781b      	ldrb	r3, [r3, #0]
}
 800c486:	0018      	movs	r0, r3
 800c488:	46bd      	mov	sp, r7
 800c48a:	b004      	add	sp, #16
 800c48c:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800c490 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800c490:	b580      	push	{r7, lr}
 800c492:	b084      	sub	sp, #16
 800c494:	af00      	add	r7, sp, #0
 800c496:	6078      	str	r0, [r7, #4]
 800c498:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800c49a:	2308      	movs	r3, #8
 800c49c:	18fb      	adds	r3, r7, r3
 800c49e:	2200      	movs	r2, #0
 800c4a0:	801a      	strh	r2, [r3, #0]
  uint8_t *pbuf = NULL;
 800c4a2:	2300      	movs	r3, #0
 800c4a4:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800c4a6:	230b      	movs	r3, #11
 800c4a8:	18fb      	adds	r3, r7, r3
 800c4aa:	2200      	movs	r2, #0
 800c4ac:	701a      	strb	r2, [r3, #0]

  switch (req->wValue >> 8)
 800c4ae:	683b      	ldr	r3, [r7, #0]
 800c4b0:	885b      	ldrh	r3, [r3, #2]
 800c4b2:	0a1b      	lsrs	r3, r3, #8
 800c4b4:	b29b      	uxth	r3, r3
 800c4b6:	2b07      	cmp	r3, #7
 800c4b8:	d900      	bls.n	800c4bc <USBD_GetDescriptor+0x2c>
 800c4ba:	e159      	b.n	800c770 <USBD_GetDescriptor+0x2e0>
 800c4bc:	009a      	lsls	r2, r3, #2
 800c4be:	4bcb      	ldr	r3, [pc, #812]	; (800c7ec <USBD_GetDescriptor+0x35c>)
 800c4c0:	18d3      	adds	r3, r2, r3
 800c4c2:	681b      	ldr	r3, [r3, #0]
 800c4c4:	469f      	mov	pc, r3
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800c4c6:	687a      	ldr	r2, [r7, #4]
 800c4c8:	23ac      	movs	r3, #172	; 0xac
 800c4ca:	009b      	lsls	r3, r3, #2
 800c4cc:	58d3      	ldr	r3, [r2, r3]
 800c4ce:	681b      	ldr	r3, [r3, #0]
 800c4d0:	687a      	ldr	r2, [r7, #4]
 800c4d2:	7c12      	ldrb	r2, [r2, #16]
 800c4d4:	2108      	movs	r1, #8
 800c4d6:	1879      	adds	r1, r7, r1
 800c4d8:	0010      	movs	r0, r2
 800c4da:	4798      	blx	r3
 800c4dc:	0003      	movs	r3, r0
 800c4de:	60fb      	str	r3, [r7, #12]
      break;
 800c4e0:	e153      	b.n	800c78a <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c4e2:	687b      	ldr	r3, [r7, #4]
 800c4e4:	7c1b      	ldrb	r3, [r3, #16]
 800c4e6:	2b00      	cmp	r3, #0
 800c4e8:	d10f      	bne.n	800c50a <USBD_GetDescriptor+0x7a>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800c4ea:	687a      	ldr	r2, [r7, #4]
 800c4ec:	23ad      	movs	r3, #173	; 0xad
 800c4ee:	009b      	lsls	r3, r3, #2
 800c4f0:	58d3      	ldr	r3, [r2, r3]
 800c4f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c4f4:	2208      	movs	r2, #8
 800c4f6:	18ba      	adds	r2, r7, r2
 800c4f8:	0010      	movs	r0, r2
 800c4fa:	4798      	blx	r3
 800c4fc:	0003      	movs	r3, r0
 800c4fe:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800c500:	68fb      	ldr	r3, [r7, #12]
 800c502:	3301      	adds	r3, #1
 800c504:	2202      	movs	r2, #2
 800c506:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800c508:	e13f      	b.n	800c78a <USBD_GetDescriptor+0x2fa>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800c50a:	687a      	ldr	r2, [r7, #4]
 800c50c:	23ad      	movs	r3, #173	; 0xad
 800c50e:	009b      	lsls	r3, r3, #2
 800c510:	58d3      	ldr	r3, [r2, r3]
 800c512:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c514:	2208      	movs	r2, #8
 800c516:	18ba      	adds	r2, r7, r2
 800c518:	0010      	movs	r0, r2
 800c51a:	4798      	blx	r3
 800c51c:	0003      	movs	r3, r0
 800c51e:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800c520:	68fb      	ldr	r3, [r7, #12]
 800c522:	3301      	adds	r3, #1
 800c524:	2202      	movs	r2, #2
 800c526:	701a      	strb	r2, [r3, #0]
      break;
 800c528:	e12f      	b.n	800c78a <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800c52a:	683b      	ldr	r3, [r7, #0]
 800c52c:	885b      	ldrh	r3, [r3, #2]
 800c52e:	b2db      	uxtb	r3, r3
 800c530:	2b05      	cmp	r3, #5
 800c532:	d900      	bls.n	800c536 <USBD_GetDescriptor+0xa6>
 800c534:	e0d0      	b.n	800c6d8 <USBD_GetDescriptor+0x248>
 800c536:	009a      	lsls	r2, r3, #2
 800c538:	4bad      	ldr	r3, [pc, #692]	; (800c7f0 <USBD_GetDescriptor+0x360>)
 800c53a:	18d3      	adds	r3, r2, r3
 800c53c:	681b      	ldr	r3, [r3, #0]
 800c53e:	469f      	mov	pc, r3
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800c540:	687a      	ldr	r2, [r7, #4]
 800c542:	23ac      	movs	r3, #172	; 0xac
 800c544:	009b      	lsls	r3, r3, #2
 800c546:	58d3      	ldr	r3, [r2, r3]
 800c548:	685b      	ldr	r3, [r3, #4]
 800c54a:	2b00      	cmp	r3, #0
 800c54c:	d00d      	beq.n	800c56a <USBD_GetDescriptor+0xda>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800c54e:	687a      	ldr	r2, [r7, #4]
 800c550:	23ac      	movs	r3, #172	; 0xac
 800c552:	009b      	lsls	r3, r3, #2
 800c554:	58d3      	ldr	r3, [r2, r3]
 800c556:	685b      	ldr	r3, [r3, #4]
 800c558:	687a      	ldr	r2, [r7, #4]
 800c55a:	7c12      	ldrb	r2, [r2, #16]
 800c55c:	2108      	movs	r1, #8
 800c55e:	1879      	adds	r1, r7, r1
 800c560:	0010      	movs	r0, r2
 800c562:	4798      	blx	r3
 800c564:	0003      	movs	r3, r0
 800c566:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c568:	e0c3      	b.n	800c6f2 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 800c56a:	683a      	ldr	r2, [r7, #0]
 800c56c:	687b      	ldr	r3, [r7, #4]
 800c56e:	0011      	movs	r1, r2
 800c570:	0018      	movs	r0, r3
 800c572:	f000 fb23 	bl	800cbbc <USBD_CtlError>
            err++;
 800c576:	210b      	movs	r1, #11
 800c578:	187b      	adds	r3, r7, r1
 800c57a:	781a      	ldrb	r2, [r3, #0]
 800c57c:	187b      	adds	r3, r7, r1
 800c57e:	3201      	adds	r2, #1
 800c580:	701a      	strb	r2, [r3, #0]
          break;
 800c582:	e0b6      	b.n	800c6f2 <USBD_GetDescriptor+0x262>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800c584:	687a      	ldr	r2, [r7, #4]
 800c586:	23ac      	movs	r3, #172	; 0xac
 800c588:	009b      	lsls	r3, r3, #2
 800c58a:	58d3      	ldr	r3, [r2, r3]
 800c58c:	689b      	ldr	r3, [r3, #8]
 800c58e:	2b00      	cmp	r3, #0
 800c590:	d00d      	beq.n	800c5ae <USBD_GetDescriptor+0x11e>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800c592:	687a      	ldr	r2, [r7, #4]
 800c594:	23ac      	movs	r3, #172	; 0xac
 800c596:	009b      	lsls	r3, r3, #2
 800c598:	58d3      	ldr	r3, [r2, r3]
 800c59a:	689b      	ldr	r3, [r3, #8]
 800c59c:	687a      	ldr	r2, [r7, #4]
 800c59e:	7c12      	ldrb	r2, [r2, #16]
 800c5a0:	2108      	movs	r1, #8
 800c5a2:	1879      	adds	r1, r7, r1
 800c5a4:	0010      	movs	r0, r2
 800c5a6:	4798      	blx	r3
 800c5a8:	0003      	movs	r3, r0
 800c5aa:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c5ac:	e0a1      	b.n	800c6f2 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 800c5ae:	683a      	ldr	r2, [r7, #0]
 800c5b0:	687b      	ldr	r3, [r7, #4]
 800c5b2:	0011      	movs	r1, r2
 800c5b4:	0018      	movs	r0, r3
 800c5b6:	f000 fb01 	bl	800cbbc <USBD_CtlError>
            err++;
 800c5ba:	210b      	movs	r1, #11
 800c5bc:	187b      	adds	r3, r7, r1
 800c5be:	781a      	ldrb	r2, [r3, #0]
 800c5c0:	187b      	adds	r3, r7, r1
 800c5c2:	3201      	adds	r2, #1
 800c5c4:	701a      	strb	r2, [r3, #0]
          break;
 800c5c6:	e094      	b.n	800c6f2 <USBD_GetDescriptor+0x262>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800c5c8:	687a      	ldr	r2, [r7, #4]
 800c5ca:	23ac      	movs	r3, #172	; 0xac
 800c5cc:	009b      	lsls	r3, r3, #2
 800c5ce:	58d3      	ldr	r3, [r2, r3]
 800c5d0:	68db      	ldr	r3, [r3, #12]
 800c5d2:	2b00      	cmp	r3, #0
 800c5d4:	d00d      	beq.n	800c5f2 <USBD_GetDescriptor+0x162>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800c5d6:	687a      	ldr	r2, [r7, #4]
 800c5d8:	23ac      	movs	r3, #172	; 0xac
 800c5da:	009b      	lsls	r3, r3, #2
 800c5dc:	58d3      	ldr	r3, [r2, r3]
 800c5de:	68db      	ldr	r3, [r3, #12]
 800c5e0:	687a      	ldr	r2, [r7, #4]
 800c5e2:	7c12      	ldrb	r2, [r2, #16]
 800c5e4:	2108      	movs	r1, #8
 800c5e6:	1879      	adds	r1, r7, r1
 800c5e8:	0010      	movs	r0, r2
 800c5ea:	4798      	blx	r3
 800c5ec:	0003      	movs	r3, r0
 800c5ee:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c5f0:	e07f      	b.n	800c6f2 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 800c5f2:	683a      	ldr	r2, [r7, #0]
 800c5f4:	687b      	ldr	r3, [r7, #4]
 800c5f6:	0011      	movs	r1, r2
 800c5f8:	0018      	movs	r0, r3
 800c5fa:	f000 fadf 	bl	800cbbc <USBD_CtlError>
            err++;
 800c5fe:	210b      	movs	r1, #11
 800c600:	187b      	adds	r3, r7, r1
 800c602:	781a      	ldrb	r2, [r3, #0]
 800c604:	187b      	adds	r3, r7, r1
 800c606:	3201      	adds	r2, #1
 800c608:	701a      	strb	r2, [r3, #0]
          break;
 800c60a:	e072      	b.n	800c6f2 <USBD_GetDescriptor+0x262>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800c60c:	687a      	ldr	r2, [r7, #4]
 800c60e:	23ac      	movs	r3, #172	; 0xac
 800c610:	009b      	lsls	r3, r3, #2
 800c612:	58d3      	ldr	r3, [r2, r3]
 800c614:	691b      	ldr	r3, [r3, #16]
 800c616:	2b00      	cmp	r3, #0
 800c618:	d00d      	beq.n	800c636 <USBD_GetDescriptor+0x1a6>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800c61a:	687a      	ldr	r2, [r7, #4]
 800c61c:	23ac      	movs	r3, #172	; 0xac
 800c61e:	009b      	lsls	r3, r3, #2
 800c620:	58d3      	ldr	r3, [r2, r3]
 800c622:	691b      	ldr	r3, [r3, #16]
 800c624:	687a      	ldr	r2, [r7, #4]
 800c626:	7c12      	ldrb	r2, [r2, #16]
 800c628:	2108      	movs	r1, #8
 800c62a:	1879      	adds	r1, r7, r1
 800c62c:	0010      	movs	r0, r2
 800c62e:	4798      	blx	r3
 800c630:	0003      	movs	r3, r0
 800c632:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c634:	e05d      	b.n	800c6f2 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 800c636:	683a      	ldr	r2, [r7, #0]
 800c638:	687b      	ldr	r3, [r7, #4]
 800c63a:	0011      	movs	r1, r2
 800c63c:	0018      	movs	r0, r3
 800c63e:	f000 fabd 	bl	800cbbc <USBD_CtlError>
            err++;
 800c642:	210b      	movs	r1, #11
 800c644:	187b      	adds	r3, r7, r1
 800c646:	781a      	ldrb	r2, [r3, #0]
 800c648:	187b      	adds	r3, r7, r1
 800c64a:	3201      	adds	r2, #1
 800c64c:	701a      	strb	r2, [r3, #0]
          break;
 800c64e:	e050      	b.n	800c6f2 <USBD_GetDescriptor+0x262>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800c650:	687a      	ldr	r2, [r7, #4]
 800c652:	23ac      	movs	r3, #172	; 0xac
 800c654:	009b      	lsls	r3, r3, #2
 800c656:	58d3      	ldr	r3, [r2, r3]
 800c658:	695b      	ldr	r3, [r3, #20]
 800c65a:	2b00      	cmp	r3, #0
 800c65c:	d00d      	beq.n	800c67a <USBD_GetDescriptor+0x1ea>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800c65e:	687a      	ldr	r2, [r7, #4]
 800c660:	23ac      	movs	r3, #172	; 0xac
 800c662:	009b      	lsls	r3, r3, #2
 800c664:	58d3      	ldr	r3, [r2, r3]
 800c666:	695b      	ldr	r3, [r3, #20]
 800c668:	687a      	ldr	r2, [r7, #4]
 800c66a:	7c12      	ldrb	r2, [r2, #16]
 800c66c:	2108      	movs	r1, #8
 800c66e:	1879      	adds	r1, r7, r1
 800c670:	0010      	movs	r0, r2
 800c672:	4798      	blx	r3
 800c674:	0003      	movs	r3, r0
 800c676:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c678:	e03b      	b.n	800c6f2 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 800c67a:	683a      	ldr	r2, [r7, #0]
 800c67c:	687b      	ldr	r3, [r7, #4]
 800c67e:	0011      	movs	r1, r2
 800c680:	0018      	movs	r0, r3
 800c682:	f000 fa9b 	bl	800cbbc <USBD_CtlError>
            err++;
 800c686:	210b      	movs	r1, #11
 800c688:	187b      	adds	r3, r7, r1
 800c68a:	781a      	ldrb	r2, [r3, #0]
 800c68c:	187b      	adds	r3, r7, r1
 800c68e:	3201      	adds	r2, #1
 800c690:	701a      	strb	r2, [r3, #0]
          break;
 800c692:	e02e      	b.n	800c6f2 <USBD_GetDescriptor+0x262>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800c694:	687a      	ldr	r2, [r7, #4]
 800c696:	23ac      	movs	r3, #172	; 0xac
 800c698:	009b      	lsls	r3, r3, #2
 800c69a:	58d3      	ldr	r3, [r2, r3]
 800c69c:	699b      	ldr	r3, [r3, #24]
 800c69e:	2b00      	cmp	r3, #0
 800c6a0:	d00d      	beq.n	800c6be <USBD_GetDescriptor+0x22e>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800c6a2:	687a      	ldr	r2, [r7, #4]
 800c6a4:	23ac      	movs	r3, #172	; 0xac
 800c6a6:	009b      	lsls	r3, r3, #2
 800c6a8:	58d3      	ldr	r3, [r2, r3]
 800c6aa:	699b      	ldr	r3, [r3, #24]
 800c6ac:	687a      	ldr	r2, [r7, #4]
 800c6ae:	7c12      	ldrb	r2, [r2, #16]
 800c6b0:	2108      	movs	r1, #8
 800c6b2:	1879      	adds	r1, r7, r1
 800c6b4:	0010      	movs	r0, r2
 800c6b6:	4798      	blx	r3
 800c6b8:	0003      	movs	r3, r0
 800c6ba:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c6bc:	e019      	b.n	800c6f2 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 800c6be:	683a      	ldr	r2, [r7, #0]
 800c6c0:	687b      	ldr	r3, [r7, #4]
 800c6c2:	0011      	movs	r1, r2
 800c6c4:	0018      	movs	r0, r3
 800c6c6:	f000 fa79 	bl	800cbbc <USBD_CtlError>
            err++;
 800c6ca:	210b      	movs	r1, #11
 800c6cc:	187b      	adds	r3, r7, r1
 800c6ce:	781a      	ldrb	r2, [r3, #0]
 800c6d0:	187b      	adds	r3, r7, r1
 800c6d2:	3201      	adds	r2, #1
 800c6d4:	701a      	strb	r2, [r3, #0]
          break;
 800c6d6:	e00c      	b.n	800c6f2 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 800c6d8:	683a      	ldr	r2, [r7, #0]
 800c6da:	687b      	ldr	r3, [r7, #4]
 800c6dc:	0011      	movs	r1, r2
 800c6de:	0018      	movs	r0, r3
 800c6e0:	f000 fa6c 	bl	800cbbc <USBD_CtlError>
          err++;
 800c6e4:	210b      	movs	r1, #11
 800c6e6:	187b      	adds	r3, r7, r1
 800c6e8:	781a      	ldrb	r2, [r3, #0]
 800c6ea:	187b      	adds	r3, r7, r1
 800c6ec:	3201      	adds	r2, #1
 800c6ee:	701a      	strb	r2, [r3, #0]
#endif
      }
      break;
 800c6f0:	e04b      	b.n	800c78a <USBD_GetDescriptor+0x2fa>
 800c6f2:	e04a      	b.n	800c78a <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c6f4:	687b      	ldr	r3, [r7, #4]
 800c6f6:	7c1b      	ldrb	r3, [r3, #16]
 800c6f8:	2b00      	cmp	r3, #0
 800c6fa:	d10b      	bne.n	800c714 <USBD_GetDescriptor+0x284>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800c6fc:	687a      	ldr	r2, [r7, #4]
 800c6fe:	23ad      	movs	r3, #173	; 0xad
 800c700:	009b      	lsls	r3, r3, #2
 800c702:	58d3      	ldr	r3, [r2, r3]
 800c704:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c706:	2208      	movs	r2, #8
 800c708:	18ba      	adds	r2, r7, r2
 800c70a:	0010      	movs	r0, r2
 800c70c:	4798      	blx	r3
 800c70e:	0003      	movs	r3, r0
 800c710:	60fb      	str	r3, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c712:	e03a      	b.n	800c78a <USBD_GetDescriptor+0x2fa>
        USBD_CtlError(pdev, req);
 800c714:	683a      	ldr	r2, [r7, #0]
 800c716:	687b      	ldr	r3, [r7, #4]
 800c718:	0011      	movs	r1, r2
 800c71a:	0018      	movs	r0, r3
 800c71c:	f000 fa4e 	bl	800cbbc <USBD_CtlError>
        err++;
 800c720:	210b      	movs	r1, #11
 800c722:	187b      	adds	r3, r7, r1
 800c724:	781a      	ldrb	r2, [r3, #0]
 800c726:	187b      	adds	r3, r7, r1
 800c728:	3201      	adds	r2, #1
 800c72a:	701a      	strb	r2, [r3, #0]
      break;
 800c72c:	e02d      	b.n	800c78a <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c72e:	687b      	ldr	r3, [r7, #4]
 800c730:	7c1b      	ldrb	r3, [r3, #16]
 800c732:	2b00      	cmp	r3, #0
 800c734:	d10f      	bne.n	800c756 <USBD_GetDescriptor+0x2c6>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800c736:	687a      	ldr	r2, [r7, #4]
 800c738:	23ad      	movs	r3, #173	; 0xad
 800c73a:	009b      	lsls	r3, r3, #2
 800c73c:	58d3      	ldr	r3, [r2, r3]
 800c73e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c740:	2208      	movs	r2, #8
 800c742:	18ba      	adds	r2, r7, r2
 800c744:	0010      	movs	r0, r2
 800c746:	4798      	blx	r3
 800c748:	0003      	movs	r3, r0
 800c74a:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800c74c:	68fb      	ldr	r3, [r7, #12]
 800c74e:	3301      	adds	r3, #1
 800c750:	2207      	movs	r2, #7
 800c752:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c754:	e019      	b.n	800c78a <USBD_GetDescriptor+0x2fa>
        USBD_CtlError(pdev, req);
 800c756:	683a      	ldr	r2, [r7, #0]
 800c758:	687b      	ldr	r3, [r7, #4]
 800c75a:	0011      	movs	r1, r2
 800c75c:	0018      	movs	r0, r3
 800c75e:	f000 fa2d 	bl	800cbbc <USBD_CtlError>
        err++;
 800c762:	210b      	movs	r1, #11
 800c764:	187b      	adds	r3, r7, r1
 800c766:	781a      	ldrb	r2, [r3, #0]
 800c768:	187b      	adds	r3, r7, r1
 800c76a:	3201      	adds	r2, #1
 800c76c:	701a      	strb	r2, [r3, #0]
      break;
 800c76e:	e00c      	b.n	800c78a <USBD_GetDescriptor+0x2fa>

    default:
      USBD_CtlError(pdev, req);
 800c770:	683a      	ldr	r2, [r7, #0]
 800c772:	687b      	ldr	r3, [r7, #4]
 800c774:	0011      	movs	r1, r2
 800c776:	0018      	movs	r0, r3
 800c778:	f000 fa20 	bl	800cbbc <USBD_CtlError>
      err++;
 800c77c:	210b      	movs	r1, #11
 800c77e:	187b      	adds	r3, r7, r1
 800c780:	781a      	ldrb	r2, [r3, #0]
 800c782:	187b      	adds	r3, r7, r1
 800c784:	3201      	adds	r2, #1
 800c786:	701a      	strb	r2, [r3, #0]
      break;
 800c788:	46c0      	nop			; (mov r8, r8)
  }

  if (err != 0U)
 800c78a:	230b      	movs	r3, #11
 800c78c:	18fb      	adds	r3, r7, r3
 800c78e:	781b      	ldrb	r3, [r3, #0]
 800c790:	2b00      	cmp	r3, #0
 800c792:	d127      	bne.n	800c7e4 <USBD_GetDescriptor+0x354>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 800c794:	2108      	movs	r1, #8
 800c796:	187b      	adds	r3, r7, r1
 800c798:	881b      	ldrh	r3, [r3, #0]
 800c79a:	2b00      	cmp	r3, #0
 800c79c:	d019      	beq.n	800c7d2 <USBD_GetDescriptor+0x342>
 800c79e:	683b      	ldr	r3, [r7, #0]
 800c7a0:	88db      	ldrh	r3, [r3, #6]
 800c7a2:	2b00      	cmp	r3, #0
 800c7a4:	d015      	beq.n	800c7d2 <USBD_GetDescriptor+0x342>
    {
      len = MIN(len, req->wLength);
 800c7a6:	683b      	ldr	r3, [r7, #0]
 800c7a8:	88da      	ldrh	r2, [r3, #6]
 800c7aa:	187b      	adds	r3, r7, r1
 800c7ac:	881b      	ldrh	r3, [r3, #0]
 800c7ae:	1c18      	adds	r0, r3, #0
 800c7b0:	1c11      	adds	r1, r2, #0
 800c7b2:	b28a      	uxth	r2, r1
 800c7b4:	b283      	uxth	r3, r0
 800c7b6:	429a      	cmp	r2, r3
 800c7b8:	d900      	bls.n	800c7bc <USBD_GetDescriptor+0x32c>
 800c7ba:	1c01      	adds	r1, r0, #0
 800c7bc:	b28a      	uxth	r2, r1
 800c7be:	2108      	movs	r1, #8
 800c7c0:	187b      	adds	r3, r7, r1
 800c7c2:	801a      	strh	r2, [r3, #0]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800c7c4:	187b      	adds	r3, r7, r1
 800c7c6:	881a      	ldrh	r2, [r3, #0]
 800c7c8:	68f9      	ldr	r1, [r7, #12]
 800c7ca:	687b      	ldr	r3, [r7, #4]
 800c7cc:	0018      	movs	r0, r3
 800c7ce:	f000 fa73 	bl	800ccb8 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 800c7d2:	683b      	ldr	r3, [r7, #0]
 800c7d4:	88db      	ldrh	r3, [r3, #6]
 800c7d6:	2b00      	cmp	r3, #0
 800c7d8:	d105      	bne.n	800c7e6 <USBD_GetDescriptor+0x356>
    {
      (void)USBD_CtlSendStatus(pdev);
 800c7da:	687b      	ldr	r3, [r7, #4]
 800c7dc:	0018      	movs	r0, r3
 800c7de:	f000 fad5 	bl	800cd8c <USBD_CtlSendStatus>
 800c7e2:	e000      	b.n	800c7e6 <USBD_GetDescriptor+0x356>
    return;
 800c7e4:	46c0      	nop			; (mov r8, r8)
    }
  }
}
 800c7e6:	46bd      	mov	sp, r7
 800c7e8:	b004      	add	sp, #16
 800c7ea:	bd80      	pop	{r7, pc}
 800c7ec:	0800e49c 	.word	0x0800e49c
 800c7f0:	0800e4bc 	.word	0x0800e4bc

0800c7f4 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800c7f4:	b590      	push	{r4, r7, lr}
 800c7f6:	b085      	sub	sp, #20
 800c7f8:	af00      	add	r7, sp, #0
 800c7fa:	6078      	str	r0, [r7, #4]
 800c7fc:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800c7fe:	683b      	ldr	r3, [r7, #0]
 800c800:	889b      	ldrh	r3, [r3, #4]
 800c802:	2b00      	cmp	r3, #0
 800c804:	d13d      	bne.n	800c882 <USBD_SetAddress+0x8e>
 800c806:	683b      	ldr	r3, [r7, #0]
 800c808:	88db      	ldrh	r3, [r3, #6]
 800c80a:	2b00      	cmp	r3, #0
 800c80c:	d139      	bne.n	800c882 <USBD_SetAddress+0x8e>
 800c80e:	683b      	ldr	r3, [r7, #0]
 800c810:	885b      	ldrh	r3, [r3, #2]
 800c812:	2b7f      	cmp	r3, #127	; 0x7f
 800c814:	d835      	bhi.n	800c882 <USBD_SetAddress+0x8e>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800c816:	683b      	ldr	r3, [r7, #0]
 800c818:	885b      	ldrh	r3, [r3, #2]
 800c81a:	b2da      	uxtb	r2, r3
 800c81c:	230f      	movs	r3, #15
 800c81e:	18fb      	adds	r3, r7, r3
 800c820:	217f      	movs	r1, #127	; 0x7f
 800c822:	400a      	ands	r2, r1
 800c824:	701a      	strb	r2, [r3, #0]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c826:	687a      	ldr	r2, [r7, #4]
 800c828:	23a7      	movs	r3, #167	; 0xa7
 800c82a:	009b      	lsls	r3, r3, #2
 800c82c:	5cd3      	ldrb	r3, [r2, r3]
 800c82e:	2b03      	cmp	r3, #3
 800c830:	d106      	bne.n	800c840 <USBD_SetAddress+0x4c>
    {
      USBD_CtlError(pdev, req);
 800c832:	683a      	ldr	r2, [r7, #0]
 800c834:	687b      	ldr	r3, [r7, #4]
 800c836:	0011      	movs	r1, r2
 800c838:	0018      	movs	r0, r3
 800c83a:	f000 f9bf 	bl	800cbbc <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c83e:	e027      	b.n	800c890 <USBD_SetAddress+0x9c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800c840:	687b      	ldr	r3, [r7, #4]
 800c842:	240f      	movs	r4, #15
 800c844:	193a      	adds	r2, r7, r4
 800c846:	4914      	ldr	r1, [pc, #80]	; (800c898 <USBD_SetAddress+0xa4>)
 800c848:	7812      	ldrb	r2, [r2, #0]
 800c84a:	545a      	strb	r2, [r3, r1]
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800c84c:	193b      	adds	r3, r7, r4
 800c84e:	781a      	ldrb	r2, [r3, #0]
 800c850:	687b      	ldr	r3, [r7, #4]
 800c852:	0011      	movs	r1, r2
 800c854:	0018      	movs	r0, r3
 800c856:	f000 ff25 	bl	800d6a4 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800c85a:	687b      	ldr	r3, [r7, #4]
 800c85c:	0018      	movs	r0, r3
 800c85e:	f000 fa95 	bl	800cd8c <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800c862:	193b      	adds	r3, r7, r4
 800c864:	781b      	ldrb	r3, [r3, #0]
 800c866:	2b00      	cmp	r3, #0
 800c868:	d005      	beq.n	800c876 <USBD_SetAddress+0x82>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800c86a:	687a      	ldr	r2, [r7, #4]
 800c86c:	23a7      	movs	r3, #167	; 0xa7
 800c86e:	009b      	lsls	r3, r3, #2
 800c870:	2102      	movs	r1, #2
 800c872:	54d1      	strb	r1, [r2, r3]
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c874:	e00c      	b.n	800c890 <USBD_SetAddress+0x9c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800c876:	687a      	ldr	r2, [r7, #4]
 800c878:	23a7      	movs	r3, #167	; 0xa7
 800c87a:	009b      	lsls	r3, r3, #2
 800c87c:	2101      	movs	r1, #1
 800c87e:	54d1      	strb	r1, [r2, r3]
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c880:	e006      	b.n	800c890 <USBD_SetAddress+0x9c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800c882:	683a      	ldr	r2, [r7, #0]
 800c884:	687b      	ldr	r3, [r7, #4]
 800c886:	0011      	movs	r1, r2
 800c888:	0018      	movs	r0, r3
 800c88a:	f000 f997 	bl	800cbbc <USBD_CtlError>
  }
}
 800c88e:	46c0      	nop			; (mov r8, r8)
 800c890:	46c0      	nop			; (mov r8, r8)
 800c892:	46bd      	mov	sp, r7
 800c894:	b005      	add	sp, #20
 800c896:	bd90      	pop	{r4, r7, pc}
 800c898:	0000029e 	.word	0x0000029e

0800c89c <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c89c:	b580      	push	{r7, lr}
 800c89e:	b082      	sub	sp, #8
 800c8a0:	af00      	add	r7, sp, #0
 800c8a2:	6078      	str	r0, [r7, #4]
 800c8a4:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800c8a6:	683b      	ldr	r3, [r7, #0]
 800c8a8:	885b      	ldrh	r3, [r3, #2]
 800c8aa:	b2da      	uxtb	r2, r3
 800c8ac:	4b4c      	ldr	r3, [pc, #304]	; (800c9e0 <USBD_SetConfig+0x144>)
 800c8ae:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800c8b0:	4b4b      	ldr	r3, [pc, #300]	; (800c9e0 <USBD_SetConfig+0x144>)
 800c8b2:	781b      	ldrb	r3, [r3, #0]
 800c8b4:	2b01      	cmp	r3, #1
 800c8b6:	d906      	bls.n	800c8c6 <USBD_SetConfig+0x2a>
  {
    USBD_CtlError(pdev, req);
 800c8b8:	683a      	ldr	r2, [r7, #0]
 800c8ba:	687b      	ldr	r3, [r7, #4]
 800c8bc:	0011      	movs	r1, r2
 800c8be:	0018      	movs	r0, r3
 800c8c0:	f000 f97c 	bl	800cbbc <USBD_CtlError>
 800c8c4:	e088      	b.n	800c9d8 <USBD_SetConfig+0x13c>
  }
  else
  {
    switch (pdev->dev_state)
 800c8c6:	687a      	ldr	r2, [r7, #4]
 800c8c8:	23a7      	movs	r3, #167	; 0xa7
 800c8ca:	009b      	lsls	r3, r3, #2
 800c8cc:	5cd3      	ldrb	r3, [r2, r3]
 800c8ce:	2b02      	cmp	r3, #2
 800c8d0:	d002      	beq.n	800c8d8 <USBD_SetConfig+0x3c>
 800c8d2:	2b03      	cmp	r3, #3
 800c8d4:	d029      	beq.n	800c92a <USBD_SetConfig+0x8e>
 800c8d6:	e071      	b.n	800c9bc <USBD_SetConfig+0x120>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 800c8d8:	4b41      	ldr	r3, [pc, #260]	; (800c9e0 <USBD_SetConfig+0x144>)
 800c8da:	781b      	ldrb	r3, [r3, #0]
 800c8dc:	2b00      	cmp	r3, #0
 800c8de:	d01f      	beq.n	800c920 <USBD_SetConfig+0x84>
        {
          pdev->dev_config = cfgidx;
 800c8e0:	4b3f      	ldr	r3, [pc, #252]	; (800c9e0 <USBD_SetConfig+0x144>)
 800c8e2:	781b      	ldrb	r3, [r3, #0]
 800c8e4:	001a      	movs	r2, r3
 800c8e6:	687b      	ldr	r3, [r7, #4]
 800c8e8:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800c8ea:	687a      	ldr	r2, [r7, #4]
 800c8ec:	23a7      	movs	r3, #167	; 0xa7
 800c8ee:	009b      	lsls	r3, r3, #2
 800c8f0:	2103      	movs	r1, #3
 800c8f2:	54d1      	strb	r1, [r2, r3]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800c8f4:	4b3a      	ldr	r3, [pc, #232]	; (800c9e0 <USBD_SetConfig+0x144>)
 800c8f6:	781a      	ldrb	r2, [r3, #0]
 800c8f8:	687b      	ldr	r3, [r7, #4]
 800c8fa:	0011      	movs	r1, r2
 800c8fc:	0018      	movs	r0, r3
 800c8fe:	f7ff f8c6 	bl	800ba8e <USBD_SetClassConfig>
 800c902:	0003      	movs	r3, r0
 800c904:	2b02      	cmp	r3, #2
 800c906:	d106      	bne.n	800c916 <USBD_SetConfig+0x7a>
          {
            USBD_CtlError(pdev, req);
 800c908:	683a      	ldr	r2, [r7, #0]
 800c90a:	687b      	ldr	r3, [r7, #4]
 800c90c:	0011      	movs	r1, r2
 800c90e:	0018      	movs	r0, r3
 800c910:	f000 f954 	bl	800cbbc <USBD_CtlError>
            return;
 800c914:	e060      	b.n	800c9d8 <USBD_SetConfig+0x13c>
          }
          USBD_CtlSendStatus(pdev);
 800c916:	687b      	ldr	r3, [r7, #4]
 800c918:	0018      	movs	r0, r3
 800c91a:	f000 fa37 	bl	800cd8c <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800c91e:	e05b      	b.n	800c9d8 <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 800c920:	687b      	ldr	r3, [r7, #4]
 800c922:	0018      	movs	r0, r3
 800c924:	f000 fa32 	bl	800cd8c <USBD_CtlSendStatus>
        break;
 800c928:	e056      	b.n	800c9d8 <USBD_SetConfig+0x13c>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 800c92a:	4b2d      	ldr	r3, [pc, #180]	; (800c9e0 <USBD_SetConfig+0x144>)
 800c92c:	781b      	ldrb	r3, [r3, #0]
 800c92e:	2b00      	cmp	r3, #0
 800c930:	d115      	bne.n	800c95e <USBD_SetConfig+0xc2>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800c932:	687a      	ldr	r2, [r7, #4]
 800c934:	23a7      	movs	r3, #167	; 0xa7
 800c936:	009b      	lsls	r3, r3, #2
 800c938:	2102      	movs	r1, #2
 800c93a:	54d1      	strb	r1, [r2, r3]
          pdev->dev_config = cfgidx;
 800c93c:	4b28      	ldr	r3, [pc, #160]	; (800c9e0 <USBD_SetConfig+0x144>)
 800c93e:	781b      	ldrb	r3, [r3, #0]
 800c940:	001a      	movs	r2, r3
 800c942:	687b      	ldr	r3, [r7, #4]
 800c944:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 800c946:	4b26      	ldr	r3, [pc, #152]	; (800c9e0 <USBD_SetConfig+0x144>)
 800c948:	781a      	ldrb	r2, [r3, #0]
 800c94a:	687b      	ldr	r3, [r7, #4]
 800c94c:	0011      	movs	r1, r2
 800c94e:	0018      	movs	r0, r3
 800c950:	f7ff f8c4 	bl	800badc <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 800c954:	687b      	ldr	r3, [r7, #4]
 800c956:	0018      	movs	r0, r3
 800c958:	f000 fa18 	bl	800cd8c <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800c95c:	e03c      	b.n	800c9d8 <USBD_SetConfig+0x13c>
        else if (cfgidx != pdev->dev_config)
 800c95e:	4b20      	ldr	r3, [pc, #128]	; (800c9e0 <USBD_SetConfig+0x144>)
 800c960:	781b      	ldrb	r3, [r3, #0]
 800c962:	001a      	movs	r2, r3
 800c964:	687b      	ldr	r3, [r7, #4]
 800c966:	685b      	ldr	r3, [r3, #4]
 800c968:	429a      	cmp	r2, r3
 800c96a:	d022      	beq.n	800c9b2 <USBD_SetConfig+0x116>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800c96c:	687b      	ldr	r3, [r7, #4]
 800c96e:	685b      	ldr	r3, [r3, #4]
 800c970:	b2da      	uxtb	r2, r3
 800c972:	687b      	ldr	r3, [r7, #4]
 800c974:	0011      	movs	r1, r2
 800c976:	0018      	movs	r0, r3
 800c978:	f7ff f8b0 	bl	800badc <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800c97c:	4b18      	ldr	r3, [pc, #96]	; (800c9e0 <USBD_SetConfig+0x144>)
 800c97e:	781b      	ldrb	r3, [r3, #0]
 800c980:	001a      	movs	r2, r3
 800c982:	687b      	ldr	r3, [r7, #4]
 800c984:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800c986:	4b16      	ldr	r3, [pc, #88]	; (800c9e0 <USBD_SetConfig+0x144>)
 800c988:	781a      	ldrb	r2, [r3, #0]
 800c98a:	687b      	ldr	r3, [r7, #4]
 800c98c:	0011      	movs	r1, r2
 800c98e:	0018      	movs	r0, r3
 800c990:	f7ff f87d 	bl	800ba8e <USBD_SetClassConfig>
 800c994:	0003      	movs	r3, r0
 800c996:	2b02      	cmp	r3, #2
 800c998:	d106      	bne.n	800c9a8 <USBD_SetConfig+0x10c>
            USBD_CtlError(pdev, req);
 800c99a:	683a      	ldr	r2, [r7, #0]
 800c99c:	687b      	ldr	r3, [r7, #4]
 800c99e:	0011      	movs	r1, r2
 800c9a0:	0018      	movs	r0, r3
 800c9a2:	f000 f90b 	bl	800cbbc <USBD_CtlError>
            return;
 800c9a6:	e017      	b.n	800c9d8 <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 800c9a8:	687b      	ldr	r3, [r7, #4]
 800c9aa:	0018      	movs	r0, r3
 800c9ac:	f000 f9ee 	bl	800cd8c <USBD_CtlSendStatus>
        break;
 800c9b0:	e012      	b.n	800c9d8 <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 800c9b2:	687b      	ldr	r3, [r7, #4]
 800c9b4:	0018      	movs	r0, r3
 800c9b6:	f000 f9e9 	bl	800cd8c <USBD_CtlSendStatus>
        break;
 800c9ba:	e00d      	b.n	800c9d8 <USBD_SetConfig+0x13c>

      default:
        USBD_CtlError(pdev, req);
 800c9bc:	683a      	ldr	r2, [r7, #0]
 800c9be:	687b      	ldr	r3, [r7, #4]
 800c9c0:	0011      	movs	r1, r2
 800c9c2:	0018      	movs	r0, r3
 800c9c4:	f000 f8fa 	bl	800cbbc <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 800c9c8:	4b05      	ldr	r3, [pc, #20]	; (800c9e0 <USBD_SetConfig+0x144>)
 800c9ca:	781a      	ldrb	r2, [r3, #0]
 800c9cc:	687b      	ldr	r3, [r7, #4]
 800c9ce:	0011      	movs	r1, r2
 800c9d0:	0018      	movs	r0, r3
 800c9d2:	f7ff f883 	bl	800badc <USBD_ClrClassConfig>
        break;
 800c9d6:	46c0      	nop			; (mov r8, r8)
    }
  }
}
 800c9d8:	46bd      	mov	sp, r7
 800c9da:	b002      	add	sp, #8
 800c9dc:	bd80      	pop	{r7, pc}
 800c9de:	46c0      	nop			; (mov r8, r8)
 800c9e0:	20000428 	.word	0x20000428

0800c9e4 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c9e4:	b580      	push	{r7, lr}
 800c9e6:	b082      	sub	sp, #8
 800c9e8:	af00      	add	r7, sp, #0
 800c9ea:	6078      	str	r0, [r7, #4]
 800c9ec:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800c9ee:	683b      	ldr	r3, [r7, #0]
 800c9f0:	88db      	ldrh	r3, [r3, #6]
 800c9f2:	2b01      	cmp	r3, #1
 800c9f4:	d006      	beq.n	800ca04 <USBD_GetConfig+0x20>
  {
    USBD_CtlError(pdev, req);
 800c9f6:	683a      	ldr	r2, [r7, #0]
 800c9f8:	687b      	ldr	r3, [r7, #4]
 800c9fa:	0011      	movs	r1, r2
 800c9fc:	0018      	movs	r0, r3
 800c9fe:	f000 f8dd 	bl	800cbbc <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800ca02:	e026      	b.n	800ca52 <USBD_GetConfig+0x6e>
    switch (pdev->dev_state)
 800ca04:	687a      	ldr	r2, [r7, #4]
 800ca06:	23a7      	movs	r3, #167	; 0xa7
 800ca08:	009b      	lsls	r3, r3, #2
 800ca0a:	5cd3      	ldrb	r3, [r2, r3]
 800ca0c:	2b02      	cmp	r3, #2
 800ca0e:	dc02      	bgt.n	800ca16 <USBD_GetConfig+0x32>
 800ca10:	2b00      	cmp	r3, #0
 800ca12:	dc03      	bgt.n	800ca1c <USBD_GetConfig+0x38>
 800ca14:	e016      	b.n	800ca44 <USBD_GetConfig+0x60>
 800ca16:	2b03      	cmp	r3, #3
 800ca18:	d00c      	beq.n	800ca34 <USBD_GetConfig+0x50>
 800ca1a:	e013      	b.n	800ca44 <USBD_GetConfig+0x60>
        pdev->dev_default_config = 0U;
 800ca1c:	687b      	ldr	r3, [r7, #4]
 800ca1e:	2200      	movs	r2, #0
 800ca20:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800ca22:	687b      	ldr	r3, [r7, #4]
 800ca24:	3308      	adds	r3, #8
 800ca26:	0019      	movs	r1, r3
 800ca28:	687b      	ldr	r3, [r7, #4]
 800ca2a:	2201      	movs	r2, #1
 800ca2c:	0018      	movs	r0, r3
 800ca2e:	f000 f943 	bl	800ccb8 <USBD_CtlSendData>
        break;
 800ca32:	e00e      	b.n	800ca52 <USBD_GetConfig+0x6e>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800ca34:	687b      	ldr	r3, [r7, #4]
 800ca36:	1d19      	adds	r1, r3, #4
 800ca38:	687b      	ldr	r3, [r7, #4]
 800ca3a:	2201      	movs	r2, #1
 800ca3c:	0018      	movs	r0, r3
 800ca3e:	f000 f93b 	bl	800ccb8 <USBD_CtlSendData>
        break;
 800ca42:	e006      	b.n	800ca52 <USBD_GetConfig+0x6e>
        USBD_CtlError(pdev, req);
 800ca44:	683a      	ldr	r2, [r7, #0]
 800ca46:	687b      	ldr	r3, [r7, #4]
 800ca48:	0011      	movs	r1, r2
 800ca4a:	0018      	movs	r0, r3
 800ca4c:	f000 f8b6 	bl	800cbbc <USBD_CtlError>
        break;
 800ca50:	46c0      	nop			; (mov r8, r8)
}
 800ca52:	46c0      	nop			; (mov r8, r8)
 800ca54:	46bd      	mov	sp, r7
 800ca56:	b002      	add	sp, #8
 800ca58:	bd80      	pop	{r7, pc}

0800ca5a <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ca5a:	b580      	push	{r7, lr}
 800ca5c:	b082      	sub	sp, #8
 800ca5e:	af00      	add	r7, sp, #0
 800ca60:	6078      	str	r0, [r7, #4]
 800ca62:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800ca64:	687a      	ldr	r2, [r7, #4]
 800ca66:	23a7      	movs	r3, #167	; 0xa7
 800ca68:	009b      	lsls	r3, r3, #2
 800ca6a:	5cd3      	ldrb	r3, [r2, r3]
 800ca6c:	3b01      	subs	r3, #1
 800ca6e:	2b02      	cmp	r3, #2
 800ca70:	d822      	bhi.n	800cab8 <USBD_GetStatus+0x5e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800ca72:	683b      	ldr	r3, [r7, #0]
 800ca74:	88db      	ldrh	r3, [r3, #6]
 800ca76:	2b02      	cmp	r3, #2
 800ca78:	d006      	beq.n	800ca88 <USBD_GetStatus+0x2e>
      {
        USBD_CtlError(pdev, req);
 800ca7a:	683a      	ldr	r2, [r7, #0]
 800ca7c:	687b      	ldr	r3, [r7, #4]
 800ca7e:	0011      	movs	r1, r2
 800ca80:	0018      	movs	r0, r3
 800ca82:	f000 f89b 	bl	800cbbc <USBD_CtlError>
        break;
 800ca86:	e01e      	b.n	800cac6 <USBD_GetStatus+0x6c>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800ca88:	687b      	ldr	r3, [r7, #4]
 800ca8a:	2201      	movs	r2, #1
 800ca8c:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 800ca8e:	687a      	ldr	r2, [r7, #4]
 800ca90:	23a9      	movs	r3, #169	; 0xa9
 800ca92:	009b      	lsls	r3, r3, #2
 800ca94:	58d3      	ldr	r3, [r2, r3]
 800ca96:	2b00      	cmp	r3, #0
 800ca98:	d005      	beq.n	800caa6 <USBD_GetStatus+0x4c>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800ca9a:	687b      	ldr	r3, [r7, #4]
 800ca9c:	68db      	ldr	r3, [r3, #12]
 800ca9e:	2202      	movs	r2, #2
 800caa0:	431a      	orrs	r2, r3
 800caa2:	687b      	ldr	r3, [r7, #4]
 800caa4:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800caa6:	687b      	ldr	r3, [r7, #4]
 800caa8:	330c      	adds	r3, #12
 800caaa:	0019      	movs	r1, r3
 800caac:	687b      	ldr	r3, [r7, #4]
 800caae:	2202      	movs	r2, #2
 800cab0:	0018      	movs	r0, r3
 800cab2:	f000 f901 	bl	800ccb8 <USBD_CtlSendData>
      break;
 800cab6:	e006      	b.n	800cac6 <USBD_GetStatus+0x6c>

    default:
      USBD_CtlError(pdev, req);
 800cab8:	683a      	ldr	r2, [r7, #0]
 800caba:	687b      	ldr	r3, [r7, #4]
 800cabc:	0011      	movs	r1, r2
 800cabe:	0018      	movs	r0, r3
 800cac0:	f000 f87c 	bl	800cbbc <USBD_CtlError>
      break;
 800cac4:	46c0      	nop			; (mov r8, r8)
  }
}
 800cac6:	46c0      	nop			; (mov r8, r8)
 800cac8:	46bd      	mov	sp, r7
 800caca:	b002      	add	sp, #8
 800cacc:	bd80      	pop	{r7, pc}

0800cace <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800cace:	b580      	push	{r7, lr}
 800cad0:	b082      	sub	sp, #8
 800cad2:	af00      	add	r7, sp, #0
 800cad4:	6078      	str	r0, [r7, #4]
 800cad6:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800cad8:	683b      	ldr	r3, [r7, #0]
 800cada:	885b      	ldrh	r3, [r3, #2]
 800cadc:	2b01      	cmp	r3, #1
 800cade:	d108      	bne.n	800caf2 <USBD_SetFeature+0x24>
  {
    pdev->dev_remote_wakeup = 1U;
 800cae0:	687a      	ldr	r2, [r7, #4]
 800cae2:	23a9      	movs	r3, #169	; 0xa9
 800cae4:	009b      	lsls	r3, r3, #2
 800cae6:	2101      	movs	r1, #1
 800cae8:	50d1      	str	r1, [r2, r3]
    USBD_CtlSendStatus(pdev);
 800caea:	687b      	ldr	r3, [r7, #4]
 800caec:	0018      	movs	r0, r3
 800caee:	f000 f94d 	bl	800cd8c <USBD_CtlSendStatus>
  }
}
 800caf2:	46c0      	nop			; (mov r8, r8)
 800caf4:	46bd      	mov	sp, r7
 800caf6:	b002      	add	sp, #8
 800caf8:	bd80      	pop	{r7, pc}

0800cafa <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800cafa:	b580      	push	{r7, lr}
 800cafc:	b082      	sub	sp, #8
 800cafe:	af00      	add	r7, sp, #0
 800cb00:	6078      	str	r0, [r7, #4]
 800cb02:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800cb04:	687a      	ldr	r2, [r7, #4]
 800cb06:	23a7      	movs	r3, #167	; 0xa7
 800cb08:	009b      	lsls	r3, r3, #2
 800cb0a:	5cd3      	ldrb	r3, [r2, r3]
 800cb0c:	3b01      	subs	r3, #1
 800cb0e:	2b02      	cmp	r3, #2
 800cb10:	d80d      	bhi.n	800cb2e <USBD_ClrFeature+0x34>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800cb12:	683b      	ldr	r3, [r7, #0]
 800cb14:	885b      	ldrh	r3, [r3, #2]
 800cb16:	2b01      	cmp	r3, #1
 800cb18:	d110      	bne.n	800cb3c <USBD_ClrFeature+0x42>
      {
        pdev->dev_remote_wakeup = 0U;
 800cb1a:	687a      	ldr	r2, [r7, #4]
 800cb1c:	23a9      	movs	r3, #169	; 0xa9
 800cb1e:	009b      	lsls	r3, r3, #2
 800cb20:	2100      	movs	r1, #0
 800cb22:	50d1      	str	r1, [r2, r3]
        USBD_CtlSendStatus(pdev);
 800cb24:	687b      	ldr	r3, [r7, #4]
 800cb26:	0018      	movs	r0, r3
 800cb28:	f000 f930 	bl	800cd8c <USBD_CtlSendStatus>
      }
      break;
 800cb2c:	e006      	b.n	800cb3c <USBD_ClrFeature+0x42>

    default:
      USBD_CtlError(pdev, req);
 800cb2e:	683a      	ldr	r2, [r7, #0]
 800cb30:	687b      	ldr	r3, [r7, #4]
 800cb32:	0011      	movs	r1, r2
 800cb34:	0018      	movs	r0, r3
 800cb36:	f000 f841 	bl	800cbbc <USBD_CtlError>
      break;
 800cb3a:	e000      	b.n	800cb3e <USBD_ClrFeature+0x44>
      break;
 800cb3c:	46c0      	nop			; (mov r8, r8)
  }
}
 800cb3e:	46c0      	nop			; (mov r8, r8)
 800cb40:	46bd      	mov	sp, r7
 800cb42:	b002      	add	sp, #8
 800cb44:	bd80      	pop	{r7, pc}

0800cb46 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800cb46:	b580      	push	{r7, lr}
 800cb48:	b082      	sub	sp, #8
 800cb4a:	af00      	add	r7, sp, #0
 800cb4c:	6078      	str	r0, [r7, #4]
 800cb4e:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 800cb50:	683b      	ldr	r3, [r7, #0]
 800cb52:	781a      	ldrb	r2, [r3, #0]
 800cb54:	687b      	ldr	r3, [r7, #4]
 800cb56:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 800cb58:	683b      	ldr	r3, [r7, #0]
 800cb5a:	785a      	ldrb	r2, [r3, #1]
 800cb5c:	687b      	ldr	r3, [r7, #4]
 800cb5e:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 800cb60:	683b      	ldr	r3, [r7, #0]
 800cb62:	3302      	adds	r3, #2
 800cb64:	781b      	ldrb	r3, [r3, #0]
 800cb66:	b29a      	uxth	r2, r3
 800cb68:	683b      	ldr	r3, [r7, #0]
 800cb6a:	3303      	adds	r3, #3
 800cb6c:	781b      	ldrb	r3, [r3, #0]
 800cb6e:	b29b      	uxth	r3, r3
 800cb70:	021b      	lsls	r3, r3, #8
 800cb72:	b29b      	uxth	r3, r3
 800cb74:	18d3      	adds	r3, r2, r3
 800cb76:	b29a      	uxth	r2, r3
 800cb78:	687b      	ldr	r3, [r7, #4]
 800cb7a:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 800cb7c:	683b      	ldr	r3, [r7, #0]
 800cb7e:	3304      	adds	r3, #4
 800cb80:	781b      	ldrb	r3, [r3, #0]
 800cb82:	b29a      	uxth	r2, r3
 800cb84:	683b      	ldr	r3, [r7, #0]
 800cb86:	3305      	adds	r3, #5
 800cb88:	781b      	ldrb	r3, [r3, #0]
 800cb8a:	b29b      	uxth	r3, r3
 800cb8c:	021b      	lsls	r3, r3, #8
 800cb8e:	b29b      	uxth	r3, r3
 800cb90:	18d3      	adds	r3, r2, r3
 800cb92:	b29a      	uxth	r2, r3
 800cb94:	687b      	ldr	r3, [r7, #4]
 800cb96:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 800cb98:	683b      	ldr	r3, [r7, #0]
 800cb9a:	3306      	adds	r3, #6
 800cb9c:	781b      	ldrb	r3, [r3, #0]
 800cb9e:	b29a      	uxth	r2, r3
 800cba0:	683b      	ldr	r3, [r7, #0]
 800cba2:	3307      	adds	r3, #7
 800cba4:	781b      	ldrb	r3, [r3, #0]
 800cba6:	b29b      	uxth	r3, r3
 800cba8:	021b      	lsls	r3, r3, #8
 800cbaa:	b29b      	uxth	r3, r3
 800cbac:	18d3      	adds	r3, r2, r3
 800cbae:	b29a      	uxth	r2, r3
 800cbb0:	687b      	ldr	r3, [r7, #4]
 800cbb2:	80da      	strh	r2, [r3, #6]

}
 800cbb4:	46c0      	nop			; (mov r8, r8)
 800cbb6:	46bd      	mov	sp, r7
 800cbb8:	b002      	add	sp, #8
 800cbba:	bd80      	pop	{r7, pc}

0800cbbc <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 800cbbc:	b580      	push	{r7, lr}
 800cbbe:	b082      	sub	sp, #8
 800cbc0:	af00      	add	r7, sp, #0
 800cbc2:	6078      	str	r0, [r7, #4]
 800cbc4:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 800cbc6:	687b      	ldr	r3, [r7, #4]
 800cbc8:	2180      	movs	r1, #128	; 0x80
 800cbca:	0018      	movs	r0, r3
 800cbcc:	f000 fce3 	bl	800d596 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800cbd0:	687b      	ldr	r3, [r7, #4]
 800cbd2:	2100      	movs	r1, #0
 800cbd4:	0018      	movs	r0, r3
 800cbd6:	f000 fcde 	bl	800d596 <USBD_LL_StallEP>
}
 800cbda:	46c0      	nop			; (mov r8, r8)
 800cbdc:	46bd      	mov	sp, r7
 800cbde:	b002      	add	sp, #8
 800cbe0:	bd80      	pop	{r7, pc}

0800cbe2 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800cbe2:	b590      	push	{r4, r7, lr}
 800cbe4:	b087      	sub	sp, #28
 800cbe6:	af00      	add	r7, sp, #0
 800cbe8:	60f8      	str	r0, [r7, #12]
 800cbea:	60b9      	str	r1, [r7, #8]
 800cbec:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800cbee:	2417      	movs	r4, #23
 800cbf0:	193b      	adds	r3, r7, r4
 800cbf2:	2200      	movs	r2, #0
 800cbf4:	701a      	strb	r2, [r3, #0]

  if (desc != NULL)
 800cbf6:	68fb      	ldr	r3, [r7, #12]
 800cbf8:	2b00      	cmp	r3, #0
 800cbfa:	d03c      	beq.n	800cc76 <USBD_GetString+0x94>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800cbfc:	68fb      	ldr	r3, [r7, #12]
 800cbfe:	0018      	movs	r0, r3
 800cc00:	f000 f83d 	bl	800cc7e <USBD_GetLen>
 800cc04:	0003      	movs	r3, r0
 800cc06:	3301      	adds	r3, #1
 800cc08:	b29b      	uxth	r3, r3
 800cc0a:	18db      	adds	r3, r3, r3
 800cc0c:	b29a      	uxth	r2, r3
 800cc0e:	687b      	ldr	r3, [r7, #4]
 800cc10:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800cc12:	193b      	adds	r3, r7, r4
 800cc14:	781b      	ldrb	r3, [r3, #0]
 800cc16:	193a      	adds	r2, r7, r4
 800cc18:	1c59      	adds	r1, r3, #1
 800cc1a:	7011      	strb	r1, [r2, #0]
 800cc1c:	001a      	movs	r2, r3
 800cc1e:	68bb      	ldr	r3, [r7, #8]
 800cc20:	189b      	adds	r3, r3, r2
 800cc22:	687a      	ldr	r2, [r7, #4]
 800cc24:	7812      	ldrb	r2, [r2, #0]
 800cc26:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800cc28:	193b      	adds	r3, r7, r4
 800cc2a:	781b      	ldrb	r3, [r3, #0]
 800cc2c:	193a      	adds	r2, r7, r4
 800cc2e:	1c59      	adds	r1, r3, #1
 800cc30:	7011      	strb	r1, [r2, #0]
 800cc32:	001a      	movs	r2, r3
 800cc34:	68bb      	ldr	r3, [r7, #8]
 800cc36:	189b      	adds	r3, r3, r2
 800cc38:	2203      	movs	r2, #3
 800cc3a:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800cc3c:	e017      	b.n	800cc6e <USBD_GetString+0x8c>
    {
      unicode[idx++] = *desc++;
 800cc3e:	68fb      	ldr	r3, [r7, #12]
 800cc40:	1c5a      	adds	r2, r3, #1
 800cc42:	60fa      	str	r2, [r7, #12]
 800cc44:	2417      	movs	r4, #23
 800cc46:	193a      	adds	r2, r7, r4
 800cc48:	7812      	ldrb	r2, [r2, #0]
 800cc4a:	1939      	adds	r1, r7, r4
 800cc4c:	1c50      	adds	r0, r2, #1
 800cc4e:	7008      	strb	r0, [r1, #0]
 800cc50:	0011      	movs	r1, r2
 800cc52:	68ba      	ldr	r2, [r7, #8]
 800cc54:	1852      	adds	r2, r2, r1
 800cc56:	781b      	ldrb	r3, [r3, #0]
 800cc58:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800cc5a:	193b      	adds	r3, r7, r4
 800cc5c:	781b      	ldrb	r3, [r3, #0]
 800cc5e:	193a      	adds	r2, r7, r4
 800cc60:	1c59      	adds	r1, r3, #1
 800cc62:	7011      	strb	r1, [r2, #0]
 800cc64:	001a      	movs	r2, r3
 800cc66:	68bb      	ldr	r3, [r7, #8]
 800cc68:	189b      	adds	r3, r3, r2
 800cc6a:	2200      	movs	r2, #0
 800cc6c:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800cc6e:	68fb      	ldr	r3, [r7, #12]
 800cc70:	781b      	ldrb	r3, [r3, #0]
 800cc72:	2b00      	cmp	r3, #0
 800cc74:	d1e3      	bne.n	800cc3e <USBD_GetString+0x5c>
    }
  }
}
 800cc76:	46c0      	nop			; (mov r8, r8)
 800cc78:	46bd      	mov	sp, r7
 800cc7a:	b007      	add	sp, #28
 800cc7c:	bd90      	pop	{r4, r7, pc}

0800cc7e <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800cc7e:	b580      	push	{r7, lr}
 800cc80:	b084      	sub	sp, #16
 800cc82:	af00      	add	r7, sp, #0
 800cc84:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800cc86:	230f      	movs	r3, #15
 800cc88:	18fb      	adds	r3, r7, r3
 800cc8a:	2200      	movs	r2, #0
 800cc8c:	701a      	strb	r2, [r3, #0]

  while (*buf != '\0')
 800cc8e:	e008      	b.n	800cca2 <USBD_GetLen+0x24>
  {
    len++;
 800cc90:	210f      	movs	r1, #15
 800cc92:	187b      	adds	r3, r7, r1
 800cc94:	781a      	ldrb	r2, [r3, #0]
 800cc96:	187b      	adds	r3, r7, r1
 800cc98:	3201      	adds	r2, #1
 800cc9a:	701a      	strb	r2, [r3, #0]
    buf++;
 800cc9c:	687b      	ldr	r3, [r7, #4]
 800cc9e:	3301      	adds	r3, #1
 800cca0:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 800cca2:	687b      	ldr	r3, [r7, #4]
 800cca4:	781b      	ldrb	r3, [r3, #0]
 800cca6:	2b00      	cmp	r3, #0
 800cca8:	d1f2      	bne.n	800cc90 <USBD_GetLen+0x12>
  }

  return len;
 800ccaa:	230f      	movs	r3, #15
 800ccac:	18fb      	adds	r3, r7, r3
 800ccae:	781b      	ldrb	r3, [r3, #0]
}
 800ccb0:	0018      	movs	r0, r3
 800ccb2:	46bd      	mov	sp, r7
 800ccb4:	b004      	add	sp, #16
 800ccb6:	bd80      	pop	{r7, pc}

0800ccb8 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 800ccb8:	b580      	push	{r7, lr}
 800ccba:	b084      	sub	sp, #16
 800ccbc:	af00      	add	r7, sp, #0
 800ccbe:	60f8      	str	r0, [r7, #12]
 800ccc0:	60b9      	str	r1, [r7, #8]
 800ccc2:	1dbb      	adds	r3, r7, #6
 800ccc4:	801a      	strh	r2, [r3, #0]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800ccc6:	68fa      	ldr	r2, [r7, #12]
 800ccc8:	23a5      	movs	r3, #165	; 0xa5
 800ccca:	009b      	lsls	r3, r3, #2
 800cccc:	2102      	movs	r1, #2
 800ccce:	50d1      	str	r1, [r2, r3]
  pdev->ep_in[0].total_length = len;
 800ccd0:	1dbb      	adds	r3, r7, #6
 800ccd2:	881a      	ldrh	r2, [r3, #0]
 800ccd4:	68fb      	ldr	r3, [r7, #12]
 800ccd6:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800ccd8:	1dbb      	adds	r3, r7, #6
 800ccda:	881a      	ldrh	r2, [r3, #0]
 800ccdc:	68fb      	ldr	r3, [r7, #12]
 800ccde:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800cce0:	1dbb      	adds	r3, r7, #6
 800cce2:	881b      	ldrh	r3, [r3, #0]
 800cce4:	68ba      	ldr	r2, [r7, #8]
 800cce6:	68f8      	ldr	r0, [r7, #12]
 800cce8:	2100      	movs	r1, #0
 800ccea:	f000 fd06 	bl	800d6fa <USBD_LL_Transmit>

  return USBD_OK;
 800ccee:	2300      	movs	r3, #0
}
 800ccf0:	0018      	movs	r0, r3
 800ccf2:	46bd      	mov	sp, r7
 800ccf4:	b004      	add	sp, #16
 800ccf6:	bd80      	pop	{r7, pc}

0800ccf8 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 800ccf8:	b580      	push	{r7, lr}
 800ccfa:	b084      	sub	sp, #16
 800ccfc:	af00      	add	r7, sp, #0
 800ccfe:	60f8      	str	r0, [r7, #12]
 800cd00:	60b9      	str	r1, [r7, #8]
 800cd02:	1dbb      	adds	r3, r7, #6
 800cd04:	801a      	strh	r2, [r3, #0]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800cd06:	1dbb      	adds	r3, r7, #6
 800cd08:	881b      	ldrh	r3, [r3, #0]
 800cd0a:	68ba      	ldr	r2, [r7, #8]
 800cd0c:	68f8      	ldr	r0, [r7, #12]
 800cd0e:	2100      	movs	r1, #0
 800cd10:	f000 fcf3 	bl	800d6fa <USBD_LL_Transmit>

  return USBD_OK;
 800cd14:	2300      	movs	r3, #0
}
 800cd16:	0018      	movs	r0, r3
 800cd18:	46bd      	mov	sp, r7
 800cd1a:	b004      	add	sp, #16
 800cd1c:	bd80      	pop	{r7, pc}

0800cd1e <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 800cd1e:	b580      	push	{r7, lr}
 800cd20:	b084      	sub	sp, #16
 800cd22:	af00      	add	r7, sp, #0
 800cd24:	60f8      	str	r0, [r7, #12]
 800cd26:	60b9      	str	r1, [r7, #8]
 800cd28:	1dbb      	adds	r3, r7, #6
 800cd2a:	801a      	strh	r2, [r3, #0]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800cd2c:	68fa      	ldr	r2, [r7, #12]
 800cd2e:	23a5      	movs	r3, #165	; 0xa5
 800cd30:	009b      	lsls	r3, r3, #2
 800cd32:	2103      	movs	r1, #3
 800cd34:	50d1      	str	r1, [r2, r3]
  pdev->ep_out[0].total_length = len;
 800cd36:	1dbb      	adds	r3, r7, #6
 800cd38:	8819      	ldrh	r1, [r3, #0]
 800cd3a:	68fa      	ldr	r2, [r7, #12]
 800cd3c:	23ae      	movs	r3, #174	; 0xae
 800cd3e:	005b      	lsls	r3, r3, #1
 800cd40:	50d1      	str	r1, [r2, r3]
  pdev->ep_out[0].rem_length   = len;
 800cd42:	1dbb      	adds	r3, r7, #6
 800cd44:	8819      	ldrh	r1, [r3, #0]
 800cd46:	68fa      	ldr	r2, [r7, #12]
 800cd48:	23b0      	movs	r3, #176	; 0xb0
 800cd4a:	005b      	lsls	r3, r3, #1
 800cd4c:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800cd4e:	1dbb      	adds	r3, r7, #6
 800cd50:	881b      	ldrh	r3, [r3, #0]
 800cd52:	68ba      	ldr	r2, [r7, #8]
 800cd54:	68f8      	ldr	r0, [r7, #12]
 800cd56:	2100      	movs	r1, #0
 800cd58:	f000 fd06 	bl	800d768 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800cd5c:	2300      	movs	r3, #0
}
 800cd5e:	0018      	movs	r0, r3
 800cd60:	46bd      	mov	sp, r7
 800cd62:	b004      	add	sp, #16
 800cd64:	bd80      	pop	{r7, pc}

0800cd66 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 800cd66:	b580      	push	{r7, lr}
 800cd68:	b084      	sub	sp, #16
 800cd6a:	af00      	add	r7, sp, #0
 800cd6c:	60f8      	str	r0, [r7, #12]
 800cd6e:	60b9      	str	r1, [r7, #8]
 800cd70:	1dbb      	adds	r3, r7, #6
 800cd72:	801a      	strh	r2, [r3, #0]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800cd74:	1dbb      	adds	r3, r7, #6
 800cd76:	881b      	ldrh	r3, [r3, #0]
 800cd78:	68ba      	ldr	r2, [r7, #8]
 800cd7a:	68f8      	ldr	r0, [r7, #12]
 800cd7c:	2100      	movs	r1, #0
 800cd7e:	f000 fcf3 	bl	800d768 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800cd82:	2300      	movs	r3, #0
}
 800cd84:	0018      	movs	r0, r3
 800cd86:	46bd      	mov	sp, r7
 800cd88:	b004      	add	sp, #16
 800cd8a:	bd80      	pop	{r7, pc}

0800cd8c <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800cd8c:	b580      	push	{r7, lr}
 800cd8e:	b082      	sub	sp, #8
 800cd90:	af00      	add	r7, sp, #0
 800cd92:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800cd94:	687a      	ldr	r2, [r7, #4]
 800cd96:	23a5      	movs	r3, #165	; 0xa5
 800cd98:	009b      	lsls	r3, r3, #2
 800cd9a:	2104      	movs	r1, #4
 800cd9c:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800cd9e:	6878      	ldr	r0, [r7, #4]
 800cda0:	2300      	movs	r3, #0
 800cda2:	2200      	movs	r2, #0
 800cda4:	2100      	movs	r1, #0
 800cda6:	f000 fca8 	bl	800d6fa <USBD_LL_Transmit>

  return USBD_OK;
 800cdaa:	2300      	movs	r3, #0
}
 800cdac:	0018      	movs	r0, r3
 800cdae:	46bd      	mov	sp, r7
 800cdb0:	b002      	add	sp, #8
 800cdb2:	bd80      	pop	{r7, pc}

0800cdb4 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800cdb4:	b580      	push	{r7, lr}
 800cdb6:	b082      	sub	sp, #8
 800cdb8:	af00      	add	r7, sp, #0
 800cdba:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800cdbc:	687a      	ldr	r2, [r7, #4]
 800cdbe:	23a5      	movs	r3, #165	; 0xa5
 800cdc0:	009b      	lsls	r3, r3, #2
 800cdc2:	2105      	movs	r1, #5
 800cdc4:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800cdc6:	6878      	ldr	r0, [r7, #4]
 800cdc8:	2300      	movs	r3, #0
 800cdca:	2200      	movs	r2, #0
 800cdcc:	2100      	movs	r1, #0
 800cdce:	f000 fccb 	bl	800d768 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800cdd2:	2300      	movs	r3, #0
}
 800cdd4:	0018      	movs	r0, r3
 800cdd6:	46bd      	mov	sp, r7
 800cdd8:	b002      	add	sp, #8
 800cdda:	bd80      	pop	{r7, pc}

0800cddc <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800cddc:	b580      	push	{r7, lr}
 800cdde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800cde0:	4914      	ldr	r1, [pc, #80]	; (800ce34 <MX_USB_DEVICE_Init+0x58>)
 800cde2:	4b15      	ldr	r3, [pc, #84]	; (800ce38 <MX_USB_DEVICE_Init+0x5c>)
 800cde4:	2200      	movs	r2, #0
 800cde6:	0018      	movs	r0, r3
 800cde8:	f7fe fdea 	bl	800b9c0 <USBD_Init>
 800cdec:	1e03      	subs	r3, r0, #0
 800cdee:	d001      	beq.n	800cdf4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800cdf0:	f7f5 fba5 	bl	800253e <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800cdf4:	4a11      	ldr	r2, [pc, #68]	; (800ce3c <MX_USB_DEVICE_Init+0x60>)
 800cdf6:	4b10      	ldr	r3, [pc, #64]	; (800ce38 <MX_USB_DEVICE_Init+0x5c>)
 800cdf8:	0011      	movs	r1, r2
 800cdfa:	0018      	movs	r0, r3
 800cdfc:	f7fe fe11 	bl	800ba22 <USBD_RegisterClass>
 800ce00:	1e03      	subs	r3, r0, #0
 800ce02:	d001      	beq.n	800ce08 <MX_USB_DEVICE_Init+0x2c>
  {
    Error_Handler();
 800ce04:	f7f5 fb9b 	bl	800253e <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800ce08:	4a0d      	ldr	r2, [pc, #52]	; (800ce40 <MX_USB_DEVICE_Init+0x64>)
 800ce0a:	4b0b      	ldr	r3, [pc, #44]	; (800ce38 <MX_USB_DEVICE_Init+0x5c>)
 800ce0c:	0011      	movs	r1, r2
 800ce0e:	0018      	movs	r0, r3
 800ce10:	f7fe fd26 	bl	800b860 <USBD_CDC_RegisterInterface>
 800ce14:	1e03      	subs	r3, r0, #0
 800ce16:	d001      	beq.n	800ce1c <MX_USB_DEVICE_Init+0x40>
  {
    Error_Handler();
 800ce18:	f7f5 fb91 	bl	800253e <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800ce1c:	4b06      	ldr	r3, [pc, #24]	; (800ce38 <MX_USB_DEVICE_Init+0x5c>)
 800ce1e:	0018      	movs	r0, r3
 800ce20:	f7fe fe1f 	bl	800ba62 <USBD_Start>
 800ce24:	1e03      	subs	r3, r0, #0
 800ce26:	d001      	beq.n	800ce2c <MX_USB_DEVICE_Init+0x50>
  {
    Error_Handler();
 800ce28:	f7f5 fb89 	bl	800253e <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800ce2c:	46c0      	nop			; (mov r8, r8)
 800ce2e:	46bd      	mov	sp, r7
 800ce30:	bd80      	pop	{r7, pc}
 800ce32:	46c0      	nop			; (mov r8, r8)
 800ce34:	2000012c 	.word	0x2000012c
 800ce38:	2000042c 	.word	0x2000042c
 800ce3c:	20000018 	.word	0x20000018
 800ce40:	2000011c 	.word	0x2000011c

0800ce44 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800ce44:	b580      	push	{r7, lr}
 800ce46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800ce48:	4907      	ldr	r1, [pc, #28]	; (800ce68 <CDC_Init_FS+0x24>)
 800ce4a:	4b08      	ldr	r3, [pc, #32]	; (800ce6c <CDC_Init_FS+0x28>)
 800ce4c:	2200      	movs	r2, #0
 800ce4e:	0018      	movs	r0, r3
 800ce50:	f7fe fd21 	bl	800b896 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800ce54:	4a06      	ldr	r2, [pc, #24]	; (800ce70 <CDC_Init_FS+0x2c>)
 800ce56:	4b05      	ldr	r3, [pc, #20]	; (800ce6c <CDC_Init_FS+0x28>)
 800ce58:	0011      	movs	r1, r2
 800ce5a:	0018      	movs	r0, r3
 800ce5c:	f7fe fd37 	bl	800b8ce <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800ce60:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800ce62:	0018      	movs	r0, r3
 800ce64:	46bd      	mov	sp, r7
 800ce66:	bd80      	pop	{r7, pc}
 800ce68:	20000ad8 	.word	0x20000ad8
 800ce6c:	2000042c 	.word	0x2000042c
 800ce70:	200006f0 	.word	0x200006f0

0800ce74 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800ce74:	b580      	push	{r7, lr}
 800ce76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800ce78:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800ce7a:	0018      	movs	r0, r3
 800ce7c:	46bd      	mov	sp, r7
 800ce7e:	bd80      	pop	{r7, pc}

0800ce80 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800ce80:	b580      	push	{r7, lr}
 800ce82:	b082      	sub	sp, #8
 800ce84:	af00      	add	r7, sp, #0
 800ce86:	6039      	str	r1, [r7, #0]
 800ce88:	0011      	movs	r1, r2
 800ce8a:	1dfb      	adds	r3, r7, #7
 800ce8c:	1c02      	adds	r2, r0, #0
 800ce8e:	701a      	strb	r2, [r3, #0]
 800ce90:	1d3b      	adds	r3, r7, #4
 800ce92:	1c0a      	adds	r2, r1, #0
 800ce94:	801a      	strh	r2, [r3, #0]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800ce96:	1dfb      	adds	r3, r7, #7
 800ce98:	781b      	ldrb	r3, [r3, #0]
 800ce9a:	2b23      	cmp	r3, #35	; 0x23
 800ce9c:	d804      	bhi.n	800cea8 <CDC_Control_FS+0x28>
 800ce9e:	009a      	lsls	r2, r3, #2
 800cea0:	4b04      	ldr	r3, [pc, #16]	; (800ceb4 <CDC_Control_FS+0x34>)
 800cea2:	18d3      	adds	r3, r2, r3
 800cea4:	681b      	ldr	r3, [r3, #0]
 800cea6:	469f      	mov	pc, r3
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800cea8:	46c0      	nop			; (mov r8, r8)
  }

  return (USBD_OK);
 800ceaa:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800ceac:	0018      	movs	r0, r3
 800ceae:	46bd      	mov	sp, r7
 800ceb0:	b002      	add	sp, #8
 800ceb2:	bd80      	pop	{r7, pc}
 800ceb4:	0800e4d4 	.word	0x0800e4d4

0800ceb8 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800ceb8:	b590      	push	{r4, r7, lr}
 800ceba:	b085      	sub	sp, #20
 800cebc:	af00      	add	r7, sp, #0
 800cebe:	6078      	str	r0, [r7, #4]
 800cec0:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */

  flags.data_received = 1;
 800cec2:	4b18      	ldr	r3, [pc, #96]	; (800cf24 <CDC_Receive_FS+0x6c>)
 800cec4:	7a1a      	ldrb	r2, [r3, #8]
 800cec6:	2101      	movs	r1, #1
 800cec8:	430a      	orrs	r2, r1
 800ceca:	721a      	strb	r2, [r3, #8]

  for(uint8_t i = 0; i < *Len; i++)
 800cecc:	230f      	movs	r3, #15
 800cece:	18fb      	adds	r3, r7, r3
 800ced0:	2200      	movs	r2, #0
 800ced2:	701a      	strb	r2, [r3, #0]
 800ced4:	e00f      	b.n	800cef6 <CDC_Receive_FS+0x3e>
  {
	  push(USB_Rx_Buffer, Buf[i]);
 800ced6:	4b14      	ldr	r3, [pc, #80]	; (800cf28 <CDC_Receive_FS+0x70>)
 800ced8:	6818      	ldr	r0, [r3, #0]
 800ceda:	240f      	movs	r4, #15
 800cedc:	193b      	adds	r3, r7, r4
 800cede:	781b      	ldrb	r3, [r3, #0]
 800cee0:	687a      	ldr	r2, [r7, #4]
 800cee2:	18d3      	adds	r3, r2, r3
 800cee4:	781b      	ldrb	r3, [r3, #0]
 800cee6:	0019      	movs	r1, r3
 800cee8:	f7f5 fb79 	bl	80025de <push>
  for(uint8_t i = 0; i < *Len; i++)
 800ceec:	193b      	adds	r3, r7, r4
 800ceee:	781a      	ldrb	r2, [r3, #0]
 800cef0:	193b      	adds	r3, r7, r4
 800cef2:	3201      	adds	r2, #1
 800cef4:	701a      	strb	r2, [r3, #0]
 800cef6:	230f      	movs	r3, #15
 800cef8:	18fb      	adds	r3, r7, r3
 800cefa:	781a      	ldrb	r2, [r3, #0]
 800cefc:	683b      	ldr	r3, [r7, #0]
 800cefe:	681b      	ldr	r3, [r3, #0]
 800cf00:	429a      	cmp	r2, r3
 800cf02:	d3e8      	bcc.n	800ced6 <CDC_Receive_FS+0x1e>
  }

  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800cf04:	687a      	ldr	r2, [r7, #4]
 800cf06:	4b09      	ldr	r3, [pc, #36]	; (800cf2c <CDC_Receive_FS+0x74>)
 800cf08:	0011      	movs	r1, r2
 800cf0a:	0018      	movs	r0, r3
 800cf0c:	f7fe fcdf 	bl	800b8ce <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800cf10:	4b06      	ldr	r3, [pc, #24]	; (800cf2c <CDC_Receive_FS+0x74>)
 800cf12:	0018      	movs	r0, r3
 800cf14:	f7fe fd26 	bl	800b964 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800cf18:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800cf1a:	0018      	movs	r0, r3
 800cf1c:	46bd      	mov	sp, r7
 800cf1e:	b005      	add	sp, #20
 800cf20:	bd90      	pop	{r4, r7, pc}
 800cf22:	46c0      	nop			; (mov r8, r8)
 800cf24:	200003d8 	.word	0x200003d8
 800cf28:	20000ec0 	.word	0x20000ec0
 800cf2c:	2000042c 	.word	0x2000042c

0800cf30 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800cf30:	b5b0      	push	{r4, r5, r7, lr}
 800cf32:	b084      	sub	sp, #16
 800cf34:	af00      	add	r7, sp, #0
 800cf36:	6078      	str	r0, [r7, #4]
 800cf38:	000a      	movs	r2, r1
 800cf3a:	1cbb      	adds	r3, r7, #2
 800cf3c:	801a      	strh	r2, [r3, #0]
  uint8_t result = USBD_OK;
 800cf3e:	230f      	movs	r3, #15
 800cf40:	18fb      	adds	r3, r7, r3
 800cf42:	2200      	movs	r2, #0
 800cf44:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800cf46:	4a11      	ldr	r2, [pc, #68]	; (800cf8c <CDC_Transmit_FS+0x5c>)
 800cf48:	23ae      	movs	r3, #174	; 0xae
 800cf4a:	009b      	lsls	r3, r3, #2
 800cf4c:	58d3      	ldr	r3, [r2, r3]
 800cf4e:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800cf50:	68ba      	ldr	r2, [r7, #8]
 800cf52:	2385      	movs	r3, #133	; 0x85
 800cf54:	009b      	lsls	r3, r3, #2
 800cf56:	58d3      	ldr	r3, [r2, r3]
 800cf58:	2b00      	cmp	r3, #0
 800cf5a:	d001      	beq.n	800cf60 <CDC_Transmit_FS+0x30>
    return USBD_BUSY;
 800cf5c:	2301      	movs	r3, #1
 800cf5e:	e010      	b.n	800cf82 <CDC_Transmit_FS+0x52>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800cf60:	1cbb      	adds	r3, r7, #2
 800cf62:	881a      	ldrh	r2, [r3, #0]
 800cf64:	6879      	ldr	r1, [r7, #4]
 800cf66:	4b09      	ldr	r3, [pc, #36]	; (800cf8c <CDC_Transmit_FS+0x5c>)
 800cf68:	0018      	movs	r0, r3
 800cf6a:	f7fe fc94 	bl	800b896 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800cf6e:	250f      	movs	r5, #15
 800cf70:	197c      	adds	r4, r7, r5
 800cf72:	4b06      	ldr	r3, [pc, #24]	; (800cf8c <CDC_Transmit_FS+0x5c>)
 800cf74:	0018      	movs	r0, r3
 800cf76:	f7fe fcbe 	bl	800b8f6 <USBD_CDC_TransmitPacket>
 800cf7a:	0003      	movs	r3, r0
 800cf7c:	7023      	strb	r3, [r4, #0]
  /* USER CODE END 7 */
  return result;
 800cf7e:	197b      	adds	r3, r7, r5
 800cf80:	781b      	ldrb	r3, [r3, #0]
}
 800cf82:	0018      	movs	r0, r3
 800cf84:	46bd      	mov	sp, r7
 800cf86:	b004      	add	sp, #16
 800cf88:	bdb0      	pop	{r4, r5, r7, pc}
 800cf8a:	46c0      	nop			; (mov r8, r8)
 800cf8c:	2000042c 	.word	0x2000042c

0800cf90 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cf90:	b580      	push	{r7, lr}
 800cf92:	b082      	sub	sp, #8
 800cf94:	af00      	add	r7, sp, #0
 800cf96:	0002      	movs	r2, r0
 800cf98:	6039      	str	r1, [r7, #0]
 800cf9a:	1dfb      	adds	r3, r7, #7
 800cf9c:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800cf9e:	683b      	ldr	r3, [r7, #0]
 800cfa0:	2212      	movs	r2, #18
 800cfa2:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800cfa4:	4b02      	ldr	r3, [pc, #8]	; (800cfb0 <USBD_FS_DeviceDescriptor+0x20>)
}
 800cfa6:	0018      	movs	r0, r3
 800cfa8:	46bd      	mov	sp, r7
 800cfaa:	b002      	add	sp, #8
 800cfac:	bd80      	pop	{r7, pc}
 800cfae:	46c0      	nop			; (mov r8, r8)
 800cfb0:	20000148 	.word	0x20000148

0800cfb4 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cfb4:	b580      	push	{r7, lr}
 800cfb6:	b082      	sub	sp, #8
 800cfb8:	af00      	add	r7, sp, #0
 800cfba:	0002      	movs	r2, r0
 800cfbc:	6039      	str	r1, [r7, #0]
 800cfbe:	1dfb      	adds	r3, r7, #7
 800cfc0:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800cfc2:	683b      	ldr	r3, [r7, #0]
 800cfc4:	2204      	movs	r2, #4
 800cfc6:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800cfc8:	4b02      	ldr	r3, [pc, #8]	; (800cfd4 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800cfca:	0018      	movs	r0, r3
 800cfcc:	46bd      	mov	sp, r7
 800cfce:	b002      	add	sp, #8
 800cfd0:	bd80      	pop	{r7, pc}
 800cfd2:	46c0      	nop			; (mov r8, r8)
 800cfd4:	2000015c 	.word	0x2000015c

0800cfd8 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cfd8:	b580      	push	{r7, lr}
 800cfda:	b082      	sub	sp, #8
 800cfdc:	af00      	add	r7, sp, #0
 800cfde:	0002      	movs	r2, r0
 800cfe0:	6039      	str	r1, [r7, #0]
 800cfe2:	1dfb      	adds	r3, r7, #7
 800cfe4:	701a      	strb	r2, [r3, #0]
  if(speed == 0)
 800cfe6:	1dfb      	adds	r3, r7, #7
 800cfe8:	781b      	ldrb	r3, [r3, #0]
 800cfea:	2b00      	cmp	r3, #0
 800cfec:	d106      	bne.n	800cffc <USBD_FS_ProductStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800cfee:	683a      	ldr	r2, [r7, #0]
 800cff0:	4908      	ldr	r1, [pc, #32]	; (800d014 <USBD_FS_ProductStrDescriptor+0x3c>)
 800cff2:	4b09      	ldr	r3, [pc, #36]	; (800d018 <USBD_FS_ProductStrDescriptor+0x40>)
 800cff4:	0018      	movs	r0, r3
 800cff6:	f7ff fdf4 	bl	800cbe2 <USBD_GetString>
 800cffa:	e005      	b.n	800d008 <USBD_FS_ProductStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800cffc:	683a      	ldr	r2, [r7, #0]
 800cffe:	4905      	ldr	r1, [pc, #20]	; (800d014 <USBD_FS_ProductStrDescriptor+0x3c>)
 800d000:	4b05      	ldr	r3, [pc, #20]	; (800d018 <USBD_FS_ProductStrDescriptor+0x40>)
 800d002:	0018      	movs	r0, r3
 800d004:	f7ff fded 	bl	800cbe2 <USBD_GetString>
  }
  return USBD_StrDesc;
 800d008:	4b02      	ldr	r3, [pc, #8]	; (800d014 <USBD_FS_ProductStrDescriptor+0x3c>)
}
 800d00a:	0018      	movs	r0, r3
 800d00c:	46bd      	mov	sp, r7
 800d00e:	b002      	add	sp, #8
 800d010:	bd80      	pop	{r7, pc}
 800d012:	46c0      	nop			; (mov r8, r8)
 800d014:	20000ec4 	.word	0x20000ec4
 800d018:	0800e300 	.word	0x0800e300

0800d01c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d01c:	b580      	push	{r7, lr}
 800d01e:	b082      	sub	sp, #8
 800d020:	af00      	add	r7, sp, #0
 800d022:	0002      	movs	r2, r0
 800d024:	6039      	str	r1, [r7, #0]
 800d026:	1dfb      	adds	r3, r7, #7
 800d028:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800d02a:	683a      	ldr	r2, [r7, #0]
 800d02c:	4904      	ldr	r1, [pc, #16]	; (800d040 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800d02e:	4b05      	ldr	r3, [pc, #20]	; (800d044 <USBD_FS_ManufacturerStrDescriptor+0x28>)
 800d030:	0018      	movs	r0, r3
 800d032:	f7ff fdd6 	bl	800cbe2 <USBD_GetString>
  return USBD_StrDesc;
 800d036:	4b02      	ldr	r3, [pc, #8]	; (800d040 <USBD_FS_ManufacturerStrDescriptor+0x24>)
}
 800d038:	0018      	movs	r0, r3
 800d03a:	46bd      	mov	sp, r7
 800d03c:	b002      	add	sp, #8
 800d03e:	bd80      	pop	{r7, pc}
 800d040:	20000ec4 	.word	0x20000ec4
 800d044:	0800e318 	.word	0x0800e318

0800d048 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d048:	b580      	push	{r7, lr}
 800d04a:	b082      	sub	sp, #8
 800d04c:	af00      	add	r7, sp, #0
 800d04e:	0002      	movs	r2, r0
 800d050:	6039      	str	r1, [r7, #0]
 800d052:	1dfb      	adds	r3, r7, #7
 800d054:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800d056:	683b      	ldr	r3, [r7, #0]
 800d058:	221a      	movs	r2, #26
 800d05a:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800d05c:	f000 f84c 	bl	800d0f8 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800d060:	4b02      	ldr	r3, [pc, #8]	; (800d06c <USBD_FS_SerialStrDescriptor+0x24>)
}
 800d062:	0018      	movs	r0, r3
 800d064:	46bd      	mov	sp, r7
 800d066:	b002      	add	sp, #8
 800d068:	bd80      	pop	{r7, pc}
 800d06a:	46c0      	nop			; (mov r8, r8)
 800d06c:	20000160 	.word	0x20000160

0800d070 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d070:	b580      	push	{r7, lr}
 800d072:	b082      	sub	sp, #8
 800d074:	af00      	add	r7, sp, #0
 800d076:	0002      	movs	r2, r0
 800d078:	6039      	str	r1, [r7, #0]
 800d07a:	1dfb      	adds	r3, r7, #7
 800d07c:	701a      	strb	r2, [r3, #0]
  if(speed == USBD_SPEED_HIGH)
 800d07e:	1dfb      	adds	r3, r7, #7
 800d080:	781b      	ldrb	r3, [r3, #0]
 800d082:	2b00      	cmp	r3, #0
 800d084:	d106      	bne.n	800d094 <USBD_FS_ConfigStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800d086:	683a      	ldr	r2, [r7, #0]
 800d088:	4908      	ldr	r1, [pc, #32]	; (800d0ac <USBD_FS_ConfigStrDescriptor+0x3c>)
 800d08a:	4b09      	ldr	r3, [pc, #36]	; (800d0b0 <USBD_FS_ConfigStrDescriptor+0x40>)
 800d08c:	0018      	movs	r0, r3
 800d08e:	f7ff fda8 	bl	800cbe2 <USBD_GetString>
 800d092:	e005      	b.n	800d0a0 <USBD_FS_ConfigStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800d094:	683a      	ldr	r2, [r7, #0]
 800d096:	4905      	ldr	r1, [pc, #20]	; (800d0ac <USBD_FS_ConfigStrDescriptor+0x3c>)
 800d098:	4b05      	ldr	r3, [pc, #20]	; (800d0b0 <USBD_FS_ConfigStrDescriptor+0x40>)
 800d09a:	0018      	movs	r0, r3
 800d09c:	f7ff fda1 	bl	800cbe2 <USBD_GetString>
  }
  return USBD_StrDesc;
 800d0a0:	4b02      	ldr	r3, [pc, #8]	; (800d0ac <USBD_FS_ConfigStrDescriptor+0x3c>)
}
 800d0a2:	0018      	movs	r0, r3
 800d0a4:	46bd      	mov	sp, r7
 800d0a6:	b002      	add	sp, #8
 800d0a8:	bd80      	pop	{r7, pc}
 800d0aa:	46c0      	nop			; (mov r8, r8)
 800d0ac:	20000ec4 	.word	0x20000ec4
 800d0b0:	0800e32c 	.word	0x0800e32c

0800d0b4 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d0b4:	b580      	push	{r7, lr}
 800d0b6:	b082      	sub	sp, #8
 800d0b8:	af00      	add	r7, sp, #0
 800d0ba:	0002      	movs	r2, r0
 800d0bc:	6039      	str	r1, [r7, #0]
 800d0be:	1dfb      	adds	r3, r7, #7
 800d0c0:	701a      	strb	r2, [r3, #0]
  if(speed == 0)
 800d0c2:	1dfb      	adds	r3, r7, #7
 800d0c4:	781b      	ldrb	r3, [r3, #0]
 800d0c6:	2b00      	cmp	r3, #0
 800d0c8:	d106      	bne.n	800d0d8 <USBD_FS_InterfaceStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800d0ca:	683a      	ldr	r2, [r7, #0]
 800d0cc:	4908      	ldr	r1, [pc, #32]	; (800d0f0 <USBD_FS_InterfaceStrDescriptor+0x3c>)
 800d0ce:	4b09      	ldr	r3, [pc, #36]	; (800d0f4 <USBD_FS_InterfaceStrDescriptor+0x40>)
 800d0d0:	0018      	movs	r0, r3
 800d0d2:	f7ff fd86 	bl	800cbe2 <USBD_GetString>
 800d0d6:	e005      	b.n	800d0e4 <USBD_FS_InterfaceStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800d0d8:	683a      	ldr	r2, [r7, #0]
 800d0da:	4905      	ldr	r1, [pc, #20]	; (800d0f0 <USBD_FS_InterfaceStrDescriptor+0x3c>)
 800d0dc:	4b05      	ldr	r3, [pc, #20]	; (800d0f4 <USBD_FS_InterfaceStrDescriptor+0x40>)
 800d0de:	0018      	movs	r0, r3
 800d0e0:	f7ff fd7f 	bl	800cbe2 <USBD_GetString>
  }
  return USBD_StrDesc;
 800d0e4:	4b02      	ldr	r3, [pc, #8]	; (800d0f0 <USBD_FS_InterfaceStrDescriptor+0x3c>)
}
 800d0e6:	0018      	movs	r0, r3
 800d0e8:	46bd      	mov	sp, r7
 800d0ea:	b002      	add	sp, #8
 800d0ec:	bd80      	pop	{r7, pc}
 800d0ee:	46c0      	nop			; (mov r8, r8)
 800d0f0:	20000ec4 	.word	0x20000ec4
 800d0f4:	0800e338 	.word	0x0800e338

0800d0f8 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800d0f8:	b580      	push	{r7, lr}
 800d0fa:	b084      	sub	sp, #16
 800d0fc:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800d0fe:	4b10      	ldr	r3, [pc, #64]	; (800d140 <Get_SerialNum+0x48>)
 800d100:	681b      	ldr	r3, [r3, #0]
 800d102:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800d104:	4b0f      	ldr	r3, [pc, #60]	; (800d144 <Get_SerialNum+0x4c>)
 800d106:	681b      	ldr	r3, [r3, #0]
 800d108:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800d10a:	4b0f      	ldr	r3, [pc, #60]	; (800d148 <Get_SerialNum+0x50>)
 800d10c:	681b      	ldr	r3, [r3, #0]
 800d10e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800d110:	68fa      	ldr	r2, [r7, #12]
 800d112:	687b      	ldr	r3, [r7, #4]
 800d114:	18d3      	adds	r3, r2, r3
 800d116:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800d118:	68fb      	ldr	r3, [r7, #12]
 800d11a:	2b00      	cmp	r3, #0
 800d11c:	d00b      	beq.n	800d136 <Get_SerialNum+0x3e>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800d11e:	490b      	ldr	r1, [pc, #44]	; (800d14c <Get_SerialNum+0x54>)
 800d120:	68fb      	ldr	r3, [r7, #12]
 800d122:	2208      	movs	r2, #8
 800d124:	0018      	movs	r0, r3
 800d126:	f000 f815 	bl	800d154 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800d12a:	4909      	ldr	r1, [pc, #36]	; (800d150 <Get_SerialNum+0x58>)
 800d12c:	68bb      	ldr	r3, [r7, #8]
 800d12e:	2204      	movs	r2, #4
 800d130:	0018      	movs	r0, r3
 800d132:	f000 f80f 	bl	800d154 <IntToUnicode>
  }
}
 800d136:	46c0      	nop			; (mov r8, r8)
 800d138:	46bd      	mov	sp, r7
 800d13a:	b004      	add	sp, #16
 800d13c:	bd80      	pop	{r7, pc}
 800d13e:	46c0      	nop			; (mov r8, r8)
 800d140:	1ffff7ac 	.word	0x1ffff7ac
 800d144:	1ffff7b0 	.word	0x1ffff7b0
 800d148:	1ffff7b4 	.word	0x1ffff7b4
 800d14c:	20000162 	.word	0x20000162
 800d150:	20000172 	.word	0x20000172

0800d154 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800d154:	b580      	push	{r7, lr}
 800d156:	b086      	sub	sp, #24
 800d158:	af00      	add	r7, sp, #0
 800d15a:	60f8      	str	r0, [r7, #12]
 800d15c:	60b9      	str	r1, [r7, #8]
 800d15e:	1dfb      	adds	r3, r7, #7
 800d160:	701a      	strb	r2, [r3, #0]
  uint8_t idx = 0;
 800d162:	2117      	movs	r1, #23
 800d164:	187b      	adds	r3, r7, r1
 800d166:	2200      	movs	r2, #0
 800d168:	701a      	strb	r2, [r3, #0]

  for (idx = 0; idx < len; idx++)
 800d16a:	187b      	adds	r3, r7, r1
 800d16c:	2200      	movs	r2, #0
 800d16e:	701a      	strb	r2, [r3, #0]
 800d170:	e02f      	b.n	800d1d2 <IntToUnicode+0x7e>
  {
    if (((value >> 28)) < 0xA)
 800d172:	68fb      	ldr	r3, [r7, #12]
 800d174:	0f1b      	lsrs	r3, r3, #28
 800d176:	2b09      	cmp	r3, #9
 800d178:	d80d      	bhi.n	800d196 <IntToUnicode+0x42>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800d17a:	68fb      	ldr	r3, [r7, #12]
 800d17c:	0f1b      	lsrs	r3, r3, #28
 800d17e:	b2da      	uxtb	r2, r3
 800d180:	2317      	movs	r3, #23
 800d182:	18fb      	adds	r3, r7, r3
 800d184:	781b      	ldrb	r3, [r3, #0]
 800d186:	005b      	lsls	r3, r3, #1
 800d188:	0019      	movs	r1, r3
 800d18a:	68bb      	ldr	r3, [r7, #8]
 800d18c:	185b      	adds	r3, r3, r1
 800d18e:	3230      	adds	r2, #48	; 0x30
 800d190:	b2d2      	uxtb	r2, r2
 800d192:	701a      	strb	r2, [r3, #0]
 800d194:	e00c      	b.n	800d1b0 <IntToUnicode+0x5c>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800d196:	68fb      	ldr	r3, [r7, #12]
 800d198:	0f1b      	lsrs	r3, r3, #28
 800d19a:	b2da      	uxtb	r2, r3
 800d19c:	2317      	movs	r3, #23
 800d19e:	18fb      	adds	r3, r7, r3
 800d1a0:	781b      	ldrb	r3, [r3, #0]
 800d1a2:	005b      	lsls	r3, r3, #1
 800d1a4:	0019      	movs	r1, r3
 800d1a6:	68bb      	ldr	r3, [r7, #8]
 800d1a8:	185b      	adds	r3, r3, r1
 800d1aa:	3237      	adds	r2, #55	; 0x37
 800d1ac:	b2d2      	uxtb	r2, r2
 800d1ae:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800d1b0:	68fb      	ldr	r3, [r7, #12]
 800d1b2:	011b      	lsls	r3, r3, #4
 800d1b4:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800d1b6:	2117      	movs	r1, #23
 800d1b8:	187b      	adds	r3, r7, r1
 800d1ba:	781b      	ldrb	r3, [r3, #0]
 800d1bc:	005b      	lsls	r3, r3, #1
 800d1be:	3301      	adds	r3, #1
 800d1c0:	68ba      	ldr	r2, [r7, #8]
 800d1c2:	18d3      	adds	r3, r2, r3
 800d1c4:	2200      	movs	r2, #0
 800d1c6:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800d1c8:	187b      	adds	r3, r7, r1
 800d1ca:	781a      	ldrb	r2, [r3, #0]
 800d1cc:	187b      	adds	r3, r7, r1
 800d1ce:	3201      	adds	r2, #1
 800d1d0:	701a      	strb	r2, [r3, #0]
 800d1d2:	2317      	movs	r3, #23
 800d1d4:	18fa      	adds	r2, r7, r3
 800d1d6:	1dfb      	adds	r3, r7, #7
 800d1d8:	7812      	ldrb	r2, [r2, #0]
 800d1da:	781b      	ldrb	r3, [r3, #0]
 800d1dc:	429a      	cmp	r2, r3
 800d1de:	d3c8      	bcc.n	800d172 <IntToUnicode+0x1e>
  }
}
 800d1e0:	46c0      	nop			; (mov r8, r8)
 800d1e2:	46c0      	nop			; (mov r8, r8)
 800d1e4:	46bd      	mov	sp, r7
 800d1e6:	b006      	add	sp, #24
 800d1e8:	bd80      	pop	{r7, pc}
	...

0800d1ec <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800d1ec:	b580      	push	{r7, lr}
 800d1ee:	b084      	sub	sp, #16
 800d1f0:	af00      	add	r7, sp, #0
 800d1f2:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 800d1f4:	687b      	ldr	r3, [r7, #4]
 800d1f6:	681b      	ldr	r3, [r3, #0]
 800d1f8:	4a0e      	ldr	r2, [pc, #56]	; (800d234 <HAL_PCD_MspInit+0x48>)
 800d1fa:	4293      	cmp	r3, r2
 800d1fc:	d115      	bne.n	800d22a <HAL_PCD_MspInit+0x3e>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800d1fe:	4b0e      	ldr	r3, [pc, #56]	; (800d238 <HAL_PCD_MspInit+0x4c>)
 800d200:	69da      	ldr	r2, [r3, #28]
 800d202:	4b0d      	ldr	r3, [pc, #52]	; (800d238 <HAL_PCD_MspInit+0x4c>)
 800d204:	2180      	movs	r1, #128	; 0x80
 800d206:	0409      	lsls	r1, r1, #16
 800d208:	430a      	orrs	r2, r1
 800d20a:	61da      	str	r2, [r3, #28]
 800d20c:	4b0a      	ldr	r3, [pc, #40]	; (800d238 <HAL_PCD_MspInit+0x4c>)
 800d20e:	69da      	ldr	r2, [r3, #28]
 800d210:	2380      	movs	r3, #128	; 0x80
 800d212:	041b      	lsls	r3, r3, #16
 800d214:	4013      	ands	r3, r2
 800d216:	60fb      	str	r3, [r7, #12]
 800d218:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_IRQn, 0, 0);
 800d21a:	2200      	movs	r2, #0
 800d21c:	2100      	movs	r1, #0
 800d21e:	201f      	movs	r0, #31
 800d220:	f7f6 ffc6 	bl	80041b0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_IRQn);
 800d224:	201f      	movs	r0, #31
 800d226:	f7f6 ffd8 	bl	80041da <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800d22a:	46c0      	nop			; (mov r8, r8)
 800d22c:	46bd      	mov	sp, r7
 800d22e:	b004      	add	sp, #16
 800d230:	bd80      	pop	{r7, pc}
 800d232:	46c0      	nop			; (mov r8, r8)
 800d234:	40005c00 	.word	0x40005c00
 800d238:	40021000 	.word	0x40021000

0800d23c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d23c:	b580      	push	{r7, lr}
 800d23e:	b082      	sub	sp, #8
 800d240:	af00      	add	r7, sp, #0
 800d242:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800d244:	687a      	ldr	r2, [r7, #4]
 800d246:	23bc      	movs	r3, #188	; 0xbc
 800d248:	009b      	lsls	r3, r3, #2
 800d24a:	58d2      	ldr	r2, [r2, r3]
 800d24c:	687b      	ldr	r3, [r7, #4]
 800d24e:	21ac      	movs	r1, #172	; 0xac
 800d250:	0089      	lsls	r1, r1, #2
 800d252:	468c      	mov	ip, r1
 800d254:	4463      	add	r3, ip
 800d256:	0019      	movs	r1, r3
 800d258:	0010      	movs	r0, r2
 800d25a:	f7fe fc55 	bl	800bb08 <USBD_LL_SetupStage>
}
 800d25e:	46c0      	nop			; (mov r8, r8)
 800d260:	46bd      	mov	sp, r7
 800d262:	b002      	add	sp, #8
 800d264:	bd80      	pop	{r7, pc}

0800d266 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d266:	b590      	push	{r4, r7, lr}
 800d268:	b083      	sub	sp, #12
 800d26a:	af00      	add	r7, sp, #0
 800d26c:	6078      	str	r0, [r7, #4]
 800d26e:	000a      	movs	r2, r1
 800d270:	1cfb      	adds	r3, r7, #3
 800d272:	701a      	strb	r2, [r3, #0]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800d274:	687a      	ldr	r2, [r7, #4]
 800d276:	23bc      	movs	r3, #188	; 0xbc
 800d278:	009b      	lsls	r3, r3, #2
 800d27a:	58d4      	ldr	r4, [r2, r3]
 800d27c:	1cfb      	adds	r3, r7, #3
 800d27e:	781a      	ldrb	r2, [r3, #0]
 800d280:	6878      	ldr	r0, [r7, #4]
 800d282:	23be      	movs	r3, #190	; 0xbe
 800d284:	0059      	lsls	r1, r3, #1
 800d286:	0013      	movs	r3, r2
 800d288:	009b      	lsls	r3, r3, #2
 800d28a:	189b      	adds	r3, r3, r2
 800d28c:	00db      	lsls	r3, r3, #3
 800d28e:	18c3      	adds	r3, r0, r3
 800d290:	185b      	adds	r3, r3, r1
 800d292:	681a      	ldr	r2, [r3, #0]
 800d294:	1cfb      	adds	r3, r7, #3
 800d296:	781b      	ldrb	r3, [r3, #0]
 800d298:	0019      	movs	r1, r3
 800d29a:	0020      	movs	r0, r4
 800d29c:	f7fe fc92 	bl	800bbc4 <USBD_LL_DataOutStage>
}
 800d2a0:	46c0      	nop			; (mov r8, r8)
 800d2a2:	46bd      	mov	sp, r7
 800d2a4:	b003      	add	sp, #12
 800d2a6:	bd90      	pop	{r4, r7, pc}

0800d2a8 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d2a8:	b580      	push	{r7, lr}
 800d2aa:	b082      	sub	sp, #8
 800d2ac:	af00      	add	r7, sp, #0
 800d2ae:	6078      	str	r0, [r7, #4]
 800d2b0:	000a      	movs	r2, r1
 800d2b2:	1cfb      	adds	r3, r7, #3
 800d2b4:	701a      	strb	r2, [r3, #0]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800d2b6:	687a      	ldr	r2, [r7, #4]
 800d2b8:	23bc      	movs	r3, #188	; 0xbc
 800d2ba:	009b      	lsls	r3, r3, #2
 800d2bc:	58d0      	ldr	r0, [r2, r3]
 800d2be:	1cfb      	adds	r3, r7, #3
 800d2c0:	781a      	ldrb	r2, [r3, #0]
 800d2c2:	6879      	ldr	r1, [r7, #4]
 800d2c4:	0013      	movs	r3, r2
 800d2c6:	009b      	lsls	r3, r3, #2
 800d2c8:	189b      	adds	r3, r3, r2
 800d2ca:	00db      	lsls	r3, r3, #3
 800d2cc:	18cb      	adds	r3, r1, r3
 800d2ce:	333c      	adds	r3, #60	; 0x3c
 800d2d0:	681a      	ldr	r2, [r3, #0]
 800d2d2:	1cfb      	adds	r3, r7, #3
 800d2d4:	781b      	ldrb	r3, [r3, #0]
 800d2d6:	0019      	movs	r1, r3
 800d2d8:	f7fe fcf6 	bl	800bcc8 <USBD_LL_DataInStage>
}
 800d2dc:	46c0      	nop			; (mov r8, r8)
 800d2de:	46bd      	mov	sp, r7
 800d2e0:	b002      	add	sp, #8
 800d2e2:	bd80      	pop	{r7, pc}

0800d2e4 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d2e4:	b580      	push	{r7, lr}
 800d2e6:	b082      	sub	sp, #8
 800d2e8:	af00      	add	r7, sp, #0
 800d2ea:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800d2ec:	687a      	ldr	r2, [r7, #4]
 800d2ee:	23bc      	movs	r3, #188	; 0xbc
 800d2f0:	009b      	lsls	r3, r3, #2
 800d2f2:	58d3      	ldr	r3, [r2, r3]
 800d2f4:	0018      	movs	r0, r3
 800d2f6:	f7fe fe2d 	bl	800bf54 <USBD_LL_SOF>
}
 800d2fa:	46c0      	nop			; (mov r8, r8)
 800d2fc:	46bd      	mov	sp, r7
 800d2fe:	b002      	add	sp, #8
 800d300:	bd80      	pop	{r7, pc}

0800d302 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d302:	b580      	push	{r7, lr}
 800d304:	b084      	sub	sp, #16
 800d306:	af00      	add	r7, sp, #0
 800d308:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800d30a:	230f      	movs	r3, #15
 800d30c:	18fb      	adds	r3, r7, r3
 800d30e:	2201      	movs	r2, #1
 800d310:	701a      	strb	r2, [r3, #0]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800d312:	687b      	ldr	r3, [r7, #4]
 800d314:	689b      	ldr	r3, [r3, #8]
 800d316:	2b02      	cmp	r3, #2
 800d318:	d001      	beq.n	800d31e <HAL_PCD_ResetCallback+0x1c>
  {
    Error_Handler();
 800d31a:	f7f5 f910 	bl	800253e <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800d31e:	687a      	ldr	r2, [r7, #4]
 800d320:	23bc      	movs	r3, #188	; 0xbc
 800d322:	009b      	lsls	r3, r3, #2
 800d324:	58d2      	ldr	r2, [r2, r3]
 800d326:	230f      	movs	r3, #15
 800d328:	18fb      	adds	r3, r7, r3
 800d32a:	781b      	ldrb	r3, [r3, #0]
 800d32c:	0019      	movs	r1, r3
 800d32e:	0010      	movs	r0, r2
 800d330:	f7fe fdcf 	bl	800bed2 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800d334:	687a      	ldr	r2, [r7, #4]
 800d336:	23bc      	movs	r3, #188	; 0xbc
 800d338:	009b      	lsls	r3, r3, #2
 800d33a:	58d3      	ldr	r3, [r2, r3]
 800d33c:	0018      	movs	r0, r3
 800d33e:	f7fe fd80 	bl	800be42 <USBD_LL_Reset>
}
 800d342:	46c0      	nop			; (mov r8, r8)
 800d344:	46bd      	mov	sp, r7
 800d346:	b004      	add	sp, #16
 800d348:	bd80      	pop	{r7, pc}
	...

0800d34c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d34c:	b580      	push	{r7, lr}
 800d34e:	b082      	sub	sp, #8
 800d350:	af00      	add	r7, sp, #0
 800d352:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800d354:	687a      	ldr	r2, [r7, #4]
 800d356:	23bc      	movs	r3, #188	; 0xbc
 800d358:	009b      	lsls	r3, r3, #2
 800d35a:	58d3      	ldr	r3, [r2, r3]
 800d35c:	0018      	movs	r0, r3
 800d35e:	f7fe fdc9 	bl	800bef4 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800d362:	687b      	ldr	r3, [r7, #4]
 800d364:	699b      	ldr	r3, [r3, #24]
 800d366:	2b00      	cmp	r3, #0
 800d368:	d005      	beq.n	800d376 <HAL_PCD_SuspendCallback+0x2a>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800d36a:	4b05      	ldr	r3, [pc, #20]	; (800d380 <HAL_PCD_SuspendCallback+0x34>)
 800d36c:	691a      	ldr	r2, [r3, #16]
 800d36e:	4b04      	ldr	r3, [pc, #16]	; (800d380 <HAL_PCD_SuspendCallback+0x34>)
 800d370:	2106      	movs	r1, #6
 800d372:	430a      	orrs	r2, r1
 800d374:	611a      	str	r2, [r3, #16]
  }
  /* USER CODE END 2 */
}
 800d376:	46c0      	nop			; (mov r8, r8)
 800d378:	46bd      	mov	sp, r7
 800d37a:	b002      	add	sp, #8
 800d37c:	bd80      	pop	{r7, pc}
 800d37e:	46c0      	nop			; (mov r8, r8)
 800d380:	e000ed00 	.word	0xe000ed00

0800d384 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d384:	b580      	push	{r7, lr}
 800d386:	b082      	sub	sp, #8
 800d388:	af00      	add	r7, sp, #0
 800d38a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800d38c:	687b      	ldr	r3, [r7, #4]
 800d38e:	699b      	ldr	r3, [r3, #24]
 800d390:	2b00      	cmp	r3, #0
 800d392:	d007      	beq.n	800d3a4 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800d394:	4b09      	ldr	r3, [pc, #36]	; (800d3bc <HAL_PCD_ResumeCallback+0x38>)
 800d396:	691a      	ldr	r2, [r3, #16]
 800d398:	4b08      	ldr	r3, [pc, #32]	; (800d3bc <HAL_PCD_ResumeCallback+0x38>)
 800d39a:	2106      	movs	r1, #6
 800d39c:	438a      	bics	r2, r1
 800d39e:	611a      	str	r2, [r3, #16]
    SystemClockConfig_Resume();
 800d3a0:	f000 fa44 	bl	800d82c <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800d3a4:	687a      	ldr	r2, [r7, #4]
 800d3a6:	23bc      	movs	r3, #188	; 0xbc
 800d3a8:	009b      	lsls	r3, r3, #2
 800d3aa:	58d3      	ldr	r3, [r2, r3]
 800d3ac:	0018      	movs	r0, r3
 800d3ae:	f7fe fdb9 	bl	800bf24 <USBD_LL_Resume>
}
 800d3b2:	46c0      	nop			; (mov r8, r8)
 800d3b4:	46bd      	mov	sp, r7
 800d3b6:	b002      	add	sp, #8
 800d3b8:	bd80      	pop	{r7, pc}
 800d3ba:	46c0      	nop			; (mov r8, r8)
 800d3bc:	e000ed00 	.word	0xe000ed00

0800d3c0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800d3c0:	b580      	push	{r7, lr}
 800d3c2:	b082      	sub	sp, #8
 800d3c4:	af00      	add	r7, sp, #0
 800d3c6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800d3c8:	4a2d      	ldr	r2, [pc, #180]	; (800d480 <USBD_LL_Init+0xc0>)
 800d3ca:	23bc      	movs	r3, #188	; 0xbc
 800d3cc:	009b      	lsls	r3, r3, #2
 800d3ce:	6879      	ldr	r1, [r7, #4]
 800d3d0:	50d1      	str	r1, [r2, r3]
  pdev->pData = &hpcd_USB_FS;
 800d3d2:	687a      	ldr	r2, [r7, #4]
 800d3d4:	23b0      	movs	r3, #176	; 0xb0
 800d3d6:	009b      	lsls	r3, r3, #2
 800d3d8:	4929      	ldr	r1, [pc, #164]	; (800d480 <USBD_LL_Init+0xc0>)
 800d3da:	50d1      	str	r1, [r2, r3]

  hpcd_USB_FS.Instance = USB;
 800d3dc:	4b28      	ldr	r3, [pc, #160]	; (800d480 <USBD_LL_Init+0xc0>)
 800d3de:	4a29      	ldr	r2, [pc, #164]	; (800d484 <USBD_LL_Init+0xc4>)
 800d3e0:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800d3e2:	4b27      	ldr	r3, [pc, #156]	; (800d480 <USBD_LL_Init+0xc0>)
 800d3e4:	2208      	movs	r2, #8
 800d3e6:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800d3e8:	4b25      	ldr	r3, [pc, #148]	; (800d480 <USBD_LL_Init+0xc0>)
 800d3ea:	2202      	movs	r2, #2
 800d3ec:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800d3ee:	4b24      	ldr	r3, [pc, #144]	; (800d480 <USBD_LL_Init+0xc0>)
 800d3f0:	2202      	movs	r2, #2
 800d3f2:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800d3f4:	4b22      	ldr	r3, [pc, #136]	; (800d480 <USBD_LL_Init+0xc0>)
 800d3f6:	2200      	movs	r2, #0
 800d3f8:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800d3fa:	4b21      	ldr	r3, [pc, #132]	; (800d480 <USBD_LL_Init+0xc0>)
 800d3fc:	2200      	movs	r2, #0
 800d3fe:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800d400:	4b1f      	ldr	r3, [pc, #124]	; (800d480 <USBD_LL_Init+0xc0>)
 800d402:	2200      	movs	r2, #0
 800d404:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800d406:	4b1e      	ldr	r3, [pc, #120]	; (800d480 <USBD_LL_Init+0xc0>)
 800d408:	0018      	movs	r0, r3
 800d40a:	f7f7 f96b 	bl	80046e4 <HAL_PCD_Init>
 800d40e:	1e03      	subs	r3, r0, #0
 800d410:	d001      	beq.n	800d416 <USBD_LL_Init+0x56>
  {
    Error_Handler( );
 800d412:	f7f5 f894 	bl	800253e <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800d416:	687a      	ldr	r2, [r7, #4]
 800d418:	23b0      	movs	r3, #176	; 0xb0
 800d41a:	009b      	lsls	r3, r3, #2
 800d41c:	58d0      	ldr	r0, [r2, r3]
 800d41e:	2318      	movs	r3, #24
 800d420:	2200      	movs	r2, #0
 800d422:	2100      	movs	r1, #0
 800d424:	f7f8 ff4c 	bl	80062c0 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800d428:	687a      	ldr	r2, [r7, #4]
 800d42a:	23b0      	movs	r3, #176	; 0xb0
 800d42c:	009b      	lsls	r3, r3, #2
 800d42e:	58d0      	ldr	r0, [r2, r3]
 800d430:	2358      	movs	r3, #88	; 0x58
 800d432:	2200      	movs	r2, #0
 800d434:	2180      	movs	r1, #128	; 0x80
 800d436:	f7f8 ff43 	bl	80062c0 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800d43a:	687a      	ldr	r2, [r7, #4]
 800d43c:	23b0      	movs	r3, #176	; 0xb0
 800d43e:	009b      	lsls	r3, r3, #2
 800d440:	58d0      	ldr	r0, [r2, r3]
 800d442:	23c0      	movs	r3, #192	; 0xc0
 800d444:	2200      	movs	r2, #0
 800d446:	2181      	movs	r1, #129	; 0x81
 800d448:	f7f8 ff3a 	bl	80062c0 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800d44c:	687a      	ldr	r2, [r7, #4]
 800d44e:	23b0      	movs	r3, #176	; 0xb0
 800d450:	009b      	lsls	r3, r3, #2
 800d452:	58d0      	ldr	r0, [r2, r3]
 800d454:	2388      	movs	r3, #136	; 0x88
 800d456:	005b      	lsls	r3, r3, #1
 800d458:	2200      	movs	r2, #0
 800d45a:	2101      	movs	r1, #1
 800d45c:	f7f8 ff30 	bl	80062c0 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800d460:	687a      	ldr	r2, [r7, #4]
 800d462:	23b0      	movs	r3, #176	; 0xb0
 800d464:	009b      	lsls	r3, r3, #2
 800d466:	58d0      	ldr	r0, [r2, r3]
 800d468:	2380      	movs	r3, #128	; 0x80
 800d46a:	005b      	lsls	r3, r3, #1
 800d46c:	2200      	movs	r2, #0
 800d46e:	2182      	movs	r1, #130	; 0x82
 800d470:	f7f8 ff26 	bl	80062c0 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800d474:	2300      	movs	r3, #0
}
 800d476:	0018      	movs	r0, r3
 800d478:	46bd      	mov	sp, r7
 800d47a:	b002      	add	sp, #8
 800d47c:	bd80      	pop	{r7, pc}
 800d47e:	46c0      	nop			; (mov r8, r8)
 800d480:	200010c4 	.word	0x200010c4
 800d484:	40005c00 	.word	0x40005c00

0800d488 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800d488:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d48a:	b085      	sub	sp, #20
 800d48c:	af00      	add	r7, sp, #0
 800d48e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d490:	210f      	movs	r1, #15
 800d492:	187b      	adds	r3, r7, r1
 800d494:	2200      	movs	r2, #0
 800d496:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d498:	260e      	movs	r6, #14
 800d49a:	19bb      	adds	r3, r7, r6
 800d49c:	2200      	movs	r2, #0
 800d49e:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_Start(pdev->pData);
 800d4a0:	687a      	ldr	r2, [r7, #4]
 800d4a2:	23b0      	movs	r3, #176	; 0xb0
 800d4a4:	009b      	lsls	r3, r3, #2
 800d4a6:	58d3      	ldr	r3, [r2, r3]
 800d4a8:	000d      	movs	r5, r1
 800d4aa:	187c      	adds	r4, r7, r1
 800d4ac:	0018      	movs	r0, r3
 800d4ae:	f7f7 fa29 	bl	8004904 <HAL_PCD_Start>
 800d4b2:	0003      	movs	r3, r0
 800d4b4:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d4b6:	19bc      	adds	r4, r7, r6
 800d4b8:	197b      	adds	r3, r7, r5
 800d4ba:	781b      	ldrb	r3, [r3, #0]
 800d4bc:	0018      	movs	r0, r3
 800d4be:	f000 f9bc 	bl	800d83a <USBD_Get_USB_Status>
 800d4c2:	0003      	movs	r3, r0
 800d4c4:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800d4c6:	19bb      	adds	r3, r7, r6
 800d4c8:	781b      	ldrb	r3, [r3, #0]
}
 800d4ca:	0018      	movs	r0, r3
 800d4cc:	46bd      	mov	sp, r7
 800d4ce:	b005      	add	sp, #20
 800d4d0:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800d4d2 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800d4d2:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d4d4:	b085      	sub	sp, #20
 800d4d6:	af00      	add	r7, sp, #0
 800d4d8:	6078      	str	r0, [r7, #4]
 800d4da:	000c      	movs	r4, r1
 800d4dc:	0010      	movs	r0, r2
 800d4de:	0019      	movs	r1, r3
 800d4e0:	1cfb      	adds	r3, r7, #3
 800d4e2:	1c22      	adds	r2, r4, #0
 800d4e4:	701a      	strb	r2, [r3, #0]
 800d4e6:	1cbb      	adds	r3, r7, #2
 800d4e8:	1c02      	adds	r2, r0, #0
 800d4ea:	701a      	strb	r2, [r3, #0]
 800d4ec:	003b      	movs	r3, r7
 800d4ee:	1c0a      	adds	r2, r1, #0
 800d4f0:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d4f2:	260f      	movs	r6, #15
 800d4f4:	19bb      	adds	r3, r7, r6
 800d4f6:	2200      	movs	r2, #0
 800d4f8:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d4fa:	250e      	movs	r5, #14
 800d4fc:	197b      	adds	r3, r7, r5
 800d4fe:	2200      	movs	r2, #0
 800d500:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800d502:	687a      	ldr	r2, [r7, #4]
 800d504:	23b0      	movs	r3, #176	; 0xb0
 800d506:	009b      	lsls	r3, r3, #2
 800d508:	58d0      	ldr	r0, [r2, r3]
 800d50a:	19bc      	adds	r4, r7, r6
 800d50c:	1cbb      	adds	r3, r7, #2
 800d50e:	781d      	ldrb	r5, [r3, #0]
 800d510:	003b      	movs	r3, r7
 800d512:	881a      	ldrh	r2, [r3, #0]
 800d514:	1cfb      	adds	r3, r7, #3
 800d516:	7819      	ldrb	r1, [r3, #0]
 800d518:	002b      	movs	r3, r5
 800d51a:	f7f7 fbc0 	bl	8004c9e <HAL_PCD_EP_Open>
 800d51e:	0003      	movs	r3, r0
 800d520:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d522:	250e      	movs	r5, #14
 800d524:	197c      	adds	r4, r7, r5
 800d526:	19bb      	adds	r3, r7, r6
 800d528:	781b      	ldrb	r3, [r3, #0]
 800d52a:	0018      	movs	r0, r3
 800d52c:	f000 f985 	bl	800d83a <USBD_Get_USB_Status>
 800d530:	0003      	movs	r3, r0
 800d532:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800d534:	197b      	adds	r3, r7, r5
 800d536:	781b      	ldrb	r3, [r3, #0]
}
 800d538:	0018      	movs	r0, r3
 800d53a:	46bd      	mov	sp, r7
 800d53c:	b005      	add	sp, #20
 800d53e:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800d540 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d540:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d542:	b085      	sub	sp, #20
 800d544:	af00      	add	r7, sp, #0
 800d546:	6078      	str	r0, [r7, #4]
 800d548:	000a      	movs	r2, r1
 800d54a:	1cfb      	adds	r3, r7, #3
 800d54c:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d54e:	210f      	movs	r1, #15
 800d550:	187b      	adds	r3, r7, r1
 800d552:	2200      	movs	r2, #0
 800d554:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d556:	260e      	movs	r6, #14
 800d558:	19bb      	adds	r3, r7, r6
 800d55a:	2200      	movs	r2, #0
 800d55c:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800d55e:	687a      	ldr	r2, [r7, #4]
 800d560:	23b0      	movs	r3, #176	; 0xb0
 800d562:	009b      	lsls	r3, r3, #2
 800d564:	58d2      	ldr	r2, [r2, r3]
 800d566:	000d      	movs	r5, r1
 800d568:	187c      	adds	r4, r7, r1
 800d56a:	1cfb      	adds	r3, r7, #3
 800d56c:	781b      	ldrb	r3, [r3, #0]
 800d56e:	0019      	movs	r1, r3
 800d570:	0010      	movs	r0, r2
 800d572:	f7f7 fc0c 	bl	8004d8e <HAL_PCD_EP_Close>
 800d576:	0003      	movs	r3, r0
 800d578:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d57a:	19bc      	adds	r4, r7, r6
 800d57c:	197b      	adds	r3, r7, r5
 800d57e:	781b      	ldrb	r3, [r3, #0]
 800d580:	0018      	movs	r0, r3
 800d582:	f000 f95a 	bl	800d83a <USBD_Get_USB_Status>
 800d586:	0003      	movs	r3, r0
 800d588:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800d58a:	19bb      	adds	r3, r7, r6
 800d58c:	781b      	ldrb	r3, [r3, #0]
}
 800d58e:	0018      	movs	r0, r3
 800d590:	46bd      	mov	sp, r7
 800d592:	b005      	add	sp, #20
 800d594:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800d596 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d596:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d598:	b085      	sub	sp, #20
 800d59a:	af00      	add	r7, sp, #0
 800d59c:	6078      	str	r0, [r7, #4]
 800d59e:	000a      	movs	r2, r1
 800d5a0:	1cfb      	adds	r3, r7, #3
 800d5a2:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d5a4:	210f      	movs	r1, #15
 800d5a6:	187b      	adds	r3, r7, r1
 800d5a8:	2200      	movs	r2, #0
 800d5aa:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d5ac:	260e      	movs	r6, #14
 800d5ae:	19bb      	adds	r3, r7, r6
 800d5b0:	2200      	movs	r2, #0
 800d5b2:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800d5b4:	687a      	ldr	r2, [r7, #4]
 800d5b6:	23b0      	movs	r3, #176	; 0xb0
 800d5b8:	009b      	lsls	r3, r3, #2
 800d5ba:	58d2      	ldr	r2, [r2, r3]
 800d5bc:	000d      	movs	r5, r1
 800d5be:	187c      	adds	r4, r7, r1
 800d5c0:	1cfb      	adds	r3, r7, #3
 800d5c2:	781b      	ldrb	r3, [r3, #0]
 800d5c4:	0019      	movs	r1, r3
 800d5c6:	0010      	movs	r0, r2
 800d5c8:	f7f7 fcd8 	bl	8004f7c <HAL_PCD_EP_SetStall>
 800d5cc:	0003      	movs	r3, r0
 800d5ce:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d5d0:	19bc      	adds	r4, r7, r6
 800d5d2:	197b      	adds	r3, r7, r5
 800d5d4:	781b      	ldrb	r3, [r3, #0]
 800d5d6:	0018      	movs	r0, r3
 800d5d8:	f000 f92f 	bl	800d83a <USBD_Get_USB_Status>
 800d5dc:	0003      	movs	r3, r0
 800d5de:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800d5e0:	19bb      	adds	r3, r7, r6
 800d5e2:	781b      	ldrb	r3, [r3, #0]
}
 800d5e4:	0018      	movs	r0, r3
 800d5e6:	46bd      	mov	sp, r7
 800d5e8:	b005      	add	sp, #20
 800d5ea:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800d5ec <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d5ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d5ee:	b085      	sub	sp, #20
 800d5f0:	af00      	add	r7, sp, #0
 800d5f2:	6078      	str	r0, [r7, #4]
 800d5f4:	000a      	movs	r2, r1
 800d5f6:	1cfb      	adds	r3, r7, #3
 800d5f8:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d5fa:	210f      	movs	r1, #15
 800d5fc:	187b      	adds	r3, r7, r1
 800d5fe:	2200      	movs	r2, #0
 800d600:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d602:	260e      	movs	r6, #14
 800d604:	19bb      	adds	r3, r7, r6
 800d606:	2200      	movs	r2, #0
 800d608:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800d60a:	687a      	ldr	r2, [r7, #4]
 800d60c:	23b0      	movs	r3, #176	; 0xb0
 800d60e:	009b      	lsls	r3, r3, #2
 800d610:	58d2      	ldr	r2, [r2, r3]
 800d612:	000d      	movs	r5, r1
 800d614:	187c      	adds	r4, r7, r1
 800d616:	1cfb      	adds	r3, r7, #3
 800d618:	781b      	ldrb	r3, [r3, #0]
 800d61a:	0019      	movs	r1, r3
 800d61c:	0010      	movs	r0, r2
 800d61e:	f7f7 fd09 	bl	8005034 <HAL_PCD_EP_ClrStall>
 800d622:	0003      	movs	r3, r0
 800d624:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d626:	19bc      	adds	r4, r7, r6
 800d628:	197b      	adds	r3, r7, r5
 800d62a:	781b      	ldrb	r3, [r3, #0]
 800d62c:	0018      	movs	r0, r3
 800d62e:	f000 f904 	bl	800d83a <USBD_Get_USB_Status>
 800d632:	0003      	movs	r3, r0
 800d634:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800d636:	19bb      	adds	r3, r7, r6
 800d638:	781b      	ldrb	r3, [r3, #0]
}
 800d63a:	0018      	movs	r0, r3
 800d63c:	46bd      	mov	sp, r7
 800d63e:	b005      	add	sp, #20
 800d640:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800d642 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d642:	b580      	push	{r7, lr}
 800d644:	b084      	sub	sp, #16
 800d646:	af00      	add	r7, sp, #0
 800d648:	6078      	str	r0, [r7, #4]
 800d64a:	000a      	movs	r2, r1
 800d64c:	1cfb      	adds	r3, r7, #3
 800d64e:	701a      	strb	r2, [r3, #0]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800d650:	687a      	ldr	r2, [r7, #4]
 800d652:	23b0      	movs	r3, #176	; 0xb0
 800d654:	009b      	lsls	r3, r3, #2
 800d656:	58d3      	ldr	r3, [r2, r3]
 800d658:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800d65a:	1cfb      	adds	r3, r7, #3
 800d65c:	781b      	ldrb	r3, [r3, #0]
 800d65e:	b25b      	sxtb	r3, r3
 800d660:	2b00      	cmp	r3, #0
 800d662:	da0d      	bge.n	800d680 <USBD_LL_IsStallEP+0x3e>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800d664:	1cfb      	adds	r3, r7, #3
 800d666:	781b      	ldrb	r3, [r3, #0]
 800d668:	227f      	movs	r2, #127	; 0x7f
 800d66a:	4013      	ands	r3, r2
 800d66c:	68f9      	ldr	r1, [r7, #12]
 800d66e:	1c5a      	adds	r2, r3, #1
 800d670:	0013      	movs	r3, r2
 800d672:	009b      	lsls	r3, r3, #2
 800d674:	189b      	adds	r3, r3, r2
 800d676:	00db      	lsls	r3, r3, #3
 800d678:	18cb      	adds	r3, r1, r3
 800d67a:	3302      	adds	r3, #2
 800d67c:	781b      	ldrb	r3, [r3, #0]
 800d67e:	e00d      	b.n	800d69c <USBD_LL_IsStallEP+0x5a>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800d680:	1cfb      	adds	r3, r7, #3
 800d682:	781b      	ldrb	r3, [r3, #0]
 800d684:	227f      	movs	r2, #127	; 0x7f
 800d686:	401a      	ands	r2, r3
 800d688:	68f8      	ldr	r0, [r7, #12]
 800d68a:	23b5      	movs	r3, #181	; 0xb5
 800d68c:	0059      	lsls	r1, r3, #1
 800d68e:	0013      	movs	r3, r2
 800d690:	009b      	lsls	r3, r3, #2
 800d692:	189b      	adds	r3, r3, r2
 800d694:	00db      	lsls	r3, r3, #3
 800d696:	18c3      	adds	r3, r0, r3
 800d698:	185b      	adds	r3, r3, r1
 800d69a:	781b      	ldrb	r3, [r3, #0]
  }
}
 800d69c:	0018      	movs	r0, r3
 800d69e:	46bd      	mov	sp, r7
 800d6a0:	b004      	add	sp, #16
 800d6a2:	bd80      	pop	{r7, pc}

0800d6a4 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800d6a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d6a6:	b085      	sub	sp, #20
 800d6a8:	af00      	add	r7, sp, #0
 800d6aa:	6078      	str	r0, [r7, #4]
 800d6ac:	000a      	movs	r2, r1
 800d6ae:	1cfb      	adds	r3, r7, #3
 800d6b0:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d6b2:	210f      	movs	r1, #15
 800d6b4:	187b      	adds	r3, r7, r1
 800d6b6:	2200      	movs	r2, #0
 800d6b8:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d6ba:	260e      	movs	r6, #14
 800d6bc:	19bb      	adds	r3, r7, r6
 800d6be:	2200      	movs	r2, #0
 800d6c0:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800d6c2:	687a      	ldr	r2, [r7, #4]
 800d6c4:	23b0      	movs	r3, #176	; 0xb0
 800d6c6:	009b      	lsls	r3, r3, #2
 800d6c8:	58d2      	ldr	r2, [r2, r3]
 800d6ca:	000d      	movs	r5, r1
 800d6cc:	187c      	adds	r4, r7, r1
 800d6ce:	1cfb      	adds	r3, r7, #3
 800d6d0:	781b      	ldrb	r3, [r3, #0]
 800d6d2:	0019      	movs	r1, r3
 800d6d4:	0010      	movs	r0, r2
 800d6d6:	f7f7 fab7 	bl	8004c48 <HAL_PCD_SetAddress>
 800d6da:	0003      	movs	r3, r0
 800d6dc:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d6de:	19bc      	adds	r4, r7, r6
 800d6e0:	197b      	adds	r3, r7, r5
 800d6e2:	781b      	ldrb	r3, [r3, #0]
 800d6e4:	0018      	movs	r0, r3
 800d6e6:	f000 f8a8 	bl	800d83a <USBD_Get_USB_Status>
 800d6ea:	0003      	movs	r3, r0
 800d6ec:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800d6ee:	19bb      	adds	r3, r7, r6
 800d6f0:	781b      	ldrb	r3, [r3, #0]
}
 800d6f2:	0018      	movs	r0, r3
 800d6f4:	46bd      	mov	sp, r7
 800d6f6:	b005      	add	sp, #20
 800d6f8:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800d6fa <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800d6fa:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d6fc:	b087      	sub	sp, #28
 800d6fe:	af00      	add	r7, sp, #0
 800d700:	60f8      	str	r0, [r7, #12]
 800d702:	0008      	movs	r0, r1
 800d704:	607a      	str	r2, [r7, #4]
 800d706:	0019      	movs	r1, r3
 800d708:	230b      	movs	r3, #11
 800d70a:	18fb      	adds	r3, r7, r3
 800d70c:	1c02      	adds	r2, r0, #0
 800d70e:	701a      	strb	r2, [r3, #0]
 800d710:	2408      	movs	r4, #8
 800d712:	193b      	adds	r3, r7, r4
 800d714:	1c0a      	adds	r2, r1, #0
 800d716:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d718:	2117      	movs	r1, #23
 800d71a:	187b      	adds	r3, r7, r1
 800d71c:	2200      	movs	r2, #0
 800d71e:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d720:	2516      	movs	r5, #22
 800d722:	197b      	adds	r3, r7, r5
 800d724:	2200      	movs	r2, #0
 800d726:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800d728:	68fa      	ldr	r2, [r7, #12]
 800d72a:	23b0      	movs	r3, #176	; 0xb0
 800d72c:	009b      	lsls	r3, r3, #2
 800d72e:	58d0      	ldr	r0, [r2, r3]
 800d730:	193b      	adds	r3, r7, r4
 800d732:	881d      	ldrh	r5, [r3, #0]
 800d734:	000e      	movs	r6, r1
 800d736:	187c      	adds	r4, r7, r1
 800d738:	687a      	ldr	r2, [r7, #4]
 800d73a:	230b      	movs	r3, #11
 800d73c:	18fb      	adds	r3, r7, r3
 800d73e:	7819      	ldrb	r1, [r3, #0]
 800d740:	002b      	movs	r3, r5
 800d742:	f7f7 fbd2 	bl	8004eea <HAL_PCD_EP_Transmit>
 800d746:	0003      	movs	r3, r0
 800d748:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d74a:	2516      	movs	r5, #22
 800d74c:	197c      	adds	r4, r7, r5
 800d74e:	19bb      	adds	r3, r7, r6
 800d750:	781b      	ldrb	r3, [r3, #0]
 800d752:	0018      	movs	r0, r3
 800d754:	f000 f871 	bl	800d83a <USBD_Get_USB_Status>
 800d758:	0003      	movs	r3, r0
 800d75a:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800d75c:	197b      	adds	r3, r7, r5
 800d75e:	781b      	ldrb	r3, [r3, #0]
}
 800d760:	0018      	movs	r0, r3
 800d762:	46bd      	mov	sp, r7
 800d764:	b007      	add	sp, #28
 800d766:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800d768 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800d768:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d76a:	b087      	sub	sp, #28
 800d76c:	af00      	add	r7, sp, #0
 800d76e:	60f8      	str	r0, [r7, #12]
 800d770:	0008      	movs	r0, r1
 800d772:	607a      	str	r2, [r7, #4]
 800d774:	0019      	movs	r1, r3
 800d776:	230b      	movs	r3, #11
 800d778:	18fb      	adds	r3, r7, r3
 800d77a:	1c02      	adds	r2, r0, #0
 800d77c:	701a      	strb	r2, [r3, #0]
 800d77e:	2408      	movs	r4, #8
 800d780:	193b      	adds	r3, r7, r4
 800d782:	1c0a      	adds	r2, r1, #0
 800d784:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d786:	2117      	movs	r1, #23
 800d788:	187b      	adds	r3, r7, r1
 800d78a:	2200      	movs	r2, #0
 800d78c:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d78e:	2516      	movs	r5, #22
 800d790:	197b      	adds	r3, r7, r5
 800d792:	2200      	movs	r2, #0
 800d794:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800d796:	68fa      	ldr	r2, [r7, #12]
 800d798:	23b0      	movs	r3, #176	; 0xb0
 800d79a:	009b      	lsls	r3, r3, #2
 800d79c:	58d0      	ldr	r0, [r2, r3]
 800d79e:	193b      	adds	r3, r7, r4
 800d7a0:	881d      	ldrh	r5, [r3, #0]
 800d7a2:	000e      	movs	r6, r1
 800d7a4:	187c      	adds	r4, r7, r1
 800d7a6:	687a      	ldr	r2, [r7, #4]
 800d7a8:	230b      	movs	r3, #11
 800d7aa:	18fb      	adds	r3, r7, r3
 800d7ac:	7819      	ldrb	r1, [r3, #0]
 800d7ae:	002b      	movs	r3, r5
 800d7b0:	f7f7 fb3e 	bl	8004e30 <HAL_PCD_EP_Receive>
 800d7b4:	0003      	movs	r3, r0
 800d7b6:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d7b8:	2516      	movs	r5, #22
 800d7ba:	197c      	adds	r4, r7, r5
 800d7bc:	19bb      	adds	r3, r7, r6
 800d7be:	781b      	ldrb	r3, [r3, #0]
 800d7c0:	0018      	movs	r0, r3
 800d7c2:	f000 f83a 	bl	800d83a <USBD_Get_USB_Status>
 800d7c6:	0003      	movs	r3, r0
 800d7c8:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800d7ca:	197b      	adds	r3, r7, r5
 800d7cc:	781b      	ldrb	r3, [r3, #0]
}
 800d7ce:	0018      	movs	r0, r3
 800d7d0:	46bd      	mov	sp, r7
 800d7d2:	b007      	add	sp, #28
 800d7d4:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800d7d6 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d7d6:	b580      	push	{r7, lr}
 800d7d8:	b082      	sub	sp, #8
 800d7da:	af00      	add	r7, sp, #0
 800d7dc:	6078      	str	r0, [r7, #4]
 800d7de:	000a      	movs	r2, r1
 800d7e0:	1cfb      	adds	r3, r7, #3
 800d7e2:	701a      	strb	r2, [r3, #0]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800d7e4:	687a      	ldr	r2, [r7, #4]
 800d7e6:	23b0      	movs	r3, #176	; 0xb0
 800d7e8:	009b      	lsls	r3, r3, #2
 800d7ea:	58d2      	ldr	r2, [r2, r3]
 800d7ec:	1cfb      	adds	r3, r7, #3
 800d7ee:	781b      	ldrb	r3, [r3, #0]
 800d7f0:	0019      	movs	r1, r3
 800d7f2:	0010      	movs	r0, r2
 800d7f4:	f7f7 fb60 	bl	8004eb8 <HAL_PCD_EP_GetRxCount>
 800d7f8:	0003      	movs	r3, r0
}
 800d7fa:	0018      	movs	r0, r3
 800d7fc:	46bd      	mov	sp, r7
 800d7fe:	b002      	add	sp, #8
 800d800:	bd80      	pop	{r7, pc}
	...

0800d804 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800d804:	b580      	push	{r7, lr}
 800d806:	b082      	sub	sp, #8
 800d808:	af00      	add	r7, sp, #0
 800d80a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800d80c:	4b02      	ldr	r3, [pc, #8]	; (800d818 <USBD_static_malloc+0x14>)
}
 800d80e:	0018      	movs	r0, r3
 800d810:	46bd      	mov	sp, r7
 800d812:	b002      	add	sp, #8
 800d814:	bd80      	pop	{r7, pc}
 800d816:	46c0      	nop			; (mov r8, r8)
 800d818:	200013b8 	.word	0x200013b8

0800d81c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800d81c:	b580      	push	{r7, lr}
 800d81e:	b082      	sub	sp, #8
 800d820:	af00      	add	r7, sp, #0
 800d822:	6078      	str	r0, [r7, #4]

}
 800d824:	46c0      	nop			; (mov r8, r8)
 800d826:	46bd      	mov	sp, r7
 800d828:	b002      	add	sp, #8
 800d82a:	bd80      	pop	{r7, pc}

0800d82c <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB Resume CallBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800d82c:	b580      	push	{r7, lr}
 800d82e:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800d830:	f7f3 fdac 	bl	800138c <SystemClock_Config>
}
 800d834:	46c0      	nop			; (mov r8, r8)
 800d836:	46bd      	mov	sp, r7
 800d838:	bd80      	pop	{r7, pc}

0800d83a <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800d83a:	b580      	push	{r7, lr}
 800d83c:	b084      	sub	sp, #16
 800d83e:	af00      	add	r7, sp, #0
 800d840:	0002      	movs	r2, r0
 800d842:	1dfb      	adds	r3, r7, #7
 800d844:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d846:	230f      	movs	r3, #15
 800d848:	18fb      	adds	r3, r7, r3
 800d84a:	2200      	movs	r2, #0
 800d84c:	701a      	strb	r2, [r3, #0]

  switch (hal_status)
 800d84e:	1dfb      	adds	r3, r7, #7
 800d850:	781b      	ldrb	r3, [r3, #0]
 800d852:	2b03      	cmp	r3, #3
 800d854:	d017      	beq.n	800d886 <USBD_Get_USB_Status+0x4c>
 800d856:	dc1b      	bgt.n	800d890 <USBD_Get_USB_Status+0x56>
 800d858:	2b02      	cmp	r3, #2
 800d85a:	d00f      	beq.n	800d87c <USBD_Get_USB_Status+0x42>
 800d85c:	dc18      	bgt.n	800d890 <USBD_Get_USB_Status+0x56>
 800d85e:	2b00      	cmp	r3, #0
 800d860:	d002      	beq.n	800d868 <USBD_Get_USB_Status+0x2e>
 800d862:	2b01      	cmp	r3, #1
 800d864:	d005      	beq.n	800d872 <USBD_Get_USB_Status+0x38>
 800d866:	e013      	b.n	800d890 <USBD_Get_USB_Status+0x56>
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800d868:	230f      	movs	r3, #15
 800d86a:	18fb      	adds	r3, r7, r3
 800d86c:	2200      	movs	r2, #0
 800d86e:	701a      	strb	r2, [r3, #0]
    break;
 800d870:	e013      	b.n	800d89a <USBD_Get_USB_Status+0x60>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800d872:	230f      	movs	r3, #15
 800d874:	18fb      	adds	r3, r7, r3
 800d876:	2202      	movs	r2, #2
 800d878:	701a      	strb	r2, [r3, #0]
    break;
 800d87a:	e00e      	b.n	800d89a <USBD_Get_USB_Status+0x60>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800d87c:	230f      	movs	r3, #15
 800d87e:	18fb      	adds	r3, r7, r3
 800d880:	2201      	movs	r2, #1
 800d882:	701a      	strb	r2, [r3, #0]
    break;
 800d884:	e009      	b.n	800d89a <USBD_Get_USB_Status+0x60>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800d886:	230f      	movs	r3, #15
 800d888:	18fb      	adds	r3, r7, r3
 800d88a:	2202      	movs	r2, #2
 800d88c:	701a      	strb	r2, [r3, #0]
    break;
 800d88e:	e004      	b.n	800d89a <USBD_Get_USB_Status+0x60>
    default :
      usb_status = USBD_FAIL;
 800d890:	230f      	movs	r3, #15
 800d892:	18fb      	adds	r3, r7, r3
 800d894:	2202      	movs	r2, #2
 800d896:	701a      	strb	r2, [r3, #0]
    break;
 800d898:	46c0      	nop			; (mov r8, r8)
  }
  return usb_status;
 800d89a:	230f      	movs	r3, #15
 800d89c:	18fb      	adds	r3, r7, r3
 800d89e:	781b      	ldrb	r3, [r3, #0]
}
 800d8a0:	0018      	movs	r0, r3
 800d8a2:	46bd      	mov	sp, r7
 800d8a4:	b004      	add	sp, #16
 800d8a6:	bd80      	pop	{r7, pc}

0800d8a8 <__errno>:
 800d8a8:	4b01      	ldr	r3, [pc, #4]	; (800d8b0 <__errno+0x8>)
 800d8aa:	6818      	ldr	r0, [r3, #0]
 800d8ac:	4770      	bx	lr
 800d8ae:	46c0      	nop			; (mov r8, r8)
 800d8b0:	2000017c 	.word	0x2000017c

0800d8b4 <__libc_init_array>:
 800d8b4:	b570      	push	{r4, r5, r6, lr}
 800d8b6:	2600      	movs	r6, #0
 800d8b8:	4d0c      	ldr	r5, [pc, #48]	; (800d8ec <__libc_init_array+0x38>)
 800d8ba:	4c0d      	ldr	r4, [pc, #52]	; (800d8f0 <__libc_init_array+0x3c>)
 800d8bc:	1b64      	subs	r4, r4, r5
 800d8be:	10a4      	asrs	r4, r4, #2
 800d8c0:	42a6      	cmp	r6, r4
 800d8c2:	d109      	bne.n	800d8d8 <__libc_init_array+0x24>
 800d8c4:	2600      	movs	r6, #0
 800d8c6:	f000 fc9f 	bl	800e208 <_init>
 800d8ca:	4d0a      	ldr	r5, [pc, #40]	; (800d8f4 <__libc_init_array+0x40>)
 800d8cc:	4c0a      	ldr	r4, [pc, #40]	; (800d8f8 <__libc_init_array+0x44>)
 800d8ce:	1b64      	subs	r4, r4, r5
 800d8d0:	10a4      	asrs	r4, r4, #2
 800d8d2:	42a6      	cmp	r6, r4
 800d8d4:	d105      	bne.n	800d8e2 <__libc_init_array+0x2e>
 800d8d6:	bd70      	pop	{r4, r5, r6, pc}
 800d8d8:	00b3      	lsls	r3, r6, #2
 800d8da:	58eb      	ldr	r3, [r5, r3]
 800d8dc:	4798      	blx	r3
 800d8de:	3601      	adds	r6, #1
 800d8e0:	e7ee      	b.n	800d8c0 <__libc_init_array+0xc>
 800d8e2:	00b3      	lsls	r3, r6, #2
 800d8e4:	58eb      	ldr	r3, [r5, r3]
 800d8e6:	4798      	blx	r3
 800d8e8:	3601      	adds	r6, #1
 800d8ea:	e7f2      	b.n	800d8d2 <__libc_init_array+0x1e>
 800d8ec:	0800e598 	.word	0x0800e598
 800d8f0:	0800e598 	.word	0x0800e598
 800d8f4:	0800e598 	.word	0x0800e598
 800d8f8:	0800e59c 	.word	0x0800e59c

0800d8fc <malloc>:
 800d8fc:	b510      	push	{r4, lr}
 800d8fe:	4b03      	ldr	r3, [pc, #12]	; (800d90c <malloc+0x10>)
 800d900:	0001      	movs	r1, r0
 800d902:	6818      	ldr	r0, [r3, #0]
 800d904:	f000 f88c 	bl	800da20 <_malloc_r>
 800d908:	bd10      	pop	{r4, pc}
 800d90a:	46c0      	nop			; (mov r8, r8)
 800d90c:	2000017c 	.word	0x2000017c

0800d910 <free>:
 800d910:	b510      	push	{r4, lr}
 800d912:	4b03      	ldr	r3, [pc, #12]	; (800d920 <free+0x10>)
 800d914:	0001      	movs	r1, r0
 800d916:	6818      	ldr	r0, [r3, #0]
 800d918:	f000 f816 	bl	800d948 <_free_r>
 800d91c:	bd10      	pop	{r4, pc}
 800d91e:	46c0      	nop			; (mov r8, r8)
 800d920:	2000017c 	.word	0x2000017c

0800d924 <memcpy>:
 800d924:	2300      	movs	r3, #0
 800d926:	b510      	push	{r4, lr}
 800d928:	429a      	cmp	r2, r3
 800d92a:	d100      	bne.n	800d92e <memcpy+0xa>
 800d92c:	bd10      	pop	{r4, pc}
 800d92e:	5ccc      	ldrb	r4, [r1, r3]
 800d930:	54c4      	strb	r4, [r0, r3]
 800d932:	3301      	adds	r3, #1
 800d934:	e7f8      	b.n	800d928 <memcpy+0x4>

0800d936 <memset>:
 800d936:	0003      	movs	r3, r0
 800d938:	1882      	adds	r2, r0, r2
 800d93a:	4293      	cmp	r3, r2
 800d93c:	d100      	bne.n	800d940 <memset+0xa>
 800d93e:	4770      	bx	lr
 800d940:	7019      	strb	r1, [r3, #0]
 800d942:	3301      	adds	r3, #1
 800d944:	e7f9      	b.n	800d93a <memset+0x4>
	...

0800d948 <_free_r>:
 800d948:	b570      	push	{r4, r5, r6, lr}
 800d94a:	0005      	movs	r5, r0
 800d94c:	2900      	cmp	r1, #0
 800d94e:	d010      	beq.n	800d972 <_free_r+0x2a>
 800d950:	1f0c      	subs	r4, r1, #4
 800d952:	6823      	ldr	r3, [r4, #0]
 800d954:	2b00      	cmp	r3, #0
 800d956:	da00      	bge.n	800d95a <_free_r+0x12>
 800d958:	18e4      	adds	r4, r4, r3
 800d95a:	0028      	movs	r0, r5
 800d95c:	f000 f908 	bl	800db70 <__malloc_lock>
 800d960:	4a1d      	ldr	r2, [pc, #116]	; (800d9d8 <_free_r+0x90>)
 800d962:	6813      	ldr	r3, [r2, #0]
 800d964:	2b00      	cmp	r3, #0
 800d966:	d105      	bne.n	800d974 <_free_r+0x2c>
 800d968:	6063      	str	r3, [r4, #4]
 800d96a:	6014      	str	r4, [r2, #0]
 800d96c:	0028      	movs	r0, r5
 800d96e:	f000 f907 	bl	800db80 <__malloc_unlock>
 800d972:	bd70      	pop	{r4, r5, r6, pc}
 800d974:	42a3      	cmp	r3, r4
 800d976:	d908      	bls.n	800d98a <_free_r+0x42>
 800d978:	6821      	ldr	r1, [r4, #0]
 800d97a:	1860      	adds	r0, r4, r1
 800d97c:	4283      	cmp	r3, r0
 800d97e:	d1f3      	bne.n	800d968 <_free_r+0x20>
 800d980:	6818      	ldr	r0, [r3, #0]
 800d982:	685b      	ldr	r3, [r3, #4]
 800d984:	1841      	adds	r1, r0, r1
 800d986:	6021      	str	r1, [r4, #0]
 800d988:	e7ee      	b.n	800d968 <_free_r+0x20>
 800d98a:	001a      	movs	r2, r3
 800d98c:	685b      	ldr	r3, [r3, #4]
 800d98e:	2b00      	cmp	r3, #0
 800d990:	d001      	beq.n	800d996 <_free_r+0x4e>
 800d992:	42a3      	cmp	r3, r4
 800d994:	d9f9      	bls.n	800d98a <_free_r+0x42>
 800d996:	6811      	ldr	r1, [r2, #0]
 800d998:	1850      	adds	r0, r2, r1
 800d99a:	42a0      	cmp	r0, r4
 800d99c:	d10b      	bne.n	800d9b6 <_free_r+0x6e>
 800d99e:	6820      	ldr	r0, [r4, #0]
 800d9a0:	1809      	adds	r1, r1, r0
 800d9a2:	1850      	adds	r0, r2, r1
 800d9a4:	6011      	str	r1, [r2, #0]
 800d9a6:	4283      	cmp	r3, r0
 800d9a8:	d1e0      	bne.n	800d96c <_free_r+0x24>
 800d9aa:	6818      	ldr	r0, [r3, #0]
 800d9ac:	685b      	ldr	r3, [r3, #4]
 800d9ae:	1841      	adds	r1, r0, r1
 800d9b0:	6011      	str	r1, [r2, #0]
 800d9b2:	6053      	str	r3, [r2, #4]
 800d9b4:	e7da      	b.n	800d96c <_free_r+0x24>
 800d9b6:	42a0      	cmp	r0, r4
 800d9b8:	d902      	bls.n	800d9c0 <_free_r+0x78>
 800d9ba:	230c      	movs	r3, #12
 800d9bc:	602b      	str	r3, [r5, #0]
 800d9be:	e7d5      	b.n	800d96c <_free_r+0x24>
 800d9c0:	6821      	ldr	r1, [r4, #0]
 800d9c2:	1860      	adds	r0, r4, r1
 800d9c4:	4283      	cmp	r3, r0
 800d9c6:	d103      	bne.n	800d9d0 <_free_r+0x88>
 800d9c8:	6818      	ldr	r0, [r3, #0]
 800d9ca:	685b      	ldr	r3, [r3, #4]
 800d9cc:	1841      	adds	r1, r0, r1
 800d9ce:	6021      	str	r1, [r4, #0]
 800d9d0:	6063      	str	r3, [r4, #4]
 800d9d2:	6054      	str	r4, [r2, #4]
 800d9d4:	e7ca      	b.n	800d96c <_free_r+0x24>
 800d9d6:	46c0      	nop			; (mov r8, r8)
 800d9d8:	200015d8 	.word	0x200015d8

0800d9dc <sbrk_aligned>:
 800d9dc:	b570      	push	{r4, r5, r6, lr}
 800d9de:	4e0f      	ldr	r6, [pc, #60]	; (800da1c <sbrk_aligned+0x40>)
 800d9e0:	000d      	movs	r5, r1
 800d9e2:	6831      	ldr	r1, [r6, #0]
 800d9e4:	0004      	movs	r4, r0
 800d9e6:	2900      	cmp	r1, #0
 800d9e8:	d102      	bne.n	800d9f0 <sbrk_aligned+0x14>
 800d9ea:	f000 f88f 	bl	800db0c <_sbrk_r>
 800d9ee:	6030      	str	r0, [r6, #0]
 800d9f0:	0029      	movs	r1, r5
 800d9f2:	0020      	movs	r0, r4
 800d9f4:	f000 f88a 	bl	800db0c <_sbrk_r>
 800d9f8:	1c43      	adds	r3, r0, #1
 800d9fa:	d00a      	beq.n	800da12 <sbrk_aligned+0x36>
 800d9fc:	2303      	movs	r3, #3
 800d9fe:	1cc5      	adds	r5, r0, #3
 800da00:	439d      	bics	r5, r3
 800da02:	42a8      	cmp	r0, r5
 800da04:	d007      	beq.n	800da16 <sbrk_aligned+0x3a>
 800da06:	1a29      	subs	r1, r5, r0
 800da08:	0020      	movs	r0, r4
 800da0a:	f000 f87f 	bl	800db0c <_sbrk_r>
 800da0e:	1c43      	adds	r3, r0, #1
 800da10:	d101      	bne.n	800da16 <sbrk_aligned+0x3a>
 800da12:	2501      	movs	r5, #1
 800da14:	426d      	negs	r5, r5
 800da16:	0028      	movs	r0, r5
 800da18:	bd70      	pop	{r4, r5, r6, pc}
 800da1a:	46c0      	nop			; (mov r8, r8)
 800da1c:	200015dc 	.word	0x200015dc

0800da20 <_malloc_r>:
 800da20:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800da22:	2203      	movs	r2, #3
 800da24:	1ccb      	adds	r3, r1, #3
 800da26:	4393      	bics	r3, r2
 800da28:	3308      	adds	r3, #8
 800da2a:	0006      	movs	r6, r0
 800da2c:	001f      	movs	r7, r3
 800da2e:	2b0c      	cmp	r3, #12
 800da30:	d232      	bcs.n	800da98 <_malloc_r+0x78>
 800da32:	270c      	movs	r7, #12
 800da34:	42b9      	cmp	r1, r7
 800da36:	d831      	bhi.n	800da9c <_malloc_r+0x7c>
 800da38:	0030      	movs	r0, r6
 800da3a:	f000 f899 	bl	800db70 <__malloc_lock>
 800da3e:	4d32      	ldr	r5, [pc, #200]	; (800db08 <_malloc_r+0xe8>)
 800da40:	682b      	ldr	r3, [r5, #0]
 800da42:	001c      	movs	r4, r3
 800da44:	2c00      	cmp	r4, #0
 800da46:	d12e      	bne.n	800daa6 <_malloc_r+0x86>
 800da48:	0039      	movs	r1, r7
 800da4a:	0030      	movs	r0, r6
 800da4c:	f7ff ffc6 	bl	800d9dc <sbrk_aligned>
 800da50:	0004      	movs	r4, r0
 800da52:	1c43      	adds	r3, r0, #1
 800da54:	d11e      	bne.n	800da94 <_malloc_r+0x74>
 800da56:	682c      	ldr	r4, [r5, #0]
 800da58:	0025      	movs	r5, r4
 800da5a:	2d00      	cmp	r5, #0
 800da5c:	d14a      	bne.n	800daf4 <_malloc_r+0xd4>
 800da5e:	6823      	ldr	r3, [r4, #0]
 800da60:	0029      	movs	r1, r5
 800da62:	18e3      	adds	r3, r4, r3
 800da64:	0030      	movs	r0, r6
 800da66:	9301      	str	r3, [sp, #4]
 800da68:	f000 f850 	bl	800db0c <_sbrk_r>
 800da6c:	9b01      	ldr	r3, [sp, #4]
 800da6e:	4283      	cmp	r3, r0
 800da70:	d143      	bne.n	800dafa <_malloc_r+0xda>
 800da72:	6823      	ldr	r3, [r4, #0]
 800da74:	3703      	adds	r7, #3
 800da76:	1aff      	subs	r7, r7, r3
 800da78:	2303      	movs	r3, #3
 800da7a:	439f      	bics	r7, r3
 800da7c:	3708      	adds	r7, #8
 800da7e:	2f0c      	cmp	r7, #12
 800da80:	d200      	bcs.n	800da84 <_malloc_r+0x64>
 800da82:	270c      	movs	r7, #12
 800da84:	0039      	movs	r1, r7
 800da86:	0030      	movs	r0, r6
 800da88:	f7ff ffa8 	bl	800d9dc <sbrk_aligned>
 800da8c:	1c43      	adds	r3, r0, #1
 800da8e:	d034      	beq.n	800dafa <_malloc_r+0xda>
 800da90:	6823      	ldr	r3, [r4, #0]
 800da92:	19df      	adds	r7, r3, r7
 800da94:	6027      	str	r7, [r4, #0]
 800da96:	e013      	b.n	800dac0 <_malloc_r+0xa0>
 800da98:	2b00      	cmp	r3, #0
 800da9a:	dacb      	bge.n	800da34 <_malloc_r+0x14>
 800da9c:	230c      	movs	r3, #12
 800da9e:	2500      	movs	r5, #0
 800daa0:	6033      	str	r3, [r6, #0]
 800daa2:	0028      	movs	r0, r5
 800daa4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800daa6:	6822      	ldr	r2, [r4, #0]
 800daa8:	1bd1      	subs	r1, r2, r7
 800daaa:	d420      	bmi.n	800daee <_malloc_r+0xce>
 800daac:	290b      	cmp	r1, #11
 800daae:	d917      	bls.n	800dae0 <_malloc_r+0xc0>
 800dab0:	19e2      	adds	r2, r4, r7
 800dab2:	6027      	str	r7, [r4, #0]
 800dab4:	42a3      	cmp	r3, r4
 800dab6:	d111      	bne.n	800dadc <_malloc_r+0xbc>
 800dab8:	602a      	str	r2, [r5, #0]
 800daba:	6863      	ldr	r3, [r4, #4]
 800dabc:	6011      	str	r1, [r2, #0]
 800dabe:	6053      	str	r3, [r2, #4]
 800dac0:	0030      	movs	r0, r6
 800dac2:	0025      	movs	r5, r4
 800dac4:	f000 f85c 	bl	800db80 <__malloc_unlock>
 800dac8:	2207      	movs	r2, #7
 800daca:	350b      	adds	r5, #11
 800dacc:	1d23      	adds	r3, r4, #4
 800dace:	4395      	bics	r5, r2
 800dad0:	1aea      	subs	r2, r5, r3
 800dad2:	429d      	cmp	r5, r3
 800dad4:	d0e5      	beq.n	800daa2 <_malloc_r+0x82>
 800dad6:	1b5b      	subs	r3, r3, r5
 800dad8:	50a3      	str	r3, [r4, r2]
 800dada:	e7e2      	b.n	800daa2 <_malloc_r+0x82>
 800dadc:	605a      	str	r2, [r3, #4]
 800dade:	e7ec      	b.n	800daba <_malloc_r+0x9a>
 800dae0:	6862      	ldr	r2, [r4, #4]
 800dae2:	42a3      	cmp	r3, r4
 800dae4:	d101      	bne.n	800daea <_malloc_r+0xca>
 800dae6:	602a      	str	r2, [r5, #0]
 800dae8:	e7ea      	b.n	800dac0 <_malloc_r+0xa0>
 800daea:	605a      	str	r2, [r3, #4]
 800daec:	e7e8      	b.n	800dac0 <_malloc_r+0xa0>
 800daee:	0023      	movs	r3, r4
 800daf0:	6864      	ldr	r4, [r4, #4]
 800daf2:	e7a7      	b.n	800da44 <_malloc_r+0x24>
 800daf4:	002c      	movs	r4, r5
 800daf6:	686d      	ldr	r5, [r5, #4]
 800daf8:	e7af      	b.n	800da5a <_malloc_r+0x3a>
 800dafa:	230c      	movs	r3, #12
 800dafc:	0030      	movs	r0, r6
 800dafe:	6033      	str	r3, [r6, #0]
 800db00:	f000 f83e 	bl	800db80 <__malloc_unlock>
 800db04:	e7cd      	b.n	800daa2 <_malloc_r+0x82>
 800db06:	46c0      	nop			; (mov r8, r8)
 800db08:	200015d8 	.word	0x200015d8

0800db0c <_sbrk_r>:
 800db0c:	2300      	movs	r3, #0
 800db0e:	b570      	push	{r4, r5, r6, lr}
 800db10:	4d06      	ldr	r5, [pc, #24]	; (800db2c <_sbrk_r+0x20>)
 800db12:	0004      	movs	r4, r0
 800db14:	0008      	movs	r0, r1
 800db16:	602b      	str	r3, [r5, #0]
 800db18:	f7f5 f8cc 	bl	8002cb4 <_sbrk>
 800db1c:	1c43      	adds	r3, r0, #1
 800db1e:	d103      	bne.n	800db28 <_sbrk_r+0x1c>
 800db20:	682b      	ldr	r3, [r5, #0]
 800db22:	2b00      	cmp	r3, #0
 800db24:	d000      	beq.n	800db28 <_sbrk_r+0x1c>
 800db26:	6023      	str	r3, [r4, #0]
 800db28:	bd70      	pop	{r4, r5, r6, pc}
 800db2a:	46c0      	nop			; (mov r8, r8)
 800db2c:	200015e0 	.word	0x200015e0

0800db30 <siprintf>:
 800db30:	b40e      	push	{r1, r2, r3}
 800db32:	b500      	push	{lr}
 800db34:	490b      	ldr	r1, [pc, #44]	; (800db64 <siprintf+0x34>)
 800db36:	b09c      	sub	sp, #112	; 0x70
 800db38:	ab1d      	add	r3, sp, #116	; 0x74
 800db3a:	9002      	str	r0, [sp, #8]
 800db3c:	9006      	str	r0, [sp, #24]
 800db3e:	9107      	str	r1, [sp, #28]
 800db40:	9104      	str	r1, [sp, #16]
 800db42:	4809      	ldr	r0, [pc, #36]	; (800db68 <siprintf+0x38>)
 800db44:	4909      	ldr	r1, [pc, #36]	; (800db6c <siprintf+0x3c>)
 800db46:	cb04      	ldmia	r3!, {r2}
 800db48:	9105      	str	r1, [sp, #20]
 800db4a:	6800      	ldr	r0, [r0, #0]
 800db4c:	a902      	add	r1, sp, #8
 800db4e:	9301      	str	r3, [sp, #4]
 800db50:	f000 f880 	bl	800dc54 <_svfiprintf_r>
 800db54:	2300      	movs	r3, #0
 800db56:	9a02      	ldr	r2, [sp, #8]
 800db58:	7013      	strb	r3, [r2, #0]
 800db5a:	b01c      	add	sp, #112	; 0x70
 800db5c:	bc08      	pop	{r3}
 800db5e:	b003      	add	sp, #12
 800db60:	4718      	bx	r3
 800db62:	46c0      	nop			; (mov r8, r8)
 800db64:	7fffffff 	.word	0x7fffffff
 800db68:	2000017c 	.word	0x2000017c
 800db6c:	ffff0208 	.word	0xffff0208

0800db70 <__malloc_lock>:
 800db70:	b510      	push	{r4, lr}
 800db72:	4802      	ldr	r0, [pc, #8]	; (800db7c <__malloc_lock+0xc>)
 800db74:	f000 faf0 	bl	800e158 <__retarget_lock_acquire_recursive>
 800db78:	bd10      	pop	{r4, pc}
 800db7a:	46c0      	nop			; (mov r8, r8)
 800db7c:	200015e4 	.word	0x200015e4

0800db80 <__malloc_unlock>:
 800db80:	b510      	push	{r4, lr}
 800db82:	4802      	ldr	r0, [pc, #8]	; (800db8c <__malloc_unlock+0xc>)
 800db84:	f000 fae9 	bl	800e15a <__retarget_lock_release_recursive>
 800db88:	bd10      	pop	{r4, pc}
 800db8a:	46c0      	nop			; (mov r8, r8)
 800db8c:	200015e4 	.word	0x200015e4

0800db90 <__ssputs_r>:
 800db90:	b5f0      	push	{r4, r5, r6, r7, lr}
 800db92:	688e      	ldr	r6, [r1, #8]
 800db94:	b085      	sub	sp, #20
 800db96:	0007      	movs	r7, r0
 800db98:	000c      	movs	r4, r1
 800db9a:	9203      	str	r2, [sp, #12]
 800db9c:	9301      	str	r3, [sp, #4]
 800db9e:	429e      	cmp	r6, r3
 800dba0:	d83c      	bhi.n	800dc1c <__ssputs_r+0x8c>
 800dba2:	2390      	movs	r3, #144	; 0x90
 800dba4:	898a      	ldrh	r2, [r1, #12]
 800dba6:	00db      	lsls	r3, r3, #3
 800dba8:	421a      	tst	r2, r3
 800dbaa:	d034      	beq.n	800dc16 <__ssputs_r+0x86>
 800dbac:	6909      	ldr	r1, [r1, #16]
 800dbae:	6823      	ldr	r3, [r4, #0]
 800dbb0:	6960      	ldr	r0, [r4, #20]
 800dbb2:	1a5b      	subs	r3, r3, r1
 800dbb4:	9302      	str	r3, [sp, #8]
 800dbb6:	2303      	movs	r3, #3
 800dbb8:	4343      	muls	r3, r0
 800dbba:	0fdd      	lsrs	r5, r3, #31
 800dbbc:	18ed      	adds	r5, r5, r3
 800dbbe:	9b01      	ldr	r3, [sp, #4]
 800dbc0:	9802      	ldr	r0, [sp, #8]
 800dbc2:	3301      	adds	r3, #1
 800dbc4:	181b      	adds	r3, r3, r0
 800dbc6:	106d      	asrs	r5, r5, #1
 800dbc8:	42ab      	cmp	r3, r5
 800dbca:	d900      	bls.n	800dbce <__ssputs_r+0x3e>
 800dbcc:	001d      	movs	r5, r3
 800dbce:	0553      	lsls	r3, r2, #21
 800dbd0:	d532      	bpl.n	800dc38 <__ssputs_r+0xa8>
 800dbd2:	0029      	movs	r1, r5
 800dbd4:	0038      	movs	r0, r7
 800dbd6:	f7ff ff23 	bl	800da20 <_malloc_r>
 800dbda:	1e06      	subs	r6, r0, #0
 800dbdc:	d109      	bne.n	800dbf2 <__ssputs_r+0x62>
 800dbde:	230c      	movs	r3, #12
 800dbe0:	603b      	str	r3, [r7, #0]
 800dbe2:	2340      	movs	r3, #64	; 0x40
 800dbe4:	2001      	movs	r0, #1
 800dbe6:	89a2      	ldrh	r2, [r4, #12]
 800dbe8:	4240      	negs	r0, r0
 800dbea:	4313      	orrs	r3, r2
 800dbec:	81a3      	strh	r3, [r4, #12]
 800dbee:	b005      	add	sp, #20
 800dbf0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800dbf2:	9a02      	ldr	r2, [sp, #8]
 800dbf4:	6921      	ldr	r1, [r4, #16]
 800dbf6:	f7ff fe95 	bl	800d924 <memcpy>
 800dbfa:	89a3      	ldrh	r3, [r4, #12]
 800dbfc:	4a14      	ldr	r2, [pc, #80]	; (800dc50 <__ssputs_r+0xc0>)
 800dbfe:	401a      	ands	r2, r3
 800dc00:	2380      	movs	r3, #128	; 0x80
 800dc02:	4313      	orrs	r3, r2
 800dc04:	81a3      	strh	r3, [r4, #12]
 800dc06:	9b02      	ldr	r3, [sp, #8]
 800dc08:	6126      	str	r6, [r4, #16]
 800dc0a:	18f6      	adds	r6, r6, r3
 800dc0c:	6026      	str	r6, [r4, #0]
 800dc0e:	6165      	str	r5, [r4, #20]
 800dc10:	9e01      	ldr	r6, [sp, #4]
 800dc12:	1aed      	subs	r5, r5, r3
 800dc14:	60a5      	str	r5, [r4, #8]
 800dc16:	9b01      	ldr	r3, [sp, #4]
 800dc18:	429e      	cmp	r6, r3
 800dc1a:	d900      	bls.n	800dc1e <__ssputs_r+0x8e>
 800dc1c:	9e01      	ldr	r6, [sp, #4]
 800dc1e:	0032      	movs	r2, r6
 800dc20:	9903      	ldr	r1, [sp, #12]
 800dc22:	6820      	ldr	r0, [r4, #0]
 800dc24:	f000 faa5 	bl	800e172 <memmove>
 800dc28:	68a3      	ldr	r3, [r4, #8]
 800dc2a:	2000      	movs	r0, #0
 800dc2c:	1b9b      	subs	r3, r3, r6
 800dc2e:	60a3      	str	r3, [r4, #8]
 800dc30:	6823      	ldr	r3, [r4, #0]
 800dc32:	199e      	adds	r6, r3, r6
 800dc34:	6026      	str	r6, [r4, #0]
 800dc36:	e7da      	b.n	800dbee <__ssputs_r+0x5e>
 800dc38:	002a      	movs	r2, r5
 800dc3a:	0038      	movs	r0, r7
 800dc3c:	f000 faac 	bl	800e198 <_realloc_r>
 800dc40:	1e06      	subs	r6, r0, #0
 800dc42:	d1e0      	bne.n	800dc06 <__ssputs_r+0x76>
 800dc44:	0038      	movs	r0, r7
 800dc46:	6921      	ldr	r1, [r4, #16]
 800dc48:	f7ff fe7e 	bl	800d948 <_free_r>
 800dc4c:	e7c7      	b.n	800dbde <__ssputs_r+0x4e>
 800dc4e:	46c0      	nop			; (mov r8, r8)
 800dc50:	fffffb7f 	.word	0xfffffb7f

0800dc54 <_svfiprintf_r>:
 800dc54:	b5f0      	push	{r4, r5, r6, r7, lr}
 800dc56:	b0a1      	sub	sp, #132	; 0x84
 800dc58:	9003      	str	r0, [sp, #12]
 800dc5a:	001d      	movs	r5, r3
 800dc5c:	898b      	ldrh	r3, [r1, #12]
 800dc5e:	000f      	movs	r7, r1
 800dc60:	0016      	movs	r6, r2
 800dc62:	061b      	lsls	r3, r3, #24
 800dc64:	d511      	bpl.n	800dc8a <_svfiprintf_r+0x36>
 800dc66:	690b      	ldr	r3, [r1, #16]
 800dc68:	2b00      	cmp	r3, #0
 800dc6a:	d10e      	bne.n	800dc8a <_svfiprintf_r+0x36>
 800dc6c:	2140      	movs	r1, #64	; 0x40
 800dc6e:	f7ff fed7 	bl	800da20 <_malloc_r>
 800dc72:	6038      	str	r0, [r7, #0]
 800dc74:	6138      	str	r0, [r7, #16]
 800dc76:	2800      	cmp	r0, #0
 800dc78:	d105      	bne.n	800dc86 <_svfiprintf_r+0x32>
 800dc7a:	230c      	movs	r3, #12
 800dc7c:	9a03      	ldr	r2, [sp, #12]
 800dc7e:	3801      	subs	r0, #1
 800dc80:	6013      	str	r3, [r2, #0]
 800dc82:	b021      	add	sp, #132	; 0x84
 800dc84:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800dc86:	2340      	movs	r3, #64	; 0x40
 800dc88:	617b      	str	r3, [r7, #20]
 800dc8a:	2300      	movs	r3, #0
 800dc8c:	ac08      	add	r4, sp, #32
 800dc8e:	6163      	str	r3, [r4, #20]
 800dc90:	3320      	adds	r3, #32
 800dc92:	7663      	strb	r3, [r4, #25]
 800dc94:	3310      	adds	r3, #16
 800dc96:	76a3      	strb	r3, [r4, #26]
 800dc98:	9507      	str	r5, [sp, #28]
 800dc9a:	0035      	movs	r5, r6
 800dc9c:	782b      	ldrb	r3, [r5, #0]
 800dc9e:	2b00      	cmp	r3, #0
 800dca0:	d001      	beq.n	800dca6 <_svfiprintf_r+0x52>
 800dca2:	2b25      	cmp	r3, #37	; 0x25
 800dca4:	d147      	bne.n	800dd36 <_svfiprintf_r+0xe2>
 800dca6:	1bab      	subs	r3, r5, r6
 800dca8:	9305      	str	r3, [sp, #20]
 800dcaa:	42b5      	cmp	r5, r6
 800dcac:	d00c      	beq.n	800dcc8 <_svfiprintf_r+0x74>
 800dcae:	0032      	movs	r2, r6
 800dcb0:	0039      	movs	r1, r7
 800dcb2:	9803      	ldr	r0, [sp, #12]
 800dcb4:	f7ff ff6c 	bl	800db90 <__ssputs_r>
 800dcb8:	1c43      	adds	r3, r0, #1
 800dcba:	d100      	bne.n	800dcbe <_svfiprintf_r+0x6a>
 800dcbc:	e0ae      	b.n	800de1c <_svfiprintf_r+0x1c8>
 800dcbe:	6962      	ldr	r2, [r4, #20]
 800dcc0:	9b05      	ldr	r3, [sp, #20]
 800dcc2:	4694      	mov	ip, r2
 800dcc4:	4463      	add	r3, ip
 800dcc6:	6163      	str	r3, [r4, #20]
 800dcc8:	782b      	ldrb	r3, [r5, #0]
 800dcca:	2b00      	cmp	r3, #0
 800dccc:	d100      	bne.n	800dcd0 <_svfiprintf_r+0x7c>
 800dcce:	e0a5      	b.n	800de1c <_svfiprintf_r+0x1c8>
 800dcd0:	2201      	movs	r2, #1
 800dcd2:	2300      	movs	r3, #0
 800dcd4:	4252      	negs	r2, r2
 800dcd6:	6062      	str	r2, [r4, #4]
 800dcd8:	a904      	add	r1, sp, #16
 800dcda:	3254      	adds	r2, #84	; 0x54
 800dcdc:	1852      	adds	r2, r2, r1
 800dcde:	1c6e      	adds	r6, r5, #1
 800dce0:	6023      	str	r3, [r4, #0]
 800dce2:	60e3      	str	r3, [r4, #12]
 800dce4:	60a3      	str	r3, [r4, #8]
 800dce6:	7013      	strb	r3, [r2, #0]
 800dce8:	65a3      	str	r3, [r4, #88]	; 0x58
 800dcea:	2205      	movs	r2, #5
 800dcec:	7831      	ldrb	r1, [r6, #0]
 800dcee:	4854      	ldr	r0, [pc, #336]	; (800de40 <_svfiprintf_r+0x1ec>)
 800dcf0:	f000 fa34 	bl	800e15c <memchr>
 800dcf4:	1c75      	adds	r5, r6, #1
 800dcf6:	2800      	cmp	r0, #0
 800dcf8:	d11f      	bne.n	800dd3a <_svfiprintf_r+0xe6>
 800dcfa:	6822      	ldr	r2, [r4, #0]
 800dcfc:	06d3      	lsls	r3, r2, #27
 800dcfe:	d504      	bpl.n	800dd0a <_svfiprintf_r+0xb6>
 800dd00:	2353      	movs	r3, #83	; 0x53
 800dd02:	a904      	add	r1, sp, #16
 800dd04:	185b      	adds	r3, r3, r1
 800dd06:	2120      	movs	r1, #32
 800dd08:	7019      	strb	r1, [r3, #0]
 800dd0a:	0713      	lsls	r3, r2, #28
 800dd0c:	d504      	bpl.n	800dd18 <_svfiprintf_r+0xc4>
 800dd0e:	2353      	movs	r3, #83	; 0x53
 800dd10:	a904      	add	r1, sp, #16
 800dd12:	185b      	adds	r3, r3, r1
 800dd14:	212b      	movs	r1, #43	; 0x2b
 800dd16:	7019      	strb	r1, [r3, #0]
 800dd18:	7833      	ldrb	r3, [r6, #0]
 800dd1a:	2b2a      	cmp	r3, #42	; 0x2a
 800dd1c:	d016      	beq.n	800dd4c <_svfiprintf_r+0xf8>
 800dd1e:	0035      	movs	r5, r6
 800dd20:	2100      	movs	r1, #0
 800dd22:	200a      	movs	r0, #10
 800dd24:	68e3      	ldr	r3, [r4, #12]
 800dd26:	782a      	ldrb	r2, [r5, #0]
 800dd28:	1c6e      	adds	r6, r5, #1
 800dd2a:	3a30      	subs	r2, #48	; 0x30
 800dd2c:	2a09      	cmp	r2, #9
 800dd2e:	d94e      	bls.n	800ddce <_svfiprintf_r+0x17a>
 800dd30:	2900      	cmp	r1, #0
 800dd32:	d111      	bne.n	800dd58 <_svfiprintf_r+0x104>
 800dd34:	e017      	b.n	800dd66 <_svfiprintf_r+0x112>
 800dd36:	3501      	adds	r5, #1
 800dd38:	e7b0      	b.n	800dc9c <_svfiprintf_r+0x48>
 800dd3a:	4b41      	ldr	r3, [pc, #260]	; (800de40 <_svfiprintf_r+0x1ec>)
 800dd3c:	6822      	ldr	r2, [r4, #0]
 800dd3e:	1ac0      	subs	r0, r0, r3
 800dd40:	2301      	movs	r3, #1
 800dd42:	4083      	lsls	r3, r0
 800dd44:	4313      	orrs	r3, r2
 800dd46:	002e      	movs	r6, r5
 800dd48:	6023      	str	r3, [r4, #0]
 800dd4a:	e7ce      	b.n	800dcea <_svfiprintf_r+0x96>
 800dd4c:	9b07      	ldr	r3, [sp, #28]
 800dd4e:	1d19      	adds	r1, r3, #4
 800dd50:	681b      	ldr	r3, [r3, #0]
 800dd52:	9107      	str	r1, [sp, #28]
 800dd54:	2b00      	cmp	r3, #0
 800dd56:	db01      	blt.n	800dd5c <_svfiprintf_r+0x108>
 800dd58:	930b      	str	r3, [sp, #44]	; 0x2c
 800dd5a:	e004      	b.n	800dd66 <_svfiprintf_r+0x112>
 800dd5c:	425b      	negs	r3, r3
 800dd5e:	60e3      	str	r3, [r4, #12]
 800dd60:	2302      	movs	r3, #2
 800dd62:	4313      	orrs	r3, r2
 800dd64:	6023      	str	r3, [r4, #0]
 800dd66:	782b      	ldrb	r3, [r5, #0]
 800dd68:	2b2e      	cmp	r3, #46	; 0x2e
 800dd6a:	d10a      	bne.n	800dd82 <_svfiprintf_r+0x12e>
 800dd6c:	786b      	ldrb	r3, [r5, #1]
 800dd6e:	2b2a      	cmp	r3, #42	; 0x2a
 800dd70:	d135      	bne.n	800ddde <_svfiprintf_r+0x18a>
 800dd72:	9b07      	ldr	r3, [sp, #28]
 800dd74:	3502      	adds	r5, #2
 800dd76:	1d1a      	adds	r2, r3, #4
 800dd78:	681b      	ldr	r3, [r3, #0]
 800dd7a:	9207      	str	r2, [sp, #28]
 800dd7c:	2b00      	cmp	r3, #0
 800dd7e:	db2b      	blt.n	800ddd8 <_svfiprintf_r+0x184>
 800dd80:	9309      	str	r3, [sp, #36]	; 0x24
 800dd82:	4e30      	ldr	r6, [pc, #192]	; (800de44 <_svfiprintf_r+0x1f0>)
 800dd84:	2203      	movs	r2, #3
 800dd86:	0030      	movs	r0, r6
 800dd88:	7829      	ldrb	r1, [r5, #0]
 800dd8a:	f000 f9e7 	bl	800e15c <memchr>
 800dd8e:	2800      	cmp	r0, #0
 800dd90:	d006      	beq.n	800dda0 <_svfiprintf_r+0x14c>
 800dd92:	2340      	movs	r3, #64	; 0x40
 800dd94:	1b80      	subs	r0, r0, r6
 800dd96:	4083      	lsls	r3, r0
 800dd98:	6822      	ldr	r2, [r4, #0]
 800dd9a:	3501      	adds	r5, #1
 800dd9c:	4313      	orrs	r3, r2
 800dd9e:	6023      	str	r3, [r4, #0]
 800dda0:	7829      	ldrb	r1, [r5, #0]
 800dda2:	2206      	movs	r2, #6
 800dda4:	4828      	ldr	r0, [pc, #160]	; (800de48 <_svfiprintf_r+0x1f4>)
 800dda6:	1c6e      	adds	r6, r5, #1
 800dda8:	7621      	strb	r1, [r4, #24]
 800ddaa:	f000 f9d7 	bl	800e15c <memchr>
 800ddae:	2800      	cmp	r0, #0
 800ddb0:	d03c      	beq.n	800de2c <_svfiprintf_r+0x1d8>
 800ddb2:	4b26      	ldr	r3, [pc, #152]	; (800de4c <_svfiprintf_r+0x1f8>)
 800ddb4:	2b00      	cmp	r3, #0
 800ddb6:	d125      	bne.n	800de04 <_svfiprintf_r+0x1b0>
 800ddb8:	2207      	movs	r2, #7
 800ddba:	9b07      	ldr	r3, [sp, #28]
 800ddbc:	3307      	adds	r3, #7
 800ddbe:	4393      	bics	r3, r2
 800ddc0:	3308      	adds	r3, #8
 800ddc2:	9307      	str	r3, [sp, #28]
 800ddc4:	6963      	ldr	r3, [r4, #20]
 800ddc6:	9a04      	ldr	r2, [sp, #16]
 800ddc8:	189b      	adds	r3, r3, r2
 800ddca:	6163      	str	r3, [r4, #20]
 800ddcc:	e765      	b.n	800dc9a <_svfiprintf_r+0x46>
 800ddce:	4343      	muls	r3, r0
 800ddd0:	0035      	movs	r5, r6
 800ddd2:	2101      	movs	r1, #1
 800ddd4:	189b      	adds	r3, r3, r2
 800ddd6:	e7a6      	b.n	800dd26 <_svfiprintf_r+0xd2>
 800ddd8:	2301      	movs	r3, #1
 800ddda:	425b      	negs	r3, r3
 800dddc:	e7d0      	b.n	800dd80 <_svfiprintf_r+0x12c>
 800ddde:	2300      	movs	r3, #0
 800dde0:	200a      	movs	r0, #10
 800dde2:	001a      	movs	r2, r3
 800dde4:	3501      	adds	r5, #1
 800dde6:	6063      	str	r3, [r4, #4]
 800dde8:	7829      	ldrb	r1, [r5, #0]
 800ddea:	1c6e      	adds	r6, r5, #1
 800ddec:	3930      	subs	r1, #48	; 0x30
 800ddee:	2909      	cmp	r1, #9
 800ddf0:	d903      	bls.n	800ddfa <_svfiprintf_r+0x1a6>
 800ddf2:	2b00      	cmp	r3, #0
 800ddf4:	d0c5      	beq.n	800dd82 <_svfiprintf_r+0x12e>
 800ddf6:	9209      	str	r2, [sp, #36]	; 0x24
 800ddf8:	e7c3      	b.n	800dd82 <_svfiprintf_r+0x12e>
 800ddfa:	4342      	muls	r2, r0
 800ddfc:	0035      	movs	r5, r6
 800ddfe:	2301      	movs	r3, #1
 800de00:	1852      	adds	r2, r2, r1
 800de02:	e7f1      	b.n	800dde8 <_svfiprintf_r+0x194>
 800de04:	ab07      	add	r3, sp, #28
 800de06:	9300      	str	r3, [sp, #0]
 800de08:	003a      	movs	r2, r7
 800de0a:	0021      	movs	r1, r4
 800de0c:	4b10      	ldr	r3, [pc, #64]	; (800de50 <_svfiprintf_r+0x1fc>)
 800de0e:	9803      	ldr	r0, [sp, #12]
 800de10:	e000      	b.n	800de14 <_svfiprintf_r+0x1c0>
 800de12:	bf00      	nop
 800de14:	9004      	str	r0, [sp, #16]
 800de16:	9b04      	ldr	r3, [sp, #16]
 800de18:	3301      	adds	r3, #1
 800de1a:	d1d3      	bne.n	800ddc4 <_svfiprintf_r+0x170>
 800de1c:	89bb      	ldrh	r3, [r7, #12]
 800de1e:	980d      	ldr	r0, [sp, #52]	; 0x34
 800de20:	065b      	lsls	r3, r3, #25
 800de22:	d400      	bmi.n	800de26 <_svfiprintf_r+0x1d2>
 800de24:	e72d      	b.n	800dc82 <_svfiprintf_r+0x2e>
 800de26:	2001      	movs	r0, #1
 800de28:	4240      	negs	r0, r0
 800de2a:	e72a      	b.n	800dc82 <_svfiprintf_r+0x2e>
 800de2c:	ab07      	add	r3, sp, #28
 800de2e:	9300      	str	r3, [sp, #0]
 800de30:	003a      	movs	r2, r7
 800de32:	0021      	movs	r1, r4
 800de34:	4b06      	ldr	r3, [pc, #24]	; (800de50 <_svfiprintf_r+0x1fc>)
 800de36:	9803      	ldr	r0, [sp, #12]
 800de38:	f000 f87c 	bl	800df34 <_printf_i>
 800de3c:	e7ea      	b.n	800de14 <_svfiprintf_r+0x1c0>
 800de3e:	46c0      	nop			; (mov r8, r8)
 800de40:	0800e564 	.word	0x0800e564
 800de44:	0800e56a 	.word	0x0800e56a
 800de48:	0800e56e 	.word	0x0800e56e
 800de4c:	00000000 	.word	0x00000000
 800de50:	0800db91 	.word	0x0800db91

0800de54 <_printf_common>:
 800de54:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800de56:	0015      	movs	r5, r2
 800de58:	9301      	str	r3, [sp, #4]
 800de5a:	688a      	ldr	r2, [r1, #8]
 800de5c:	690b      	ldr	r3, [r1, #16]
 800de5e:	000c      	movs	r4, r1
 800de60:	9000      	str	r0, [sp, #0]
 800de62:	4293      	cmp	r3, r2
 800de64:	da00      	bge.n	800de68 <_printf_common+0x14>
 800de66:	0013      	movs	r3, r2
 800de68:	0022      	movs	r2, r4
 800de6a:	602b      	str	r3, [r5, #0]
 800de6c:	3243      	adds	r2, #67	; 0x43
 800de6e:	7812      	ldrb	r2, [r2, #0]
 800de70:	2a00      	cmp	r2, #0
 800de72:	d001      	beq.n	800de78 <_printf_common+0x24>
 800de74:	3301      	adds	r3, #1
 800de76:	602b      	str	r3, [r5, #0]
 800de78:	6823      	ldr	r3, [r4, #0]
 800de7a:	069b      	lsls	r3, r3, #26
 800de7c:	d502      	bpl.n	800de84 <_printf_common+0x30>
 800de7e:	682b      	ldr	r3, [r5, #0]
 800de80:	3302      	adds	r3, #2
 800de82:	602b      	str	r3, [r5, #0]
 800de84:	6822      	ldr	r2, [r4, #0]
 800de86:	2306      	movs	r3, #6
 800de88:	0017      	movs	r7, r2
 800de8a:	401f      	ands	r7, r3
 800de8c:	421a      	tst	r2, r3
 800de8e:	d027      	beq.n	800dee0 <_printf_common+0x8c>
 800de90:	0023      	movs	r3, r4
 800de92:	3343      	adds	r3, #67	; 0x43
 800de94:	781b      	ldrb	r3, [r3, #0]
 800de96:	1e5a      	subs	r2, r3, #1
 800de98:	4193      	sbcs	r3, r2
 800de9a:	6822      	ldr	r2, [r4, #0]
 800de9c:	0692      	lsls	r2, r2, #26
 800de9e:	d430      	bmi.n	800df02 <_printf_common+0xae>
 800dea0:	0022      	movs	r2, r4
 800dea2:	9901      	ldr	r1, [sp, #4]
 800dea4:	9800      	ldr	r0, [sp, #0]
 800dea6:	9e08      	ldr	r6, [sp, #32]
 800dea8:	3243      	adds	r2, #67	; 0x43
 800deaa:	47b0      	blx	r6
 800deac:	1c43      	adds	r3, r0, #1
 800deae:	d025      	beq.n	800defc <_printf_common+0xa8>
 800deb0:	2306      	movs	r3, #6
 800deb2:	6820      	ldr	r0, [r4, #0]
 800deb4:	682a      	ldr	r2, [r5, #0]
 800deb6:	68e1      	ldr	r1, [r4, #12]
 800deb8:	2500      	movs	r5, #0
 800deba:	4003      	ands	r3, r0
 800debc:	2b04      	cmp	r3, #4
 800debe:	d103      	bne.n	800dec8 <_printf_common+0x74>
 800dec0:	1a8d      	subs	r5, r1, r2
 800dec2:	43eb      	mvns	r3, r5
 800dec4:	17db      	asrs	r3, r3, #31
 800dec6:	401d      	ands	r5, r3
 800dec8:	68a3      	ldr	r3, [r4, #8]
 800deca:	6922      	ldr	r2, [r4, #16]
 800decc:	4293      	cmp	r3, r2
 800dece:	dd01      	ble.n	800ded4 <_printf_common+0x80>
 800ded0:	1a9b      	subs	r3, r3, r2
 800ded2:	18ed      	adds	r5, r5, r3
 800ded4:	2700      	movs	r7, #0
 800ded6:	42bd      	cmp	r5, r7
 800ded8:	d120      	bne.n	800df1c <_printf_common+0xc8>
 800deda:	2000      	movs	r0, #0
 800dedc:	e010      	b.n	800df00 <_printf_common+0xac>
 800dede:	3701      	adds	r7, #1
 800dee0:	68e3      	ldr	r3, [r4, #12]
 800dee2:	682a      	ldr	r2, [r5, #0]
 800dee4:	1a9b      	subs	r3, r3, r2
 800dee6:	42bb      	cmp	r3, r7
 800dee8:	ddd2      	ble.n	800de90 <_printf_common+0x3c>
 800deea:	0022      	movs	r2, r4
 800deec:	2301      	movs	r3, #1
 800deee:	9901      	ldr	r1, [sp, #4]
 800def0:	9800      	ldr	r0, [sp, #0]
 800def2:	9e08      	ldr	r6, [sp, #32]
 800def4:	3219      	adds	r2, #25
 800def6:	47b0      	blx	r6
 800def8:	1c43      	adds	r3, r0, #1
 800defa:	d1f0      	bne.n	800dede <_printf_common+0x8a>
 800defc:	2001      	movs	r0, #1
 800defe:	4240      	negs	r0, r0
 800df00:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800df02:	2030      	movs	r0, #48	; 0x30
 800df04:	18e1      	adds	r1, r4, r3
 800df06:	3143      	adds	r1, #67	; 0x43
 800df08:	7008      	strb	r0, [r1, #0]
 800df0a:	0021      	movs	r1, r4
 800df0c:	1c5a      	adds	r2, r3, #1
 800df0e:	3145      	adds	r1, #69	; 0x45
 800df10:	7809      	ldrb	r1, [r1, #0]
 800df12:	18a2      	adds	r2, r4, r2
 800df14:	3243      	adds	r2, #67	; 0x43
 800df16:	3302      	adds	r3, #2
 800df18:	7011      	strb	r1, [r2, #0]
 800df1a:	e7c1      	b.n	800dea0 <_printf_common+0x4c>
 800df1c:	0022      	movs	r2, r4
 800df1e:	2301      	movs	r3, #1
 800df20:	9901      	ldr	r1, [sp, #4]
 800df22:	9800      	ldr	r0, [sp, #0]
 800df24:	9e08      	ldr	r6, [sp, #32]
 800df26:	321a      	adds	r2, #26
 800df28:	47b0      	blx	r6
 800df2a:	1c43      	adds	r3, r0, #1
 800df2c:	d0e6      	beq.n	800defc <_printf_common+0xa8>
 800df2e:	3701      	adds	r7, #1
 800df30:	e7d1      	b.n	800ded6 <_printf_common+0x82>
	...

0800df34 <_printf_i>:
 800df34:	b5f0      	push	{r4, r5, r6, r7, lr}
 800df36:	b08b      	sub	sp, #44	; 0x2c
 800df38:	9206      	str	r2, [sp, #24]
 800df3a:	000a      	movs	r2, r1
 800df3c:	3243      	adds	r2, #67	; 0x43
 800df3e:	9307      	str	r3, [sp, #28]
 800df40:	9005      	str	r0, [sp, #20]
 800df42:	9204      	str	r2, [sp, #16]
 800df44:	7e0a      	ldrb	r2, [r1, #24]
 800df46:	000c      	movs	r4, r1
 800df48:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800df4a:	2a78      	cmp	r2, #120	; 0x78
 800df4c:	d807      	bhi.n	800df5e <_printf_i+0x2a>
 800df4e:	2a62      	cmp	r2, #98	; 0x62
 800df50:	d809      	bhi.n	800df66 <_printf_i+0x32>
 800df52:	2a00      	cmp	r2, #0
 800df54:	d100      	bne.n	800df58 <_printf_i+0x24>
 800df56:	e0c1      	b.n	800e0dc <_printf_i+0x1a8>
 800df58:	2a58      	cmp	r2, #88	; 0x58
 800df5a:	d100      	bne.n	800df5e <_printf_i+0x2a>
 800df5c:	e08c      	b.n	800e078 <_printf_i+0x144>
 800df5e:	0026      	movs	r6, r4
 800df60:	3642      	adds	r6, #66	; 0x42
 800df62:	7032      	strb	r2, [r6, #0]
 800df64:	e022      	b.n	800dfac <_printf_i+0x78>
 800df66:	0010      	movs	r0, r2
 800df68:	3863      	subs	r0, #99	; 0x63
 800df6a:	2815      	cmp	r0, #21
 800df6c:	d8f7      	bhi.n	800df5e <_printf_i+0x2a>
 800df6e:	f7f2 f8d3 	bl	8000118 <__gnu_thumb1_case_shi>
 800df72:	0016      	.short	0x0016
 800df74:	fff6001f 	.word	0xfff6001f
 800df78:	fff6fff6 	.word	0xfff6fff6
 800df7c:	001ffff6 	.word	0x001ffff6
 800df80:	fff6fff6 	.word	0xfff6fff6
 800df84:	fff6fff6 	.word	0xfff6fff6
 800df88:	003600a8 	.word	0x003600a8
 800df8c:	fff6009a 	.word	0xfff6009a
 800df90:	00b9fff6 	.word	0x00b9fff6
 800df94:	0036fff6 	.word	0x0036fff6
 800df98:	fff6fff6 	.word	0xfff6fff6
 800df9c:	009e      	.short	0x009e
 800df9e:	0026      	movs	r6, r4
 800dfa0:	681a      	ldr	r2, [r3, #0]
 800dfa2:	3642      	adds	r6, #66	; 0x42
 800dfa4:	1d11      	adds	r1, r2, #4
 800dfa6:	6019      	str	r1, [r3, #0]
 800dfa8:	6813      	ldr	r3, [r2, #0]
 800dfaa:	7033      	strb	r3, [r6, #0]
 800dfac:	2301      	movs	r3, #1
 800dfae:	e0a7      	b.n	800e100 <_printf_i+0x1cc>
 800dfb0:	6808      	ldr	r0, [r1, #0]
 800dfb2:	6819      	ldr	r1, [r3, #0]
 800dfb4:	1d0a      	adds	r2, r1, #4
 800dfb6:	0605      	lsls	r5, r0, #24
 800dfb8:	d50b      	bpl.n	800dfd2 <_printf_i+0x9e>
 800dfba:	680d      	ldr	r5, [r1, #0]
 800dfbc:	601a      	str	r2, [r3, #0]
 800dfbe:	2d00      	cmp	r5, #0
 800dfc0:	da03      	bge.n	800dfca <_printf_i+0x96>
 800dfc2:	232d      	movs	r3, #45	; 0x2d
 800dfc4:	9a04      	ldr	r2, [sp, #16]
 800dfc6:	426d      	negs	r5, r5
 800dfc8:	7013      	strb	r3, [r2, #0]
 800dfca:	4b61      	ldr	r3, [pc, #388]	; (800e150 <_printf_i+0x21c>)
 800dfcc:	270a      	movs	r7, #10
 800dfce:	9303      	str	r3, [sp, #12]
 800dfd0:	e01b      	b.n	800e00a <_printf_i+0xd6>
 800dfd2:	680d      	ldr	r5, [r1, #0]
 800dfd4:	601a      	str	r2, [r3, #0]
 800dfd6:	0641      	lsls	r1, r0, #25
 800dfd8:	d5f1      	bpl.n	800dfbe <_printf_i+0x8a>
 800dfda:	b22d      	sxth	r5, r5
 800dfdc:	e7ef      	b.n	800dfbe <_printf_i+0x8a>
 800dfde:	680d      	ldr	r5, [r1, #0]
 800dfe0:	6819      	ldr	r1, [r3, #0]
 800dfe2:	1d08      	adds	r0, r1, #4
 800dfe4:	6018      	str	r0, [r3, #0]
 800dfe6:	062e      	lsls	r6, r5, #24
 800dfe8:	d501      	bpl.n	800dfee <_printf_i+0xba>
 800dfea:	680d      	ldr	r5, [r1, #0]
 800dfec:	e003      	b.n	800dff6 <_printf_i+0xc2>
 800dfee:	066d      	lsls	r5, r5, #25
 800dff0:	d5fb      	bpl.n	800dfea <_printf_i+0xb6>
 800dff2:	680d      	ldr	r5, [r1, #0]
 800dff4:	b2ad      	uxth	r5, r5
 800dff6:	4b56      	ldr	r3, [pc, #344]	; (800e150 <_printf_i+0x21c>)
 800dff8:	2708      	movs	r7, #8
 800dffa:	9303      	str	r3, [sp, #12]
 800dffc:	2a6f      	cmp	r2, #111	; 0x6f
 800dffe:	d000      	beq.n	800e002 <_printf_i+0xce>
 800e000:	3702      	adds	r7, #2
 800e002:	0023      	movs	r3, r4
 800e004:	2200      	movs	r2, #0
 800e006:	3343      	adds	r3, #67	; 0x43
 800e008:	701a      	strb	r2, [r3, #0]
 800e00a:	6863      	ldr	r3, [r4, #4]
 800e00c:	60a3      	str	r3, [r4, #8]
 800e00e:	2b00      	cmp	r3, #0
 800e010:	db03      	blt.n	800e01a <_printf_i+0xe6>
 800e012:	2204      	movs	r2, #4
 800e014:	6821      	ldr	r1, [r4, #0]
 800e016:	4391      	bics	r1, r2
 800e018:	6021      	str	r1, [r4, #0]
 800e01a:	2d00      	cmp	r5, #0
 800e01c:	d102      	bne.n	800e024 <_printf_i+0xf0>
 800e01e:	9e04      	ldr	r6, [sp, #16]
 800e020:	2b00      	cmp	r3, #0
 800e022:	d00c      	beq.n	800e03e <_printf_i+0x10a>
 800e024:	9e04      	ldr	r6, [sp, #16]
 800e026:	0028      	movs	r0, r5
 800e028:	0039      	movs	r1, r7
 800e02a:	f7f2 f905 	bl	8000238 <__aeabi_uidivmod>
 800e02e:	9b03      	ldr	r3, [sp, #12]
 800e030:	3e01      	subs	r6, #1
 800e032:	5c5b      	ldrb	r3, [r3, r1]
 800e034:	7033      	strb	r3, [r6, #0]
 800e036:	002b      	movs	r3, r5
 800e038:	0005      	movs	r5, r0
 800e03a:	429f      	cmp	r7, r3
 800e03c:	d9f3      	bls.n	800e026 <_printf_i+0xf2>
 800e03e:	2f08      	cmp	r7, #8
 800e040:	d109      	bne.n	800e056 <_printf_i+0x122>
 800e042:	6823      	ldr	r3, [r4, #0]
 800e044:	07db      	lsls	r3, r3, #31
 800e046:	d506      	bpl.n	800e056 <_printf_i+0x122>
 800e048:	6863      	ldr	r3, [r4, #4]
 800e04a:	6922      	ldr	r2, [r4, #16]
 800e04c:	4293      	cmp	r3, r2
 800e04e:	dc02      	bgt.n	800e056 <_printf_i+0x122>
 800e050:	2330      	movs	r3, #48	; 0x30
 800e052:	3e01      	subs	r6, #1
 800e054:	7033      	strb	r3, [r6, #0]
 800e056:	9b04      	ldr	r3, [sp, #16]
 800e058:	1b9b      	subs	r3, r3, r6
 800e05a:	6123      	str	r3, [r4, #16]
 800e05c:	9b07      	ldr	r3, [sp, #28]
 800e05e:	0021      	movs	r1, r4
 800e060:	9300      	str	r3, [sp, #0]
 800e062:	9805      	ldr	r0, [sp, #20]
 800e064:	9b06      	ldr	r3, [sp, #24]
 800e066:	aa09      	add	r2, sp, #36	; 0x24
 800e068:	f7ff fef4 	bl	800de54 <_printf_common>
 800e06c:	1c43      	adds	r3, r0, #1
 800e06e:	d14c      	bne.n	800e10a <_printf_i+0x1d6>
 800e070:	2001      	movs	r0, #1
 800e072:	4240      	negs	r0, r0
 800e074:	b00b      	add	sp, #44	; 0x2c
 800e076:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e078:	3145      	adds	r1, #69	; 0x45
 800e07a:	700a      	strb	r2, [r1, #0]
 800e07c:	4a34      	ldr	r2, [pc, #208]	; (800e150 <_printf_i+0x21c>)
 800e07e:	9203      	str	r2, [sp, #12]
 800e080:	681a      	ldr	r2, [r3, #0]
 800e082:	6821      	ldr	r1, [r4, #0]
 800e084:	ca20      	ldmia	r2!, {r5}
 800e086:	601a      	str	r2, [r3, #0]
 800e088:	0608      	lsls	r0, r1, #24
 800e08a:	d516      	bpl.n	800e0ba <_printf_i+0x186>
 800e08c:	07cb      	lsls	r3, r1, #31
 800e08e:	d502      	bpl.n	800e096 <_printf_i+0x162>
 800e090:	2320      	movs	r3, #32
 800e092:	4319      	orrs	r1, r3
 800e094:	6021      	str	r1, [r4, #0]
 800e096:	2710      	movs	r7, #16
 800e098:	2d00      	cmp	r5, #0
 800e09a:	d1b2      	bne.n	800e002 <_printf_i+0xce>
 800e09c:	2320      	movs	r3, #32
 800e09e:	6822      	ldr	r2, [r4, #0]
 800e0a0:	439a      	bics	r2, r3
 800e0a2:	6022      	str	r2, [r4, #0]
 800e0a4:	e7ad      	b.n	800e002 <_printf_i+0xce>
 800e0a6:	2220      	movs	r2, #32
 800e0a8:	6809      	ldr	r1, [r1, #0]
 800e0aa:	430a      	orrs	r2, r1
 800e0ac:	6022      	str	r2, [r4, #0]
 800e0ae:	0022      	movs	r2, r4
 800e0b0:	2178      	movs	r1, #120	; 0x78
 800e0b2:	3245      	adds	r2, #69	; 0x45
 800e0b4:	7011      	strb	r1, [r2, #0]
 800e0b6:	4a27      	ldr	r2, [pc, #156]	; (800e154 <_printf_i+0x220>)
 800e0b8:	e7e1      	b.n	800e07e <_printf_i+0x14a>
 800e0ba:	0648      	lsls	r0, r1, #25
 800e0bc:	d5e6      	bpl.n	800e08c <_printf_i+0x158>
 800e0be:	b2ad      	uxth	r5, r5
 800e0c0:	e7e4      	b.n	800e08c <_printf_i+0x158>
 800e0c2:	681a      	ldr	r2, [r3, #0]
 800e0c4:	680d      	ldr	r5, [r1, #0]
 800e0c6:	1d10      	adds	r0, r2, #4
 800e0c8:	6949      	ldr	r1, [r1, #20]
 800e0ca:	6018      	str	r0, [r3, #0]
 800e0cc:	6813      	ldr	r3, [r2, #0]
 800e0ce:	062e      	lsls	r6, r5, #24
 800e0d0:	d501      	bpl.n	800e0d6 <_printf_i+0x1a2>
 800e0d2:	6019      	str	r1, [r3, #0]
 800e0d4:	e002      	b.n	800e0dc <_printf_i+0x1a8>
 800e0d6:	066d      	lsls	r5, r5, #25
 800e0d8:	d5fb      	bpl.n	800e0d2 <_printf_i+0x19e>
 800e0da:	8019      	strh	r1, [r3, #0]
 800e0dc:	2300      	movs	r3, #0
 800e0de:	9e04      	ldr	r6, [sp, #16]
 800e0e0:	6123      	str	r3, [r4, #16]
 800e0e2:	e7bb      	b.n	800e05c <_printf_i+0x128>
 800e0e4:	681a      	ldr	r2, [r3, #0]
 800e0e6:	1d11      	adds	r1, r2, #4
 800e0e8:	6019      	str	r1, [r3, #0]
 800e0ea:	6816      	ldr	r6, [r2, #0]
 800e0ec:	2100      	movs	r1, #0
 800e0ee:	0030      	movs	r0, r6
 800e0f0:	6862      	ldr	r2, [r4, #4]
 800e0f2:	f000 f833 	bl	800e15c <memchr>
 800e0f6:	2800      	cmp	r0, #0
 800e0f8:	d001      	beq.n	800e0fe <_printf_i+0x1ca>
 800e0fa:	1b80      	subs	r0, r0, r6
 800e0fc:	6060      	str	r0, [r4, #4]
 800e0fe:	6863      	ldr	r3, [r4, #4]
 800e100:	6123      	str	r3, [r4, #16]
 800e102:	2300      	movs	r3, #0
 800e104:	9a04      	ldr	r2, [sp, #16]
 800e106:	7013      	strb	r3, [r2, #0]
 800e108:	e7a8      	b.n	800e05c <_printf_i+0x128>
 800e10a:	6923      	ldr	r3, [r4, #16]
 800e10c:	0032      	movs	r2, r6
 800e10e:	9906      	ldr	r1, [sp, #24]
 800e110:	9805      	ldr	r0, [sp, #20]
 800e112:	9d07      	ldr	r5, [sp, #28]
 800e114:	47a8      	blx	r5
 800e116:	1c43      	adds	r3, r0, #1
 800e118:	d0aa      	beq.n	800e070 <_printf_i+0x13c>
 800e11a:	6823      	ldr	r3, [r4, #0]
 800e11c:	079b      	lsls	r3, r3, #30
 800e11e:	d415      	bmi.n	800e14c <_printf_i+0x218>
 800e120:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e122:	68e0      	ldr	r0, [r4, #12]
 800e124:	4298      	cmp	r0, r3
 800e126:	daa5      	bge.n	800e074 <_printf_i+0x140>
 800e128:	0018      	movs	r0, r3
 800e12a:	e7a3      	b.n	800e074 <_printf_i+0x140>
 800e12c:	0022      	movs	r2, r4
 800e12e:	2301      	movs	r3, #1
 800e130:	9906      	ldr	r1, [sp, #24]
 800e132:	9805      	ldr	r0, [sp, #20]
 800e134:	9e07      	ldr	r6, [sp, #28]
 800e136:	3219      	adds	r2, #25
 800e138:	47b0      	blx	r6
 800e13a:	1c43      	adds	r3, r0, #1
 800e13c:	d098      	beq.n	800e070 <_printf_i+0x13c>
 800e13e:	3501      	adds	r5, #1
 800e140:	68e3      	ldr	r3, [r4, #12]
 800e142:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e144:	1a9b      	subs	r3, r3, r2
 800e146:	42ab      	cmp	r3, r5
 800e148:	dcf0      	bgt.n	800e12c <_printf_i+0x1f8>
 800e14a:	e7e9      	b.n	800e120 <_printf_i+0x1ec>
 800e14c:	2500      	movs	r5, #0
 800e14e:	e7f7      	b.n	800e140 <_printf_i+0x20c>
 800e150:	0800e575 	.word	0x0800e575
 800e154:	0800e586 	.word	0x0800e586

0800e158 <__retarget_lock_acquire_recursive>:
 800e158:	4770      	bx	lr

0800e15a <__retarget_lock_release_recursive>:
 800e15a:	4770      	bx	lr

0800e15c <memchr>:
 800e15c:	b2c9      	uxtb	r1, r1
 800e15e:	1882      	adds	r2, r0, r2
 800e160:	4290      	cmp	r0, r2
 800e162:	d101      	bne.n	800e168 <memchr+0xc>
 800e164:	2000      	movs	r0, #0
 800e166:	4770      	bx	lr
 800e168:	7803      	ldrb	r3, [r0, #0]
 800e16a:	428b      	cmp	r3, r1
 800e16c:	d0fb      	beq.n	800e166 <memchr+0xa>
 800e16e:	3001      	adds	r0, #1
 800e170:	e7f6      	b.n	800e160 <memchr+0x4>

0800e172 <memmove>:
 800e172:	b510      	push	{r4, lr}
 800e174:	4288      	cmp	r0, r1
 800e176:	d902      	bls.n	800e17e <memmove+0xc>
 800e178:	188b      	adds	r3, r1, r2
 800e17a:	4298      	cmp	r0, r3
 800e17c:	d303      	bcc.n	800e186 <memmove+0x14>
 800e17e:	2300      	movs	r3, #0
 800e180:	e007      	b.n	800e192 <memmove+0x20>
 800e182:	5c8b      	ldrb	r3, [r1, r2]
 800e184:	5483      	strb	r3, [r0, r2]
 800e186:	3a01      	subs	r2, #1
 800e188:	d2fb      	bcs.n	800e182 <memmove+0x10>
 800e18a:	bd10      	pop	{r4, pc}
 800e18c:	5ccc      	ldrb	r4, [r1, r3]
 800e18e:	54c4      	strb	r4, [r0, r3]
 800e190:	3301      	adds	r3, #1
 800e192:	429a      	cmp	r2, r3
 800e194:	d1fa      	bne.n	800e18c <memmove+0x1a>
 800e196:	e7f8      	b.n	800e18a <memmove+0x18>

0800e198 <_realloc_r>:
 800e198:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e19a:	0007      	movs	r7, r0
 800e19c:	000e      	movs	r6, r1
 800e19e:	0014      	movs	r4, r2
 800e1a0:	2900      	cmp	r1, #0
 800e1a2:	d105      	bne.n	800e1b0 <_realloc_r+0x18>
 800e1a4:	0011      	movs	r1, r2
 800e1a6:	f7ff fc3b 	bl	800da20 <_malloc_r>
 800e1aa:	0005      	movs	r5, r0
 800e1ac:	0028      	movs	r0, r5
 800e1ae:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800e1b0:	2a00      	cmp	r2, #0
 800e1b2:	d103      	bne.n	800e1bc <_realloc_r+0x24>
 800e1b4:	f7ff fbc8 	bl	800d948 <_free_r>
 800e1b8:	0025      	movs	r5, r4
 800e1ba:	e7f7      	b.n	800e1ac <_realloc_r+0x14>
 800e1bc:	f000 f81b 	bl	800e1f6 <_malloc_usable_size_r>
 800e1c0:	9001      	str	r0, [sp, #4]
 800e1c2:	4284      	cmp	r4, r0
 800e1c4:	d803      	bhi.n	800e1ce <_realloc_r+0x36>
 800e1c6:	0035      	movs	r5, r6
 800e1c8:	0843      	lsrs	r3, r0, #1
 800e1ca:	42a3      	cmp	r3, r4
 800e1cc:	d3ee      	bcc.n	800e1ac <_realloc_r+0x14>
 800e1ce:	0021      	movs	r1, r4
 800e1d0:	0038      	movs	r0, r7
 800e1d2:	f7ff fc25 	bl	800da20 <_malloc_r>
 800e1d6:	1e05      	subs	r5, r0, #0
 800e1d8:	d0e8      	beq.n	800e1ac <_realloc_r+0x14>
 800e1da:	9b01      	ldr	r3, [sp, #4]
 800e1dc:	0022      	movs	r2, r4
 800e1de:	429c      	cmp	r4, r3
 800e1e0:	d900      	bls.n	800e1e4 <_realloc_r+0x4c>
 800e1e2:	001a      	movs	r2, r3
 800e1e4:	0031      	movs	r1, r6
 800e1e6:	0028      	movs	r0, r5
 800e1e8:	f7ff fb9c 	bl	800d924 <memcpy>
 800e1ec:	0031      	movs	r1, r6
 800e1ee:	0038      	movs	r0, r7
 800e1f0:	f7ff fbaa 	bl	800d948 <_free_r>
 800e1f4:	e7da      	b.n	800e1ac <_realloc_r+0x14>

0800e1f6 <_malloc_usable_size_r>:
 800e1f6:	1f0b      	subs	r3, r1, #4
 800e1f8:	681b      	ldr	r3, [r3, #0]
 800e1fa:	1f18      	subs	r0, r3, #4
 800e1fc:	2b00      	cmp	r3, #0
 800e1fe:	da01      	bge.n	800e204 <_malloc_usable_size_r+0xe>
 800e200:	580b      	ldr	r3, [r1, r0]
 800e202:	18c0      	adds	r0, r0, r3
 800e204:	4770      	bx	lr
	...

0800e208 <_init>:
 800e208:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e20a:	46c0      	nop			; (mov r8, r8)
 800e20c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e20e:	bc08      	pop	{r3}
 800e210:	469e      	mov	lr, r3
 800e212:	4770      	bx	lr

0800e214 <_fini>:
 800e214:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e216:	46c0      	nop			; (mov r8, r8)
 800e218:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e21a:	bc08      	pop	{r3}
 800e21c:	469e      	mov	lr, r3
 800e21e:	4770      	bx	lr
